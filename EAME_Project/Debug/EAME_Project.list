
EAME_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003370  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c4  080035c4  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035cc  080035cc  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  080035d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000174  08003748  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003748  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6c0  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002196  00000000  00000000  0002d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00030740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017418  00000000  00000000  00031360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010887  00000000  00000000  00048778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d919  00000000  00000000  00058fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039fc  00000000  00000000  000e6968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080034f8 	.word	0x080034f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	080034f8 	.word	0x080034f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <key_next_press>:

uint8_t oldcount=0;
uint8_t count=0;


void key_next_press(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
		count=__HAL_TIM_GET_COUNTER(&htim3)/2;
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <key_next_press+0x3c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058e:	085b      	lsrs	r3, r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <key_next_press+0x40>)
 8000594:	701a      	strb	r2, [r3, #0]
		if(oldcount<count)
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <key_next_press+0x44>)
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <key_next_press+0x40>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d20c      	bcs.n	80005bc <key_next_press+0x38>
		{
			oldcount=count;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <key_next_press+0x40>)
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <key_next_press+0x44>)
 80005a8:	701a      	strb	r2, [r3, #0]
			if(key_next_func)
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <key_next_press+0x48>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <key_next_press+0x34>
				{
				(*key_next_func)();
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <key_next_press+0x48>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4798      	blx	r3


				}
			menu_refresh();
 80005b8:	f000 faee 	bl	8000b98 <menu_refresh>
		}




}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000210 	.word	0x20000210
 80005c4:	20000191 	.word	0x20000191
 80005c8:	20000190 	.word	0x20000190
 80005cc:	20000000 	.word	0x20000000

080005d0 <key_prev_press>:

void key_prev_press(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

	   count=__HAL_TIM_GET_COUNTER(&htim3)/2;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <key_prev_press+0x3c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005da:	085b      	lsrs	r3, r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <key_prev_press+0x40>)
 80005e0:	701a      	strb	r2, [r3, #0]
		if(oldcount>count)
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <key_prev_press+0x44>)
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <key_prev_press+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d90c      	bls.n	8000608 <key_prev_press+0x38>
		{
			oldcount=count;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <key_prev_press+0x40>)
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <key_prev_press+0x44>)
 80005f4:	701a      	strb	r2, [r3, #0]
			if(key_prev_func) (*key_prev_func)();
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <key_prev_press+0x48>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <key_prev_press+0x34>
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <key_prev_press+0x48>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4798      	blx	r3
			menu_refresh();
 8000604:	f000 fac8 	bl	8000b98 <menu_refresh>
		}

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000210 	.word	0x20000210
 8000610:	20000191 	.word	0x20000191
 8000614:	20000190 	.word	0x20000190
 8000618:	20000004 	.word	0x20000004

0800061c <key_enter_press>:



void key_enter_press(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

	if(key_enter_func) (*key_enter_func)();
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <key_enter_press+0x18>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <key_enter_press+0x12>
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <key_enter_press+0x18>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4798      	blx	r3


}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000008 	.word	0x20000008

08000638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x80>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000686:	2320      	movs	r3, #32
 8000688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	4808      	ldr	r0, [pc, #32]	; (80006bc <MX_GPIO_Init+0x84>)
 800069c:	f000 fe18 	bl	80012d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2017      	movs	r0, #23
 80006a6:	f000 fddc 	bl	8001262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006aa:	2017      	movs	r0, #23
 80006ac:	f000 fdf5 	bl	800129a <HAL_NVIC_EnableIRQ>

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000

080006c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_I2C1_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_I2C1_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_I2C1_Init+0x50>)
 80006de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_I2C1_Init+0x50>)
 80006fe:	f000 ff83 	bl	8001608 <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 fa40 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000194 	.word	0x20000194
 8000714:	40005400 	.word	0x40005400
 8000718:	000186a0 	.word	0x000186a0

0800071c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <HAL_I2C_MspInit+0x84>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d12b      	bne.n	8000796 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800075a:	23c0      	movs	r3, #192	; 0xc0
 800075c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075e:	2312      	movs	r3, #18
 8000760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076a:	2304      	movs	r3, #4
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <HAL_I2C_MspInit+0x8c>)
 8000776:	f000 fdab 	bl	80012d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40005400 	.word	0x40005400
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400

080007ac <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80007c2:	2308      	movs	r3, #8
 80007c4:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80007c6:	2028      	movs	r0, #40	; 0x28
 80007c8:	f000 fc4c 	bl	8001064 <HAL_Delay>
	lcd_init_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	461a      	mov	r2, r3
 80007d6:	2130      	movs	r1, #48	; 0x30
 80007d8:	f000 f82e 	bl	8000838 <lcd_init_write>
	HAL_Delay(5);
 80007dc:	2005      	movs	r0, #5
 80007de:	f000 fc41 	bl	8001064 <HAL_Delay>
	lcd_init_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	461a      	mov	r2, r3
 80007ec:	2130      	movs	r1, #48	; 0x30
 80007ee:	f000 f823 	bl	8000838 <lcd_init_write>
	HAL_Delay(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fc36 	bl	8001064 <HAL_Delay>
	lcd_init_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	461a      	mov	r2, r3
 8000802:	2130      	movs	r1, #48	; 0x30
 8000804:	f000 f818 	bl	8000838 <lcd_init_write>

	/* set 4-bit mode */
	lcd_init_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	461a      	mov	r2, r3
 8000812:	2102      	movs	r1, #2
 8000814:	f000 f810 	bl	8000838 <lcd_init_write>

	/* set cursor mode */
	lcd_init_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	461a      	mov	r2, r3
 8000822:	210c      	movs	r1, #12
 8000824:	f000 f808 	bl	8000838 <lcd_init_write>

	/* clear */
	lcd_clear(lcd);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f000 f8e2 	bl	80009f2 <lcd_clear>

}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <lcd_init_write>:


void lcd_init_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af02      	add	r7, sp, #8
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	460b      	mov	r3, r1
 8000844:	71bb      	strb	r3, [r7, #6]
 8000846:	4613      	mov	r3, r2
 8000848:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	f023 030f 	bic.w	r3, r3, #15
 8000850:	b2da      	uxtb	r2, r3
 8000852:	797b      	ldrb	r3, [r7, #5]
 8000854:	4313      	orrs	r3, r2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	b2db      	uxtb	r3, r3
 800085e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000860:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000864:	f023 030f 	bic.w	r3, r3, #15
 8000868:	b25a      	sxtb	r2, r3
 800086a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800086e:	4313      	orrs	r3, r2
 8000870:	b25b      	sxtb	r3, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	011b      	lsls	r3, r3, #4
 800087a:	b2da      	uxtb	r2, r3
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	4313      	orrs	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	b2db      	uxtb	r3, r3
 8000888:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	b25a      	sxtb	r2, r3
 8000890:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000894:	4313      	orrs	r3, r2
 8000896:	b25b      	sxtb	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	b299      	uxth	r1, r3
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2304      	movs	r3, #4
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <lcd_init_write+0x88>)
 80008ac:	f000 fff0 	bl	8001890 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80008b0:	2005      	movs	r0, #5
 80008b2:	f000 fbd7 	bl	8001064 <HAL_Delay>
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000194 	.word	0x20000194

080008c4 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	460b      	mov	r3, r1
 80008d0:	71bb      	strb	r3, [r7, #6]
 80008d2:	4613      	mov	r3, r2
 80008d4:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	f023 030f 	bic.w	r3, r3, #15
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	797b      	ldrb	r3, [r7, #5]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80008ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008f0:	f023 030f 	bic.w	r3, r3, #15
 80008f4:	b25a      	sxtb	r2, r3
 80008f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	b2da      	uxtb	r2, r3
 8000908:	797b      	ldrb	r3, [r7, #5]
 800090a:	4313      	orrs	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	b25a      	sxtb	r2, r3
 800091c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000920:	4313      	orrs	r3, r2
 8000922:	b25b      	sxtb	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	b299      	uxth	r1, r3
 800092c:	f107 020c 	add.w	r2, r7, #12
 8000930:	2364      	movs	r3, #100	; 0x64
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2304      	movs	r3, #4
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <lcd_write+0x80>)
 8000938:	f000 ffaa 	bl	8001890 <HAL_I2C_Master_Transmit>


}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000194 	.word	0x20000194

08000948 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	2300      	movs	r3, #0
 8000956:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000962:	2308      	movs	r3, #8
 8000964:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f843 	bl	80009f2 <lcd_clear>

	/* send first line data */
	lcd_init_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	7bfa      	ldrb	r2, [r7, #15]
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5f 	bl	8000838 <lcd_init_write>
	while(lcd->f_line[i])
 800097a:	e00f      	b.n	800099c <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7818      	ldrb	r0, [r3, #0]
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	7859      	ldrb	r1, [r3, #1]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	f7ff ff97 	bl	80008c4 <lcd_write>
		i++;
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	3301      	adds	r3, #1
 800099a:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1e9      	bne.n	800097c <lcd_display+0x34>
	}
	/* send second line data */
	i = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	73bb      	strb	r3, [r7, #14]
	lcd_init_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	7bfa      	ldrb	r2, [r7, #15]
 80009b2:	21c0      	movs	r1, #192	; 0xc0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff3f 	bl	8000838 <lcd_init_write>
	while(lcd->s_line[i])
 80009ba:	e00f      	b.n	80009dc <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7818      	ldrb	r0, [r3, #0]
 80009c0:	7bbb      	ldrb	r3, [r7, #14]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	7c99      	ldrb	r1, [r3, #18]
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	f7ff ff77 	bl	80008c4 <lcd_write>
		i++;
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	3301      	adds	r3, #1
 80009da:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80009dc:	7bbb      	ldrb	r3, [r7, #14]
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	7c9b      	ldrb	r3, [r3, #18]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1e9      	bne.n	80009bc <lcd_display+0x74>
	}

}
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	7bfa      	ldrb	r2, [r7, #15]
 8000a12:	2101      	movs	r1, #1
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff55 	bl	80008c4 <lcd_write>
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 faaa 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f836 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f7ff fe02 	bl	8000638 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a34:	f7ff fe44 	bl	80006c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000a38:	f000 f9dc 	bl	8000df4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000a3c:	213c      	movs	r1, #60	; 0x3c
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <main+0x60>)
 8000a40:	f001 ff18 	bl	8002874 <HAL_TIM_Encoder_Start>
    disp.addr= (0x27<<1);
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <main+0x64>)
 8000a46:	224e      	movs	r2, #78	; 0x4e
 8000a48:	701a      	strb	r2, [r3, #0]
    disp.bl= true;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <main+0x64>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    lcd_init(&disp);
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <main+0x64>)
 8000a54:	f7ff feaa 	bl	80007ac <lcd_init>
    sprintf((char*)disp.f_line,"costam");
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <main+0x68>)
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <main+0x6c>)
 8000a5c:	f002 f8de 	bl	8002c1c <siprintf>
    sprintf((char*)disp.s_line,"dziala");
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <main+0x70>)
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <main+0x74>)
 8000a64:	f002 f8da 	bl	8002c1c <siprintf>
    lcd_display(&disp);
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <main+0x64>)
 8000a6a:	f7ff ff6d 	bl	8000948 <lcd_display>
    menu_refresh();
 8000a6e:	f000 f893 	bl	8000b98 <menu_refresh>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {key_next_press();
 8000a72:	f7ff fd87 	bl	8000584 <key_next_press>
	  key_prev_press();
 8000a76:	f7ff fdab 	bl	80005d0 <key_prev_press>


	  //menu_refresh();
 HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f000 faf2 	bl	8001064 <HAL_Delay>
  {key_next_press();
 8000a80:	e7f7      	b.n	8000a72 <main+0x4e>
 8000a82:	bf00      	nop
 8000a84:	20000210 	.word	0x20000210
 8000a88:	200001e8 	.word	0x200001e8
 8000a8c:	08003510 	.word	0x08003510
 8000a90:	200001e9 	.word	0x200001e9
 8000a94:	08003518 	.word	0x08003518
 8000a98:	200001fa 	.word	0x200001fa

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	; 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	; 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 f8ae 	bl	8002c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <SystemClock_Config+0xcc>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a27      	ldr	r2, [pc, #156]	; (8000b68 <SystemClock_Config+0xcc>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <SystemClock_Config+0xcc>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <SystemClock_Config+0xd0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ae8:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <SystemClock_Config+0xd0>)
 8000aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <SystemClock_Config+0xd0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2310      	movs	r3, #16
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b10:	2308      	movs	r3, #8
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000b14:	2354      	movs	r3, #84	; 0x54
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 f9bb 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b30:	f000 f82c 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fc1d 	bl	8002390 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b5c:	f000 f816 	bl	8000b8c <Error_Handler>
  }
}
 8000b60:	bf00      	nop
 8000b62:	3750      	adds	r7, #80	; 0x50
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40007000 	.word	0x40007000

08000b70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin== SW_Pin)
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	2b20      	cmp	r3, #32
 8000b7e:	d101      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x14>
	{
		key_enter_press();
 8000b80:	f7ff fd4c 	bl	800061c <key_enter_press>


	}
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <menu_refresh>:

//1.volatile - nie działa
//2. wylaczyc optymalizacje - nie działą
//3. zakres widocznosci zmiennych

void menu_refresh() { // lcd_refresh();
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	sprintf((char*)(disp.f_line),currentPointer->name);
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <menu_refresh+0x48>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <menu_refresh+0x4c>)
 8000ba6:	f002 f839 	bl	8002c1c <siprintf>
	if(!currentPointer->next)
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <menu_refresh+0x48>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d104      	bne.n	8000bbe <menu_refresh+0x26>
	{	sprintf((char*)(disp.s_line)," ");}
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <menu_refresh+0x50>)
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <menu_refresh+0x54>)
 8000bb8:	f002 f830 	bl	8002c1c <siprintf>
 8000bbc:	e00b      	b.n	8000bd6 <menu_refresh+0x3e>
	else
	{
		nextPointer=currentPointer->next;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <menu_refresh+0x48>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <menu_refresh+0x58>)
 8000bc6:	6013      	str	r3, [r2, #0]
		sprintf((char*)(disp.s_line),nextPointer->name);}
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <menu_refresh+0x58>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <menu_refresh+0x54>)
 8000bd2:	f002 f823 	bl	8002c1c <siprintf>
	lcd_display(&disp);
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <menu_refresh+0x5c>)
 8000bd8:	f7ff feb6 	bl	8000948 <lcd_display>
	}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000fc 	.word	0x200000fc
 8000be4:	200001e9 	.word	0x200001e9
 8000be8:	08003574 	.word	0x08003574
 8000bec:	200001fa 	.word	0x200001fa
 8000bf0:	20000100 	.word	0x20000100
 8000bf4:	200001e8 	.word	0x200001e8

08000bf8 <menu_next>:

void menu_next() {
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
	if(!currentPointer->next)
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <menu_next+0x24>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d005      	beq.n	8000c12 <menu_next+0x1a>
	{return ;
	}
	else
	{
		currentPointer=currentPointer->next;
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <menu_next+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <menu_next+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e000      	b.n	8000c14 <menu_next+0x1c>
	{return ;
 8000c12:	bf00      	nop
	}

}
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	200000fc 	.word	0x200000fc

08000c20 <menu_prev>:

void menu_prev(void) {
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

	if(!currentPointer->prev)
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <menu_prev+0x24>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d005      	beq.n	8000c3a <menu_prev+0x1a>
	{	return ;
	}
	else
	{
		currentPointer=currentPointer->prev;
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <menu_prev+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <menu_prev+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e000      	b.n	8000c3c <menu_prev+0x1c>
	{	return ;
 8000c3a:	bf00      	nop
	}

}
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	200000fc 	.word	0x200000fc

08000c48 <menu_enter>:

void menu_enter(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

	if(!currentPointer->menu_function && currentPointer->child)
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <menu_enter+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10a      	bne.n	8000c6c <menu_enter+0x24>
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <menu_enter+0x40>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <menu_enter+0x24>
			{
				currentPointer=currentPointer->child;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <menu_enter+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <menu_enter+0x40>)
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e00b      	b.n	8000c84 <menu_enter+0x3c>
			}
			else if(currentPointer->menu_function)
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <menu_enter+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <menu_enter+0x3a>
			{
				currentPointer->menu_function(&currentPointer);
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <menu_enter+0x40>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <menu_enter+0x40>)
 8000c7e:	4798      	blx	r3
 8000c80:	e000      	b.n	8000c84 <menu_enter+0x3c>
			}
			else
			{
					return ;
 8000c82:	bf00      	nop
			}


}
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000fc 	.word	0x200000fc

08000c8c <go_back>:

extern void (*key_next_func)(void);
extern void (*key_prev_func)(void);
extern void (*key_enter_func)(void);

void go_back(menu_t** temp){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

	menu_t* currentPointer= *temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
	*temp =currentPointer->parent;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]

}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f96a 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 8000d58:	2020      	movs	r0, #32
 8000d5a:	f000 fc3d 	bl	80015d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f001 ff10 	bl	8002bb8 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20010000 	.word	0x20010000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	2000020c 	.word	0x2000020c
 8000dcc:	20000270 	.word	0x20000270

08000dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2224      	movs	r2, #36	; 0x24
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 ff02 	bl	8002c0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_TIM3_Init+0xa0>)
 8000e12:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <MX_TIM3_Init+0xa4>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_TIM3_Init+0xa0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM3_Init+0xa0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 181;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_TIM3_Init+0xa0>)
 8000e24:	22b5      	movs	r2, #181	; 0xb5
 8000e26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_TIM3_Init+0xa0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_TIM3_Init+0xa0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_TIM3_Init+0xa0>)
 8000e60:	f001 fc62 	bl	8002728 <HAL_TIM_Encoder_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000e6a:	f7ff fe8f 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <MX_TIM3_Init+0xa0>)
 8000e7c:	f001 fe2e 	bl	8002adc <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000e86:	f7ff fe81 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3730      	adds	r7, #48	; 0x30
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000210 	.word	0x20000210
 8000e98:	40000400 	.word	0x40000400

08000e9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <HAL_TIM_Encoder_MspInit+0x84>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d12b      	bne.n	8000f16 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_TIM_Encoder_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef6:	23c0      	movs	r3, #192	; 0xc0
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f06:	2302      	movs	r3, #2
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000f12:	f000 f9dd 	bl	80012d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40000400 	.word	0x40000400
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000

08000f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f48:	4c0b      	ldr	r4, [pc, #44]	; (8000f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f56:	f7ff ff3b 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f001 fe33 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fd61 	bl	8000a24 <main>
  bx  lr    
 8000f62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000f70:	080035d4 	.word	0x080035d4
  ldr r2, =_sbss
 8000f74:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000f78:	2000026c 	.word	0x2000026c

08000f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_Init+0x40>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_Init+0x40>)
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x40>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f94f 	bl	800124c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fe7c 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f967 	bl	80012b6 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001000:	f000 f92f 	bl	8001262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000104 	.word	0x20000104
 800101c:	2000010c 	.word	0x2000010c
 8001020:	20000108 	.word	0x20000108

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2000010c 	.word	0x2000010c
 8001048:	20000258 	.word	0x20000258

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000258 	.word	0x20000258

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000010c 	.word	0x2000010c

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <__NVIC_EnableIRQ+0x38>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <__NVIC_SetPriority+0x4c>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <__NVIC_SetPriority+0x50>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	3b04      	subs	r3, #4
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	4313      	orrs	r3, r2
         );
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001218:	d301      	bcc.n	800121e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121a:	2301      	movs	r3, #1
 800121c:	e00f      	b.n	800123e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <SysTick_Config+0x40>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001226:	210f      	movs	r1, #15
 8001228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800122c:	f7ff ff8e 	bl	800114c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SysTick_Config+0x40>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x40>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff29 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001274:	f7ff ff3e 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	6978      	ldr	r0, [r7, #20]
 8001280:	f7ff ff8e 	bl	80011a0 <NVIC_EncodePriority>
 8001284:	4602      	mov	r2, r0
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff5d 	bl	800114c <__NVIC_SetPriority>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff31 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffa2 	bl	8001208 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	e159      	b.n	80015a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8148 	bne.w	800159a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d005      	beq.n	8001322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131e:	2b02      	cmp	r3, #2
 8001320:	d130      	bne.n	8001384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001358:	2201      	movs	r2, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b03      	cmp	r3, #3
 800138e:	d017      	beq.n	80013c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d123      	bne.n	8001414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80a2 	beq.w	800159a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <HAL_GPIO_Init+0x2e8>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a56      	ldr	r2, [pc, #344]	; (80015b8 <HAL_GPIO_Init+0x2e8>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_GPIO_Init+0x2e8>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001472:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_GPIO_Init+0x2ec>)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <HAL_GPIO_Init+0x2f0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d019      	beq.n	80014d2 <HAL_GPIO_Init+0x202>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a48      	ldr	r2, [pc, #288]	; (80015c4 <HAL_GPIO_Init+0x2f4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x1fe>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a47      	ldr	r2, [pc, #284]	; (80015c8 <HAL_GPIO_Init+0x2f8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x1fa>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a46      	ldr	r2, [pc, #280]	; (80015cc <HAL_GPIO_Init+0x2fc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x1f6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a45      	ldr	r2, [pc, #276]	; (80015d0 <HAL_GPIO_Init+0x300>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x1f2>
 80014be:	2304      	movs	r3, #4
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014c2:	2307      	movs	r3, #7
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x2ec>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <HAL_GPIO_Init+0x304>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a2f      	ldr	r2, [pc, #188]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <HAL_GPIO_Init+0x304>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <HAL_GPIO_Init+0x304>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f aea2 	bls.w	80012ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40013c00 	.word	0x40013c00

080015d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff faba 	bl	8000b70 <HAL_GPIO_EXTI_Callback>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40013c00 	.word	0x40013c00

08001608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e12b      	b.n	8001872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff f874 	bl	800071c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	; 0x24
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800165a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800166a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800166c:	f001 f848 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8001670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a81      	ldr	r2, [pc, #516]	; (800187c <HAL_I2C_Init+0x274>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d807      	bhi.n	800168c <HAL_I2C_Init+0x84>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a80      	ldr	r2, [pc, #512]	; (8001880 <HAL_I2C_Init+0x278>)
 8001680:	4293      	cmp	r3, r2
 8001682:	bf94      	ite	ls
 8001684:	2301      	movls	r3, #1
 8001686:	2300      	movhi	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	e006      	b.n	800169a <HAL_I2C_Init+0x92>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a7d      	ldr	r2, [pc, #500]	; (8001884 <HAL_I2C_Init+0x27c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	bf94      	ite	ls
 8001694:	2301      	movls	r3, #1
 8001696:	2300      	movhi	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0e7      	b.n	8001872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a78      	ldr	r2, [pc, #480]	; (8001888 <HAL_I2C_Init+0x280>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0c9b      	lsrs	r3, r3, #18
 80016ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a6a      	ldr	r2, [pc, #424]	; (800187c <HAL_I2C_Init+0x274>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d802      	bhi.n	80016dc <HAL_I2C_Init+0xd4>
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3301      	adds	r3, #1
 80016da:	e009      	b.n	80016f0 <HAL_I2C_Init+0xe8>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	4a69      	ldr	r2, [pc, #420]	; (800188c <HAL_I2C_Init+0x284>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	3301      	adds	r3, #1
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	495c      	ldr	r1, [pc, #368]	; (800187c <HAL_I2C_Init+0x274>)
 800170c:	428b      	cmp	r3, r1
 800170e:	d819      	bhi.n	8001744 <HAL_I2C_Init+0x13c>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e59      	subs	r1, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fbb1 f3f3 	udiv	r3, r1, r3
 800171e:	1c59      	adds	r1, r3, #1
 8001720:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001724:	400b      	ands	r3, r1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <HAL_I2C_Init+0x138>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1e59      	subs	r1, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fbb1 f3f3 	udiv	r3, r1, r3
 8001738:	3301      	adds	r3, #1
 800173a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173e:	e051      	b.n	80017e4 <HAL_I2C_Init+0x1dc>
 8001740:	2304      	movs	r3, #4
 8001742:	e04f      	b.n	80017e4 <HAL_I2C_Init+0x1dc>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d111      	bne.n	8001770 <HAL_I2C_Init+0x168>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1e58      	subs	r0, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	440b      	add	r3, r1
 800175a:	fbb0 f3f3 	udiv	r3, r0, r3
 800175e:	3301      	adds	r3, #1
 8001760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e012      	b.n	8001796 <HAL_I2C_Init+0x18e>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1e58      	subs	r0, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6859      	ldr	r1, [r3, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	0099      	lsls	r1, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	fbb0 f3f3 	udiv	r3, r0, r3
 8001786:	3301      	adds	r3, #1
 8001788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_I2C_Init+0x196>
 800179a:	2301      	movs	r3, #1
 800179c:	e022      	b.n	80017e4 <HAL_I2C_Init+0x1dc>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10e      	bne.n	80017c4 <HAL_I2C_Init+0x1bc>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1e58      	subs	r0, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6859      	ldr	r1, [r3, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	440b      	add	r3, r1
 80017b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c2:	e00f      	b.n	80017e4 <HAL_I2C_Init+0x1dc>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1e58      	subs	r0, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6859      	ldr	r1, [r3, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	0099      	lsls	r1, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	6809      	ldr	r1, [r1, #0]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6911      	ldr	r1, [r2, #16]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68d2      	ldr	r2, [r2, #12]
 800181e:	4311      	orrs	r1, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	430b      	orrs	r3, r1
 8001826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2220      	movs	r2, #32
 800185e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	000186a0 	.word	0x000186a0
 8001880:	001e847f 	.word	0x001e847f
 8001884:	003d08ff 	.word	0x003d08ff
 8001888:	431bde83 	.word	0x431bde83
 800188c:	10624dd3 	.word	0x10624dd3

08001890 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	460b      	mov	r3, r1
 800189e:	817b      	strh	r3, [r7, #10]
 80018a0:	4613      	mov	r3, r2
 80018a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fbd2 	bl	800104c <HAL_GetTick>
 80018a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b20      	cmp	r3, #32
 80018b4:	f040 80e0 	bne.w	8001a78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2319      	movs	r3, #25
 80018be:	2201      	movs	r2, #1
 80018c0:	4970      	ldr	r1, [pc, #448]	; (8001a84 <HAL_I2C_Master_Transmit+0x1f4>)
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f964 	bl	8001b90 <I2C_WaitOnFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018ce:	2302      	movs	r3, #2
 80018d0:	e0d3      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_I2C_Master_Transmit+0x50>
 80018dc:	2302      	movs	r3, #2
 80018de:	e0cc      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d007      	beq.n	8001906 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0201 	orr.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001914:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2221      	movs	r2, #33	; 0x21
 800191a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2210      	movs	r2, #16
 8001922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	893a      	ldrh	r2, [r7, #8]
 8001936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4a50      	ldr	r2, [pc, #320]	; (8001a88 <HAL_I2C_Master_Transmit+0x1f8>)
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001948:	8979      	ldrh	r1, [r7, #10]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f89c 	bl	8001a8c <I2C_MasterRequestWrite>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e08d      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001974:	e066      	b.n	8001a44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	6a39      	ldr	r1, [r7, #32]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f9de 	bl	8001d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00d      	beq.n	80019a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	2b04      	cmp	r3, #4
 800198c:	d107      	bne.n	800199e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06b      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d11b      	bne.n	8001a18 <HAL_I2C_Master_Transmit+0x188>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d017      	beq.n	8001a18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	6a39      	ldr	r1, [r7, #32]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f9ce 	bl	8001dbe <I2C_WaitOnBTFFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00d      	beq.n	8001a44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d107      	bne.n	8001a40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d194      	bne.n	8001976 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	00100002 	.word	0x00100002
 8001a88:	ffff0000 	.word	0xffff0000

08001a8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d006      	beq.n	8001ab6 <I2C_MasterRequestWrite+0x2a>
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d003      	beq.n	8001ab6 <I2C_MasterRequestWrite+0x2a>
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ab4:	d108      	bne.n	8001ac8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e00b      	b.n	8001ae0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	2b12      	cmp	r3, #18
 8001ace:	d107      	bne.n	8001ae0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ade:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f84f 	bl	8001b90 <I2C_WaitOnFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00d      	beq.n	8001b14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b06:	d103      	bne.n	8001b10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e035      	b.n	8001b80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b1c:	d108      	bne.n	8001b30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b1e:	897b      	ldrh	r3, [r7, #10]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b2c:	611a      	str	r2, [r3, #16]
 8001b2e:	e01b      	b.n	8001b68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b30:	897b      	ldrh	r3, [r7, #10]
 8001b32:	11db      	asrs	r3, r3, #7
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f003 0306 	and.w	r3, r3, #6
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f063 030f 	orn	r3, r3, #15
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	490e      	ldr	r1, [pc, #56]	; (8001b88 <I2C_MasterRequestWrite+0xfc>)
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f875 	bl	8001c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e010      	b.n	8001b80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b5e:	897b      	ldrh	r3, [r7, #10]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <I2C_MasterRequestWrite+0x100>)
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f865 	bl	8001c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	00010008 	.word	0x00010008
 8001b8c:	00010002 	.word	0x00010002

08001b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba0:	e025      	b.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba8:	d021      	beq.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001baa:	f7ff fa4f 	bl	800104c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d302      	bcc.n	8001bc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d116      	bne.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e023      	b.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d10d      	bne.n	8001c14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4013      	ands	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	e00c      	b.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d0b6      	beq.n	8001ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c4c:	e051      	b.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5c:	d123      	bne.n	8001ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2220      	movs	r2, #32
 8001c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f043 0204 	orr.w	r2, r3, #4
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e046      	b.n	8001d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cac:	d021      	beq.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cae:	f7ff f9cd 	bl	800104c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d302      	bcc.n	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d116      	bne.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f043 0220 	orr.w	r2, r3, #32
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e020      	b.n	8001d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	0c1b      	lsrs	r3, r3, #16
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10c      	bne.n	8001d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4013      	ands	r3, r2
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bf14      	ite	ne
 8001d0e:	2301      	movne	r3, #1
 8001d10:	2300      	moveq	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	e00b      	b.n	8001d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	4013      	ands	r3, r2
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d18d      	bne.n	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d48:	e02d      	b.n	8001da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f878 	bl	8001e40 <I2C_IsAcknowledgeFailed>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e02d      	b.n	8001db6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d60:	d021      	beq.n	8001da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d62:	f7ff f973 	bl	800104c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d302      	bcc.n	8001d78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d116      	bne.n	8001da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f043 0220 	orr.w	r2, r3, #32
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e007      	b.n	8001db6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d1ca      	bne.n	8001d4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dca:	e02d      	b.n	8001e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f837 	bl	8001e40 <I2C_IsAcknowledgeFailed>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e02d      	b.n	8001e38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de2:	d021      	beq.n	8001e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de4:	f7ff f932 	bl	800104c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d302      	bcc.n	8001dfa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f043 0220 	orr.w	r2, r3, #32
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e007      	b.n	8001e38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d1ca      	bne.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e56:	d11b      	bne.n	8001e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e267      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d075      	beq.n	8001faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ebe:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eca:	4b85      	ldr	r3, [pc, #532]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d112      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed6:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	4b7e      	ldr	r3, [pc, #504]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d05b      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x108>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d157      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e242      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x74>
 8001f06:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x98>
 8001f1e:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6f      	ldr	r2, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a6c      	ldr	r2, [pc, #432]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f38:	4b69      	ldr	r3, [pc, #420]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a68      	ldr	r2, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a65      	ldr	r2, [pc, #404]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff f878 	bl	800104c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff f874 	bl	800104c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e207      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f864 	bl	800104c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff f860 	bl	800104c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1f3      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	4b51      	ldr	r3, [pc, #324]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0xe8>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d063      	beq.n	800207e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc2:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d11c      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d116      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e1c7      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4937      	ldr	r1, [pc, #220]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	e03a      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7ff f819 	bl	800104c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201e:	f7ff f815 	bl	800104c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1a8      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4925      	ldr	r1, [pc, #148]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe fff8 	bl	800104c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002060:	f7fe fff4 	bl	800104c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e187      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d036      	beq.n	80020f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d016      	beq.n	80020c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_RCC_OscConfig+0x248>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7fe ffd8 	bl	800104c <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a0:	f7fe ffd4 	bl	800104c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e167      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 80020b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x200>
 80020be:	e01b      	b.n	80020f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_OscConfig+0x248>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7fe ffc1 	bl	800104c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	e00e      	b.n	80020ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ce:	f7fe ffbd 	bl	800104c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d907      	bls.n	80020ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e150      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	42470000 	.word	0x42470000
 80020e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ea      	bne.n	80020ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8097 	beq.w	8002234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b7d      	ldr	r3, [pc, #500]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a7c      	ldr	r2, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b7a      	ldr	r3, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b77      	ldr	r3, [pc, #476]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b74      	ldr	r3, [pc, #464]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a73      	ldr	r2, [pc, #460]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7fe ff7d 	bl	800104c <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7fe ff79 	bl	800104c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e10c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x2ea>
 800217c:	4b64      	ldr	r3, [pc, #400]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a63      	ldr	r2, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x30c>
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a5e      	ldr	r2, [pc, #376]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a5b      	ldr	r2, [pc, #364]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 80021ac:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	4b55      	ldr	r3, [pc, #340]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a54      	ldr	r2, [pc, #336]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7fe ff3e 	bl	800104c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe ff3a 	bl	800104c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0cb      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ee      	beq.n	80021d4 <HAL_RCC_OscConfig+0x334>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7fe ff28 	bl	800104c <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7fe ff24 	bl	800104c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0b5      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ee      	bne.n	8002200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	4a38      	ldr	r2, [pc, #224]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a1 	beq.w	8002380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223e:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d05c      	beq.n	8002304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d141      	bne.n	80022d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_RCC_OscConfig+0x478>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fef8 	bl	800104c <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fef4 	bl	800104c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e087      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	3b01      	subs	r3, #1
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	491b      	ldr	r1, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x478>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe fecd 	bl	800104c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b6:	f7fe fec9 	bl	800104c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e05c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x416>
 80022d4:	e054      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_RCC_OscConfig+0x478>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe feb6 	bl	800104c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe feb2 	bl	800104c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e045      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x444>
 8002302:	e03d      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e038      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000
 8002318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x4ec>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d028      	beq.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d121      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002354:	4293      	cmp	r3, r2
 8002356:	d111      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0cc      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d90c      	bls.n	80023cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d044      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	2b03      	cmp	r3, #3
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e067      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7fe fde4 	bl	800104c <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe fde0 	bl	800104c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e04f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b25      	ldr	r3, [pc, #148]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d20c      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd44 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00
 800254c:	40023800 	.word	0x40023800
 8002550:	08003578 	.word	0x08003578
 8002554:	20000104 	.word	0x20000104
 8002558:	20000108 	.word	0x20000108

0800255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002560:	b090      	sub	sp, #64	; 0x40
 8002562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
 8002568:	2300      	movs	r3, #0
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800256c:	2300      	movs	r3, #0
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002574:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d00d      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x40>
 8002580:	2b08      	cmp	r3, #8
 8002582:	f200 80a1 	bhi.w	80026c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 800258a:	2b04      	cmp	r3, #4
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x3a>
 800258e:	e09b      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002594:	e09b      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002596:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800259a:	e098      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259c:	4b4f      	ldr	r3, [pc, #316]	; (80026dc <HAL_RCC_GetSysClockFreq+0x180>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a6:	4b4d      	ldr	r3, [pc, #308]	; (80026dc <HAL_RCC_GetSysClockFreq+0x180>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d028      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_RCC_GetSysClockFreq+0x180>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	2200      	movs	r2, #0
 80025ba:	623b      	str	r3, [r7, #32]
 80025bc:	627a      	str	r2, [r7, #36]	; 0x24
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025c4:	2100      	movs	r1, #0
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025c8:	fb03 f201 	mul.w	r2, r3, r1
 80025cc:	2300      	movs	r3, #0
 80025ce:	fb00 f303 	mul.w	r3, r0, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	4a43      	ldr	r2, [pc, #268]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025d6:	fba0 1202 	umull	r1, r2, r0, r2
 80025da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025dc:	460a      	mov	r2, r1
 80025de:	62ba      	str	r2, [r7, #40]	; 0x28
 80025e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e2:	4413      	add	r3, r2
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	2200      	movs	r2, #0
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	61fa      	str	r2, [r7, #28]
 80025ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025f6:	f7fd fe43 	bl	8000280 <__aeabi_uldivmod>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4613      	mov	r3, r2
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002602:	e053      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	2200      	movs	r2, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	617a      	str	r2, [r7, #20]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002616:	f04f 0b00 	mov.w	fp, #0
 800261a:	4652      	mov	r2, sl
 800261c:	465b      	mov	r3, fp
 800261e:	f04f 0000 	mov.w	r0, #0
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	0159      	lsls	r1, r3, #5
 8002628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800262c:	0150      	lsls	r0, r2, #5
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	ebb2 080a 	subs.w	r8, r2, sl
 8002636:	eb63 090b 	sbc.w	r9, r3, fp
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002646:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800264a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800264e:	ebb2 0408 	subs.w	r4, r2, r8
 8002652:	eb63 0509 	sbc.w	r5, r3, r9
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	00eb      	lsls	r3, r5, #3
 8002660:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002664:	00e2      	lsls	r2, r4, #3
 8002666:	4614      	mov	r4, r2
 8002668:	461d      	mov	r5, r3
 800266a:	eb14 030a 	adds.w	r3, r4, sl
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	eb45 030b 	adc.w	r3, r5, fp
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002682:	4629      	mov	r1, r5
 8002684:	028b      	lsls	r3, r1, #10
 8002686:	4621      	mov	r1, r4
 8002688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800268c:	4621      	mov	r1, r4
 800268e:	028a      	lsls	r2, r1, #10
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002696:	2200      	movs	r2, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	60fa      	str	r2, [r7, #12]
 800269c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026a0:	f7fd fdee 	bl	8000280 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4613      	mov	r3, r2
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_GetSysClockFreq+0x180>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	3301      	adds	r3, #1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80026bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026c6:	e002      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80026ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3740      	adds	r7, #64	; 0x40
 80026d4:	46bd      	mov	sp, r7
 80026d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	017d7840 	.word	0x017d7840

080026e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000104 	.word	0x20000104

08002700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002704:	f7ff fff0 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0a9b      	lsrs	r3, r3, #10
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4903      	ldr	r1, [pc, #12]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	08003588 	.word	0x08003588

08002728 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e097      	b.n	800286c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7fe fba3 	bl	8000e9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800276c:	f023 0307 	bic.w	r3, r3, #7
 8002770:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3304      	adds	r3, #4
 800277a:	4619      	mov	r1, r3
 800277c:	4610      	mov	r0, r2
 800277e:	f000 f907 	bl	8002990 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	4313      	orrs	r3, r2
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027c8:	f023 030c 	bic.w	r3, r3, #12
 80027cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	4313      	orrs	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	011a      	lsls	r2, r3, #4
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	031b      	lsls	r3, r3, #12
 80027f8:	4313      	orrs	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002806:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800280e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	4313      	orrs	r3, r2
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002884:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800288c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002894:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800289c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d110      	bne.n	80028c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d102      	bne.n	80028b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80028aa:	7b7b      	ldrb	r3, [r7, #13]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d001      	beq.n	80028b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e069      	b.n	8002988 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c4:	e031      	b.n	800292a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d110      	bne.n	80028ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80028d2:	7b3b      	ldrb	r3, [r7, #12]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d001      	beq.n	80028dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e055      	b.n	8002988 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ec:	e01d      	b.n	800292a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d108      	bne.n	8002906 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028fa:	7b7b      	ldrb	r3, [r7, #13]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d102      	bne.n	8002906 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002900:	7b3b      	ldrb	r3, [r7, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e03e      	b.n	8002988 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2202      	movs	r2, #2
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_TIM_Encoder_Start+0xc4>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b04      	cmp	r3, #4
 8002934:	d008      	beq.n	8002948 <HAL_TIM_Encoder_Start+0xd4>
 8002936:	e00f      	b.n	8002958 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2201      	movs	r2, #1
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f8a5 	bl	8002a90 <TIM_CCxChannelCmd>
      break;
 8002946:	e016      	b.n	8002976 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	2104      	movs	r1, #4
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f89d 	bl	8002a90 <TIM_CCxChannelCmd>
      break;
 8002956:	e00e      	b.n	8002976 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2201      	movs	r2, #1
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f895 	bl	8002a90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	2104      	movs	r1, #4
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f88e 	bl	8002a90 <TIM_CCxChannelCmd>
      break;
 8002974:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <TIM_Base_SetConfig+0xe4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00f      	beq.n	80029c8 <TIM_Base_SetConfig+0x38>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d00b      	beq.n	80029c8 <TIM_Base_SetConfig+0x38>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a31      	ldr	r2, [pc, #196]	; (8002a78 <TIM_Base_SetConfig+0xe8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d007      	beq.n	80029c8 <TIM_Base_SetConfig+0x38>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <TIM_Base_SetConfig+0xec>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d003      	beq.n	80029c8 <TIM_Base_SetConfig+0x38>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <TIM_Base_SetConfig+0xf0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d108      	bne.n	80029da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <TIM_Base_SetConfig+0xe4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01b      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d017      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <TIM_Base_SetConfig+0xe8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <TIM_Base_SetConfig+0xec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00f      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <TIM_Base_SetConfig+0xf0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00b      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <TIM_Base_SetConfig+0xf4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <TIM_Base_SetConfig+0xf8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d003      	beq.n	8002a1a <TIM_Base_SetConfig+0x8a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <TIM_Base_SetConfig+0xfc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d108      	bne.n	8002a2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <TIM_Base_SetConfig+0xe4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d103      	bne.n	8002a60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	615a      	str	r2, [r3, #20]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	40000c00 	.word	0x40000c00
 8002a84:	40014000 	.word	0x40014000
 8002a88:	40014400 	.word	0x40014400
 8002a8c:	40014800 	.word	0x40014800

08002a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1a      	ldr	r2, [r3, #32]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e050      	b.n	8002b96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d018      	beq.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d013      	beq.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00e      	beq.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a16      	ldr	r2, [pc, #88]	; (8002bac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10c      	bne.n	8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40000c00 	.word	0x40000c00
 8002bb4:	40014000 	.word	0x40014000

08002bb8 <__errno>:
 8002bb8:	4b01      	ldr	r3, [pc, #4]	; (8002bc0 <__errno+0x8>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000110 	.word	0x20000110

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4d0d      	ldr	r5, [pc, #52]	; (8002bfc <__libc_init_array+0x38>)
 8002bc8:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <__libc_init_array+0x3c>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	2600      	movs	r6, #0
 8002bd0:	42a6      	cmp	r6, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	4d0b      	ldr	r5, [pc, #44]	; (8002c04 <__libc_init_array+0x40>)
 8002bd6:	4c0c      	ldr	r4, [pc, #48]	; (8002c08 <__libc_init_array+0x44>)
 8002bd8:	f000 fc8e 	bl	80034f8 <_init>
 8002bdc:	1b64      	subs	r4, r4, r5
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	2600      	movs	r6, #0
 8002be2:	42a6      	cmp	r6, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bec:	4798      	blx	r3
 8002bee:	3601      	adds	r6, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf6:	4798      	blx	r3
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	080035cc 	.word	0x080035cc
 8002c00:	080035cc 	.word	0x080035cc
 8002c04:	080035cc 	.word	0x080035cc
 8002c08:	080035d0 	.word	0x080035d0

08002c0c <memset>:
 8002c0c:	4402      	add	r2, r0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d100      	bne.n	8002c16 <memset+0xa>
 8002c14:	4770      	bx	lr
 8002c16:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1a:	e7f9      	b.n	8002c10 <memset+0x4>

08002c1c <siprintf>:
 8002c1c:	b40e      	push	{r1, r2, r3}
 8002c1e:	b500      	push	{lr}
 8002c20:	b09c      	sub	sp, #112	; 0x70
 8002c22:	ab1d      	add	r3, sp, #116	; 0x74
 8002c24:	9002      	str	r0, [sp, #8]
 8002c26:	9006      	str	r0, [sp, #24]
 8002c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c2c:	4809      	ldr	r0, [pc, #36]	; (8002c54 <siprintf+0x38>)
 8002c2e:	9107      	str	r1, [sp, #28]
 8002c30:	9104      	str	r1, [sp, #16]
 8002c32:	4909      	ldr	r1, [pc, #36]	; (8002c58 <siprintf+0x3c>)
 8002c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c38:	9105      	str	r1, [sp, #20]
 8002c3a:	6800      	ldr	r0, [r0, #0]
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	a902      	add	r1, sp, #8
 8002c40:	f000 f868 	bl	8002d14 <_svfiprintf_r>
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	b01c      	add	sp, #112	; 0x70
 8002c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c50:	b003      	add	sp, #12
 8002c52:	4770      	bx	lr
 8002c54:	20000110 	.word	0x20000110
 8002c58:	ffff0208 	.word	0xffff0208

08002c5c <__ssputs_r>:
 8002c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c60:	688e      	ldr	r6, [r1, #8]
 8002c62:	429e      	cmp	r6, r3
 8002c64:	4682      	mov	sl, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4690      	mov	r8, r2
 8002c6a:	461f      	mov	r7, r3
 8002c6c:	d838      	bhi.n	8002ce0 <__ssputs_r+0x84>
 8002c6e:	898a      	ldrh	r2, [r1, #12]
 8002c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c74:	d032      	beq.n	8002cdc <__ssputs_r+0x80>
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	6909      	ldr	r1, [r1, #16]
 8002c7a:	eba5 0901 	sub.w	r9, r5, r1
 8002c7e:	6965      	ldr	r5, [r4, #20]
 8002c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c88:	3301      	adds	r3, #1
 8002c8a:	444b      	add	r3, r9
 8002c8c:	106d      	asrs	r5, r5, #1
 8002c8e:	429d      	cmp	r5, r3
 8002c90:	bf38      	it	cc
 8002c92:	461d      	movcc	r5, r3
 8002c94:	0553      	lsls	r3, r2, #21
 8002c96:	d531      	bpl.n	8002cfc <__ssputs_r+0xa0>
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f000 fb63 	bl	8003364 <_malloc_r>
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	b950      	cbnz	r0, 8002cb8 <__ssputs_r+0x5c>
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	f8ca 3000 	str.w	r3, [sl]
 8002ca8:	89a3      	ldrh	r3, [r4, #12]
 8002caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cae:	81a3      	strh	r3, [r4, #12]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb8:	6921      	ldr	r1, [r4, #16]
 8002cba:	464a      	mov	r2, r9
 8002cbc:	f000 fabe 	bl	800323c <memcpy>
 8002cc0:	89a3      	ldrh	r3, [r4, #12]
 8002cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cca:	81a3      	strh	r3, [r4, #12]
 8002ccc:	6126      	str	r6, [r4, #16]
 8002cce:	6165      	str	r5, [r4, #20]
 8002cd0:	444e      	add	r6, r9
 8002cd2:	eba5 0509 	sub.w	r5, r5, r9
 8002cd6:	6026      	str	r6, [r4, #0]
 8002cd8:	60a5      	str	r5, [r4, #8]
 8002cda:	463e      	mov	r6, r7
 8002cdc:	42be      	cmp	r6, r7
 8002cde:	d900      	bls.n	8002ce2 <__ssputs_r+0x86>
 8002ce0:	463e      	mov	r6, r7
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	4632      	mov	r2, r6
 8002ce6:	4641      	mov	r1, r8
 8002ce8:	f000 fab6 	bl	8003258 <memmove>
 8002cec:	68a3      	ldr	r3, [r4, #8]
 8002cee:	1b9b      	subs	r3, r3, r6
 8002cf0:	60a3      	str	r3, [r4, #8]
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	4433      	add	r3, r6
 8002cf6:	6023      	str	r3, [r4, #0]
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e7db      	b.n	8002cb4 <__ssputs_r+0x58>
 8002cfc:	462a      	mov	r2, r5
 8002cfe:	f000 fba5 	bl	800344c <_realloc_r>
 8002d02:	4606      	mov	r6, r0
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d1e1      	bne.n	8002ccc <__ssputs_r+0x70>
 8002d08:	6921      	ldr	r1, [r4, #16]
 8002d0a:	4650      	mov	r0, sl
 8002d0c:	f000 fabe 	bl	800328c <_free_r>
 8002d10:	e7c7      	b.n	8002ca2 <__ssputs_r+0x46>
	...

08002d14 <_svfiprintf_r>:
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	4698      	mov	r8, r3
 8002d1a:	898b      	ldrh	r3, [r1, #12]
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	b09d      	sub	sp, #116	; 0x74
 8002d20:	4607      	mov	r7, r0
 8002d22:	460d      	mov	r5, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	d50e      	bpl.n	8002d46 <_svfiprintf_r+0x32>
 8002d28:	690b      	ldr	r3, [r1, #16]
 8002d2a:	b963      	cbnz	r3, 8002d46 <_svfiprintf_r+0x32>
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	f000 fb19 	bl	8003364 <_malloc_r>
 8002d32:	6028      	str	r0, [r5, #0]
 8002d34:	6128      	str	r0, [r5, #16]
 8002d36:	b920      	cbnz	r0, 8002d42 <_svfiprintf_r+0x2e>
 8002d38:	230c      	movs	r3, #12
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d40:	e0d1      	b.n	8002ee6 <_svfiprintf_r+0x1d2>
 8002d42:	2340      	movs	r3, #64	; 0x40
 8002d44:	616b      	str	r3, [r5, #20]
 8002d46:	2300      	movs	r3, #0
 8002d48:	9309      	str	r3, [sp, #36]	; 0x24
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d54:	2330      	movs	r3, #48	; 0x30
 8002d56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002f00 <_svfiprintf_r+0x1ec>
 8002d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d5e:	f04f 0901 	mov.w	r9, #1
 8002d62:	4623      	mov	r3, r4
 8002d64:	469a      	mov	sl, r3
 8002d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d6a:	b10a      	cbz	r2, 8002d70 <_svfiprintf_r+0x5c>
 8002d6c:	2a25      	cmp	r2, #37	; 0x25
 8002d6e:	d1f9      	bne.n	8002d64 <_svfiprintf_r+0x50>
 8002d70:	ebba 0b04 	subs.w	fp, sl, r4
 8002d74:	d00b      	beq.n	8002d8e <_svfiprintf_r+0x7a>
 8002d76:	465b      	mov	r3, fp
 8002d78:	4622      	mov	r2, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	4638      	mov	r0, r7
 8002d7e:	f7ff ff6d 	bl	8002c5c <__ssputs_r>
 8002d82:	3001      	adds	r0, #1
 8002d84:	f000 80aa 	beq.w	8002edc <_svfiprintf_r+0x1c8>
 8002d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d8a:	445a      	add	r2, fp
 8002d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80a2 	beq.w	8002edc <_svfiprintf_r+0x1c8>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002da2:	f10a 0a01 	add.w	sl, sl, #1
 8002da6:	9304      	str	r3, [sp, #16]
 8002da8:	9307      	str	r3, [sp, #28]
 8002daa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dae:	931a      	str	r3, [sp, #104]	; 0x68
 8002db0:	4654      	mov	r4, sl
 8002db2:	2205      	movs	r2, #5
 8002db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db8:	4851      	ldr	r0, [pc, #324]	; (8002f00 <_svfiprintf_r+0x1ec>)
 8002dba:	f7fd fa11 	bl	80001e0 <memchr>
 8002dbe:	9a04      	ldr	r2, [sp, #16]
 8002dc0:	b9d8      	cbnz	r0, 8002dfa <_svfiprintf_r+0xe6>
 8002dc2:	06d0      	lsls	r0, r2, #27
 8002dc4:	bf44      	itt	mi
 8002dc6:	2320      	movmi	r3, #32
 8002dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dcc:	0711      	lsls	r1, r2, #28
 8002dce:	bf44      	itt	mi
 8002dd0:	232b      	movmi	r3, #43	; 0x2b
 8002dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8002dda:	2b2a      	cmp	r3, #42	; 0x2a
 8002ddc:	d015      	beq.n	8002e0a <_svfiprintf_r+0xf6>
 8002dde:	9a07      	ldr	r2, [sp, #28]
 8002de0:	4654      	mov	r4, sl
 8002de2:	2000      	movs	r0, #0
 8002de4:	f04f 0c0a 	mov.w	ip, #10
 8002de8:	4621      	mov	r1, r4
 8002dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dee:	3b30      	subs	r3, #48	; 0x30
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	d94e      	bls.n	8002e92 <_svfiprintf_r+0x17e>
 8002df4:	b1b0      	cbz	r0, 8002e24 <_svfiprintf_r+0x110>
 8002df6:	9207      	str	r2, [sp, #28]
 8002df8:	e014      	b.n	8002e24 <_svfiprintf_r+0x110>
 8002dfa:	eba0 0308 	sub.w	r3, r0, r8
 8002dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8002e02:	4313      	orrs	r3, r2
 8002e04:	9304      	str	r3, [sp, #16]
 8002e06:	46a2      	mov	sl, r4
 8002e08:	e7d2      	b.n	8002db0 <_svfiprintf_r+0x9c>
 8002e0a:	9b03      	ldr	r3, [sp, #12]
 8002e0c:	1d19      	adds	r1, r3, #4
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	9103      	str	r1, [sp, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bfbb      	ittet	lt
 8002e16:	425b      	neglt	r3, r3
 8002e18:	f042 0202 	orrlt.w	r2, r2, #2
 8002e1c:	9307      	strge	r3, [sp, #28]
 8002e1e:	9307      	strlt	r3, [sp, #28]
 8002e20:	bfb8      	it	lt
 8002e22:	9204      	strlt	r2, [sp, #16]
 8002e24:	7823      	ldrb	r3, [r4, #0]
 8002e26:	2b2e      	cmp	r3, #46	; 0x2e
 8002e28:	d10c      	bne.n	8002e44 <_svfiprintf_r+0x130>
 8002e2a:	7863      	ldrb	r3, [r4, #1]
 8002e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2e:	d135      	bne.n	8002e9c <_svfiprintf_r+0x188>
 8002e30:	9b03      	ldr	r3, [sp, #12]
 8002e32:	1d1a      	adds	r2, r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	9203      	str	r2, [sp, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bfb8      	it	lt
 8002e3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e40:	3402      	adds	r4, #2
 8002e42:	9305      	str	r3, [sp, #20]
 8002e44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f10 <_svfiprintf_r+0x1fc>
 8002e48:	7821      	ldrb	r1, [r4, #0]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4650      	mov	r0, sl
 8002e4e:	f7fd f9c7 	bl	80001e0 <memchr>
 8002e52:	b140      	cbz	r0, 8002e66 <_svfiprintf_r+0x152>
 8002e54:	2340      	movs	r3, #64	; 0x40
 8002e56:	eba0 000a 	sub.w	r0, r0, sl
 8002e5a:	fa03 f000 	lsl.w	r0, r3, r0
 8002e5e:	9b04      	ldr	r3, [sp, #16]
 8002e60:	4303      	orrs	r3, r0
 8002e62:	3401      	adds	r4, #1
 8002e64:	9304      	str	r3, [sp, #16]
 8002e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e6a:	4826      	ldr	r0, [pc, #152]	; (8002f04 <_svfiprintf_r+0x1f0>)
 8002e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e70:	2206      	movs	r2, #6
 8002e72:	f7fd f9b5 	bl	80001e0 <memchr>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d038      	beq.n	8002eec <_svfiprintf_r+0x1d8>
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <_svfiprintf_r+0x1f4>)
 8002e7c:	bb1b      	cbnz	r3, 8002ec6 <_svfiprintf_r+0x1b2>
 8002e7e:	9b03      	ldr	r3, [sp, #12]
 8002e80:	3307      	adds	r3, #7
 8002e82:	f023 0307 	bic.w	r3, r3, #7
 8002e86:	3308      	adds	r3, #8
 8002e88:	9303      	str	r3, [sp, #12]
 8002e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e8c:	4433      	add	r3, r6
 8002e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e90:	e767      	b.n	8002d62 <_svfiprintf_r+0x4e>
 8002e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e96:	460c      	mov	r4, r1
 8002e98:	2001      	movs	r0, #1
 8002e9a:	e7a5      	b.n	8002de8 <_svfiprintf_r+0xd4>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	3401      	adds	r4, #1
 8002ea0:	9305      	str	r3, [sp, #20]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 0c0a 	mov.w	ip, #10
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eae:	3a30      	subs	r2, #48	; 0x30
 8002eb0:	2a09      	cmp	r2, #9
 8002eb2:	d903      	bls.n	8002ebc <_svfiprintf_r+0x1a8>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0c5      	beq.n	8002e44 <_svfiprintf_r+0x130>
 8002eb8:	9105      	str	r1, [sp, #20]
 8002eba:	e7c3      	b.n	8002e44 <_svfiprintf_r+0x130>
 8002ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e7f0      	b.n	8002ea8 <_svfiprintf_r+0x194>
 8002ec6:	ab03      	add	r3, sp, #12
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	462a      	mov	r2, r5
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <_svfiprintf_r+0x1f8>)
 8002ece:	a904      	add	r1, sp, #16
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	f3af 8000 	nop.w
 8002ed6:	1c42      	adds	r2, r0, #1
 8002ed8:	4606      	mov	r6, r0
 8002eda:	d1d6      	bne.n	8002e8a <_svfiprintf_r+0x176>
 8002edc:	89ab      	ldrh	r3, [r5, #12]
 8002ede:	065b      	lsls	r3, r3, #25
 8002ee0:	f53f af2c 	bmi.w	8002d3c <_svfiprintf_r+0x28>
 8002ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ee6:	b01d      	add	sp, #116	; 0x74
 8002ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eec:	ab03      	add	r3, sp, #12
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <_svfiprintf_r+0x1f8>)
 8002ef4:	a904      	add	r1, sp, #16
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	f000 f87a 	bl	8002ff0 <_printf_i>
 8002efc:	e7eb      	b.n	8002ed6 <_svfiprintf_r+0x1c2>
 8002efe:	bf00      	nop
 8002f00:	08003590 	.word	0x08003590
 8002f04:	0800359a 	.word	0x0800359a
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	08002c5d 	.word	0x08002c5d
 8002f10:	08003596 	.word	0x08003596

08002f14 <_printf_common>:
 8002f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f18:	4616      	mov	r6, r2
 8002f1a:	4699      	mov	r9, r3
 8002f1c:	688a      	ldr	r2, [r1, #8]
 8002f1e:	690b      	ldr	r3, [r1, #16]
 8002f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f24:	4293      	cmp	r3, r2
 8002f26:	bfb8      	it	lt
 8002f28:	4613      	movlt	r3, r2
 8002f2a:	6033      	str	r3, [r6, #0]
 8002f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f30:	4607      	mov	r7, r0
 8002f32:	460c      	mov	r4, r1
 8002f34:	b10a      	cbz	r2, 8002f3a <_printf_common+0x26>
 8002f36:	3301      	adds	r3, #1
 8002f38:	6033      	str	r3, [r6, #0]
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	0699      	lsls	r1, r3, #26
 8002f3e:	bf42      	ittt	mi
 8002f40:	6833      	ldrmi	r3, [r6, #0]
 8002f42:	3302      	addmi	r3, #2
 8002f44:	6033      	strmi	r3, [r6, #0]
 8002f46:	6825      	ldr	r5, [r4, #0]
 8002f48:	f015 0506 	ands.w	r5, r5, #6
 8002f4c:	d106      	bne.n	8002f5c <_printf_common+0x48>
 8002f4e:	f104 0a19 	add.w	sl, r4, #25
 8002f52:	68e3      	ldr	r3, [r4, #12]
 8002f54:	6832      	ldr	r2, [r6, #0]
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	42ab      	cmp	r3, r5
 8002f5a:	dc26      	bgt.n	8002faa <_printf_common+0x96>
 8002f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f60:	1e13      	subs	r3, r2, #0
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	bf18      	it	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	0692      	lsls	r2, r2, #26
 8002f6a:	d42b      	bmi.n	8002fc4 <_printf_common+0xb0>
 8002f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f70:	4649      	mov	r1, r9
 8002f72:	4638      	mov	r0, r7
 8002f74:	47c0      	blx	r8
 8002f76:	3001      	adds	r0, #1
 8002f78:	d01e      	beq.n	8002fb8 <_printf_common+0xa4>
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	68e5      	ldr	r5, [r4, #12]
 8002f7e:	6832      	ldr	r2, [r6, #0]
 8002f80:	f003 0306 	and.w	r3, r3, #6
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	bf08      	it	eq
 8002f88:	1aad      	subeq	r5, r5, r2
 8002f8a:	68a3      	ldr	r3, [r4, #8]
 8002f8c:	6922      	ldr	r2, [r4, #16]
 8002f8e:	bf0c      	ite	eq
 8002f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f94:	2500      	movne	r5, #0
 8002f96:	4293      	cmp	r3, r2
 8002f98:	bfc4      	itt	gt
 8002f9a:	1a9b      	subgt	r3, r3, r2
 8002f9c:	18ed      	addgt	r5, r5, r3
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	341a      	adds	r4, #26
 8002fa2:	42b5      	cmp	r5, r6
 8002fa4:	d11a      	bne.n	8002fdc <_printf_common+0xc8>
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	e008      	b.n	8002fbc <_printf_common+0xa8>
 8002faa:	2301      	movs	r3, #1
 8002fac:	4652      	mov	r2, sl
 8002fae:	4649      	mov	r1, r9
 8002fb0:	4638      	mov	r0, r7
 8002fb2:	47c0      	blx	r8
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d103      	bne.n	8002fc0 <_printf_common+0xac>
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc0:	3501      	adds	r5, #1
 8002fc2:	e7c6      	b.n	8002f52 <_printf_common+0x3e>
 8002fc4:	18e1      	adds	r1, r4, r3
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	2030      	movs	r0, #48	; 0x30
 8002fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fce:	4422      	add	r2, r4
 8002fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fd8:	3302      	adds	r3, #2
 8002fda:	e7c7      	b.n	8002f6c <_printf_common+0x58>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	4622      	mov	r2, r4
 8002fe0:	4649      	mov	r1, r9
 8002fe2:	4638      	mov	r0, r7
 8002fe4:	47c0      	blx	r8
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d0e6      	beq.n	8002fb8 <_printf_common+0xa4>
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7d9      	b.n	8002fa2 <_printf_common+0x8e>
	...

08002ff0 <_printf_i>:
 8002ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff4:	7e0f      	ldrb	r7, [r1, #24]
 8002ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ff8:	2f78      	cmp	r7, #120	; 0x78
 8002ffa:	4691      	mov	r9, r2
 8002ffc:	4680      	mov	r8, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	469a      	mov	sl, r3
 8003002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003006:	d807      	bhi.n	8003018 <_printf_i+0x28>
 8003008:	2f62      	cmp	r7, #98	; 0x62
 800300a:	d80a      	bhi.n	8003022 <_printf_i+0x32>
 800300c:	2f00      	cmp	r7, #0
 800300e:	f000 80d8 	beq.w	80031c2 <_printf_i+0x1d2>
 8003012:	2f58      	cmp	r7, #88	; 0x58
 8003014:	f000 80a3 	beq.w	800315e <_printf_i+0x16e>
 8003018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800301c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003020:	e03a      	b.n	8003098 <_printf_i+0xa8>
 8003022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003026:	2b15      	cmp	r3, #21
 8003028:	d8f6      	bhi.n	8003018 <_printf_i+0x28>
 800302a:	a101      	add	r1, pc, #4	; (adr r1, 8003030 <_printf_i+0x40>)
 800302c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003030:	08003089 	.word	0x08003089
 8003034:	0800309d 	.word	0x0800309d
 8003038:	08003019 	.word	0x08003019
 800303c:	08003019 	.word	0x08003019
 8003040:	08003019 	.word	0x08003019
 8003044:	08003019 	.word	0x08003019
 8003048:	0800309d 	.word	0x0800309d
 800304c:	08003019 	.word	0x08003019
 8003050:	08003019 	.word	0x08003019
 8003054:	08003019 	.word	0x08003019
 8003058:	08003019 	.word	0x08003019
 800305c:	080031a9 	.word	0x080031a9
 8003060:	080030cd 	.word	0x080030cd
 8003064:	0800318b 	.word	0x0800318b
 8003068:	08003019 	.word	0x08003019
 800306c:	08003019 	.word	0x08003019
 8003070:	080031cb 	.word	0x080031cb
 8003074:	08003019 	.word	0x08003019
 8003078:	080030cd 	.word	0x080030cd
 800307c:	08003019 	.word	0x08003019
 8003080:	08003019 	.word	0x08003019
 8003084:	08003193 	.word	0x08003193
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	1d1a      	adds	r2, r3, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	602a      	str	r2, [r5, #0]
 8003090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003098:	2301      	movs	r3, #1
 800309a:	e0a3      	b.n	80031e4 <_printf_i+0x1f4>
 800309c:	6820      	ldr	r0, [r4, #0]
 800309e:	6829      	ldr	r1, [r5, #0]
 80030a0:	0606      	lsls	r6, r0, #24
 80030a2:	f101 0304 	add.w	r3, r1, #4
 80030a6:	d50a      	bpl.n	80030be <_printf_i+0xce>
 80030a8:	680e      	ldr	r6, [r1, #0]
 80030aa:	602b      	str	r3, [r5, #0]
 80030ac:	2e00      	cmp	r6, #0
 80030ae:	da03      	bge.n	80030b8 <_printf_i+0xc8>
 80030b0:	232d      	movs	r3, #45	; 0x2d
 80030b2:	4276      	negs	r6, r6
 80030b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b8:	485e      	ldr	r0, [pc, #376]	; (8003234 <_printf_i+0x244>)
 80030ba:	230a      	movs	r3, #10
 80030bc:	e019      	b.n	80030f2 <_printf_i+0x102>
 80030be:	680e      	ldr	r6, [r1, #0]
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030c6:	bf18      	it	ne
 80030c8:	b236      	sxthne	r6, r6
 80030ca:	e7ef      	b.n	80030ac <_printf_i+0xbc>
 80030cc:	682b      	ldr	r3, [r5, #0]
 80030ce:	6820      	ldr	r0, [r4, #0]
 80030d0:	1d19      	adds	r1, r3, #4
 80030d2:	6029      	str	r1, [r5, #0]
 80030d4:	0601      	lsls	r1, r0, #24
 80030d6:	d501      	bpl.n	80030dc <_printf_i+0xec>
 80030d8:	681e      	ldr	r6, [r3, #0]
 80030da:	e002      	b.n	80030e2 <_printf_i+0xf2>
 80030dc:	0646      	lsls	r6, r0, #25
 80030de:	d5fb      	bpl.n	80030d8 <_printf_i+0xe8>
 80030e0:	881e      	ldrh	r6, [r3, #0]
 80030e2:	4854      	ldr	r0, [pc, #336]	; (8003234 <_printf_i+0x244>)
 80030e4:	2f6f      	cmp	r7, #111	; 0x6f
 80030e6:	bf0c      	ite	eq
 80030e8:	2308      	moveq	r3, #8
 80030ea:	230a      	movne	r3, #10
 80030ec:	2100      	movs	r1, #0
 80030ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030f2:	6865      	ldr	r5, [r4, #4]
 80030f4:	60a5      	str	r5, [r4, #8]
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	bfa2      	ittt	ge
 80030fa:	6821      	ldrge	r1, [r4, #0]
 80030fc:	f021 0104 	bicge.w	r1, r1, #4
 8003100:	6021      	strge	r1, [r4, #0]
 8003102:	b90e      	cbnz	r6, 8003108 <_printf_i+0x118>
 8003104:	2d00      	cmp	r5, #0
 8003106:	d04d      	beq.n	80031a4 <_printf_i+0x1b4>
 8003108:	4615      	mov	r5, r2
 800310a:	fbb6 f1f3 	udiv	r1, r6, r3
 800310e:	fb03 6711 	mls	r7, r3, r1, r6
 8003112:	5dc7      	ldrb	r7, [r0, r7]
 8003114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003118:	4637      	mov	r7, r6
 800311a:	42bb      	cmp	r3, r7
 800311c:	460e      	mov	r6, r1
 800311e:	d9f4      	bls.n	800310a <_printf_i+0x11a>
 8003120:	2b08      	cmp	r3, #8
 8003122:	d10b      	bne.n	800313c <_printf_i+0x14c>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	07de      	lsls	r6, r3, #31
 8003128:	d508      	bpl.n	800313c <_printf_i+0x14c>
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	6861      	ldr	r1, [r4, #4]
 800312e:	4299      	cmp	r1, r3
 8003130:	bfde      	ittt	le
 8003132:	2330      	movle	r3, #48	; 0x30
 8003134:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003138:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800313c:	1b52      	subs	r2, r2, r5
 800313e:	6122      	str	r2, [r4, #16]
 8003140:	f8cd a000 	str.w	sl, [sp]
 8003144:	464b      	mov	r3, r9
 8003146:	aa03      	add	r2, sp, #12
 8003148:	4621      	mov	r1, r4
 800314a:	4640      	mov	r0, r8
 800314c:	f7ff fee2 	bl	8002f14 <_printf_common>
 8003150:	3001      	adds	r0, #1
 8003152:	d14c      	bne.n	80031ee <_printf_i+0x1fe>
 8003154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003158:	b004      	add	sp, #16
 800315a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800315e:	4835      	ldr	r0, [pc, #212]	; (8003234 <_printf_i+0x244>)
 8003160:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003164:	6829      	ldr	r1, [r5, #0]
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f851 6b04 	ldr.w	r6, [r1], #4
 800316c:	6029      	str	r1, [r5, #0]
 800316e:	061d      	lsls	r5, r3, #24
 8003170:	d514      	bpl.n	800319c <_printf_i+0x1ac>
 8003172:	07df      	lsls	r7, r3, #31
 8003174:	bf44      	itt	mi
 8003176:	f043 0320 	orrmi.w	r3, r3, #32
 800317a:	6023      	strmi	r3, [r4, #0]
 800317c:	b91e      	cbnz	r6, 8003186 <_printf_i+0x196>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	f023 0320 	bic.w	r3, r3, #32
 8003184:	6023      	str	r3, [r4, #0]
 8003186:	2310      	movs	r3, #16
 8003188:	e7b0      	b.n	80030ec <_printf_i+0xfc>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	f043 0320 	orr.w	r3, r3, #32
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	2378      	movs	r3, #120	; 0x78
 8003194:	4828      	ldr	r0, [pc, #160]	; (8003238 <_printf_i+0x248>)
 8003196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800319a:	e7e3      	b.n	8003164 <_printf_i+0x174>
 800319c:	0659      	lsls	r1, r3, #25
 800319e:	bf48      	it	mi
 80031a0:	b2b6      	uxthmi	r6, r6
 80031a2:	e7e6      	b.n	8003172 <_printf_i+0x182>
 80031a4:	4615      	mov	r5, r2
 80031a6:	e7bb      	b.n	8003120 <_printf_i+0x130>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	6826      	ldr	r6, [r4, #0]
 80031ac:	6961      	ldr	r1, [r4, #20]
 80031ae:	1d18      	adds	r0, r3, #4
 80031b0:	6028      	str	r0, [r5, #0]
 80031b2:	0635      	lsls	r5, r6, #24
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	d501      	bpl.n	80031bc <_printf_i+0x1cc>
 80031b8:	6019      	str	r1, [r3, #0]
 80031ba:	e002      	b.n	80031c2 <_printf_i+0x1d2>
 80031bc:	0670      	lsls	r0, r6, #25
 80031be:	d5fb      	bpl.n	80031b8 <_printf_i+0x1c8>
 80031c0:	8019      	strh	r1, [r3, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	6123      	str	r3, [r4, #16]
 80031c6:	4615      	mov	r5, r2
 80031c8:	e7ba      	b.n	8003140 <_printf_i+0x150>
 80031ca:	682b      	ldr	r3, [r5, #0]
 80031cc:	1d1a      	adds	r2, r3, #4
 80031ce:	602a      	str	r2, [r5, #0]
 80031d0:	681d      	ldr	r5, [r3, #0]
 80031d2:	6862      	ldr	r2, [r4, #4]
 80031d4:	2100      	movs	r1, #0
 80031d6:	4628      	mov	r0, r5
 80031d8:	f7fd f802 	bl	80001e0 <memchr>
 80031dc:	b108      	cbz	r0, 80031e2 <_printf_i+0x1f2>
 80031de:	1b40      	subs	r0, r0, r5
 80031e0:	6060      	str	r0, [r4, #4]
 80031e2:	6863      	ldr	r3, [r4, #4]
 80031e4:	6123      	str	r3, [r4, #16]
 80031e6:	2300      	movs	r3, #0
 80031e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ec:	e7a8      	b.n	8003140 <_printf_i+0x150>
 80031ee:	6923      	ldr	r3, [r4, #16]
 80031f0:	462a      	mov	r2, r5
 80031f2:	4649      	mov	r1, r9
 80031f4:	4640      	mov	r0, r8
 80031f6:	47d0      	blx	sl
 80031f8:	3001      	adds	r0, #1
 80031fa:	d0ab      	beq.n	8003154 <_printf_i+0x164>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	079b      	lsls	r3, r3, #30
 8003200:	d413      	bmi.n	800322a <_printf_i+0x23a>
 8003202:	68e0      	ldr	r0, [r4, #12]
 8003204:	9b03      	ldr	r3, [sp, #12]
 8003206:	4298      	cmp	r0, r3
 8003208:	bfb8      	it	lt
 800320a:	4618      	movlt	r0, r3
 800320c:	e7a4      	b.n	8003158 <_printf_i+0x168>
 800320e:	2301      	movs	r3, #1
 8003210:	4632      	mov	r2, r6
 8003212:	4649      	mov	r1, r9
 8003214:	4640      	mov	r0, r8
 8003216:	47d0      	blx	sl
 8003218:	3001      	adds	r0, #1
 800321a:	d09b      	beq.n	8003154 <_printf_i+0x164>
 800321c:	3501      	adds	r5, #1
 800321e:	68e3      	ldr	r3, [r4, #12]
 8003220:	9903      	ldr	r1, [sp, #12]
 8003222:	1a5b      	subs	r3, r3, r1
 8003224:	42ab      	cmp	r3, r5
 8003226:	dcf2      	bgt.n	800320e <_printf_i+0x21e>
 8003228:	e7eb      	b.n	8003202 <_printf_i+0x212>
 800322a:	2500      	movs	r5, #0
 800322c:	f104 0619 	add.w	r6, r4, #25
 8003230:	e7f5      	b.n	800321e <_printf_i+0x22e>
 8003232:	bf00      	nop
 8003234:	080035a1 	.word	0x080035a1
 8003238:	080035b2 	.word	0x080035b2

0800323c <memcpy>:
 800323c:	440a      	add	r2, r1
 800323e:	4291      	cmp	r1, r2
 8003240:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003244:	d100      	bne.n	8003248 <memcpy+0xc>
 8003246:	4770      	bx	lr
 8003248:	b510      	push	{r4, lr}
 800324a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800324e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003252:	4291      	cmp	r1, r2
 8003254:	d1f9      	bne.n	800324a <memcpy+0xe>
 8003256:	bd10      	pop	{r4, pc}

08003258 <memmove>:
 8003258:	4288      	cmp	r0, r1
 800325a:	b510      	push	{r4, lr}
 800325c:	eb01 0402 	add.w	r4, r1, r2
 8003260:	d902      	bls.n	8003268 <memmove+0x10>
 8003262:	4284      	cmp	r4, r0
 8003264:	4623      	mov	r3, r4
 8003266:	d807      	bhi.n	8003278 <memmove+0x20>
 8003268:	1e43      	subs	r3, r0, #1
 800326a:	42a1      	cmp	r1, r4
 800326c:	d008      	beq.n	8003280 <memmove+0x28>
 800326e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003276:	e7f8      	b.n	800326a <memmove+0x12>
 8003278:	4402      	add	r2, r0
 800327a:	4601      	mov	r1, r0
 800327c:	428a      	cmp	r2, r1
 800327e:	d100      	bne.n	8003282 <memmove+0x2a>
 8003280:	bd10      	pop	{r4, pc}
 8003282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800328a:	e7f7      	b.n	800327c <memmove+0x24>

0800328c <_free_r>:
 800328c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800328e:	2900      	cmp	r1, #0
 8003290:	d044      	beq.n	800331c <_free_r+0x90>
 8003292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003296:	9001      	str	r0, [sp, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f1a1 0404 	sub.w	r4, r1, #4
 800329e:	bfb8      	it	lt
 80032a0:	18e4      	addlt	r4, r4, r3
 80032a2:	f000 f913 	bl	80034cc <__malloc_lock>
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <_free_r+0x94>)
 80032a8:	9801      	ldr	r0, [sp, #4]
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	b933      	cbnz	r3, 80032bc <_free_r+0x30>
 80032ae:	6063      	str	r3, [r4, #4]
 80032b0:	6014      	str	r4, [r2, #0]
 80032b2:	b003      	add	sp, #12
 80032b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032b8:	f000 b90e 	b.w	80034d8 <__malloc_unlock>
 80032bc:	42a3      	cmp	r3, r4
 80032be:	d908      	bls.n	80032d2 <_free_r+0x46>
 80032c0:	6825      	ldr	r5, [r4, #0]
 80032c2:	1961      	adds	r1, r4, r5
 80032c4:	428b      	cmp	r3, r1
 80032c6:	bf01      	itttt	eq
 80032c8:	6819      	ldreq	r1, [r3, #0]
 80032ca:	685b      	ldreq	r3, [r3, #4]
 80032cc:	1949      	addeq	r1, r1, r5
 80032ce:	6021      	streq	r1, [r4, #0]
 80032d0:	e7ed      	b.n	80032ae <_free_r+0x22>
 80032d2:	461a      	mov	r2, r3
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	b10b      	cbz	r3, 80032dc <_free_r+0x50>
 80032d8:	42a3      	cmp	r3, r4
 80032da:	d9fa      	bls.n	80032d2 <_free_r+0x46>
 80032dc:	6811      	ldr	r1, [r2, #0]
 80032de:	1855      	adds	r5, r2, r1
 80032e0:	42a5      	cmp	r5, r4
 80032e2:	d10b      	bne.n	80032fc <_free_r+0x70>
 80032e4:	6824      	ldr	r4, [r4, #0]
 80032e6:	4421      	add	r1, r4
 80032e8:	1854      	adds	r4, r2, r1
 80032ea:	42a3      	cmp	r3, r4
 80032ec:	6011      	str	r1, [r2, #0]
 80032ee:	d1e0      	bne.n	80032b2 <_free_r+0x26>
 80032f0:	681c      	ldr	r4, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	6053      	str	r3, [r2, #4]
 80032f6:	4421      	add	r1, r4
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	e7da      	b.n	80032b2 <_free_r+0x26>
 80032fc:	d902      	bls.n	8003304 <_free_r+0x78>
 80032fe:	230c      	movs	r3, #12
 8003300:	6003      	str	r3, [r0, #0]
 8003302:	e7d6      	b.n	80032b2 <_free_r+0x26>
 8003304:	6825      	ldr	r5, [r4, #0]
 8003306:	1961      	adds	r1, r4, r5
 8003308:	428b      	cmp	r3, r1
 800330a:	bf04      	itt	eq
 800330c:	6819      	ldreq	r1, [r3, #0]
 800330e:	685b      	ldreq	r3, [r3, #4]
 8003310:	6063      	str	r3, [r4, #4]
 8003312:	bf04      	itt	eq
 8003314:	1949      	addeq	r1, r1, r5
 8003316:	6021      	streq	r1, [r4, #0]
 8003318:	6054      	str	r4, [r2, #4]
 800331a:	e7ca      	b.n	80032b2 <_free_r+0x26>
 800331c:	b003      	add	sp, #12
 800331e:	bd30      	pop	{r4, r5, pc}
 8003320:	2000025c 	.word	0x2000025c

08003324 <sbrk_aligned>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	4e0e      	ldr	r6, [pc, #56]	; (8003360 <sbrk_aligned+0x3c>)
 8003328:	460c      	mov	r4, r1
 800332a:	6831      	ldr	r1, [r6, #0]
 800332c:	4605      	mov	r5, r0
 800332e:	b911      	cbnz	r1, 8003336 <sbrk_aligned+0x12>
 8003330:	f000 f8bc 	bl	80034ac <_sbrk_r>
 8003334:	6030      	str	r0, [r6, #0]
 8003336:	4621      	mov	r1, r4
 8003338:	4628      	mov	r0, r5
 800333a:	f000 f8b7 	bl	80034ac <_sbrk_r>
 800333e:	1c43      	adds	r3, r0, #1
 8003340:	d00a      	beq.n	8003358 <sbrk_aligned+0x34>
 8003342:	1cc4      	adds	r4, r0, #3
 8003344:	f024 0403 	bic.w	r4, r4, #3
 8003348:	42a0      	cmp	r0, r4
 800334a:	d007      	beq.n	800335c <sbrk_aligned+0x38>
 800334c:	1a21      	subs	r1, r4, r0
 800334e:	4628      	mov	r0, r5
 8003350:	f000 f8ac 	bl	80034ac <_sbrk_r>
 8003354:	3001      	adds	r0, #1
 8003356:	d101      	bne.n	800335c <sbrk_aligned+0x38>
 8003358:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800335c:	4620      	mov	r0, r4
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	20000260 	.word	0x20000260

08003364 <_malloc_r>:
 8003364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003368:	1ccd      	adds	r5, r1, #3
 800336a:	f025 0503 	bic.w	r5, r5, #3
 800336e:	3508      	adds	r5, #8
 8003370:	2d0c      	cmp	r5, #12
 8003372:	bf38      	it	cc
 8003374:	250c      	movcc	r5, #12
 8003376:	2d00      	cmp	r5, #0
 8003378:	4607      	mov	r7, r0
 800337a:	db01      	blt.n	8003380 <_malloc_r+0x1c>
 800337c:	42a9      	cmp	r1, r5
 800337e:	d905      	bls.n	800338c <_malloc_r+0x28>
 8003380:	230c      	movs	r3, #12
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	2600      	movs	r6, #0
 8003386:	4630      	mov	r0, r6
 8003388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800338c:	4e2e      	ldr	r6, [pc, #184]	; (8003448 <_malloc_r+0xe4>)
 800338e:	f000 f89d 	bl	80034cc <__malloc_lock>
 8003392:	6833      	ldr	r3, [r6, #0]
 8003394:	461c      	mov	r4, r3
 8003396:	bb34      	cbnz	r4, 80033e6 <_malloc_r+0x82>
 8003398:	4629      	mov	r1, r5
 800339a:	4638      	mov	r0, r7
 800339c:	f7ff ffc2 	bl	8003324 <sbrk_aligned>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	4604      	mov	r4, r0
 80033a4:	d14d      	bne.n	8003442 <_malloc_r+0xde>
 80033a6:	6834      	ldr	r4, [r6, #0]
 80033a8:	4626      	mov	r6, r4
 80033aa:	2e00      	cmp	r6, #0
 80033ac:	d140      	bne.n	8003430 <_malloc_r+0xcc>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	4631      	mov	r1, r6
 80033b2:	4638      	mov	r0, r7
 80033b4:	eb04 0803 	add.w	r8, r4, r3
 80033b8:	f000 f878 	bl	80034ac <_sbrk_r>
 80033bc:	4580      	cmp	r8, r0
 80033be:	d13a      	bne.n	8003436 <_malloc_r+0xd2>
 80033c0:	6821      	ldr	r1, [r4, #0]
 80033c2:	3503      	adds	r5, #3
 80033c4:	1a6d      	subs	r5, r5, r1
 80033c6:	f025 0503 	bic.w	r5, r5, #3
 80033ca:	3508      	adds	r5, #8
 80033cc:	2d0c      	cmp	r5, #12
 80033ce:	bf38      	it	cc
 80033d0:	250c      	movcc	r5, #12
 80033d2:	4629      	mov	r1, r5
 80033d4:	4638      	mov	r0, r7
 80033d6:	f7ff ffa5 	bl	8003324 <sbrk_aligned>
 80033da:	3001      	adds	r0, #1
 80033dc:	d02b      	beq.n	8003436 <_malloc_r+0xd2>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	442b      	add	r3, r5
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	e00e      	b.n	8003404 <_malloc_r+0xa0>
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	1b52      	subs	r2, r2, r5
 80033ea:	d41e      	bmi.n	800342a <_malloc_r+0xc6>
 80033ec:	2a0b      	cmp	r2, #11
 80033ee:	d916      	bls.n	800341e <_malloc_r+0xba>
 80033f0:	1961      	adds	r1, r4, r5
 80033f2:	42a3      	cmp	r3, r4
 80033f4:	6025      	str	r5, [r4, #0]
 80033f6:	bf18      	it	ne
 80033f8:	6059      	strne	r1, [r3, #4]
 80033fa:	6863      	ldr	r3, [r4, #4]
 80033fc:	bf08      	it	eq
 80033fe:	6031      	streq	r1, [r6, #0]
 8003400:	5162      	str	r2, [r4, r5]
 8003402:	604b      	str	r3, [r1, #4]
 8003404:	4638      	mov	r0, r7
 8003406:	f104 060b 	add.w	r6, r4, #11
 800340a:	f000 f865 	bl	80034d8 <__malloc_unlock>
 800340e:	f026 0607 	bic.w	r6, r6, #7
 8003412:	1d23      	adds	r3, r4, #4
 8003414:	1af2      	subs	r2, r6, r3
 8003416:	d0b6      	beq.n	8003386 <_malloc_r+0x22>
 8003418:	1b9b      	subs	r3, r3, r6
 800341a:	50a3      	str	r3, [r4, r2]
 800341c:	e7b3      	b.n	8003386 <_malloc_r+0x22>
 800341e:	6862      	ldr	r2, [r4, #4]
 8003420:	42a3      	cmp	r3, r4
 8003422:	bf0c      	ite	eq
 8003424:	6032      	streq	r2, [r6, #0]
 8003426:	605a      	strne	r2, [r3, #4]
 8003428:	e7ec      	b.n	8003404 <_malloc_r+0xa0>
 800342a:	4623      	mov	r3, r4
 800342c:	6864      	ldr	r4, [r4, #4]
 800342e:	e7b2      	b.n	8003396 <_malloc_r+0x32>
 8003430:	4634      	mov	r4, r6
 8003432:	6876      	ldr	r6, [r6, #4]
 8003434:	e7b9      	b.n	80033aa <_malloc_r+0x46>
 8003436:	230c      	movs	r3, #12
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4638      	mov	r0, r7
 800343c:	f000 f84c 	bl	80034d8 <__malloc_unlock>
 8003440:	e7a1      	b.n	8003386 <_malloc_r+0x22>
 8003442:	6025      	str	r5, [r4, #0]
 8003444:	e7de      	b.n	8003404 <_malloc_r+0xa0>
 8003446:	bf00      	nop
 8003448:	2000025c 	.word	0x2000025c

0800344c <_realloc_r>:
 800344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003450:	4680      	mov	r8, r0
 8003452:	4614      	mov	r4, r2
 8003454:	460e      	mov	r6, r1
 8003456:	b921      	cbnz	r1, 8003462 <_realloc_r+0x16>
 8003458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800345c:	4611      	mov	r1, r2
 800345e:	f7ff bf81 	b.w	8003364 <_malloc_r>
 8003462:	b92a      	cbnz	r2, 8003470 <_realloc_r+0x24>
 8003464:	f7ff ff12 	bl	800328c <_free_r>
 8003468:	4625      	mov	r5, r4
 800346a:	4628      	mov	r0, r5
 800346c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003470:	f000 f838 	bl	80034e4 <_malloc_usable_size_r>
 8003474:	4284      	cmp	r4, r0
 8003476:	4607      	mov	r7, r0
 8003478:	d802      	bhi.n	8003480 <_realloc_r+0x34>
 800347a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800347e:	d812      	bhi.n	80034a6 <_realloc_r+0x5a>
 8003480:	4621      	mov	r1, r4
 8003482:	4640      	mov	r0, r8
 8003484:	f7ff ff6e 	bl	8003364 <_malloc_r>
 8003488:	4605      	mov	r5, r0
 800348a:	2800      	cmp	r0, #0
 800348c:	d0ed      	beq.n	800346a <_realloc_r+0x1e>
 800348e:	42bc      	cmp	r4, r7
 8003490:	4622      	mov	r2, r4
 8003492:	4631      	mov	r1, r6
 8003494:	bf28      	it	cs
 8003496:	463a      	movcs	r2, r7
 8003498:	f7ff fed0 	bl	800323c <memcpy>
 800349c:	4631      	mov	r1, r6
 800349e:	4640      	mov	r0, r8
 80034a0:	f7ff fef4 	bl	800328c <_free_r>
 80034a4:	e7e1      	b.n	800346a <_realloc_r+0x1e>
 80034a6:	4635      	mov	r5, r6
 80034a8:	e7df      	b.n	800346a <_realloc_r+0x1e>
	...

080034ac <_sbrk_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	4d06      	ldr	r5, [pc, #24]	; (80034c8 <_sbrk_r+0x1c>)
 80034b0:	2300      	movs	r3, #0
 80034b2:	4604      	mov	r4, r0
 80034b4:	4608      	mov	r0, r1
 80034b6:	602b      	str	r3, [r5, #0]
 80034b8:	f7fd fc54 	bl	8000d64 <_sbrk>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_sbrk_r+0x1a>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_sbrk_r+0x1a>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	20000264 	.word	0x20000264

080034cc <__malloc_lock>:
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <__malloc_lock+0x8>)
 80034ce:	f000 b811 	b.w	80034f4 <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	20000268 	.word	0x20000268

080034d8 <__malloc_unlock>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__malloc_unlock+0x8>)
 80034da:	f000 b80c 	b.w	80034f6 <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	20000268 	.word	0x20000268

080034e4 <_malloc_usable_size_r>:
 80034e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e8:	1f18      	subs	r0, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfbc      	itt	lt
 80034ee:	580b      	ldrlt	r3, [r1, r0]
 80034f0:	18c0      	addlt	r0, r0, r3
 80034f2:	4770      	bx	lr

080034f4 <__retarget_lock_acquire_recursive>:
 80034f4:	4770      	bx	lr

080034f6 <__retarget_lock_release_recursive>:
 80034f6:	4770      	bx	lr

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
