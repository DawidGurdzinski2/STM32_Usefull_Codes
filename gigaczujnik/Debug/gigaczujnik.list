
gigaczujnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800b498  0800b498  0001b498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba2c  0800ba2c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba2c  0800ba2c  0001ba2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba34  0800ba34  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba34  0800ba34  0001ba34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba38  0800ba38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ba3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001dc  0800bc18  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800bc18  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f0d  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcd  00000000  00000000  00033111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00036f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017103  00000000  00000000  00037e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001513d  00000000  00000000  0004ef0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875d6  00000000  00000000  00064048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb61e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf4  00000000  00000000  000eb670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b480 	.word	0x0800b480

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800b480 	.word	0x0800b480

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff15 	bl	800226c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe65 	bl	800211c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff07 	bl	800226c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fefd 	bl	800226c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe8d 	bl	80021a0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe83 	bl	80021a0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc87 	bl	8000dc4 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc13 	bl	8000cec <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc79 	bl	8000dc4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc6f 	bl	8000dc4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc1f 	bl	8000d38 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc15 	bl	8000d38 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f84c 	bl	80005e8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	; 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff13 	bl	80013f4 <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	; 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd5f 	bl	8001098 <__aeabi_fsub>
 80005da:	f000 ff0b 	bl	80013f4 <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__udivmoddi4>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	4657      	mov	r7, sl
 80005ec:	464e      	mov	r6, r9
 80005ee:	4645      	mov	r5, r8
 80005f0:	46de      	mov	lr, fp
 80005f2:	b5e0      	push	{r5, r6, r7, lr}
 80005f4:	0004      	movs	r4, r0
 80005f6:	000d      	movs	r5, r1
 80005f8:	4692      	mov	sl, r2
 80005fa:	4699      	mov	r9, r3
 80005fc:	b083      	sub	sp, #12
 80005fe:	428b      	cmp	r3, r1
 8000600:	d830      	bhi.n	8000664 <__udivmoddi4+0x7c>
 8000602:	d02d      	beq.n	8000660 <__udivmoddi4+0x78>
 8000604:	4649      	mov	r1, r9
 8000606:	4650      	mov	r0, sl
 8000608:	f002 fe2a 	bl	8003260 <__clzdi2>
 800060c:	0029      	movs	r1, r5
 800060e:	0006      	movs	r6, r0
 8000610:	0020      	movs	r0, r4
 8000612:	f002 fe25 	bl	8003260 <__clzdi2>
 8000616:	1a33      	subs	r3, r6, r0
 8000618:	4698      	mov	r8, r3
 800061a:	3b20      	subs	r3, #32
 800061c:	469b      	mov	fp, r3
 800061e:	d433      	bmi.n	8000688 <__udivmoddi4+0xa0>
 8000620:	465a      	mov	r2, fp
 8000622:	4653      	mov	r3, sl
 8000624:	4093      	lsls	r3, r2
 8000626:	4642      	mov	r2, r8
 8000628:	001f      	movs	r7, r3
 800062a:	4653      	mov	r3, sl
 800062c:	4093      	lsls	r3, r2
 800062e:	001e      	movs	r6, r3
 8000630:	42af      	cmp	r7, r5
 8000632:	d83a      	bhi.n	80006aa <__udivmoddi4+0xc2>
 8000634:	42af      	cmp	r7, r5
 8000636:	d100      	bne.n	800063a <__udivmoddi4+0x52>
 8000638:	e078      	b.n	800072c <__udivmoddi4+0x144>
 800063a:	465b      	mov	r3, fp
 800063c:	1ba4      	subs	r4, r4, r6
 800063e:	41bd      	sbcs	r5, r7
 8000640:	2b00      	cmp	r3, #0
 8000642:	da00      	bge.n	8000646 <__udivmoddi4+0x5e>
 8000644:	e075      	b.n	8000732 <__udivmoddi4+0x14a>
 8000646:	2200      	movs	r2, #0
 8000648:	2300      	movs	r3, #0
 800064a:	9200      	str	r2, [sp, #0]
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2301      	movs	r3, #1
 8000650:	465a      	mov	r2, fp
 8000652:	4093      	lsls	r3, r2
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2301      	movs	r3, #1
 8000658:	4642      	mov	r2, r8
 800065a:	4093      	lsls	r3, r2
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	e028      	b.n	80006b2 <__udivmoddi4+0xca>
 8000660:	4282      	cmp	r2, r0
 8000662:	d9cf      	bls.n	8000604 <__udivmoddi4+0x1c>
 8000664:	2200      	movs	r2, #0
 8000666:	2300      	movs	r3, #0
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <__udivmoddi4+0x8e>
 8000672:	601c      	str	r4, [r3, #0]
 8000674:	605d      	str	r5, [r3, #4]
 8000676:	9800      	ldr	r0, [sp, #0]
 8000678:	9901      	ldr	r1, [sp, #4]
 800067a:	b003      	add	sp, #12
 800067c:	bcf0      	pop	{r4, r5, r6, r7}
 800067e:	46bb      	mov	fp, r7
 8000680:	46b2      	mov	sl, r6
 8000682:	46a9      	mov	r9, r5
 8000684:	46a0      	mov	r8, r4
 8000686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000688:	4642      	mov	r2, r8
 800068a:	2320      	movs	r3, #32
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	4652      	mov	r2, sl
 8000690:	40da      	lsrs	r2, r3
 8000692:	4641      	mov	r1, r8
 8000694:	0013      	movs	r3, r2
 8000696:	464a      	mov	r2, r9
 8000698:	408a      	lsls	r2, r1
 800069a:	0017      	movs	r7, r2
 800069c:	4642      	mov	r2, r8
 800069e:	431f      	orrs	r7, r3
 80006a0:	4653      	mov	r3, sl
 80006a2:	4093      	lsls	r3, r2
 80006a4:	001e      	movs	r6, r3
 80006a6:	42af      	cmp	r7, r5
 80006a8:	d9c4      	bls.n	8000634 <__udivmoddi4+0x4c>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	4643      	mov	r3, r8
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0d9      	beq.n	800066c <__udivmoddi4+0x84>
 80006b8:	07fb      	lsls	r3, r7, #31
 80006ba:	0872      	lsrs	r2, r6, #1
 80006bc:	431a      	orrs	r2, r3
 80006be:	4646      	mov	r6, r8
 80006c0:	087b      	lsrs	r3, r7, #1
 80006c2:	e00e      	b.n	80006e2 <__udivmoddi4+0xfa>
 80006c4:	42ab      	cmp	r3, r5
 80006c6:	d101      	bne.n	80006cc <__udivmoddi4+0xe4>
 80006c8:	42a2      	cmp	r2, r4
 80006ca:	d80c      	bhi.n	80006e6 <__udivmoddi4+0xfe>
 80006cc:	1aa4      	subs	r4, r4, r2
 80006ce:	419d      	sbcs	r5, r3
 80006d0:	2001      	movs	r0, #1
 80006d2:	1924      	adds	r4, r4, r4
 80006d4:	416d      	adcs	r5, r5
 80006d6:	2100      	movs	r1, #0
 80006d8:	3e01      	subs	r6, #1
 80006da:	1824      	adds	r4, r4, r0
 80006dc:	414d      	adcs	r5, r1
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d006      	beq.n	80006f0 <__udivmoddi4+0x108>
 80006e2:	42ab      	cmp	r3, r5
 80006e4:	d9ee      	bls.n	80006c4 <__udivmoddi4+0xdc>
 80006e6:	3e01      	subs	r6, #1
 80006e8:	1924      	adds	r4, r4, r4
 80006ea:	416d      	adcs	r5, r5
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d1f8      	bne.n	80006e2 <__udivmoddi4+0xfa>
 80006f0:	9800      	ldr	r0, [sp, #0]
 80006f2:	9901      	ldr	r1, [sp, #4]
 80006f4:	465b      	mov	r3, fp
 80006f6:	1900      	adds	r0, r0, r4
 80006f8:	4169      	adcs	r1, r5
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db24      	blt.n	8000748 <__udivmoddi4+0x160>
 80006fe:	002b      	movs	r3, r5
 8000700:	465a      	mov	r2, fp
 8000702:	4644      	mov	r4, r8
 8000704:	40d3      	lsrs	r3, r2
 8000706:	002a      	movs	r2, r5
 8000708:	40e2      	lsrs	r2, r4
 800070a:	001c      	movs	r4, r3
 800070c:	465b      	mov	r3, fp
 800070e:	0015      	movs	r5, r2
 8000710:	2b00      	cmp	r3, #0
 8000712:	db2a      	blt.n	800076a <__udivmoddi4+0x182>
 8000714:	0026      	movs	r6, r4
 8000716:	409e      	lsls	r6, r3
 8000718:	0033      	movs	r3, r6
 800071a:	0026      	movs	r6, r4
 800071c:	4647      	mov	r7, r8
 800071e:	40be      	lsls	r6, r7
 8000720:	0032      	movs	r2, r6
 8000722:	1a80      	subs	r0, r0, r2
 8000724:	4199      	sbcs	r1, r3
 8000726:	9000      	str	r0, [sp, #0]
 8000728:	9101      	str	r1, [sp, #4]
 800072a:	e79f      	b.n	800066c <__udivmoddi4+0x84>
 800072c:	42a3      	cmp	r3, r4
 800072e:	d8bc      	bhi.n	80006aa <__udivmoddi4+0xc2>
 8000730:	e783      	b.n	800063a <__udivmoddi4+0x52>
 8000732:	4642      	mov	r2, r8
 8000734:	2320      	movs	r3, #32
 8000736:	2100      	movs	r1, #0
 8000738:	1a9b      	subs	r3, r3, r2
 800073a:	2200      	movs	r2, #0
 800073c:	9100      	str	r1, [sp, #0]
 800073e:	9201      	str	r2, [sp, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	40da      	lsrs	r2, r3
 8000744:	9201      	str	r2, [sp, #4]
 8000746:	e786      	b.n	8000656 <__udivmoddi4+0x6e>
 8000748:	4642      	mov	r2, r8
 800074a:	2320      	movs	r3, #32
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	002a      	movs	r2, r5
 8000750:	4646      	mov	r6, r8
 8000752:	409a      	lsls	r2, r3
 8000754:	0023      	movs	r3, r4
 8000756:	40f3      	lsrs	r3, r6
 8000758:	4644      	mov	r4, r8
 800075a:	4313      	orrs	r3, r2
 800075c:	002a      	movs	r2, r5
 800075e:	40e2      	lsrs	r2, r4
 8000760:	001c      	movs	r4, r3
 8000762:	465b      	mov	r3, fp
 8000764:	0015      	movs	r5, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	dad4      	bge.n	8000714 <__udivmoddi4+0x12c>
 800076a:	4642      	mov	r2, r8
 800076c:	002f      	movs	r7, r5
 800076e:	2320      	movs	r3, #32
 8000770:	0026      	movs	r6, r4
 8000772:	4097      	lsls	r7, r2
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	40de      	lsrs	r6, r3
 8000778:	003b      	movs	r3, r7
 800077a:	4333      	orrs	r3, r6
 800077c:	e7cd      	b.n	800071a <__udivmoddi4+0x132>
 800077e:	46c0      	nop			; (mov r8, r8)

08000780 <__aeabi_fadd>:
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	46c6      	mov	lr, r8
 8000784:	0243      	lsls	r3, r0, #9
 8000786:	0a5b      	lsrs	r3, r3, #9
 8000788:	024e      	lsls	r6, r1, #9
 800078a:	0045      	lsls	r5, r0, #1
 800078c:	004f      	lsls	r7, r1, #1
 800078e:	00da      	lsls	r2, r3, #3
 8000790:	0fc4      	lsrs	r4, r0, #31
 8000792:	469c      	mov	ip, r3
 8000794:	0a70      	lsrs	r0, r6, #9
 8000796:	4690      	mov	r8, r2
 8000798:	b500      	push	{lr}
 800079a:	0e2d      	lsrs	r5, r5, #24
 800079c:	0e3f      	lsrs	r7, r7, #24
 800079e:	0fc9      	lsrs	r1, r1, #31
 80007a0:	09b6      	lsrs	r6, r6, #6
 80007a2:	428c      	cmp	r4, r1
 80007a4:	d04b      	beq.n	800083e <__aeabi_fadd+0xbe>
 80007a6:	1bea      	subs	r2, r5, r7
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	dd36      	ble.n	800081a <__aeabi_fadd+0x9a>
 80007ac:	2f00      	cmp	r7, #0
 80007ae:	d061      	beq.n	8000874 <__aeabi_fadd+0xf4>
 80007b0:	2dff      	cmp	r5, #255	; 0xff
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fadd+0x36>
 80007b4:	e0ad      	b.n	8000912 <__aeabi_fadd+0x192>
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	04db      	lsls	r3, r3, #19
 80007ba:	431e      	orrs	r6, r3
 80007bc:	2a1b      	cmp	r2, #27
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_fadd+0x42>
 80007c0:	e0d3      	b.n	800096a <__aeabi_fadd+0x1ea>
 80007c2:	2001      	movs	r0, #1
 80007c4:	4643      	mov	r3, r8
 80007c6:	1a18      	subs	r0, r3, r0
 80007c8:	0143      	lsls	r3, r0, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fadd+0x4e>
 80007cc:	e08c      	b.n	80008e8 <__aeabi_fadd+0x168>
 80007ce:	0180      	lsls	r0, r0, #6
 80007d0:	0987      	lsrs	r7, r0, #6
 80007d2:	0038      	movs	r0, r7
 80007d4:	f002 fd26 	bl	8003224 <__clzsi2>
 80007d8:	3805      	subs	r0, #5
 80007da:	4087      	lsls	r7, r0
 80007dc:	4285      	cmp	r5, r0
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_fadd+0x62>
 80007e0:	e0b6      	b.n	8000950 <__aeabi_fadd+0x1d0>
 80007e2:	1a2d      	subs	r5, r5, r0
 80007e4:	48b3      	ldr	r0, [pc, #716]	; (8000ab4 <__aeabi_fadd+0x334>)
 80007e6:	4038      	ands	r0, r7
 80007e8:	0743      	lsls	r3, r0, #29
 80007ea:	d004      	beq.n	80007f6 <__aeabi_fadd+0x76>
 80007ec:	230f      	movs	r3, #15
 80007ee:	4003      	ands	r3, r0
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fadd+0x76>
 80007f4:	3004      	adds	r0, #4
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fadd+0x7c>
 80007fa:	e078      	b.n	80008ee <__aeabi_fadd+0x16e>
 80007fc:	1c6a      	adds	r2, r5, #1
 80007fe:	2dfe      	cmp	r5, #254	; 0xfe
 8000800:	d065      	beq.n	80008ce <__aeabi_fadd+0x14e>
 8000802:	0180      	lsls	r0, r0, #6
 8000804:	0a43      	lsrs	r3, r0, #9
 8000806:	469c      	mov	ip, r3
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	4663      	mov	r3, ip
 800080c:	05d0      	lsls	r0, r2, #23
 800080e:	4318      	orrs	r0, r3
 8000810:	07e4      	lsls	r4, r4, #31
 8000812:	4320      	orrs	r0, r4
 8000814:	bc80      	pop	{r7}
 8000816:	46b8      	mov	r8, r7
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	2a00      	cmp	r2, #0
 800081c:	d035      	beq.n	800088a <__aeabi_fadd+0x10a>
 800081e:	1b7a      	subs	r2, r7, r5
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0xa6>
 8000824:	e0af      	b.n	8000986 <__aeabi_fadd+0x206>
 8000826:	4643      	mov	r3, r8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0xae>
 800082c:	e0a7      	b.n	800097e <__aeabi_fadd+0x1fe>
 800082e:	1e53      	subs	r3, r2, #1
 8000830:	2a01      	cmp	r2, #1
 8000832:	d100      	bne.n	8000836 <__aeabi_fadd+0xb6>
 8000834:	e12f      	b.n	8000a96 <__aeabi_fadd+0x316>
 8000836:	2aff      	cmp	r2, #255	; 0xff
 8000838:	d069      	beq.n	800090e <__aeabi_fadd+0x18e>
 800083a:	001a      	movs	r2, r3
 800083c:	e0aa      	b.n	8000994 <__aeabi_fadd+0x214>
 800083e:	1be9      	subs	r1, r5, r7
 8000840:	2900      	cmp	r1, #0
 8000842:	dd70      	ble.n	8000926 <__aeabi_fadd+0x1a6>
 8000844:	2f00      	cmp	r7, #0
 8000846:	d037      	beq.n	80008b8 <__aeabi_fadd+0x138>
 8000848:	2dff      	cmp	r5, #255	; 0xff
 800084a:	d062      	beq.n	8000912 <__aeabi_fadd+0x192>
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	04db      	lsls	r3, r3, #19
 8000850:	431e      	orrs	r6, r3
 8000852:	291b      	cmp	r1, #27
 8000854:	dc00      	bgt.n	8000858 <__aeabi_fadd+0xd8>
 8000856:	e0b0      	b.n	80009ba <__aeabi_fadd+0x23a>
 8000858:	2001      	movs	r0, #1
 800085a:	4440      	add	r0, r8
 800085c:	0143      	lsls	r3, r0, #5
 800085e:	d543      	bpl.n	80008e8 <__aeabi_fadd+0x168>
 8000860:	3501      	adds	r5, #1
 8000862:	2dff      	cmp	r5, #255	; 0xff
 8000864:	d033      	beq.n	80008ce <__aeabi_fadd+0x14e>
 8000866:	2301      	movs	r3, #1
 8000868:	4a93      	ldr	r2, [pc, #588]	; (8000ab8 <__aeabi_fadd+0x338>)
 800086a:	4003      	ands	r3, r0
 800086c:	0840      	lsrs	r0, r0, #1
 800086e:	4010      	ands	r0, r2
 8000870:	4318      	orrs	r0, r3
 8000872:	e7b9      	b.n	80007e8 <__aeabi_fadd+0x68>
 8000874:	2e00      	cmp	r6, #0
 8000876:	d100      	bne.n	800087a <__aeabi_fadd+0xfa>
 8000878:	e083      	b.n	8000982 <__aeabi_fadd+0x202>
 800087a:	1e51      	subs	r1, r2, #1
 800087c:	2a01      	cmp	r2, #1
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x102>
 8000880:	e0d8      	b.n	8000a34 <__aeabi_fadd+0x2b4>
 8000882:	2aff      	cmp	r2, #255	; 0xff
 8000884:	d045      	beq.n	8000912 <__aeabi_fadd+0x192>
 8000886:	000a      	movs	r2, r1
 8000888:	e798      	b.n	80007bc <__aeabi_fadd+0x3c>
 800088a:	27fe      	movs	r7, #254	; 0xfe
 800088c:	1c6a      	adds	r2, r5, #1
 800088e:	4217      	tst	r7, r2
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x114>
 8000892:	e086      	b.n	80009a2 <__aeabi_fadd+0x222>
 8000894:	2d00      	cmp	r5, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x11a>
 8000898:	e0b7      	b.n	8000a0a <__aeabi_fadd+0x28a>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_fadd+0x122>
 80008a0:	e0f3      	b.n	8000a8a <__aeabi_fadd+0x30a>
 80008a2:	2200      	movs	r2, #0
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	d0b0      	beq.n	800080a <__aeabi_fadd+0x8a>
 80008a8:	1b98      	subs	r0, r3, r6
 80008aa:	0143      	lsls	r3, r0, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x130>
 80008ae:	e0fa      	b.n	8000aa6 <__aeabi_fadd+0x326>
 80008b0:	4643      	mov	r3, r8
 80008b2:	000c      	movs	r4, r1
 80008b4:	1af0      	subs	r0, r6, r3
 80008b6:	e797      	b.n	80007e8 <__aeabi_fadd+0x68>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x13e>
 80008bc:	e0c8      	b.n	8000a50 <__aeabi_fadd+0x2d0>
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	2901      	cmp	r1, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x146>
 80008c4:	e0ae      	b.n	8000a24 <__aeabi_fadd+0x2a4>
 80008c6:	29ff      	cmp	r1, #255	; 0xff
 80008c8:	d023      	beq.n	8000912 <__aeabi_fadd+0x192>
 80008ca:	0011      	movs	r1, r2
 80008cc:	e7c1      	b.n	8000852 <__aeabi_fadd+0xd2>
 80008ce:	2300      	movs	r3, #0
 80008d0:	22ff      	movs	r2, #255	; 0xff
 80008d2:	469c      	mov	ip, r3
 80008d4:	e799      	b.n	800080a <__aeabi_fadd+0x8a>
 80008d6:	21fe      	movs	r1, #254	; 0xfe
 80008d8:	1c6a      	adds	r2, r5, #1
 80008da:	4211      	tst	r1, r2
 80008dc:	d077      	beq.n	80009ce <__aeabi_fadd+0x24e>
 80008de:	2aff      	cmp	r2, #255	; 0xff
 80008e0:	d0f5      	beq.n	80008ce <__aeabi_fadd+0x14e>
 80008e2:	0015      	movs	r5, r2
 80008e4:	4446      	add	r6, r8
 80008e6:	0870      	lsrs	r0, r6, #1
 80008e8:	0743      	lsls	r3, r0, #29
 80008ea:	d000      	beq.n	80008ee <__aeabi_fadd+0x16e>
 80008ec:	e77e      	b.n	80007ec <__aeabi_fadd+0x6c>
 80008ee:	08c3      	lsrs	r3, r0, #3
 80008f0:	2dff      	cmp	r5, #255	; 0xff
 80008f2:	d00e      	beq.n	8000912 <__aeabi_fadd+0x192>
 80008f4:	025b      	lsls	r3, r3, #9
 80008f6:	0a5b      	lsrs	r3, r3, #9
 80008f8:	469c      	mov	ip, r3
 80008fa:	b2ea      	uxtb	r2, r5
 80008fc:	e785      	b.n	800080a <__aeabi_fadd+0x8a>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d007      	beq.n	8000912 <__aeabi_fadd+0x192>
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	03d2      	lsls	r2, r2, #15
 8000906:	4213      	tst	r3, r2
 8000908:	d003      	beq.n	8000912 <__aeabi_fadd+0x192>
 800090a:	4210      	tst	r0, r2
 800090c:	d101      	bne.n	8000912 <__aeabi_fadd+0x192>
 800090e:	000c      	movs	r4, r1
 8000910:	0003      	movs	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0db      	beq.n	80008ce <__aeabi_fadd+0x14e>
 8000916:	2080      	movs	r0, #128	; 0x80
 8000918:	03c0      	lsls	r0, r0, #15
 800091a:	4318      	orrs	r0, r3
 800091c:	0240      	lsls	r0, r0, #9
 800091e:	0a43      	lsrs	r3, r0, #9
 8000920:	469c      	mov	ip, r3
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	e771      	b.n	800080a <__aeabi_fadd+0x8a>
 8000926:	2900      	cmp	r1, #0
 8000928:	d0d5      	beq.n	80008d6 <__aeabi_fadd+0x156>
 800092a:	1b7a      	subs	r2, r7, r5
 800092c:	2d00      	cmp	r5, #0
 800092e:	d160      	bne.n	80009f2 <__aeabi_fadd+0x272>
 8000930:	4643      	mov	r3, r8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d024      	beq.n	8000980 <__aeabi_fadd+0x200>
 8000936:	1e53      	subs	r3, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d073      	beq.n	8000a24 <__aeabi_fadd+0x2a4>
 800093c:	2aff      	cmp	r2, #255	; 0xff
 800093e:	d0e7      	beq.n	8000910 <__aeabi_fadd+0x190>
 8000940:	001a      	movs	r2, r3
 8000942:	2a1b      	cmp	r2, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x1c8>
 8000946:	e085      	b.n	8000a54 <__aeabi_fadd+0x2d4>
 8000948:	2001      	movs	r0, #1
 800094a:	003d      	movs	r5, r7
 800094c:	1980      	adds	r0, r0, r6
 800094e:	e785      	b.n	800085c <__aeabi_fadd+0xdc>
 8000950:	2320      	movs	r3, #32
 8000952:	003a      	movs	r2, r7
 8000954:	1b45      	subs	r5, r0, r5
 8000956:	0038      	movs	r0, r7
 8000958:	3501      	adds	r5, #1
 800095a:	40ea      	lsrs	r2, r5
 800095c:	1b5d      	subs	r5, r3, r5
 800095e:	40a8      	lsls	r0, r5
 8000960:	1e43      	subs	r3, r0, #1
 8000962:	4198      	sbcs	r0, r3
 8000964:	2500      	movs	r5, #0
 8000966:	4310      	orrs	r0, r2
 8000968:	e73e      	b.n	80007e8 <__aeabi_fadd+0x68>
 800096a:	2320      	movs	r3, #32
 800096c:	0030      	movs	r0, r6
 800096e:	1a9b      	subs	r3, r3, r2
 8000970:	0031      	movs	r1, r6
 8000972:	4098      	lsls	r0, r3
 8000974:	40d1      	lsrs	r1, r2
 8000976:	1e43      	subs	r3, r0, #1
 8000978:	4198      	sbcs	r0, r3
 800097a:	4308      	orrs	r0, r1
 800097c:	e722      	b.n	80007c4 <__aeabi_fadd+0x44>
 800097e:	000c      	movs	r4, r1
 8000980:	0003      	movs	r3, r0
 8000982:	0015      	movs	r5, r2
 8000984:	e7b4      	b.n	80008f0 <__aeabi_fadd+0x170>
 8000986:	2fff      	cmp	r7, #255	; 0xff
 8000988:	d0c1      	beq.n	800090e <__aeabi_fadd+0x18e>
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	4640      	mov	r0, r8
 800098e:	04db      	lsls	r3, r3, #19
 8000990:	4318      	orrs	r0, r3
 8000992:	4680      	mov	r8, r0
 8000994:	2a1b      	cmp	r2, #27
 8000996:	dd51      	ble.n	8000a3c <__aeabi_fadd+0x2bc>
 8000998:	2001      	movs	r0, #1
 800099a:	000c      	movs	r4, r1
 800099c:	003d      	movs	r5, r7
 800099e:	1a30      	subs	r0, r6, r0
 80009a0:	e712      	b.n	80007c8 <__aeabi_fadd+0x48>
 80009a2:	4643      	mov	r3, r8
 80009a4:	1b9f      	subs	r7, r3, r6
 80009a6:	017b      	lsls	r3, r7, #5
 80009a8:	d42b      	bmi.n	8000a02 <__aeabi_fadd+0x282>
 80009aa:	2f00      	cmp	r7, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x230>
 80009ae:	e710      	b.n	80007d2 <__aeabi_fadd+0x52>
 80009b0:	2300      	movs	r3, #0
 80009b2:	2400      	movs	r4, #0
 80009b4:	2200      	movs	r2, #0
 80009b6:	469c      	mov	ip, r3
 80009b8:	e727      	b.n	800080a <__aeabi_fadd+0x8a>
 80009ba:	2320      	movs	r3, #32
 80009bc:	0032      	movs	r2, r6
 80009be:	0030      	movs	r0, r6
 80009c0:	40ca      	lsrs	r2, r1
 80009c2:	1a59      	subs	r1, r3, r1
 80009c4:	4088      	lsls	r0, r1
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	4310      	orrs	r0, r2
 80009cc:	e745      	b.n	800085a <__aeabi_fadd+0xda>
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d14a      	bne.n	8000a68 <__aeabi_fadd+0x2e8>
 80009d2:	4643      	mov	r3, r8
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d063      	beq.n	8000aa0 <__aeabi_fadd+0x320>
 80009d8:	2200      	movs	r2, #0
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fadd+0x260>
 80009de:	e714      	b.n	800080a <__aeabi_fadd+0x8a>
 80009e0:	0030      	movs	r0, r6
 80009e2:	4440      	add	r0, r8
 80009e4:	0143      	lsls	r3, r0, #5
 80009e6:	d400      	bmi.n	80009ea <__aeabi_fadd+0x26a>
 80009e8:	e77e      	b.n	80008e8 <__aeabi_fadd+0x168>
 80009ea:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <__aeabi_fadd+0x334>)
 80009ec:	3501      	adds	r5, #1
 80009ee:	4018      	ands	r0, r3
 80009f0:	e77a      	b.n	80008e8 <__aeabi_fadd+0x168>
 80009f2:	2fff      	cmp	r7, #255	; 0xff
 80009f4:	d08c      	beq.n	8000910 <__aeabi_fadd+0x190>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	4641      	mov	r1, r8
 80009fa:	04db      	lsls	r3, r3, #19
 80009fc:	4319      	orrs	r1, r3
 80009fe:	4688      	mov	r8, r1
 8000a00:	e79f      	b.n	8000942 <__aeabi_fadd+0x1c2>
 8000a02:	4643      	mov	r3, r8
 8000a04:	000c      	movs	r4, r1
 8000a06:	1af7      	subs	r7, r6, r3
 8000a08:	e6e3      	b.n	80007d2 <__aeabi_fadd+0x52>
 8000a0a:	4642      	mov	r2, r8
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fadd+0x292>
 8000a10:	e775      	b.n	80008fe <__aeabi_fadd+0x17e>
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fadd+0x298>
 8000a16:	e77a      	b.n	800090e <__aeabi_fadd+0x18e>
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	03db      	lsls	r3, r3, #15
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	469c      	mov	ip, r3
 8000a20:	22ff      	movs	r2, #255	; 0xff
 8000a22:	e6f2      	b.n	800080a <__aeabi_fadd+0x8a>
 8000a24:	0030      	movs	r0, r6
 8000a26:	4440      	add	r0, r8
 8000a28:	2501      	movs	r5, #1
 8000a2a:	0143      	lsls	r3, r0, #5
 8000a2c:	d400      	bmi.n	8000a30 <__aeabi_fadd+0x2b0>
 8000a2e:	e75b      	b.n	80008e8 <__aeabi_fadd+0x168>
 8000a30:	2502      	movs	r5, #2
 8000a32:	e718      	b.n	8000866 <__aeabi_fadd+0xe6>
 8000a34:	4643      	mov	r3, r8
 8000a36:	2501      	movs	r5, #1
 8000a38:	1b98      	subs	r0, r3, r6
 8000a3a:	e6c5      	b.n	80007c8 <__aeabi_fadd+0x48>
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	4644      	mov	r4, r8
 8000a40:	4640      	mov	r0, r8
 8000a42:	40d4      	lsrs	r4, r2
 8000a44:	1a9a      	subs	r2, r3, r2
 8000a46:	4090      	lsls	r0, r2
 8000a48:	1e43      	subs	r3, r0, #1
 8000a4a:	4198      	sbcs	r0, r3
 8000a4c:	4320      	orrs	r0, r4
 8000a4e:	e7a4      	b.n	800099a <__aeabi_fadd+0x21a>
 8000a50:	000d      	movs	r5, r1
 8000a52:	e74d      	b.n	80008f0 <__aeabi_fadd+0x170>
 8000a54:	2320      	movs	r3, #32
 8000a56:	4641      	mov	r1, r8
 8000a58:	4640      	mov	r0, r8
 8000a5a:	40d1      	lsrs	r1, r2
 8000a5c:	1a9a      	subs	r2, r3, r2
 8000a5e:	4090      	lsls	r0, r2
 8000a60:	1e43      	subs	r3, r0, #1
 8000a62:	4198      	sbcs	r0, r3
 8000a64:	4308      	orrs	r0, r1
 8000a66:	e770      	b.n	800094a <__aeabi_fadd+0x1ca>
 8000a68:	4642      	mov	r2, r8
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fadd+0x2f0>
 8000a6e:	e74f      	b.n	8000910 <__aeabi_fadd+0x190>
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_fadd+0x2f6>
 8000a74:	e74d      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	03d2      	lsls	r2, r2, #15
 8000a7a:	4213      	tst	r3, r2
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x300>
 8000a7e:	e748      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a80:	4210      	tst	r0, r2
 8000a82:	d000      	beq.n	8000a86 <__aeabi_fadd+0x306>
 8000a84:	e745      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a86:	0003      	movs	r3, r0
 8000a88:	e743      	b.n	8000912 <__aeabi_fadd+0x192>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d090      	beq.n	80009b0 <__aeabi_fadd+0x230>
 8000a8e:	000c      	movs	r4, r1
 8000a90:	4684      	mov	ip, r0
 8000a92:	2200      	movs	r2, #0
 8000a94:	e6b9      	b.n	800080a <__aeabi_fadd+0x8a>
 8000a96:	4643      	mov	r3, r8
 8000a98:	000c      	movs	r4, r1
 8000a9a:	1af0      	subs	r0, r6, r3
 8000a9c:	3501      	adds	r5, #1
 8000a9e:	e693      	b.n	80007c8 <__aeabi_fadd+0x48>
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	e6b1      	b.n	800080a <__aeabi_fadd+0x8a>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	d000      	beq.n	8000aac <__aeabi_fadd+0x32c>
 8000aaa:	e71d      	b.n	80008e8 <__aeabi_fadd+0x168>
 8000aac:	2300      	movs	r3, #0
 8000aae:	2400      	movs	r4, #0
 8000ab0:	469c      	mov	ip, r3
 8000ab2:	e6aa      	b.n	800080a <__aeabi_fadd+0x8a>
 8000ab4:	fbffffff 	.word	0xfbffffff
 8000ab8:	7dffffff 	.word	0x7dffffff

08000abc <__aeabi_fdiv>:
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	464f      	mov	r7, r9
 8000ac0:	4646      	mov	r6, r8
 8000ac2:	46d6      	mov	lr, sl
 8000ac4:	0245      	lsls	r5, r0, #9
 8000ac6:	b5c0      	push	{r6, r7, lr}
 8000ac8:	0047      	lsls	r7, r0, #1
 8000aca:	1c0c      	adds	r4, r1, #0
 8000acc:	0a6d      	lsrs	r5, r5, #9
 8000ace:	0e3f      	lsrs	r7, r7, #24
 8000ad0:	0fc6      	lsrs	r6, r0, #31
 8000ad2:	2f00      	cmp	r7, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fdiv+0x1c>
 8000ad6:	e070      	b.n	8000bba <__aeabi_fdiv+0xfe>
 8000ad8:	2fff      	cmp	r7, #255	; 0xff
 8000ada:	d100      	bne.n	8000ade <__aeabi_fdiv+0x22>
 8000adc:	e075      	b.n	8000bca <__aeabi_fdiv+0x10e>
 8000ade:	00eb      	lsls	r3, r5, #3
 8000ae0:	2580      	movs	r5, #128	; 0x80
 8000ae2:	04ed      	lsls	r5, r5, #19
 8000ae4:	431d      	orrs	r5, r3
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	4699      	mov	r9, r3
 8000aea:	469a      	mov	sl, r3
 8000aec:	3f7f      	subs	r7, #127	; 0x7f
 8000aee:	0260      	lsls	r0, r4, #9
 8000af0:	0a43      	lsrs	r3, r0, #9
 8000af2:	4698      	mov	r8, r3
 8000af4:	0063      	lsls	r3, r4, #1
 8000af6:	0e1b      	lsrs	r3, r3, #24
 8000af8:	0fe4      	lsrs	r4, r4, #31
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d04e      	beq.n	8000b9c <__aeabi_fdiv+0xe0>
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d046      	beq.n	8000b90 <__aeabi_fdiv+0xd4>
 8000b02:	4642      	mov	r2, r8
 8000b04:	00d0      	lsls	r0, r2, #3
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	04d2      	lsls	r2, r2, #19
 8000b0a:	4302      	orrs	r2, r0
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	2200      	movs	r2, #0
 8000b10:	3b7f      	subs	r3, #127	; 0x7f
 8000b12:	0031      	movs	r1, r6
 8000b14:	1aff      	subs	r7, r7, r3
 8000b16:	464b      	mov	r3, r9
 8000b18:	4061      	eors	r1, r4
 8000b1a:	b2c9      	uxtb	r1, r1
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	d900      	bls.n	8000b24 <__aeabi_fdiv+0x68>
 8000b22:	e0b5      	b.n	8000c90 <__aeabi_fdiv+0x1d4>
 8000b24:	486e      	ldr	r0, [pc, #440]	; (8000ce0 <__aeabi_fdiv+0x224>)
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	58c3      	ldr	r3, [r0, r3]
 8000b2a:	469f      	mov	pc, r3
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	4698      	mov	r8, r3
 8000b30:	0026      	movs	r6, r4
 8000b32:	4645      	mov	r5, r8
 8000b34:	4692      	mov	sl, r2
 8000b36:	4653      	mov	r3, sl
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fdiv+0x82>
 8000b3c:	e089      	b.n	8000c52 <__aeabi_fdiv+0x196>
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fdiv+0x88>
 8000b42:	e09e      	b.n	8000c82 <__aeabi_fdiv+0x1c6>
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d018      	beq.n	8000b7a <__aeabi_fdiv+0xbe>
 8000b48:	003b      	movs	r3, r7
 8000b4a:	337f      	adds	r3, #127	; 0x7f
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd69      	ble.n	8000c24 <__aeabi_fdiv+0x168>
 8000b50:	076a      	lsls	r2, r5, #29
 8000b52:	d004      	beq.n	8000b5e <__aeabi_fdiv+0xa2>
 8000b54:	220f      	movs	r2, #15
 8000b56:	402a      	ands	r2, r5
 8000b58:	2a04      	cmp	r2, #4
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_fdiv+0xa2>
 8000b5c:	3504      	adds	r5, #4
 8000b5e:	012a      	lsls	r2, r5, #4
 8000b60:	d503      	bpl.n	8000b6a <__aeabi_fdiv+0xae>
 8000b62:	4b60      	ldr	r3, [pc, #384]	; (8000ce4 <__aeabi_fdiv+0x228>)
 8000b64:	401d      	ands	r5, r3
 8000b66:	003b      	movs	r3, r7
 8000b68:	3380      	adds	r3, #128	; 0x80
 8000b6a:	2bfe      	cmp	r3, #254	; 0xfe
 8000b6c:	dd00      	ble.n	8000b70 <__aeabi_fdiv+0xb4>
 8000b6e:	e070      	b.n	8000c52 <__aeabi_fdiv+0x196>
 8000b70:	01ad      	lsls	r5, r5, #6
 8000b72:	0a6d      	lsrs	r5, r5, #9
 8000b74:	b2d8      	uxtb	r0, r3
 8000b76:	e002      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000b78:	000e      	movs	r6, r1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	05c0      	lsls	r0, r0, #23
 8000b80:	4328      	orrs	r0, r5
 8000b82:	07f6      	lsls	r6, r6, #31
 8000b84:	4330      	orrs	r0, r6
 8000b86:	bce0      	pop	{r5, r6, r7}
 8000b88:	46ba      	mov	sl, r7
 8000b8a:	46b1      	mov	r9, r6
 8000b8c:	46a8      	mov	r8, r5
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b90:	4643      	mov	r3, r8
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d13f      	bne.n	8000c16 <__aeabi_fdiv+0x15a>
 8000b96:	2202      	movs	r2, #2
 8000b98:	3fff      	subs	r7, #255	; 0xff
 8000b9a:	e003      	b.n	8000ba4 <__aeabi_fdiv+0xe8>
 8000b9c:	4643      	mov	r3, r8
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d12d      	bne.n	8000bfe <__aeabi_fdiv+0x142>
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	0031      	movs	r1, r6
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	4061      	eors	r1, r4
 8000baa:	b2c9      	uxtb	r1, r1
 8000bac:	4313      	orrs	r3, r2
 8000bae:	2b0f      	cmp	r3, #15
 8000bb0:	d834      	bhi.n	8000c1c <__aeabi_fdiv+0x160>
 8000bb2:	484d      	ldr	r0, [pc, #308]	; (8000ce8 <__aeabi_fdiv+0x22c>)
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	58c3      	ldr	r3, [r0, r3]
 8000bb8:	469f      	mov	pc, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d113      	bne.n	8000be6 <__aeabi_fdiv+0x12a>
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	3b03      	subs	r3, #3
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	e791      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d105      	bne.n	8000bda <__aeabi_fdiv+0x11e>
 8000bce:	2308      	movs	r3, #8
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	3b06      	subs	r3, #6
 8000bd4:	27ff      	movs	r7, #255	; 0xff
 8000bd6:	469a      	mov	sl, r3
 8000bd8:	e789      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000bda:	230c      	movs	r3, #12
 8000bdc:	4699      	mov	r9, r3
 8000bde:	3b09      	subs	r3, #9
 8000be0:	27ff      	movs	r7, #255	; 0xff
 8000be2:	469a      	mov	sl, r3
 8000be4:	e783      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000be6:	0028      	movs	r0, r5
 8000be8:	f002 fb1c 	bl	8003224 <__clzsi2>
 8000bec:	2776      	movs	r7, #118	; 0x76
 8000bee:	1f43      	subs	r3, r0, #5
 8000bf0:	409d      	lsls	r5, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	427f      	negs	r7, r7
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	1a3f      	subs	r7, r7, r0
 8000bfc:	e777      	b.n	8000aee <__aeabi_fdiv+0x32>
 8000bfe:	4640      	mov	r0, r8
 8000c00:	f002 fb10 	bl	8003224 <__clzsi2>
 8000c04:	4642      	mov	r2, r8
 8000c06:	1f43      	subs	r3, r0, #5
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	2376      	movs	r3, #118	; 0x76
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	4690      	mov	r8, r2
 8000c10:	1a1b      	subs	r3, r3, r0
 8000c12:	2200      	movs	r2, #0
 8000c14:	e77d      	b.n	8000b12 <__aeabi_fdiv+0x56>
 8000c16:	23ff      	movs	r3, #255	; 0xff
 8000c18:	2203      	movs	r2, #3
 8000c1a:	e77a      	b.n	8000b12 <__aeabi_fdiv+0x56>
 8000c1c:	000e      	movs	r6, r1
 8000c1e:	20ff      	movs	r0, #255	; 0xff
 8000c20:	2500      	movs	r5, #0
 8000c22:	e7ac      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c24:	2001      	movs	r0, #1
 8000c26:	1ac0      	subs	r0, r0, r3
 8000c28:	281b      	cmp	r0, #27
 8000c2a:	dca6      	bgt.n	8000b7a <__aeabi_fdiv+0xbe>
 8000c2c:	379e      	adds	r7, #158	; 0x9e
 8000c2e:	002a      	movs	r2, r5
 8000c30:	40bd      	lsls	r5, r7
 8000c32:	40c2      	lsrs	r2, r0
 8000c34:	1e6b      	subs	r3, r5, #1
 8000c36:	419d      	sbcs	r5, r3
 8000c38:	4315      	orrs	r5, r2
 8000c3a:	076b      	lsls	r3, r5, #29
 8000c3c:	d004      	beq.n	8000c48 <__aeabi_fdiv+0x18c>
 8000c3e:	230f      	movs	r3, #15
 8000c40:	402b      	ands	r3, r5
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d000      	beq.n	8000c48 <__aeabi_fdiv+0x18c>
 8000c46:	3504      	adds	r5, #4
 8000c48:	016b      	lsls	r3, r5, #5
 8000c4a:	d544      	bpl.n	8000cd6 <__aeabi_fdiv+0x21a>
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	2500      	movs	r5, #0
 8000c50:	e795      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c52:	20ff      	movs	r0, #255	; 0xff
 8000c54:	2500      	movs	r5, #0
 8000c56:	e792      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c58:	2580      	movs	r5, #128	; 0x80
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	20ff      	movs	r0, #255	; 0xff
 8000c5e:	03ed      	lsls	r5, r5, #15
 8000c60:	e78d      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c62:	2300      	movs	r3, #0
 8000c64:	4698      	mov	r8, r3
 8000c66:	2080      	movs	r0, #128	; 0x80
 8000c68:	03c0      	lsls	r0, r0, #15
 8000c6a:	4205      	tst	r5, r0
 8000c6c:	d009      	beq.n	8000c82 <__aeabi_fdiv+0x1c6>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	4203      	tst	r3, r0
 8000c72:	d106      	bne.n	8000c82 <__aeabi_fdiv+0x1c6>
 8000c74:	4645      	mov	r5, r8
 8000c76:	4305      	orrs	r5, r0
 8000c78:	026d      	lsls	r5, r5, #9
 8000c7a:	0026      	movs	r6, r4
 8000c7c:	20ff      	movs	r0, #255	; 0xff
 8000c7e:	0a6d      	lsrs	r5, r5, #9
 8000c80:	e77d      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c82:	2080      	movs	r0, #128	; 0x80
 8000c84:	03c0      	lsls	r0, r0, #15
 8000c86:	4305      	orrs	r5, r0
 8000c88:	026d      	lsls	r5, r5, #9
 8000c8a:	20ff      	movs	r0, #255	; 0xff
 8000c8c:	0a6d      	lsrs	r5, r5, #9
 8000c8e:	e776      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000c90:	4642      	mov	r2, r8
 8000c92:	016b      	lsls	r3, r5, #5
 8000c94:	0150      	lsls	r0, r2, #5
 8000c96:	4283      	cmp	r3, r0
 8000c98:	d219      	bcs.n	8000cce <__aeabi_fdiv+0x212>
 8000c9a:	221b      	movs	r2, #27
 8000c9c:	2500      	movs	r5, #0
 8000c9e:	3f01      	subs	r7, #1
 8000ca0:	2601      	movs	r6, #1
 8000ca2:	001c      	movs	r4, r3
 8000ca4:	006d      	lsls	r5, r5, #1
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	db01      	blt.n	8000cb0 <__aeabi_fdiv+0x1f4>
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d801      	bhi.n	8000cb4 <__aeabi_fdiv+0x1f8>
 8000cb0:	1a1b      	subs	r3, r3, r0
 8000cb2:	4335      	orrs	r5, r6
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d1f3      	bne.n	8000ca2 <__aeabi_fdiv+0x1e6>
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	4193      	sbcs	r3, r2
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	337f      	adds	r3, #127	; 0x7f
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_fdiv+0x210>
 8000cca:	e741      	b.n	8000b50 <__aeabi_fdiv+0x94>
 8000ccc:	e7aa      	b.n	8000c24 <__aeabi_fdiv+0x168>
 8000cce:	221a      	movs	r2, #26
 8000cd0:	2501      	movs	r5, #1
 8000cd2:	1a1b      	subs	r3, r3, r0
 8000cd4:	e7e4      	b.n	8000ca0 <__aeabi_fdiv+0x1e4>
 8000cd6:	01ad      	lsls	r5, r5, #6
 8000cd8:	2000      	movs	r0, #0
 8000cda:	0a6d      	lsrs	r5, r5, #9
 8000cdc:	e74f      	b.n	8000b7e <__aeabi_fdiv+0xc2>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	0800b4a8 	.word	0x0800b4a8
 8000ce4:	f7ffffff 	.word	0xf7ffffff
 8000ce8:	0800b4e8 	.word	0x0800b4e8

08000cec <__eqsf2>:
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	0042      	lsls	r2, r0, #1
 8000cf0:	0245      	lsls	r5, r0, #9
 8000cf2:	024e      	lsls	r6, r1, #9
 8000cf4:	004c      	lsls	r4, r1, #1
 8000cf6:	0fc3      	lsrs	r3, r0, #31
 8000cf8:	0a6d      	lsrs	r5, r5, #9
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	0e12      	lsrs	r2, r2, #24
 8000cfe:	0a76      	lsrs	r6, r6, #9
 8000d00:	0e24      	lsrs	r4, r4, #24
 8000d02:	0fc9      	lsrs	r1, r1, #31
 8000d04:	2aff      	cmp	r2, #255	; 0xff
 8000d06:	d006      	beq.n	8000d16 <__eqsf2+0x2a>
 8000d08:	2cff      	cmp	r4, #255	; 0xff
 8000d0a:	d003      	beq.n	8000d14 <__eqsf2+0x28>
 8000d0c:	42a2      	cmp	r2, r4
 8000d0e:	d101      	bne.n	8000d14 <__eqsf2+0x28>
 8000d10:	42b5      	cmp	r5, r6
 8000d12:	d006      	beq.n	8000d22 <__eqsf2+0x36>
 8000d14:	bd70      	pop	{r4, r5, r6, pc}
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d1fc      	bne.n	8000d14 <__eqsf2+0x28>
 8000d1a:	2cff      	cmp	r4, #255	; 0xff
 8000d1c:	d1fa      	bne.n	8000d14 <__eqsf2+0x28>
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d1f8      	bne.n	8000d14 <__eqsf2+0x28>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d006      	beq.n	8000d34 <__eqsf2+0x48>
 8000d26:	2001      	movs	r0, #1
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	d1f3      	bne.n	8000d14 <__eqsf2+0x28>
 8000d2c:	0028      	movs	r0, r5
 8000d2e:	1e43      	subs	r3, r0, #1
 8000d30:	4198      	sbcs	r0, r3
 8000d32:	e7ef      	b.n	8000d14 <__eqsf2+0x28>
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7ed      	b.n	8000d14 <__eqsf2+0x28>

08000d38 <__gesf2>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	0042      	lsls	r2, r0, #1
 8000d3c:	0245      	lsls	r5, r0, #9
 8000d3e:	024e      	lsls	r6, r1, #9
 8000d40:	004c      	lsls	r4, r1, #1
 8000d42:	0fc3      	lsrs	r3, r0, #31
 8000d44:	0a6d      	lsrs	r5, r5, #9
 8000d46:	0e12      	lsrs	r2, r2, #24
 8000d48:	0a76      	lsrs	r6, r6, #9
 8000d4a:	0e24      	lsrs	r4, r4, #24
 8000d4c:	0fc8      	lsrs	r0, r1, #31
 8000d4e:	2aff      	cmp	r2, #255	; 0xff
 8000d50:	d01b      	beq.n	8000d8a <__gesf2+0x52>
 8000d52:	2cff      	cmp	r4, #255	; 0xff
 8000d54:	d00e      	beq.n	8000d74 <__gesf2+0x3c>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d11b      	bne.n	8000d92 <__gesf2+0x5a>
 8000d5a:	2c00      	cmp	r4, #0
 8000d5c:	d101      	bne.n	8000d62 <__gesf2+0x2a>
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d01c      	beq.n	8000d9c <__gesf2+0x64>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d00c      	beq.n	8000d80 <__gesf2+0x48>
 8000d66:	4283      	cmp	r3, r0
 8000d68:	d01c      	beq.n	8000da4 <__gesf2+0x6c>
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	1e58      	subs	r0, r3, #1
 8000d6e:	4008      	ands	r0, r1
 8000d70:	3801      	subs	r0, #1
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d122      	bne.n	8000dbe <__gesf2+0x86>
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	d1f4      	bne.n	8000d66 <__gesf2+0x2e>
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d1f2      	bne.n	8000d66 <__gesf2+0x2e>
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d1f6      	bne.n	8000d72 <__gesf2+0x3a>
 8000d84:	2001      	movs	r0, #1
 8000d86:	4240      	negs	r0, r0
 8000d88:	e7f3      	b.n	8000d72 <__gesf2+0x3a>
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d117      	bne.n	8000dbe <__gesf2+0x86>
 8000d8e:	2cff      	cmp	r4, #255	; 0xff
 8000d90:	d0f0      	beq.n	8000d74 <__gesf2+0x3c>
 8000d92:	2c00      	cmp	r4, #0
 8000d94:	d1e7      	bne.n	8000d66 <__gesf2+0x2e>
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d1e5      	bne.n	8000d66 <__gesf2+0x2e>
 8000d9a:	e7e6      	b.n	8000d6a <__gesf2+0x32>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d0e7      	beq.n	8000d72 <__gesf2+0x3a>
 8000da2:	e7e2      	b.n	8000d6a <__gesf2+0x32>
 8000da4:	42a2      	cmp	r2, r4
 8000da6:	dc05      	bgt.n	8000db4 <__gesf2+0x7c>
 8000da8:	dbea      	blt.n	8000d80 <__gesf2+0x48>
 8000daa:	42b5      	cmp	r5, r6
 8000dac:	d802      	bhi.n	8000db4 <__gesf2+0x7c>
 8000dae:	d3e7      	bcc.n	8000d80 <__gesf2+0x48>
 8000db0:	2000      	movs	r0, #0
 8000db2:	e7de      	b.n	8000d72 <__gesf2+0x3a>
 8000db4:	4243      	negs	r3, r0
 8000db6:	4158      	adcs	r0, r3
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	3801      	subs	r0, #1
 8000dbc:	e7d9      	b.n	8000d72 <__gesf2+0x3a>
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	4240      	negs	r0, r0
 8000dc2:	e7d6      	b.n	8000d72 <__gesf2+0x3a>

08000dc4 <__lesf2>:
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	0042      	lsls	r2, r0, #1
 8000dc8:	0245      	lsls	r5, r0, #9
 8000dca:	024e      	lsls	r6, r1, #9
 8000dcc:	004c      	lsls	r4, r1, #1
 8000dce:	0fc3      	lsrs	r3, r0, #31
 8000dd0:	0a6d      	lsrs	r5, r5, #9
 8000dd2:	0e12      	lsrs	r2, r2, #24
 8000dd4:	0a76      	lsrs	r6, r6, #9
 8000dd6:	0e24      	lsrs	r4, r4, #24
 8000dd8:	0fc8      	lsrs	r0, r1, #31
 8000dda:	2aff      	cmp	r2, #255	; 0xff
 8000ddc:	d00b      	beq.n	8000df6 <__lesf2+0x32>
 8000dde:	2cff      	cmp	r4, #255	; 0xff
 8000de0:	d00d      	beq.n	8000dfe <__lesf2+0x3a>
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d11f      	bne.n	8000e26 <__lesf2+0x62>
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d116      	bne.n	8000e18 <__lesf2+0x54>
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d114      	bne.n	8000e18 <__lesf2+0x54>
 8000dee:	2000      	movs	r0, #0
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	d010      	beq.n	8000e16 <__lesf2+0x52>
 8000df4:	e009      	b.n	8000e0a <__lesf2+0x46>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d10c      	bne.n	8000e14 <__lesf2+0x50>
 8000dfa:	2cff      	cmp	r4, #255	; 0xff
 8000dfc:	d113      	bne.n	8000e26 <__lesf2+0x62>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d108      	bne.n	8000e14 <__lesf2+0x50>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d008      	beq.n	8000e18 <__lesf2+0x54>
 8000e06:	4283      	cmp	r3, r0
 8000e08:	d012      	beq.n	8000e30 <__lesf2+0x6c>
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	1e58      	subs	r0, r3, #1
 8000e0e:	4008      	ands	r0, r1
 8000e10:	3801      	subs	r0, #1
 8000e12:	e000      	b.n	8000e16 <__lesf2+0x52>
 8000e14:	2002      	movs	r0, #2
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d1f4      	bne.n	8000e06 <__lesf2+0x42>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d1fa      	bne.n	8000e16 <__lesf2+0x52>
 8000e20:	2001      	movs	r0, #1
 8000e22:	4240      	negs	r0, r0
 8000e24:	e7f7      	b.n	8000e16 <__lesf2+0x52>
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d1ed      	bne.n	8000e06 <__lesf2+0x42>
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d1eb      	bne.n	8000e06 <__lesf2+0x42>
 8000e2e:	e7ec      	b.n	8000e0a <__lesf2+0x46>
 8000e30:	42a2      	cmp	r2, r4
 8000e32:	dc05      	bgt.n	8000e40 <__lesf2+0x7c>
 8000e34:	dbf2      	blt.n	8000e1c <__lesf2+0x58>
 8000e36:	42b5      	cmp	r5, r6
 8000e38:	d802      	bhi.n	8000e40 <__lesf2+0x7c>
 8000e3a:	d3ef      	bcc.n	8000e1c <__lesf2+0x58>
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	e7ea      	b.n	8000e16 <__lesf2+0x52>
 8000e40:	4243      	negs	r3, r0
 8000e42:	4158      	adcs	r0, r3
 8000e44:	0040      	lsls	r0, r0, #1
 8000e46:	3801      	subs	r0, #1
 8000e48:	e7e5      	b.n	8000e16 <__lesf2+0x52>
 8000e4a:	46c0      	nop			; (mov r8, r8)

08000e4c <__aeabi_fmul>:
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	464f      	mov	r7, r9
 8000e50:	4646      	mov	r6, r8
 8000e52:	46d6      	mov	lr, sl
 8000e54:	0244      	lsls	r4, r0, #9
 8000e56:	0045      	lsls	r5, r0, #1
 8000e58:	b5c0      	push	{r6, r7, lr}
 8000e5a:	0a64      	lsrs	r4, r4, #9
 8000e5c:	1c0f      	adds	r7, r1, #0
 8000e5e:	0e2d      	lsrs	r5, r5, #24
 8000e60:	0fc6      	lsrs	r6, r0, #31
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fmul+0x1c>
 8000e66:	e08d      	b.n	8000f84 <__aeabi_fmul+0x138>
 8000e68:	2dff      	cmp	r5, #255	; 0xff
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fmul+0x22>
 8000e6c:	e092      	b.n	8000f94 <__aeabi_fmul+0x148>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2080      	movs	r0, #128	; 0x80
 8000e72:	4699      	mov	r9, r3
 8000e74:	469a      	mov	sl, r3
 8000e76:	00e4      	lsls	r4, r4, #3
 8000e78:	04c0      	lsls	r0, r0, #19
 8000e7a:	4304      	orrs	r4, r0
 8000e7c:	3d7f      	subs	r5, #127	; 0x7f
 8000e7e:	0278      	lsls	r0, r7, #9
 8000e80:	0a43      	lsrs	r3, r0, #9
 8000e82:	4698      	mov	r8, r3
 8000e84:	007b      	lsls	r3, r7, #1
 8000e86:	0e1b      	lsrs	r3, r3, #24
 8000e88:	0fff      	lsrs	r7, r7, #31
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fmul+0x44>
 8000e8e:	e070      	b.n	8000f72 <__aeabi_fmul+0x126>
 8000e90:	2bff      	cmp	r3, #255	; 0xff
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fmul+0x4a>
 8000e94:	e086      	b.n	8000fa4 <__aeabi_fmul+0x158>
 8000e96:	4642      	mov	r2, r8
 8000e98:	00d0      	lsls	r0, r2, #3
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	3b7f      	subs	r3, #127	; 0x7f
 8000e9e:	18ed      	adds	r5, r5, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	04d2      	lsls	r2, r2, #19
 8000ea4:	4302      	orrs	r2, r0
 8000ea6:	4690      	mov	r8, r2
 8000ea8:	469c      	mov	ip, r3
 8000eaa:	0031      	movs	r1, r6
 8000eac:	464b      	mov	r3, r9
 8000eae:	4079      	eors	r1, r7
 8000eb0:	1c68      	adds	r0, r5, #1
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	d81c      	bhi.n	8000ef0 <__aeabi_fmul+0xa4>
 8000eb6:	4a76      	ldr	r2, [pc, #472]	; (8001090 <__aeabi_fmul+0x244>)
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	58d3      	ldr	r3, [r2, r3]
 8000ebc:	469f      	mov	pc, r3
 8000ebe:	0039      	movs	r1, r7
 8000ec0:	4644      	mov	r4, r8
 8000ec2:	46e2      	mov	sl, ip
 8000ec4:	4653      	mov	r3, sl
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d00f      	beq.n	8000eea <__aeabi_fmul+0x9e>
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fmul+0x84>
 8000ece:	e0d7      	b.n	8001080 <__aeabi_fmul+0x234>
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d137      	bne.n	8000f44 <__aeabi_fmul+0xf8>
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	05c0      	lsls	r0, r0, #23
 8000eda:	4320      	orrs	r0, r4
 8000edc:	07c9      	lsls	r1, r1, #31
 8000ede:	4308      	orrs	r0, r1
 8000ee0:	bce0      	pop	{r5, r6, r7}
 8000ee2:	46ba      	mov	sl, r7
 8000ee4:	46b1      	mov	r9, r6
 8000ee6:	46a8      	mov	r8, r5
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eea:	20ff      	movs	r0, #255	; 0xff
 8000eec:	2400      	movs	r4, #0
 8000eee:	e7f3      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8000ef0:	0c26      	lsrs	r6, r4, #16
 8000ef2:	0424      	lsls	r4, r4, #16
 8000ef4:	0c22      	lsrs	r2, r4, #16
 8000ef6:	4644      	mov	r4, r8
 8000ef8:	0424      	lsls	r4, r4, #16
 8000efa:	0c24      	lsrs	r4, r4, #16
 8000efc:	4643      	mov	r3, r8
 8000efe:	0027      	movs	r7, r4
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	4357      	muls	r7, r2
 8000f04:	4374      	muls	r4, r6
 8000f06:	435a      	muls	r2, r3
 8000f08:	435e      	muls	r6, r3
 8000f0a:	1912      	adds	r2, r2, r4
 8000f0c:	0c3b      	lsrs	r3, r7, #16
 8000f0e:	189b      	adds	r3, r3, r2
 8000f10:	429c      	cmp	r4, r3
 8000f12:	d903      	bls.n	8000f1c <__aeabi_fmul+0xd0>
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	0252      	lsls	r2, r2, #9
 8000f18:	4694      	mov	ip, r2
 8000f1a:	4466      	add	r6, ip
 8000f1c:	043f      	lsls	r7, r7, #16
 8000f1e:	041a      	lsls	r2, r3, #16
 8000f20:	0c3f      	lsrs	r7, r7, #16
 8000f22:	19d2      	adds	r2, r2, r7
 8000f24:	0194      	lsls	r4, r2, #6
 8000f26:	1e67      	subs	r7, r4, #1
 8000f28:	41bc      	sbcs	r4, r7
 8000f2a:	0c1b      	lsrs	r3, r3, #16
 8000f2c:	0e92      	lsrs	r2, r2, #26
 8000f2e:	199b      	adds	r3, r3, r6
 8000f30:	4314      	orrs	r4, r2
 8000f32:	019b      	lsls	r3, r3, #6
 8000f34:	431c      	orrs	r4, r3
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	d400      	bmi.n	8000f3c <__aeabi_fmul+0xf0>
 8000f3a:	e09b      	b.n	8001074 <__aeabi_fmul+0x228>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	0862      	lsrs	r2, r4, #1
 8000f40:	401c      	ands	r4, r3
 8000f42:	4314      	orrs	r4, r2
 8000f44:	0002      	movs	r2, r0
 8000f46:	327f      	adds	r2, #127	; 0x7f
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	dd64      	ble.n	8001016 <__aeabi_fmul+0x1ca>
 8000f4c:	0763      	lsls	r3, r4, #29
 8000f4e:	d004      	beq.n	8000f5a <__aeabi_fmul+0x10e>
 8000f50:	230f      	movs	r3, #15
 8000f52:	4023      	ands	r3, r4
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d000      	beq.n	8000f5a <__aeabi_fmul+0x10e>
 8000f58:	3404      	adds	r4, #4
 8000f5a:	0123      	lsls	r3, r4, #4
 8000f5c:	d503      	bpl.n	8000f66 <__aeabi_fmul+0x11a>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <__aeabi_fmul+0x248>)
 8000f62:	3280      	adds	r2, #128	; 0x80
 8000f64:	401c      	ands	r4, r3
 8000f66:	2afe      	cmp	r2, #254	; 0xfe
 8000f68:	dcbf      	bgt.n	8000eea <__aeabi_fmul+0x9e>
 8000f6a:	01a4      	lsls	r4, r4, #6
 8000f6c:	0a64      	lsrs	r4, r4, #9
 8000f6e:	b2d0      	uxtb	r0, r2
 8000f70:	e7b2      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8000f72:	4643      	mov	r3, r8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d13d      	bne.n	8000ff4 <__aeabi_fmul+0x1a8>
 8000f78:	464a      	mov	r2, r9
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	4691      	mov	r9, r2
 8000f80:	469c      	mov	ip, r3
 8000f82:	e792      	b.n	8000eaa <__aeabi_fmul+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d129      	bne.n	8000fdc <__aeabi_fmul+0x190>
 8000f88:	2304      	movs	r3, #4
 8000f8a:	4699      	mov	r9, r3
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	2500      	movs	r5, #0
 8000f90:	469a      	mov	sl, r3
 8000f92:	e774      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d11b      	bne.n	8000fd0 <__aeabi_fmul+0x184>
 8000f98:	2308      	movs	r3, #8
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	3b06      	subs	r3, #6
 8000f9e:	25ff      	movs	r5, #255	; 0xff
 8000fa0:	469a      	mov	sl, r3
 8000fa2:	e76c      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	35ff      	adds	r5, #255	; 0xff
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <__aeabi_fmul+0x178>
 8000fac:	2302      	movs	r3, #2
 8000fae:	464a      	mov	r2, r9
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	469c      	mov	ip, r3
 8000fb6:	e778      	b.n	8000eaa <__aeabi_fmul+0x5e>
 8000fb8:	4653      	mov	r3, sl
 8000fba:	0031      	movs	r1, r6
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d000      	beq.n	8000fc2 <__aeabi_fmul+0x176>
 8000fc0:	e783      	b.n	8000eca <__aeabi_fmul+0x7e>
 8000fc2:	e792      	b.n	8000eea <__aeabi_fmul+0x9e>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	464a      	mov	r2, r9
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	4691      	mov	r9, r2
 8000fcc:	469c      	mov	ip, r3
 8000fce:	e76c      	b.n	8000eaa <__aeabi_fmul+0x5e>
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	3b09      	subs	r3, #9
 8000fd6:	25ff      	movs	r5, #255	; 0xff
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e750      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f002 f921 	bl	8003224 <__clzsi2>
 8000fe2:	2576      	movs	r5, #118	; 0x76
 8000fe4:	1f43      	subs	r3, r0, #5
 8000fe6:	409c      	lsls	r4, r3
 8000fe8:	2300      	movs	r3, #0
 8000fea:	426d      	negs	r5, r5
 8000fec:	4699      	mov	r9, r3
 8000fee:	469a      	mov	sl, r3
 8000ff0:	1a2d      	subs	r5, r5, r0
 8000ff2:	e744      	b.n	8000e7e <__aeabi_fmul+0x32>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	f002 f915 	bl	8003224 <__clzsi2>
 8000ffa:	4642      	mov	r2, r8
 8000ffc:	1f43      	subs	r3, r0, #5
 8000ffe:	409a      	lsls	r2, r3
 8001000:	2300      	movs	r3, #0
 8001002:	1a2d      	subs	r5, r5, r0
 8001004:	4690      	mov	r8, r2
 8001006:	469c      	mov	ip, r3
 8001008:	3d76      	subs	r5, #118	; 0x76
 800100a:	e74e      	b.n	8000eaa <__aeabi_fmul+0x5e>
 800100c:	2480      	movs	r4, #128	; 0x80
 800100e:	2100      	movs	r1, #0
 8001010:	20ff      	movs	r0, #255	; 0xff
 8001012:	03e4      	lsls	r4, r4, #15
 8001014:	e760      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001016:	2301      	movs	r3, #1
 8001018:	1a9b      	subs	r3, r3, r2
 800101a:	2b1b      	cmp	r3, #27
 800101c:	dd00      	ble.n	8001020 <__aeabi_fmul+0x1d4>
 800101e:	e759      	b.n	8000ed4 <__aeabi_fmul+0x88>
 8001020:	0022      	movs	r2, r4
 8001022:	309e      	adds	r0, #158	; 0x9e
 8001024:	40da      	lsrs	r2, r3
 8001026:	4084      	lsls	r4, r0
 8001028:	0013      	movs	r3, r2
 800102a:	1e62      	subs	r2, r4, #1
 800102c:	4194      	sbcs	r4, r2
 800102e:	431c      	orrs	r4, r3
 8001030:	0763      	lsls	r3, r4, #29
 8001032:	d004      	beq.n	800103e <__aeabi_fmul+0x1f2>
 8001034:	230f      	movs	r3, #15
 8001036:	4023      	ands	r3, r4
 8001038:	2b04      	cmp	r3, #4
 800103a:	d000      	beq.n	800103e <__aeabi_fmul+0x1f2>
 800103c:	3404      	adds	r4, #4
 800103e:	0163      	lsls	r3, r4, #5
 8001040:	d51a      	bpl.n	8001078 <__aeabi_fmul+0x22c>
 8001042:	2001      	movs	r0, #1
 8001044:	2400      	movs	r4, #0
 8001046:	e747      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001048:	2080      	movs	r0, #128	; 0x80
 800104a:	03c0      	lsls	r0, r0, #15
 800104c:	4204      	tst	r4, r0
 800104e:	d009      	beq.n	8001064 <__aeabi_fmul+0x218>
 8001050:	4643      	mov	r3, r8
 8001052:	4203      	tst	r3, r0
 8001054:	d106      	bne.n	8001064 <__aeabi_fmul+0x218>
 8001056:	4644      	mov	r4, r8
 8001058:	4304      	orrs	r4, r0
 800105a:	0264      	lsls	r4, r4, #9
 800105c:	0039      	movs	r1, r7
 800105e:	20ff      	movs	r0, #255	; 0xff
 8001060:	0a64      	lsrs	r4, r4, #9
 8001062:	e739      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001064:	2080      	movs	r0, #128	; 0x80
 8001066:	03c0      	lsls	r0, r0, #15
 8001068:	4304      	orrs	r4, r0
 800106a:	0264      	lsls	r4, r4, #9
 800106c:	0031      	movs	r1, r6
 800106e:	20ff      	movs	r0, #255	; 0xff
 8001070:	0a64      	lsrs	r4, r4, #9
 8001072:	e731      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001074:	0028      	movs	r0, r5
 8001076:	e765      	b.n	8000f44 <__aeabi_fmul+0xf8>
 8001078:	01a4      	lsls	r4, r4, #6
 800107a:	2000      	movs	r0, #0
 800107c:	0a64      	lsrs	r4, r4, #9
 800107e:	e72b      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 8001080:	2080      	movs	r0, #128	; 0x80
 8001082:	03c0      	lsls	r0, r0, #15
 8001084:	4304      	orrs	r4, r0
 8001086:	0264      	lsls	r4, r4, #9
 8001088:	20ff      	movs	r0, #255	; 0xff
 800108a:	0a64      	lsrs	r4, r4, #9
 800108c:	e724      	b.n	8000ed8 <__aeabi_fmul+0x8c>
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	0800b528 	.word	0x0800b528
 8001094:	f7ffffff 	.word	0xf7ffffff

08001098 <__aeabi_fsub>:
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109a:	46ce      	mov	lr, r9
 800109c:	4647      	mov	r7, r8
 800109e:	0243      	lsls	r3, r0, #9
 80010a0:	0a5b      	lsrs	r3, r3, #9
 80010a2:	024e      	lsls	r6, r1, #9
 80010a4:	00da      	lsls	r2, r3, #3
 80010a6:	4694      	mov	ip, r2
 80010a8:	0a72      	lsrs	r2, r6, #9
 80010aa:	4691      	mov	r9, r2
 80010ac:	0045      	lsls	r5, r0, #1
 80010ae:	004a      	lsls	r2, r1, #1
 80010b0:	b580      	push	{r7, lr}
 80010b2:	0e2d      	lsrs	r5, r5, #24
 80010b4:	001f      	movs	r7, r3
 80010b6:	0fc4      	lsrs	r4, r0, #31
 80010b8:	0e12      	lsrs	r2, r2, #24
 80010ba:	0fc9      	lsrs	r1, r1, #31
 80010bc:	09b6      	lsrs	r6, r6, #6
 80010be:	2aff      	cmp	r2, #255	; 0xff
 80010c0:	d05b      	beq.n	800117a <__aeabi_fsub+0xe2>
 80010c2:	2001      	movs	r0, #1
 80010c4:	4041      	eors	r1, r0
 80010c6:	428c      	cmp	r4, r1
 80010c8:	d039      	beq.n	800113e <__aeabi_fsub+0xa6>
 80010ca:	1aa8      	subs	r0, r5, r2
 80010cc:	2800      	cmp	r0, #0
 80010ce:	dd5a      	ble.n	8001186 <__aeabi_fsub+0xee>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d06a      	beq.n	80011aa <__aeabi_fsub+0x112>
 80010d4:	2dff      	cmp	r5, #255	; 0xff
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x42>
 80010d8:	e0d9      	b.n	800128e <__aeabi_fsub+0x1f6>
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	04d2      	lsls	r2, r2, #19
 80010de:	4316      	orrs	r6, r2
 80010e0:	281b      	cmp	r0, #27
 80010e2:	dc00      	bgt.n	80010e6 <__aeabi_fsub+0x4e>
 80010e4:	e0e9      	b.n	80012ba <__aeabi_fsub+0x222>
 80010e6:	2001      	movs	r0, #1
 80010e8:	4663      	mov	r3, ip
 80010ea:	1a18      	subs	r0, r3, r0
 80010ec:	0143      	lsls	r3, r0, #5
 80010ee:	d400      	bmi.n	80010f2 <__aeabi_fsub+0x5a>
 80010f0:	e0b4      	b.n	800125c <__aeabi_fsub+0x1c4>
 80010f2:	0180      	lsls	r0, r0, #6
 80010f4:	0987      	lsrs	r7, r0, #6
 80010f6:	0038      	movs	r0, r7
 80010f8:	f002 f894 	bl	8003224 <__clzsi2>
 80010fc:	3805      	subs	r0, #5
 80010fe:	4087      	lsls	r7, r0
 8001100:	4285      	cmp	r5, r0
 8001102:	dc00      	bgt.n	8001106 <__aeabi_fsub+0x6e>
 8001104:	e0cc      	b.n	80012a0 <__aeabi_fsub+0x208>
 8001106:	1a2d      	subs	r5, r5, r0
 8001108:	48b5      	ldr	r0, [pc, #724]	; (80013e0 <__aeabi_fsub+0x348>)
 800110a:	4038      	ands	r0, r7
 800110c:	0743      	lsls	r3, r0, #29
 800110e:	d004      	beq.n	800111a <__aeabi_fsub+0x82>
 8001110:	230f      	movs	r3, #15
 8001112:	4003      	ands	r3, r0
 8001114:	2b04      	cmp	r3, #4
 8001116:	d000      	beq.n	800111a <__aeabi_fsub+0x82>
 8001118:	3004      	adds	r0, #4
 800111a:	0143      	lsls	r3, r0, #5
 800111c:	d400      	bmi.n	8001120 <__aeabi_fsub+0x88>
 800111e:	e0a0      	b.n	8001262 <__aeabi_fsub+0x1ca>
 8001120:	1c6a      	adds	r2, r5, #1
 8001122:	2dfe      	cmp	r5, #254	; 0xfe
 8001124:	d100      	bne.n	8001128 <__aeabi_fsub+0x90>
 8001126:	e08d      	b.n	8001244 <__aeabi_fsub+0x1ac>
 8001128:	0180      	lsls	r0, r0, #6
 800112a:	0a47      	lsrs	r7, r0, #9
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	05d0      	lsls	r0, r2, #23
 8001130:	4338      	orrs	r0, r7
 8001132:	07e4      	lsls	r4, r4, #31
 8001134:	4320      	orrs	r0, r4
 8001136:	bcc0      	pop	{r6, r7}
 8001138:	46b9      	mov	r9, r7
 800113a:	46b0      	mov	r8, r6
 800113c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800113e:	1aa8      	subs	r0, r5, r2
 8001140:	4680      	mov	r8, r0
 8001142:	2800      	cmp	r0, #0
 8001144:	dd45      	ble.n	80011d2 <__aeabi_fsub+0x13a>
 8001146:	2a00      	cmp	r2, #0
 8001148:	d070      	beq.n	800122c <__aeabi_fsub+0x194>
 800114a:	2dff      	cmp	r5, #255	; 0xff
 800114c:	d100      	bne.n	8001150 <__aeabi_fsub+0xb8>
 800114e:	e09e      	b.n	800128e <__aeabi_fsub+0x1f6>
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	04db      	lsls	r3, r3, #19
 8001154:	431e      	orrs	r6, r3
 8001156:	4643      	mov	r3, r8
 8001158:	2b1b      	cmp	r3, #27
 800115a:	dc00      	bgt.n	800115e <__aeabi_fsub+0xc6>
 800115c:	e0d2      	b.n	8001304 <__aeabi_fsub+0x26c>
 800115e:	2001      	movs	r0, #1
 8001160:	4460      	add	r0, ip
 8001162:	0143      	lsls	r3, r0, #5
 8001164:	d57a      	bpl.n	800125c <__aeabi_fsub+0x1c4>
 8001166:	3501      	adds	r5, #1
 8001168:	2dff      	cmp	r5, #255	; 0xff
 800116a:	d06b      	beq.n	8001244 <__aeabi_fsub+0x1ac>
 800116c:	2301      	movs	r3, #1
 800116e:	4a9d      	ldr	r2, [pc, #628]	; (80013e4 <__aeabi_fsub+0x34c>)
 8001170:	4003      	ands	r3, r0
 8001172:	0840      	lsrs	r0, r0, #1
 8001174:	4010      	ands	r0, r2
 8001176:	4318      	orrs	r0, r3
 8001178:	e7c8      	b.n	800110c <__aeabi_fsub+0x74>
 800117a:	2e00      	cmp	r6, #0
 800117c:	d020      	beq.n	80011c0 <__aeabi_fsub+0x128>
 800117e:	428c      	cmp	r4, r1
 8001180:	d023      	beq.n	80011ca <__aeabi_fsub+0x132>
 8001182:	0028      	movs	r0, r5
 8001184:	38ff      	subs	r0, #255	; 0xff
 8001186:	2800      	cmp	r0, #0
 8001188:	d039      	beq.n	80011fe <__aeabi_fsub+0x166>
 800118a:	1b57      	subs	r7, r2, r5
 800118c:	2d00      	cmp	r5, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_fsub+0xfa>
 8001190:	e09d      	b.n	80012ce <__aeabi_fsub+0x236>
 8001192:	4663      	mov	r3, ip
 8001194:	2b00      	cmp	r3, #0
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x102>
 8001198:	e0db      	b.n	8001352 <__aeabi_fsub+0x2ba>
 800119a:	1e7b      	subs	r3, r7, #1
 800119c:	2f01      	cmp	r7, #1
 800119e:	d100      	bne.n	80011a2 <__aeabi_fsub+0x10a>
 80011a0:	e10d      	b.n	80013be <__aeabi_fsub+0x326>
 80011a2:	2fff      	cmp	r7, #255	; 0xff
 80011a4:	d071      	beq.n	800128a <__aeabi_fsub+0x1f2>
 80011a6:	001f      	movs	r7, r3
 80011a8:	e098      	b.n	80012dc <__aeabi_fsub+0x244>
 80011aa:	2e00      	cmp	r6, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x118>
 80011ae:	e0a7      	b.n	8001300 <__aeabi_fsub+0x268>
 80011b0:	1e42      	subs	r2, r0, #1
 80011b2:	2801      	cmp	r0, #1
 80011b4:	d100      	bne.n	80011b8 <__aeabi_fsub+0x120>
 80011b6:	e0e6      	b.n	8001386 <__aeabi_fsub+0x2ee>
 80011b8:	28ff      	cmp	r0, #255	; 0xff
 80011ba:	d068      	beq.n	800128e <__aeabi_fsub+0x1f6>
 80011bc:	0010      	movs	r0, r2
 80011be:	e78f      	b.n	80010e0 <__aeabi_fsub+0x48>
 80011c0:	2001      	movs	r0, #1
 80011c2:	4041      	eors	r1, r0
 80011c4:	42a1      	cmp	r1, r4
 80011c6:	d000      	beq.n	80011ca <__aeabi_fsub+0x132>
 80011c8:	e77f      	b.n	80010ca <__aeabi_fsub+0x32>
 80011ca:	20ff      	movs	r0, #255	; 0xff
 80011cc:	4240      	negs	r0, r0
 80011ce:	4680      	mov	r8, r0
 80011d0:	44a8      	add	r8, r5
 80011d2:	4640      	mov	r0, r8
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d038      	beq.n	800124a <__aeabi_fsub+0x1b2>
 80011d8:	1b51      	subs	r1, r2, r5
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_fsub+0x148>
 80011de:	e0ae      	b.n	800133e <__aeabi_fsub+0x2a6>
 80011e0:	2aff      	cmp	r2, #255	; 0xff
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x14e>
 80011e4:	e0df      	b.n	80013a6 <__aeabi_fsub+0x30e>
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	4660      	mov	r0, ip
 80011ea:	04db      	lsls	r3, r3, #19
 80011ec:	4318      	orrs	r0, r3
 80011ee:	4684      	mov	ip, r0
 80011f0:	291b      	cmp	r1, #27
 80011f2:	dc00      	bgt.n	80011f6 <__aeabi_fsub+0x15e>
 80011f4:	e0d9      	b.n	80013aa <__aeabi_fsub+0x312>
 80011f6:	2001      	movs	r0, #1
 80011f8:	0015      	movs	r5, r2
 80011fa:	1980      	adds	r0, r0, r6
 80011fc:	e7b1      	b.n	8001162 <__aeabi_fsub+0xca>
 80011fe:	20fe      	movs	r0, #254	; 0xfe
 8001200:	1c6a      	adds	r2, r5, #1
 8001202:	4210      	tst	r0, r2
 8001204:	d171      	bne.n	80012ea <__aeabi_fsub+0x252>
 8001206:	2d00      	cmp	r5, #0
 8001208:	d000      	beq.n	800120c <__aeabi_fsub+0x174>
 800120a:	e0a6      	b.n	800135a <__aeabi_fsub+0x2c2>
 800120c:	4663      	mov	r3, ip
 800120e:	2b00      	cmp	r3, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x17c>
 8001212:	e0d9      	b.n	80013c8 <__aeabi_fsub+0x330>
 8001214:	2200      	movs	r2, #0
 8001216:	2e00      	cmp	r6, #0
 8001218:	d100      	bne.n	800121c <__aeabi_fsub+0x184>
 800121a:	e788      	b.n	800112e <__aeabi_fsub+0x96>
 800121c:	1b98      	subs	r0, r3, r6
 800121e:	0143      	lsls	r3, r0, #5
 8001220:	d400      	bmi.n	8001224 <__aeabi_fsub+0x18c>
 8001222:	e0e1      	b.n	80013e8 <__aeabi_fsub+0x350>
 8001224:	4663      	mov	r3, ip
 8001226:	000c      	movs	r4, r1
 8001228:	1af0      	subs	r0, r6, r3
 800122a:	e76f      	b.n	800110c <__aeabi_fsub+0x74>
 800122c:	2e00      	cmp	r6, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x19a>
 8001230:	e0b7      	b.n	80013a2 <__aeabi_fsub+0x30a>
 8001232:	0002      	movs	r2, r0
 8001234:	3a01      	subs	r2, #1
 8001236:	2801      	cmp	r0, #1
 8001238:	d100      	bne.n	800123c <__aeabi_fsub+0x1a4>
 800123a:	e09c      	b.n	8001376 <__aeabi_fsub+0x2de>
 800123c:	28ff      	cmp	r0, #255	; 0xff
 800123e:	d026      	beq.n	800128e <__aeabi_fsub+0x1f6>
 8001240:	4690      	mov	r8, r2
 8001242:	e788      	b.n	8001156 <__aeabi_fsub+0xbe>
 8001244:	22ff      	movs	r2, #255	; 0xff
 8001246:	2700      	movs	r7, #0
 8001248:	e771      	b.n	800112e <__aeabi_fsub+0x96>
 800124a:	20fe      	movs	r0, #254	; 0xfe
 800124c:	1c6a      	adds	r2, r5, #1
 800124e:	4210      	tst	r0, r2
 8001250:	d064      	beq.n	800131c <__aeabi_fsub+0x284>
 8001252:	2aff      	cmp	r2, #255	; 0xff
 8001254:	d0f6      	beq.n	8001244 <__aeabi_fsub+0x1ac>
 8001256:	0015      	movs	r5, r2
 8001258:	4466      	add	r6, ip
 800125a:	0870      	lsrs	r0, r6, #1
 800125c:	0743      	lsls	r3, r0, #29
 800125e:	d000      	beq.n	8001262 <__aeabi_fsub+0x1ca>
 8001260:	e756      	b.n	8001110 <__aeabi_fsub+0x78>
 8001262:	08c3      	lsrs	r3, r0, #3
 8001264:	2dff      	cmp	r5, #255	; 0xff
 8001266:	d012      	beq.n	800128e <__aeabi_fsub+0x1f6>
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5f      	lsrs	r7, r3, #9
 800126c:	b2ea      	uxtb	r2, r5
 800126e:	e75e      	b.n	800112e <__aeabi_fsub+0x96>
 8001270:	4662      	mov	r2, ip
 8001272:	2a00      	cmp	r2, #0
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x1e0>
 8001276:	e096      	b.n	80013a6 <__aeabi_fsub+0x30e>
 8001278:	2e00      	cmp	r6, #0
 800127a:	d008      	beq.n	800128e <__aeabi_fsub+0x1f6>
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	03d2      	lsls	r2, r2, #15
 8001280:	4213      	tst	r3, r2
 8001282:	d004      	beq.n	800128e <__aeabi_fsub+0x1f6>
 8001284:	4648      	mov	r0, r9
 8001286:	4210      	tst	r0, r2
 8001288:	d101      	bne.n	800128e <__aeabi_fsub+0x1f6>
 800128a:	000c      	movs	r4, r1
 800128c:	464b      	mov	r3, r9
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0d8      	beq.n	8001244 <__aeabi_fsub+0x1ac>
 8001292:	2780      	movs	r7, #128	; 0x80
 8001294:	03ff      	lsls	r7, r7, #15
 8001296:	431f      	orrs	r7, r3
 8001298:	027f      	lsls	r7, r7, #9
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	0a7f      	lsrs	r7, r7, #9
 800129e:	e746      	b.n	800112e <__aeabi_fsub+0x96>
 80012a0:	2320      	movs	r3, #32
 80012a2:	003a      	movs	r2, r7
 80012a4:	1b45      	subs	r5, r0, r5
 80012a6:	0038      	movs	r0, r7
 80012a8:	3501      	adds	r5, #1
 80012aa:	40ea      	lsrs	r2, r5
 80012ac:	1b5d      	subs	r5, r3, r5
 80012ae:	40a8      	lsls	r0, r5
 80012b0:	1e43      	subs	r3, r0, #1
 80012b2:	4198      	sbcs	r0, r3
 80012b4:	2500      	movs	r5, #0
 80012b6:	4310      	orrs	r0, r2
 80012b8:	e728      	b.n	800110c <__aeabi_fsub+0x74>
 80012ba:	2320      	movs	r3, #32
 80012bc:	1a1b      	subs	r3, r3, r0
 80012be:	0032      	movs	r2, r6
 80012c0:	409e      	lsls	r6, r3
 80012c2:	40c2      	lsrs	r2, r0
 80012c4:	0030      	movs	r0, r6
 80012c6:	1e43      	subs	r3, r0, #1
 80012c8:	4198      	sbcs	r0, r3
 80012ca:	4310      	orrs	r0, r2
 80012cc:	e70c      	b.n	80010e8 <__aeabi_fsub+0x50>
 80012ce:	2aff      	cmp	r2, #255	; 0xff
 80012d0:	d0db      	beq.n	800128a <__aeabi_fsub+0x1f2>
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	4660      	mov	r0, ip
 80012d6:	04db      	lsls	r3, r3, #19
 80012d8:	4318      	orrs	r0, r3
 80012da:	4684      	mov	ip, r0
 80012dc:	2f1b      	cmp	r7, #27
 80012de:	dd56      	ble.n	800138e <__aeabi_fsub+0x2f6>
 80012e0:	2001      	movs	r0, #1
 80012e2:	000c      	movs	r4, r1
 80012e4:	0015      	movs	r5, r2
 80012e6:	1a30      	subs	r0, r6, r0
 80012e8:	e700      	b.n	80010ec <__aeabi_fsub+0x54>
 80012ea:	4663      	mov	r3, ip
 80012ec:	1b9f      	subs	r7, r3, r6
 80012ee:	017b      	lsls	r3, r7, #5
 80012f0:	d43d      	bmi.n	800136e <__aeabi_fsub+0x2d6>
 80012f2:	2f00      	cmp	r7, #0
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0x260>
 80012f6:	e6fe      	b.n	80010f6 <__aeabi_fsub+0x5e>
 80012f8:	2400      	movs	r4, #0
 80012fa:	2200      	movs	r2, #0
 80012fc:	2700      	movs	r7, #0
 80012fe:	e716      	b.n	800112e <__aeabi_fsub+0x96>
 8001300:	0005      	movs	r5, r0
 8001302:	e7af      	b.n	8001264 <__aeabi_fsub+0x1cc>
 8001304:	0032      	movs	r2, r6
 8001306:	4643      	mov	r3, r8
 8001308:	4641      	mov	r1, r8
 800130a:	40da      	lsrs	r2, r3
 800130c:	2320      	movs	r3, #32
 800130e:	1a5b      	subs	r3, r3, r1
 8001310:	409e      	lsls	r6, r3
 8001312:	0030      	movs	r0, r6
 8001314:	1e43      	subs	r3, r0, #1
 8001316:	4198      	sbcs	r0, r3
 8001318:	4310      	orrs	r0, r2
 800131a:	e721      	b.n	8001160 <__aeabi_fsub+0xc8>
 800131c:	2d00      	cmp	r5, #0
 800131e:	d1a7      	bne.n	8001270 <__aeabi_fsub+0x1d8>
 8001320:	4663      	mov	r3, ip
 8001322:	2b00      	cmp	r3, #0
 8001324:	d059      	beq.n	80013da <__aeabi_fsub+0x342>
 8001326:	2200      	movs	r2, #0
 8001328:	2e00      	cmp	r6, #0
 800132a:	d100      	bne.n	800132e <__aeabi_fsub+0x296>
 800132c:	e6ff      	b.n	800112e <__aeabi_fsub+0x96>
 800132e:	0030      	movs	r0, r6
 8001330:	4460      	add	r0, ip
 8001332:	0143      	lsls	r3, r0, #5
 8001334:	d592      	bpl.n	800125c <__aeabi_fsub+0x1c4>
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <__aeabi_fsub+0x348>)
 8001338:	3501      	adds	r5, #1
 800133a:	4018      	ands	r0, r3
 800133c:	e78e      	b.n	800125c <__aeabi_fsub+0x1c4>
 800133e:	4663      	mov	r3, ip
 8001340:	2b00      	cmp	r3, #0
 8001342:	d047      	beq.n	80013d4 <__aeabi_fsub+0x33c>
 8001344:	1e4b      	subs	r3, r1, #1
 8001346:	2901      	cmp	r1, #1
 8001348:	d015      	beq.n	8001376 <__aeabi_fsub+0x2de>
 800134a:	29ff      	cmp	r1, #255	; 0xff
 800134c:	d02b      	beq.n	80013a6 <__aeabi_fsub+0x30e>
 800134e:	0019      	movs	r1, r3
 8001350:	e74e      	b.n	80011f0 <__aeabi_fsub+0x158>
 8001352:	000c      	movs	r4, r1
 8001354:	464b      	mov	r3, r9
 8001356:	003d      	movs	r5, r7
 8001358:	e784      	b.n	8001264 <__aeabi_fsub+0x1cc>
 800135a:	4662      	mov	r2, ip
 800135c:	2a00      	cmp	r2, #0
 800135e:	d18b      	bne.n	8001278 <__aeabi_fsub+0x1e0>
 8001360:	2e00      	cmp	r6, #0
 8001362:	d192      	bne.n	800128a <__aeabi_fsub+0x1f2>
 8001364:	2780      	movs	r7, #128	; 0x80
 8001366:	2400      	movs	r4, #0
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	03ff      	lsls	r7, r7, #15
 800136c:	e6df      	b.n	800112e <__aeabi_fsub+0x96>
 800136e:	4663      	mov	r3, ip
 8001370:	000c      	movs	r4, r1
 8001372:	1af7      	subs	r7, r6, r3
 8001374:	e6bf      	b.n	80010f6 <__aeabi_fsub+0x5e>
 8001376:	0030      	movs	r0, r6
 8001378:	4460      	add	r0, ip
 800137a:	2501      	movs	r5, #1
 800137c:	0143      	lsls	r3, r0, #5
 800137e:	d400      	bmi.n	8001382 <__aeabi_fsub+0x2ea>
 8001380:	e76c      	b.n	800125c <__aeabi_fsub+0x1c4>
 8001382:	2502      	movs	r5, #2
 8001384:	e6f2      	b.n	800116c <__aeabi_fsub+0xd4>
 8001386:	4663      	mov	r3, ip
 8001388:	2501      	movs	r5, #1
 800138a:	1b98      	subs	r0, r3, r6
 800138c:	e6ae      	b.n	80010ec <__aeabi_fsub+0x54>
 800138e:	2320      	movs	r3, #32
 8001390:	4664      	mov	r4, ip
 8001392:	4660      	mov	r0, ip
 8001394:	40fc      	lsrs	r4, r7
 8001396:	1bdf      	subs	r7, r3, r7
 8001398:	40b8      	lsls	r0, r7
 800139a:	1e43      	subs	r3, r0, #1
 800139c:	4198      	sbcs	r0, r3
 800139e:	4320      	orrs	r0, r4
 80013a0:	e79f      	b.n	80012e2 <__aeabi_fsub+0x24a>
 80013a2:	0005      	movs	r5, r0
 80013a4:	e75e      	b.n	8001264 <__aeabi_fsub+0x1cc>
 80013a6:	464b      	mov	r3, r9
 80013a8:	e771      	b.n	800128e <__aeabi_fsub+0x1f6>
 80013aa:	2320      	movs	r3, #32
 80013ac:	4665      	mov	r5, ip
 80013ae:	4660      	mov	r0, ip
 80013b0:	40cd      	lsrs	r5, r1
 80013b2:	1a59      	subs	r1, r3, r1
 80013b4:	4088      	lsls	r0, r1
 80013b6:	1e43      	subs	r3, r0, #1
 80013b8:	4198      	sbcs	r0, r3
 80013ba:	4328      	orrs	r0, r5
 80013bc:	e71c      	b.n	80011f8 <__aeabi_fsub+0x160>
 80013be:	4663      	mov	r3, ip
 80013c0:	000c      	movs	r4, r1
 80013c2:	2501      	movs	r5, #1
 80013c4:	1af0      	subs	r0, r6, r3
 80013c6:	e691      	b.n	80010ec <__aeabi_fsub+0x54>
 80013c8:	2e00      	cmp	r6, #0
 80013ca:	d095      	beq.n	80012f8 <__aeabi_fsub+0x260>
 80013cc:	000c      	movs	r4, r1
 80013ce:	464f      	mov	r7, r9
 80013d0:	2200      	movs	r2, #0
 80013d2:	e6ac      	b.n	800112e <__aeabi_fsub+0x96>
 80013d4:	464b      	mov	r3, r9
 80013d6:	000d      	movs	r5, r1
 80013d8:	e744      	b.n	8001264 <__aeabi_fsub+0x1cc>
 80013da:	464f      	mov	r7, r9
 80013dc:	2200      	movs	r2, #0
 80013de:	e6a6      	b.n	800112e <__aeabi_fsub+0x96>
 80013e0:	fbffffff 	.word	0xfbffffff
 80013e4:	7dffffff 	.word	0x7dffffff
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d000      	beq.n	80013ee <__aeabi_fsub+0x356>
 80013ec:	e736      	b.n	800125c <__aeabi_fsub+0x1c4>
 80013ee:	2400      	movs	r4, #0
 80013f0:	2700      	movs	r7, #0
 80013f2:	e69c      	b.n	800112e <__aeabi_fsub+0x96>

080013f4 <__aeabi_f2iz>:
 80013f4:	0241      	lsls	r1, r0, #9
 80013f6:	0042      	lsls	r2, r0, #1
 80013f8:	0fc3      	lsrs	r3, r0, #31
 80013fa:	0a49      	lsrs	r1, r1, #9
 80013fc:	2000      	movs	r0, #0
 80013fe:	0e12      	lsrs	r2, r2, #24
 8001400:	2a7e      	cmp	r2, #126	; 0x7e
 8001402:	dd03      	ble.n	800140c <__aeabi_f2iz+0x18>
 8001404:	2a9d      	cmp	r2, #157	; 0x9d
 8001406:	dd02      	ble.n	800140e <__aeabi_f2iz+0x1a>
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <__aeabi_f2iz+0x3c>)
 800140a:	1898      	adds	r0, r3, r2
 800140c:	4770      	bx	lr
 800140e:	2080      	movs	r0, #128	; 0x80
 8001410:	0400      	lsls	r0, r0, #16
 8001412:	4301      	orrs	r1, r0
 8001414:	2a95      	cmp	r2, #149	; 0x95
 8001416:	dc07      	bgt.n	8001428 <__aeabi_f2iz+0x34>
 8001418:	2096      	movs	r0, #150	; 0x96
 800141a:	1a82      	subs	r2, r0, r2
 800141c:	40d1      	lsrs	r1, r2
 800141e:	4248      	negs	r0, r1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f3      	bne.n	800140c <__aeabi_f2iz+0x18>
 8001424:	0008      	movs	r0, r1
 8001426:	e7f1      	b.n	800140c <__aeabi_f2iz+0x18>
 8001428:	3a96      	subs	r2, #150	; 0x96
 800142a:	4091      	lsls	r1, r2
 800142c:	e7f7      	b.n	800141e <__aeabi_f2iz+0x2a>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	7fffffff 	.word	0x7fffffff

08001434 <__aeabi_ui2f>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	1e05      	subs	r5, r0, #0
 8001438:	d00e      	beq.n	8001458 <__aeabi_ui2f+0x24>
 800143a:	f001 fef3 	bl	8003224 <__clzsi2>
 800143e:	239e      	movs	r3, #158	; 0x9e
 8001440:	0004      	movs	r4, r0
 8001442:	1a1b      	subs	r3, r3, r0
 8001444:	2b96      	cmp	r3, #150	; 0x96
 8001446:	dc0c      	bgt.n	8001462 <__aeabi_ui2f+0x2e>
 8001448:	2808      	cmp	r0, #8
 800144a:	dd01      	ble.n	8001450 <__aeabi_ui2f+0x1c>
 800144c:	3c08      	subs	r4, #8
 800144e:	40a5      	lsls	r5, r4
 8001450:	026d      	lsls	r5, r5, #9
 8001452:	0a6d      	lsrs	r5, r5, #9
 8001454:	b2d8      	uxtb	r0, r3
 8001456:	e001      	b.n	800145c <__aeabi_ui2f+0x28>
 8001458:	2000      	movs	r0, #0
 800145a:	2500      	movs	r5, #0
 800145c:	05c0      	lsls	r0, r0, #23
 800145e:	4328      	orrs	r0, r5
 8001460:	bd70      	pop	{r4, r5, r6, pc}
 8001462:	2b99      	cmp	r3, #153	; 0x99
 8001464:	dd09      	ble.n	800147a <__aeabi_ui2f+0x46>
 8001466:	0002      	movs	r2, r0
 8001468:	0029      	movs	r1, r5
 800146a:	321b      	adds	r2, #27
 800146c:	4091      	lsls	r1, r2
 800146e:	1e4a      	subs	r2, r1, #1
 8001470:	4191      	sbcs	r1, r2
 8001472:	2205      	movs	r2, #5
 8001474:	1a12      	subs	r2, r2, r0
 8001476:	40d5      	lsrs	r5, r2
 8001478:	430d      	orrs	r5, r1
 800147a:	2c05      	cmp	r4, #5
 800147c:	dc12      	bgt.n	80014a4 <__aeabi_ui2f+0x70>
 800147e:	0029      	movs	r1, r5
 8001480:	4e0c      	ldr	r6, [pc, #48]	; (80014b4 <__aeabi_ui2f+0x80>)
 8001482:	4031      	ands	r1, r6
 8001484:	076a      	lsls	r2, r5, #29
 8001486:	d009      	beq.n	800149c <__aeabi_ui2f+0x68>
 8001488:	200f      	movs	r0, #15
 800148a:	4028      	ands	r0, r5
 800148c:	2804      	cmp	r0, #4
 800148e:	d005      	beq.n	800149c <__aeabi_ui2f+0x68>
 8001490:	3104      	adds	r1, #4
 8001492:	014a      	lsls	r2, r1, #5
 8001494:	d502      	bpl.n	800149c <__aeabi_ui2f+0x68>
 8001496:	239f      	movs	r3, #159	; 0x9f
 8001498:	4031      	ands	r1, r6
 800149a:	1b1b      	subs	r3, r3, r4
 800149c:	0189      	lsls	r1, r1, #6
 800149e:	0a4d      	lsrs	r5, r1, #9
 80014a0:	b2d8      	uxtb	r0, r3
 80014a2:	e7db      	b.n	800145c <__aeabi_ui2f+0x28>
 80014a4:	1f62      	subs	r2, r4, #5
 80014a6:	4095      	lsls	r5, r2
 80014a8:	0029      	movs	r1, r5
 80014aa:	4e02      	ldr	r6, [pc, #8]	; (80014b4 <__aeabi_ui2f+0x80>)
 80014ac:	4031      	ands	r1, r6
 80014ae:	076a      	lsls	r2, r5, #29
 80014b0:	d0f4      	beq.n	800149c <__aeabi_ui2f+0x68>
 80014b2:	e7e9      	b.n	8001488 <__aeabi_ui2f+0x54>
 80014b4:	fbffffff 	.word	0xfbffffff

080014b8 <__aeabi_dadd>:
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	464f      	mov	r7, r9
 80014bc:	4646      	mov	r6, r8
 80014be:	46d6      	mov	lr, sl
 80014c0:	000d      	movs	r5, r1
 80014c2:	0004      	movs	r4, r0
 80014c4:	b5c0      	push	{r6, r7, lr}
 80014c6:	001f      	movs	r7, r3
 80014c8:	0011      	movs	r1, r2
 80014ca:	0328      	lsls	r0, r5, #12
 80014cc:	0f62      	lsrs	r2, r4, #29
 80014ce:	0a40      	lsrs	r0, r0, #9
 80014d0:	4310      	orrs	r0, r2
 80014d2:	007a      	lsls	r2, r7, #1
 80014d4:	0d52      	lsrs	r2, r2, #21
 80014d6:	00e3      	lsls	r3, r4, #3
 80014d8:	033c      	lsls	r4, r7, #12
 80014da:	4691      	mov	r9, r2
 80014dc:	0a64      	lsrs	r4, r4, #9
 80014de:	0ffa      	lsrs	r2, r7, #31
 80014e0:	0f4f      	lsrs	r7, r1, #29
 80014e2:	006e      	lsls	r6, r5, #1
 80014e4:	4327      	orrs	r7, r4
 80014e6:	4692      	mov	sl, r2
 80014e8:	46b8      	mov	r8, r7
 80014ea:	0d76      	lsrs	r6, r6, #21
 80014ec:	0fed      	lsrs	r5, r5, #31
 80014ee:	00c9      	lsls	r1, r1, #3
 80014f0:	4295      	cmp	r5, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x3e>
 80014f4:	e099      	b.n	800162a <__aeabi_dadd+0x172>
 80014f6:	464c      	mov	r4, r9
 80014f8:	1b34      	subs	r4, r6, r4
 80014fa:	46a4      	mov	ip, r4
 80014fc:	2c00      	cmp	r4, #0
 80014fe:	dc00      	bgt.n	8001502 <__aeabi_dadd+0x4a>
 8001500:	e07c      	b.n	80015fc <__aeabi_dadd+0x144>
 8001502:	464a      	mov	r2, r9
 8001504:	2a00      	cmp	r2, #0
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0x52>
 8001508:	e0b8      	b.n	800167c <__aeabi_dadd+0x1c4>
 800150a:	4ac5      	ldr	r2, [pc, #788]	; (8001820 <__aeabi_dadd+0x368>)
 800150c:	4296      	cmp	r6, r2
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x5a>
 8001510:	e11c      	b.n	800174c <__aeabi_dadd+0x294>
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	003c      	movs	r4, r7
 8001516:	0412      	lsls	r2, r2, #16
 8001518:	4314      	orrs	r4, r2
 800151a:	46a0      	mov	r8, r4
 800151c:	4662      	mov	r2, ip
 800151e:	2a38      	cmp	r2, #56	; 0x38
 8001520:	dd00      	ble.n	8001524 <__aeabi_dadd+0x6c>
 8001522:	e161      	b.n	80017e8 <__aeabi_dadd+0x330>
 8001524:	2a1f      	cmp	r2, #31
 8001526:	dd00      	ble.n	800152a <__aeabi_dadd+0x72>
 8001528:	e1cc      	b.n	80018c4 <__aeabi_dadd+0x40c>
 800152a:	4664      	mov	r4, ip
 800152c:	2220      	movs	r2, #32
 800152e:	1b12      	subs	r2, r2, r4
 8001530:	4644      	mov	r4, r8
 8001532:	4094      	lsls	r4, r2
 8001534:	000f      	movs	r7, r1
 8001536:	46a1      	mov	r9, r4
 8001538:	4664      	mov	r4, ip
 800153a:	4091      	lsls	r1, r2
 800153c:	40e7      	lsrs	r7, r4
 800153e:	464c      	mov	r4, r9
 8001540:	1e4a      	subs	r2, r1, #1
 8001542:	4191      	sbcs	r1, r2
 8001544:	433c      	orrs	r4, r7
 8001546:	4642      	mov	r2, r8
 8001548:	4321      	orrs	r1, r4
 800154a:	4664      	mov	r4, ip
 800154c:	40e2      	lsrs	r2, r4
 800154e:	1a80      	subs	r0, r0, r2
 8001550:	1a5c      	subs	r4, r3, r1
 8001552:	42a3      	cmp	r3, r4
 8001554:	419b      	sbcs	r3, r3
 8001556:	425f      	negs	r7, r3
 8001558:	1bc7      	subs	r7, r0, r7
 800155a:	023b      	lsls	r3, r7, #8
 800155c:	d400      	bmi.n	8001560 <__aeabi_dadd+0xa8>
 800155e:	e0d0      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001560:	027f      	lsls	r7, r7, #9
 8001562:	0a7f      	lsrs	r7, r7, #9
 8001564:	2f00      	cmp	r7, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0xb2>
 8001568:	e0ff      	b.n	800176a <__aeabi_dadd+0x2b2>
 800156a:	0038      	movs	r0, r7
 800156c:	f001 fe5a 	bl	8003224 <__clzsi2>
 8001570:	0001      	movs	r1, r0
 8001572:	3908      	subs	r1, #8
 8001574:	2320      	movs	r3, #32
 8001576:	0022      	movs	r2, r4
 8001578:	1a5b      	subs	r3, r3, r1
 800157a:	408f      	lsls	r7, r1
 800157c:	40da      	lsrs	r2, r3
 800157e:	408c      	lsls	r4, r1
 8001580:	4317      	orrs	r7, r2
 8001582:	42b1      	cmp	r1, r6
 8001584:	da00      	bge.n	8001588 <__aeabi_dadd+0xd0>
 8001586:	e0ff      	b.n	8001788 <__aeabi_dadd+0x2d0>
 8001588:	1b89      	subs	r1, r1, r6
 800158a:	1c4b      	adds	r3, r1, #1
 800158c:	2b1f      	cmp	r3, #31
 800158e:	dd00      	ble.n	8001592 <__aeabi_dadd+0xda>
 8001590:	e0a8      	b.n	80016e4 <__aeabi_dadd+0x22c>
 8001592:	2220      	movs	r2, #32
 8001594:	0039      	movs	r1, r7
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	0020      	movs	r0, r4
 800159a:	4094      	lsls	r4, r2
 800159c:	4091      	lsls	r1, r2
 800159e:	40d8      	lsrs	r0, r3
 80015a0:	1e62      	subs	r2, r4, #1
 80015a2:	4194      	sbcs	r4, r2
 80015a4:	40df      	lsrs	r7, r3
 80015a6:	2600      	movs	r6, #0
 80015a8:	4301      	orrs	r1, r0
 80015aa:	430c      	orrs	r4, r1
 80015ac:	0763      	lsls	r3, r4, #29
 80015ae:	d009      	beq.n	80015c4 <__aeabi_dadd+0x10c>
 80015b0:	230f      	movs	r3, #15
 80015b2:	4023      	ands	r3, r4
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d005      	beq.n	80015c4 <__aeabi_dadd+0x10c>
 80015b8:	1d23      	adds	r3, r4, #4
 80015ba:	42a3      	cmp	r3, r4
 80015bc:	41a4      	sbcs	r4, r4
 80015be:	4264      	negs	r4, r4
 80015c0:	193f      	adds	r7, r7, r4
 80015c2:	001c      	movs	r4, r3
 80015c4:	023b      	lsls	r3, r7, #8
 80015c6:	d400      	bmi.n	80015ca <__aeabi_dadd+0x112>
 80015c8:	e09e      	b.n	8001708 <__aeabi_dadd+0x250>
 80015ca:	4b95      	ldr	r3, [pc, #596]	; (8001820 <__aeabi_dadd+0x368>)
 80015cc:	3601      	adds	r6, #1
 80015ce:	429e      	cmp	r6, r3
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x11c>
 80015d2:	e0b7      	b.n	8001744 <__aeabi_dadd+0x28c>
 80015d4:	4a93      	ldr	r2, [pc, #588]	; (8001824 <__aeabi_dadd+0x36c>)
 80015d6:	08e4      	lsrs	r4, r4, #3
 80015d8:	4017      	ands	r7, r2
 80015da:	077b      	lsls	r3, r7, #29
 80015dc:	0571      	lsls	r1, r6, #21
 80015de:	027f      	lsls	r7, r7, #9
 80015e0:	4323      	orrs	r3, r4
 80015e2:	0b3f      	lsrs	r7, r7, #12
 80015e4:	0d4a      	lsrs	r2, r1, #21
 80015e6:	0512      	lsls	r2, r2, #20
 80015e8:	433a      	orrs	r2, r7
 80015ea:	07ed      	lsls	r5, r5, #31
 80015ec:	432a      	orrs	r2, r5
 80015ee:	0018      	movs	r0, r3
 80015f0:	0011      	movs	r1, r2
 80015f2:	bce0      	pop	{r5, r6, r7}
 80015f4:	46ba      	mov	sl, r7
 80015f6:	46b1      	mov	r9, r6
 80015f8:	46a8      	mov	r8, r5
 80015fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d04b      	beq.n	8001698 <__aeabi_dadd+0x1e0>
 8001600:	464c      	mov	r4, r9
 8001602:	1ba4      	subs	r4, r4, r6
 8001604:	46a4      	mov	ip, r4
 8001606:	2e00      	cmp	r6, #0
 8001608:	d000      	beq.n	800160c <__aeabi_dadd+0x154>
 800160a:	e123      	b.n	8001854 <__aeabi_dadd+0x39c>
 800160c:	0004      	movs	r4, r0
 800160e:	431c      	orrs	r4, r3
 8001610:	d100      	bne.n	8001614 <__aeabi_dadd+0x15c>
 8001612:	e1af      	b.n	8001974 <__aeabi_dadd+0x4bc>
 8001614:	4662      	mov	r2, ip
 8001616:	1e54      	subs	r4, r2, #1
 8001618:	2a01      	cmp	r2, #1
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x166>
 800161c:	e215      	b.n	8001a4a <__aeabi_dadd+0x592>
 800161e:	4d80      	ldr	r5, [pc, #512]	; (8001820 <__aeabi_dadd+0x368>)
 8001620:	45ac      	cmp	ip, r5
 8001622:	d100      	bne.n	8001626 <__aeabi_dadd+0x16e>
 8001624:	e1c8      	b.n	80019b8 <__aeabi_dadd+0x500>
 8001626:	46a4      	mov	ip, r4
 8001628:	e11b      	b.n	8001862 <__aeabi_dadd+0x3aa>
 800162a:	464a      	mov	r2, r9
 800162c:	1ab2      	subs	r2, r6, r2
 800162e:	4694      	mov	ip, r2
 8001630:	2a00      	cmp	r2, #0
 8001632:	dc00      	bgt.n	8001636 <__aeabi_dadd+0x17e>
 8001634:	e0ac      	b.n	8001790 <__aeabi_dadd+0x2d8>
 8001636:	464a      	mov	r2, r9
 8001638:	2a00      	cmp	r2, #0
 800163a:	d043      	beq.n	80016c4 <__aeabi_dadd+0x20c>
 800163c:	4a78      	ldr	r2, [pc, #480]	; (8001820 <__aeabi_dadd+0x368>)
 800163e:	4296      	cmp	r6, r2
 8001640:	d100      	bne.n	8001644 <__aeabi_dadd+0x18c>
 8001642:	e1af      	b.n	80019a4 <__aeabi_dadd+0x4ec>
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	003c      	movs	r4, r7
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	4314      	orrs	r4, r2
 800164c:	46a0      	mov	r8, r4
 800164e:	4662      	mov	r2, ip
 8001650:	2a38      	cmp	r2, #56	; 0x38
 8001652:	dc67      	bgt.n	8001724 <__aeabi_dadd+0x26c>
 8001654:	2a1f      	cmp	r2, #31
 8001656:	dc00      	bgt.n	800165a <__aeabi_dadd+0x1a2>
 8001658:	e15f      	b.n	800191a <__aeabi_dadd+0x462>
 800165a:	4647      	mov	r7, r8
 800165c:	3a20      	subs	r2, #32
 800165e:	40d7      	lsrs	r7, r2
 8001660:	4662      	mov	r2, ip
 8001662:	2a20      	cmp	r2, #32
 8001664:	d005      	beq.n	8001672 <__aeabi_dadd+0x1ba>
 8001666:	4664      	mov	r4, ip
 8001668:	2240      	movs	r2, #64	; 0x40
 800166a:	1b12      	subs	r2, r2, r4
 800166c:	4644      	mov	r4, r8
 800166e:	4094      	lsls	r4, r2
 8001670:	4321      	orrs	r1, r4
 8001672:	1e4a      	subs	r2, r1, #1
 8001674:	4191      	sbcs	r1, r2
 8001676:	000c      	movs	r4, r1
 8001678:	433c      	orrs	r4, r7
 800167a:	e057      	b.n	800172c <__aeabi_dadd+0x274>
 800167c:	003a      	movs	r2, r7
 800167e:	430a      	orrs	r2, r1
 8001680:	d100      	bne.n	8001684 <__aeabi_dadd+0x1cc>
 8001682:	e105      	b.n	8001890 <__aeabi_dadd+0x3d8>
 8001684:	0022      	movs	r2, r4
 8001686:	3a01      	subs	r2, #1
 8001688:	2c01      	cmp	r4, #1
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x1d6>
 800168c:	e182      	b.n	8001994 <__aeabi_dadd+0x4dc>
 800168e:	4c64      	ldr	r4, [pc, #400]	; (8001820 <__aeabi_dadd+0x368>)
 8001690:	45a4      	cmp	ip, r4
 8001692:	d05b      	beq.n	800174c <__aeabi_dadd+0x294>
 8001694:	4694      	mov	ip, r2
 8001696:	e741      	b.n	800151c <__aeabi_dadd+0x64>
 8001698:	4c63      	ldr	r4, [pc, #396]	; (8001828 <__aeabi_dadd+0x370>)
 800169a:	1c77      	adds	r7, r6, #1
 800169c:	4227      	tst	r7, r4
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x1ea>
 80016a0:	e0c4      	b.n	800182c <__aeabi_dadd+0x374>
 80016a2:	0004      	movs	r4, r0
 80016a4:	431c      	orrs	r4, r3
 80016a6:	2e00      	cmp	r6, #0
 80016a8:	d000      	beq.n	80016ac <__aeabi_dadd+0x1f4>
 80016aa:	e169      	b.n	8001980 <__aeabi_dadd+0x4c8>
 80016ac:	2c00      	cmp	r4, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x1fa>
 80016b0:	e1bf      	b.n	8001a32 <__aeabi_dadd+0x57a>
 80016b2:	4644      	mov	r4, r8
 80016b4:	430c      	orrs	r4, r1
 80016b6:	d000      	beq.n	80016ba <__aeabi_dadd+0x202>
 80016b8:	e1d0      	b.n	8001a5c <__aeabi_dadd+0x5a4>
 80016ba:	0742      	lsls	r2, r0, #29
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	4313      	orrs	r3, r2
 80016c0:	08c0      	lsrs	r0, r0, #3
 80016c2:	e029      	b.n	8001718 <__aeabi_dadd+0x260>
 80016c4:	003a      	movs	r2, r7
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x214>
 80016ca:	e170      	b.n	80019ae <__aeabi_dadd+0x4f6>
 80016cc:	4662      	mov	r2, ip
 80016ce:	4664      	mov	r4, ip
 80016d0:	3a01      	subs	r2, #1
 80016d2:	2c01      	cmp	r4, #1
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dadd+0x220>
 80016d6:	e0e0      	b.n	800189a <__aeabi_dadd+0x3e2>
 80016d8:	4c51      	ldr	r4, [pc, #324]	; (8001820 <__aeabi_dadd+0x368>)
 80016da:	45a4      	cmp	ip, r4
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dadd+0x228>
 80016de:	e161      	b.n	80019a4 <__aeabi_dadd+0x4ec>
 80016e0:	4694      	mov	ip, r2
 80016e2:	e7b4      	b.n	800164e <__aeabi_dadd+0x196>
 80016e4:	003a      	movs	r2, r7
 80016e6:	391f      	subs	r1, #31
 80016e8:	40ca      	lsrs	r2, r1
 80016ea:	0011      	movs	r1, r2
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d003      	beq.n	80016f8 <__aeabi_dadd+0x240>
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	409f      	lsls	r7, r3
 80016f6:	433c      	orrs	r4, r7
 80016f8:	1e63      	subs	r3, r4, #1
 80016fa:	419c      	sbcs	r4, r3
 80016fc:	2700      	movs	r7, #0
 80016fe:	2600      	movs	r6, #0
 8001700:	430c      	orrs	r4, r1
 8001702:	0763      	lsls	r3, r4, #29
 8001704:	d000      	beq.n	8001708 <__aeabi_dadd+0x250>
 8001706:	e753      	b.n	80015b0 <__aeabi_dadd+0xf8>
 8001708:	46b4      	mov	ip, r6
 800170a:	08e4      	lsrs	r4, r4, #3
 800170c:	077b      	lsls	r3, r7, #29
 800170e:	4323      	orrs	r3, r4
 8001710:	08f8      	lsrs	r0, r7, #3
 8001712:	4a43      	ldr	r2, [pc, #268]	; (8001820 <__aeabi_dadd+0x368>)
 8001714:	4594      	cmp	ip, r2
 8001716:	d01d      	beq.n	8001754 <__aeabi_dadd+0x29c>
 8001718:	4662      	mov	r2, ip
 800171a:	0307      	lsls	r7, r0, #12
 800171c:	0552      	lsls	r2, r2, #21
 800171e:	0b3f      	lsrs	r7, r7, #12
 8001720:	0d52      	lsrs	r2, r2, #21
 8001722:	e760      	b.n	80015e6 <__aeabi_dadd+0x12e>
 8001724:	4644      	mov	r4, r8
 8001726:	430c      	orrs	r4, r1
 8001728:	1e62      	subs	r2, r4, #1
 800172a:	4194      	sbcs	r4, r2
 800172c:	18e4      	adds	r4, r4, r3
 800172e:	429c      	cmp	r4, r3
 8001730:	419b      	sbcs	r3, r3
 8001732:	425f      	negs	r7, r3
 8001734:	183f      	adds	r7, r7, r0
 8001736:	023b      	lsls	r3, r7, #8
 8001738:	d5e3      	bpl.n	8001702 <__aeabi_dadd+0x24a>
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <__aeabi_dadd+0x368>)
 800173c:	3601      	adds	r6, #1
 800173e:	429e      	cmp	r6, r3
 8001740:	d000      	beq.n	8001744 <__aeabi_dadd+0x28c>
 8001742:	e0b5      	b.n	80018b0 <__aeabi_dadd+0x3f8>
 8001744:	0032      	movs	r2, r6
 8001746:	2700      	movs	r7, #0
 8001748:	2300      	movs	r3, #0
 800174a:	e74c      	b.n	80015e6 <__aeabi_dadd+0x12e>
 800174c:	0742      	lsls	r2, r0, #29
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	4313      	orrs	r3, r2
 8001752:	08c0      	lsrs	r0, r0, #3
 8001754:	001a      	movs	r2, r3
 8001756:	4302      	orrs	r2, r0
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x2a4>
 800175a:	e1e1      	b.n	8001b20 <__aeabi_dadd+0x668>
 800175c:	2780      	movs	r7, #128	; 0x80
 800175e:	033f      	lsls	r7, r7, #12
 8001760:	4307      	orrs	r7, r0
 8001762:	033f      	lsls	r7, r7, #12
 8001764:	4a2e      	ldr	r2, [pc, #184]	; (8001820 <__aeabi_dadd+0x368>)
 8001766:	0b3f      	lsrs	r7, r7, #12
 8001768:	e73d      	b.n	80015e6 <__aeabi_dadd+0x12e>
 800176a:	0020      	movs	r0, r4
 800176c:	f001 fd5a 	bl	8003224 <__clzsi2>
 8001770:	0001      	movs	r1, r0
 8001772:	3118      	adds	r1, #24
 8001774:	291f      	cmp	r1, #31
 8001776:	dc00      	bgt.n	800177a <__aeabi_dadd+0x2c2>
 8001778:	e6fc      	b.n	8001574 <__aeabi_dadd+0xbc>
 800177a:	3808      	subs	r0, #8
 800177c:	4084      	lsls	r4, r0
 800177e:	0027      	movs	r7, r4
 8001780:	2400      	movs	r4, #0
 8001782:	42b1      	cmp	r1, r6
 8001784:	db00      	blt.n	8001788 <__aeabi_dadd+0x2d0>
 8001786:	e6ff      	b.n	8001588 <__aeabi_dadd+0xd0>
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <__aeabi_dadd+0x36c>)
 800178a:	1a76      	subs	r6, r6, r1
 800178c:	4017      	ands	r7, r2
 800178e:	e70d      	b.n	80015ac <__aeabi_dadd+0xf4>
 8001790:	2a00      	cmp	r2, #0
 8001792:	d02f      	beq.n	80017f4 <__aeabi_dadd+0x33c>
 8001794:	464a      	mov	r2, r9
 8001796:	1b92      	subs	r2, r2, r6
 8001798:	4694      	mov	ip, r2
 800179a:	2e00      	cmp	r6, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x2e8>
 800179e:	e0ad      	b.n	80018fc <__aeabi_dadd+0x444>
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <__aeabi_dadd+0x368>)
 80017a2:	4591      	cmp	r9, r2
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dadd+0x2f0>
 80017a6:	e10f      	b.n	80019c8 <__aeabi_dadd+0x510>
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0412      	lsls	r2, r2, #16
 80017ac:	4310      	orrs	r0, r2
 80017ae:	4662      	mov	r2, ip
 80017b0:	2a38      	cmp	r2, #56	; 0x38
 80017b2:	dd00      	ble.n	80017b6 <__aeabi_dadd+0x2fe>
 80017b4:	e10f      	b.n	80019d6 <__aeabi_dadd+0x51e>
 80017b6:	2a1f      	cmp	r2, #31
 80017b8:	dd00      	ble.n	80017bc <__aeabi_dadd+0x304>
 80017ba:	e180      	b.n	8001abe <__aeabi_dadd+0x606>
 80017bc:	4664      	mov	r4, ip
 80017be:	2220      	movs	r2, #32
 80017c0:	001e      	movs	r6, r3
 80017c2:	1b12      	subs	r2, r2, r4
 80017c4:	4667      	mov	r7, ip
 80017c6:	0004      	movs	r4, r0
 80017c8:	4093      	lsls	r3, r2
 80017ca:	4094      	lsls	r4, r2
 80017cc:	40fe      	lsrs	r6, r7
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4193      	sbcs	r3, r2
 80017d2:	40f8      	lsrs	r0, r7
 80017d4:	4334      	orrs	r4, r6
 80017d6:	431c      	orrs	r4, r3
 80017d8:	4480      	add	r8, r0
 80017da:	1864      	adds	r4, r4, r1
 80017dc:	428c      	cmp	r4, r1
 80017de:	41bf      	sbcs	r7, r7
 80017e0:	427f      	negs	r7, r7
 80017e2:	464e      	mov	r6, r9
 80017e4:	4447      	add	r7, r8
 80017e6:	e7a6      	b.n	8001736 <__aeabi_dadd+0x27e>
 80017e8:	4642      	mov	r2, r8
 80017ea:	430a      	orrs	r2, r1
 80017ec:	0011      	movs	r1, r2
 80017ee:	1e4a      	subs	r2, r1, #1
 80017f0:	4191      	sbcs	r1, r2
 80017f2:	e6ad      	b.n	8001550 <__aeabi_dadd+0x98>
 80017f4:	4c0c      	ldr	r4, [pc, #48]	; (8001828 <__aeabi_dadd+0x370>)
 80017f6:	1c72      	adds	r2, r6, #1
 80017f8:	4222      	tst	r2, r4
 80017fa:	d000      	beq.n	80017fe <__aeabi_dadd+0x346>
 80017fc:	e0a1      	b.n	8001942 <__aeabi_dadd+0x48a>
 80017fe:	0002      	movs	r2, r0
 8001800:	431a      	orrs	r2, r3
 8001802:	2e00      	cmp	r6, #0
 8001804:	d000      	beq.n	8001808 <__aeabi_dadd+0x350>
 8001806:	e0fa      	b.n	80019fe <__aeabi_dadd+0x546>
 8001808:	2a00      	cmp	r2, #0
 800180a:	d100      	bne.n	800180e <__aeabi_dadd+0x356>
 800180c:	e145      	b.n	8001a9a <__aeabi_dadd+0x5e2>
 800180e:	003a      	movs	r2, r7
 8001810:	430a      	orrs	r2, r1
 8001812:	d000      	beq.n	8001816 <__aeabi_dadd+0x35e>
 8001814:	e146      	b.n	8001aa4 <__aeabi_dadd+0x5ec>
 8001816:	0742      	lsls	r2, r0, #29
 8001818:	08db      	lsrs	r3, r3, #3
 800181a:	4313      	orrs	r3, r2
 800181c:	08c0      	lsrs	r0, r0, #3
 800181e:	e77b      	b.n	8001718 <__aeabi_dadd+0x260>
 8001820:	000007ff 	.word	0x000007ff
 8001824:	ff7fffff 	.word	0xff7fffff
 8001828:	000007fe 	.word	0x000007fe
 800182c:	4647      	mov	r7, r8
 800182e:	1a5c      	subs	r4, r3, r1
 8001830:	1bc2      	subs	r2, r0, r7
 8001832:	42a3      	cmp	r3, r4
 8001834:	41bf      	sbcs	r7, r7
 8001836:	427f      	negs	r7, r7
 8001838:	46b9      	mov	r9, r7
 800183a:	0017      	movs	r7, r2
 800183c:	464a      	mov	r2, r9
 800183e:	1abf      	subs	r7, r7, r2
 8001840:	023a      	lsls	r2, r7, #8
 8001842:	d500      	bpl.n	8001846 <__aeabi_dadd+0x38e>
 8001844:	e08d      	b.n	8001962 <__aeabi_dadd+0x4aa>
 8001846:	0023      	movs	r3, r4
 8001848:	433b      	orrs	r3, r7
 800184a:	d000      	beq.n	800184e <__aeabi_dadd+0x396>
 800184c:	e68a      	b.n	8001564 <__aeabi_dadd+0xac>
 800184e:	2000      	movs	r0, #0
 8001850:	2500      	movs	r5, #0
 8001852:	e761      	b.n	8001718 <__aeabi_dadd+0x260>
 8001854:	4cb4      	ldr	r4, [pc, #720]	; (8001b28 <__aeabi_dadd+0x670>)
 8001856:	45a1      	cmp	r9, r4
 8001858:	d100      	bne.n	800185c <__aeabi_dadd+0x3a4>
 800185a:	e0ad      	b.n	80019b8 <__aeabi_dadd+0x500>
 800185c:	2480      	movs	r4, #128	; 0x80
 800185e:	0424      	lsls	r4, r4, #16
 8001860:	4320      	orrs	r0, r4
 8001862:	4664      	mov	r4, ip
 8001864:	2c38      	cmp	r4, #56	; 0x38
 8001866:	dc3d      	bgt.n	80018e4 <__aeabi_dadd+0x42c>
 8001868:	4662      	mov	r2, ip
 800186a:	2c1f      	cmp	r4, #31
 800186c:	dd00      	ble.n	8001870 <__aeabi_dadd+0x3b8>
 800186e:	e0b7      	b.n	80019e0 <__aeabi_dadd+0x528>
 8001870:	2520      	movs	r5, #32
 8001872:	001e      	movs	r6, r3
 8001874:	1b2d      	subs	r5, r5, r4
 8001876:	0004      	movs	r4, r0
 8001878:	40ab      	lsls	r3, r5
 800187a:	40ac      	lsls	r4, r5
 800187c:	40d6      	lsrs	r6, r2
 800187e:	40d0      	lsrs	r0, r2
 8001880:	4642      	mov	r2, r8
 8001882:	1e5d      	subs	r5, r3, #1
 8001884:	41ab      	sbcs	r3, r5
 8001886:	4334      	orrs	r4, r6
 8001888:	1a12      	subs	r2, r2, r0
 800188a:	4690      	mov	r8, r2
 800188c:	4323      	orrs	r3, r4
 800188e:	e02c      	b.n	80018ea <__aeabi_dadd+0x432>
 8001890:	0742      	lsls	r2, r0, #29
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	4313      	orrs	r3, r2
 8001896:	08c0      	lsrs	r0, r0, #3
 8001898:	e73b      	b.n	8001712 <__aeabi_dadd+0x25a>
 800189a:	185c      	adds	r4, r3, r1
 800189c:	429c      	cmp	r4, r3
 800189e:	419b      	sbcs	r3, r3
 80018a0:	4440      	add	r0, r8
 80018a2:	425b      	negs	r3, r3
 80018a4:	18c7      	adds	r7, r0, r3
 80018a6:	2601      	movs	r6, #1
 80018a8:	023b      	lsls	r3, r7, #8
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dadd+0x3f6>
 80018ac:	e729      	b.n	8001702 <__aeabi_dadd+0x24a>
 80018ae:	2602      	movs	r6, #2
 80018b0:	4a9e      	ldr	r2, [pc, #632]	; (8001b2c <__aeabi_dadd+0x674>)
 80018b2:	0863      	lsrs	r3, r4, #1
 80018b4:	4017      	ands	r7, r2
 80018b6:	2201      	movs	r2, #1
 80018b8:	4014      	ands	r4, r2
 80018ba:	431c      	orrs	r4, r3
 80018bc:	07fb      	lsls	r3, r7, #31
 80018be:	431c      	orrs	r4, r3
 80018c0:	087f      	lsrs	r7, r7, #1
 80018c2:	e673      	b.n	80015ac <__aeabi_dadd+0xf4>
 80018c4:	4644      	mov	r4, r8
 80018c6:	3a20      	subs	r2, #32
 80018c8:	40d4      	lsrs	r4, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a20      	cmp	r2, #32
 80018ce:	d005      	beq.n	80018dc <__aeabi_dadd+0x424>
 80018d0:	4667      	mov	r7, ip
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	1bd2      	subs	r2, r2, r7
 80018d6:	4647      	mov	r7, r8
 80018d8:	4097      	lsls	r7, r2
 80018da:	4339      	orrs	r1, r7
 80018dc:	1e4a      	subs	r2, r1, #1
 80018de:	4191      	sbcs	r1, r2
 80018e0:	4321      	orrs	r1, r4
 80018e2:	e635      	b.n	8001550 <__aeabi_dadd+0x98>
 80018e4:	4303      	orrs	r3, r0
 80018e6:	1e58      	subs	r0, r3, #1
 80018e8:	4183      	sbcs	r3, r0
 80018ea:	1acc      	subs	r4, r1, r3
 80018ec:	42a1      	cmp	r1, r4
 80018ee:	41bf      	sbcs	r7, r7
 80018f0:	4643      	mov	r3, r8
 80018f2:	427f      	negs	r7, r7
 80018f4:	4655      	mov	r5, sl
 80018f6:	464e      	mov	r6, r9
 80018f8:	1bdf      	subs	r7, r3, r7
 80018fa:	e62e      	b.n	800155a <__aeabi_dadd+0xa2>
 80018fc:	0002      	movs	r2, r0
 80018fe:	431a      	orrs	r2, r3
 8001900:	d100      	bne.n	8001904 <__aeabi_dadd+0x44c>
 8001902:	e0bd      	b.n	8001a80 <__aeabi_dadd+0x5c8>
 8001904:	4662      	mov	r2, ip
 8001906:	4664      	mov	r4, ip
 8001908:	3a01      	subs	r2, #1
 800190a:	2c01      	cmp	r4, #1
 800190c:	d100      	bne.n	8001910 <__aeabi_dadd+0x458>
 800190e:	e0e5      	b.n	8001adc <__aeabi_dadd+0x624>
 8001910:	4c85      	ldr	r4, [pc, #532]	; (8001b28 <__aeabi_dadd+0x670>)
 8001912:	45a4      	cmp	ip, r4
 8001914:	d058      	beq.n	80019c8 <__aeabi_dadd+0x510>
 8001916:	4694      	mov	ip, r2
 8001918:	e749      	b.n	80017ae <__aeabi_dadd+0x2f6>
 800191a:	4664      	mov	r4, ip
 800191c:	2220      	movs	r2, #32
 800191e:	1b12      	subs	r2, r2, r4
 8001920:	4644      	mov	r4, r8
 8001922:	4094      	lsls	r4, r2
 8001924:	000f      	movs	r7, r1
 8001926:	46a1      	mov	r9, r4
 8001928:	4664      	mov	r4, ip
 800192a:	4091      	lsls	r1, r2
 800192c:	40e7      	lsrs	r7, r4
 800192e:	464c      	mov	r4, r9
 8001930:	1e4a      	subs	r2, r1, #1
 8001932:	4191      	sbcs	r1, r2
 8001934:	433c      	orrs	r4, r7
 8001936:	4642      	mov	r2, r8
 8001938:	430c      	orrs	r4, r1
 800193a:	4661      	mov	r1, ip
 800193c:	40ca      	lsrs	r2, r1
 800193e:	1880      	adds	r0, r0, r2
 8001940:	e6f4      	b.n	800172c <__aeabi_dadd+0x274>
 8001942:	4c79      	ldr	r4, [pc, #484]	; (8001b28 <__aeabi_dadd+0x670>)
 8001944:	42a2      	cmp	r2, r4
 8001946:	d100      	bne.n	800194a <__aeabi_dadd+0x492>
 8001948:	e6fd      	b.n	8001746 <__aeabi_dadd+0x28e>
 800194a:	1859      	adds	r1, r3, r1
 800194c:	4299      	cmp	r1, r3
 800194e:	419b      	sbcs	r3, r3
 8001950:	4440      	add	r0, r8
 8001952:	425f      	negs	r7, r3
 8001954:	19c7      	adds	r7, r0, r7
 8001956:	07fc      	lsls	r4, r7, #31
 8001958:	0849      	lsrs	r1, r1, #1
 800195a:	0016      	movs	r6, r2
 800195c:	430c      	orrs	r4, r1
 800195e:	087f      	lsrs	r7, r7, #1
 8001960:	e6cf      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001962:	1acc      	subs	r4, r1, r3
 8001964:	42a1      	cmp	r1, r4
 8001966:	41bf      	sbcs	r7, r7
 8001968:	4643      	mov	r3, r8
 800196a:	427f      	negs	r7, r7
 800196c:	1a18      	subs	r0, r3, r0
 800196e:	4655      	mov	r5, sl
 8001970:	1bc7      	subs	r7, r0, r7
 8001972:	e5f7      	b.n	8001564 <__aeabi_dadd+0xac>
 8001974:	08c9      	lsrs	r1, r1, #3
 8001976:	077b      	lsls	r3, r7, #29
 8001978:	4655      	mov	r5, sl
 800197a:	430b      	orrs	r3, r1
 800197c:	08f8      	lsrs	r0, r7, #3
 800197e:	e6c8      	b.n	8001712 <__aeabi_dadd+0x25a>
 8001980:	2c00      	cmp	r4, #0
 8001982:	d000      	beq.n	8001986 <__aeabi_dadd+0x4ce>
 8001984:	e081      	b.n	8001a8a <__aeabi_dadd+0x5d2>
 8001986:	4643      	mov	r3, r8
 8001988:	430b      	orrs	r3, r1
 800198a:	d115      	bne.n	80019b8 <__aeabi_dadd+0x500>
 800198c:	2080      	movs	r0, #128	; 0x80
 800198e:	2500      	movs	r5, #0
 8001990:	0300      	lsls	r0, r0, #12
 8001992:	e6e3      	b.n	800175c <__aeabi_dadd+0x2a4>
 8001994:	1a5c      	subs	r4, r3, r1
 8001996:	42a3      	cmp	r3, r4
 8001998:	419b      	sbcs	r3, r3
 800199a:	1bc7      	subs	r7, r0, r7
 800199c:	425b      	negs	r3, r3
 800199e:	2601      	movs	r6, #1
 80019a0:	1aff      	subs	r7, r7, r3
 80019a2:	e5da      	b.n	800155a <__aeabi_dadd+0xa2>
 80019a4:	0742      	lsls	r2, r0, #29
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	08c0      	lsrs	r0, r0, #3
 80019ac:	e6d2      	b.n	8001754 <__aeabi_dadd+0x29c>
 80019ae:	0742      	lsls	r2, r0, #29
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	08c0      	lsrs	r0, r0, #3
 80019b6:	e6ac      	b.n	8001712 <__aeabi_dadd+0x25a>
 80019b8:	4643      	mov	r3, r8
 80019ba:	4642      	mov	r2, r8
 80019bc:	08c9      	lsrs	r1, r1, #3
 80019be:	075b      	lsls	r3, r3, #29
 80019c0:	4655      	mov	r5, sl
 80019c2:	430b      	orrs	r3, r1
 80019c4:	08d0      	lsrs	r0, r2, #3
 80019c6:	e6c5      	b.n	8001754 <__aeabi_dadd+0x29c>
 80019c8:	4643      	mov	r3, r8
 80019ca:	4642      	mov	r2, r8
 80019cc:	075b      	lsls	r3, r3, #29
 80019ce:	08c9      	lsrs	r1, r1, #3
 80019d0:	430b      	orrs	r3, r1
 80019d2:	08d0      	lsrs	r0, r2, #3
 80019d4:	e6be      	b.n	8001754 <__aeabi_dadd+0x29c>
 80019d6:	4303      	orrs	r3, r0
 80019d8:	001c      	movs	r4, r3
 80019da:	1e63      	subs	r3, r4, #1
 80019dc:	419c      	sbcs	r4, r3
 80019de:	e6fc      	b.n	80017da <__aeabi_dadd+0x322>
 80019e0:	0002      	movs	r2, r0
 80019e2:	3c20      	subs	r4, #32
 80019e4:	40e2      	lsrs	r2, r4
 80019e6:	0014      	movs	r4, r2
 80019e8:	4662      	mov	r2, ip
 80019ea:	2a20      	cmp	r2, #32
 80019ec:	d003      	beq.n	80019f6 <__aeabi_dadd+0x53e>
 80019ee:	2540      	movs	r5, #64	; 0x40
 80019f0:	1aad      	subs	r5, r5, r2
 80019f2:	40a8      	lsls	r0, r5
 80019f4:	4303      	orrs	r3, r0
 80019f6:	1e58      	subs	r0, r3, #1
 80019f8:	4183      	sbcs	r3, r0
 80019fa:	4323      	orrs	r3, r4
 80019fc:	e775      	b.n	80018ea <__aeabi_dadd+0x432>
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	d0e2      	beq.n	80019c8 <__aeabi_dadd+0x510>
 8001a02:	003a      	movs	r2, r7
 8001a04:	430a      	orrs	r2, r1
 8001a06:	d0cd      	beq.n	80019a4 <__aeabi_dadd+0x4ec>
 8001a08:	0742      	lsls	r2, r0, #29
 8001a0a:	08db      	lsrs	r3, r3, #3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	08c0      	lsrs	r0, r0, #3
 8001a12:	0312      	lsls	r2, r2, #12
 8001a14:	4210      	tst	r0, r2
 8001a16:	d006      	beq.n	8001a26 <__aeabi_dadd+0x56e>
 8001a18:	08fc      	lsrs	r4, r7, #3
 8001a1a:	4214      	tst	r4, r2
 8001a1c:	d103      	bne.n	8001a26 <__aeabi_dadd+0x56e>
 8001a1e:	0020      	movs	r0, r4
 8001a20:	08cb      	lsrs	r3, r1, #3
 8001a22:	077a      	lsls	r2, r7, #29
 8001a24:	4313      	orrs	r3, r2
 8001a26:	0f5a      	lsrs	r2, r3, #29
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	0752      	lsls	r2, r2, #29
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	e690      	b.n	8001754 <__aeabi_dadd+0x29c>
 8001a32:	4643      	mov	r3, r8
 8001a34:	430b      	orrs	r3, r1
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dadd+0x582>
 8001a38:	e709      	b.n	800184e <__aeabi_dadd+0x396>
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	4642      	mov	r2, r8
 8001a3e:	08c9      	lsrs	r1, r1, #3
 8001a40:	075b      	lsls	r3, r3, #29
 8001a42:	4655      	mov	r5, sl
 8001a44:	430b      	orrs	r3, r1
 8001a46:	08d0      	lsrs	r0, r2, #3
 8001a48:	e666      	b.n	8001718 <__aeabi_dadd+0x260>
 8001a4a:	1acc      	subs	r4, r1, r3
 8001a4c:	42a1      	cmp	r1, r4
 8001a4e:	4189      	sbcs	r1, r1
 8001a50:	1a3f      	subs	r7, r7, r0
 8001a52:	4249      	negs	r1, r1
 8001a54:	4655      	mov	r5, sl
 8001a56:	2601      	movs	r6, #1
 8001a58:	1a7f      	subs	r7, r7, r1
 8001a5a:	e57e      	b.n	800155a <__aeabi_dadd+0xa2>
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	1a5c      	subs	r4, r3, r1
 8001a60:	1a87      	subs	r7, r0, r2
 8001a62:	42a3      	cmp	r3, r4
 8001a64:	4192      	sbcs	r2, r2
 8001a66:	4252      	negs	r2, r2
 8001a68:	1abf      	subs	r7, r7, r2
 8001a6a:	023a      	lsls	r2, r7, #8
 8001a6c:	d53d      	bpl.n	8001aea <__aeabi_dadd+0x632>
 8001a6e:	1acc      	subs	r4, r1, r3
 8001a70:	42a1      	cmp	r1, r4
 8001a72:	4189      	sbcs	r1, r1
 8001a74:	4643      	mov	r3, r8
 8001a76:	4249      	negs	r1, r1
 8001a78:	1a1f      	subs	r7, r3, r0
 8001a7a:	4655      	mov	r5, sl
 8001a7c:	1a7f      	subs	r7, r7, r1
 8001a7e:	e595      	b.n	80015ac <__aeabi_dadd+0xf4>
 8001a80:	077b      	lsls	r3, r7, #29
 8001a82:	08c9      	lsrs	r1, r1, #3
 8001a84:	430b      	orrs	r3, r1
 8001a86:	08f8      	lsrs	r0, r7, #3
 8001a88:	e643      	b.n	8001712 <__aeabi_dadd+0x25a>
 8001a8a:	4644      	mov	r4, r8
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	430c      	orrs	r4, r1
 8001a90:	d130      	bne.n	8001af4 <__aeabi_dadd+0x63c>
 8001a92:	0742      	lsls	r2, r0, #29
 8001a94:	4313      	orrs	r3, r2
 8001a96:	08c0      	lsrs	r0, r0, #3
 8001a98:	e65c      	b.n	8001754 <__aeabi_dadd+0x29c>
 8001a9a:	077b      	lsls	r3, r7, #29
 8001a9c:	08c9      	lsrs	r1, r1, #3
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	08f8      	lsrs	r0, r7, #3
 8001aa2:	e639      	b.n	8001718 <__aeabi_dadd+0x260>
 8001aa4:	185c      	adds	r4, r3, r1
 8001aa6:	429c      	cmp	r4, r3
 8001aa8:	419b      	sbcs	r3, r3
 8001aaa:	4440      	add	r0, r8
 8001aac:	425b      	negs	r3, r3
 8001aae:	18c7      	adds	r7, r0, r3
 8001ab0:	023b      	lsls	r3, r7, #8
 8001ab2:	d400      	bmi.n	8001ab6 <__aeabi_dadd+0x5fe>
 8001ab4:	e625      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <__aeabi_dadd+0x674>)
 8001ab8:	2601      	movs	r6, #1
 8001aba:	401f      	ands	r7, r3
 8001abc:	e621      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001abe:	0004      	movs	r4, r0
 8001ac0:	3a20      	subs	r2, #32
 8001ac2:	40d4      	lsrs	r4, r2
 8001ac4:	4662      	mov	r2, ip
 8001ac6:	2a20      	cmp	r2, #32
 8001ac8:	d004      	beq.n	8001ad4 <__aeabi_dadd+0x61c>
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	4666      	mov	r6, ip
 8001ace:	1b92      	subs	r2, r2, r6
 8001ad0:	4090      	lsls	r0, r2
 8001ad2:	4303      	orrs	r3, r0
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	4193      	sbcs	r3, r2
 8001ad8:	431c      	orrs	r4, r3
 8001ada:	e67e      	b.n	80017da <__aeabi_dadd+0x322>
 8001adc:	185c      	adds	r4, r3, r1
 8001ade:	428c      	cmp	r4, r1
 8001ae0:	4189      	sbcs	r1, r1
 8001ae2:	4440      	add	r0, r8
 8001ae4:	4249      	negs	r1, r1
 8001ae6:	1847      	adds	r7, r0, r1
 8001ae8:	e6dd      	b.n	80018a6 <__aeabi_dadd+0x3ee>
 8001aea:	0023      	movs	r3, r4
 8001aec:	433b      	orrs	r3, r7
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x63a>
 8001af0:	e6ad      	b.n	800184e <__aeabi_dadd+0x396>
 8001af2:	e606      	b.n	8001702 <__aeabi_dadd+0x24a>
 8001af4:	0744      	lsls	r4, r0, #29
 8001af6:	4323      	orrs	r3, r4
 8001af8:	2480      	movs	r4, #128	; 0x80
 8001afa:	08c0      	lsrs	r0, r0, #3
 8001afc:	0324      	lsls	r4, r4, #12
 8001afe:	4220      	tst	r0, r4
 8001b00:	d008      	beq.n	8001b14 <__aeabi_dadd+0x65c>
 8001b02:	4642      	mov	r2, r8
 8001b04:	08d6      	lsrs	r6, r2, #3
 8001b06:	4226      	tst	r6, r4
 8001b08:	d104      	bne.n	8001b14 <__aeabi_dadd+0x65c>
 8001b0a:	4655      	mov	r5, sl
 8001b0c:	0030      	movs	r0, r6
 8001b0e:	08cb      	lsrs	r3, r1, #3
 8001b10:	0751      	lsls	r1, r2, #29
 8001b12:	430b      	orrs	r3, r1
 8001b14:	0f5a      	lsrs	r2, r3, #29
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	0752      	lsls	r2, r2, #29
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	e619      	b.n	8001754 <__aeabi_dadd+0x29c>
 8001b20:	2300      	movs	r3, #0
 8001b22:	4a01      	ldr	r2, [pc, #4]	; (8001b28 <__aeabi_dadd+0x670>)
 8001b24:	001f      	movs	r7, r3
 8001b26:	e55e      	b.n	80015e6 <__aeabi_dadd+0x12e>
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	ff7fffff 	.word	0xff7fffff

08001b30 <__aeabi_ddiv>:
 8001b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b32:	4657      	mov	r7, sl
 8001b34:	464e      	mov	r6, r9
 8001b36:	4645      	mov	r5, r8
 8001b38:	46de      	mov	lr, fp
 8001b3a:	b5e0      	push	{r5, r6, r7, lr}
 8001b3c:	4681      	mov	r9, r0
 8001b3e:	0005      	movs	r5, r0
 8001b40:	030c      	lsls	r4, r1, #12
 8001b42:	0048      	lsls	r0, r1, #1
 8001b44:	4692      	mov	sl, r2
 8001b46:	001f      	movs	r7, r3
 8001b48:	b085      	sub	sp, #20
 8001b4a:	0b24      	lsrs	r4, r4, #12
 8001b4c:	0d40      	lsrs	r0, r0, #21
 8001b4e:	0fce      	lsrs	r6, r1, #31
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_ddiv+0x26>
 8001b54:	e156      	b.n	8001e04 <__aeabi_ddiv+0x2d4>
 8001b56:	4bd4      	ldr	r3, [pc, #848]	; (8001ea8 <__aeabi_ddiv+0x378>)
 8001b58:	4298      	cmp	r0, r3
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x2e>
 8001b5c:	e172      	b.n	8001e44 <__aeabi_ddiv+0x314>
 8001b5e:	0f6b      	lsrs	r3, r5, #29
 8001b60:	00e4      	lsls	r4, r4, #3
 8001b62:	431c      	orrs	r4, r3
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	4323      	orrs	r3, r4
 8001b6a:	4698      	mov	r8, r3
 8001b6c:	4bcf      	ldr	r3, [pc, #828]	; (8001eac <__aeabi_ddiv+0x37c>)
 8001b6e:	00ed      	lsls	r5, r5, #3
 8001b70:	469b      	mov	fp, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	4699      	mov	r9, r3
 8001b76:	4483      	add	fp, r0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	033c      	lsls	r4, r7, #12
 8001b7c:	007b      	lsls	r3, r7, #1
 8001b7e:	4650      	mov	r0, sl
 8001b80:	0b24      	lsrs	r4, r4, #12
 8001b82:	0d5b      	lsrs	r3, r3, #21
 8001b84:	0fff      	lsrs	r7, r7, #31
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_ddiv+0x5c>
 8001b8a:	e11f      	b.n	8001dcc <__aeabi_ddiv+0x29c>
 8001b8c:	4ac6      	ldr	r2, [pc, #792]	; (8001ea8 <__aeabi_ddiv+0x378>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d100      	bne.n	8001b94 <__aeabi_ddiv+0x64>
 8001b92:	e162      	b.n	8001e5a <__aeabi_ddiv+0x32a>
 8001b94:	49c5      	ldr	r1, [pc, #788]	; (8001eac <__aeabi_ddiv+0x37c>)
 8001b96:	0f42      	lsrs	r2, r0, #29
 8001b98:	468c      	mov	ip, r1
 8001b9a:	00e4      	lsls	r4, r4, #3
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	4314      	orrs	r4, r2
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	4463      	add	r3, ip
 8001ba4:	0412      	lsls	r2, r2, #16
 8001ba6:	1acb      	subs	r3, r1, r3
 8001ba8:	4314      	orrs	r4, r2
 8001baa:	469b      	mov	fp, r3
 8001bac:	00c2      	lsls	r2, r0, #3
 8001bae:	2000      	movs	r0, #0
 8001bb0:	0033      	movs	r3, r6
 8001bb2:	407b      	eors	r3, r7
 8001bb4:	469a      	mov	sl, r3
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d827      	bhi.n	8001c0c <__aeabi_ddiv+0xdc>
 8001bbc:	49bc      	ldr	r1, [pc, #752]	; (8001eb0 <__aeabi_ddiv+0x380>)
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	58cb      	ldr	r3, [r1, r3]
 8001bc2:	469f      	mov	pc, r3
 8001bc4:	46b2      	mov	sl, r6
 8001bc6:	9b00      	ldr	r3, [sp, #0]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d016      	beq.n	8001bfa <__aeabi_ddiv+0xca>
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0xa2>
 8001bd0:	e28e      	b.n	80020f0 <__aeabi_ddiv+0x5c0>
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_ddiv+0xa8>
 8001bd6:	e0d9      	b.n	8001d8c <__aeabi_ddiv+0x25c>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2400      	movs	r4, #0
 8001bdc:	2500      	movs	r5, #0
 8001bde:	4652      	mov	r2, sl
 8001be0:	051b      	lsls	r3, r3, #20
 8001be2:	4323      	orrs	r3, r4
 8001be4:	07d2      	lsls	r2, r2, #31
 8001be6:	4313      	orrs	r3, r2
 8001be8:	0028      	movs	r0, r5
 8001bea:	0019      	movs	r1, r3
 8001bec:	b005      	add	sp, #20
 8001bee:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf0:	46bb      	mov	fp, r7
 8001bf2:	46b2      	mov	sl, r6
 8001bf4:	46a9      	mov	r9, r5
 8001bf6:	46a0      	mov	r8, r4
 8001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfa:	2400      	movs	r4, #0
 8001bfc:	2500      	movs	r5, #0
 8001bfe:	4baa      	ldr	r3, [pc, #680]	; (8001ea8 <__aeabi_ddiv+0x378>)
 8001c00:	e7ed      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001c02:	46ba      	mov	sl, r7
 8001c04:	46a0      	mov	r8, r4
 8001c06:	0015      	movs	r5, r2
 8001c08:	9000      	str	r0, [sp, #0]
 8001c0a:	e7dc      	b.n	8001bc6 <__aeabi_ddiv+0x96>
 8001c0c:	4544      	cmp	r4, r8
 8001c0e:	d200      	bcs.n	8001c12 <__aeabi_ddiv+0xe2>
 8001c10:	e1c7      	b.n	8001fa2 <__aeabi_ddiv+0x472>
 8001c12:	d100      	bne.n	8001c16 <__aeabi_ddiv+0xe6>
 8001c14:	e1c2      	b.n	8001f9c <__aeabi_ddiv+0x46c>
 8001c16:	2301      	movs	r3, #1
 8001c18:	425b      	negs	r3, r3
 8001c1a:	469c      	mov	ip, r3
 8001c1c:	002e      	movs	r6, r5
 8001c1e:	4640      	mov	r0, r8
 8001c20:	2500      	movs	r5, #0
 8001c22:	44e3      	add	fp, ip
 8001c24:	0223      	lsls	r3, r4, #8
 8001c26:	0e14      	lsrs	r4, r2, #24
 8001c28:	431c      	orrs	r4, r3
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	0423      	lsls	r3, r4, #16
 8001c30:	0c1f      	lsrs	r7, r3, #16
 8001c32:	0212      	lsls	r2, r2, #8
 8001c34:	4649      	mov	r1, r9
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	9701      	str	r7, [sp, #4]
 8001c3a:	f7fe fb07 	bl	800024c <__aeabi_uidivmod>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	437a      	muls	r2, r7
 8001c42:	040b      	lsls	r3, r1, #16
 8001c44:	0c31      	lsrs	r1, r6, #16
 8001c46:	4680      	mov	r8, r0
 8001c48:	4319      	orrs	r1, r3
 8001c4a:	428a      	cmp	r2, r1
 8001c4c:	d907      	bls.n	8001c5e <__aeabi_ddiv+0x12e>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	425b      	negs	r3, r3
 8001c52:	469c      	mov	ip, r3
 8001c54:	1909      	adds	r1, r1, r4
 8001c56:	44e0      	add	r8, ip
 8001c58:	428c      	cmp	r4, r1
 8001c5a:	d800      	bhi.n	8001c5e <__aeabi_ddiv+0x12e>
 8001c5c:	e207      	b.n	800206e <__aeabi_ddiv+0x53e>
 8001c5e:	1a88      	subs	r0, r1, r2
 8001c60:	4649      	mov	r1, r9
 8001c62:	f7fe faf3 	bl	800024c <__aeabi_uidivmod>
 8001c66:	0409      	lsls	r1, r1, #16
 8001c68:	468c      	mov	ip, r1
 8001c6a:	0431      	lsls	r1, r6, #16
 8001c6c:	4666      	mov	r6, ip
 8001c6e:	9a01      	ldr	r2, [sp, #4]
 8001c70:	0c09      	lsrs	r1, r1, #16
 8001c72:	4342      	muls	r2, r0
 8001c74:	0003      	movs	r3, r0
 8001c76:	4331      	orrs	r1, r6
 8001c78:	428a      	cmp	r2, r1
 8001c7a:	d904      	bls.n	8001c86 <__aeabi_ddiv+0x156>
 8001c7c:	1909      	adds	r1, r1, r4
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	428c      	cmp	r4, r1
 8001c82:	d800      	bhi.n	8001c86 <__aeabi_ddiv+0x156>
 8001c84:	e1ed      	b.n	8002062 <__aeabi_ddiv+0x532>
 8001c86:	1a88      	subs	r0, r1, r2
 8001c88:	4642      	mov	r2, r8
 8001c8a:	0412      	lsls	r2, r2, #16
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	4690      	mov	r8, r2
 8001c90:	4641      	mov	r1, r8
 8001c92:	9b00      	ldr	r3, [sp, #0]
 8001c94:	040e      	lsls	r6, r1, #16
 8001c96:	0c1b      	lsrs	r3, r3, #16
 8001c98:	001f      	movs	r7, r3
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	9b00      	ldr	r3, [sp, #0]
 8001c9e:	0c36      	lsrs	r6, r6, #16
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	0c19      	lsrs	r1, r3, #16
 8001ca4:	000b      	movs	r3, r1
 8001ca6:	4373      	muls	r3, r6
 8001ca8:	0c12      	lsrs	r2, r2, #16
 8001caa:	437e      	muls	r6, r7
 8001cac:	9103      	str	r1, [sp, #12]
 8001cae:	4351      	muls	r1, r2
 8001cb0:	437a      	muls	r2, r7
 8001cb2:	0c1f      	lsrs	r7, r3, #16
 8001cb4:	46bc      	mov	ip, r7
 8001cb6:	1876      	adds	r6, r6, r1
 8001cb8:	4466      	add	r6, ip
 8001cba:	42b1      	cmp	r1, r6
 8001cbc:	d903      	bls.n	8001cc6 <__aeabi_ddiv+0x196>
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	0249      	lsls	r1, r1, #9
 8001cc2:	468c      	mov	ip, r1
 8001cc4:	4462      	add	r2, ip
 8001cc6:	0c31      	lsrs	r1, r6, #16
 8001cc8:	188a      	adds	r2, r1, r2
 8001cca:	0431      	lsls	r1, r6, #16
 8001ccc:	041e      	lsls	r6, r3, #16
 8001cce:	0c36      	lsrs	r6, r6, #16
 8001cd0:	198e      	adds	r6, r1, r6
 8001cd2:	4290      	cmp	r0, r2
 8001cd4:	d302      	bcc.n	8001cdc <__aeabi_ddiv+0x1ac>
 8001cd6:	d112      	bne.n	8001cfe <__aeabi_ddiv+0x1ce>
 8001cd8:	42b5      	cmp	r5, r6
 8001cda:	d210      	bcs.n	8001cfe <__aeabi_ddiv+0x1ce>
 8001cdc:	4643      	mov	r3, r8
 8001cde:	1e59      	subs	r1, r3, #1
 8001ce0:	9b00      	ldr	r3, [sp, #0]
 8001ce2:	469c      	mov	ip, r3
 8001ce4:	4465      	add	r5, ip
 8001ce6:	001f      	movs	r7, r3
 8001ce8:	429d      	cmp	r5, r3
 8001cea:	419b      	sbcs	r3, r3
 8001cec:	425b      	negs	r3, r3
 8001cee:	191b      	adds	r3, r3, r4
 8001cf0:	18c0      	adds	r0, r0, r3
 8001cf2:	4284      	cmp	r4, r0
 8001cf4:	d200      	bcs.n	8001cf8 <__aeabi_ddiv+0x1c8>
 8001cf6:	e1a0      	b.n	800203a <__aeabi_ddiv+0x50a>
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_ddiv+0x1cc>
 8001cfa:	e19b      	b.n	8002034 <__aeabi_ddiv+0x504>
 8001cfc:	4688      	mov	r8, r1
 8001cfe:	1bae      	subs	r6, r5, r6
 8001d00:	42b5      	cmp	r5, r6
 8001d02:	41ad      	sbcs	r5, r5
 8001d04:	1a80      	subs	r0, r0, r2
 8001d06:	426d      	negs	r5, r5
 8001d08:	1b40      	subs	r0, r0, r5
 8001d0a:	4284      	cmp	r4, r0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_ddiv+0x1e0>
 8001d0e:	e1d5      	b.n	80020bc <__aeabi_ddiv+0x58c>
 8001d10:	4649      	mov	r1, r9
 8001d12:	f7fe fa9b 	bl	800024c <__aeabi_uidivmod>
 8001d16:	9a01      	ldr	r2, [sp, #4]
 8001d18:	040b      	lsls	r3, r1, #16
 8001d1a:	4342      	muls	r2, r0
 8001d1c:	0c31      	lsrs	r1, r6, #16
 8001d1e:	0005      	movs	r5, r0
 8001d20:	4319      	orrs	r1, r3
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d900      	bls.n	8001d28 <__aeabi_ddiv+0x1f8>
 8001d26:	e16c      	b.n	8002002 <__aeabi_ddiv+0x4d2>
 8001d28:	1a88      	subs	r0, r1, r2
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	f7fe fa8e 	bl	800024c <__aeabi_uidivmod>
 8001d30:	9a01      	ldr	r2, [sp, #4]
 8001d32:	0436      	lsls	r6, r6, #16
 8001d34:	4342      	muls	r2, r0
 8001d36:	0409      	lsls	r1, r1, #16
 8001d38:	0c36      	lsrs	r6, r6, #16
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	430e      	orrs	r6, r1
 8001d3e:	42b2      	cmp	r2, r6
 8001d40:	d900      	bls.n	8001d44 <__aeabi_ddiv+0x214>
 8001d42:	e153      	b.n	8001fec <__aeabi_ddiv+0x4bc>
 8001d44:	9803      	ldr	r0, [sp, #12]
 8001d46:	1ab6      	subs	r6, r6, r2
 8001d48:	0002      	movs	r2, r0
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	431d      	orrs	r5, r3
 8001d4e:	9f02      	ldr	r7, [sp, #8]
 8001d50:	042b      	lsls	r3, r5, #16
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	435a      	muls	r2, r3
 8001d56:	437b      	muls	r3, r7
 8001d58:	469c      	mov	ip, r3
 8001d5a:	0c29      	lsrs	r1, r5, #16
 8001d5c:	4348      	muls	r0, r1
 8001d5e:	0c13      	lsrs	r3, r2, #16
 8001d60:	4484      	add	ip, r0
 8001d62:	4463      	add	r3, ip
 8001d64:	4379      	muls	r1, r7
 8001d66:	4298      	cmp	r0, r3
 8001d68:	d903      	bls.n	8001d72 <__aeabi_ddiv+0x242>
 8001d6a:	2080      	movs	r0, #128	; 0x80
 8001d6c:	0240      	lsls	r0, r0, #9
 8001d6e:	4684      	mov	ip, r0
 8001d70:	4461      	add	r1, ip
 8001d72:	0c18      	lsrs	r0, r3, #16
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	0c12      	lsrs	r2, r2, #16
 8001d7a:	1841      	adds	r1, r0, r1
 8001d7c:	189b      	adds	r3, r3, r2
 8001d7e:	428e      	cmp	r6, r1
 8001d80:	d200      	bcs.n	8001d84 <__aeabi_ddiv+0x254>
 8001d82:	e0ff      	b.n	8001f84 <__aeabi_ddiv+0x454>
 8001d84:	d100      	bne.n	8001d88 <__aeabi_ddiv+0x258>
 8001d86:	e0fa      	b.n	8001f7e <__aeabi_ddiv+0x44e>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	431d      	orrs	r5, r3
 8001d8c:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <__aeabi_ddiv+0x384>)
 8001d8e:	445a      	add	r2, fp
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	dc00      	bgt.n	8001d96 <__aeabi_ddiv+0x266>
 8001d94:	e0aa      	b.n	8001eec <__aeabi_ddiv+0x3bc>
 8001d96:	076b      	lsls	r3, r5, #29
 8001d98:	d000      	beq.n	8001d9c <__aeabi_ddiv+0x26c>
 8001d9a:	e13d      	b.n	8002018 <__aeabi_ddiv+0x4e8>
 8001d9c:	08ed      	lsrs	r5, r5, #3
 8001d9e:	4643      	mov	r3, r8
 8001da0:	01db      	lsls	r3, r3, #7
 8001da2:	d506      	bpl.n	8001db2 <__aeabi_ddiv+0x282>
 8001da4:	4642      	mov	r2, r8
 8001da6:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <__aeabi_ddiv+0x388>)
 8001da8:	401a      	ands	r2, r3
 8001daa:	4690      	mov	r8, r2
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	00d2      	lsls	r2, r2, #3
 8001db0:	445a      	add	r2, fp
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <__aeabi_ddiv+0x38c>)
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dd00      	ble.n	8001dba <__aeabi_ddiv+0x28a>
 8001db8:	e71f      	b.n	8001bfa <__aeabi_ddiv+0xca>
 8001dba:	4643      	mov	r3, r8
 8001dbc:	075b      	lsls	r3, r3, #29
 8001dbe:	431d      	orrs	r5, r3
 8001dc0:	4643      	mov	r3, r8
 8001dc2:	0552      	lsls	r2, r2, #21
 8001dc4:	025c      	lsls	r4, r3, #9
 8001dc6:	0b24      	lsrs	r4, r4, #12
 8001dc8:	0d53      	lsrs	r3, r2, #21
 8001dca:	e708      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001dcc:	4652      	mov	r2, sl
 8001dce:	4322      	orrs	r2, r4
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x2a4>
 8001dd2:	e07b      	b.n	8001ecc <__aeabi_ddiv+0x39c>
 8001dd4:	2c00      	cmp	r4, #0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_ddiv+0x2aa>
 8001dd8:	e0fa      	b.n	8001fd0 <__aeabi_ddiv+0x4a0>
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f001 fa22 	bl	8003224 <__clzsi2>
 8001de0:	0002      	movs	r2, r0
 8001de2:	3a0b      	subs	r2, #11
 8001de4:	231d      	movs	r3, #29
 8001de6:	0001      	movs	r1, r0
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	4652      	mov	r2, sl
 8001dec:	3908      	subs	r1, #8
 8001dee:	40da      	lsrs	r2, r3
 8001df0:	408c      	lsls	r4, r1
 8001df2:	4314      	orrs	r4, r2
 8001df4:	4652      	mov	r2, sl
 8001df6:	408a      	lsls	r2, r1
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <__aeabi_ddiv+0x390>)
 8001dfa:	4458      	add	r0, fp
 8001dfc:	469b      	mov	fp, r3
 8001dfe:	4483      	add	fp, r0
 8001e00:	2000      	movs	r0, #0
 8001e02:	e6d5      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001e04:	464b      	mov	r3, r9
 8001e06:	4323      	orrs	r3, r4
 8001e08:	4698      	mov	r8, r3
 8001e0a:	d044      	beq.n	8001e96 <__aeabi_ddiv+0x366>
 8001e0c:	2c00      	cmp	r4, #0
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_ddiv+0x2e2>
 8001e10:	e0ce      	b.n	8001fb0 <__aeabi_ddiv+0x480>
 8001e12:	0020      	movs	r0, r4
 8001e14:	f001 fa06 	bl	8003224 <__clzsi2>
 8001e18:	0001      	movs	r1, r0
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	390b      	subs	r1, #11
 8001e1e:	231d      	movs	r3, #29
 8001e20:	1a5b      	subs	r3, r3, r1
 8001e22:	4649      	mov	r1, r9
 8001e24:	0010      	movs	r0, r2
 8001e26:	40d9      	lsrs	r1, r3
 8001e28:	3808      	subs	r0, #8
 8001e2a:	4084      	lsls	r4, r0
 8001e2c:	000b      	movs	r3, r1
 8001e2e:	464d      	mov	r5, r9
 8001e30:	4323      	orrs	r3, r4
 8001e32:	4698      	mov	r8, r3
 8001e34:	4085      	lsls	r5, r0
 8001e36:	4823      	ldr	r0, [pc, #140]	; (8001ec4 <__aeabi_ddiv+0x394>)
 8001e38:	1a83      	subs	r3, r0, r2
 8001e3a:	469b      	mov	fp, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4699      	mov	r9, r3
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	e69a      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001e44:	464b      	mov	r3, r9
 8001e46:	4323      	orrs	r3, r4
 8001e48:	4698      	mov	r8, r3
 8001e4a:	d11d      	bne.n	8001e88 <__aeabi_ddiv+0x358>
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	4699      	mov	r9, r3
 8001e50:	3b06      	subs	r3, #6
 8001e52:	2500      	movs	r5, #0
 8001e54:	4683      	mov	fp, r0
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	e68f      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001e5a:	4652      	mov	r2, sl
 8001e5c:	4322      	orrs	r2, r4
 8001e5e:	d109      	bne.n	8001e74 <__aeabi_ddiv+0x344>
 8001e60:	2302      	movs	r3, #2
 8001e62:	4649      	mov	r1, r9
 8001e64:	4319      	orrs	r1, r3
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <__aeabi_ddiv+0x398>)
 8001e68:	4689      	mov	r9, r1
 8001e6a:	469c      	mov	ip, r3
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2002      	movs	r0, #2
 8001e70:	44e3      	add	fp, ip
 8001e72:	e69d      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001e74:	2303      	movs	r3, #3
 8001e76:	464a      	mov	r2, r9
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <__aeabi_ddiv+0x398>)
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	469c      	mov	ip, r3
 8001e80:	4652      	mov	r2, sl
 8001e82:	2003      	movs	r0, #3
 8001e84:	44e3      	add	fp, ip
 8001e86:	e693      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001e88:	230c      	movs	r3, #12
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	3b09      	subs	r3, #9
 8001e8e:	46a0      	mov	r8, r4
 8001e90:	4683      	mov	fp, r0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	e671      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001e96:	2304      	movs	r3, #4
 8001e98:	4699      	mov	r9, r3
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	469b      	mov	fp, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	2500      	movs	r5, #0
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	e669      	b.n	8001b7a <__aeabi_ddiv+0x4a>
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	000007ff 	.word	0x000007ff
 8001eac:	fffffc01 	.word	0xfffffc01
 8001eb0:	0800b568 	.word	0x0800b568
 8001eb4:	000003ff 	.word	0x000003ff
 8001eb8:	feffffff 	.word	0xfeffffff
 8001ebc:	000007fe 	.word	0x000007fe
 8001ec0:	000003f3 	.word	0x000003f3
 8001ec4:	fffffc0d 	.word	0xfffffc0d
 8001ec8:	fffff801 	.word	0xfffff801
 8001ecc:	4649      	mov	r1, r9
 8001ece:	2301      	movs	r3, #1
 8001ed0:	4319      	orrs	r1, r3
 8001ed2:	4689      	mov	r9, r1
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	e66a      	b.n	8001bb0 <__aeabi_ddiv+0x80>
 8001eda:	2300      	movs	r3, #0
 8001edc:	2480      	movs	r4, #128	; 0x80
 8001ede:	469a      	mov	sl, r3
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	4b8a      	ldr	r3, [pc, #552]	; (800210c <__aeabi_ddiv+0x5dc>)
 8001ee4:	0324      	lsls	r4, r4, #12
 8001ee6:	e67a      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001ee8:	2501      	movs	r5, #1
 8001eea:	426d      	negs	r5, r5
 8001eec:	2301      	movs	r3, #1
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	2b38      	cmp	r3, #56	; 0x38
 8001ef2:	dd00      	ble.n	8001ef6 <__aeabi_ddiv+0x3c6>
 8001ef4:	e670      	b.n	8001bd8 <__aeabi_ddiv+0xa8>
 8001ef6:	2b1f      	cmp	r3, #31
 8001ef8:	dc00      	bgt.n	8001efc <__aeabi_ddiv+0x3cc>
 8001efa:	e0bf      	b.n	800207c <__aeabi_ddiv+0x54c>
 8001efc:	211f      	movs	r1, #31
 8001efe:	4249      	negs	r1, r1
 8001f00:	1a8a      	subs	r2, r1, r2
 8001f02:	4641      	mov	r1, r8
 8001f04:	40d1      	lsrs	r1, r2
 8001f06:	000a      	movs	r2, r1
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d004      	beq.n	8001f16 <__aeabi_ddiv+0x3e6>
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	4b80      	ldr	r3, [pc, #512]	; (8002110 <__aeabi_ddiv+0x5e0>)
 8001f10:	445b      	add	r3, fp
 8001f12:	4099      	lsls	r1, r3
 8001f14:	430d      	orrs	r5, r1
 8001f16:	1e6b      	subs	r3, r5, #1
 8001f18:	419d      	sbcs	r5, r3
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	432a      	orrs	r2, r5
 8001f1e:	001d      	movs	r5, r3
 8001f20:	2400      	movs	r4, #0
 8001f22:	4015      	ands	r5, r2
 8001f24:	4213      	tst	r3, r2
 8001f26:	d100      	bne.n	8001f2a <__aeabi_ddiv+0x3fa>
 8001f28:	e0d4      	b.n	80020d4 <__aeabi_ddiv+0x5a4>
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4011      	ands	r1, r2
 8001f30:	2904      	cmp	r1, #4
 8001f32:	d100      	bne.n	8001f36 <__aeabi_ddiv+0x406>
 8001f34:	e0cb      	b.n	80020ce <__aeabi_ddiv+0x59e>
 8001f36:	1d11      	adds	r1, r2, #4
 8001f38:	4291      	cmp	r1, r2
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	189b      	adds	r3, r3, r2
 8001f40:	000a      	movs	r2, r1
 8001f42:	0219      	lsls	r1, r3, #8
 8001f44:	d400      	bmi.n	8001f48 <__aeabi_ddiv+0x418>
 8001f46:	e0c2      	b.n	80020ce <__aeabi_ddiv+0x59e>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	2400      	movs	r4, #0
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	e646      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	4641      	mov	r1, r8
 8001f54:	031b      	lsls	r3, r3, #12
 8001f56:	4219      	tst	r1, r3
 8001f58:	d008      	beq.n	8001f6c <__aeabi_ddiv+0x43c>
 8001f5a:	421c      	tst	r4, r3
 8001f5c:	d106      	bne.n	8001f6c <__aeabi_ddiv+0x43c>
 8001f5e:	431c      	orrs	r4, r3
 8001f60:	0324      	lsls	r4, r4, #12
 8001f62:	46ba      	mov	sl, r7
 8001f64:	0015      	movs	r5, r2
 8001f66:	4b69      	ldr	r3, [pc, #420]	; (800210c <__aeabi_ddiv+0x5dc>)
 8001f68:	0b24      	lsrs	r4, r4, #12
 8001f6a:	e638      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001f6c:	2480      	movs	r4, #128	; 0x80
 8001f6e:	4643      	mov	r3, r8
 8001f70:	0324      	lsls	r4, r4, #12
 8001f72:	431c      	orrs	r4, r3
 8001f74:	0324      	lsls	r4, r4, #12
 8001f76:	46b2      	mov	sl, r6
 8001f78:	4b64      	ldr	r3, [pc, #400]	; (800210c <__aeabi_ddiv+0x5dc>)
 8001f7a:	0b24      	lsrs	r4, r4, #12
 8001f7c:	e62f      	b.n	8001bde <__aeabi_ddiv+0xae>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_ddiv+0x454>
 8001f82:	e703      	b.n	8001d8c <__aeabi_ddiv+0x25c>
 8001f84:	19a6      	adds	r6, r4, r6
 8001f86:	1e68      	subs	r0, r5, #1
 8001f88:	42a6      	cmp	r6, r4
 8001f8a:	d200      	bcs.n	8001f8e <__aeabi_ddiv+0x45e>
 8001f8c:	e08d      	b.n	80020aa <__aeabi_ddiv+0x57a>
 8001f8e:	428e      	cmp	r6, r1
 8001f90:	d200      	bcs.n	8001f94 <__aeabi_ddiv+0x464>
 8001f92:	e0a3      	b.n	80020dc <__aeabi_ddiv+0x5ac>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x468>
 8001f96:	e0b3      	b.n	8002100 <__aeabi_ddiv+0x5d0>
 8001f98:	0005      	movs	r5, r0
 8001f9a:	e6f5      	b.n	8001d88 <__aeabi_ddiv+0x258>
 8001f9c:	42aa      	cmp	r2, r5
 8001f9e:	d900      	bls.n	8001fa2 <__aeabi_ddiv+0x472>
 8001fa0:	e639      	b.n	8001c16 <__aeabi_ddiv+0xe6>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	07de      	lsls	r6, r3, #31
 8001fa6:	0858      	lsrs	r0, r3, #1
 8001fa8:	086b      	lsrs	r3, r5, #1
 8001faa:	431e      	orrs	r6, r3
 8001fac:	07ed      	lsls	r5, r5, #31
 8001fae:	e639      	b.n	8001c24 <__aeabi_ddiv+0xf4>
 8001fb0:	4648      	mov	r0, r9
 8001fb2:	f001 f937 	bl	8003224 <__clzsi2>
 8001fb6:	0001      	movs	r1, r0
 8001fb8:	0002      	movs	r2, r0
 8001fba:	3115      	adds	r1, #21
 8001fbc:	3220      	adds	r2, #32
 8001fbe:	291c      	cmp	r1, #28
 8001fc0:	dc00      	bgt.n	8001fc4 <__aeabi_ddiv+0x494>
 8001fc2:	e72c      	b.n	8001e1e <__aeabi_ddiv+0x2ee>
 8001fc4:	464b      	mov	r3, r9
 8001fc6:	3808      	subs	r0, #8
 8001fc8:	4083      	lsls	r3, r0
 8001fca:	2500      	movs	r5, #0
 8001fcc:	4698      	mov	r8, r3
 8001fce:	e732      	b.n	8001e36 <__aeabi_ddiv+0x306>
 8001fd0:	f001 f928 	bl	8003224 <__clzsi2>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	3215      	adds	r2, #21
 8001fda:	3020      	adds	r0, #32
 8001fdc:	2a1c      	cmp	r2, #28
 8001fde:	dc00      	bgt.n	8001fe2 <__aeabi_ddiv+0x4b2>
 8001fe0:	e700      	b.n	8001de4 <__aeabi_ddiv+0x2b4>
 8001fe2:	4654      	mov	r4, sl
 8001fe4:	3b08      	subs	r3, #8
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	409c      	lsls	r4, r3
 8001fea:	e705      	b.n	8001df8 <__aeabi_ddiv+0x2c8>
 8001fec:	1936      	adds	r6, r6, r4
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	42b4      	cmp	r4, r6
 8001ff2:	d900      	bls.n	8001ff6 <__aeabi_ddiv+0x4c6>
 8001ff4:	e6a6      	b.n	8001d44 <__aeabi_ddiv+0x214>
 8001ff6:	42b2      	cmp	r2, r6
 8001ff8:	d800      	bhi.n	8001ffc <__aeabi_ddiv+0x4cc>
 8001ffa:	e6a3      	b.n	8001d44 <__aeabi_ddiv+0x214>
 8001ffc:	1e83      	subs	r3, r0, #2
 8001ffe:	1936      	adds	r6, r6, r4
 8002000:	e6a0      	b.n	8001d44 <__aeabi_ddiv+0x214>
 8002002:	1909      	adds	r1, r1, r4
 8002004:	3d01      	subs	r5, #1
 8002006:	428c      	cmp	r4, r1
 8002008:	d900      	bls.n	800200c <__aeabi_ddiv+0x4dc>
 800200a:	e68d      	b.n	8001d28 <__aeabi_ddiv+0x1f8>
 800200c:	428a      	cmp	r2, r1
 800200e:	d800      	bhi.n	8002012 <__aeabi_ddiv+0x4e2>
 8002010:	e68a      	b.n	8001d28 <__aeabi_ddiv+0x1f8>
 8002012:	1e85      	subs	r5, r0, #2
 8002014:	1909      	adds	r1, r1, r4
 8002016:	e687      	b.n	8001d28 <__aeabi_ddiv+0x1f8>
 8002018:	230f      	movs	r3, #15
 800201a:	402b      	ands	r3, r5
 800201c:	2b04      	cmp	r3, #4
 800201e:	d100      	bne.n	8002022 <__aeabi_ddiv+0x4f2>
 8002020:	e6bc      	b.n	8001d9c <__aeabi_ddiv+0x26c>
 8002022:	2305      	movs	r3, #5
 8002024:	425b      	negs	r3, r3
 8002026:	42ab      	cmp	r3, r5
 8002028:	419b      	sbcs	r3, r3
 800202a:	3504      	adds	r5, #4
 800202c:	425b      	negs	r3, r3
 800202e:	08ed      	lsrs	r5, r5, #3
 8002030:	4498      	add	r8, r3
 8002032:	e6b4      	b.n	8001d9e <__aeabi_ddiv+0x26e>
 8002034:	42af      	cmp	r7, r5
 8002036:	d900      	bls.n	800203a <__aeabi_ddiv+0x50a>
 8002038:	e660      	b.n	8001cfc <__aeabi_ddiv+0x1cc>
 800203a:	4282      	cmp	r2, r0
 800203c:	d804      	bhi.n	8002048 <__aeabi_ddiv+0x518>
 800203e:	d000      	beq.n	8002042 <__aeabi_ddiv+0x512>
 8002040:	e65c      	b.n	8001cfc <__aeabi_ddiv+0x1cc>
 8002042:	42ae      	cmp	r6, r5
 8002044:	d800      	bhi.n	8002048 <__aeabi_ddiv+0x518>
 8002046:	e659      	b.n	8001cfc <__aeabi_ddiv+0x1cc>
 8002048:	2302      	movs	r3, #2
 800204a:	425b      	negs	r3, r3
 800204c:	469c      	mov	ip, r3
 800204e:	9b00      	ldr	r3, [sp, #0]
 8002050:	44e0      	add	r8, ip
 8002052:	469c      	mov	ip, r3
 8002054:	4465      	add	r5, ip
 8002056:	429d      	cmp	r5, r3
 8002058:	419b      	sbcs	r3, r3
 800205a:	425b      	negs	r3, r3
 800205c:	191b      	adds	r3, r3, r4
 800205e:	18c0      	adds	r0, r0, r3
 8002060:	e64d      	b.n	8001cfe <__aeabi_ddiv+0x1ce>
 8002062:	428a      	cmp	r2, r1
 8002064:	d800      	bhi.n	8002068 <__aeabi_ddiv+0x538>
 8002066:	e60e      	b.n	8001c86 <__aeabi_ddiv+0x156>
 8002068:	1e83      	subs	r3, r0, #2
 800206a:	1909      	adds	r1, r1, r4
 800206c:	e60b      	b.n	8001c86 <__aeabi_ddiv+0x156>
 800206e:	428a      	cmp	r2, r1
 8002070:	d800      	bhi.n	8002074 <__aeabi_ddiv+0x544>
 8002072:	e5f4      	b.n	8001c5e <__aeabi_ddiv+0x12e>
 8002074:	1e83      	subs	r3, r0, #2
 8002076:	4698      	mov	r8, r3
 8002078:	1909      	adds	r1, r1, r4
 800207a:	e5f0      	b.n	8001c5e <__aeabi_ddiv+0x12e>
 800207c:	4925      	ldr	r1, [pc, #148]	; (8002114 <__aeabi_ddiv+0x5e4>)
 800207e:	0028      	movs	r0, r5
 8002080:	4459      	add	r1, fp
 8002082:	408d      	lsls	r5, r1
 8002084:	4642      	mov	r2, r8
 8002086:	408a      	lsls	r2, r1
 8002088:	1e69      	subs	r1, r5, #1
 800208a:	418d      	sbcs	r5, r1
 800208c:	4641      	mov	r1, r8
 800208e:	40d8      	lsrs	r0, r3
 8002090:	40d9      	lsrs	r1, r3
 8002092:	4302      	orrs	r2, r0
 8002094:	432a      	orrs	r2, r5
 8002096:	000b      	movs	r3, r1
 8002098:	0751      	lsls	r1, r2, #29
 800209a:	d100      	bne.n	800209e <__aeabi_ddiv+0x56e>
 800209c:	e751      	b.n	8001f42 <__aeabi_ddiv+0x412>
 800209e:	210f      	movs	r1, #15
 80020a0:	4011      	ands	r1, r2
 80020a2:	2904      	cmp	r1, #4
 80020a4:	d000      	beq.n	80020a8 <__aeabi_ddiv+0x578>
 80020a6:	e746      	b.n	8001f36 <__aeabi_ddiv+0x406>
 80020a8:	e74b      	b.n	8001f42 <__aeabi_ddiv+0x412>
 80020aa:	0005      	movs	r5, r0
 80020ac:	428e      	cmp	r6, r1
 80020ae:	d000      	beq.n	80020b2 <__aeabi_ddiv+0x582>
 80020b0:	e66a      	b.n	8001d88 <__aeabi_ddiv+0x258>
 80020b2:	9a00      	ldr	r2, [sp, #0]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d000      	beq.n	80020ba <__aeabi_ddiv+0x58a>
 80020b8:	e666      	b.n	8001d88 <__aeabi_ddiv+0x258>
 80020ba:	e667      	b.n	8001d8c <__aeabi_ddiv+0x25c>
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <__aeabi_ddiv+0x5e8>)
 80020be:	445a      	add	r2, fp
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	dc00      	bgt.n	80020c6 <__aeabi_ddiv+0x596>
 80020c4:	e710      	b.n	8001ee8 <__aeabi_ddiv+0x3b8>
 80020c6:	2301      	movs	r3, #1
 80020c8:	2500      	movs	r5, #0
 80020ca:	4498      	add	r8, r3
 80020cc:	e667      	b.n	8001d9e <__aeabi_ddiv+0x26e>
 80020ce:	075d      	lsls	r5, r3, #29
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	0b1c      	lsrs	r4, r3, #12
 80020d4:	08d2      	lsrs	r2, r2, #3
 80020d6:	2300      	movs	r3, #0
 80020d8:	4315      	orrs	r5, r2
 80020da:	e580      	b.n	8001bde <__aeabi_ddiv+0xae>
 80020dc:	9800      	ldr	r0, [sp, #0]
 80020de:	3d02      	subs	r5, #2
 80020e0:	0042      	lsls	r2, r0, #1
 80020e2:	4282      	cmp	r2, r0
 80020e4:	41bf      	sbcs	r7, r7
 80020e6:	427f      	negs	r7, r7
 80020e8:	193c      	adds	r4, r7, r4
 80020ea:	1936      	adds	r6, r6, r4
 80020ec:	9200      	str	r2, [sp, #0]
 80020ee:	e7dd      	b.n	80020ac <__aeabi_ddiv+0x57c>
 80020f0:	2480      	movs	r4, #128	; 0x80
 80020f2:	4643      	mov	r3, r8
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	431c      	orrs	r4, r3
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <__aeabi_ddiv+0x5dc>)
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	e56e      	b.n	8001bde <__aeabi_ddiv+0xae>
 8002100:	9a00      	ldr	r2, [sp, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3ea      	bcc.n	80020dc <__aeabi_ddiv+0x5ac>
 8002106:	0005      	movs	r5, r0
 8002108:	e7d3      	b.n	80020b2 <__aeabi_ddiv+0x582>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	000007ff 	.word	0x000007ff
 8002110:	0000043e 	.word	0x0000043e
 8002114:	0000041e 	.word	0x0000041e
 8002118:	000003ff 	.word	0x000003ff

0800211c <__eqdf2>:
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	464e      	mov	r6, r9
 8002120:	4645      	mov	r5, r8
 8002122:	46de      	mov	lr, fp
 8002124:	4657      	mov	r7, sl
 8002126:	4690      	mov	r8, r2
 8002128:	b5e0      	push	{r5, r6, r7, lr}
 800212a:	0017      	movs	r7, r2
 800212c:	031a      	lsls	r2, r3, #12
 800212e:	0b12      	lsrs	r2, r2, #12
 8002130:	0005      	movs	r5, r0
 8002132:	4684      	mov	ip, r0
 8002134:	4819      	ldr	r0, [pc, #100]	; (800219c <__eqdf2+0x80>)
 8002136:	030e      	lsls	r6, r1, #12
 8002138:	004c      	lsls	r4, r1, #1
 800213a:	4691      	mov	r9, r2
 800213c:	005a      	lsls	r2, r3, #1
 800213e:	0fdb      	lsrs	r3, r3, #31
 8002140:	469b      	mov	fp, r3
 8002142:	0b36      	lsrs	r6, r6, #12
 8002144:	0d64      	lsrs	r4, r4, #21
 8002146:	0fc9      	lsrs	r1, r1, #31
 8002148:	0d52      	lsrs	r2, r2, #21
 800214a:	4284      	cmp	r4, r0
 800214c:	d019      	beq.n	8002182 <__eqdf2+0x66>
 800214e:	4282      	cmp	r2, r0
 8002150:	d010      	beq.n	8002174 <__eqdf2+0x58>
 8002152:	2001      	movs	r0, #1
 8002154:	4294      	cmp	r4, r2
 8002156:	d10e      	bne.n	8002176 <__eqdf2+0x5a>
 8002158:	454e      	cmp	r6, r9
 800215a:	d10c      	bne.n	8002176 <__eqdf2+0x5a>
 800215c:	2001      	movs	r0, #1
 800215e:	45c4      	cmp	ip, r8
 8002160:	d109      	bne.n	8002176 <__eqdf2+0x5a>
 8002162:	4559      	cmp	r1, fp
 8002164:	d017      	beq.n	8002196 <__eqdf2+0x7a>
 8002166:	2c00      	cmp	r4, #0
 8002168:	d105      	bne.n	8002176 <__eqdf2+0x5a>
 800216a:	0030      	movs	r0, r6
 800216c:	4328      	orrs	r0, r5
 800216e:	1e43      	subs	r3, r0, #1
 8002170:	4198      	sbcs	r0, r3
 8002172:	e000      	b.n	8002176 <__eqdf2+0x5a>
 8002174:	2001      	movs	r0, #1
 8002176:	bcf0      	pop	{r4, r5, r6, r7}
 8002178:	46bb      	mov	fp, r7
 800217a:	46b2      	mov	sl, r6
 800217c:	46a9      	mov	r9, r5
 800217e:	46a0      	mov	r8, r4
 8002180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002182:	0033      	movs	r3, r6
 8002184:	2001      	movs	r0, #1
 8002186:	432b      	orrs	r3, r5
 8002188:	d1f5      	bne.n	8002176 <__eqdf2+0x5a>
 800218a:	42a2      	cmp	r2, r4
 800218c:	d1f3      	bne.n	8002176 <__eqdf2+0x5a>
 800218e:	464b      	mov	r3, r9
 8002190:	433b      	orrs	r3, r7
 8002192:	d1f0      	bne.n	8002176 <__eqdf2+0x5a>
 8002194:	e7e2      	b.n	800215c <__eqdf2+0x40>
 8002196:	2000      	movs	r0, #0
 8002198:	e7ed      	b.n	8002176 <__eqdf2+0x5a>
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	000007ff 	.word	0x000007ff

080021a0 <__gedf2>:
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	4647      	mov	r7, r8
 80021a4:	46ce      	mov	lr, r9
 80021a6:	0004      	movs	r4, r0
 80021a8:	0018      	movs	r0, r3
 80021aa:	0016      	movs	r6, r2
 80021ac:	031b      	lsls	r3, r3, #12
 80021ae:	0b1b      	lsrs	r3, r3, #12
 80021b0:	4d2d      	ldr	r5, [pc, #180]	; (8002268 <__gedf2+0xc8>)
 80021b2:	004a      	lsls	r2, r1, #1
 80021b4:	4699      	mov	r9, r3
 80021b6:	b580      	push	{r7, lr}
 80021b8:	0043      	lsls	r3, r0, #1
 80021ba:	030f      	lsls	r7, r1, #12
 80021bc:	46a4      	mov	ip, r4
 80021be:	46b0      	mov	r8, r6
 80021c0:	0b3f      	lsrs	r7, r7, #12
 80021c2:	0d52      	lsrs	r2, r2, #21
 80021c4:	0fc9      	lsrs	r1, r1, #31
 80021c6:	0d5b      	lsrs	r3, r3, #21
 80021c8:	0fc0      	lsrs	r0, r0, #31
 80021ca:	42aa      	cmp	r2, r5
 80021cc:	d021      	beq.n	8002212 <__gedf2+0x72>
 80021ce:	42ab      	cmp	r3, r5
 80021d0:	d013      	beq.n	80021fa <__gedf2+0x5a>
 80021d2:	2a00      	cmp	r2, #0
 80021d4:	d122      	bne.n	800221c <__gedf2+0x7c>
 80021d6:	433c      	orrs	r4, r7
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <__gedf2+0x42>
 80021dc:	464d      	mov	r5, r9
 80021de:	432e      	orrs	r6, r5
 80021e0:	d022      	beq.n	8002228 <__gedf2+0x88>
 80021e2:	2c00      	cmp	r4, #0
 80021e4:	d010      	beq.n	8002208 <__gedf2+0x68>
 80021e6:	4281      	cmp	r1, r0
 80021e8:	d022      	beq.n	8002230 <__gedf2+0x90>
 80021ea:	2002      	movs	r0, #2
 80021ec:	3901      	subs	r1, #1
 80021ee:	4008      	ands	r0, r1
 80021f0:	3801      	subs	r0, #1
 80021f2:	bcc0      	pop	{r6, r7}
 80021f4:	46b9      	mov	r9, r7
 80021f6:	46b0      	mov	r8, r6
 80021f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fa:	464d      	mov	r5, r9
 80021fc:	432e      	orrs	r6, r5
 80021fe:	d129      	bne.n	8002254 <__gedf2+0xb4>
 8002200:	2a00      	cmp	r2, #0
 8002202:	d1f0      	bne.n	80021e6 <__gedf2+0x46>
 8002204:	433c      	orrs	r4, r7
 8002206:	d1ee      	bne.n	80021e6 <__gedf2+0x46>
 8002208:	2800      	cmp	r0, #0
 800220a:	d1f2      	bne.n	80021f2 <__gedf2+0x52>
 800220c:	2001      	movs	r0, #1
 800220e:	4240      	negs	r0, r0
 8002210:	e7ef      	b.n	80021f2 <__gedf2+0x52>
 8002212:	003d      	movs	r5, r7
 8002214:	4325      	orrs	r5, r4
 8002216:	d11d      	bne.n	8002254 <__gedf2+0xb4>
 8002218:	4293      	cmp	r3, r2
 800221a:	d0ee      	beq.n	80021fa <__gedf2+0x5a>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e2      	bne.n	80021e6 <__gedf2+0x46>
 8002220:	464c      	mov	r4, r9
 8002222:	4326      	orrs	r6, r4
 8002224:	d1df      	bne.n	80021e6 <__gedf2+0x46>
 8002226:	e7e0      	b.n	80021ea <__gedf2+0x4a>
 8002228:	2000      	movs	r0, #0
 800222a:	2c00      	cmp	r4, #0
 800222c:	d0e1      	beq.n	80021f2 <__gedf2+0x52>
 800222e:	e7dc      	b.n	80021ea <__gedf2+0x4a>
 8002230:	429a      	cmp	r2, r3
 8002232:	dc0a      	bgt.n	800224a <__gedf2+0xaa>
 8002234:	dbe8      	blt.n	8002208 <__gedf2+0x68>
 8002236:	454f      	cmp	r7, r9
 8002238:	d8d7      	bhi.n	80021ea <__gedf2+0x4a>
 800223a:	d00e      	beq.n	800225a <__gedf2+0xba>
 800223c:	2000      	movs	r0, #0
 800223e:	454f      	cmp	r7, r9
 8002240:	d2d7      	bcs.n	80021f2 <__gedf2+0x52>
 8002242:	2900      	cmp	r1, #0
 8002244:	d0e2      	beq.n	800220c <__gedf2+0x6c>
 8002246:	0008      	movs	r0, r1
 8002248:	e7d3      	b.n	80021f2 <__gedf2+0x52>
 800224a:	4243      	negs	r3, r0
 800224c:	4158      	adcs	r0, r3
 800224e:	0040      	lsls	r0, r0, #1
 8002250:	3801      	subs	r0, #1
 8002252:	e7ce      	b.n	80021f2 <__gedf2+0x52>
 8002254:	2002      	movs	r0, #2
 8002256:	4240      	negs	r0, r0
 8002258:	e7cb      	b.n	80021f2 <__gedf2+0x52>
 800225a:	45c4      	cmp	ip, r8
 800225c:	d8c5      	bhi.n	80021ea <__gedf2+0x4a>
 800225e:	2000      	movs	r0, #0
 8002260:	45c4      	cmp	ip, r8
 8002262:	d2c6      	bcs.n	80021f2 <__gedf2+0x52>
 8002264:	e7ed      	b.n	8002242 <__gedf2+0xa2>
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	000007ff 	.word	0x000007ff

0800226c <__ledf2>:
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	4647      	mov	r7, r8
 8002270:	46ce      	mov	lr, r9
 8002272:	0004      	movs	r4, r0
 8002274:	0018      	movs	r0, r3
 8002276:	0016      	movs	r6, r2
 8002278:	031b      	lsls	r3, r3, #12
 800227a:	0b1b      	lsrs	r3, r3, #12
 800227c:	4d2c      	ldr	r5, [pc, #176]	; (8002330 <__ledf2+0xc4>)
 800227e:	004a      	lsls	r2, r1, #1
 8002280:	4699      	mov	r9, r3
 8002282:	b580      	push	{r7, lr}
 8002284:	0043      	lsls	r3, r0, #1
 8002286:	030f      	lsls	r7, r1, #12
 8002288:	46a4      	mov	ip, r4
 800228a:	46b0      	mov	r8, r6
 800228c:	0b3f      	lsrs	r7, r7, #12
 800228e:	0d52      	lsrs	r2, r2, #21
 8002290:	0fc9      	lsrs	r1, r1, #31
 8002292:	0d5b      	lsrs	r3, r3, #21
 8002294:	0fc0      	lsrs	r0, r0, #31
 8002296:	42aa      	cmp	r2, r5
 8002298:	d00d      	beq.n	80022b6 <__ledf2+0x4a>
 800229a:	42ab      	cmp	r3, r5
 800229c:	d010      	beq.n	80022c0 <__ledf2+0x54>
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d127      	bne.n	80022f2 <__ledf2+0x86>
 80022a2:	433c      	orrs	r4, r7
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <__ledf2+0x60>
 80022a8:	464d      	mov	r5, r9
 80022aa:	432e      	orrs	r6, r5
 80022ac:	d10e      	bne.n	80022cc <__ledf2+0x60>
 80022ae:	2000      	movs	r0, #0
 80022b0:	2c00      	cmp	r4, #0
 80022b2:	d015      	beq.n	80022e0 <__ledf2+0x74>
 80022b4:	e00e      	b.n	80022d4 <__ledf2+0x68>
 80022b6:	003d      	movs	r5, r7
 80022b8:	4325      	orrs	r5, r4
 80022ba:	d110      	bne.n	80022de <__ledf2+0x72>
 80022bc:	4293      	cmp	r3, r2
 80022be:	d118      	bne.n	80022f2 <__ledf2+0x86>
 80022c0:	464d      	mov	r5, r9
 80022c2:	432e      	orrs	r6, r5
 80022c4:	d10b      	bne.n	80022de <__ledf2+0x72>
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	d102      	bne.n	80022d0 <__ledf2+0x64>
 80022ca:	433c      	orrs	r4, r7
 80022cc:	2c00      	cmp	r4, #0
 80022ce:	d00b      	beq.n	80022e8 <__ledf2+0x7c>
 80022d0:	4281      	cmp	r1, r0
 80022d2:	d014      	beq.n	80022fe <__ledf2+0x92>
 80022d4:	2002      	movs	r0, #2
 80022d6:	3901      	subs	r1, #1
 80022d8:	4008      	ands	r0, r1
 80022da:	3801      	subs	r0, #1
 80022dc:	e000      	b.n	80022e0 <__ledf2+0x74>
 80022de:	2002      	movs	r0, #2
 80022e0:	bcc0      	pop	{r6, r7}
 80022e2:	46b9      	mov	r9, r7
 80022e4:	46b0      	mov	r8, r6
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d1f9      	bne.n	80022e0 <__ledf2+0x74>
 80022ec:	2001      	movs	r0, #1
 80022ee:	4240      	negs	r0, r0
 80022f0:	e7f6      	b.n	80022e0 <__ledf2+0x74>
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ec      	bne.n	80022d0 <__ledf2+0x64>
 80022f6:	464c      	mov	r4, r9
 80022f8:	4326      	orrs	r6, r4
 80022fa:	d1e9      	bne.n	80022d0 <__ledf2+0x64>
 80022fc:	e7ea      	b.n	80022d4 <__ledf2+0x68>
 80022fe:	429a      	cmp	r2, r3
 8002300:	dd04      	ble.n	800230c <__ledf2+0xa0>
 8002302:	4243      	negs	r3, r0
 8002304:	4158      	adcs	r0, r3
 8002306:	0040      	lsls	r0, r0, #1
 8002308:	3801      	subs	r0, #1
 800230a:	e7e9      	b.n	80022e0 <__ledf2+0x74>
 800230c:	429a      	cmp	r2, r3
 800230e:	dbeb      	blt.n	80022e8 <__ledf2+0x7c>
 8002310:	454f      	cmp	r7, r9
 8002312:	d8df      	bhi.n	80022d4 <__ledf2+0x68>
 8002314:	d006      	beq.n	8002324 <__ledf2+0xb8>
 8002316:	2000      	movs	r0, #0
 8002318:	454f      	cmp	r7, r9
 800231a:	d2e1      	bcs.n	80022e0 <__ledf2+0x74>
 800231c:	2900      	cmp	r1, #0
 800231e:	d0e5      	beq.n	80022ec <__ledf2+0x80>
 8002320:	0008      	movs	r0, r1
 8002322:	e7dd      	b.n	80022e0 <__ledf2+0x74>
 8002324:	45c4      	cmp	ip, r8
 8002326:	d8d5      	bhi.n	80022d4 <__ledf2+0x68>
 8002328:	2000      	movs	r0, #0
 800232a:	45c4      	cmp	ip, r8
 800232c:	d2d8      	bcs.n	80022e0 <__ledf2+0x74>
 800232e:	e7f5      	b.n	800231c <__ledf2+0xb0>
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_dmul>:
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	4657      	mov	r7, sl
 8002338:	464e      	mov	r6, r9
 800233a:	4645      	mov	r5, r8
 800233c:	46de      	mov	lr, fp
 800233e:	b5e0      	push	{r5, r6, r7, lr}
 8002340:	4698      	mov	r8, r3
 8002342:	030c      	lsls	r4, r1, #12
 8002344:	004b      	lsls	r3, r1, #1
 8002346:	0006      	movs	r6, r0
 8002348:	4692      	mov	sl, r2
 800234a:	b087      	sub	sp, #28
 800234c:	0b24      	lsrs	r4, r4, #12
 800234e:	0d5b      	lsrs	r3, r3, #21
 8002350:	0fcf      	lsrs	r7, r1, #31
 8002352:	2b00      	cmp	r3, #0
 8002354:	d100      	bne.n	8002358 <__aeabi_dmul+0x24>
 8002356:	e15c      	b.n	8002612 <__aeabi_dmul+0x2de>
 8002358:	4ad9      	ldr	r2, [pc, #868]	; (80026c0 <__aeabi_dmul+0x38c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d100      	bne.n	8002360 <__aeabi_dmul+0x2c>
 800235e:	e175      	b.n	800264c <__aeabi_dmul+0x318>
 8002360:	0f42      	lsrs	r2, r0, #29
 8002362:	00e4      	lsls	r4, r4, #3
 8002364:	4314      	orrs	r4, r2
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	0412      	lsls	r2, r2, #16
 800236a:	4314      	orrs	r4, r2
 800236c:	4ad5      	ldr	r2, [pc, #852]	; (80026c4 <__aeabi_dmul+0x390>)
 800236e:	00c5      	lsls	r5, r0, #3
 8002370:	4694      	mov	ip, r2
 8002372:	4463      	add	r3, ip
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	4699      	mov	r9, r3
 800237a:	469b      	mov	fp, r3
 800237c:	4643      	mov	r3, r8
 800237e:	4642      	mov	r2, r8
 8002380:	031e      	lsls	r6, r3, #12
 8002382:	0fd2      	lsrs	r2, r2, #31
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4650      	mov	r0, sl
 8002388:	4690      	mov	r8, r2
 800238a:	0b36      	lsrs	r6, r6, #12
 800238c:	0d5b      	lsrs	r3, r3, #21
 800238e:	d100      	bne.n	8002392 <__aeabi_dmul+0x5e>
 8002390:	e120      	b.n	80025d4 <__aeabi_dmul+0x2a0>
 8002392:	4acb      	ldr	r2, [pc, #812]	; (80026c0 <__aeabi_dmul+0x38c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d100      	bne.n	800239a <__aeabi_dmul+0x66>
 8002398:	e162      	b.n	8002660 <__aeabi_dmul+0x32c>
 800239a:	49ca      	ldr	r1, [pc, #808]	; (80026c4 <__aeabi_dmul+0x390>)
 800239c:	0f42      	lsrs	r2, r0, #29
 800239e:	468c      	mov	ip, r1
 80023a0:	9900      	ldr	r1, [sp, #0]
 80023a2:	4463      	add	r3, ip
 80023a4:	00f6      	lsls	r6, r6, #3
 80023a6:	468c      	mov	ip, r1
 80023a8:	4316      	orrs	r6, r2
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	449c      	add	ip, r3
 80023ae:	0412      	lsls	r2, r2, #16
 80023b0:	4663      	mov	r3, ip
 80023b2:	4316      	orrs	r6, r2
 80023b4:	00c2      	lsls	r2, r0, #3
 80023b6:	2000      	movs	r0, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	9900      	ldr	r1, [sp, #0]
 80023bc:	4643      	mov	r3, r8
 80023be:	3101      	adds	r1, #1
 80023c0:	468c      	mov	ip, r1
 80023c2:	4649      	mov	r1, r9
 80023c4:	407b      	eors	r3, r7
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	290f      	cmp	r1, #15
 80023ca:	d826      	bhi.n	800241a <__aeabi_dmul+0xe6>
 80023cc:	4bbe      	ldr	r3, [pc, #760]	; (80026c8 <__aeabi_dmul+0x394>)
 80023ce:	0089      	lsls	r1, r1, #2
 80023d0:	5859      	ldr	r1, [r3, r1]
 80023d2:	468f      	mov	pc, r1
 80023d4:	4643      	mov	r3, r8
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	0034      	movs	r4, r6
 80023da:	0015      	movs	r5, r2
 80023dc:	4683      	mov	fp, r0
 80023de:	465b      	mov	r3, fp
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d016      	beq.n	8002412 <__aeabi_dmul+0xde>
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d100      	bne.n	80023ea <__aeabi_dmul+0xb6>
 80023e8:	e203      	b.n	80027f2 <__aeabi_dmul+0x4be>
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d000      	beq.n	80023f0 <__aeabi_dmul+0xbc>
 80023ee:	e0cd      	b.n	800258c <__aeabi_dmul+0x258>
 80023f0:	2200      	movs	r2, #0
 80023f2:	2400      	movs	r4, #0
 80023f4:	2500      	movs	r5, #0
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	0512      	lsls	r2, r2, #20
 80023fa:	4322      	orrs	r2, r4
 80023fc:	07db      	lsls	r3, r3, #31
 80023fe:	431a      	orrs	r2, r3
 8002400:	0028      	movs	r0, r5
 8002402:	0011      	movs	r1, r2
 8002404:	b007      	add	sp, #28
 8002406:	bcf0      	pop	{r4, r5, r6, r7}
 8002408:	46bb      	mov	fp, r7
 800240a:	46b2      	mov	sl, r6
 800240c:	46a9      	mov	r9, r5
 800240e:	46a0      	mov	r8, r4
 8002410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002412:	2400      	movs	r4, #0
 8002414:	2500      	movs	r5, #0
 8002416:	4aaa      	ldr	r2, [pc, #680]	; (80026c0 <__aeabi_dmul+0x38c>)
 8002418:	e7ed      	b.n	80023f6 <__aeabi_dmul+0xc2>
 800241a:	0c28      	lsrs	r0, r5, #16
 800241c:	042d      	lsls	r5, r5, #16
 800241e:	0c2d      	lsrs	r5, r5, #16
 8002420:	002b      	movs	r3, r5
 8002422:	0c11      	lsrs	r1, r2, #16
 8002424:	0412      	lsls	r2, r2, #16
 8002426:	0c12      	lsrs	r2, r2, #16
 8002428:	4353      	muls	r3, r2
 800242a:	4698      	mov	r8, r3
 800242c:	0013      	movs	r3, r2
 800242e:	002f      	movs	r7, r5
 8002430:	4343      	muls	r3, r0
 8002432:	4699      	mov	r9, r3
 8002434:	434f      	muls	r7, r1
 8002436:	444f      	add	r7, r9
 8002438:	46bb      	mov	fp, r7
 800243a:	4647      	mov	r7, r8
 800243c:	000b      	movs	r3, r1
 800243e:	0c3f      	lsrs	r7, r7, #16
 8002440:	46ba      	mov	sl, r7
 8002442:	4343      	muls	r3, r0
 8002444:	44da      	add	sl, fp
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	45d1      	cmp	r9, sl
 800244a:	d904      	bls.n	8002456 <__aeabi_dmul+0x122>
 800244c:	2780      	movs	r7, #128	; 0x80
 800244e:	027f      	lsls	r7, r7, #9
 8002450:	46b9      	mov	r9, r7
 8002452:	444b      	add	r3, r9
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	4653      	mov	r3, sl
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	469b      	mov	fp, r3
 800245c:	4653      	mov	r3, sl
 800245e:	041f      	lsls	r7, r3, #16
 8002460:	4643      	mov	r3, r8
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	4698      	mov	r8, r3
 8002468:	003b      	movs	r3, r7
 800246a:	4443      	add	r3, r8
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	0c33      	lsrs	r3, r6, #16
 8002470:	0436      	lsls	r6, r6, #16
 8002472:	0c36      	lsrs	r6, r6, #16
 8002474:	4698      	mov	r8, r3
 8002476:	0033      	movs	r3, r6
 8002478:	4343      	muls	r3, r0
 800247a:	4699      	mov	r9, r3
 800247c:	4643      	mov	r3, r8
 800247e:	4343      	muls	r3, r0
 8002480:	002f      	movs	r7, r5
 8002482:	469a      	mov	sl, r3
 8002484:	4643      	mov	r3, r8
 8002486:	4377      	muls	r7, r6
 8002488:	435d      	muls	r5, r3
 800248a:	0c38      	lsrs	r0, r7, #16
 800248c:	444d      	add	r5, r9
 800248e:	1945      	adds	r5, r0, r5
 8002490:	45a9      	cmp	r9, r5
 8002492:	d903      	bls.n	800249c <__aeabi_dmul+0x168>
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	025b      	lsls	r3, r3, #9
 8002498:	4699      	mov	r9, r3
 800249a:	44ca      	add	sl, r9
 800249c:	043f      	lsls	r7, r7, #16
 800249e:	0c28      	lsrs	r0, r5, #16
 80024a0:	0c3f      	lsrs	r7, r7, #16
 80024a2:	042d      	lsls	r5, r5, #16
 80024a4:	19ed      	adds	r5, r5, r7
 80024a6:	0c27      	lsrs	r7, r4, #16
 80024a8:	0424      	lsls	r4, r4, #16
 80024aa:	0c24      	lsrs	r4, r4, #16
 80024ac:	0003      	movs	r3, r0
 80024ae:	0020      	movs	r0, r4
 80024b0:	4350      	muls	r0, r2
 80024b2:	437a      	muls	r2, r7
 80024b4:	4691      	mov	r9, r2
 80024b6:	003a      	movs	r2, r7
 80024b8:	4453      	add	r3, sl
 80024ba:	9305      	str	r3, [sp, #20]
 80024bc:	0c03      	lsrs	r3, r0, #16
 80024be:	469a      	mov	sl, r3
 80024c0:	434a      	muls	r2, r1
 80024c2:	4361      	muls	r1, r4
 80024c4:	4449      	add	r1, r9
 80024c6:	4451      	add	r1, sl
 80024c8:	44ab      	add	fp, r5
 80024ca:	4589      	cmp	r9, r1
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x1a2>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444a      	add	r2, r9
 80024d6:	0400      	lsls	r0, r0, #16
 80024d8:	0c0b      	lsrs	r3, r1, #16
 80024da:	0c00      	lsrs	r0, r0, #16
 80024dc:	0409      	lsls	r1, r1, #16
 80024de:	1809      	adds	r1, r1, r0
 80024e0:	0020      	movs	r0, r4
 80024e2:	4699      	mov	r9, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	4370      	muls	r0, r6
 80024e8:	435c      	muls	r4, r3
 80024ea:	437e      	muls	r6, r7
 80024ec:	435f      	muls	r7, r3
 80024ee:	0c03      	lsrs	r3, r0, #16
 80024f0:	4698      	mov	r8, r3
 80024f2:	19a4      	adds	r4, r4, r6
 80024f4:	4444      	add	r4, r8
 80024f6:	444a      	add	r2, r9
 80024f8:	9703      	str	r7, [sp, #12]
 80024fa:	42a6      	cmp	r6, r4
 80024fc:	d904      	bls.n	8002508 <__aeabi_dmul+0x1d4>
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	4698      	mov	r8, r3
 8002504:	4447      	add	r7, r8
 8002506:	9703      	str	r7, [sp, #12]
 8002508:	0423      	lsls	r3, r4, #16
 800250a:	9e02      	ldr	r6, [sp, #8]
 800250c:	469a      	mov	sl, r3
 800250e:	9b05      	ldr	r3, [sp, #20]
 8002510:	445e      	add	r6, fp
 8002512:	4698      	mov	r8, r3
 8002514:	42ae      	cmp	r6, r5
 8002516:	41ad      	sbcs	r5, r5
 8002518:	1876      	adds	r6, r6, r1
 800251a:	428e      	cmp	r6, r1
 800251c:	4189      	sbcs	r1, r1
 800251e:	0400      	lsls	r0, r0, #16
 8002520:	0c00      	lsrs	r0, r0, #16
 8002522:	4450      	add	r0, sl
 8002524:	4440      	add	r0, r8
 8002526:	426d      	negs	r5, r5
 8002528:	1947      	adds	r7, r0, r5
 800252a:	46b8      	mov	r8, r7
 800252c:	4693      	mov	fp, r2
 800252e:	4249      	negs	r1, r1
 8002530:	4689      	mov	r9, r1
 8002532:	44c3      	add	fp, r8
 8002534:	44d9      	add	r9, fp
 8002536:	4298      	cmp	r0, r3
 8002538:	4180      	sbcs	r0, r0
 800253a:	45a8      	cmp	r8, r5
 800253c:	41ad      	sbcs	r5, r5
 800253e:	4593      	cmp	fp, r2
 8002540:	4192      	sbcs	r2, r2
 8002542:	4589      	cmp	r9, r1
 8002544:	4189      	sbcs	r1, r1
 8002546:	426d      	negs	r5, r5
 8002548:	4240      	negs	r0, r0
 800254a:	4328      	orrs	r0, r5
 800254c:	0c24      	lsrs	r4, r4, #16
 800254e:	4252      	negs	r2, r2
 8002550:	4249      	negs	r1, r1
 8002552:	430a      	orrs	r2, r1
 8002554:	9b03      	ldr	r3, [sp, #12]
 8002556:	1900      	adds	r0, r0, r4
 8002558:	1880      	adds	r0, r0, r2
 800255a:	18c7      	adds	r7, r0, r3
 800255c:	464b      	mov	r3, r9
 800255e:	0ddc      	lsrs	r4, r3, #23
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	0275      	lsls	r5, r6, #9
 8002564:	431d      	orrs	r5, r3
 8002566:	1e6a      	subs	r2, r5, #1
 8002568:	4195      	sbcs	r5, r2
 800256a:	464b      	mov	r3, r9
 800256c:	0df6      	lsrs	r6, r6, #23
 800256e:	027f      	lsls	r7, r7, #9
 8002570:	4335      	orrs	r5, r6
 8002572:	025a      	lsls	r2, r3, #9
 8002574:	433c      	orrs	r4, r7
 8002576:	4315      	orrs	r5, r2
 8002578:	01fb      	lsls	r3, r7, #7
 800257a:	d400      	bmi.n	800257e <__aeabi_dmul+0x24a>
 800257c:	e11c      	b.n	80027b8 <__aeabi_dmul+0x484>
 800257e:	2101      	movs	r1, #1
 8002580:	086a      	lsrs	r2, r5, #1
 8002582:	400d      	ands	r5, r1
 8002584:	4315      	orrs	r5, r2
 8002586:	07e2      	lsls	r2, r4, #31
 8002588:	4315      	orrs	r5, r2
 800258a:	0864      	lsrs	r4, r4, #1
 800258c:	494f      	ldr	r1, [pc, #316]	; (80026cc <__aeabi_dmul+0x398>)
 800258e:	4461      	add	r1, ip
 8002590:	2900      	cmp	r1, #0
 8002592:	dc00      	bgt.n	8002596 <__aeabi_dmul+0x262>
 8002594:	e0b0      	b.n	80026f8 <__aeabi_dmul+0x3c4>
 8002596:	076b      	lsls	r3, r5, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_dmul+0x27a>
 800259a:	220f      	movs	r2, #15
 800259c:	402a      	ands	r2, r5
 800259e:	2a04      	cmp	r2, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_dmul+0x27a>
 80025a2:	1d2a      	adds	r2, r5, #4
 80025a4:	42aa      	cmp	r2, r5
 80025a6:	41ad      	sbcs	r5, r5
 80025a8:	426d      	negs	r5, r5
 80025aa:	1964      	adds	r4, r4, r5
 80025ac:	0015      	movs	r5, r2
 80025ae:	01e3      	lsls	r3, r4, #7
 80025b0:	d504      	bpl.n	80025bc <__aeabi_dmul+0x288>
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <__aeabi_dmul+0x39c>)
 80025b6:	00c9      	lsls	r1, r1, #3
 80025b8:	4014      	ands	r4, r2
 80025ba:	4461      	add	r1, ip
 80025bc:	4a45      	ldr	r2, [pc, #276]	; (80026d4 <__aeabi_dmul+0x3a0>)
 80025be:	4291      	cmp	r1, r2
 80025c0:	dd00      	ble.n	80025c4 <__aeabi_dmul+0x290>
 80025c2:	e726      	b.n	8002412 <__aeabi_dmul+0xde>
 80025c4:	0762      	lsls	r2, r4, #29
 80025c6:	08ed      	lsrs	r5, r5, #3
 80025c8:	0264      	lsls	r4, r4, #9
 80025ca:	0549      	lsls	r1, r1, #21
 80025cc:	4315      	orrs	r5, r2
 80025ce:	0b24      	lsrs	r4, r4, #12
 80025d0:	0d4a      	lsrs	r2, r1, #21
 80025d2:	e710      	b.n	80023f6 <__aeabi_dmul+0xc2>
 80025d4:	4652      	mov	r2, sl
 80025d6:	4332      	orrs	r2, r6
 80025d8:	d100      	bne.n	80025dc <__aeabi_dmul+0x2a8>
 80025da:	e07f      	b.n	80026dc <__aeabi_dmul+0x3a8>
 80025dc:	2e00      	cmp	r6, #0
 80025de:	d100      	bne.n	80025e2 <__aeabi_dmul+0x2ae>
 80025e0:	e0dc      	b.n	800279c <__aeabi_dmul+0x468>
 80025e2:	0030      	movs	r0, r6
 80025e4:	f000 fe1e 	bl	8003224 <__clzsi2>
 80025e8:	0002      	movs	r2, r0
 80025ea:	3a0b      	subs	r2, #11
 80025ec:	231d      	movs	r3, #29
 80025ee:	0001      	movs	r1, r0
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	4652      	mov	r2, sl
 80025f4:	3908      	subs	r1, #8
 80025f6:	40da      	lsrs	r2, r3
 80025f8:	408e      	lsls	r6, r1
 80025fa:	4316      	orrs	r6, r2
 80025fc:	4652      	mov	r2, sl
 80025fe:	408a      	lsls	r2, r1
 8002600:	9b00      	ldr	r3, [sp, #0]
 8002602:	4935      	ldr	r1, [pc, #212]	; (80026d8 <__aeabi_dmul+0x3a4>)
 8002604:	1a18      	subs	r0, r3, r0
 8002606:	0003      	movs	r3, r0
 8002608:	468c      	mov	ip, r1
 800260a:	4463      	add	r3, ip
 800260c:	2000      	movs	r0, #0
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	e6d3      	b.n	80023ba <__aeabi_dmul+0x86>
 8002612:	0025      	movs	r5, r4
 8002614:	4305      	orrs	r5, r0
 8002616:	d04a      	beq.n	80026ae <__aeabi_dmul+0x37a>
 8002618:	2c00      	cmp	r4, #0
 800261a:	d100      	bne.n	800261e <__aeabi_dmul+0x2ea>
 800261c:	e0b0      	b.n	8002780 <__aeabi_dmul+0x44c>
 800261e:	0020      	movs	r0, r4
 8002620:	f000 fe00 	bl	8003224 <__clzsi2>
 8002624:	0001      	movs	r1, r0
 8002626:	0002      	movs	r2, r0
 8002628:	390b      	subs	r1, #11
 800262a:	231d      	movs	r3, #29
 800262c:	0010      	movs	r0, r2
 800262e:	1a5b      	subs	r3, r3, r1
 8002630:	0031      	movs	r1, r6
 8002632:	0035      	movs	r5, r6
 8002634:	3808      	subs	r0, #8
 8002636:	4084      	lsls	r4, r0
 8002638:	40d9      	lsrs	r1, r3
 800263a:	4085      	lsls	r5, r0
 800263c:	430c      	orrs	r4, r1
 800263e:	4826      	ldr	r0, [pc, #152]	; (80026d8 <__aeabi_dmul+0x3a4>)
 8002640:	1a83      	subs	r3, r0, r2
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	4699      	mov	r9, r3
 8002648:	469b      	mov	fp, r3
 800264a:	e697      	b.n	800237c <__aeabi_dmul+0x48>
 800264c:	0005      	movs	r5, r0
 800264e:	4325      	orrs	r5, r4
 8002650:	d126      	bne.n	80026a0 <__aeabi_dmul+0x36c>
 8002652:	2208      	movs	r2, #8
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2302      	movs	r3, #2
 8002658:	2400      	movs	r4, #0
 800265a:	4691      	mov	r9, r2
 800265c:	469b      	mov	fp, r3
 800265e:	e68d      	b.n	800237c <__aeabi_dmul+0x48>
 8002660:	4652      	mov	r2, sl
 8002662:	9b00      	ldr	r3, [sp, #0]
 8002664:	4332      	orrs	r2, r6
 8002666:	d110      	bne.n	800268a <__aeabi_dmul+0x356>
 8002668:	4915      	ldr	r1, [pc, #84]	; (80026c0 <__aeabi_dmul+0x38c>)
 800266a:	2600      	movs	r6, #0
 800266c:	468c      	mov	ip, r1
 800266e:	4463      	add	r3, ip
 8002670:	4649      	mov	r1, r9
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2302      	movs	r3, #2
 8002676:	4319      	orrs	r1, r3
 8002678:	4689      	mov	r9, r1
 800267a:	2002      	movs	r0, #2
 800267c:	e69d      	b.n	80023ba <__aeabi_dmul+0x86>
 800267e:	465b      	mov	r3, fp
 8002680:	9701      	str	r7, [sp, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d000      	beq.n	8002688 <__aeabi_dmul+0x354>
 8002686:	e6ad      	b.n	80023e4 <__aeabi_dmul+0xb0>
 8002688:	e6c3      	b.n	8002412 <__aeabi_dmul+0xde>
 800268a:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <__aeabi_dmul+0x38c>)
 800268c:	2003      	movs	r0, #3
 800268e:	4694      	mov	ip, r2
 8002690:	4463      	add	r3, ip
 8002692:	464a      	mov	r2, r9
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2303      	movs	r3, #3
 8002698:	431a      	orrs	r2, r3
 800269a:	4691      	mov	r9, r2
 800269c:	4652      	mov	r2, sl
 800269e:	e68c      	b.n	80023ba <__aeabi_dmul+0x86>
 80026a0:	220c      	movs	r2, #12
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2303      	movs	r3, #3
 80026a6:	0005      	movs	r5, r0
 80026a8:	4691      	mov	r9, r2
 80026aa:	469b      	mov	fp, r3
 80026ac:	e666      	b.n	800237c <__aeabi_dmul+0x48>
 80026ae:	2304      	movs	r3, #4
 80026b0:	4699      	mov	r9, r3
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	2400      	movs	r4, #0
 80026ba:	469b      	mov	fp, r3
 80026bc:	e65e      	b.n	800237c <__aeabi_dmul+0x48>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	000007ff 	.word	0x000007ff
 80026c4:	fffffc01 	.word	0xfffffc01
 80026c8:	0800b5a8 	.word	0x0800b5a8
 80026cc:	000003ff 	.word	0x000003ff
 80026d0:	feffffff 	.word	0xfeffffff
 80026d4:	000007fe 	.word	0x000007fe
 80026d8:	fffffc0d 	.word	0xfffffc0d
 80026dc:	4649      	mov	r1, r9
 80026de:	2301      	movs	r3, #1
 80026e0:	4319      	orrs	r1, r3
 80026e2:	4689      	mov	r9, r1
 80026e4:	2600      	movs	r6, #0
 80026e6:	2001      	movs	r0, #1
 80026e8:	e667      	b.n	80023ba <__aeabi_dmul+0x86>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2480      	movs	r4, #128	; 0x80
 80026ee:	2500      	movs	r5, #0
 80026f0:	4a43      	ldr	r2, [pc, #268]	; (8002800 <__aeabi_dmul+0x4cc>)
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	0324      	lsls	r4, r4, #12
 80026f6:	e67e      	b.n	80023f6 <__aeabi_dmul+0xc2>
 80026f8:	2001      	movs	r0, #1
 80026fa:	1a40      	subs	r0, r0, r1
 80026fc:	2838      	cmp	r0, #56	; 0x38
 80026fe:	dd00      	ble.n	8002702 <__aeabi_dmul+0x3ce>
 8002700:	e676      	b.n	80023f0 <__aeabi_dmul+0xbc>
 8002702:	281f      	cmp	r0, #31
 8002704:	dd5b      	ble.n	80027be <__aeabi_dmul+0x48a>
 8002706:	221f      	movs	r2, #31
 8002708:	0023      	movs	r3, r4
 800270a:	4252      	negs	r2, r2
 800270c:	1a51      	subs	r1, r2, r1
 800270e:	40cb      	lsrs	r3, r1
 8002710:	0019      	movs	r1, r3
 8002712:	2820      	cmp	r0, #32
 8002714:	d003      	beq.n	800271e <__aeabi_dmul+0x3ea>
 8002716:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <__aeabi_dmul+0x4d0>)
 8002718:	4462      	add	r2, ip
 800271a:	4094      	lsls	r4, r2
 800271c:	4325      	orrs	r5, r4
 800271e:	1e6a      	subs	r2, r5, #1
 8002720:	4195      	sbcs	r5, r2
 8002722:	002a      	movs	r2, r5
 8002724:	430a      	orrs	r2, r1
 8002726:	2107      	movs	r1, #7
 8002728:	000d      	movs	r5, r1
 800272a:	2400      	movs	r4, #0
 800272c:	4015      	ands	r5, r2
 800272e:	4211      	tst	r1, r2
 8002730:	d05b      	beq.n	80027ea <__aeabi_dmul+0x4b6>
 8002732:	210f      	movs	r1, #15
 8002734:	2400      	movs	r4, #0
 8002736:	4011      	ands	r1, r2
 8002738:	2904      	cmp	r1, #4
 800273a:	d053      	beq.n	80027e4 <__aeabi_dmul+0x4b0>
 800273c:	1d11      	adds	r1, r2, #4
 800273e:	4291      	cmp	r1, r2
 8002740:	4192      	sbcs	r2, r2
 8002742:	4252      	negs	r2, r2
 8002744:	18a4      	adds	r4, r4, r2
 8002746:	000a      	movs	r2, r1
 8002748:	0223      	lsls	r3, r4, #8
 800274a:	d54b      	bpl.n	80027e4 <__aeabi_dmul+0x4b0>
 800274c:	2201      	movs	r2, #1
 800274e:	2400      	movs	r4, #0
 8002750:	2500      	movs	r5, #0
 8002752:	e650      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	031b      	lsls	r3, r3, #12
 8002758:	421c      	tst	r4, r3
 800275a:	d009      	beq.n	8002770 <__aeabi_dmul+0x43c>
 800275c:	421e      	tst	r6, r3
 800275e:	d107      	bne.n	8002770 <__aeabi_dmul+0x43c>
 8002760:	4333      	orrs	r3, r6
 8002762:	031c      	lsls	r4, r3, #12
 8002764:	4643      	mov	r3, r8
 8002766:	0015      	movs	r5, r2
 8002768:	0b24      	lsrs	r4, r4, #12
 800276a:	4a25      	ldr	r2, [pc, #148]	; (8002800 <__aeabi_dmul+0x4cc>)
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	e642      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	0312      	lsls	r2, r2, #12
 8002774:	4314      	orrs	r4, r2
 8002776:	0324      	lsls	r4, r4, #12
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <__aeabi_dmul+0x4cc>)
 800277a:	0b24      	lsrs	r4, r4, #12
 800277c:	9701      	str	r7, [sp, #4]
 800277e:	e63a      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002780:	f000 fd50 	bl	8003224 <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0002      	movs	r2, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3220      	adds	r2, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dc00      	bgt.n	8002792 <__aeabi_dmul+0x45e>
 8002790:	e74b      	b.n	800262a <__aeabi_dmul+0x2f6>
 8002792:	0034      	movs	r4, r6
 8002794:	3808      	subs	r0, #8
 8002796:	2500      	movs	r5, #0
 8002798:	4084      	lsls	r4, r0
 800279a:	e750      	b.n	800263e <__aeabi_dmul+0x30a>
 800279c:	f000 fd42 	bl	8003224 <__clzsi2>
 80027a0:	0003      	movs	r3, r0
 80027a2:	001a      	movs	r2, r3
 80027a4:	3215      	adds	r2, #21
 80027a6:	3020      	adds	r0, #32
 80027a8:	2a1c      	cmp	r2, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x47a>
 80027ac:	e71e      	b.n	80025ec <__aeabi_dmul+0x2b8>
 80027ae:	4656      	mov	r6, sl
 80027b0:	3b08      	subs	r3, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	409e      	lsls	r6, r3
 80027b6:	e723      	b.n	8002600 <__aeabi_dmul+0x2cc>
 80027b8:	9b00      	ldr	r3, [sp, #0]
 80027ba:	469c      	mov	ip, r3
 80027bc:	e6e6      	b.n	800258c <__aeabi_dmul+0x258>
 80027be:	4912      	ldr	r1, [pc, #72]	; (8002808 <__aeabi_dmul+0x4d4>)
 80027c0:	0022      	movs	r2, r4
 80027c2:	4461      	add	r1, ip
 80027c4:	002e      	movs	r6, r5
 80027c6:	408d      	lsls	r5, r1
 80027c8:	408a      	lsls	r2, r1
 80027ca:	40c6      	lsrs	r6, r0
 80027cc:	1e69      	subs	r1, r5, #1
 80027ce:	418d      	sbcs	r5, r1
 80027d0:	4332      	orrs	r2, r6
 80027d2:	432a      	orrs	r2, r5
 80027d4:	40c4      	lsrs	r4, r0
 80027d6:	0753      	lsls	r3, r2, #29
 80027d8:	d0b6      	beq.n	8002748 <__aeabi_dmul+0x414>
 80027da:	210f      	movs	r1, #15
 80027dc:	4011      	ands	r1, r2
 80027de:	2904      	cmp	r1, #4
 80027e0:	d1ac      	bne.n	800273c <__aeabi_dmul+0x408>
 80027e2:	e7b1      	b.n	8002748 <__aeabi_dmul+0x414>
 80027e4:	0765      	lsls	r5, r4, #29
 80027e6:	0264      	lsls	r4, r4, #9
 80027e8:	0b24      	lsrs	r4, r4, #12
 80027ea:	08d2      	lsrs	r2, r2, #3
 80027ec:	4315      	orrs	r5, r2
 80027ee:	2200      	movs	r2, #0
 80027f0:	e601      	b.n	80023f6 <__aeabi_dmul+0xc2>
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	0312      	lsls	r2, r2, #12
 80027f6:	4314      	orrs	r4, r2
 80027f8:	0324      	lsls	r4, r4, #12
 80027fa:	4a01      	ldr	r2, [pc, #4]	; (8002800 <__aeabi_dmul+0x4cc>)
 80027fc:	0b24      	lsrs	r4, r4, #12
 80027fe:	e5fa      	b.n	80023f6 <__aeabi_dmul+0xc2>
 8002800:	000007ff 	.word	0x000007ff
 8002804:	0000043e 	.word	0x0000043e
 8002808:	0000041e 	.word	0x0000041e

0800280c <__aeabi_dsub>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	4657      	mov	r7, sl
 8002810:	464e      	mov	r6, r9
 8002812:	4645      	mov	r5, r8
 8002814:	46de      	mov	lr, fp
 8002816:	b5e0      	push	{r5, r6, r7, lr}
 8002818:	001e      	movs	r6, r3
 800281a:	0017      	movs	r7, r2
 800281c:	004a      	lsls	r2, r1, #1
 800281e:	030b      	lsls	r3, r1, #12
 8002820:	0d52      	lsrs	r2, r2, #21
 8002822:	0a5b      	lsrs	r3, r3, #9
 8002824:	4690      	mov	r8, r2
 8002826:	0f42      	lsrs	r2, r0, #29
 8002828:	431a      	orrs	r2, r3
 800282a:	0fcd      	lsrs	r5, r1, #31
 800282c:	4ccd      	ldr	r4, [pc, #820]	; (8002b64 <__aeabi_dsub+0x358>)
 800282e:	0331      	lsls	r1, r6, #12
 8002830:	00c3      	lsls	r3, r0, #3
 8002832:	4694      	mov	ip, r2
 8002834:	0070      	lsls	r0, r6, #1
 8002836:	0f7a      	lsrs	r2, r7, #29
 8002838:	0a49      	lsrs	r1, r1, #9
 800283a:	00ff      	lsls	r7, r7, #3
 800283c:	469a      	mov	sl, r3
 800283e:	46b9      	mov	r9, r7
 8002840:	0d40      	lsrs	r0, r0, #21
 8002842:	0ff6      	lsrs	r6, r6, #31
 8002844:	4311      	orrs	r1, r2
 8002846:	42a0      	cmp	r0, r4
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x40>
 800284a:	e0b1      	b.n	80029b0 <__aeabi_dsub+0x1a4>
 800284c:	2201      	movs	r2, #1
 800284e:	4056      	eors	r6, r2
 8002850:	46b3      	mov	fp, r6
 8002852:	42b5      	cmp	r5, r6
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x4c>
 8002856:	e088      	b.n	800296a <__aeabi_dsub+0x15e>
 8002858:	4642      	mov	r2, r8
 800285a:	1a12      	subs	r2, r2, r0
 800285c:	2a00      	cmp	r2, #0
 800285e:	dc00      	bgt.n	8002862 <__aeabi_dsub+0x56>
 8002860:	e0ae      	b.n	80029c0 <__aeabi_dsub+0x1b4>
 8002862:	2800      	cmp	r0, #0
 8002864:	d100      	bne.n	8002868 <__aeabi_dsub+0x5c>
 8002866:	e0c1      	b.n	80029ec <__aeabi_dsub+0x1e0>
 8002868:	48be      	ldr	r0, [pc, #760]	; (8002b64 <__aeabi_dsub+0x358>)
 800286a:	4580      	cmp	r8, r0
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x64>
 800286e:	e151      	b.n	8002b14 <__aeabi_dsub+0x308>
 8002870:	2080      	movs	r0, #128	; 0x80
 8002872:	0400      	lsls	r0, r0, #16
 8002874:	4301      	orrs	r1, r0
 8002876:	2a38      	cmp	r2, #56	; 0x38
 8002878:	dd00      	ble.n	800287c <__aeabi_dsub+0x70>
 800287a:	e17b      	b.n	8002b74 <__aeabi_dsub+0x368>
 800287c:	2a1f      	cmp	r2, #31
 800287e:	dd00      	ble.n	8002882 <__aeabi_dsub+0x76>
 8002880:	e1ee      	b.n	8002c60 <__aeabi_dsub+0x454>
 8002882:	2020      	movs	r0, #32
 8002884:	003e      	movs	r6, r7
 8002886:	1a80      	subs	r0, r0, r2
 8002888:	000c      	movs	r4, r1
 800288a:	40d6      	lsrs	r6, r2
 800288c:	40d1      	lsrs	r1, r2
 800288e:	4087      	lsls	r7, r0
 8002890:	4662      	mov	r2, ip
 8002892:	4084      	lsls	r4, r0
 8002894:	1a52      	subs	r2, r2, r1
 8002896:	1e78      	subs	r0, r7, #1
 8002898:	4187      	sbcs	r7, r0
 800289a:	4694      	mov	ip, r2
 800289c:	4334      	orrs	r4, r6
 800289e:	4327      	orrs	r7, r4
 80028a0:	1bdc      	subs	r4, r3, r7
 80028a2:	42a3      	cmp	r3, r4
 80028a4:	419b      	sbcs	r3, r3
 80028a6:	4662      	mov	r2, ip
 80028a8:	425b      	negs	r3, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	4699      	mov	r9, r3
 80028ae:	464b      	mov	r3, r9
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	d400      	bmi.n	80028b6 <__aeabi_dsub+0xaa>
 80028b4:	e118      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 80028b6:	464b      	mov	r3, r9
 80028b8:	0258      	lsls	r0, r3, #9
 80028ba:	0a43      	lsrs	r3, r0, #9
 80028bc:	4699      	mov	r9, r3
 80028be:	464b      	mov	r3, r9
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0xba>
 80028c4:	e137      	b.n	8002b36 <__aeabi_dsub+0x32a>
 80028c6:	4648      	mov	r0, r9
 80028c8:	f000 fcac 	bl	8003224 <__clzsi2>
 80028cc:	0001      	movs	r1, r0
 80028ce:	3908      	subs	r1, #8
 80028d0:	2320      	movs	r3, #32
 80028d2:	0022      	movs	r2, r4
 80028d4:	4648      	mov	r0, r9
 80028d6:	1a5b      	subs	r3, r3, r1
 80028d8:	40da      	lsrs	r2, r3
 80028da:	4088      	lsls	r0, r1
 80028dc:	408c      	lsls	r4, r1
 80028de:	4643      	mov	r3, r8
 80028e0:	4310      	orrs	r0, r2
 80028e2:	4588      	cmp	r8, r1
 80028e4:	dd00      	ble.n	80028e8 <__aeabi_dsub+0xdc>
 80028e6:	e136      	b.n	8002b56 <__aeabi_dsub+0x34a>
 80028e8:	1ac9      	subs	r1, r1, r3
 80028ea:	1c4b      	adds	r3, r1, #1
 80028ec:	2b1f      	cmp	r3, #31
 80028ee:	dd00      	ble.n	80028f2 <__aeabi_dsub+0xe6>
 80028f0:	e0ea      	b.n	8002ac8 <__aeabi_dsub+0x2bc>
 80028f2:	2220      	movs	r2, #32
 80028f4:	0026      	movs	r6, r4
 80028f6:	1ad2      	subs	r2, r2, r3
 80028f8:	0001      	movs	r1, r0
 80028fa:	4094      	lsls	r4, r2
 80028fc:	40de      	lsrs	r6, r3
 80028fe:	40d8      	lsrs	r0, r3
 8002900:	2300      	movs	r3, #0
 8002902:	4091      	lsls	r1, r2
 8002904:	1e62      	subs	r2, r4, #1
 8002906:	4194      	sbcs	r4, r2
 8002908:	4681      	mov	r9, r0
 800290a:	4698      	mov	r8, r3
 800290c:	4331      	orrs	r1, r6
 800290e:	430c      	orrs	r4, r1
 8002910:	0763      	lsls	r3, r4, #29
 8002912:	d009      	beq.n	8002928 <__aeabi_dsub+0x11c>
 8002914:	230f      	movs	r3, #15
 8002916:	4023      	ands	r3, r4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d005      	beq.n	8002928 <__aeabi_dsub+0x11c>
 800291c:	1d23      	adds	r3, r4, #4
 800291e:	42a3      	cmp	r3, r4
 8002920:	41a4      	sbcs	r4, r4
 8002922:	4264      	negs	r4, r4
 8002924:	44a1      	add	r9, r4
 8002926:	001c      	movs	r4, r3
 8002928:	464b      	mov	r3, r9
 800292a:	021b      	lsls	r3, r3, #8
 800292c:	d400      	bmi.n	8002930 <__aeabi_dsub+0x124>
 800292e:	e0de      	b.n	8002aee <__aeabi_dsub+0x2e2>
 8002930:	4641      	mov	r1, r8
 8002932:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <__aeabi_dsub+0x358>)
 8002934:	3101      	adds	r1, #1
 8002936:	4299      	cmp	r1, r3
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x130>
 800293a:	e0e7      	b.n	8002b0c <__aeabi_dsub+0x300>
 800293c:	464b      	mov	r3, r9
 800293e:	488a      	ldr	r0, [pc, #552]	; (8002b68 <__aeabi_dsub+0x35c>)
 8002940:	08e4      	lsrs	r4, r4, #3
 8002942:	4003      	ands	r3, r0
 8002944:	0018      	movs	r0, r3
 8002946:	0549      	lsls	r1, r1, #21
 8002948:	075b      	lsls	r3, r3, #29
 800294a:	0240      	lsls	r0, r0, #9
 800294c:	4323      	orrs	r3, r4
 800294e:	0d4a      	lsrs	r2, r1, #21
 8002950:	0b04      	lsrs	r4, r0, #12
 8002952:	0512      	lsls	r2, r2, #20
 8002954:	07ed      	lsls	r5, r5, #31
 8002956:	4322      	orrs	r2, r4
 8002958:	432a      	orrs	r2, r5
 800295a:	0018      	movs	r0, r3
 800295c:	0011      	movs	r1, r2
 800295e:	bcf0      	pop	{r4, r5, r6, r7}
 8002960:	46bb      	mov	fp, r7
 8002962:	46b2      	mov	sl, r6
 8002964:	46a9      	mov	r9, r5
 8002966:	46a0      	mov	r8, r4
 8002968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296a:	4642      	mov	r2, r8
 800296c:	1a12      	subs	r2, r2, r0
 800296e:	2a00      	cmp	r2, #0
 8002970:	dd52      	ble.n	8002a18 <__aeabi_dsub+0x20c>
 8002972:	2800      	cmp	r0, #0
 8002974:	d100      	bne.n	8002978 <__aeabi_dsub+0x16c>
 8002976:	e09c      	b.n	8002ab2 <__aeabi_dsub+0x2a6>
 8002978:	45a0      	cmp	r8, r4
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0x172>
 800297c:	e0ca      	b.n	8002b14 <__aeabi_dsub+0x308>
 800297e:	2080      	movs	r0, #128	; 0x80
 8002980:	0400      	lsls	r0, r0, #16
 8002982:	4301      	orrs	r1, r0
 8002984:	2a38      	cmp	r2, #56	; 0x38
 8002986:	dd00      	ble.n	800298a <__aeabi_dsub+0x17e>
 8002988:	e149      	b.n	8002c1e <__aeabi_dsub+0x412>
 800298a:	2a1f      	cmp	r2, #31
 800298c:	dc00      	bgt.n	8002990 <__aeabi_dsub+0x184>
 800298e:	e197      	b.n	8002cc0 <__aeabi_dsub+0x4b4>
 8002990:	0010      	movs	r0, r2
 8002992:	000e      	movs	r6, r1
 8002994:	3820      	subs	r0, #32
 8002996:	40c6      	lsrs	r6, r0
 8002998:	2a20      	cmp	r2, #32
 800299a:	d004      	beq.n	80029a6 <__aeabi_dsub+0x19a>
 800299c:	2040      	movs	r0, #64	; 0x40
 800299e:	1a82      	subs	r2, r0, r2
 80029a0:	4091      	lsls	r1, r2
 80029a2:	430f      	orrs	r7, r1
 80029a4:	46b9      	mov	r9, r7
 80029a6:	464c      	mov	r4, r9
 80029a8:	1e62      	subs	r2, r4, #1
 80029aa:	4194      	sbcs	r4, r2
 80029ac:	4334      	orrs	r4, r6
 80029ae:	e13a      	b.n	8002c26 <__aeabi_dsub+0x41a>
 80029b0:	000a      	movs	r2, r1
 80029b2:	433a      	orrs	r2, r7
 80029b4:	d028      	beq.n	8002a08 <__aeabi_dsub+0x1fc>
 80029b6:	46b3      	mov	fp, r6
 80029b8:	42b5      	cmp	r5, r6
 80029ba:	d02b      	beq.n	8002a14 <__aeabi_dsub+0x208>
 80029bc:	4a6b      	ldr	r2, [pc, #428]	; (8002b6c <__aeabi_dsub+0x360>)
 80029be:	4442      	add	r2, r8
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	d05d      	beq.n	8002a80 <__aeabi_dsub+0x274>
 80029c4:	4642      	mov	r2, r8
 80029c6:	4644      	mov	r4, r8
 80029c8:	1a82      	subs	r2, r0, r2
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	d000      	beq.n	80029d0 <__aeabi_dsub+0x1c4>
 80029ce:	e0f5      	b.n	8002bbc <__aeabi_dsub+0x3b0>
 80029d0:	4665      	mov	r5, ip
 80029d2:	431d      	orrs	r5, r3
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x1cc>
 80029d6:	e19c      	b.n	8002d12 <__aeabi_dsub+0x506>
 80029d8:	1e55      	subs	r5, r2, #1
 80029da:	2a01      	cmp	r2, #1
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x1d4>
 80029de:	e1fb      	b.n	8002dd8 <__aeabi_dsub+0x5cc>
 80029e0:	4c60      	ldr	r4, [pc, #384]	; (8002b64 <__aeabi_dsub+0x358>)
 80029e2:	42a2      	cmp	r2, r4
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x1dc>
 80029e6:	e1bd      	b.n	8002d64 <__aeabi_dsub+0x558>
 80029e8:	002a      	movs	r2, r5
 80029ea:	e0f0      	b.n	8002bce <__aeabi_dsub+0x3c2>
 80029ec:	0008      	movs	r0, r1
 80029ee:	4338      	orrs	r0, r7
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dsub+0x1e8>
 80029f2:	e0c3      	b.n	8002b7c <__aeabi_dsub+0x370>
 80029f4:	1e50      	subs	r0, r2, #1
 80029f6:	2a01      	cmp	r2, #1
 80029f8:	d100      	bne.n	80029fc <__aeabi_dsub+0x1f0>
 80029fa:	e1a8      	b.n	8002d4e <__aeabi_dsub+0x542>
 80029fc:	4c59      	ldr	r4, [pc, #356]	; (8002b64 <__aeabi_dsub+0x358>)
 80029fe:	42a2      	cmp	r2, r4
 8002a00:	d100      	bne.n	8002a04 <__aeabi_dsub+0x1f8>
 8002a02:	e087      	b.n	8002b14 <__aeabi_dsub+0x308>
 8002a04:	0002      	movs	r2, r0
 8002a06:	e736      	b.n	8002876 <__aeabi_dsub+0x6a>
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4056      	eors	r6, r2
 8002a0c:	46b3      	mov	fp, r6
 8002a0e:	42b5      	cmp	r5, r6
 8002a10:	d000      	beq.n	8002a14 <__aeabi_dsub+0x208>
 8002a12:	e721      	b.n	8002858 <__aeabi_dsub+0x4c>
 8002a14:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <__aeabi_dsub+0x360>)
 8002a16:	4442      	add	r2, r8
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dsub+0x212>
 8002a1c:	e0b5      	b.n	8002b8a <__aeabi_dsub+0x37e>
 8002a1e:	4642      	mov	r2, r8
 8002a20:	4644      	mov	r4, r8
 8002a22:	1a82      	subs	r2, r0, r2
 8002a24:	2c00      	cmp	r4, #0
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dsub+0x21e>
 8002a28:	e138      	b.n	8002c9c <__aeabi_dsub+0x490>
 8002a2a:	4e4e      	ldr	r6, [pc, #312]	; (8002b64 <__aeabi_dsub+0x358>)
 8002a2c:	42b0      	cmp	r0, r6
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x226>
 8002a30:	e1de      	b.n	8002df0 <__aeabi_dsub+0x5e4>
 8002a32:	2680      	movs	r6, #128	; 0x80
 8002a34:	4664      	mov	r4, ip
 8002a36:	0436      	lsls	r6, r6, #16
 8002a38:	4334      	orrs	r4, r6
 8002a3a:	46a4      	mov	ip, r4
 8002a3c:	2a38      	cmp	r2, #56	; 0x38
 8002a3e:	dd00      	ble.n	8002a42 <__aeabi_dsub+0x236>
 8002a40:	e196      	b.n	8002d70 <__aeabi_dsub+0x564>
 8002a42:	2a1f      	cmp	r2, #31
 8002a44:	dd00      	ble.n	8002a48 <__aeabi_dsub+0x23c>
 8002a46:	e224      	b.n	8002e92 <__aeabi_dsub+0x686>
 8002a48:	2620      	movs	r6, #32
 8002a4a:	1ab4      	subs	r4, r6, r2
 8002a4c:	46a2      	mov	sl, r4
 8002a4e:	4664      	mov	r4, ip
 8002a50:	4656      	mov	r6, sl
 8002a52:	40b4      	lsls	r4, r6
 8002a54:	46a1      	mov	r9, r4
 8002a56:	001c      	movs	r4, r3
 8002a58:	464e      	mov	r6, r9
 8002a5a:	40d4      	lsrs	r4, r2
 8002a5c:	4326      	orrs	r6, r4
 8002a5e:	0034      	movs	r4, r6
 8002a60:	4656      	mov	r6, sl
 8002a62:	40b3      	lsls	r3, r6
 8002a64:	1e5e      	subs	r6, r3, #1
 8002a66:	41b3      	sbcs	r3, r6
 8002a68:	431c      	orrs	r4, r3
 8002a6a:	4663      	mov	r3, ip
 8002a6c:	40d3      	lsrs	r3, r2
 8002a6e:	18c9      	adds	r1, r1, r3
 8002a70:	19e4      	adds	r4, r4, r7
 8002a72:	42bc      	cmp	r4, r7
 8002a74:	41bf      	sbcs	r7, r7
 8002a76:	427f      	negs	r7, r7
 8002a78:	46b9      	mov	r9, r7
 8002a7a:	4680      	mov	r8, r0
 8002a7c:	4489      	add	r9, r1
 8002a7e:	e0d8      	b.n	8002c32 <__aeabi_dsub+0x426>
 8002a80:	4640      	mov	r0, r8
 8002a82:	4c3b      	ldr	r4, [pc, #236]	; (8002b70 <__aeabi_dsub+0x364>)
 8002a84:	3001      	adds	r0, #1
 8002a86:	4220      	tst	r0, r4
 8002a88:	d000      	beq.n	8002a8c <__aeabi_dsub+0x280>
 8002a8a:	e0b4      	b.n	8002bf6 <__aeabi_dsub+0x3ea>
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d000      	beq.n	8002a94 <__aeabi_dsub+0x288>
 8002a92:	e144      	b.n	8002d1e <__aeabi_dsub+0x512>
 8002a94:	4660      	mov	r0, ip
 8002a96:	4318      	orrs	r0, r3
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x290>
 8002a9a:	e190      	b.n	8002dbe <__aeabi_dsub+0x5b2>
 8002a9c:	0008      	movs	r0, r1
 8002a9e:	4338      	orrs	r0, r7
 8002aa0:	d000      	beq.n	8002aa4 <__aeabi_dsub+0x298>
 8002aa2:	e1aa      	b.n	8002dfa <__aeabi_dsub+0x5ee>
 8002aa4:	4661      	mov	r1, ip
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	0749      	lsls	r1, r1, #29
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	4661      	mov	r1, ip
 8002aae:	08cc      	lsrs	r4, r1, #3
 8002ab0:	e027      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002ab2:	0008      	movs	r0, r1
 8002ab4:	4338      	orrs	r0, r7
 8002ab6:	d061      	beq.n	8002b7c <__aeabi_dsub+0x370>
 8002ab8:	1e50      	subs	r0, r2, #1
 8002aba:	2a01      	cmp	r2, #1
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x2b4>
 8002abe:	e139      	b.n	8002d34 <__aeabi_dsub+0x528>
 8002ac0:	42a2      	cmp	r2, r4
 8002ac2:	d027      	beq.n	8002b14 <__aeabi_dsub+0x308>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	e75d      	b.n	8002984 <__aeabi_dsub+0x178>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	391f      	subs	r1, #31
 8002acc:	40ca      	lsrs	r2, r1
 8002ace:	0011      	movs	r1, r2
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d003      	beq.n	8002adc <__aeabi_dsub+0x2d0>
 8002ad4:	2240      	movs	r2, #64	; 0x40
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	4098      	lsls	r0, r3
 8002ada:	4304      	orrs	r4, r0
 8002adc:	1e63      	subs	r3, r4, #1
 8002ade:	419c      	sbcs	r4, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	4699      	mov	r9, r3
 8002ae4:	4698      	mov	r8, r3
 8002ae6:	430c      	orrs	r4, r1
 8002ae8:	0763      	lsls	r3, r4, #29
 8002aea:	d000      	beq.n	8002aee <__aeabi_dsub+0x2e2>
 8002aec:	e712      	b.n	8002914 <__aeabi_dsub+0x108>
 8002aee:	464b      	mov	r3, r9
 8002af0:	464a      	mov	r2, r9
 8002af2:	08e4      	lsrs	r4, r4, #3
 8002af4:	075b      	lsls	r3, r3, #29
 8002af6:	4323      	orrs	r3, r4
 8002af8:	08d4      	lsrs	r4, r2, #3
 8002afa:	4642      	mov	r2, r8
 8002afc:	4919      	ldr	r1, [pc, #100]	; (8002b64 <__aeabi_dsub+0x358>)
 8002afe:	428a      	cmp	r2, r1
 8002b00:	d00e      	beq.n	8002b20 <__aeabi_dsub+0x314>
 8002b02:	0324      	lsls	r4, r4, #12
 8002b04:	0552      	lsls	r2, r2, #21
 8002b06:	0b24      	lsrs	r4, r4, #12
 8002b08:	0d52      	lsrs	r2, r2, #21
 8002b0a:	e722      	b.n	8002952 <__aeabi_dsub+0x146>
 8002b0c:	000a      	movs	r2, r1
 8002b0e:	2400      	movs	r4, #0
 8002b10:	2300      	movs	r3, #0
 8002b12:	e71e      	b.n	8002952 <__aeabi_dsub+0x146>
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	4662      	mov	r2, ip
 8002b18:	0752      	lsls	r2, r2, #29
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	4662      	mov	r2, ip
 8002b1e:	08d4      	lsrs	r4, r2, #3
 8002b20:	001a      	movs	r2, r3
 8002b22:	4322      	orrs	r2, r4
 8002b24:	d100      	bne.n	8002b28 <__aeabi_dsub+0x31c>
 8002b26:	e1fc      	b.n	8002f22 <__aeabi_dsub+0x716>
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	0312      	lsls	r2, r2, #12
 8002b2c:	4314      	orrs	r4, r2
 8002b2e:	0324      	lsls	r4, r4, #12
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <__aeabi_dsub+0x358>)
 8002b32:	0b24      	lsrs	r4, r4, #12
 8002b34:	e70d      	b.n	8002952 <__aeabi_dsub+0x146>
 8002b36:	0020      	movs	r0, r4
 8002b38:	f000 fb74 	bl	8003224 <__clzsi2>
 8002b3c:	0001      	movs	r1, r0
 8002b3e:	3118      	adds	r1, #24
 8002b40:	291f      	cmp	r1, #31
 8002b42:	dc00      	bgt.n	8002b46 <__aeabi_dsub+0x33a>
 8002b44:	e6c4      	b.n	80028d0 <__aeabi_dsub+0xc4>
 8002b46:	3808      	subs	r0, #8
 8002b48:	4084      	lsls	r4, r0
 8002b4a:	4643      	mov	r3, r8
 8002b4c:	0020      	movs	r0, r4
 8002b4e:	2400      	movs	r4, #0
 8002b50:	4588      	cmp	r8, r1
 8002b52:	dc00      	bgt.n	8002b56 <__aeabi_dsub+0x34a>
 8002b54:	e6c8      	b.n	80028e8 <__aeabi_dsub+0xdc>
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__aeabi_dsub+0x35c>)
 8002b58:	1a5b      	subs	r3, r3, r1
 8002b5a:	4010      	ands	r0, r2
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	4681      	mov	r9, r0
 8002b60:	e6d6      	b.n	8002910 <__aeabi_dsub+0x104>
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	000007ff 	.word	0x000007ff
 8002b68:	ff7fffff 	.word	0xff7fffff
 8002b6c:	fffff801 	.word	0xfffff801
 8002b70:	000007fe 	.word	0x000007fe
 8002b74:	430f      	orrs	r7, r1
 8002b76:	1e7a      	subs	r2, r7, #1
 8002b78:	4197      	sbcs	r7, r2
 8002b7a:	e691      	b.n	80028a0 <__aeabi_dsub+0x94>
 8002b7c:	4661      	mov	r1, ip
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	0749      	lsls	r1, r1, #29
 8002b82:	430b      	orrs	r3, r1
 8002b84:	4661      	mov	r1, ip
 8002b86:	08cc      	lsrs	r4, r1, #3
 8002b88:	e7b8      	b.n	8002afc <__aeabi_dsub+0x2f0>
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	4cd3      	ldr	r4, [pc, #844]	; (8002edc <__aeabi_dsub+0x6d0>)
 8002b8e:	3001      	adds	r0, #1
 8002b90:	4220      	tst	r0, r4
 8002b92:	d000      	beq.n	8002b96 <__aeabi_dsub+0x38a>
 8002b94:	e0a2      	b.n	8002cdc <__aeabi_dsub+0x4d0>
 8002b96:	4640      	mov	r0, r8
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d000      	beq.n	8002b9e <__aeabi_dsub+0x392>
 8002b9c:	e101      	b.n	8002da2 <__aeabi_dsub+0x596>
 8002b9e:	4660      	mov	r0, ip
 8002ba0:	4318      	orrs	r0, r3
 8002ba2:	d100      	bne.n	8002ba6 <__aeabi_dsub+0x39a>
 8002ba4:	e15e      	b.n	8002e64 <__aeabi_dsub+0x658>
 8002ba6:	0008      	movs	r0, r1
 8002ba8:	4338      	orrs	r0, r7
 8002baa:	d000      	beq.n	8002bae <__aeabi_dsub+0x3a2>
 8002bac:	e15f      	b.n	8002e6e <__aeabi_dsub+0x662>
 8002bae:	4661      	mov	r1, ip
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	0749      	lsls	r1, r1, #29
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	4661      	mov	r1, ip
 8002bb8:	08cc      	lsrs	r4, r1, #3
 8002bba:	e7a2      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002bbc:	4dc8      	ldr	r5, [pc, #800]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002bbe:	42a8      	cmp	r0, r5
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x3b8>
 8002bc2:	e0cf      	b.n	8002d64 <__aeabi_dsub+0x558>
 8002bc4:	2580      	movs	r5, #128	; 0x80
 8002bc6:	4664      	mov	r4, ip
 8002bc8:	042d      	lsls	r5, r5, #16
 8002bca:	432c      	orrs	r4, r5
 8002bcc:	46a4      	mov	ip, r4
 8002bce:	2a38      	cmp	r2, #56	; 0x38
 8002bd0:	dc56      	bgt.n	8002c80 <__aeabi_dsub+0x474>
 8002bd2:	2a1f      	cmp	r2, #31
 8002bd4:	dd00      	ble.n	8002bd8 <__aeabi_dsub+0x3cc>
 8002bd6:	e0d1      	b.n	8002d7c <__aeabi_dsub+0x570>
 8002bd8:	2520      	movs	r5, #32
 8002bda:	001e      	movs	r6, r3
 8002bdc:	1aad      	subs	r5, r5, r2
 8002bde:	4664      	mov	r4, ip
 8002be0:	40ab      	lsls	r3, r5
 8002be2:	40ac      	lsls	r4, r5
 8002be4:	40d6      	lsrs	r6, r2
 8002be6:	1e5d      	subs	r5, r3, #1
 8002be8:	41ab      	sbcs	r3, r5
 8002bea:	4334      	orrs	r4, r6
 8002bec:	4323      	orrs	r3, r4
 8002bee:	4664      	mov	r4, ip
 8002bf0:	40d4      	lsrs	r4, r2
 8002bf2:	1b09      	subs	r1, r1, r4
 8002bf4:	e049      	b.n	8002c8a <__aeabi_dsub+0x47e>
 8002bf6:	4660      	mov	r0, ip
 8002bf8:	1bdc      	subs	r4, r3, r7
 8002bfa:	1a46      	subs	r6, r0, r1
 8002bfc:	42a3      	cmp	r3, r4
 8002bfe:	4180      	sbcs	r0, r0
 8002c00:	4240      	negs	r0, r0
 8002c02:	4681      	mov	r9, r0
 8002c04:	0030      	movs	r0, r6
 8002c06:	464e      	mov	r6, r9
 8002c08:	1b80      	subs	r0, r0, r6
 8002c0a:	4681      	mov	r9, r0
 8002c0c:	0200      	lsls	r0, r0, #8
 8002c0e:	d476      	bmi.n	8002cfe <__aeabi_dsub+0x4f2>
 8002c10:	464b      	mov	r3, r9
 8002c12:	4323      	orrs	r3, r4
 8002c14:	d000      	beq.n	8002c18 <__aeabi_dsub+0x40c>
 8002c16:	e652      	b.n	80028be <__aeabi_dsub+0xb2>
 8002c18:	2400      	movs	r4, #0
 8002c1a:	2500      	movs	r5, #0
 8002c1c:	e771      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002c1e:	4339      	orrs	r1, r7
 8002c20:	000c      	movs	r4, r1
 8002c22:	1e62      	subs	r2, r4, #1
 8002c24:	4194      	sbcs	r4, r2
 8002c26:	18e4      	adds	r4, r4, r3
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	419b      	sbcs	r3, r3
 8002c2c:	425b      	negs	r3, r3
 8002c2e:	4463      	add	r3, ip
 8002c30:	4699      	mov	r9, r3
 8002c32:	464b      	mov	r3, r9
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	d400      	bmi.n	8002c3a <__aeabi_dsub+0x42e>
 8002c38:	e756      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	469c      	mov	ip, r3
 8002c3e:	4ba8      	ldr	r3, [pc, #672]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002c40:	44e0      	add	r8, ip
 8002c42:	4598      	cmp	r8, r3
 8002c44:	d038      	beq.n	8002cb8 <__aeabi_dsub+0x4ac>
 8002c46:	464b      	mov	r3, r9
 8002c48:	48a6      	ldr	r0, [pc, #664]	; (8002ee4 <__aeabi_dsub+0x6d8>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4003      	ands	r3, r0
 8002c4e:	0018      	movs	r0, r3
 8002c50:	0863      	lsrs	r3, r4, #1
 8002c52:	4014      	ands	r4, r2
 8002c54:	431c      	orrs	r4, r3
 8002c56:	07c3      	lsls	r3, r0, #31
 8002c58:	431c      	orrs	r4, r3
 8002c5a:	0843      	lsrs	r3, r0, #1
 8002c5c:	4699      	mov	r9, r3
 8002c5e:	e657      	b.n	8002910 <__aeabi_dsub+0x104>
 8002c60:	0010      	movs	r0, r2
 8002c62:	000e      	movs	r6, r1
 8002c64:	3820      	subs	r0, #32
 8002c66:	40c6      	lsrs	r6, r0
 8002c68:	2a20      	cmp	r2, #32
 8002c6a:	d004      	beq.n	8002c76 <__aeabi_dsub+0x46a>
 8002c6c:	2040      	movs	r0, #64	; 0x40
 8002c6e:	1a82      	subs	r2, r0, r2
 8002c70:	4091      	lsls	r1, r2
 8002c72:	430f      	orrs	r7, r1
 8002c74:	46b9      	mov	r9, r7
 8002c76:	464f      	mov	r7, r9
 8002c78:	1e7a      	subs	r2, r7, #1
 8002c7a:	4197      	sbcs	r7, r2
 8002c7c:	4337      	orrs	r7, r6
 8002c7e:	e60f      	b.n	80028a0 <__aeabi_dsub+0x94>
 8002c80:	4662      	mov	r2, ip
 8002c82:	431a      	orrs	r2, r3
 8002c84:	0013      	movs	r3, r2
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	4193      	sbcs	r3, r2
 8002c8a:	1afc      	subs	r4, r7, r3
 8002c8c:	42a7      	cmp	r7, r4
 8002c8e:	41bf      	sbcs	r7, r7
 8002c90:	427f      	negs	r7, r7
 8002c92:	1bcb      	subs	r3, r1, r7
 8002c94:	4699      	mov	r9, r3
 8002c96:	465d      	mov	r5, fp
 8002c98:	4680      	mov	r8, r0
 8002c9a:	e608      	b.n	80028ae <__aeabi_dsub+0xa2>
 8002c9c:	4666      	mov	r6, ip
 8002c9e:	431e      	orrs	r6, r3
 8002ca0:	d100      	bne.n	8002ca4 <__aeabi_dsub+0x498>
 8002ca2:	e0be      	b.n	8002e22 <__aeabi_dsub+0x616>
 8002ca4:	1e56      	subs	r6, r2, #1
 8002ca6:	2a01      	cmp	r2, #1
 8002ca8:	d100      	bne.n	8002cac <__aeabi_dsub+0x4a0>
 8002caa:	e109      	b.n	8002ec0 <__aeabi_dsub+0x6b4>
 8002cac:	4c8c      	ldr	r4, [pc, #560]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002cae:	42a2      	cmp	r2, r4
 8002cb0:	d100      	bne.n	8002cb4 <__aeabi_dsub+0x4a8>
 8002cb2:	e119      	b.n	8002ee8 <__aeabi_dsub+0x6dc>
 8002cb4:	0032      	movs	r2, r6
 8002cb6:	e6c1      	b.n	8002a3c <__aeabi_dsub+0x230>
 8002cb8:	4642      	mov	r2, r8
 8002cba:	2400      	movs	r4, #0
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e648      	b.n	8002952 <__aeabi_dsub+0x146>
 8002cc0:	2020      	movs	r0, #32
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	1a80      	subs	r0, r0, r2
 8002cc6:	003e      	movs	r6, r7
 8002cc8:	4087      	lsls	r7, r0
 8002cca:	4084      	lsls	r4, r0
 8002ccc:	40d6      	lsrs	r6, r2
 8002cce:	1e78      	subs	r0, r7, #1
 8002cd0:	4187      	sbcs	r7, r0
 8002cd2:	40d1      	lsrs	r1, r2
 8002cd4:	4334      	orrs	r4, r6
 8002cd6:	433c      	orrs	r4, r7
 8002cd8:	448c      	add	ip, r1
 8002cda:	e7a4      	b.n	8002c26 <__aeabi_dsub+0x41a>
 8002cdc:	4a80      	ldr	r2, [pc, #512]	; (8002ee0 <__aeabi_dsub+0x6d4>)
 8002cde:	4290      	cmp	r0, r2
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x4d8>
 8002ce2:	e0e9      	b.n	8002eb8 <__aeabi_dsub+0x6ac>
 8002ce4:	19df      	adds	r7, r3, r7
 8002ce6:	429f      	cmp	r7, r3
 8002ce8:	419b      	sbcs	r3, r3
 8002cea:	4461      	add	r1, ip
 8002cec:	425b      	negs	r3, r3
 8002cee:	18c9      	adds	r1, r1, r3
 8002cf0:	07cc      	lsls	r4, r1, #31
 8002cf2:	087f      	lsrs	r7, r7, #1
 8002cf4:	084b      	lsrs	r3, r1, #1
 8002cf6:	4699      	mov	r9, r3
 8002cf8:	4680      	mov	r8, r0
 8002cfa:	433c      	orrs	r4, r7
 8002cfc:	e6f4      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002cfe:	1afc      	subs	r4, r7, r3
 8002d00:	42a7      	cmp	r7, r4
 8002d02:	41bf      	sbcs	r7, r7
 8002d04:	4663      	mov	r3, ip
 8002d06:	427f      	negs	r7, r7
 8002d08:	1ac9      	subs	r1, r1, r3
 8002d0a:	1bcb      	subs	r3, r1, r7
 8002d0c:	4699      	mov	r9, r3
 8002d0e:	465d      	mov	r5, fp
 8002d10:	e5d5      	b.n	80028be <__aeabi_dsub+0xb2>
 8002d12:	08ff      	lsrs	r7, r7, #3
 8002d14:	074b      	lsls	r3, r1, #29
 8002d16:	465d      	mov	r5, fp
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	08cc      	lsrs	r4, r1, #3
 8002d1c:	e6ee      	b.n	8002afc <__aeabi_dsub+0x2f0>
 8002d1e:	4662      	mov	r2, ip
 8002d20:	431a      	orrs	r2, r3
 8002d22:	d000      	beq.n	8002d26 <__aeabi_dsub+0x51a>
 8002d24:	e082      	b.n	8002e2c <__aeabi_dsub+0x620>
 8002d26:	000b      	movs	r3, r1
 8002d28:	433b      	orrs	r3, r7
 8002d2a:	d11b      	bne.n	8002d64 <__aeabi_dsub+0x558>
 8002d2c:	2480      	movs	r4, #128	; 0x80
 8002d2e:	2500      	movs	r5, #0
 8002d30:	0324      	lsls	r4, r4, #12
 8002d32:	e6f9      	b.n	8002b28 <__aeabi_dsub+0x31c>
 8002d34:	19dc      	adds	r4, r3, r7
 8002d36:	429c      	cmp	r4, r3
 8002d38:	419b      	sbcs	r3, r3
 8002d3a:	4461      	add	r1, ip
 8002d3c:	4689      	mov	r9, r1
 8002d3e:	425b      	negs	r3, r3
 8002d40:	4499      	add	r9, r3
 8002d42:	464b      	mov	r3, r9
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	d444      	bmi.n	8002dd2 <__aeabi_dsub+0x5c6>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	4698      	mov	r8, r3
 8002d4c:	e6cc      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002d4e:	1bdc      	subs	r4, r3, r7
 8002d50:	4662      	mov	r2, ip
 8002d52:	42a3      	cmp	r3, r4
 8002d54:	419b      	sbcs	r3, r3
 8002d56:	1a51      	subs	r1, r2, r1
 8002d58:	425b      	negs	r3, r3
 8002d5a:	1acb      	subs	r3, r1, r3
 8002d5c:	4699      	mov	r9, r3
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4698      	mov	r8, r3
 8002d62:	e5a4      	b.n	80028ae <__aeabi_dsub+0xa2>
 8002d64:	08ff      	lsrs	r7, r7, #3
 8002d66:	074b      	lsls	r3, r1, #29
 8002d68:	465d      	mov	r5, fp
 8002d6a:	433b      	orrs	r3, r7
 8002d6c:	08cc      	lsrs	r4, r1, #3
 8002d6e:	e6d7      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002d70:	4662      	mov	r2, ip
 8002d72:	431a      	orrs	r2, r3
 8002d74:	0014      	movs	r4, r2
 8002d76:	1e63      	subs	r3, r4, #1
 8002d78:	419c      	sbcs	r4, r3
 8002d7a:	e679      	b.n	8002a70 <__aeabi_dsub+0x264>
 8002d7c:	0015      	movs	r5, r2
 8002d7e:	4664      	mov	r4, ip
 8002d80:	3d20      	subs	r5, #32
 8002d82:	40ec      	lsrs	r4, r5
 8002d84:	46a0      	mov	r8, r4
 8002d86:	2a20      	cmp	r2, #32
 8002d88:	d005      	beq.n	8002d96 <__aeabi_dsub+0x58a>
 8002d8a:	2540      	movs	r5, #64	; 0x40
 8002d8c:	4664      	mov	r4, ip
 8002d8e:	1aaa      	subs	r2, r5, r2
 8002d90:	4094      	lsls	r4, r2
 8002d92:	4323      	orrs	r3, r4
 8002d94:	469a      	mov	sl, r3
 8002d96:	4654      	mov	r4, sl
 8002d98:	1e63      	subs	r3, r4, #1
 8002d9a:	419c      	sbcs	r4, r3
 8002d9c:	4643      	mov	r3, r8
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	e773      	b.n	8002c8a <__aeabi_dsub+0x47e>
 8002da2:	4662      	mov	r2, ip
 8002da4:	431a      	orrs	r2, r3
 8002da6:	d023      	beq.n	8002df0 <__aeabi_dsub+0x5e4>
 8002da8:	000a      	movs	r2, r1
 8002daa:	433a      	orrs	r2, r7
 8002dac:	d000      	beq.n	8002db0 <__aeabi_dsub+0x5a4>
 8002dae:	e0a0      	b.n	8002ef2 <__aeabi_dsub+0x6e6>
 8002db0:	4662      	mov	r2, ip
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	0752      	lsls	r2, r2, #29
 8002db6:	4313      	orrs	r3, r2
 8002db8:	4662      	mov	r2, ip
 8002dba:	08d4      	lsrs	r4, r2, #3
 8002dbc:	e6b0      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002dbe:	000b      	movs	r3, r1
 8002dc0:	433b      	orrs	r3, r7
 8002dc2:	d100      	bne.n	8002dc6 <__aeabi_dsub+0x5ba>
 8002dc4:	e728      	b.n	8002c18 <__aeabi_dsub+0x40c>
 8002dc6:	08ff      	lsrs	r7, r7, #3
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	465d      	mov	r5, fp
 8002dcc:	433b      	orrs	r3, r7
 8002dce:	08cc      	lsrs	r4, r1, #3
 8002dd0:	e697      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	e736      	b.n	8002c46 <__aeabi_dsub+0x43a>
 8002dd8:	1afc      	subs	r4, r7, r3
 8002dda:	42a7      	cmp	r7, r4
 8002ddc:	41bf      	sbcs	r7, r7
 8002dde:	4663      	mov	r3, ip
 8002de0:	427f      	negs	r7, r7
 8002de2:	1ac9      	subs	r1, r1, r3
 8002de4:	1bcb      	subs	r3, r1, r7
 8002de6:	4699      	mov	r9, r3
 8002de8:	2301      	movs	r3, #1
 8002dea:	465d      	mov	r5, fp
 8002dec:	4698      	mov	r8, r3
 8002dee:	e55e      	b.n	80028ae <__aeabi_dsub+0xa2>
 8002df0:	074b      	lsls	r3, r1, #29
 8002df2:	08ff      	lsrs	r7, r7, #3
 8002df4:	433b      	orrs	r3, r7
 8002df6:	08cc      	lsrs	r4, r1, #3
 8002df8:	e692      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002dfa:	1bdc      	subs	r4, r3, r7
 8002dfc:	4660      	mov	r0, ip
 8002dfe:	42a3      	cmp	r3, r4
 8002e00:	41b6      	sbcs	r6, r6
 8002e02:	1a40      	subs	r0, r0, r1
 8002e04:	4276      	negs	r6, r6
 8002e06:	1b80      	subs	r0, r0, r6
 8002e08:	4681      	mov	r9, r0
 8002e0a:	0200      	lsls	r0, r0, #8
 8002e0c:	d560      	bpl.n	8002ed0 <__aeabi_dsub+0x6c4>
 8002e0e:	1afc      	subs	r4, r7, r3
 8002e10:	42a7      	cmp	r7, r4
 8002e12:	41bf      	sbcs	r7, r7
 8002e14:	4663      	mov	r3, ip
 8002e16:	427f      	negs	r7, r7
 8002e18:	1ac9      	subs	r1, r1, r3
 8002e1a:	1bcb      	subs	r3, r1, r7
 8002e1c:	4699      	mov	r9, r3
 8002e1e:	465d      	mov	r5, fp
 8002e20:	e576      	b.n	8002910 <__aeabi_dsub+0x104>
 8002e22:	08ff      	lsrs	r7, r7, #3
 8002e24:	074b      	lsls	r3, r1, #29
 8002e26:	433b      	orrs	r3, r7
 8002e28:	08cc      	lsrs	r4, r1, #3
 8002e2a:	e667      	b.n	8002afc <__aeabi_dsub+0x2f0>
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	433a      	orrs	r2, r7
 8002e32:	d100      	bne.n	8002e36 <__aeabi_dsub+0x62a>
 8002e34:	e66f      	b.n	8002b16 <__aeabi_dsub+0x30a>
 8002e36:	4662      	mov	r2, ip
 8002e38:	0752      	lsls	r2, r2, #29
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	4662      	mov	r2, ip
 8002e3e:	08d4      	lsrs	r4, r2, #3
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	0312      	lsls	r2, r2, #12
 8002e44:	4214      	tst	r4, r2
 8002e46:	d007      	beq.n	8002e58 <__aeabi_dsub+0x64c>
 8002e48:	08c8      	lsrs	r0, r1, #3
 8002e4a:	4210      	tst	r0, r2
 8002e4c:	d104      	bne.n	8002e58 <__aeabi_dsub+0x64c>
 8002e4e:	465d      	mov	r5, fp
 8002e50:	0004      	movs	r4, r0
 8002e52:	08fb      	lsrs	r3, r7, #3
 8002e54:	0749      	lsls	r1, r1, #29
 8002e56:	430b      	orrs	r3, r1
 8002e58:	0f5a      	lsrs	r2, r3, #29
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	08db      	lsrs	r3, r3, #3
 8002e5e:	0752      	lsls	r2, r2, #29
 8002e60:	4313      	orrs	r3, r2
 8002e62:	e65d      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002e64:	074b      	lsls	r3, r1, #29
 8002e66:	08ff      	lsrs	r7, r7, #3
 8002e68:	433b      	orrs	r3, r7
 8002e6a:	08cc      	lsrs	r4, r1, #3
 8002e6c:	e649      	b.n	8002b02 <__aeabi_dsub+0x2f6>
 8002e6e:	19dc      	adds	r4, r3, r7
 8002e70:	429c      	cmp	r4, r3
 8002e72:	419b      	sbcs	r3, r3
 8002e74:	4461      	add	r1, ip
 8002e76:	4689      	mov	r9, r1
 8002e78:	425b      	negs	r3, r3
 8002e7a:	4499      	add	r9, r3
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	d400      	bmi.n	8002e84 <__aeabi_dsub+0x678>
 8002e82:	e631      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002e84:	464a      	mov	r2, r9
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <__aeabi_dsub+0x6d8>)
 8002e88:	401a      	ands	r2, r3
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	4691      	mov	r9, r2
 8002e8e:	4698      	mov	r8, r3
 8002e90:	e62a      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002e92:	0016      	movs	r6, r2
 8002e94:	4664      	mov	r4, ip
 8002e96:	3e20      	subs	r6, #32
 8002e98:	40f4      	lsrs	r4, r6
 8002e9a:	46a0      	mov	r8, r4
 8002e9c:	2a20      	cmp	r2, #32
 8002e9e:	d005      	beq.n	8002eac <__aeabi_dsub+0x6a0>
 8002ea0:	2640      	movs	r6, #64	; 0x40
 8002ea2:	4664      	mov	r4, ip
 8002ea4:	1ab2      	subs	r2, r6, r2
 8002ea6:	4094      	lsls	r4, r2
 8002ea8:	4323      	orrs	r3, r4
 8002eaa:	469a      	mov	sl, r3
 8002eac:	4654      	mov	r4, sl
 8002eae:	1e63      	subs	r3, r4, #1
 8002eb0:	419c      	sbcs	r4, r3
 8002eb2:	4643      	mov	r3, r8
 8002eb4:	431c      	orrs	r4, r3
 8002eb6:	e5db      	b.n	8002a70 <__aeabi_dsub+0x264>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	2400      	movs	r4, #0
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e548      	b.n	8002952 <__aeabi_dsub+0x146>
 8002ec0:	19dc      	adds	r4, r3, r7
 8002ec2:	42bc      	cmp	r4, r7
 8002ec4:	41bf      	sbcs	r7, r7
 8002ec6:	4461      	add	r1, ip
 8002ec8:	4689      	mov	r9, r1
 8002eca:	427f      	negs	r7, r7
 8002ecc:	44b9      	add	r9, r7
 8002ece:	e738      	b.n	8002d42 <__aeabi_dsub+0x536>
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	4323      	orrs	r3, r4
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x6cc>
 8002ed6:	e69f      	b.n	8002c18 <__aeabi_dsub+0x40c>
 8002ed8:	e606      	b.n	8002ae8 <__aeabi_dsub+0x2dc>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	000007fe 	.word	0x000007fe
 8002ee0:	000007ff 	.word	0x000007ff
 8002ee4:	ff7fffff 	.word	0xff7fffff
 8002ee8:	08ff      	lsrs	r7, r7, #3
 8002eea:	074b      	lsls	r3, r1, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	08cc      	lsrs	r4, r1, #3
 8002ef0:	e616      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002ef2:	4662      	mov	r2, ip
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	0752      	lsls	r2, r2, #29
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	4662      	mov	r2, ip
 8002efc:	08d4      	lsrs	r4, r2, #3
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	0312      	lsls	r2, r2, #12
 8002f02:	4214      	tst	r4, r2
 8002f04:	d007      	beq.n	8002f16 <__aeabi_dsub+0x70a>
 8002f06:	08c8      	lsrs	r0, r1, #3
 8002f08:	4210      	tst	r0, r2
 8002f0a:	d104      	bne.n	8002f16 <__aeabi_dsub+0x70a>
 8002f0c:	465d      	mov	r5, fp
 8002f0e:	0004      	movs	r4, r0
 8002f10:	08fb      	lsrs	r3, r7, #3
 8002f12:	0749      	lsls	r1, r1, #29
 8002f14:	430b      	orrs	r3, r1
 8002f16:	0f5a      	lsrs	r2, r3, #29
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	0752      	lsls	r2, r2, #29
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	e5fe      	b.n	8002b20 <__aeabi_dsub+0x314>
 8002f22:	2300      	movs	r3, #0
 8002f24:	4a01      	ldr	r2, [pc, #4]	; (8002f2c <__aeabi_dsub+0x720>)
 8002f26:	001c      	movs	r4, r3
 8002f28:	e513      	b.n	8002952 <__aeabi_dsub+0x146>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	000007ff 	.word	0x000007ff

08002f30 <__aeabi_dcmpun>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	0005      	movs	r5, r0
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <__aeabi_dcmpun+0x38>)
 8002f36:	031c      	lsls	r4, r3, #12
 8002f38:	0016      	movs	r6, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	030a      	lsls	r2, r1, #12
 8002f3e:	0049      	lsls	r1, r1, #1
 8002f40:	0b12      	lsrs	r2, r2, #12
 8002f42:	0d49      	lsrs	r1, r1, #21
 8002f44:	0b24      	lsrs	r4, r4, #12
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	4281      	cmp	r1, r0
 8002f4a:	d008      	beq.n	8002f5e <__aeabi_dcmpun+0x2e>
 8002f4c:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <__aeabi_dcmpun+0x38>)
 8002f4e:	2000      	movs	r0, #0
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <__aeabi_dcmpun+0x2c>
 8002f54:	0020      	movs	r0, r4
 8002f56:	4330      	orrs	r0, r6
 8002f58:	1e43      	subs	r3, r0, #1
 8002f5a:	4198      	sbcs	r0, r3
 8002f5c:	bd70      	pop	{r4, r5, r6, pc}
 8002f5e:	2001      	movs	r0, #1
 8002f60:	432a      	orrs	r2, r5
 8002f62:	d1fb      	bne.n	8002f5c <__aeabi_dcmpun+0x2c>
 8002f64:	e7f2      	b.n	8002f4c <__aeabi_dcmpun+0x1c>
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	000007ff 	.word	0x000007ff

08002f6c <__aeabi_d2iz>:
 8002f6c:	000a      	movs	r2, r1
 8002f6e:	b530      	push	{r4, r5, lr}
 8002f70:	4c13      	ldr	r4, [pc, #76]	; (8002fc0 <__aeabi_d2iz+0x54>)
 8002f72:	0053      	lsls	r3, r2, #1
 8002f74:	0309      	lsls	r1, r1, #12
 8002f76:	0005      	movs	r5, r0
 8002f78:	0b09      	lsrs	r1, r1, #12
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	0d5b      	lsrs	r3, r3, #21
 8002f7e:	0fd2      	lsrs	r2, r2, #31
 8002f80:	42a3      	cmp	r3, r4
 8002f82:	dd04      	ble.n	8002f8e <__aeabi_d2iz+0x22>
 8002f84:	480f      	ldr	r0, [pc, #60]	; (8002fc4 <__aeabi_d2iz+0x58>)
 8002f86:	4283      	cmp	r3, r0
 8002f88:	dd02      	ble.n	8002f90 <__aeabi_d2iz+0x24>
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <__aeabi_d2iz+0x5c>)
 8002f8c:	18d0      	adds	r0, r2, r3
 8002f8e:	bd30      	pop	{r4, r5, pc}
 8002f90:	2080      	movs	r0, #128	; 0x80
 8002f92:	0340      	lsls	r0, r0, #13
 8002f94:	4301      	orrs	r1, r0
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <__aeabi_d2iz+0x60>)
 8002f98:	1ac0      	subs	r0, r0, r3
 8002f9a:	281f      	cmp	r0, #31
 8002f9c:	dd08      	ble.n	8002fb0 <__aeabi_d2iz+0x44>
 8002f9e:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <__aeabi_d2iz+0x64>)
 8002fa0:	1ac3      	subs	r3, r0, r3
 8002fa2:	40d9      	lsrs	r1, r3
 8002fa4:	000b      	movs	r3, r1
 8002fa6:	4258      	negs	r0, r3
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d1f0      	bne.n	8002f8e <__aeabi_d2iz+0x22>
 8002fac:	0018      	movs	r0, r3
 8002fae:	e7ee      	b.n	8002f8e <__aeabi_d2iz+0x22>
 8002fb0:	4c08      	ldr	r4, [pc, #32]	; (8002fd4 <__aeabi_d2iz+0x68>)
 8002fb2:	40c5      	lsrs	r5, r0
 8002fb4:	46a4      	mov	ip, r4
 8002fb6:	4463      	add	r3, ip
 8002fb8:	4099      	lsls	r1, r3
 8002fba:	000b      	movs	r3, r1
 8002fbc:	432b      	orrs	r3, r5
 8002fbe:	e7f2      	b.n	8002fa6 <__aeabi_d2iz+0x3a>
 8002fc0:	000003fe 	.word	0x000003fe
 8002fc4:	0000041d 	.word	0x0000041d
 8002fc8:	7fffffff 	.word	0x7fffffff
 8002fcc:	00000433 	.word	0x00000433
 8002fd0:	00000413 	.word	0x00000413
 8002fd4:	fffffbed 	.word	0xfffffbed

08002fd8 <__aeabi_i2d>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d016      	beq.n	800300c <__aeabi_i2d+0x34>
 8002fde:	17c3      	asrs	r3, r0, #31
 8002fe0:	18c5      	adds	r5, r0, r3
 8002fe2:	405d      	eors	r5, r3
 8002fe4:	0fc4      	lsrs	r4, r0, #31
 8002fe6:	0028      	movs	r0, r5
 8002fe8:	f000 f91c 	bl	8003224 <__clzsi2>
 8002fec:	4a11      	ldr	r2, [pc, #68]	; (8003034 <__aeabi_i2d+0x5c>)
 8002fee:	1a12      	subs	r2, r2, r0
 8002ff0:	280a      	cmp	r0, #10
 8002ff2:	dc16      	bgt.n	8003022 <__aeabi_i2d+0x4a>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	002e      	movs	r6, r5
 8002ff8:	3315      	adds	r3, #21
 8002ffa:	409e      	lsls	r6, r3
 8002ffc:	230b      	movs	r3, #11
 8002ffe:	1a18      	subs	r0, r3, r0
 8003000:	40c5      	lsrs	r5, r0
 8003002:	0552      	lsls	r2, r2, #21
 8003004:	032d      	lsls	r5, r5, #12
 8003006:	0b2d      	lsrs	r5, r5, #12
 8003008:	0d53      	lsrs	r3, r2, #21
 800300a:	e003      	b.n	8003014 <__aeabi_i2d+0x3c>
 800300c:	2400      	movs	r4, #0
 800300e:	2300      	movs	r3, #0
 8003010:	2500      	movs	r5, #0
 8003012:	2600      	movs	r6, #0
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	432b      	orrs	r3, r5
 8003018:	07e4      	lsls	r4, r4, #31
 800301a:	4323      	orrs	r3, r4
 800301c:	0030      	movs	r0, r6
 800301e:	0019      	movs	r1, r3
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	380b      	subs	r0, #11
 8003024:	4085      	lsls	r5, r0
 8003026:	0552      	lsls	r2, r2, #21
 8003028:	032d      	lsls	r5, r5, #12
 800302a:	2600      	movs	r6, #0
 800302c:	0b2d      	lsrs	r5, r5, #12
 800302e:	0d53      	lsrs	r3, r2, #21
 8003030:	e7f0      	b.n	8003014 <__aeabi_i2d+0x3c>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	0000041e 	.word	0x0000041e

08003038 <__aeabi_ui2d>:
 8003038:	b510      	push	{r4, lr}
 800303a:	1e04      	subs	r4, r0, #0
 800303c:	d010      	beq.n	8003060 <__aeabi_ui2d+0x28>
 800303e:	f000 f8f1 	bl	8003224 <__clzsi2>
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <__aeabi_ui2d+0x48>)
 8003044:	1a1b      	subs	r3, r3, r0
 8003046:	280a      	cmp	r0, #10
 8003048:	dc11      	bgt.n	800306e <__aeabi_ui2d+0x36>
 800304a:	220b      	movs	r2, #11
 800304c:	0021      	movs	r1, r4
 800304e:	1a12      	subs	r2, r2, r0
 8003050:	40d1      	lsrs	r1, r2
 8003052:	3015      	adds	r0, #21
 8003054:	030a      	lsls	r2, r1, #12
 8003056:	055b      	lsls	r3, r3, #21
 8003058:	4084      	lsls	r4, r0
 800305a:	0b12      	lsrs	r2, r2, #12
 800305c:	0d5b      	lsrs	r3, r3, #21
 800305e:	e001      	b.n	8003064 <__aeabi_ui2d+0x2c>
 8003060:	2300      	movs	r3, #0
 8003062:	2200      	movs	r2, #0
 8003064:	051b      	lsls	r3, r3, #20
 8003066:	4313      	orrs	r3, r2
 8003068:	0020      	movs	r0, r4
 800306a:	0019      	movs	r1, r3
 800306c:	bd10      	pop	{r4, pc}
 800306e:	0022      	movs	r2, r4
 8003070:	380b      	subs	r0, #11
 8003072:	4082      	lsls	r2, r0
 8003074:	055b      	lsls	r3, r3, #21
 8003076:	0312      	lsls	r2, r2, #12
 8003078:	2400      	movs	r4, #0
 800307a:	0b12      	lsrs	r2, r2, #12
 800307c:	0d5b      	lsrs	r3, r3, #21
 800307e:	e7f1      	b.n	8003064 <__aeabi_ui2d+0x2c>
 8003080:	0000041e 	.word	0x0000041e

08003084 <__aeabi_f2d>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	0043      	lsls	r3, r0, #1
 8003088:	0246      	lsls	r6, r0, #9
 800308a:	0fc4      	lsrs	r4, r0, #31
 800308c:	20fe      	movs	r0, #254	; 0xfe
 800308e:	0e1b      	lsrs	r3, r3, #24
 8003090:	1c59      	adds	r1, r3, #1
 8003092:	0a75      	lsrs	r5, r6, #9
 8003094:	4208      	tst	r0, r1
 8003096:	d00c      	beq.n	80030b2 <__aeabi_f2d+0x2e>
 8003098:	22e0      	movs	r2, #224	; 0xe0
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	4694      	mov	ip, r2
 800309e:	076d      	lsls	r5, r5, #29
 80030a0:	0b36      	lsrs	r6, r6, #12
 80030a2:	4463      	add	r3, ip
 80030a4:	051b      	lsls	r3, r3, #20
 80030a6:	4333      	orrs	r3, r6
 80030a8:	07e4      	lsls	r4, r4, #31
 80030aa:	4323      	orrs	r3, r4
 80030ac:	0028      	movs	r0, r5
 80030ae:	0019      	movs	r1, r3
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d114      	bne.n	80030e0 <__aeabi_f2d+0x5c>
 80030b6:	2d00      	cmp	r5, #0
 80030b8:	d01b      	beq.n	80030f2 <__aeabi_f2d+0x6e>
 80030ba:	0028      	movs	r0, r5
 80030bc:	f000 f8b2 	bl	8003224 <__clzsi2>
 80030c0:	280a      	cmp	r0, #10
 80030c2:	dc1c      	bgt.n	80030fe <__aeabi_f2d+0x7a>
 80030c4:	230b      	movs	r3, #11
 80030c6:	002e      	movs	r6, r5
 80030c8:	1a1b      	subs	r3, r3, r0
 80030ca:	40de      	lsrs	r6, r3
 80030cc:	0003      	movs	r3, r0
 80030ce:	3315      	adds	r3, #21
 80030d0:	409d      	lsls	r5, r3
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <__aeabi_f2d+0x88>)
 80030d4:	0336      	lsls	r6, r6, #12
 80030d6:	1a12      	subs	r2, r2, r0
 80030d8:	0552      	lsls	r2, r2, #21
 80030da:	0b36      	lsrs	r6, r6, #12
 80030dc:	0d53      	lsrs	r3, r2, #21
 80030de:	e7e1      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	d009      	beq.n	80030f8 <__aeabi_f2d+0x74>
 80030e4:	2280      	movs	r2, #128	; 0x80
 80030e6:	0b36      	lsrs	r6, r6, #12
 80030e8:	0312      	lsls	r2, r2, #12
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <__aeabi_f2d+0x8c>)
 80030ec:	076d      	lsls	r5, r5, #29
 80030ee:	4316      	orrs	r6, r2
 80030f0:	e7d8      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2600      	movs	r6, #0
 80030f6:	e7d5      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030f8:	2600      	movs	r6, #0
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <__aeabi_f2d+0x8c>)
 80030fc:	e7d2      	b.n	80030a4 <__aeabi_f2d+0x20>
 80030fe:	0003      	movs	r3, r0
 8003100:	3b0b      	subs	r3, #11
 8003102:	409d      	lsls	r5, r3
 8003104:	002e      	movs	r6, r5
 8003106:	2500      	movs	r5, #0
 8003108:	e7e3      	b.n	80030d2 <__aeabi_f2d+0x4e>
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	00000389 	.word	0x00000389
 8003110:	000007ff 	.word	0x000007ff

08003114 <__aeabi_d2f>:
 8003114:	0002      	movs	r2, r0
 8003116:	004b      	lsls	r3, r1, #1
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	0d5b      	lsrs	r3, r3, #21
 800311c:	030c      	lsls	r4, r1, #12
 800311e:	4e3d      	ldr	r6, [pc, #244]	; (8003214 <__aeabi_d2f+0x100>)
 8003120:	0a64      	lsrs	r4, r4, #9
 8003122:	0f40      	lsrs	r0, r0, #29
 8003124:	1c5f      	adds	r7, r3, #1
 8003126:	0fc9      	lsrs	r1, r1, #31
 8003128:	4304      	orrs	r4, r0
 800312a:	00d5      	lsls	r5, r2, #3
 800312c:	4237      	tst	r7, r6
 800312e:	d00a      	beq.n	8003146 <__aeabi_d2f+0x32>
 8003130:	4839      	ldr	r0, [pc, #228]	; (8003218 <__aeabi_d2f+0x104>)
 8003132:	181e      	adds	r6, r3, r0
 8003134:	2efe      	cmp	r6, #254	; 0xfe
 8003136:	dd16      	ble.n	8003166 <__aeabi_d2f+0x52>
 8003138:	20ff      	movs	r0, #255	; 0xff
 800313a:	2400      	movs	r4, #0
 800313c:	05c0      	lsls	r0, r0, #23
 800313e:	4320      	orrs	r0, r4
 8003140:	07c9      	lsls	r1, r1, #31
 8003142:	4308      	orrs	r0, r1
 8003144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <__aeabi_d2f+0x44>
 800314a:	432c      	orrs	r4, r5
 800314c:	d026      	beq.n	800319c <__aeabi_d2f+0x88>
 800314e:	2205      	movs	r2, #5
 8003150:	0192      	lsls	r2, r2, #6
 8003152:	0a54      	lsrs	r4, r2, #9
 8003154:	b2d8      	uxtb	r0, r3
 8003156:	e7f1      	b.n	800313c <__aeabi_d2f+0x28>
 8003158:	4325      	orrs	r5, r4
 800315a:	d0ed      	beq.n	8003138 <__aeabi_d2f+0x24>
 800315c:	2080      	movs	r0, #128	; 0x80
 800315e:	03c0      	lsls	r0, r0, #15
 8003160:	4304      	orrs	r4, r0
 8003162:	20ff      	movs	r0, #255	; 0xff
 8003164:	e7ea      	b.n	800313c <__aeabi_d2f+0x28>
 8003166:	2e00      	cmp	r6, #0
 8003168:	dd1b      	ble.n	80031a2 <__aeabi_d2f+0x8e>
 800316a:	0192      	lsls	r2, r2, #6
 800316c:	1e53      	subs	r3, r2, #1
 800316e:	419a      	sbcs	r2, r3
 8003170:	00e4      	lsls	r4, r4, #3
 8003172:	0f6d      	lsrs	r5, r5, #29
 8003174:	4322      	orrs	r2, r4
 8003176:	432a      	orrs	r2, r5
 8003178:	0753      	lsls	r3, r2, #29
 800317a:	d048      	beq.n	800320e <__aeabi_d2f+0xfa>
 800317c:	230f      	movs	r3, #15
 800317e:	4013      	ands	r3, r2
 8003180:	2b04      	cmp	r3, #4
 8003182:	d000      	beq.n	8003186 <__aeabi_d2f+0x72>
 8003184:	3204      	adds	r2, #4
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	04db      	lsls	r3, r3, #19
 800318a:	4013      	ands	r3, r2
 800318c:	d03f      	beq.n	800320e <__aeabi_d2f+0xfa>
 800318e:	1c70      	adds	r0, r6, #1
 8003190:	2efe      	cmp	r6, #254	; 0xfe
 8003192:	d0d1      	beq.n	8003138 <__aeabi_d2f+0x24>
 8003194:	0192      	lsls	r2, r2, #6
 8003196:	0a54      	lsrs	r4, r2, #9
 8003198:	b2c0      	uxtb	r0, r0
 800319a:	e7cf      	b.n	800313c <__aeabi_d2f+0x28>
 800319c:	2000      	movs	r0, #0
 800319e:	2400      	movs	r4, #0
 80031a0:	e7cc      	b.n	800313c <__aeabi_d2f+0x28>
 80031a2:	0032      	movs	r2, r6
 80031a4:	3217      	adds	r2, #23
 80031a6:	db22      	blt.n	80031ee <__aeabi_d2f+0xda>
 80031a8:	2080      	movs	r0, #128	; 0x80
 80031aa:	0400      	lsls	r0, r0, #16
 80031ac:	4320      	orrs	r0, r4
 80031ae:	241e      	movs	r4, #30
 80031b0:	1ba4      	subs	r4, r4, r6
 80031b2:	2c1f      	cmp	r4, #31
 80031b4:	dd1d      	ble.n	80031f2 <__aeabi_d2f+0xde>
 80031b6:	2202      	movs	r2, #2
 80031b8:	4252      	negs	r2, r2
 80031ba:	1b96      	subs	r6, r2, r6
 80031bc:	0002      	movs	r2, r0
 80031be:	40f2      	lsrs	r2, r6
 80031c0:	0016      	movs	r6, r2
 80031c2:	2c20      	cmp	r4, #32
 80031c4:	d004      	beq.n	80031d0 <__aeabi_d2f+0xbc>
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <__aeabi_d2f+0x108>)
 80031c8:	4694      	mov	ip, r2
 80031ca:	4463      	add	r3, ip
 80031cc:	4098      	lsls	r0, r3
 80031ce:	4305      	orrs	r5, r0
 80031d0:	002a      	movs	r2, r5
 80031d2:	1e53      	subs	r3, r2, #1
 80031d4:	419a      	sbcs	r2, r3
 80031d6:	4332      	orrs	r2, r6
 80031d8:	2600      	movs	r6, #0
 80031da:	0753      	lsls	r3, r2, #29
 80031dc:	d1ce      	bne.n	800317c <__aeabi_d2f+0x68>
 80031de:	2480      	movs	r4, #128	; 0x80
 80031e0:	0013      	movs	r3, r2
 80031e2:	04e4      	lsls	r4, r4, #19
 80031e4:	2001      	movs	r0, #1
 80031e6:	4023      	ands	r3, r4
 80031e8:	4222      	tst	r2, r4
 80031ea:	d1d3      	bne.n	8003194 <__aeabi_d2f+0x80>
 80031ec:	e7b0      	b.n	8003150 <__aeabi_d2f+0x3c>
 80031ee:	2300      	movs	r3, #0
 80031f0:	e7ad      	b.n	800314e <__aeabi_d2f+0x3a>
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <__aeabi_d2f+0x10c>)
 80031f4:	4694      	mov	ip, r2
 80031f6:	002a      	movs	r2, r5
 80031f8:	40e2      	lsrs	r2, r4
 80031fa:	0014      	movs	r4, r2
 80031fc:	002a      	movs	r2, r5
 80031fe:	4463      	add	r3, ip
 8003200:	409a      	lsls	r2, r3
 8003202:	4098      	lsls	r0, r3
 8003204:	1e55      	subs	r5, r2, #1
 8003206:	41aa      	sbcs	r2, r5
 8003208:	4302      	orrs	r2, r0
 800320a:	4322      	orrs	r2, r4
 800320c:	e7e4      	b.n	80031d8 <__aeabi_d2f+0xc4>
 800320e:	0033      	movs	r3, r6
 8003210:	e79e      	b.n	8003150 <__aeabi_d2f+0x3c>
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	000007fe 	.word	0x000007fe
 8003218:	fffffc80 	.word	0xfffffc80
 800321c:	fffffca2 	.word	0xfffffca2
 8003220:	fffffc82 	.word	0xfffffc82

08003224 <__clzsi2>:
 8003224:	211c      	movs	r1, #28
 8003226:	2301      	movs	r3, #1
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	4298      	cmp	r0, r3
 800322c:	d301      	bcc.n	8003232 <__clzsi2+0xe>
 800322e:	0c00      	lsrs	r0, r0, #16
 8003230:	3910      	subs	r1, #16
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	4298      	cmp	r0, r3
 8003236:	d301      	bcc.n	800323c <__clzsi2+0x18>
 8003238:	0a00      	lsrs	r0, r0, #8
 800323a:	3908      	subs	r1, #8
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	4298      	cmp	r0, r3
 8003240:	d301      	bcc.n	8003246 <__clzsi2+0x22>
 8003242:	0900      	lsrs	r0, r0, #4
 8003244:	3904      	subs	r1, #4
 8003246:	a202      	add	r2, pc, #8	; (adr r2, 8003250 <__clzsi2+0x2c>)
 8003248:	5c10      	ldrb	r0, [r2, r0]
 800324a:	1840      	adds	r0, r0, r1
 800324c:	4770      	bx	lr
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	02020304 	.word	0x02020304
 8003254:	01010101 	.word	0x01010101
	...

08003260 <__clzdi2>:
 8003260:	b510      	push	{r4, lr}
 8003262:	2900      	cmp	r1, #0
 8003264:	d103      	bne.n	800326e <__clzdi2+0xe>
 8003266:	f7ff ffdd 	bl	8003224 <__clzsi2>
 800326a:	3020      	adds	r0, #32
 800326c:	e002      	b.n	8003274 <__clzdi2+0x14>
 800326e:	0008      	movs	r0, r1
 8003270:	f7ff ffd8 	bl	8003224 <__clzsi2>
 8003274:	bd10      	pop	{r4, pc}
 8003276:	46c0      	nop			; (mov r8, r8)

08003278 <bma_write>:
#include "akcelerometr.h"


void bma_write (uint8_t reg, uint8_t value)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af02      	add	r7, sp, #8
 800327e:	0002      	movs	r2, r0
 8003280:	1dfb      	adds	r3, r7, #7
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	1dbb      	adds	r3, r7, #6
 8003286:	1c0a      	adds	r2, r1, #0
 8003288:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = reg;
 800328a:	210c      	movs	r1, #12
 800328c:	187b      	adds	r3, r7, r1
 800328e:	1dfa      	adds	r2, r7, #7
 8003290:	7812      	ldrb	r2, [r2, #0]
 8003292:	701a      	strb	r2, [r3, #0]
	data[1] = value;
 8003294:	187b      	adds	r3, r7, r1
 8003296:	1dba      	adds	r2, r7, #6
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&I2C_NO, bma_adr, data, 2, 10);
 800329c:	187a      	adds	r2, r7, r1
 800329e:	4805      	ldr	r0, [pc, #20]	; (80032b4 <bma_write+0x3c>)
 80032a0:	230a      	movs	r3, #10
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2302      	movs	r3, #2
 80032a6:	2114      	movs	r1, #20
 80032a8:	f001 fb0c 	bl	80048c4 <HAL_I2C_Master_Transmit>

}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b004      	add	sp, #16
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200001f8 	.word	0x200001f8

080032b8 <bma_read>:


void bma_read (uint8_t reg, uint8_t numberofbytes, int8_t* data_rec)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af04      	add	r7, sp, #16
 80032be:	603a      	str	r2, [r7, #0]
 80032c0:	1dfb      	adds	r3, r7, #7
 80032c2:	1c02      	adds	r2, r0, #0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	1dbb      	adds	r3, r7, #6
 80032c8:	1c0a      	adds	r2, r1, #0
 80032ca:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(&I2C_NO, bma_adr, reg, 1, data_rec, numberofbytes, 100);
 80032cc:	1dfb      	adds	r3, r7, #7
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	1dbb      	adds	r3, r7, #6
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4806      	ldr	r0, [pc, #24]	; (80032f4 <bma_read+0x3c>)
 80032da:	2164      	movs	r1, #100	; 0x64
 80032dc:	9102      	str	r1, [sp, #8]
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2301      	movs	r3, #1
 80032e6:	2114      	movs	r1, #20
 80032e8:	f001 fbf4 	bl	8004ad4 <HAL_I2C_Mem_Read>

}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200001f8 	.word	0x200001f8

080032f8 <bma_init>:


void bma_init (void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0

	bma_write(0x22,0x00);
 80032fc:	2100      	movs	r1, #0
 80032fe:	2022      	movs	r0, #34	; 0x22
 8003300:	f7ff ffba 	bl	8003278 <bma_write>

	bma_write(0x20,0x05);
 8003304:	2105      	movs	r1, #5
 8003306:	2020      	movs	r0, #32
 8003308:	f7ff ffb6 	bl	8003278 <bma_write>

	bma_write(0x1A,0x04);
 800330c:	2104      	movs	r1, #4
 800330e:	201a      	movs	r0, #26
 8003310:	f7ff ffb2 	bl	8003278 <bma_write>

}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b08b      	sub	sp, #44	; 0x2c
 8003320:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003322:	2414      	movs	r4, #20
 8003324:	193b      	adds	r3, r7, r4
 8003326:	0018      	movs	r0, r3
 8003328:	2314      	movs	r3, #20
 800332a:	001a      	movs	r2, r3
 800332c:	2100      	movs	r1, #0
 800332e:	f005 f905 	bl	800853c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003332:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003336:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003338:	2104      	movs	r1, #4
 800333a:	430a      	orrs	r2, r1
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
 800333e:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	2204      	movs	r2, #4
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <MX_GPIO_Init+0xd8>)
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	430a      	orrs	r2, r1
 8003354:	62da      	str	r2, [r3, #44]	; 0x2c
 8003356:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003368:	2101      	movs	r1, #1
 800336a:	430a      	orrs	r2, r1
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c
 800336e:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	2201      	movs	r2, #1
 8003374:	4013      	ands	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <MX_GPIO_Init+0xd8>)
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003380:	2102      	movs	r1, #2
 8003382:	430a      	orrs	r2, r1
 8003384:	62da      	str	r2, [r3, #44]	; 0x2c
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <MX_GPIO_Init+0xd8>)
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003392:	23a0      	movs	r3, #160	; 0xa0
 8003394:	05db      	lsls	r3, r3, #23
 8003396:	2200      	movs	r2, #0
 8003398:	2120      	movs	r1, #32
 800339a:	0018      	movs	r0, r3
 800339c:	f001 f9de 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033a0:	193b      	adds	r3, r7, r4
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	0192      	lsls	r2, r2, #6
 80033a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033a8:	193b      	adds	r3, r7, r4
 80033aa:	2284      	movs	r2, #132	; 0x84
 80033ac:	0392      	lsls	r2, r2, #14
 80033ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033b6:	193b      	adds	r3, r7, r4
 80033b8:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <MX_GPIO_Init+0xdc>)
 80033ba:	0019      	movs	r1, r3
 80033bc:	0010      	movs	r0, r2
 80033be:	f001 f84f 	bl	8004460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80033c2:	0021      	movs	r1, r4
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	2220      	movs	r2, #32
 80033c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ca:	187b      	adds	r3, r7, r1
 80033cc:	2201      	movs	r2, #1
 80033ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	187b      	adds	r3, r7, r1
 80033d8:	2200      	movs	r2, #0
 80033da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80033dc:	187a      	adds	r2, r7, r1
 80033de:	23a0      	movs	r3, #160	; 0xa0
 80033e0:	05db      	lsls	r3, r3, #23
 80033e2:	0011      	movs	r1, r2
 80033e4:	0018      	movs	r0, r3
 80033e6:	f001 f83b 	bl	8004460 <HAL_GPIO_Init>

}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b00b      	add	sp, #44	; 0x2c
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	40021000 	.word	0x40021000
 80033f8:	50000800 	.word	0x50000800

080033fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <MX_I2C1_Init+0x74>)
 8003402:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <MX_I2C1_Init+0x78>)
 8003404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <MX_I2C1_Init+0x74>)
 8003408:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <MX_I2C1_Init+0x7c>)
 800340a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800340c:	4b18      	ldr	r3, [pc, #96]	; (8003470 <MX_I2C1_Init+0x74>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003412:	4b17      	ldr	r3, [pc, #92]	; (8003470 <MX_I2C1_Init+0x74>)
 8003414:	2201      	movs	r2, #1
 8003416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <MX_I2C1_Init+0x74>)
 800341a:	2200      	movs	r2, #0
 800341c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800341e:	4b14      	ldr	r3, [pc, #80]	; (8003470 <MX_I2C1_Init+0x74>)
 8003420:	2200      	movs	r2, #0
 8003422:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <MX_I2C1_Init+0x74>)
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <MX_I2C1_Init+0x74>)
 800342c:	2200      	movs	r2, #0
 800342e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <MX_I2C1_Init+0x74>)
 8003432:	2200      	movs	r2, #0
 8003434:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <MX_I2C1_Init+0x74>)
 8003438:	0018      	movs	r0, r3
 800343a:	f001 f9ad 	bl	8004798 <HAL_I2C_Init>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003442:	f000 fa4b 	bl	80038dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <MX_I2C1_Init+0x74>)
 8003448:	2100      	movs	r1, #0
 800344a:	0018      	movs	r0, r3
 800344c:	f001 fe64 	bl	8005118 <HAL_I2CEx_ConfigAnalogFilter>
 8003450:	1e03      	subs	r3, r0, #0
 8003452:	d001      	beq.n	8003458 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003454:	f000 fa42 	bl	80038dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <MX_I2C1_Init+0x74>)
 800345a:	2100      	movs	r1, #0
 800345c:	0018      	movs	r0, r3
 800345e:	f001 fea7 	bl	80051b0 <HAL_I2CEx_ConfigDigitalFilter>
 8003462:	1e03      	subs	r3, r0, #0
 8003464:	d001      	beq.n	800346a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003466:	f000 fa39 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200001f8 	.word	0x200001f8
 8003474:	40005400 	.word	0x40005400
 8003478:	00707cbb 	.word	0x00707cbb

0800347c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b089      	sub	sp, #36	; 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	240c      	movs	r4, #12
 8003486:	193b      	adds	r3, r7, r4
 8003488:	0018      	movs	r0, r3
 800348a:	2314      	movs	r3, #20
 800348c:	001a      	movs	r2, r3
 800348e:	2100      	movs	r1, #0
 8003490:	f005 f854 	bl	800853c <memset>
  if(i2cHandle->Instance==I2C1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a18      	ldr	r2, [pc, #96]	; (80034fc <HAL_I2C_MspInit+0x80>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d12a      	bne.n	80034f4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_I2C_MspInit+0x84>)
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <HAL_I2C_MspInit+0x84>)
 80034a4:	2101      	movs	r1, #1
 80034a6:	430a      	orrs	r2, r1
 80034a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <HAL_I2C_MspInit+0x84>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	2201      	movs	r2, #1
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034b6:	193b      	adds	r3, r7, r4
 80034b8:	22c0      	movs	r2, #192	; 0xc0
 80034ba:	00d2      	lsls	r2, r2, #3
 80034bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034be:	0021      	movs	r1, r4
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	2212      	movs	r2, #18
 80034c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	2201      	movs	r2, #1
 80034ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	2203      	movs	r2, #3
 80034d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	2206      	movs	r2, #6
 80034d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d8:	187a      	adds	r2, r7, r1
 80034da:	23a0      	movs	r3, #160	; 0xa0
 80034dc:	05db      	lsls	r3, r3, #23
 80034de:	0011      	movs	r1, r2
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 ffbd 	bl	8004460 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_I2C_MspInit+0x84>)
 80034e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_I2C_MspInit+0x84>)
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	0389      	lsls	r1, r1, #14
 80034f0:	430a      	orrs	r2, r1
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b009      	add	sp, #36	; 0x24
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	40005400 	.word	0x40005400
 8003500:	40021000 	.word	0x40021000

08003504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003504:	b5b0      	push	{r4, r5, r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800350a:	f000 fdaf 	bl	800406c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800350e:	f000 f96f 	bl	80037f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003512:	f7ff ff03 	bl	800331c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003516:	f000 fd03 	bl	8003f20 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800351a:	f000 fb3d 	bl	8003b98 <MX_TIM2_Init>
  MX_TIM3_Init();
 800351e:	f000 fbd3 	bl	8003cc8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003522:	f7ff ff6b 	bl	80033fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8003526:	4b9c      	ldr	r3, [pc, #624]	; (8003798 <main+0x294>)
 8003528:	2100      	movs	r1, #0
 800352a:	0018      	movs	r0, r3
 800352c:	f002 ff0a 	bl	8006344 <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8003530:	4b99      	ldr	r3, [pc, #612]	; (8003798 <main+0x294>)
 8003532:	2104      	movs	r1, #4
 8003534:	0018      	movs	r0, r3
 8003536:	f002 ff05 	bl	8006344 <HAL_TIM_IC_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800353a:	4b97      	ldr	r3, [pc, #604]	; (8003798 <main+0x294>)
 800353c:	2108      	movs	r1, #8
 800353e:	0018      	movs	r0, r3
 8003540:	f002 fe2e 	bl	80061a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003544:	4b95      	ldr	r3, [pc, #596]	; (800379c <main+0x298>)
 8003546:	2100      	movs	r1, #0
 8003548:	0018      	movs	r0, r3
 800354a:	f002 fe29 	bl	80061a0 <HAL_TIM_PWM_Start>
    HAL_UART_Receive_IT(&huart2, &znak, 1);
 800354e:	4994      	ldr	r1, [pc, #592]	; (80037a0 <main+0x29c>)
 8003550:	4b94      	ldr	r3, [pc, #592]	; (80037a4 <main+0x2a0>)
 8003552:	2201      	movs	r2, #1
 8003554:	0018      	movs	r0, r3
 8003556:	f003 fd3d 	bl	8006fd4 <HAL_UART_Receive_IT>
    HAL_Delay(1000);
 800355a:	23fa      	movs	r3, #250	; 0xfa
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	0018      	movs	r0, r3
 8003560:	f000 fdf4 	bl	800414c <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    bma_init();
 8003564:	f7ff fec8 	bl	80032f8 <bma_init>



    oTime = HAL_GetTick();
 8003568:	f000 fde6 	bl	8004138 <HAL_GetTick>
 800356c:	0003      	movs	r3, r0
 800356e:	001a      	movs	r2, r3
 8003570:	4b8d      	ldr	r3, [pc, #564]	; (80037a8 <main+0x2a4>)
 8003572:	601a      	str	r2, [r3, #0]
  while (1)
  {

	  //stern
	  bma_read(0x4,1,data_rec);
 8003574:	4b8d      	ldr	r3, [pc, #564]	; (80037ac <main+0x2a8>)
 8003576:	001a      	movs	r2, r3
 8003578:	2101      	movs	r1, #1
 800357a:	2004      	movs	r0, #4
 800357c:	f7ff fe9c 	bl	80032b8 <bma_read>
	  //bma_read(0x0,1);
	  //sprintf(komunikat,"%c", data_rec[0]);
	   odakcel = (int)(data_rec[0] >> 2);
 8003580:	4b8a      	ldr	r3, [pc, #552]	; (80037ac <main+0x2a8>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b25b      	sxtb	r3, r3
 8003586:	109b      	asrs	r3, r3, #2
 8003588:	b25b      	sxtb	r3, r3
 800358a:	001a      	movs	r2, r3
 800358c:	4b88      	ldr	r3, [pc, #544]	; (80037b0 <main+0x2ac>)
 800358e:	601a      	str	r2, [r3, #0]

	  // sprintf(komunikat,"%c", odakcel);
	     //			  dlkom = 1;
	    // HAL_UART_Transmit(&huart2, komunikat, 1, 1000);

	   	  dTime = nTime - oTime;
 8003590:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <main+0x2b0>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b84      	ldr	r3, [pc, #528]	; (80037a8 <main+0x2a4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1ad2      	subs	r2, r2, r3
 800359a:	4b87      	ldr	r3, [pc, #540]	; (80037b8 <main+0x2b4>)
 800359c:	601a      	str	r2, [r3, #0]
	   	  oTime = nTime;
 800359e:	4b85      	ldr	r3, [pc, #532]	; (80037b4 <main+0x2b0>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b81      	ldr	r3, [pc, #516]	; (80037a8 <main+0x2a4>)
 80035a4:	601a      	str	r2, [r3, #0]

	   cumError += (odakcel*5.625)*dTime;
 80035a6:	4b85      	ldr	r3, [pc, #532]	; (80037bc <main+0x2b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	1c18      	adds	r0, r3, #0
 80035ac:	f7ff fd6a 	bl	8003084 <__aeabi_f2d>
 80035b0:	0004      	movs	r4, r0
 80035b2:	000d      	movs	r5, r1
 80035b4:	4b7e      	ldr	r3, [pc, #504]	; (80037b0 <main+0x2ac>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7ff fd0d 	bl	8002fd8 <__aeabi_i2d>
 80035be:	2200      	movs	r2, #0
 80035c0:	4b7f      	ldr	r3, [pc, #508]	; (80037c0 <main+0x2bc>)
 80035c2:	f7fe feb7 	bl	8002334 <__aeabi_dmul>
 80035c6:	0002      	movs	r2, r0
 80035c8:	000b      	movs	r3, r1
 80035ca:	603a      	str	r2, [r7, #0]
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	4b7a      	ldr	r3, [pc, #488]	; (80037b8 <main+0x2b4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7ff fd00 	bl	8002fd8 <__aeabi_i2d>
 80035d8:	0002      	movs	r2, r0
 80035da:	000b      	movs	r3, r1
 80035dc:	6838      	ldr	r0, [r7, #0]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	f7fe fea8 	bl	8002334 <__aeabi_dmul>
 80035e4:	0002      	movs	r2, r0
 80035e6:	000b      	movs	r3, r1
 80035e8:	0020      	movs	r0, r4
 80035ea:	0029      	movs	r1, r5
 80035ec:	f7fd ff64 	bl	80014b8 <__aeabi_dadd>
 80035f0:	0002      	movs	r2, r0
 80035f2:	000b      	movs	r3, r1
 80035f4:	0010      	movs	r0, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	f7ff fd8c 	bl	8003114 <__aeabi_d2f>
 80035fc:	1c02      	adds	r2, r0, #0
 80035fe:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <main+0x2b8>)
 8003600:	601a      	str	r2, [r3, #0]

	   if (cumError > 90){
 8003602:	4b6e      	ldr	r3, [pc, #440]	; (80037bc <main+0x2b8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	496f      	ldr	r1, [pc, #444]	; (80037c4 <main+0x2c0>)
 8003608:	1c18      	adds	r0, r3, #0
 800360a:	f7fc ff73 	bl	80004f4 <__aeabi_fcmpgt>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d003      	beq.n	800361a <main+0x116>
	 	  cumError = 90;
 8003612:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <main+0x2b8>)
 8003614:	4a6b      	ldr	r2, [pc, #428]	; (80037c4 <main+0x2c0>)
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e00a      	b.n	8003630 <main+0x12c>
	   }
	   else if (cumError < -90){
 800361a:	4b68      	ldr	r3, [pc, #416]	; (80037bc <main+0x2b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	496a      	ldr	r1, [pc, #424]	; (80037c8 <main+0x2c4>)
 8003620:	1c18      	adds	r0, r3, #0
 8003622:	f7fc ff53 	bl	80004cc <__aeabi_fcmplt>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d002      	beq.n	8003630 <main+0x12c>
	 	  cumError = -90;
 800362a:	4b64      	ldr	r3, [pc, #400]	; (80037bc <main+0x2b8>)
 800362c:	4a66      	ldr	r2, [pc, #408]	; (80037c8 <main+0x2c4>)
 800362e:	601a      	str	r2, [r3, #0]
	   }

	   PID = 1*(odakcel*5.625) + 0*cumError;
 8003630:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <main+0x2ac>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	0018      	movs	r0, r3
 8003636:	f7ff fccf 	bl	8002fd8 <__aeabi_i2d>
 800363a:	2200      	movs	r2, #0
 800363c:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <main+0x2bc>)
 800363e:	f7fe fe79 	bl	8002334 <__aeabi_dmul>
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	0014      	movs	r4, r2
 8003648:	001d      	movs	r5, r3
 800364a:	4b5c      	ldr	r3, [pc, #368]	; (80037bc <main+0x2b8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2100      	movs	r1, #0
 8003650:	1c18      	adds	r0, r3, #0
 8003652:	f7fd fbfb 	bl	8000e4c <__aeabi_fmul>
 8003656:	1c03      	adds	r3, r0, #0
 8003658:	1c18      	adds	r0, r3, #0
 800365a:	f7ff fd13 	bl	8003084 <__aeabi_f2d>
 800365e:	0002      	movs	r2, r0
 8003660:	000b      	movs	r3, r1
 8003662:	0020      	movs	r0, r4
 8003664:	0029      	movs	r1, r5
 8003666:	f7fd ff27 	bl	80014b8 <__aeabi_dadd>
 800366a:	0002      	movs	r2, r0
 800366c:	000b      	movs	r3, r1
 800366e:	0010      	movs	r0, r2
 8003670:	0019      	movs	r1, r3
 8003672:	f7ff fd4f 	bl	8003114 <__aeabi_d2f>
 8003676:	1c02      	adds	r2, r0, #0
 8003678:	4b54      	ldr	r3, [pc, #336]	; (80037cc <main+0x2c8>)
 800367a:	601a      	str	r2, [r3, #0]
	  // HAL_UART_Transmit(&huart2, komunikat, 1, 1000);
 	   //HAL_UART_Transmit(&huart2, (uint8_t*)komunikat, strlen(komunikat),1000);

	  //stern

	  uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800367c:	4b46      	ldr	r3, [pc, #280]	; (8003798 <main+0x294>)
 800367e:	2100      	movs	r1, #0
 8003680:	0018      	movs	r0, r3
 8003682:	f003 f851 	bl	8006728 <HAL_TIM_ReadCapturedValue>
 8003686:	0003      	movs	r3, r0
 8003688:	60fb      	str	r3, [r7, #12]
	  uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800368a:	4b43      	ldr	r3, [pc, #268]	; (8003798 <main+0x294>)
 800368c:	2104      	movs	r1, #4
 800368e:	0018      	movs	r0, r3
 8003690:	f003 f84a 	bl	8006728 <HAL_TIM_ReadCapturedValue>
 8003694:	0003      	movs	r3, r0
 8003696:	60bb      	str	r3, [r7, #8]
	  	 // sprintf((char*)msg,"Odczyt: %lu\n",start-2236);

	  	   changed_value = (stop-start)/58.0f;
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fd fec8 	bl	8001434 <__aeabi_ui2f>
 80036a4:	1c03      	adds	r3, r0, #0
 80036a6:	494a      	ldr	r1, [pc, #296]	; (80037d0 <main+0x2cc>)
 80036a8:	1c18      	adds	r0, r3, #0
 80036aa:	f7fd fa07 	bl	8000abc <__aeabi_fdiv>
 80036ae:	1c03      	adds	r3, r0, #0
 80036b0:	1c1a      	adds	r2, r3, #0
 80036b2:	4b48      	ldr	r3, [pc, #288]	; (80037d4 <main+0x2d0>)
 80036b4:	601a      	str	r2, [r3, #0]

	  	  	sprintf((char*)msg,"ODL %.1f cm\n",(stop-start) / 58.0f);
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fd feb9 	bl	8001434 <__aeabi_ui2f>
 80036c2:	1c03      	adds	r3, r0, #0
 80036c4:	4942      	ldr	r1, [pc, #264]	; (80037d0 <main+0x2cc>)
 80036c6:	1c18      	adds	r0, r3, #0
 80036c8:	f7fd f9f8 	bl	8000abc <__aeabi_fdiv>
 80036cc:	1c03      	adds	r3, r0, #0
 80036ce:	1c18      	adds	r0, r3, #0
 80036d0:	f7ff fcd8 	bl	8003084 <__aeabi_f2d>
 80036d4:	0002      	movs	r2, r0
 80036d6:	000b      	movs	r3, r1
 80036d8:	493f      	ldr	r1, [pc, #252]	; (80037d8 <main+0x2d4>)
 80036da:	4840      	ldr	r0, [pc, #256]	; (80037dc <main+0x2d8>)
 80036dc:	f005 fba4 	bl	8008e28 <siprintf>
	  	  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),1000);
 80036e0:	4b3e      	ldr	r3, [pc, #248]	; (80037dc <main+0x2d8>)
 80036e2:	0018      	movs	r0, r3
 80036e4:	f7fc fd10 	bl	8000108 <strlen>
 80036e8:	0003      	movs	r3, r0
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	23fa      	movs	r3, #250	; 0xfa
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	493a      	ldr	r1, [pc, #232]	; (80037dc <main+0x2d8>)
 80036f2:	482c      	ldr	r0, [pc, #176]	; (80037a4 <main+0x2a0>)
 80036f4:	f003 fbc6 	bl	8006e84 <HAL_UART_Transmit>

	  	  	HAL_Delay(100);
 80036f8:	2064      	movs	r0, #100	; 0x64
 80036fa:	f000 fd27 	bl	800414c <HAL_Delay>
	  	//  	HAL_Delay(1000);
	  	//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1530);//stoi jak chuj
	  	 // set_ang(1800);
	  	  //HAL_Delay(1000);
	  	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 830);
	  	  if ( PID <-20)
 80036fe:	4b33      	ldr	r3, [pc, #204]	; (80037cc <main+0x2c8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4937      	ldr	r1, [pc, #220]	; (80037e0 <main+0x2dc>)
 8003704:	1c18      	adds	r0, r3, #0
 8003706:	f7fc fee1 	bl	80004cc <__aeabi_fcmplt>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d00b      	beq.n	8003726 <main+0x222>
	  	  {
	  	  	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1530);//stoi jak chuj

	  		 set_move(changed_value-25, 0);
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <main+0x2d0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4934      	ldr	r1, [pc, #208]	; (80037e4 <main+0x2e0>)
 8003714:	1c18      	adds	r0, r3, #0
 8003716:	f7fd fcbf 	bl	8001098 <__aeabi_fsub>
 800371a:	1c03      	adds	r3, r0, #0
 800371c:	2100      	movs	r1, #0
 800371e:	1c18      	adds	r0, r3, #0
 8003720:	f000 f8e2 	bl	80038e8 <set_move>
 8003724:	e726      	b.n	8003574 <main+0x70>
	  	  }
	  	  else if ( PID > 20)
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <main+0x2c8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	492f      	ldr	r1, [pc, #188]	; (80037e8 <main+0x2e4>)
 800372c:	1c18      	adds	r0, r3, #0
 800372e:	f7fc fee1 	bl	80004f4 <__aeabi_fcmpgt>
 8003732:	1e03      	subs	r3, r0, #0
 8003734:	d00f      	beq.n	8003756 <main+0x252>
	  	  {
	  	  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1530);//stoi jak chuj
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <main+0x298>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <main+0x2e8>)
 800373c:	635a      	str	r2, [r3, #52]	; 0x34

	  		set_move((25 - changed_value),1);
 800373e:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <main+0x2d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	1c19      	adds	r1, r3, #0
 8003744:	4827      	ldr	r0, [pc, #156]	; (80037e4 <main+0x2e0>)
 8003746:	f7fd fca7 	bl	8001098 <__aeabi_fsub>
 800374a:	1c03      	adds	r3, r0, #0
 800374c:	2101      	movs	r1, #1
 800374e:	1c18      	adds	r0, r3, #0
 8003750:	f000 f8ca 	bl	80038e8 <set_move>
 8003754:	e70e      	b.n	8003574 <main+0x70>
	  	  }

	  	  else{
	  		  	  if(changed_value<=25)
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <main+0x2d0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4922      	ldr	r1, [pc, #136]	; (80037e4 <main+0x2e0>)
 800375c:	1c18      	adds	r0, r3, #0
 800375e:	f7fc febf 	bl	80004e0 <__aeabi_fcmple>
 8003762:	1e03      	subs	r3, r0, #0
 8003764:	d00b      	beq.n	800377e <main+0x27a>
	  		  	  {
	  		  		  set_move((25 - changed_value),1);
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <main+0x2d0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1c19      	adds	r1, r3, #0
 800376c:	481d      	ldr	r0, [pc, #116]	; (80037e4 <main+0x2e0>)
 800376e:	f7fd fc93 	bl	8001098 <__aeabi_fsub>
 8003772:	1c03      	adds	r3, r0, #0
 8003774:	2101      	movs	r1, #1
 8003776:	1c18      	adds	r0, r3, #0
 8003778:	f000 f8b6 	bl	80038e8 <set_move>
 800377c:	e6fa      	b.n	8003574 <main+0x70>
	  		  	  }
	  		  	  else
	  		  	  {
	  		  		  set_move(changed_value-25, 0);
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <main+0x2d0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4918      	ldr	r1, [pc, #96]	; (80037e4 <main+0x2e0>)
 8003784:	1c18      	adds	r0, r3, #0
 8003786:	f7fd fc87 	bl	8001098 <__aeabi_fsub>
 800378a:	1c03      	adds	r3, r0, #0
 800378c:	2100      	movs	r1, #0
 800378e:	1c18      	adds	r0, r3, #0
 8003790:	f000 f8aa 	bl	80038e8 <set_move>
  {
 8003794:	e6ee      	b.n	8003574 <main+0x70>
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	200002b0 	.word	0x200002b0
 800379c:	200002f0 	.word	0x200002f0
 80037a0:	20000288 	.word	0x20000288
 80037a4:	20000330 	.word	0x20000330
 80037a8:	200002a0 	.word	0x200002a0
 80037ac:	2000028c 	.word	0x2000028c
 80037b0:	20000294 	.word	0x20000294
 80037b4:	200002a4 	.word	0x200002a4
 80037b8:	200002a8 	.word	0x200002a8
 80037bc:	2000029c 	.word	0x2000029c
 80037c0:	40168000 	.word	0x40168000
 80037c4:	42b40000 	.word	0x42b40000
 80037c8:	c2b40000 	.word	0xc2b40000
 80037cc:	20000298 	.word	0x20000298
 80037d0:	42680000 	.word	0x42680000
 80037d4:	20000284 	.word	0x20000284
 80037d8:	0800b498 	.word	0x0800b498
 80037dc:	20000244 	.word	0x20000244
 80037e0:	c1a00000 	.word	0xc1a00000
 80037e4:	41c80000 	.word	0x41c80000
 80037e8:	41a00000 	.word	0x41a00000
 80037ec:	000005fa 	.word	0x000005fa

080037f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b09f      	sub	sp, #124	; 0x7c
 80037f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037f6:	2440      	movs	r4, #64	; 0x40
 80037f8:	193b      	adds	r3, r7, r4
 80037fa:	0018      	movs	r0, r3
 80037fc:	2338      	movs	r3, #56	; 0x38
 80037fe:	001a      	movs	r2, r3
 8003800:	2100      	movs	r1, #0
 8003802:	f004 fe9b 	bl	800853c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003806:	232c      	movs	r3, #44	; 0x2c
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	0018      	movs	r0, r3
 800380c:	2314      	movs	r3, #20
 800380e:	001a      	movs	r2, r3
 8003810:	2100      	movs	r1, #0
 8003812:	f004 fe93 	bl	800853c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	0018      	movs	r0, r3
 800381a:	2328      	movs	r3, #40	; 0x28
 800381c:	001a      	movs	r2, r3
 800381e:	2100      	movs	r1, #0
 8003820:	f004 fe8c 	bl	800853c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <SystemClock_Config+0xe4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2b      	ldr	r2, [pc, #172]	; (80038d8 <SystemClock_Config+0xe8>)
 800382a:	401a      	ands	r2, r3
 800382c:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <SystemClock_Config+0xe4>)
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	0109      	lsls	r1, r1, #4
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003836:	0021      	movs	r1, r4
 8003838:	187b      	adds	r3, r7, r1
 800383a:	2202      	movs	r2, #2
 800383c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800383e:	187b      	adds	r3, r7, r1
 8003840:	2201      	movs	r2, #1
 8003842:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003844:	187b      	adds	r3, r7, r1
 8003846:	2210      	movs	r2, #16
 8003848:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800384a:	187b      	adds	r3, r7, r1
 800384c:	2202      	movs	r2, #2
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003850:	187b      	adds	r3, r7, r1
 8003852:	2200      	movs	r2, #0
 8003854:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8003856:	187b      	adds	r3, r7, r1
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	0312      	lsls	r2, r2, #12
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	0412      	lsls	r2, r2, #16
 8003864:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003866:	187b      	adds	r3, r7, r1
 8003868:	0018      	movs	r0, r3
 800386a:	f001 fced 	bl	8005248 <HAL_RCC_OscConfig>
 800386e:	1e03      	subs	r3, r0, #0
 8003870:	d001      	beq.n	8003876 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003872:	f000 f833 	bl	80038dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	187b      	adds	r3, r7, r1
 800387a:	220f      	movs	r2, #15
 800387c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800387e:	187b      	adds	r3, r7, r1
 8003880:	2203      	movs	r2, #3
 8003882:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003884:	187b      	adds	r3, r7, r1
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800388a:	187b      	adds	r3, r7, r1
 800388c:	2200      	movs	r2, #0
 800388e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003890:	187b      	adds	r3, r7, r1
 8003892:	2200      	movs	r2, #0
 8003894:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003896:	187b      	adds	r3, r7, r1
 8003898:	2101      	movs	r1, #1
 800389a:	0018      	movs	r0, r3
 800389c:	f002 f8a8 	bl	80059f0 <HAL_RCC_ClockConfig>
 80038a0:	1e03      	subs	r3, r0, #0
 80038a2:	d001      	beq.n	80038a8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80038a4:	f000 f81a 	bl	80038dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	220a      	movs	r2, #10
 80038ac:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	2200      	movs	r2, #0
 80038b8:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	0018      	movs	r0, r3
 80038be:	f002 fabb 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d001      	beq.n	80038ca <SystemClock_Config+0xda>
  {
    Error_Handler();
 80038c6:	f000 f809 	bl	80038dc <Error_Handler>
  }
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b01f      	add	sp, #124	; 0x7c
 80038d0:	bd90      	pop	{r4, r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	40007000 	.word	0x40007000
 80038d8:	ffffe7ff 	.word	0xffffe7ff

080038dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038e0:	b672      	cpsid	i
}
 80038e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <Error_Handler+0x8>
	...

080038e8 <set_move>:
#include "tim.h"



void set_move(float speed_level, uint8_t direction )
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	000a      	movs	r2, r1
 80038f2:	1cfb      	adds	r3, r7, #3
 80038f4:	701a      	strb	r2, [r3, #0]
	if(direction == 0 &&speed_level <101 && speed_level>=0){		// krecenie w lewo
 80038f6:	1cfb      	adds	r3, r7, #3
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11e      	bne.n	800393c <set_move+0x54>
 80038fe:	4924      	ldr	r1, [pc, #144]	; (8003990 <set_move+0xa8>)
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fc fde3 	bl	80004cc <__aeabi_fcmplt>
 8003906:	1e03      	subs	r3, r0, #0
 8003908:	d018      	beq.n	800393c <set_move+0x54>
 800390a:	2100      	movs	r1, #0
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fc fdfb 	bl	8000508 <__aeabi_fcmpge>
 8003912:	1e03      	subs	r3, r0, #0
 8003914:	d012      	beq.n	800393c <set_move+0x54>
		float servo_speed = PWM_STOP-(speed_level*STEP_SPEED);
 8003916:	491f      	ldr	r1, [pc, #124]	; (8003994 <set_move+0xac>)
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fd fa97 	bl	8000e4c <__aeabi_fmul>
 800391e:	1c03      	adds	r3, r0, #0
 8003920:	1c19      	adds	r1, r3, #0
 8003922:	481d      	ldr	r0, [pc, #116]	; (8003998 <set_move+0xb0>)
 8003924:	f7fd fbb8 	bl	8001098 <__aeabi_fsub>
 8003928:	1c03      	adds	r3, r0, #0
 800392a:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, servo_speed);
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <set_move+0xb4>)
 800392e:	681c      	ldr	r4, [r3, #0]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7fc fe41 	bl	80005b8 <__aeabi_f2uiz>
 8003936:	0003      	movs	r3, r0
 8003938:	6363      	str	r3, [r4, #52]	; 0x34
	if(direction == 0 &&speed_level <101 && speed_level>=0){		// krecenie w lewo
 800393a:	e025      	b.n	8003988 <set_move+0xa0>
	}
	else if(direction == 1 && speed_level <101 && speed_level>=0){		// krecenie w prawo
 800393c:	1cfb      	adds	r3, r7, #3
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d120      	bne.n	8003986 <set_move+0x9e>
 8003944:	4912      	ldr	r1, [pc, #72]	; (8003990 <set_move+0xa8>)
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fc fdc0 	bl	80004cc <__aeabi_fcmplt>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d100      	bne.n	8003952 <set_move+0x6a>
			float servo_speed = PWM_STOP+(speed_level*STEP_SPEED);
				__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, servo_speed);
			}
	else{
		return;
 8003950:	e019      	b.n	8003986 <set_move+0x9e>
	else if(direction == 1 && speed_level <101 && speed_level>=0){		// krecenie w prawo
 8003952:	2100      	movs	r1, #0
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fc fdd7 	bl	8000508 <__aeabi_fcmpge>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d100      	bne.n	8003960 <set_move+0x78>
		return;
 800395e:	e012      	b.n	8003986 <set_move+0x9e>
			float servo_speed = PWM_STOP+(speed_level*STEP_SPEED);
 8003960:	490c      	ldr	r1, [pc, #48]	; (8003994 <set_move+0xac>)
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fa72 	bl	8000e4c <__aeabi_fmul>
 8003968:	1c03      	adds	r3, r0, #0
 800396a:	490b      	ldr	r1, [pc, #44]	; (8003998 <set_move+0xb0>)
 800396c:	1c18      	adds	r0, r3, #0
 800396e:	f7fc ff07 	bl	8000780 <__aeabi_fadd>
 8003972:	1c03      	adds	r3, r0, #0
 8003974:	60bb      	str	r3, [r7, #8]
				__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, servo_speed);
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <set_move+0xb4>)
 8003978:	681c      	ldr	r4, [r3, #0]
 800397a:	68b8      	ldr	r0, [r7, #8]
 800397c:	f7fc fe1c 	bl	80005b8 <__aeabi_f2uiz>
 8003980:	0003      	movs	r3, r0
 8003982:	6363      	str	r3, [r4, #52]	; 0x34
	else if(direction == 1 && speed_level <101 && speed_level>=0){		// krecenie w prawo
 8003984:	e000      	b.n	8003988 <set_move+0xa0>
		return;
 8003986:	46c0      	nop			; (mov r8, r8)
	}
	}
 8003988:	46bd      	mov	sp, r7
 800398a:	b005      	add	sp, #20
 800398c:	bd90      	pop	{r4, r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	42ca0000 	.word	0x42ca0000
 8003994:	40e00000 	.word	0x40e00000
 8003998:	44bf4000 	.word	0x44bf4000
 800399c:	200002f0 	.word	0x200002f0

080039a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <HAL_MspInit+0x24>)
 80039a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_MspInit+0x24>)
 80039aa:	2101      	movs	r1, #1
 80039ac:	430a      	orrs	r2, r1
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <HAL_MspInit+0x24>)
 80039b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_MspInit+0x24>)
 80039b6:	2180      	movs	r1, #128	; 0x80
 80039b8:	0549      	lsls	r1, r1, #21
 80039ba:	430a      	orrs	r2, r1
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000

080039c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039cc:	e7fe      	b.n	80039cc <NMI_Handler+0x4>

080039ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039d2:	e7fe      	b.n	80039d2 <HardFault_Handler+0x4>

080039d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ec:	f000 fb92 	bl	8004114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <USART2_IRQHandler+0x14>)
 80039fe:	0018      	movs	r0, r3
 8003a00:	f003 fb50 	bl	80070a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	20000330 	.word	0x20000330

08003a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
	return 1;
 8003a14:	2301      	movs	r3, #1
}
 8003a16:	0018      	movs	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_kill>:

int _kill(int pid, int sig)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a26:	f004 fd5f 	bl	80084e8 <__errno>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	2216      	movs	r2, #22
 8003a2e:	601a      	str	r2, [r3, #0]
	return -1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	425b      	negs	r3, r3
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_exit>:

void _exit (int status)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a44:	2301      	movs	r3, #1
 8003a46:	425a      	negs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0011      	movs	r1, r2
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7ff ffe5 	bl	8003a1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a52:	e7fe      	b.n	8003a52 <_exit+0x16>

08003a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e00a      	b.n	8003a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a66:	e000      	b.n	8003a6a <_read+0x16>
 8003a68:	bf00      	nop
 8003a6a:	0001      	movs	r1, r0
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	60ba      	str	r2, [r7, #8]
 8003a72:	b2ca      	uxtb	r2, r1
 8003a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	dbf0      	blt.n	8003a66 <_read+0x12>
	}

return len;
 8003a84:	687b      	ldr	r3, [r7, #4]
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b006      	add	sp, #24
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e009      	b.n	8003ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	60ba      	str	r2, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	e000      	b.n	8003aae <_write+0x20>
 8003aac:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	dbf1      	blt.n	8003aa0 <_write+0x12>
	}
	return len;
 8003abc:	687b      	ldr	r3, [r7, #4]
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b006      	add	sp, #24
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_close>:

int _close(int file)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
	return -1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	425b      	negs	r3, r3
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b002      	add	sp, #8
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	0192      	lsls	r2, r2, #6
 8003aea:	605a      	str	r2, [r3, #4]
	return 0;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	0018      	movs	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b002      	add	sp, #8
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_isatty>:

int _isatty(int file)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
	return 1;
 8003afe:	2301      	movs	r3, #1
}
 8003b00:	0018      	movs	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
	return 0;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	0018      	movs	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b004      	add	sp, #16
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <_sbrk+0x5c>)
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <_sbrk+0x60>)
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <_sbrk+0x64>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <_sbrk+0x64>)
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <_sbrk+0x68>)
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <_sbrk+0x64>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d207      	bcs.n	8003b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b50:	f004 fcca 	bl	80084e8 <__errno>
 8003b54:	0003      	movs	r3, r0
 8003b56:	220c      	movs	r2, #12
 8003b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	425b      	negs	r3, r3
 8003b5e:	e009      	b.n	8003b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <_sbrk+0x64>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <_sbrk+0x64>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	18d2      	adds	r2, r2, r3
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <_sbrk+0x64>)
 8003b70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b006      	add	sp, #24
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20005000 	.word	0x20005000
 8003b80:	00000400 	.word	0x00000400
 8003b84:	200002ac 	.word	0x200002ac
 8003b88:	200003c8 	.word	0x200003c8

08003b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	2308      	movs	r3, #8
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	2100      	movs	r1, #0
 8003baa:	f004 fcc7 	bl	800853c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003bae:	2310      	movs	r3, #16
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	2100      	movs	r1, #0
 8003bba:	f004 fcbf 	bl	800853c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bbe:	003b      	movs	r3, r7
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f004 fcb8 	bl	800853c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bcc:	4b3c      	ldr	r3, [pc, #240]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	05d2      	lsls	r2, r2, #23
 8003bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003bd6:	221f      	movs	r2, #31
 8003bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bda:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003be0:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003be2:	4a38      	ldr	r2, [pc, #224]	; (8003cc4 <MX_TIM2_Init+0x12c>)
 8003be4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003be6:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bec:	4b34      	ldr	r3, [pc, #208]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003bf2:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f002 fb65 	bl	80062c4 <HAL_TIM_IC_Init>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003bfe:	f7ff fe6d 	bl	80038dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c02:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003c04:	0018      	movs	r0, r3
 8003c06:	f002 fa8b 	bl	8006120 <HAL_TIM_PWM_Init>
 8003c0a:	1e03      	subs	r3, r0, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003c0e:	f7ff fe65 	bl	80038dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c12:	2120      	movs	r1, #32
 8003c14:	187b      	adds	r3, r7, r1
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c20:	187a      	adds	r2, r7, r1
 8003c22:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f003 f85c 	bl	8006ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c2c:	1e03      	subs	r3, r0, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003c30:	f7ff fe54 	bl	80038dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c34:	2110      	movs	r1, #16
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	2201      	movs	r2, #1
 8003c40:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003c4e:	1879      	adds	r1, r7, r1
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	0018      	movs	r0, r3
 8003c56:	f002 fbfd 	bl	8006454 <HAL_TIM_IC_ConfigChannel>
 8003c5a:	1e03      	subs	r3, r0, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8003c5e:	f7ff fe3d 	bl	80038dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003c62:	2110      	movs	r1, #16
 8003c64:	187b      	adds	r3, r7, r1
 8003c66:	2202      	movs	r2, #2
 8003c68:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003c6a:	187b      	adds	r3, r7, r1
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003c70:	1879      	adds	r1, r7, r1
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003c74:	2204      	movs	r2, #4
 8003c76:	0018      	movs	r0, r3
 8003c78:	f002 fbec 	bl	8006454 <HAL_TIM_IC_ConfigChannel>
 8003c7c:	1e03      	subs	r3, r0, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8003c80:	f7ff fe2c 	bl	80038dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c84:	003b      	movs	r3, r7
 8003c86:	2260      	movs	r2, #96	; 0x60
 8003c88:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8003c8a:	003b      	movs	r3, r7
 8003c8c:	220a      	movs	r2, #10
 8003c8e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c90:	003b      	movs	r3, r7
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c96:	003b      	movs	r3, r7
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c9c:	0039      	movs	r1, r7
 8003c9e:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f002 fc7a 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 8003ca8:	1e03      	subs	r3, r0, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8003cac:	f7ff fe16 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <MX_TIM2_Init+0x128>)
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f8cc 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b00a      	add	sp, #40	; 0x28
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	200002b0 	.word	0x200002b0
 8003cc4:	0000ffff 	.word	0x0000ffff

08003cc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cce:	2310      	movs	r3, #16
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	2100      	movs	r1, #0
 8003cda:	f004 fc2f 	bl	800853c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cde:	003b      	movs	r3, r7
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	2310      	movs	r3, #16
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f004 fc28 	bl	800853c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003cee:	4a29      	ldr	r2, [pc, #164]	; (8003d94 <MX_TIM3_Init+0xcc>)
 8003cf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003cf4:	221f      	movs	r2, #31
 8003cf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf8:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003cfe:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003d00:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <MX_TIM3_Init+0xd0>)
 8003d02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d04:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d0a:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003d12:	0018      	movs	r0, r3
 8003d14:	f002 fa04 	bl	8006120 <HAL_TIM_PWM_Init>
 8003d18:	1e03      	subs	r3, r0, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003d1c:	f7ff fdde 	bl	80038dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d20:	2110      	movs	r1, #16
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d2e:	187a      	adds	r2, r7, r1
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003d32:	0011      	movs	r1, r2
 8003d34:	0018      	movs	r0, r3
 8003d36:	f002 ffd5 	bl	8006ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d3a:	1e03      	subs	r3, r0, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003d3e:	f7ff fdcd 	bl	80038dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d42:	003b      	movs	r3, r7
 8003d44:	2260      	movs	r2, #96	; 0x60
 8003d46:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d48:	003b      	movs	r3, r7
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d4e:	003b      	movs	r3, r7
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d54:	003b      	movs	r3, r7
 8003d56:	2200      	movs	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d5a:	0039      	movs	r1, r7
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	0018      	movs	r0, r3
 8003d62:	f002 fc1b 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d001      	beq.n	8003d6e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003d6a:	f7ff fdb7 	bl	80038dc <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003d70:	2104      	movs	r1, #4
 8003d72:	0018      	movs	r0, r3
 8003d74:	f003 f814 	bl	8006da0 <HAL_TIMEx_RemapConfig>
 8003d78:	1e03      	subs	r3, r0, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003d7c:	f7ff fdae 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <MX_TIM3_Init+0xc8>)
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 f864 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b006      	add	sp, #24
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200002f0 	.word	0x200002f0
 8003d94:	40000400 	.word	0x40000400
 8003d98:	00004e1f 	.word	0x00004e1f

08003d9c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	240c      	movs	r4, #12
 8003da6:	193b      	adds	r3, r7, r4
 8003da8:	0018      	movs	r0, r3
 8003daa:	2314      	movs	r3, #20
 8003dac:	001a      	movs	r2, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	f004 fbc4 	bl	800853c <memset>
  if(tim_icHandle->Instance==TIM2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	05db      	lsls	r3, r3, #23
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d129      	bne.n	8003e14 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dc0:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <HAL_TIM_IC_MspInit+0x80>)
 8003dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc4:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <HAL_TIM_IC_MspInit+0x80>)
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_TIM_IC_MspInit+0x80>)
 8003dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd0:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_TIM_IC_MspInit+0x80>)
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_TIM_IC_MspInit+0x80>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	2201      	movs	r2, #1
 8003dde:	4013      	ands	r3, r2
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003de4:	193b      	adds	r3, r7, r4
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	0212      	lsls	r2, r2, #8
 8003dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dec:	0021      	movs	r1, r4
 8003dee:	187b      	adds	r3, r7, r1
 8003df0:	2202      	movs	r2, #2
 8003df2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfa:	187b      	adds	r3, r7, r1
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8003e00:	187b      	adds	r3, r7, r1
 8003e02:	2205      	movs	r2, #5
 8003e04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e06:	187a      	adds	r2, r7, r1
 8003e08:	23a0      	movs	r3, #160	; 0xa0
 8003e0a:	05db      	lsls	r3, r3, #23
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 fb26 	bl	8004460 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b009      	add	sp, #36	; 0x24
 8003e1a:	bd90      	pop	{r4, r7, pc}
 8003e1c:	40021000 	.word	0x40021000

08003e20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a06      	ldr	r2, [pc, #24]	; (8003e48 <HAL_TIM_PWM_MspInit+0x28>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d105      	bne.n	8003e3e <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_TIM_PWM_MspInit+0x2c>)
 8003e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_TIM_PWM_MspInit+0x2c>)
 8003e38:	2102      	movs	r1, #2
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40021000 	.word	0x40021000

08003e50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b08b      	sub	sp, #44	; 0x2c
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	2414      	movs	r4, #20
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	2314      	movs	r3, #20
 8003e60:	001a      	movs	r2, r3
 8003e62:	2100      	movs	r1, #0
 8003e64:	f004 fb6a 	bl	800853c <memset>
  if(timHandle->Instance==TIM2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	05db      	lsls	r3, r3, #23
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d123      	bne.n	8003ebc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e74:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <HAL_TIM_MspPostInit+0xc4>)
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <HAL_TIM_MspPostInit+0xc4>)
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_TIM_MspPostInit+0xc4>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	2202      	movs	r2, #2
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e8c:	193b      	adds	r3, r7, r4
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	00d2      	lsls	r2, r2, #3
 8003e92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	0021      	movs	r1, r4
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	2202      	movs	r2, #2
 8003e9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2202      	movs	r2, #2
 8003eac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <HAL_TIM_MspPostInit+0xc8>)
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	0010      	movs	r0, r2
 8003eb6:	f000 fad3 	bl	8004460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003eba:	e027      	b.n	8003f0c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a16      	ldr	r2, [pc, #88]	; (8003f1c <HAL_TIM_MspPostInit+0xcc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d122      	bne.n	8003f0c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <HAL_TIM_MspPostInit+0xc4>)
 8003ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_TIM_MspPostInit+0xc4>)
 8003ecc:	2101      	movs	r1, #1
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <HAL_TIM_MspPostInit+0xc4>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ede:	2114      	movs	r1, #20
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	2202      	movs	r2, #2
 8003eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef2:	187b      	adds	r3, r7, r1
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	2202      	movs	r2, #2
 8003efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003efe:	187a      	adds	r2, r7, r1
 8003f00:	23a0      	movs	r3, #160	; 0xa0
 8003f02:	05db      	lsls	r3, r3, #23
 8003f04:	0011      	movs	r1, r2
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 faaa 	bl	8004460 <HAL_GPIO_Init>
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b00b      	add	sp, #44	; 0x2c
 8003f12:	bd90      	pop	{r4, r7, pc}
 8003f14:	40021000 	.word	0x40021000
 8003f18:	50000400 	.word	0x50000400
 8003f1c:	40000400 	.word	0x40000400

08003f20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <MX_USART2_UART_Init+0x5c>)
 8003f28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f2c:	22e1      	movs	r2, #225	; 0xe1
 8003f2e:	0252      	lsls	r2, r2, #9
 8003f30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f46:	220c      	movs	r2, #12
 8003f48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <MX_USART2_UART_Init+0x58>)
 8003f64:	0018      	movs	r0, r3
 8003f66:	f002 ff39 	bl	8006ddc <HAL_UART_Init>
 8003f6a:	1e03      	subs	r3, r0, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003f6e:	f7ff fcb5 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000330 	.word	0x20000330
 8003f7c:	40004400 	.word	0x40004400

08003f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	240c      	movs	r4, #12
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	2314      	movs	r3, #20
 8003f90:	001a      	movs	r2, r3
 8003f92:	2100      	movs	r1, #0
 8003f94:	f004 fad2 	bl	800853c <memset>
  if(uartHandle->Instance==USART2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <HAL_UART_MspInit+0x90>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d131      	bne.n	8004006 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <HAL_UART_MspInit+0x94>)
 8003fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <HAL_UART_MspInit+0x94>)
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0289      	lsls	r1, r1, #10
 8003fac:	430a      	orrs	r2, r1
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb0:	4b18      	ldr	r3, [pc, #96]	; (8004014 <HAL_UART_MspInit+0x94>)
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <HAL_UART_MspInit+0x94>)
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <HAL_UART_MspInit+0x94>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003fc8:	0021      	movs	r1, r4
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	220c      	movs	r2, #12
 8003fce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	187b      	adds	r3, r7, r1
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	2203      	movs	r2, #3
 8003fe0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe8:	187a      	adds	r2, r7, r1
 8003fea:	23a0      	movs	r3, #160	; 0xa0
 8003fec:	05db      	lsls	r3, r3, #23
 8003fee:	0011      	movs	r1, r2
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f000 fa35 	bl	8004460 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	201c      	movs	r0, #28
 8003ffc:	f000 f976 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004000:	201c      	movs	r0, #28
 8004002:	f000 f988 	bl	8004316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b009      	add	sp, #36	; 0x24
 800400c:	bd90      	pop	{r4, r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	40004400 	.word	0x40004400
 8004014:	40021000 	.word	0x40021000

08004018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004018:	480d      	ldr	r0, [pc, #52]	; (8004050 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800401a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800401c:	480d      	ldr	r0, [pc, #52]	; (8004054 <LoopForever+0x6>)
  ldr r1, =_edata
 800401e:	490e      	ldr	r1, [pc, #56]	; (8004058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004020:	4a0e      	ldr	r2, [pc, #56]	; (800405c <LoopForever+0xe>)
  movs r3, #0
 8004022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004024:	e002      	b.n	800402c <LoopCopyDataInit>

08004026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800402a:	3304      	adds	r3, #4

0800402c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800402c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800402e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004030:	d3f9      	bcc.n	8004026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004032:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004034:	4c0b      	ldr	r4, [pc, #44]	; (8004064 <LoopForever+0x16>)
  movs r3, #0
 8004036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004038:	e001      	b.n	800403e <LoopFillZerobss>

0800403a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800403a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800403c:	3204      	adds	r2, #4

0800403e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800403e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004040:	d3fb      	bcc.n	800403a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004042:	f7ff fda3 	bl	8003b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004046:	f004 fa55 	bl	80084f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800404a:	f7ff fa5b 	bl	8003504 <main>

0800404e <LoopForever>:

LoopForever:
    b LoopForever
 800404e:	e7fe      	b.n	800404e <LoopForever>
   ldr   r0, =_estack
 8004050:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004058:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800405c:	0800ba3c 	.word	0x0800ba3c
  ldr r2, =_sbss
 8004060:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004064:	200003c8 	.word	0x200003c8

08004068 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004068:	e7fe      	b.n	8004068 <ADC1_COMP_IRQHandler>
	...

0800406c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004072:	1dfb      	adds	r3, r7, #7
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_Init+0x3c>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_Init+0x3c>)
 800407e:	2140      	movs	r1, #64	; 0x40
 8004080:	430a      	orrs	r2, r1
 8004082:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004084:	2000      	movs	r0, #0
 8004086:	f000 f811 	bl	80040ac <HAL_InitTick>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d003      	beq.n	8004096 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800408e:	1dfb      	adds	r3, r7, #7
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e001      	b.n	800409a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004096:	f7ff fc83 	bl	80039a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	781b      	ldrb	r3, [r3, #0]
}
 800409e:	0018      	movs	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b002      	add	sp, #8
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	40022000 	.word	0x40022000

080040ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_InitTick+0x5c>)
 80040b6:	681c      	ldr	r4, [r3, #0]
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_InitTick+0x60>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	0019      	movs	r1, r3
 80040be:	23fa      	movs	r3, #250	; 0xfa
 80040c0:	0098      	lsls	r0, r3, #2
 80040c2:	f7fc f83d 	bl	8000140 <__udivsi3>
 80040c6:	0003      	movs	r3, r0
 80040c8:	0019      	movs	r1, r3
 80040ca:	0020      	movs	r0, r4
 80040cc:	f7fc f838 	bl	8000140 <__udivsi3>
 80040d0:	0003      	movs	r3, r0
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f92f 	bl	8004336 <HAL_SYSTICK_Config>
 80040d8:	1e03      	subs	r3, r0, #0
 80040da:	d001      	beq.n	80040e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e00f      	b.n	8004100 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d80b      	bhi.n	80040fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	2301      	movs	r3, #1
 80040ea:	425b      	negs	r3, r3
 80040ec:	2200      	movs	r2, #0
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 f8fc 	bl	80042ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_InitTick+0x64>)
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e000      	b.n	8004100 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b003      	add	sp, #12
 8004106:	bd90      	pop	{r4, r7, pc}
 8004108:	20000000 	.word	0x20000000
 800410c:	20000008 	.word	0x20000008
 8004110:	20000004 	.word	0x20000004

08004114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_IncTick+0x1c>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	001a      	movs	r2, r3
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_IncTick+0x20>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	18d2      	adds	r2, r2, r3
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_IncTick+0x20>)
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	46c0      	nop			; (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	20000008 	.word	0x20000008
 8004134:	200003b4 	.word	0x200003b4

08004138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  return uwTick;
 800413c:	4b02      	ldr	r3, [pc, #8]	; (8004148 <HAL_GetTick+0x10>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	200003b4 	.word	0x200003b4

0800414c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7ff fff0 	bl	8004138 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	d005      	beq.n	8004172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_Delay+0x44>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	001a      	movs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	189b      	adds	r3, r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	f7ff ffe0 	bl	8004138 <HAL_GetTick>
 8004178:	0002      	movs	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d8f7      	bhi.n	8004174 <HAL_Delay+0x28>
  {
  }
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	46bd      	mov	sp, r7
 800418a:	b004      	add	sp, #16
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	20000008 	.word	0x20000008

08004194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	0002      	movs	r2, r0
 800419c:	1dfb      	adds	r3, r7, #7
 800419e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041a0:	1dfb      	adds	r3, r7, #7
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b7f      	cmp	r3, #127	; 0x7f
 80041a6:	d809      	bhi.n	80041bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	001a      	movs	r2, r3
 80041ae:	231f      	movs	r3, #31
 80041b0:	401a      	ands	r2, r3
 80041b2:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <__NVIC_EnableIRQ+0x30>)
 80041b4:	2101      	movs	r1, #1
 80041b6:	4091      	lsls	r1, r2
 80041b8:	000a      	movs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
  }
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	0002      	movs	r2, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041d6:	1dfb      	adds	r3, r7, #7
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b7f      	cmp	r3, #127	; 0x7f
 80041dc:	d828      	bhi.n	8004230 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041de:	4a2f      	ldr	r2, [pc, #188]	; (800429c <__NVIC_SetPriority+0xd4>)
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b25b      	sxtb	r3, r3
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	33c0      	adds	r3, #192	; 0xc0
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	589b      	ldr	r3, [r3, r2]
 80041ee:	1dfa      	adds	r2, r7, #7
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	0011      	movs	r1, r2
 80041f4:	2203      	movs	r2, #3
 80041f6:	400a      	ands	r2, r1
 80041f8:	00d2      	lsls	r2, r2, #3
 80041fa:	21ff      	movs	r1, #255	; 0xff
 80041fc:	4091      	lsls	r1, r2
 80041fe:	000a      	movs	r2, r1
 8004200:	43d2      	mvns	r2, r2
 8004202:	401a      	ands	r2, r3
 8004204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	019b      	lsls	r3, r3, #6
 800420a:	22ff      	movs	r2, #255	; 0xff
 800420c:	401a      	ands	r2, r3
 800420e:	1dfb      	adds	r3, r7, #7
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	0018      	movs	r0, r3
 8004214:	2303      	movs	r3, #3
 8004216:	4003      	ands	r3, r0
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800421c:	481f      	ldr	r0, [pc, #124]	; (800429c <__NVIC_SetPriority+0xd4>)
 800421e:	1dfb      	adds	r3, r7, #7
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b25b      	sxtb	r3, r3
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	430a      	orrs	r2, r1
 8004228:	33c0      	adds	r3, #192	; 0xc0
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800422e:	e031      	b.n	8004294 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004230:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <__NVIC_SetPriority+0xd8>)
 8004232:	1dfb      	adds	r3, r7, #7
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	0019      	movs	r1, r3
 8004238:	230f      	movs	r3, #15
 800423a:	400b      	ands	r3, r1
 800423c:	3b08      	subs	r3, #8
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3306      	adds	r3, #6
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	18d3      	adds	r3, r2, r3
 8004246:	3304      	adds	r3, #4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	1dfa      	adds	r2, r7, #7
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	0011      	movs	r1, r2
 8004250:	2203      	movs	r2, #3
 8004252:	400a      	ands	r2, r1
 8004254:	00d2      	lsls	r2, r2, #3
 8004256:	21ff      	movs	r1, #255	; 0xff
 8004258:	4091      	lsls	r1, r2
 800425a:	000a      	movs	r2, r1
 800425c:	43d2      	mvns	r2, r2
 800425e:	401a      	ands	r2, r3
 8004260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	019b      	lsls	r3, r3, #6
 8004266:	22ff      	movs	r2, #255	; 0xff
 8004268:	401a      	ands	r2, r3
 800426a:	1dfb      	adds	r3, r7, #7
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	0018      	movs	r0, r3
 8004270:	2303      	movs	r3, #3
 8004272:	4003      	ands	r3, r0
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004278:	4809      	ldr	r0, [pc, #36]	; (80042a0 <__NVIC_SetPriority+0xd8>)
 800427a:	1dfb      	adds	r3, r7, #7
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	001c      	movs	r4, r3
 8004280:	230f      	movs	r3, #15
 8004282:	4023      	ands	r3, r4
 8004284:	3b08      	subs	r3, #8
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	430a      	orrs	r2, r1
 800428a:	3306      	adds	r3, #6
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	18c3      	adds	r3, r0, r3
 8004290:	3304      	adds	r3, #4
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b003      	add	sp, #12
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	e000e100 	.word	0xe000e100
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	1e5a      	subs	r2, r3, #1
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	045b      	lsls	r3, r3, #17
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d301      	bcc.n	80042bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b8:	2301      	movs	r3, #1
 80042ba:	e010      	b.n	80042de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <SysTick_Config+0x44>)
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	3a01      	subs	r2, #1
 80042c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c4:	2301      	movs	r3, #1
 80042c6:	425b      	negs	r3, r3
 80042c8:	2103      	movs	r1, #3
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7ff ff7c 	bl	80041c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <SysTick_Config+0x44>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d6:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <SysTick_Config+0x44>)
 80042d8:	2207      	movs	r2, #7
 80042da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042dc:	2300      	movs	r3, #0
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	e000e010 	.word	0xe000e010

080042ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	210f      	movs	r1, #15
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	1c02      	adds	r2, r0, #0
 80042fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	187b      	adds	r3, r7, r1
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	b25b      	sxtb	r3, r3
 8004306:	0011      	movs	r1, r2
 8004308:	0018      	movs	r0, r3
 800430a:	f7ff ff5d 	bl	80041c8 <__NVIC_SetPriority>
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	b004      	add	sp, #16
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	0002      	movs	r2, r0
 800431e:	1dfb      	adds	r3, r7, #7
 8004320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004322:	1dfb      	adds	r3, r7, #7
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b25b      	sxtb	r3, r3
 8004328:	0018      	movs	r0, r3
 800432a:	f7ff ff33 	bl	8004194 <__NVIC_EnableIRQ>
}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b002      	add	sp, #8
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0018      	movs	r0, r3
 8004342:	f7ff ffaf 	bl	80042a4 <SysTick_Config>
 8004346:	0003      	movs	r3, r0
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	230f      	movs	r3, #15
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2225      	movs	r2, #37	; 0x25
 8004364:	5c9b      	ldrb	r3, [r3, r2]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d008      	beq.n	800437e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2204      	movs	r2, #4
 8004370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2224      	movs	r2, #36	; 0x24
 8004376:	2100      	movs	r1, #0
 8004378:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e024      	b.n	80043c8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	210e      	movs	r1, #14
 800438a:	438a      	bics	r2, r1
 800438c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	438a      	bics	r2, r1
 800439c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	221c      	movs	r2, #28
 80043a4:	401a      	ands	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2101      	movs	r1, #1
 80043ac:	4091      	lsls	r1, r2
 80043ae:	000a      	movs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2225      	movs	r2, #37	; 0x25
 80043b6:	2101      	movs	r1, #1
 80043b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2224      	movs	r2, #36	; 0x24
 80043be:	2100      	movs	r1, #0
 80043c0:	5499      	strb	r1, [r3, r2]

    return status;
 80043c2:	230f      	movs	r3, #15
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b004      	add	sp, #16
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2225      	movs	r2, #37	; 0x25
 80043e4:	5c9b      	ldrb	r3, [r3, r2]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d006      	beq.n	80043fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2204      	movs	r2, #4
 80043f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	e02a      	b.n	8004450 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	210e      	movs	r1, #14
 8004406:	438a      	bics	r2, r1
 8004408:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2101      	movs	r1, #1
 8004416:	438a      	bics	r2, r1
 8004418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	221c      	movs	r2, #28
 8004420:	401a      	ands	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2101      	movs	r1, #1
 8004428:	4091      	lsls	r1, r2
 800442a:	000a      	movs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2225      	movs	r2, #37	; 0x25
 8004432:	2101      	movs	r1, #1
 8004434:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2224      	movs	r2, #36	; 0x24
 800443a:	2100      	movs	r1, #0
 800443c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	0010      	movs	r0, r2
 800444e:	4798      	blx	r3
    }
  }
  return status;
 8004450:	230f      	movs	r3, #15
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	781b      	ldrb	r3, [r3, #0]
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b004      	add	sp, #16
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004476:	e155      	b.n	8004724 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2101      	movs	r1, #1
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4091      	lsls	r1, r2
 8004482:	000a      	movs	r2, r1
 8004484:	4013      	ands	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d100      	bne.n	8004490 <HAL_GPIO_Init+0x30>
 800448e:	e146      	b.n	800471e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2203      	movs	r2, #3
 8004496:	4013      	ands	r3, r2
 8004498:	2b01      	cmp	r3, #1
 800449a:	d005      	beq.n	80044a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2203      	movs	r2, #3
 80044a2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d130      	bne.n	800450a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	2203      	movs	r2, #3
 80044b4:	409a      	lsls	r2, r3
 80044b6:	0013      	movs	r3, r2
 80044b8:	43da      	mvns	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	409a      	lsls	r2, r3
 80044ca:	0013      	movs	r3, r2
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044de:	2201      	movs	r2, #1
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	409a      	lsls	r2, r3
 80044e4:	0013      	movs	r3, r2
 80044e6:	43da      	mvns	r2, r3
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	2201      	movs	r2, #1
 80044f6:	401a      	ands	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	409a      	lsls	r2, r3
 80044fc:	0013      	movs	r3, r2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2203      	movs	r2, #3
 8004510:	4013      	ands	r3, r2
 8004512:	2b03      	cmp	r3, #3
 8004514:	d017      	beq.n	8004546 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	2203      	movs	r2, #3
 8004522:	409a      	lsls	r2, r3
 8004524:	0013      	movs	r3, r2
 8004526:	43da      	mvns	r2, r3
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	409a      	lsls	r2, r3
 8004538:	0013      	movs	r3, r2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2203      	movs	r2, #3
 800454c:	4013      	ands	r3, r2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d123      	bne.n	800459a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	08da      	lsrs	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3208      	adds	r2, #8
 800455a:	0092      	lsls	r2, r2, #2
 800455c:	58d3      	ldr	r3, [r2, r3]
 800455e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2207      	movs	r2, #7
 8004564:	4013      	ands	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	220f      	movs	r2, #15
 800456a:	409a      	lsls	r2, r3
 800456c:	0013      	movs	r3, r2
 800456e:	43da      	mvns	r2, r3
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2107      	movs	r1, #7
 800457e:	400b      	ands	r3, r1
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	409a      	lsls	r2, r3
 8004584:	0013      	movs	r3, r2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	08da      	lsrs	r2, r3, #3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3208      	adds	r2, #8
 8004594:	0092      	lsls	r2, r2, #2
 8004596:	6939      	ldr	r1, [r7, #16]
 8004598:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	2203      	movs	r2, #3
 80045a6:	409a      	lsls	r2, r3
 80045a8:	0013      	movs	r3, r2
 80045aa:	43da      	mvns	r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2203      	movs	r2, #3
 80045b8:	401a      	ands	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	409a      	lsls	r2, r3
 80045c0:	0013      	movs	r3, r2
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	23c0      	movs	r3, #192	; 0xc0
 80045d4:	029b      	lsls	r3, r3, #10
 80045d6:	4013      	ands	r3, r2
 80045d8:	d100      	bne.n	80045dc <HAL_GPIO_Init+0x17c>
 80045da:	e0a0      	b.n	800471e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045dc:	4b57      	ldr	r3, [pc, #348]	; (800473c <HAL_GPIO_Init+0x2dc>)
 80045de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e0:	4b56      	ldr	r3, [pc, #344]	; (800473c <HAL_GPIO_Init+0x2dc>)
 80045e2:	2101      	movs	r1, #1
 80045e4:	430a      	orrs	r2, r1
 80045e6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80045e8:	4a55      	ldr	r2, [pc, #340]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	3302      	adds	r3, #2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	589b      	ldr	r3, [r3, r2]
 80045f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2203      	movs	r2, #3
 80045fa:	4013      	ands	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	220f      	movs	r2, #15
 8004600:	409a      	lsls	r2, r3
 8004602:	0013      	movs	r3, r2
 8004604:	43da      	mvns	r2, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	23a0      	movs	r3, #160	; 0xa0
 8004610:	05db      	lsls	r3, r3, #23
 8004612:	429a      	cmp	r2, r3
 8004614:	d01f      	beq.n	8004656 <HAL_GPIO_Init+0x1f6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a4a      	ldr	r2, [pc, #296]	; (8004744 <HAL_GPIO_Init+0x2e4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d019      	beq.n	8004652 <HAL_GPIO_Init+0x1f2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a49      	ldr	r2, [pc, #292]	; (8004748 <HAL_GPIO_Init+0x2e8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_GPIO_Init+0x1ee>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a48      	ldr	r2, [pc, #288]	; (800474c <HAL_GPIO_Init+0x2ec>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00d      	beq.n	800464a <HAL_GPIO_Init+0x1ea>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a47      	ldr	r2, [pc, #284]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <HAL_GPIO_Init+0x1e6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a46      	ldr	r2, [pc, #280]	; (8004754 <HAL_GPIO_Init+0x2f4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_GPIO_Init+0x1e2>
 800463e:	2305      	movs	r3, #5
 8004640:	e00a      	b.n	8004658 <HAL_GPIO_Init+0x1f8>
 8004642:	2306      	movs	r3, #6
 8004644:	e008      	b.n	8004658 <HAL_GPIO_Init+0x1f8>
 8004646:	2304      	movs	r3, #4
 8004648:	e006      	b.n	8004658 <HAL_GPIO_Init+0x1f8>
 800464a:	2303      	movs	r3, #3
 800464c:	e004      	b.n	8004658 <HAL_GPIO_Init+0x1f8>
 800464e:	2302      	movs	r3, #2
 8004650:	e002      	b.n	8004658 <HAL_GPIO_Init+0x1f8>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <HAL_GPIO_Init+0x1f8>
 8004656:	2300      	movs	r3, #0
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	2103      	movs	r1, #3
 800465c:	400a      	ands	r2, r1
 800465e:	0092      	lsls	r2, r2, #2
 8004660:	4093      	lsls	r3, r2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004668:	4935      	ldr	r1, [pc, #212]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	089b      	lsrs	r3, r3, #2
 800466e:	3302      	adds	r3, #2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004676:	4b38      	ldr	r3, [pc, #224]	; (8004758 <HAL_GPIO_Init+0x2f8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	43da      	mvns	r2, r3
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4013      	ands	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	025b      	lsls	r3, r3, #9
 800468e:	4013      	ands	r3, r2
 8004690:	d003      	beq.n	800469a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800469a:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <HAL_GPIO_Init+0x2f8>)
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80046a0:	4b2d      	ldr	r3, [pc, #180]	; (8004758 <HAL_GPIO_Init+0x2f8>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	43da      	mvns	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	029b      	lsls	r3, r3, #10
 80046b8:	4013      	ands	r3, r2
 80046ba:	d003      	beq.n	80046c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80046c4:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_GPIO_Init+0x2f8>)
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ca:	4b23      	ldr	r3, [pc, #140]	; (8004758 <HAL_GPIO_Init+0x2f8>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	43da      	mvns	r2, r3
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4013      	ands	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	035b      	lsls	r3, r3, #13
 80046e2:	4013      	ands	r3, r2
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046ee:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <HAL_GPIO_Init+0x2f8>)
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80046f4:	4b18      	ldr	r3, [pc, #96]	; (8004758 <HAL_GPIO_Init+0x2f8>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	43da      	mvns	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	039b      	lsls	r3, r3, #14
 800470c:	4013      	ands	r3, r2
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <HAL_GPIO_Init+0x2f8>)
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	3301      	adds	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	40da      	lsrs	r2, r3
 800472c:	1e13      	subs	r3, r2, #0
 800472e:	d000      	beq.n	8004732 <HAL_GPIO_Init+0x2d2>
 8004730:	e6a2      	b.n	8004478 <HAL_GPIO_Init+0x18>
  }
}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b006      	add	sp, #24
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	40010000 	.word	0x40010000
 8004744:	50000400 	.word	0x50000400
 8004748:	50000800 	.word	0x50000800
 800474c:	50000c00 	.word	0x50000c00
 8004750:	50001000 	.word	0x50001000
 8004754:	50001c00 	.word	0x50001c00
 8004758:	40010400 	.word	0x40010400

0800475c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	0008      	movs	r0, r1
 8004766:	0011      	movs	r1, r2
 8004768:	1cbb      	adds	r3, r7, #2
 800476a:	1c02      	adds	r2, r0, #0
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	1c7b      	adds	r3, r7, #1
 8004770:	1c0a      	adds	r2, r1, #0
 8004772:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004774:	1c7b      	adds	r3, r7, #1
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d004      	beq.n	8004786 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800477c:	1cbb      	adds	r3, r7, #2
 800477e:	881a      	ldrh	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004784:	e003      	b.n	800478e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004786:	1cbb      	adds	r3, r7, #2
 8004788:	881a      	ldrh	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	46bd      	mov	sp, r7
 8004792:	b002      	add	sp, #8
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e082      	b.n	80048b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2241      	movs	r2, #65	; 0x41
 80047ae:	5c9b      	ldrb	r3, [r3, r2]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d107      	bne.n	80047c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2240      	movs	r2, #64	; 0x40
 80047ba:	2100      	movs	r1, #0
 80047bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fe fe5b 	bl	800347c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2241      	movs	r2, #65	; 0x41
 80047ca:	2124      	movs	r1, #36	; 0x24
 80047cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2101      	movs	r1, #1
 80047da:	438a      	bics	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4934      	ldr	r1, [pc, #208]	; (80048b8 <HAL_I2C_Init+0x120>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4931      	ldr	r1, [pc, #196]	; (80048bc <HAL_I2C_Init+0x124>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d108      	bne.n	8004816 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2180      	movs	r1, #128	; 0x80
 800480e:	0209      	lsls	r1, r1, #8
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	e007      	b.n	8004826 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2184      	movs	r1, #132	; 0x84
 8004820:	0209      	lsls	r1, r1, #8
 8004822:	430a      	orrs	r2, r1
 8004824:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d104      	bne.n	8004838 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2280      	movs	r2, #128	; 0x80
 8004834:	0112      	lsls	r2, r2, #4
 8004836:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	491f      	ldr	r1, [pc, #124]	; (80048c0 <HAL_I2C_Init+0x128>)
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	491a      	ldr	r1, [pc, #104]	; (80048bc <HAL_I2C_Init+0x124>)
 8004854:	400a      	ands	r2, r1
 8004856:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	431a      	orrs	r2, r3
 8004862:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69d9      	ldr	r1, [r3, #28]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2101      	movs	r1, #1
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2241      	movs	r2, #65	; 0x41
 800489c:	2120      	movs	r1, #32
 800489e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2242      	movs	r2, #66	; 0x42
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b002      	add	sp, #8
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	f0ffffff 	.word	0xf0ffffff
 80048bc:	ffff7fff 	.word	0xffff7fff
 80048c0:	02008000 	.word	0x02008000

080048c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	0008      	movs	r0, r1
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	0019      	movs	r1, r3
 80048d2:	230a      	movs	r3, #10
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	1c02      	adds	r2, r0, #0
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	2308      	movs	r3, #8
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	1c0a      	adds	r2, r1, #0
 80048e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2241      	movs	r2, #65	; 0x41
 80048e6:	5c9b      	ldrb	r3, [r3, r2]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d000      	beq.n	80048f0 <HAL_I2C_Master_Transmit+0x2c>
 80048ee:	e0e7      	b.n	8004ac0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	5c9b      	ldrb	r3, [r3, r2]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_I2C_Master_Transmit+0x3a>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0e1      	b.n	8004ac2 <HAL_I2C_Master_Transmit+0x1fe>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2240      	movs	r2, #64	; 0x40
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004906:	f7ff fc17 	bl	8004138 <HAL_GetTick>
 800490a:	0003      	movs	r3, r0
 800490c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	0219      	lsls	r1, r3, #8
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	2319      	movs	r3, #25
 800491a:	2201      	movs	r2, #1
 800491c:	f000 fa92 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004920:	1e03      	subs	r3, r0, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0cc      	b.n	8004ac2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2241      	movs	r2, #65	; 0x41
 800492c:	2121      	movs	r1, #33	; 0x21
 800492e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2242      	movs	r2, #66	; 0x42
 8004934:	2110      	movs	r1, #16
 8004936:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2208      	movs	r2, #8
 8004948:	18ba      	adds	r2, r7, r2
 800494a:	8812      	ldrh	r2, [r2, #0]
 800494c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2bff      	cmp	r3, #255	; 0xff
 800495c:	d911      	bls.n	8004982 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	22ff      	movs	r2, #255	; 0xff
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	b2da      	uxtb	r2, r3
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	045c      	lsls	r4, r3, #17
 800496e:	230a      	movs	r3, #10
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	8819      	ldrh	r1, [r3, #0]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	4b55      	ldr	r3, [pc, #340]	; (8004acc <HAL_I2C_Master_Transmit+0x208>)
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	0023      	movs	r3, r4
 800497c:	f000 fb96 	bl	80050ac <I2C_TransferConfig>
 8004980:	e075      	b.n	8004a6e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004990:	b2da      	uxtb	r2, r3
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	049c      	lsls	r4, r3, #18
 8004996:	230a      	movs	r3, #10
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	8819      	ldrh	r1, [r3, #0]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <HAL_I2C_Master_Transmit+0x208>)
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	0023      	movs	r3, r4
 80049a4:	f000 fb82 	bl	80050ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80049a8:	e061      	b.n	8004a6e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 fa86 	bl	8004ec2 <I2C_WaitOnTXISFlagUntilTimeout>
 80049b6:	1e03      	subs	r3, r0, #0
 80049b8:	d001      	beq.n	80049be <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e081      	b.n	8004ac2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d03a      	beq.n	8004a6e <HAL_I2C_Master_Transmit+0x1aa>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d136      	bne.n	8004a6e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	0013      	movs	r3, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2180      	movs	r1, #128	; 0x80
 8004a0e:	f000 fa19 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004a12:	1e03      	subs	r3, r0, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e053      	b.n	8004ac2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2bff      	cmp	r3, #255	; 0xff
 8004a22:	d911      	bls.n	8004a48 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	22ff      	movs	r2, #255	; 0xff
 8004a28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	045c      	lsls	r4, r3, #17
 8004a34:	230a      	movs	r3, #10
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	8819      	ldrh	r1, [r3, #0]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	0023      	movs	r3, r4
 8004a42:	f000 fb33 	bl	80050ac <I2C_TransferConfig>
 8004a46:	e012      	b.n	8004a6e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	2380      	movs	r3, #128	; 0x80
 8004a5a:	049c      	lsls	r4, r3, #18
 8004a5c:	230a      	movs	r3, #10
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	8819      	ldrh	r1, [r3, #0]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	2300      	movs	r3, #0
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	0023      	movs	r3, r4
 8004a6a:	f000 fb1f 	bl	80050ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d198      	bne.n	80049aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 fa5e 	bl	8004f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a84:	1e03      	subs	r3, r0, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e01a      	b.n	8004ac2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2220      	movs	r2, #32
 8004a92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	490c      	ldr	r1, [pc, #48]	; (8004ad0 <HAL_I2C_Master_Transmit+0x20c>)
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2241      	movs	r2, #65	; 0x41
 8004aa8:	2120      	movs	r1, #32
 8004aaa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2242      	movs	r2, #66	; 0x42
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	2100      	movs	r1, #0
 8004aba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b007      	add	sp, #28
 8004ac8:	bd90      	pop	{r4, r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	80002000 	.word	0x80002000
 8004ad0:	fe00e800 	.word	0xfe00e800

08004ad4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b089      	sub	sp, #36	; 0x24
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	000c      	movs	r4, r1
 8004ade:	0010      	movs	r0, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	230a      	movs	r3, #10
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	1c22      	adds	r2, r4, #0
 8004ae8:	801a      	strh	r2, [r3, #0]
 8004aea:	2308      	movs	r3, #8
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	1c02      	adds	r2, r0, #0
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	1dbb      	adds	r3, r7, #6
 8004af4:	1c0a      	adds	r2, r1, #0
 8004af6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2241      	movs	r2, #65	; 0x41
 8004afc:	5c9b      	ldrb	r3, [r3, r2]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d000      	beq.n	8004b06 <HAL_I2C_Mem_Read+0x32>
 8004b04:	e110      	b.n	8004d28 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <HAL_I2C_Mem_Read+0x42>
 8004b0c:	232c      	movs	r3, #44	; 0x2c
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	0092      	lsls	r2, r2, #2
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e103      	b.n	8004d2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2240      	movs	r2, #64	; 0x40
 8004b26:	5c9b      	ldrb	r3, [r3, r2]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_I2C_Mem_Read+0x5c>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e0fc      	b.n	8004d2a <HAL_I2C_Mem_Read+0x256>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2240      	movs	r2, #64	; 0x40
 8004b34:	2101      	movs	r1, #1
 8004b36:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b38:	f7ff fafe 	bl	8004138 <HAL_GetTick>
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	0219      	lsls	r1, r3, #8
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2319      	movs	r3, #25
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f000 f979 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004b52:	1e03      	subs	r3, r0, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0e7      	b.n	8004d2a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2241      	movs	r2, #65	; 0x41
 8004b5e:	2122      	movs	r1, #34	; 0x22
 8004b60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2242      	movs	r2, #66	; 0x42
 8004b66:	2140      	movs	r1, #64	; 0x40
 8004b68:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	222c      	movs	r2, #44	; 0x2c
 8004b7a:	18ba      	adds	r2, r7, r2
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b86:	1dbb      	adds	r3, r7, #6
 8004b88:	881c      	ldrh	r4, [r3, #0]
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	881a      	ldrh	r2, [r3, #0]
 8004b90:	230a      	movs	r3, #10
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	8819      	ldrh	r1, [r3, #0]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	0023      	movs	r3, r4
 8004ba2:	f000 f8cb 	bl	8004d3c <I2C_RequestMemoryRead>
 8004ba6:	1e03      	subs	r3, r0, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2240      	movs	r2, #64	; 0x40
 8004bae:	2100      	movs	r1, #0
 8004bb0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e0b9      	b.n	8004d2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2bff      	cmp	r3, #255	; 0xff
 8004bbe:	d911      	bls.n	8004be4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	22ff      	movs	r2, #255	; 0xff
 8004bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	045c      	lsls	r4, r3, #17
 8004bd0:	230a      	movs	r3, #10
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	8819      	ldrh	r1, [r3, #0]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	4b56      	ldr	r3, [pc, #344]	; (8004d34 <HAL_I2C_Mem_Read+0x260>)
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	0023      	movs	r3, r4
 8004bde:	f000 fa65 	bl	80050ac <I2C_TransferConfig>
 8004be2:	e012      	b.n	8004c0a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	2380      	movs	r3, #128	; 0x80
 8004bf6:	049c      	lsls	r4, r3, #18
 8004bf8:	230a      	movs	r3, #10
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	8819      	ldrh	r1, [r3, #0]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	4b4c      	ldr	r3, [pc, #304]	; (8004d34 <HAL_I2C_Mem_Read+0x260>)
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	0023      	movs	r3, r4
 8004c06:	f000 fa51 	bl	80050ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	0013      	movs	r3, r2
 8004c14:	2200      	movs	r2, #0
 8004c16:	2104      	movs	r1, #4
 8004c18:	f000 f914 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004c1c:	1e03      	subs	r3, r0, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e082      	b.n	8004d2a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03a      	beq.n	8004cd6 <HAL_I2C_Mem_Read+0x202>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d136      	bne.n	8004cd6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	0013      	movs	r3, r2
 8004c72:	2200      	movs	r2, #0
 8004c74:	2180      	movs	r1, #128	; 0x80
 8004c76:	f000 f8e5 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	1e03      	subs	r3, r0, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e053      	b.n	8004d2a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2bff      	cmp	r3, #255	; 0xff
 8004c8a:	d911      	bls.n	8004cb0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	22ff      	movs	r2, #255	; 0xff
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	045c      	lsls	r4, r3, #17
 8004c9c:	230a      	movs	r3, #10
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	8819      	ldrh	r1, [r3, #0]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	0023      	movs	r3, r4
 8004caa:	f000 f9ff 	bl	80050ac <I2C_TransferConfig>
 8004cae:	e012      	b.n	8004cd6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	049c      	lsls	r4, r3, #18
 8004cc4:	230a      	movs	r3, #10
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	8819      	ldrh	r1, [r3, #0]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	0023      	movs	r3, r4
 8004cd2:	f000 f9eb 	bl	80050ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d194      	bne.n	8004c0a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 f92a 	bl	8004f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cec:	1e03      	subs	r3, r0, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e01a      	b.n	8004d2a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	490c      	ldr	r1, [pc, #48]	; (8004d38 <HAL_I2C_Mem_Read+0x264>)
 8004d08:	400a      	ands	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2241      	movs	r2, #65	; 0x41
 8004d10:	2120      	movs	r1, #32
 8004d12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2242      	movs	r2, #66	; 0x42
 8004d18:	2100      	movs	r1, #0
 8004d1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	2100      	movs	r1, #0
 8004d22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
  }
}
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b007      	add	sp, #28
 8004d30:	bd90      	pop	{r4, r7, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	80002400 	.word	0x80002400
 8004d38:	fe00e800 	.word	0xfe00e800

08004d3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d3c:	b5b0      	push	{r4, r5, r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	000c      	movs	r4, r1
 8004d46:	0010      	movs	r0, r2
 8004d48:	0019      	movs	r1, r3
 8004d4a:	250a      	movs	r5, #10
 8004d4c:	197b      	adds	r3, r7, r5
 8004d4e:	1c22      	adds	r2, r4, #0
 8004d50:	801a      	strh	r2, [r3, #0]
 8004d52:	2308      	movs	r3, #8
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	1c02      	adds	r2, r0, #0
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	1dbb      	adds	r3, r7, #6
 8004d5c:	1c0a      	adds	r2, r1, #0
 8004d5e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d60:	1dbb      	adds	r3, r7, #6
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	197b      	adds	r3, r7, r5
 8004d68:	8819      	ldrh	r1, [r3, #0]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <I2C_RequestMemoryRead+0xc0>)
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	f000 f99b 	bl	80050ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d78:	6a39      	ldr	r1, [r7, #32]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f000 f8a0 	bl	8004ec2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d82:	1e03      	subs	r3, r0, #0
 8004d84:	d001      	beq.n	8004d8a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e033      	b.n	8004df2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d8a:	1dbb      	adds	r3, r7, #6
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d107      	bne.n	8004da2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d92:	2308      	movs	r3, #8
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004da0:	e019      	b.n	8004dd6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004da2:	2308      	movs	r3, #8
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db6:	6a39      	ldr	r1, [r7, #32]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 f881 	bl	8004ec2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dc0:	1e03      	subs	r3, r0, #0
 8004dc2:	d001      	beq.n	8004dc8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e014      	b.n	8004df2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc8:	2308      	movs	r3, #8
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd6:	6a3a      	ldr	r2, [r7, #32]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	0013      	movs	r3, r2
 8004de0:	2200      	movs	r2, #0
 8004de2:	2140      	movs	r1, #64	; 0x40
 8004de4:	f000 f82e 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004de8:	1e03      	subs	r3, r0, #0
 8004dea:	d001      	beq.n	8004df0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	0018      	movs	r0, r3
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b004      	add	sp, #16
 8004df8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	80002000 	.word	0x80002000

08004e00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d103      	bne.n	8004e1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2201      	movs	r2, #1
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d007      	beq.n	8004e3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2101      	movs	r1, #1
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	619a      	str	r2, [r3, #24]
  }
}
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b002      	add	sp, #8
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	1dfb      	adds	r3, r7, #7
 8004e52:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e54:	e021      	b.n	8004e9a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	d01e      	beq.n	8004e9a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5c:	f7ff f96c 	bl	8004138 <HAL_GetTick>
 8004e60:	0002      	movs	r2, r0
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d302      	bcc.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d113      	bne.n	8004e9a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	2220      	movs	r2, #32
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2241      	movs	r2, #65	; 0x41
 8004e82:	2120      	movs	r1, #32
 8004e84:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2242      	movs	r2, #66	; 0x42
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2240      	movs	r2, #64	; 0x40
 8004e92:	2100      	movs	r1, #0
 8004e94:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e00f      	b.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	425a      	negs	r2, r3
 8004eaa:	4153      	adcs	r3, r2
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	001a      	movs	r2, r3
 8004eb0:	1dfb      	adds	r3, r7, #7
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d0ce      	beq.n	8004e56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	0018      	movs	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b004      	add	sp, #16
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ece:	e02b      	b.n	8004f28 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f000 f86e 	bl	8004fb8 <I2C_IsAcknowledgeFailed>
 8004edc:	1e03      	subs	r3, r0, #0
 8004ede:	d001      	beq.n	8004ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e029      	b.n	8004f38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	d01e      	beq.n	8004f28 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	f7ff f925 	bl	8004138 <HAL_GetTick>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d113      	bne.n	8004f28 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f04:	2220      	movs	r2, #32
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2241      	movs	r2, #65	; 0x41
 8004f10:	2120      	movs	r1, #32
 8004f12:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2242      	movs	r2, #66	; 0x42
 8004f18:	2100      	movs	r1, #0
 8004f1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2240      	movs	r2, #64	; 0x40
 8004f20:	2100      	movs	r1, #0
 8004f22:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e007      	b.n	8004f38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d1cc      	bne.n	8004ed0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	0018      	movs	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b004      	add	sp, #16
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f4c:	e028      	b.n	8004fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f000 f82f 	bl	8004fb8 <I2C_IsAcknowledgeFailed>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	d001      	beq.n	8004f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e026      	b.n	8004fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7ff f8e9 	bl	8004138 <HAL_GetTick>
 8004f66:	0002      	movs	r2, r0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2241      	movs	r2, #65	; 0x41
 8004f88:	2120      	movs	r1, #32
 8004f8a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2242      	movs	r2, #66	; 0x42
 8004f90:	2100      	movs	r1, #0
 8004f92:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2240      	movs	r2, #64	; 0x40
 8004f98:	2100      	movs	r1, #0
 8004f9a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e007      	b.n	8004fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d1cf      	bne.n	8004f4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b004      	add	sp, #16
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	2210      	movs	r2, #16
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d164      	bne.n	800509c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	049b      	lsls	r3, r3, #18
 8004fdc:	401a      	ands	r2, r3
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	049b      	lsls	r3, r3, #18
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d02b      	beq.n	800503e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	01c9      	lsls	r1, r1, #7
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ff8:	e021      	b.n	800503e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	d01e      	beq.n	800503e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005000:	f7ff f89a 	bl	8004138 <HAL_GetTick>
 8005004:	0002      	movs	r2, r0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	429a      	cmp	r2, r3
 800500e:	d302      	bcc.n	8005016 <I2C_IsAcknowledgeFailed+0x5e>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d113      	bne.n	800503e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	2220      	movs	r2, #32
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2241      	movs	r2, #65	; 0x41
 8005026:	2120      	movs	r1, #32
 8005028:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2242      	movs	r2, #66	; 0x42
 800502e:	2100      	movs	r1, #0
 8005030:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2240      	movs	r2, #64	; 0x40
 8005036:	2100      	movs	r1, #0
 8005038:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e02f      	b.n	800509e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	2220      	movs	r2, #32
 8005046:	4013      	ands	r3, r2
 8005048:	2b20      	cmp	r3, #32
 800504a:	d1d6      	bne.n	8004ffa <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2210      	movs	r2, #16
 8005052:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2220      	movs	r2, #32
 800505a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	0018      	movs	r0, r3
 8005060:	f7ff fece 	bl	8004e00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	490e      	ldr	r1, [pc, #56]	; (80050a8 <I2C_IsAcknowledgeFailed+0xf0>)
 8005070:	400a      	ands	r2, r1
 8005072:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005078:	2204      	movs	r2, #4
 800507a:	431a      	orrs	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2241      	movs	r2, #65	; 0x41
 8005084:	2120      	movs	r1, #32
 8005086:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2242      	movs	r2, #66	; 0x42
 800508c:	2100      	movs	r1, #0
 800508e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2240      	movs	r2, #64	; 0x40
 8005094:	2100      	movs	r1, #0
 8005096:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b004      	add	sp, #16
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	fe00e800 	.word	0xfe00e800

080050ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	0008      	movs	r0, r1
 80050b6:	0011      	movs	r1, r2
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	240a      	movs	r4, #10
 80050bc:	193b      	adds	r3, r7, r4
 80050be:	1c02      	adds	r2, r0, #0
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	2009      	movs	r0, #9
 80050c4:	183b      	adds	r3, r7, r0
 80050c6:	1c0a      	adds	r2, r1, #0
 80050c8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	0d51      	lsrs	r1, r2, #21
 80050d4:	2280      	movs	r2, #128	; 0x80
 80050d6:	00d2      	lsls	r2, r2, #3
 80050d8:	400a      	ands	r2, r1
 80050da:	490e      	ldr	r1, [pc, #56]	; (8005114 <I2C_TransferConfig+0x68>)
 80050dc:	430a      	orrs	r2, r1
 80050de:	43d2      	mvns	r2, r2
 80050e0:	401a      	ands	r2, r3
 80050e2:	0011      	movs	r1, r2
 80050e4:	193b      	adds	r3, r7, r4
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	059b      	lsls	r3, r3, #22
 80050ea:	0d9a      	lsrs	r2, r3, #22
 80050ec:	183b      	adds	r3, r7, r0
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	0418      	lsls	r0, r3, #16
 80050f2:	23ff      	movs	r3, #255	; 0xff
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	4003      	ands	r3, r0
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	431a      	orrs	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b005      	add	sp, #20
 8005110:	bd90      	pop	{r4, r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	03ff63ff 	.word	0x03ff63ff

08005118 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2241      	movs	r2, #65	; 0x41
 8005126:	5c9b      	ldrb	r3, [r3, r2]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b20      	cmp	r3, #32
 800512c:	d138      	bne.n	80051a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2240      	movs	r2, #64	; 0x40
 8005132:	5c9b      	ldrb	r3, [r3, r2]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005138:	2302      	movs	r3, #2
 800513a:	e032      	b.n	80051a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2240      	movs	r2, #64	; 0x40
 8005140:	2101      	movs	r1, #1
 8005142:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2241      	movs	r2, #65	; 0x41
 8005148:	2124      	movs	r1, #36	; 0x24
 800514a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2101      	movs	r1, #1
 8005158:	438a      	bics	r2, r1
 800515a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4911      	ldr	r1, [pc, #68]	; (80051ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005168:	400a      	ands	r2, r1
 800516a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6819      	ldr	r1, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2101      	movs	r1, #1
 8005188:	430a      	orrs	r2, r1
 800518a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2241      	movs	r2, #65	; 0x41
 8005190:	2120      	movs	r1, #32
 8005192:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2240      	movs	r2, #64	; 0x40
 8005198:	2100      	movs	r1, #0
 800519a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	e000      	b.n	80051a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051a0:	2302      	movs	r3, #2
  }
}
 80051a2:	0018      	movs	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b002      	add	sp, #8
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	ffffefff 	.word	0xffffefff

080051b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2241      	movs	r2, #65	; 0x41
 80051be:	5c9b      	ldrb	r3, [r3, r2]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d139      	bne.n	800523a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2240      	movs	r2, #64	; 0x40
 80051ca:	5c9b      	ldrb	r3, [r3, r2]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e033      	b.n	800523c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2240      	movs	r2, #64	; 0x40
 80051d8:	2101      	movs	r1, #1
 80051da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2241      	movs	r2, #65	; 0x41
 80051e0:	2124      	movs	r1, #36	; 0x24
 80051e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2101      	movs	r1, #1
 80051f0:	438a      	bics	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a11      	ldr	r2, [pc, #68]	; (8005244 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2101      	movs	r1, #1
 8005222:	430a      	orrs	r2, r1
 8005224:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2241      	movs	r2, #65	; 0x41
 800522a:	2120      	movs	r1, #32
 800522c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2240      	movs	r2, #64	; 0x40
 8005232:	2100      	movs	r1, #0
 8005234:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e000      	b.n	800523c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800523a:	2302      	movs	r3, #2
  }
}
 800523c:	0018      	movs	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	b004      	add	sp, #16
 8005242:	bd80      	pop	{r7, pc}
 8005244:	fffff0ff 	.word	0xfffff0ff

08005248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005248:	b5b0      	push	{r4, r5, r7, lr}
 800524a:	b08a      	sub	sp, #40	; 0x28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f000 fbbf 	bl	80059da <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525c:	4bc9      	ldr	r3, [pc, #804]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	220c      	movs	r2, #12
 8005262:	4013      	ands	r3, r2
 8005264:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005266:	4bc7      	ldr	r3, [pc, #796]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	025b      	lsls	r3, r3, #9
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2201      	movs	r2, #1
 8005278:	4013      	ands	r3, r2
 800527a:	d100      	bne.n	800527e <HAL_RCC_OscConfig+0x36>
 800527c:	e07e      	b.n	800537c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d007      	beq.n	8005294 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b0c      	cmp	r3, #12
 8005288:	d112      	bne.n	80052b0 <HAL_RCC_OscConfig+0x68>
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	025b      	lsls	r3, r3, #9
 8005290:	429a      	cmp	r2, r3
 8005292:	d10d      	bne.n	80052b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005294:	4bbb      	ldr	r3, [pc, #748]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	029b      	lsls	r3, r3, #10
 800529c:	4013      	ands	r3, r2
 800529e:	d100      	bne.n	80052a2 <HAL_RCC_OscConfig+0x5a>
 80052a0:	e06b      	b.n	800537a <HAL_RCC_OscConfig+0x132>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d167      	bne.n	800537a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f000 fb95 	bl	80059da <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	025b      	lsls	r3, r3, #9
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d107      	bne.n	80052cc <HAL_RCC_OscConfig+0x84>
 80052bc:	4bb1      	ldr	r3, [pc, #708]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4bb0      	ldr	r3, [pc, #704]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80052c2:	2180      	movs	r1, #128	; 0x80
 80052c4:	0249      	lsls	r1, r1, #9
 80052c6:	430a      	orrs	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e027      	b.n	800531c <HAL_RCC_OscConfig+0xd4>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	23a0      	movs	r3, #160	; 0xa0
 80052d2:	02db      	lsls	r3, r3, #11
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d10e      	bne.n	80052f6 <HAL_RCC_OscConfig+0xae>
 80052d8:	4baa      	ldr	r3, [pc, #680]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4ba9      	ldr	r3, [pc, #676]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	02c9      	lsls	r1, r1, #11
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	4ba7      	ldr	r3, [pc, #668]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4ba6      	ldr	r3, [pc, #664]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80052ec:	2180      	movs	r1, #128	; 0x80
 80052ee:	0249      	lsls	r1, r1, #9
 80052f0:	430a      	orrs	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e012      	b.n	800531c <HAL_RCC_OscConfig+0xd4>
 80052f6:	4ba3      	ldr	r3, [pc, #652]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4ba2      	ldr	r3, [pc, #648]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80052fc:	49a2      	ldr	r1, [pc, #648]	; (8005588 <HAL_RCC_OscConfig+0x340>)
 80052fe:	400a      	ands	r2, r1
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	4ba0      	ldr	r3, [pc, #640]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	025b      	lsls	r3, r3, #9
 800530a:	4013      	ands	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4b9c      	ldr	r3, [pc, #624]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4b9b      	ldr	r3, [pc, #620]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005316:	499d      	ldr	r1, [pc, #628]	; (800558c <HAL_RCC_OscConfig+0x344>)
 8005318:	400a      	ands	r2, r1
 800531a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d015      	beq.n	8005350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fe ff08 	bl	8004138 <HAL_GetTick>
 8005328:	0003      	movs	r3, r0
 800532a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800532c:	e009      	b.n	8005342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800532e:	f7fe ff03 	bl	8004138 <HAL_GetTick>
 8005332:	0002      	movs	r2, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	; 0x64
 800533a:	d902      	bls.n	8005342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	f000 fb4c 	bl	80059da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005342:	4b90      	ldr	r3, [pc, #576]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	029b      	lsls	r3, r3, #10
 800534a:	4013      	ands	r3, r2
 800534c:	d0ef      	beq.n	800532e <HAL_RCC_OscConfig+0xe6>
 800534e:	e015      	b.n	800537c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fe fef2 	bl	8004138 <HAL_GetTick>
 8005354:	0003      	movs	r3, r0
 8005356:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800535a:	f7fe feed 	bl	8004138 <HAL_GetTick>
 800535e:	0002      	movs	r2, r0
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b64      	cmp	r3, #100	; 0x64
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e336      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800536c:	4b85      	ldr	r3, [pc, #532]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	029b      	lsls	r3, r3, #10
 8005374:	4013      	ands	r3, r2
 8005376:	d1f0      	bne.n	800535a <HAL_RCC_OscConfig+0x112>
 8005378:	e000      	b.n	800537c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800537a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2202      	movs	r2, #2
 8005382:	4013      	ands	r3, r2
 8005384:	d100      	bne.n	8005388 <HAL_RCC_OscConfig+0x140>
 8005386:	e099      	b.n	80054bc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	2220      	movs	r2, #32
 8005392:	4013      	ands	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005396:	4b7b      	ldr	r3, [pc, #492]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b7a      	ldr	r3, [pc, #488]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800539c:	2120      	movs	r1, #32
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2220      	movs	r2, #32
 80053a6:	4393      	bics	r3, r2
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d13e      	bne.n	8005434 <HAL_RCC_OscConfig+0x1ec>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d13b      	bne.n	8005434 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80053bc:	4b71      	ldr	r3, [pc, #452]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2204      	movs	r2, #4
 80053c2:	4013      	ands	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_RCC_OscConfig+0x188>
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e304      	b.n	80059da <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d0:	4b6c      	ldr	r3, [pc, #432]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4a6e      	ldr	r2, [pc, #440]	; (8005590 <HAL_RCC_OscConfig+0x348>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	0019      	movs	r1, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	021a      	lsls	r2, r3, #8
 80053e0:	4b68      	ldr	r3, [pc, #416]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053e6:	4b67      	ldr	r3, [pc, #412]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2209      	movs	r2, #9
 80053ec:	4393      	bics	r3, r2
 80053ee:	0019      	movs	r1, r3
 80053f0:	4b64      	ldr	r3, [pc, #400]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80053f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053f8:	f000 fc42 	bl	8005c80 <HAL_RCC_GetSysClockFreq>
 80053fc:	0001      	movs	r1, r0
 80053fe:	4b61      	ldr	r3, [pc, #388]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	091b      	lsrs	r3, r3, #4
 8005404:	220f      	movs	r2, #15
 8005406:	4013      	ands	r3, r2
 8005408:	4a62      	ldr	r2, [pc, #392]	; (8005594 <HAL_RCC_OscConfig+0x34c>)
 800540a:	5cd3      	ldrb	r3, [r2, r3]
 800540c:	000a      	movs	r2, r1
 800540e:	40da      	lsrs	r2, r3
 8005410:	4b61      	ldr	r3, [pc, #388]	; (8005598 <HAL_RCC_OscConfig+0x350>)
 8005412:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005414:	4b61      	ldr	r3, [pc, #388]	; (800559c <HAL_RCC_OscConfig+0x354>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2513      	movs	r5, #19
 800541a:	197c      	adds	r4, r7, r5
 800541c:	0018      	movs	r0, r3
 800541e:	f7fe fe45 	bl	80040ac <HAL_InitTick>
 8005422:	0003      	movs	r3, r0
 8005424:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005426:	197b      	adds	r3, r7, r5
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d046      	beq.n	80054bc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800542e:	197b      	adds	r3, r7, r5
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	e2d2      	b.n	80059da <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d027      	beq.n	800548a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800543a:	4b52      	ldr	r3, [pc, #328]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2209      	movs	r2, #9
 8005440:	4393      	bics	r3, r2
 8005442:	0019      	movs	r1, r3
 8005444:	4b4f      	ldr	r3, [pc, #316]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005448:	430a      	orrs	r2, r1
 800544a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fe fe74 	bl	8004138 <HAL_GetTick>
 8005450:	0003      	movs	r3, r0
 8005452:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005456:	f7fe fe6f 	bl	8004138 <HAL_GetTick>
 800545a:	0002      	movs	r2, r0
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e2b8      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005468:	4b46      	ldr	r3, [pc, #280]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2204      	movs	r2, #4
 800546e:	4013      	ands	r3, r2
 8005470:	d0f1      	beq.n	8005456 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	4b44      	ldr	r3, [pc, #272]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	4a46      	ldr	r2, [pc, #280]	; (8005590 <HAL_RCC_OscConfig+0x348>)
 8005478:	4013      	ands	r3, r2
 800547a:	0019      	movs	r1, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	021a      	lsls	r2, r3, #8
 8005482:	4b40      	ldr	r3, [pc, #256]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	e018      	b.n	80054bc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548a:	4b3e      	ldr	r3, [pc, #248]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b3d      	ldr	r3, [pc, #244]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 8005490:	2101      	movs	r1, #1
 8005492:	438a      	bics	r2, r1
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005496:	f7fe fe4f 	bl	8004138 <HAL_GetTick>
 800549a:	0003      	movs	r3, r0
 800549c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a0:	f7fe fe4a 	bl	8004138 <HAL_GetTick>
 80054a4:	0002      	movs	r2, r0
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e293      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054b2:	4b34      	ldr	r3, [pc, #208]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2204      	movs	r2, #4
 80054b8:	4013      	ands	r3, r2
 80054ba:	d1f1      	bne.n	80054a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2210      	movs	r2, #16
 80054c2:	4013      	ands	r3, r2
 80054c4:	d100      	bne.n	80054c8 <HAL_RCC_OscConfig+0x280>
 80054c6:	e0a2      	b.n	800560e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d140      	bne.n	8005550 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054ce:	4b2d      	ldr	r3, [pc, #180]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4013      	ands	r3, r2
 80054d8:	d005      	beq.n	80054e6 <HAL_RCC_OscConfig+0x29e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e279      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054e6:	4b27      	ldr	r3, [pc, #156]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <HAL_RCC_OscConfig+0x358>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	0019      	movs	r1, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f4:	4b23      	ldr	r3, [pc, #140]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054fa:	4b22      	ldr	r3, [pc, #136]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	0a19      	lsrs	r1, r3, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	061a      	lsls	r2, r3, #24
 8005508:	4b1e      	ldr	r3, [pc, #120]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	0b5b      	lsrs	r3, r3, #13
 8005514:	3301      	adds	r3, #1
 8005516:	2280      	movs	r2, #128	; 0x80
 8005518:	0212      	lsls	r2, r2, #8
 800551a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800551c:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	210f      	movs	r1, #15
 8005524:	400b      	ands	r3, r1
 8005526:	491b      	ldr	r1, [pc, #108]	; (8005594 <HAL_RCC_OscConfig+0x34c>)
 8005528:	5ccb      	ldrb	r3, [r1, r3]
 800552a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <HAL_RCC_OscConfig+0x350>)
 800552e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <HAL_RCC_OscConfig+0x354>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2513      	movs	r5, #19
 8005536:	197c      	adds	r4, r7, r5
 8005538:	0018      	movs	r0, r3
 800553a:	f7fe fdb7 	bl	80040ac <HAL_InitTick>
 800553e:	0003      	movs	r3, r0
 8005540:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005542:	197b      	adds	r3, r7, r5
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d061      	beq.n	800560e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800554a:	197b      	adds	r3, r7, r5
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	e244      	b.n	80059da <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d040      	beq.n	80055da <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <HAL_RCC_OscConfig+0x33c>)
 800555e:	2180      	movs	r1, #128	; 0x80
 8005560:	0049      	lsls	r1, r1, #1
 8005562:	430a      	orrs	r2, r1
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005566:	f7fe fde7 	bl	8004138 <HAL_GetTick>
 800556a:	0003      	movs	r3, r0
 800556c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800556e:	e019      	b.n	80055a4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005570:	f7fe fde2 	bl	8004138 <HAL_GetTick>
 8005574:	0002      	movs	r2, r0
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d912      	bls.n	80055a4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e22b      	b.n	80059da <HAL_RCC_OscConfig+0x792>
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	40021000 	.word	0x40021000
 8005588:	fffeffff 	.word	0xfffeffff
 800558c:	fffbffff 	.word	0xfffbffff
 8005590:	ffffe0ff 	.word	0xffffe0ff
 8005594:	0800b5e8 	.word	0x0800b5e8
 8005598:	20000000 	.word	0x20000000
 800559c:	20000004 	.word	0x20000004
 80055a0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80055a4:	4bca      	ldr	r3, [pc, #808]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4013      	ands	r3, r2
 80055ae:	d0df      	beq.n	8005570 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055b0:	4bc7      	ldr	r3, [pc, #796]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4ac7      	ldr	r2, [pc, #796]	; (80058d4 <HAL_RCC_OscConfig+0x68c>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	0019      	movs	r1, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055be:	4bc4      	ldr	r3, [pc, #784]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055c4:	4bc2      	ldr	r3, [pc, #776]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	0a19      	lsrs	r1, r3, #8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	061a      	lsls	r2, r3, #24
 80055d2:	4bbf      	ldr	r3, [pc, #764]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
 80055d8:	e019      	b.n	800560e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055da:	4bbd      	ldr	r3, [pc, #756]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4bbc      	ldr	r3, [pc, #752]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80055e0:	49bd      	ldr	r1, [pc, #756]	; (80058d8 <HAL_RCC_OscConfig+0x690>)
 80055e2:	400a      	ands	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fe fda7 	bl	8004138 <HAL_GetTick>
 80055ea:	0003      	movs	r3, r0
 80055ec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055f0:	f7fe fda2 	bl	8004138 <HAL_GetTick>
 80055f4:	0002      	movs	r2, r0
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e1eb      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005602:	4bb3      	ldr	r3, [pc, #716]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4013      	ands	r3, r2
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2208      	movs	r2, #8
 8005614:	4013      	ands	r3, r2
 8005616:	d036      	beq.n	8005686 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d019      	beq.n	8005654 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005620:	4bab      	ldr	r3, [pc, #684]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005624:	4baa      	ldr	r3, [pc, #680]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005626:	2101      	movs	r1, #1
 8005628:	430a      	orrs	r2, r1
 800562a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562c:	f7fe fd84 	bl	8004138 <HAL_GetTick>
 8005630:	0003      	movs	r3, r0
 8005632:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005636:	f7fe fd7f 	bl	8004138 <HAL_GetTick>
 800563a:	0002      	movs	r2, r0
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e1c8      	b.n	80059da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005648:	4ba1      	ldr	r3, [pc, #644]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	2202      	movs	r2, #2
 800564e:	4013      	ands	r3, r2
 8005650:	d0f1      	beq.n	8005636 <HAL_RCC_OscConfig+0x3ee>
 8005652:	e018      	b.n	8005686 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005654:	4b9e      	ldr	r3, [pc, #632]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005658:	4b9d      	ldr	r3, [pc, #628]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800565a:	2101      	movs	r1, #1
 800565c:	438a      	bics	r2, r1
 800565e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005660:	f7fe fd6a 	bl	8004138 <HAL_GetTick>
 8005664:	0003      	movs	r3, r0
 8005666:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800566a:	f7fe fd65 	bl	8004138 <HAL_GetTick>
 800566e:	0002      	movs	r2, r0
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e1ae      	b.n	80059da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800567c:	4b94      	ldr	r3, [pc, #592]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	2202      	movs	r2, #2
 8005682:	4013      	ands	r3, r2
 8005684:	d1f1      	bne.n	800566a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2204      	movs	r2, #4
 800568c:	4013      	ands	r3, r2
 800568e:	d100      	bne.n	8005692 <HAL_RCC_OscConfig+0x44a>
 8005690:	e0ae      	b.n	80057f0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005692:	2023      	movs	r0, #35	; 0x23
 8005694:	183b      	adds	r3, r7, r0
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800569a:	4b8d      	ldr	r3, [pc, #564]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800569c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569e:	2380      	movs	r3, #128	; 0x80
 80056a0:	055b      	lsls	r3, r3, #21
 80056a2:	4013      	ands	r3, r2
 80056a4:	d109      	bne.n	80056ba <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a6:	4b8a      	ldr	r3, [pc, #552]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80056a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056aa:	4b89      	ldr	r3, [pc, #548]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80056ac:	2180      	movs	r1, #128	; 0x80
 80056ae:	0549      	lsls	r1, r1, #21
 80056b0:	430a      	orrs	r2, r1
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80056b4:	183b      	adds	r3, r7, r0
 80056b6:	2201      	movs	r2, #1
 80056b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ba:	4b88      	ldr	r3, [pc, #544]	; (80058dc <HAL_RCC_OscConfig+0x694>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4013      	ands	r3, r2
 80056c4:	d11a      	bne.n	80056fc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c6:	4b85      	ldr	r3, [pc, #532]	; (80058dc <HAL_RCC_OscConfig+0x694>)
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4b84      	ldr	r3, [pc, #528]	; (80058dc <HAL_RCC_OscConfig+0x694>)
 80056cc:	2180      	movs	r1, #128	; 0x80
 80056ce:	0049      	lsls	r1, r1, #1
 80056d0:	430a      	orrs	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056d4:	f7fe fd30 	bl	8004138 <HAL_GetTick>
 80056d8:	0003      	movs	r3, r0
 80056da:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056de:	f7fe fd2b 	bl	8004138 <HAL_GetTick>
 80056e2:	0002      	movs	r2, r0
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b64      	cmp	r3, #100	; 0x64
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e174      	b.n	80059da <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f0:	4b7a      	ldr	r3, [pc, #488]	; (80058dc <HAL_RCC_OscConfig+0x694>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	4013      	ands	r3, r2
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	429a      	cmp	r2, r3
 8005706:	d107      	bne.n	8005718 <HAL_RCC_OscConfig+0x4d0>
 8005708:	4b71      	ldr	r3, [pc, #452]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800570a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800570c:	4b70      	ldr	r3, [pc, #448]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800570e:	2180      	movs	r1, #128	; 0x80
 8005710:	0049      	lsls	r1, r1, #1
 8005712:	430a      	orrs	r2, r1
 8005714:	651a      	str	r2, [r3, #80]	; 0x50
 8005716:	e031      	b.n	800577c <HAL_RCC_OscConfig+0x534>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10c      	bne.n	800573a <HAL_RCC_OscConfig+0x4f2>
 8005720:	4b6b      	ldr	r3, [pc, #428]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005724:	4b6a      	ldr	r3, [pc, #424]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005726:	496c      	ldr	r1, [pc, #432]	; (80058d8 <HAL_RCC_OscConfig+0x690>)
 8005728:	400a      	ands	r2, r1
 800572a:	651a      	str	r2, [r3, #80]	; 0x50
 800572c:	4b68      	ldr	r3, [pc, #416]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800572e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005730:	4b67      	ldr	r3, [pc, #412]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005732:	496b      	ldr	r1, [pc, #428]	; (80058e0 <HAL_RCC_OscConfig+0x698>)
 8005734:	400a      	ands	r2, r1
 8005736:	651a      	str	r2, [r3, #80]	; 0x50
 8005738:	e020      	b.n	800577c <HAL_RCC_OscConfig+0x534>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	23a0      	movs	r3, #160	; 0xa0
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	429a      	cmp	r2, r3
 8005744:	d10e      	bne.n	8005764 <HAL_RCC_OscConfig+0x51c>
 8005746:	4b62      	ldr	r3, [pc, #392]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800574a:	4b61      	ldr	r3, [pc, #388]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800574c:	2180      	movs	r1, #128	; 0x80
 800574e:	00c9      	lsls	r1, r1, #3
 8005750:	430a      	orrs	r2, r1
 8005752:	651a      	str	r2, [r3, #80]	; 0x50
 8005754:	4b5e      	ldr	r3, [pc, #376]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005758:	4b5d      	ldr	r3, [pc, #372]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800575a:	2180      	movs	r1, #128	; 0x80
 800575c:	0049      	lsls	r1, r1, #1
 800575e:	430a      	orrs	r2, r1
 8005760:	651a      	str	r2, [r3, #80]	; 0x50
 8005762:	e00b      	b.n	800577c <HAL_RCC_OscConfig+0x534>
 8005764:	4b5a      	ldr	r3, [pc, #360]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005768:	4b59      	ldr	r3, [pc, #356]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 800576a:	495b      	ldr	r1, [pc, #364]	; (80058d8 <HAL_RCC_OscConfig+0x690>)
 800576c:	400a      	ands	r2, r1
 800576e:	651a      	str	r2, [r3, #80]	; 0x50
 8005770:	4b57      	ldr	r3, [pc, #348]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005774:	4b56      	ldr	r3, [pc, #344]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005776:	495a      	ldr	r1, [pc, #360]	; (80058e0 <HAL_RCC_OscConfig+0x698>)
 8005778:	400a      	ands	r2, r1
 800577a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d015      	beq.n	80057b0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005784:	f7fe fcd8 	bl	8004138 <HAL_GetTick>
 8005788:	0003      	movs	r3, r0
 800578a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800578c:	e009      	b.n	80057a2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578e:	f7fe fcd3 	bl	8004138 <HAL_GetTick>
 8005792:	0002      	movs	r2, r0
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	4a52      	ldr	r2, [pc, #328]	; (80058e4 <HAL_RCC_OscConfig+0x69c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e11b      	b.n	80059da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057a2:	4b4b      	ldr	r3, [pc, #300]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80057a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4013      	ands	r3, r2
 80057ac:	d0ef      	beq.n	800578e <HAL_RCC_OscConfig+0x546>
 80057ae:	e014      	b.n	80057da <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b0:	f7fe fcc2 	bl	8004138 <HAL_GetTick>
 80057b4:	0003      	movs	r3, r0
 80057b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057b8:	e009      	b.n	80057ce <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ba:	f7fe fcbd 	bl	8004138 <HAL_GetTick>
 80057be:	0002      	movs	r2, r0
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	4a47      	ldr	r2, [pc, #284]	; (80058e4 <HAL_RCC_OscConfig+0x69c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e105      	b.n	80059da <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057ce:	4b40      	ldr	r3, [pc, #256]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80057d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4013      	ands	r3, r2
 80057d8:	d1ef      	bne.n	80057ba <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057da:	2323      	movs	r3, #35	; 0x23
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e4:	4b3a      	ldr	r3, [pc, #232]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80057e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e8:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80057ea:	493f      	ldr	r1, [pc, #252]	; (80058e8 <HAL_RCC_OscConfig+0x6a0>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2220      	movs	r2, #32
 80057f6:	4013      	ands	r3, r2
 80057f8:	d049      	beq.n	800588e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d026      	beq.n	8005850 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005802:	4b33      	ldr	r3, [pc, #204]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	4b32      	ldr	r3, [pc, #200]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005808:	2101      	movs	r1, #1
 800580a:	430a      	orrs	r2, r1
 800580c:	609a      	str	r2, [r3, #8]
 800580e:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005812:	4b2f      	ldr	r3, [pc, #188]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005814:	2101      	movs	r1, #1
 8005816:	430a      	orrs	r2, r1
 8005818:	635a      	str	r2, [r3, #52]	; 0x34
 800581a:	4b34      	ldr	r3, [pc, #208]	; (80058ec <HAL_RCC_OscConfig+0x6a4>)
 800581c:	6a1a      	ldr	r2, [r3, #32]
 800581e:	4b33      	ldr	r3, [pc, #204]	; (80058ec <HAL_RCC_OscConfig+0x6a4>)
 8005820:	2180      	movs	r1, #128	; 0x80
 8005822:	0189      	lsls	r1, r1, #6
 8005824:	430a      	orrs	r2, r1
 8005826:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005828:	f7fe fc86 	bl	8004138 <HAL_GetTick>
 800582c:	0003      	movs	r3, r0
 800582e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005832:	f7fe fc81 	bl	8004138 <HAL_GetTick>
 8005836:	0002      	movs	r2, r0
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e0ca      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005844:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2202      	movs	r2, #2
 800584a:	4013      	ands	r3, r2
 800584c:	d0f1      	beq.n	8005832 <HAL_RCC_OscConfig+0x5ea>
 800584e:	e01e      	b.n	800588e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005850:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005856:	2101      	movs	r1, #1
 8005858:	438a      	bics	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <HAL_RCC_OscConfig+0x6a4>)
 800585e:	6a1a      	ldr	r2, [r3, #32]
 8005860:	4b22      	ldr	r3, [pc, #136]	; (80058ec <HAL_RCC_OscConfig+0x6a4>)
 8005862:	4923      	ldr	r1, [pc, #140]	; (80058f0 <HAL_RCC_OscConfig+0x6a8>)
 8005864:	400a      	ands	r2, r1
 8005866:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fe fc66 	bl	8004138 <HAL_GetTick>
 800586c:	0003      	movs	r3, r0
 800586e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005872:	f7fe fc61 	bl	8004138 <HAL_GetTick>
 8005876:	0002      	movs	r2, r0
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e0aa      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2202      	movs	r2, #2
 800588a:	4013      	ands	r3, r2
 800588c:	d1f1      	bne.n	8005872 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d100      	bne.n	8005898 <HAL_RCC_OscConfig+0x650>
 8005896:	e09f      	b.n	80059d8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b0c      	cmp	r3, #12
 800589c:	d100      	bne.n	80058a0 <HAL_RCC_OscConfig+0x658>
 800589e:	e078      	b.n	8005992 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d159      	bne.n	800595c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <HAL_RCC_OscConfig+0x688>)
 80058ae:	4911      	ldr	r1, [pc, #68]	; (80058f4 <HAL_RCC_OscConfig+0x6ac>)
 80058b0:	400a      	ands	r2, r1
 80058b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b4:	f7fe fc40 	bl	8004138 <HAL_GetTick>
 80058b8:	0003      	movs	r3, r0
 80058ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058bc:	e01c      	b.n	80058f8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058be:	f7fe fc3b 	bl	8004138 <HAL_GetTick>
 80058c2:	0002      	movs	r2, r0
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d915      	bls.n	80058f8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e084      	b.n	80059da <HAL_RCC_OscConfig+0x792>
 80058d0:	40021000 	.word	0x40021000
 80058d4:	ffff1fff 	.word	0xffff1fff
 80058d8:	fffffeff 	.word	0xfffffeff
 80058dc:	40007000 	.word	0x40007000
 80058e0:	fffffbff 	.word	0xfffffbff
 80058e4:	00001388 	.word	0x00001388
 80058e8:	efffffff 	.word	0xefffffff
 80058ec:	40010000 	.word	0x40010000
 80058f0:	ffffdfff 	.word	0xffffdfff
 80058f4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058f8:	4b3a      	ldr	r3, [pc, #232]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	049b      	lsls	r3, r3, #18
 8005900:	4013      	ands	r3, r2
 8005902:	d1dc      	bne.n	80058be <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005904:	4b37      	ldr	r3, [pc, #220]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	4a37      	ldr	r2, [pc, #220]	; (80059e8 <HAL_RCC_OscConfig+0x7a0>)
 800590a:	4013      	ands	r3, r2
 800590c:	0019      	movs	r1, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	431a      	orrs	r2, r3
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 8005920:	430a      	orrs	r2, r1
 8005922:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005924:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 800592a:	2180      	movs	r1, #128	; 0x80
 800592c:	0449      	lsls	r1, r1, #17
 800592e:	430a      	orrs	r2, r1
 8005930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005932:	f7fe fc01 	bl	8004138 <HAL_GetTick>
 8005936:	0003      	movs	r3, r0
 8005938:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800593c:	f7fe fbfc 	bl	8004138 <HAL_GetTick>
 8005940:	0002      	movs	r2, r0
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e045      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800594e:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	049b      	lsls	r3, r3, #18
 8005956:	4013      	ands	r3, r2
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x6f4>
 800595a:	e03d      	b.n	80059d8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800595c:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4b20      	ldr	r3, [pc, #128]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 8005962:	4922      	ldr	r1, [pc, #136]	; (80059ec <HAL_RCC_OscConfig+0x7a4>)
 8005964:	400a      	ands	r2, r1
 8005966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005968:	f7fe fbe6 	bl	8004138 <HAL_GetTick>
 800596c:	0003      	movs	r3, r0
 800596e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005972:	f7fe fbe1 	bl	8004138 <HAL_GetTick>
 8005976:	0002      	movs	r2, r0
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e02a      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005984:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	049b      	lsls	r3, r3, #18
 800598c:	4013      	ands	r3, r2
 800598e:	d1f0      	bne.n	8005972 <HAL_RCC_OscConfig+0x72a>
 8005990:	e022      	b.n	80059d8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e01d      	b.n	80059da <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800599e:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <HAL_RCC_OscConfig+0x79c>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	2380      	movs	r3, #128	; 0x80
 80059a8:	025b      	lsls	r3, r3, #9
 80059aa:	401a      	ands	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d10f      	bne.n	80059d4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	23f0      	movs	r3, #240	; 0xf0
 80059b8:	039b      	lsls	r3, r3, #14
 80059ba:	401a      	ands	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d107      	bne.n	80059d4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	23c0      	movs	r3, #192	; 0xc0
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	401a      	ands	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	0018      	movs	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	b00a      	add	sp, #40	; 0x28
 80059e0:	bdb0      	pop	{r4, r5, r7, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	40021000 	.word	0x40021000
 80059e8:	ff02ffff 	.word	0xff02ffff
 80059ec:	feffffff 	.word	0xfeffffff

080059f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e128      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a04:	4b96      	ldr	r3, [pc, #600]	; (8005c60 <HAL_RCC_ClockConfig+0x270>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d91e      	bls.n	8005a50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a12:	4b93      	ldr	r3, [pc, #588]	; (8005c60 <HAL_RCC_ClockConfig+0x270>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2201      	movs	r2, #1
 8005a18:	4393      	bics	r3, r2
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	4b90      	ldr	r3, [pc, #576]	; (8005c60 <HAL_RCC_ClockConfig+0x270>)
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a24:	f7fe fb88 	bl	8004138 <HAL_GetTick>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2c:	e009      	b.n	8005a42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2e:	f7fe fb83 	bl	8004138 <HAL_GetTick>
 8005a32:	0002      	movs	r2, r0
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	4a8a      	ldr	r2, [pc, #552]	; (8005c64 <HAL_RCC_ClockConfig+0x274>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e109      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a42:	4b87      	ldr	r3, [pc, #540]	; (8005c60 <HAL_RCC_ClockConfig+0x270>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2201      	movs	r2, #1
 8005a48:	4013      	ands	r3, r2
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d1ee      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2202      	movs	r2, #2
 8005a56:	4013      	ands	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a5a:	4b83      	ldr	r3, [pc, #524]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	22f0      	movs	r2, #240	; 0xf0
 8005a60:	4393      	bics	r3, r2
 8005a62:	0019      	movs	r1, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	4b7f      	ldr	r3, [pc, #508]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2201      	movs	r2, #1
 8005a74:	4013      	ands	r3, r2
 8005a76:	d100      	bne.n	8005a7a <HAL_RCC_ClockConfig+0x8a>
 8005a78:	e089      	b.n	8005b8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a82:	4b79      	ldr	r3, [pc, #484]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	029b      	lsls	r3, r3, #10
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d120      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0e1      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d107      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a9a:	4b73      	ldr	r3, [pc, #460]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	2380      	movs	r3, #128	; 0x80
 8005aa0:	049b      	lsls	r3, r3, #18
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d114      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e0d5      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d106      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ab2:	4b6d      	ldr	r3, [pc, #436]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2204      	movs	r2, #4
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d109      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0ca      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005ac0:	4b69      	ldr	r3, [pc, #420]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d101      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0c2      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ad0:	4b65      	ldr	r3, [pc, #404]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	4393      	bics	r3, r2
 8005ad8:	0019      	movs	r1, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	4b62      	ldr	r3, [pc, #392]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ae4:	f7fe fb28 	bl	8004138 <HAL_GetTick>
 8005ae8:	0003      	movs	r3, r0
 8005aea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d111      	bne.n	8005b18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005af4:	e009      	b.n	8005b0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af6:	f7fe fb1f 	bl	8004138 <HAL_GetTick>
 8005afa:	0002      	movs	r2, r0
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	4a58      	ldr	r2, [pc, #352]	; (8005c64 <HAL_RCC_ClockConfig+0x274>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e0a5      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b0a:	4b57      	ldr	r3, [pc, #348]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	220c      	movs	r2, #12
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d1ef      	bne.n	8005af6 <HAL_RCC_ClockConfig+0x106>
 8005b16:	e03a      	b.n	8005b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d111      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b20:	e009      	b.n	8005b36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b22:	f7fe fb09 	bl	8004138 <HAL_GetTick>
 8005b26:	0002      	movs	r2, r0
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	4a4d      	ldr	r2, [pc, #308]	; (8005c64 <HAL_RCC_ClockConfig+0x274>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e08f      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b36:	4b4c      	ldr	r3, [pc, #304]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	220c      	movs	r2, #12
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b0c      	cmp	r3, #12
 8005b40:	d1ef      	bne.n	8005b22 <HAL_RCC_ClockConfig+0x132>
 8005b42:	e024      	b.n	8005b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d11b      	bne.n	8005b84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b4c:	e009      	b.n	8005b62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4e:	f7fe faf3 	bl	8004138 <HAL_GetTick>
 8005b52:	0002      	movs	r2, r0
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	4a42      	ldr	r2, [pc, #264]	; (8005c64 <HAL_RCC_ClockConfig+0x274>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e079      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b62:	4b41      	ldr	r3, [pc, #260]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	220c      	movs	r2, #12
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d1ef      	bne.n	8005b4e <HAL_RCC_ClockConfig+0x15e>
 8005b6e:	e00e      	b.n	8005b8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b70:	f7fe fae2 	bl	8004138 <HAL_GetTick>
 8005b74:	0002      	movs	r2, r0
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	4a3a      	ldr	r2, [pc, #232]	; (8005c64 <HAL_RCC_ClockConfig+0x274>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e068      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b84:	4b38      	ldr	r3, [pc, #224]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	220c      	movs	r2, #12
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d1f0      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b8e:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <HAL_RCC_ClockConfig+0x270>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2201      	movs	r2, #1
 8005b94:	4013      	ands	r3, r2
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d21e      	bcs.n	8005bda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9c:	4b30      	ldr	r3, [pc, #192]	; (8005c60 <HAL_RCC_ClockConfig+0x270>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	4393      	bics	r3, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	4b2e      	ldr	r3, [pc, #184]	; (8005c60 <HAL_RCC_ClockConfig+0x270>)
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bae:	f7fe fac3 	bl	8004138 <HAL_GetTick>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	e009      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb8:	f7fe fabe 	bl	8004138 <HAL_GetTick>
 8005bbc:	0002      	movs	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	4a28      	ldr	r2, [pc, #160]	; (8005c64 <HAL_RCC_ClockConfig+0x274>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e044      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bcc:	4b24      	ldr	r3, [pc, #144]	; (8005c60 <HAL_RCC_ClockConfig+0x270>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d1ee      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2204      	movs	r2, #4
 8005be0:	4013      	ands	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be4:	4b20      	ldr	r3, [pc, #128]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4a20      	ldr	r2, [pc, #128]	; (8005c6c <HAL_RCC_ClockConfig+0x27c>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	0019      	movs	r1, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c02:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	4a1a      	ldr	r2, [pc, #104]	; (8005c70 <HAL_RCC_ClockConfig+0x280>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	0019      	movs	r1, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	00da      	lsls	r2, r3, #3
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005c14:	430a      	orrs	r2, r1
 8005c16:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c18:	f000 f832 	bl	8005c80 <HAL_RCC_GetSysClockFreq>
 8005c1c:	0001      	movs	r1, r0
 8005c1e:	4b12      	ldr	r3, [pc, #72]	; (8005c68 <HAL_RCC_ClockConfig+0x278>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	220f      	movs	r2, #15
 8005c26:	4013      	ands	r3, r2
 8005c28:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <HAL_RCC_ClockConfig+0x284>)
 8005c2a:	5cd3      	ldrb	r3, [r2, r3]
 8005c2c:	000a      	movs	r2, r1
 8005c2e:	40da      	lsrs	r2, r3
 8005c30:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <HAL_RCC_ClockConfig+0x288>)
 8005c32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c34:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <HAL_RCC_ClockConfig+0x28c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	250b      	movs	r5, #11
 8005c3a:	197c      	adds	r4, r7, r5
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f7fe fa35 	bl	80040ac <HAL_InitTick>
 8005c42:	0003      	movs	r3, r0
 8005c44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005c46:	197b      	adds	r3, r7, r5
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005c4e:	197b      	adds	r3, r7, r5
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	e000      	b.n	8005c56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	0018      	movs	r0, r3
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	b004      	add	sp, #16
 8005c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	40022000 	.word	0x40022000
 8005c64:	00001388 	.word	0x00001388
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	fffff8ff 	.word	0xfffff8ff
 8005c70:	ffffc7ff 	.word	0xffffc7ff
 8005c74:	0800b5e8 	.word	0x0800b5e8
 8005c78:	20000000 	.word	0x20000000
 8005c7c:	20000004 	.word	0x20000004

08005c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c80:	b5b0      	push	{r4, r5, r7, lr}
 8005c82:	b08e      	sub	sp, #56	; 0x38
 8005c84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005c86:	4b4c      	ldr	r3, [pc, #304]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8e:	230c      	movs	r3, #12
 8005c90:	4013      	ands	r3, r2
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d014      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8005c96:	d900      	bls.n	8005c9a <HAL_RCC_GetSysClockFreq+0x1a>
 8005c98:	e07b      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x112>
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d002      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x24>
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d00b      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0x3a>
 8005ca2:	e076      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005ca4:	4b44      	ldr	r3, [pc, #272]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2210      	movs	r2, #16
 8005caa:	4013      	ands	r3, r2
 8005cac:	d002      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005cae:	4b43      	ldr	r3, [pc, #268]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005cb2:	e07c      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005cb4:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cb8:	e079      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cba:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8005cbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cbe:	e076      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	0c9a      	lsrs	r2, r3, #18
 8005cc4:	230f      	movs	r3, #15
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	4b3f      	ldr	r3, [pc, #252]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x148>)
 8005cca:	5c9b      	ldrb	r3, [r3, r2]
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	0d9a      	lsrs	r2, r3, #22
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cda:	4b37      	ldr	r3, [pc, #220]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	025b      	lsls	r3, r3, #9
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d01a      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	4a35      	ldr	r2, [pc, #212]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	69b8      	ldr	r0, [r7, #24]
 8005cf4:	69f9      	ldr	r1, [r7, #28]
 8005cf6:	f7fa fc31 	bl	800055c <__aeabi_lmul>
 8005cfa:	0002      	movs	r2, r0
 8005cfc:	000b      	movs	r3, r1
 8005cfe:	0010      	movs	r0, r2
 8005d00:	0019      	movs	r1, r3
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f7fa fc05 	bl	800051c <__aeabi_uldivmod>
 8005d12:	0002      	movs	r2, r0
 8005d14:	000b      	movs	r3, r1
 8005d16:	0013      	movs	r3, r2
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1a:	e037      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005d1c:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2210      	movs	r2, #16
 8005d22:	4013      	ands	r3, r2
 8005d24:	d01a      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	4a23      	ldr	r2, [pc, #140]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005d30:	2300      	movs	r3, #0
 8005d32:	68b8      	ldr	r0, [r7, #8]
 8005d34:	68f9      	ldr	r1, [r7, #12]
 8005d36:	f7fa fc11 	bl	800055c <__aeabi_lmul>
 8005d3a:	0002      	movs	r2, r0
 8005d3c:	000b      	movs	r3, r1
 8005d3e:	0010      	movs	r0, r2
 8005d40:	0019      	movs	r1, r3
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f7fa fbe5 	bl	800051c <__aeabi_uldivmod>
 8005d52:	0002      	movs	r2, r0
 8005d54:	000b      	movs	r3, r1
 8005d56:	0013      	movs	r3, r2
 8005d58:	637b      	str	r3, [r7, #52]	; 0x34
 8005d5a:	e017      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	0018      	movs	r0, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	0019      	movs	r1, r3
 8005d64:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005d66:	2300      	movs	r3, #0
 8005d68:	f7fa fbf8 	bl	800055c <__aeabi_lmul>
 8005d6c:	0002      	movs	r2, r0
 8005d6e:	000b      	movs	r3, r1
 8005d70:	0010      	movs	r0, r2
 8005d72:	0019      	movs	r1, r3
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	001c      	movs	r4, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	001d      	movs	r5, r3
 8005d7c:	0022      	movs	r2, r4
 8005d7e:	002b      	movs	r3, r5
 8005d80:	f7fa fbcc 	bl	800051c <__aeabi_uldivmod>
 8005d84:	0002      	movs	r2, r0
 8005d86:	000b      	movs	r3, r1
 8005d88:	0013      	movs	r3, r2
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d90:	e00d      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	0b5b      	lsrs	r3, r3, #13
 8005d98:	2207      	movs	r2, #7
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	3301      	adds	r3, #1
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	0212      	lsls	r2, r2, #8
 8005da6:	409a      	lsls	r2, r3
 8005da8:	0013      	movs	r3, r2
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005dac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005db0:	0018      	movs	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b00e      	add	sp, #56	; 0x38
 8005db6:	bdb0      	pop	{r4, r5, r7, pc}
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	003d0900 	.word	0x003d0900
 8005dc0:	00f42400 	.word	0x00f42400
 8005dc4:	007a1200 	.word	0x007a1200
 8005dc8:	0800b600 	.word	0x0800b600

08005dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd0:	4b02      	ldr	r3, [pc, #8]	; (8005ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	20000000 	.word	0x20000000

08005de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005de4:	f7ff fff2 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005de8:	0001      	movs	r1, r0
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	2207      	movs	r2, #7
 8005df2:	4013      	ands	r3, r2
 8005df4:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005df6:	5cd3      	ldrb	r3, [r2, r3]
 8005df8:	40d9      	lsrs	r1, r3
 8005dfa:	000b      	movs	r3, r1
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	40021000 	.word	0x40021000
 8005e08:	0800b5f8 	.word	0x0800b5f8

08005e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e10:	f7ff ffdc 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005e14:	0001      	movs	r1, r0
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	0adb      	lsrs	r3, r3, #11
 8005e1c:	2207      	movs	r2, #7
 8005e1e:	4013      	ands	r3, r2
 8005e20:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e22:	5cd3      	ldrb	r3, [r2, r3]
 8005e24:	40d9      	lsrs	r1, r3
 8005e26:	000b      	movs	r3, r1
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	40021000 	.word	0x40021000
 8005e34:	0800b5f8 	.word	0x0800b5f8

08005e38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005e40:	2317      	movs	r3, #23
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	4013      	ands	r3, r2
 8005e50:	d106      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d100      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005e5e:	e0d9      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e60:	4ba4      	ldr	r3, [pc, #656]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e64:	2380      	movs	r3, #128	; 0x80
 8005e66:	055b      	lsls	r3, r3, #21
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d10a      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e6c:	4ba1      	ldr	r3, [pc, #644]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e70:	4ba0      	ldr	r3, [pc, #640]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e72:	2180      	movs	r1, #128	; 0x80
 8005e74:	0549      	lsls	r1, r1, #21
 8005e76:	430a      	orrs	r2, r1
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005e7a:	2317      	movs	r3, #23
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e82:	4b9d      	ldr	r3, [pc, #628]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d11a      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e8e:	4b9a      	ldr	r3, [pc, #616]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b99      	ldr	r3, [pc, #612]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	0049      	lsls	r1, r1, #1
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e9c:	f7fe f94c 	bl	8004138 <HAL_GetTick>
 8005ea0:	0003      	movs	r3, r0
 8005ea2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea6:	f7fe f947 	bl	8004138 <HAL_GetTick>
 8005eaa:	0002      	movs	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b64      	cmp	r3, #100	; 0x64
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e118      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb8:	4b8f      	ldr	r3, [pc, #572]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d0f0      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005ec4:	4b8b      	ldr	r3, [pc, #556]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	23c0      	movs	r3, #192	; 0xc0
 8005eca:	039b      	lsls	r3, r3, #14
 8005ecc:	4013      	ands	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	23c0      	movs	r3, #192	; 0xc0
 8005ed6:	039b      	lsls	r3, r3, #14
 8005ed8:	4013      	ands	r3, r2
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d107      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	23c0      	movs	r3, #192	; 0xc0
 8005ee6:	039b      	lsls	r3, r3, #14
 8005ee8:	4013      	ands	r3, r2
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d013      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	23c0      	movs	r3, #192	; 0xc0
 8005ef6:	029b      	lsls	r3, r3, #10
 8005ef8:	401a      	ands	r2, r3
 8005efa:	23c0      	movs	r3, #192	; 0xc0
 8005efc:	029b      	lsls	r3, r3, #10
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d10a      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f02:	4b7c      	ldr	r3, [pc, #496]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	029b      	lsls	r3, r3, #10
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d101      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0e8      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005f18:	4b76      	ldr	r3, [pc, #472]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f1c:	23c0      	movs	r3, #192	; 0xc0
 8005f1e:	029b      	lsls	r3, r3, #10
 8005f20:	4013      	ands	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d049      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	23c0      	movs	r3, #192	; 0xc0
 8005f30:	029b      	lsls	r3, r3, #10
 8005f32:	4013      	ands	r3, r2
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d004      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	4013      	ands	r3, r2
 8005f42:	d10d      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	23c0      	movs	r3, #192	; 0xc0
 8005f4a:	029b      	lsls	r3, r3, #10
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d034      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d02e      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005f60:	4b64      	ldr	r3, [pc, #400]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f64:	4a65      	ldr	r2, [pc, #404]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f6a:	4b62      	ldr	r3, [pc, #392]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f6e:	4b61      	ldr	r3, [pc, #388]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f70:	2180      	movs	r1, #128	; 0x80
 8005f72:	0309      	lsls	r1, r1, #12
 8005f74:	430a      	orrs	r2, r1
 8005f76:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f78:	4b5e      	ldr	r3, [pc, #376]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f7c:	4b5d      	ldr	r3, [pc, #372]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f7e:	4960      	ldr	r1, [pc, #384]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005f80:	400a      	ands	r2, r1
 8005f82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005f84:	4b5b      	ldr	r3, [pc, #364]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4013      	ands	r3, r2
 8005f92:	d014      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f94:	f7fe f8d0 	bl	8004138 <HAL_GetTick>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f9c:	e009      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f9e:	f7fe f8cb 	bl	8004138 <HAL_GetTick>
 8005fa2:	0002      	movs	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	4a56      	ldr	r2, [pc, #344]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e09b      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fb2:	4b50      	ldr	r3, [pc, #320]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d0ef      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	23c0      	movs	r3, #192	; 0xc0
 8005fc4:	029b      	lsls	r3, r3, #10
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	23c0      	movs	r3, #192	; 0xc0
 8005fca:	029b      	lsls	r3, r3, #10
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d10c      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005fd0:	4b48      	ldr	r3, [pc, #288]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a4c      	ldr	r2, [pc, #304]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	23c0      	movs	r3, #192	; 0xc0
 8005fe0:	039b      	lsls	r3, r3, #14
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	4b42      	ldr	r3, [pc, #264]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	23c0      	movs	r3, #192	; 0xc0
 8005ff4:	029b      	lsls	r3, r3, #10
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	4b3e      	ldr	r3, [pc, #248]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ffe:	2317      	movs	r3, #23
 8006000:	18fb      	adds	r3, r7, r3
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d105      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006008:	4b3a      	ldr	r3, [pc, #232]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800600a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600c:	4b39      	ldr	r3, [pc, #228]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800600e:	493f      	ldr	r1, [pc, #252]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006010:	400a      	ands	r2, r1
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2201      	movs	r2, #1
 800601a:	4013      	ands	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800601e:	4b35      	ldr	r3, [pc, #212]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	2203      	movs	r2, #3
 8006024:	4393      	bics	r3, r2
 8006026:	0019      	movs	r1, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800602e:	430a      	orrs	r2, r1
 8006030:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2202      	movs	r2, #2
 8006038:	4013      	ands	r3, r2
 800603a:	d009      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800603c:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	220c      	movs	r2, #12
 8006042:	4393      	bics	r3, r2
 8006044:	0019      	movs	r1, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800604c:	430a      	orrs	r2, r1
 800604e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2204      	movs	r2, #4
 8006056:	4013      	ands	r3, r2
 8006058:	d009      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800605a:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800605c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605e:	4a2c      	ldr	r2, [pc, #176]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006060:	4013      	ands	r3, r2
 8006062:	0019      	movs	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	4b22      	ldr	r3, [pc, #136]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800606a:	430a      	orrs	r2, r1
 800606c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2208      	movs	r2, #8
 8006074:	4013      	ands	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006078:	4b1e      	ldr	r3, [pc, #120]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800607a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607c:	4a25      	ldr	r2, [pc, #148]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800607e:	4013      	ands	r3, r2
 8006080:	0019      	movs	r1, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006088:	430a      	orrs	r2, r1
 800608a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	4013      	ands	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006098:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800609a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609c:	4a17      	ldr	r2, [pc, #92]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800609e:	4013      	ands	r3, r2
 80060a0:	0019      	movs	r1, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69da      	ldr	r2, [r3, #28]
 80060a6:	4b13      	ldr	r3, [pc, #76]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060a8:	430a      	orrs	r2, r1
 80060aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2240      	movs	r2, #64	; 0x40
 80060b2:	4013      	ands	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060b6:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ba:	4a17      	ldr	r2, [pc, #92]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80060bc:	4013      	ands	r3, r2
 80060be:	0019      	movs	r1, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060c6:	430a      	orrs	r2, r1
 80060c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2280      	movs	r2, #128	; 0x80
 80060d0:	4013      	ands	r3, r2
 80060d2:	d009      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d8:	4a10      	ldr	r2, [pc, #64]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060da:	4013      	ands	r3, r2
 80060dc:	0019      	movs	r1, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1a      	ldr	r2, [r3, #32]
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060e4:	430a      	orrs	r2, r1
 80060e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	0018      	movs	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b006      	add	sp, #24
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40007000 	.word	0x40007000
 80060fc:	fffcffff 	.word	0xfffcffff
 8006100:	fff7ffff 	.word	0xfff7ffff
 8006104:	00001388 	.word	0x00001388
 8006108:	ffcfffff 	.word	0xffcfffff
 800610c:	efffffff 	.word	0xefffffff
 8006110:	fffff3ff 	.word	0xfffff3ff
 8006114:	ffffcfff 	.word	0xffffcfff
 8006118:	fbffffff 	.word	0xfbffffff
 800611c:	fff3ffff 	.word	0xfff3ffff

08006120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e032      	b.n	8006198 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2239      	movs	r2, #57	; 0x39
 8006136:	5c9b      	ldrb	r3, [r3, r2]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d107      	bne.n	800614e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2238      	movs	r2, #56	; 0x38
 8006142:	2100      	movs	r1, #0
 8006144:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	0018      	movs	r0, r3
 800614a:	f7fd fe69 	bl	8003e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2239      	movs	r2, #57	; 0x39
 8006152:	2102      	movs	r1, #2
 8006154:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	0019      	movs	r1, r3
 8006160:	0010      	movs	r0, r2
 8006162:	f000 fb15 	bl	8006790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	223e      	movs	r2, #62	; 0x3e
 800616a:	2101      	movs	r1, #1
 800616c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	223a      	movs	r2, #58	; 0x3a
 8006172:	2101      	movs	r1, #1
 8006174:	5499      	strb	r1, [r3, r2]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	223b      	movs	r2, #59	; 0x3b
 800617a:	2101      	movs	r1, #1
 800617c:	5499      	strb	r1, [r3, r2]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	223c      	movs	r2, #60	; 0x3c
 8006182:	2101      	movs	r1, #1
 8006184:	5499      	strb	r1, [r3, r2]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	223d      	movs	r2, #61	; 0x3d
 800618a:	2101      	movs	r1, #1
 800618c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2239      	movs	r2, #57	; 0x39
 8006192:	2101      	movs	r1, #1
 8006194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	0018      	movs	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	b002      	add	sp, #8
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d108      	bne.n	80061c2 <HAL_TIM_PWM_Start+0x22>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	223a      	movs	r2, #58	; 0x3a
 80061b4:	5c9b      	ldrb	r3, [r3, r2]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	1e5a      	subs	r2, r3, #1
 80061bc:	4193      	sbcs	r3, r2
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	e01f      	b.n	8006202 <HAL_TIM_PWM_Start+0x62>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d108      	bne.n	80061da <HAL_TIM_PWM_Start+0x3a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	223b      	movs	r2, #59	; 0x3b
 80061cc:	5c9b      	ldrb	r3, [r3, r2]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	1e5a      	subs	r2, r3, #1
 80061d4:	4193      	sbcs	r3, r2
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	e013      	b.n	8006202 <HAL_TIM_PWM_Start+0x62>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d108      	bne.n	80061f2 <HAL_TIM_PWM_Start+0x52>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	223c      	movs	r2, #60	; 0x3c
 80061e4:	5c9b      	ldrb	r3, [r3, r2]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	1e5a      	subs	r2, r3, #1
 80061ec:	4193      	sbcs	r3, r2
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	e007      	b.n	8006202 <HAL_TIM_PWM_Start+0x62>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	223d      	movs	r2, #61	; 0x3d
 80061f6:	5c9b      	ldrb	r3, [r3, r2]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	1e5a      	subs	r2, r3, #1
 80061fe:	4193      	sbcs	r3, r2
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e052      	b.n	80062b0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0x7a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	223a      	movs	r2, #58	; 0x3a
 8006214:	2102      	movs	r1, #2
 8006216:	5499      	strb	r1, [r3, r2]
 8006218:	e013      	b.n	8006242 <HAL_TIM_PWM_Start+0xa2>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start+0x8a>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	223b      	movs	r2, #59	; 0x3b
 8006224:	2102      	movs	r1, #2
 8006226:	5499      	strb	r1, [r3, r2]
 8006228:	e00b      	b.n	8006242 <HAL_TIM_PWM_Start+0xa2>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d104      	bne.n	800623a <HAL_TIM_PWM_Start+0x9a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	223c      	movs	r2, #60	; 0x3c
 8006234:	2102      	movs	r1, #2
 8006236:	5499      	strb	r1, [r3, r2]
 8006238:	e003      	b.n	8006242 <HAL_TIM_PWM_Start+0xa2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	223d      	movs	r2, #61	; 0x3d
 800623e:	2102      	movs	r1, #2
 8006240:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	2201      	movs	r2, #1
 800624a:	0018      	movs	r0, r3
 800624c:	f000 fd26 	bl	8006c9c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	05db      	lsls	r3, r3, #23
 8006258:	429a      	cmp	r2, r3
 800625a:	d00e      	beq.n	800627a <HAL_TIM_PWM_Start+0xda>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <HAL_TIM_PWM_Start+0x118>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_TIM_PWM_Start+0xda>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a14      	ldr	r2, [pc, #80]	; (80062bc <HAL_TIM_PWM_Start+0x11c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_TIM_PWM_Start+0xda>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a12      	ldr	r2, [pc, #72]	; (80062c0 <HAL_TIM_PWM_Start+0x120>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d111      	bne.n	800629e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2207      	movs	r2, #7
 8006282:	4013      	ands	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b06      	cmp	r3, #6
 800628a:	d010      	beq.n	80062ae <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2101      	movs	r1, #1
 8006298:	430a      	orrs	r2, r1
 800629a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629c:	e007      	b.n	80062ae <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2101      	movs	r1, #1
 80062aa:	430a      	orrs	r2, r1
 80062ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b004      	add	sp, #16
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40010800 	.word	0x40010800
 80062c0:	40011400 	.word	0x40011400

080062c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e032      	b.n	800633c <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2239      	movs	r2, #57	; 0x39
 80062da:	5c9b      	ldrb	r3, [r3, r2]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2238      	movs	r2, #56	; 0x38
 80062e6:	2100      	movs	r1, #0
 80062e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7fd fd55 	bl	8003d9c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2239      	movs	r2, #57	; 0x39
 80062f6:	2102      	movs	r1, #2
 80062f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	0019      	movs	r1, r3
 8006304:	0010      	movs	r0, r2
 8006306:	f000 fa43 	bl	8006790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	223e      	movs	r2, #62	; 0x3e
 800630e:	2101      	movs	r1, #1
 8006310:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	223a      	movs	r2, #58	; 0x3a
 8006316:	2101      	movs	r1, #1
 8006318:	5499      	strb	r1, [r3, r2]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	223b      	movs	r2, #59	; 0x3b
 800631e:	2101      	movs	r1, #1
 8006320:	5499      	strb	r1, [r3, r2]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	223c      	movs	r2, #60	; 0x3c
 8006326:	2101      	movs	r1, #1
 8006328:	5499      	strb	r1, [r3, r2]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	223d      	movs	r2, #61	; 0x3d
 800632e:	2101      	movs	r1, #1
 8006330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2239      	movs	r2, #57	; 0x39
 8006336:	2101      	movs	r1, #1
 8006338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	0018      	movs	r0, r3
 800633e:	46bd      	mov	sp, r7
 8006340:	b002      	add	sp, #8
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_TIM_IC_Start+0x1a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	223a      	movs	r2, #58	; 0x3a
 8006358:	5c9b      	ldrb	r3, [r3, r2]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	e013      	b.n	8006386 <HAL_TIM_IC_Start+0x42>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d104      	bne.n	800636e <HAL_TIM_IC_Start+0x2a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	223b      	movs	r2, #59	; 0x3b
 8006368:	5c9b      	ldrb	r3, [r3, r2]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	e00b      	b.n	8006386 <HAL_TIM_IC_Start+0x42>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d104      	bne.n	800637e <HAL_TIM_IC_Start+0x3a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	223c      	movs	r2, #60	; 0x3c
 8006378:	5c9b      	ldrb	r3, [r3, r2]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	e003      	b.n	8006386 <HAL_TIM_IC_Start+0x42>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	223d      	movs	r2, #61	; 0x3d
 8006382:	5c9b      	ldrb	r3, [r3, r2]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	210f      	movs	r1, #15
 8006388:	187a      	adds	r2, r7, r1
 800638a:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800638c:	187b      	adds	r3, r7, r1
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d001      	beq.n	8006398 <HAL_TIM_IC_Start+0x54>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e052      	b.n	800643e <HAL_TIM_IC_Start+0xfa>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d104      	bne.n	80063a8 <HAL_TIM_IC_Start+0x64>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	223a      	movs	r2, #58	; 0x3a
 80063a2:	2102      	movs	r1, #2
 80063a4:	5499      	strb	r1, [r3, r2]
 80063a6:	e013      	b.n	80063d0 <HAL_TIM_IC_Start+0x8c>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d104      	bne.n	80063b8 <HAL_TIM_IC_Start+0x74>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	223b      	movs	r2, #59	; 0x3b
 80063b2:	2102      	movs	r1, #2
 80063b4:	5499      	strb	r1, [r3, r2]
 80063b6:	e00b      	b.n	80063d0 <HAL_TIM_IC_Start+0x8c>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d104      	bne.n	80063c8 <HAL_TIM_IC_Start+0x84>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	223c      	movs	r2, #60	; 0x3c
 80063c2:	2102      	movs	r1, #2
 80063c4:	5499      	strb	r1, [r3, r2]
 80063c6:	e003      	b.n	80063d0 <HAL_TIM_IC_Start+0x8c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	223d      	movs	r2, #61	; 0x3d
 80063cc:	2102      	movs	r1, #2
 80063ce:	5499      	strb	r1, [r3, r2]

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	2201      	movs	r2, #1
 80063d8:	0018      	movs	r0, r3
 80063da:	f000 fc5f 	bl	8006c9c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	05db      	lsls	r3, r3, #23
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d00e      	beq.n	8006408 <HAL_TIM_IC_Start+0xc4>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <HAL_TIM_IC_Start+0x104>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d009      	beq.n	8006408 <HAL_TIM_IC_Start+0xc4>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a14      	ldr	r2, [pc, #80]	; (800644c <HAL_TIM_IC_Start+0x108>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <HAL_TIM_IC_Start+0xc4>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a13      	ldr	r2, [pc, #76]	; (8006450 <HAL_TIM_IC_Start+0x10c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d111      	bne.n	800642c <HAL_TIM_IC_Start+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2207      	movs	r2, #7
 8006410:	4013      	ands	r3, r2
 8006412:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b06      	cmp	r3, #6
 8006418:	d010      	beq.n	800643c <HAL_TIM_IC_Start+0xf8>
    {
      __HAL_TIM_ENABLE(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2101      	movs	r1, #1
 8006426:	430a      	orrs	r2, r1
 8006428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642a:	e007      	b.n	800643c <HAL_TIM_IC_Start+0xf8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2101      	movs	r1, #1
 8006438:	430a      	orrs	r2, r1
 800643a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b004      	add	sp, #16
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	40000400 	.word	0x40000400
 800644c:	40010800 	.word	0x40010800
 8006450:	40011400 	.word	0x40011400

08006454 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006460:	2317      	movs	r3, #23
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2238      	movs	r2, #56	; 0x38
 800646c:	5c9b      	ldrb	r3, [r3, r2]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_TIM_IC_ConfigChannel+0x22>
 8006472:	2302      	movs	r3, #2
 8006474:	e08c      	b.n	8006590 <HAL_TIM_IC_ConfigChannel+0x13c>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2238      	movs	r2, #56	; 0x38
 800647a:	2101      	movs	r1, #1
 800647c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6819      	ldr	r1, [r3, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f000 fade 	bl	8006a54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	210c      	movs	r1, #12
 80064a4:	438a      	bics	r2, r1
 80064a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6999      	ldr	r1, [r3, #24]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	619a      	str	r2, [r3, #24]
 80064ba:	e062      	b.n	8006582 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d11c      	bne.n	80064fc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6819      	ldr	r1, [r3, #0]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f000 fb1b 	bl	8006b0c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	492d      	ldr	r1, [pc, #180]	; (8006598 <HAL_TIM_IC_ConfigChannel+0x144>)
 80064e2:	400a      	ands	r2, r1
 80064e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6999      	ldr	r1, [r3, #24]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	021a      	lsls	r2, r3, #8
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	619a      	str	r2, [r3, #24]
 80064fa:	e042      	b.n	8006582 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d11b      	bne.n	800653a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6819      	ldr	r1, [r3, #0]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f000 fb3d 	bl	8006b90 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	210c      	movs	r1, #12
 8006522:	438a      	bics	r2, r1
 8006524:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69d9      	ldr	r1, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	61da      	str	r2, [r3, #28]
 8006538:	e023      	b.n	8006582 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b0c      	cmp	r3, #12
 800653e:	d11c      	bne.n	800657a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6819      	ldr	r1, [r3, #0]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f000 fb5e 	bl	8006c10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69da      	ldr	r2, [r3, #28]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	490e      	ldr	r1, [pc, #56]	; (8006598 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006560:	400a      	ands	r2, r1
 8006562:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69d9      	ldr	r1, [r3, #28]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	021a      	lsls	r2, r3, #8
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	61da      	str	r2, [r3, #28]
 8006578:	e003      	b.n	8006582 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800657a:	2317      	movs	r3, #23
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	2201      	movs	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2238      	movs	r2, #56	; 0x38
 8006586:	2100      	movs	r1, #0
 8006588:	5499      	strb	r1, [r3, r2]

  return status;
 800658a:	2317      	movs	r3, #23
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	781b      	ldrb	r3, [r3, #0]
}
 8006590:	0018      	movs	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	b006      	add	sp, #24
 8006596:	bd80      	pop	{r7, pc}
 8006598:	fffff3ff 	.word	0xfffff3ff

0800659c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a8:	2317      	movs	r3, #23
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2238      	movs	r2, #56	; 0x38
 80065b4:	5c9b      	ldrb	r3, [r3, r2]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_TIM_PWM_ConfigChannel+0x22>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e0ad      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2238      	movs	r2, #56	; 0x38
 80065c2:	2101      	movs	r1, #1
 80065c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b0c      	cmp	r3, #12
 80065ca:	d100      	bne.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80065cc:	e076      	b.n	80066bc <HAL_TIM_PWM_ConfigChannel+0x120>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	d900      	bls.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80065d4:	e095      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x166>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d04e      	beq.n	800667a <HAL_TIM_PWM_ConfigChannel+0xde>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d900      	bls.n	80065e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80065e2:	e08e      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x166>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d021      	beq.n	8006634 <HAL_TIM_PWM_ConfigChannel+0x98>
 80065f0:	e087      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	0011      	movs	r1, r2
 80065fa:	0018      	movs	r0, r3
 80065fc:	f000 f926 	bl	800684c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2108      	movs	r1, #8
 800660c:	430a      	orrs	r2, r1
 800660e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2104      	movs	r1, #4
 800661c:	438a      	bics	r2, r1
 800661e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6999      	ldr	r1, [r3, #24]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	619a      	str	r2, [r3, #24]
      break;
 8006632:	e06b      	b.n	800670c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	0011      	movs	r1, r2
 800663c:	0018      	movs	r0, r3
 800663e:	f000 f941 	bl	80068c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2180      	movs	r1, #128	; 0x80
 800664e:	0109      	lsls	r1, r1, #4
 8006650:	430a      	orrs	r2, r1
 8006652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4931      	ldr	r1, [pc, #196]	; (8006724 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006660:	400a      	ands	r2, r1
 8006662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	021a      	lsls	r2, r3, #8
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	619a      	str	r2, [r3, #24]
      break;
 8006678:	e048      	b.n	800670c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0011      	movs	r1, r2
 8006682:	0018      	movs	r0, r3
 8006684:	f000 f960 	bl	8006948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69da      	ldr	r2, [r3, #28]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2108      	movs	r1, #8
 8006694:	430a      	orrs	r2, r1
 8006696:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2104      	movs	r1, #4
 80066a4:	438a      	bics	r2, r1
 80066a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69d9      	ldr	r1, [r3, #28]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	61da      	str	r2, [r3, #28]
      break;
 80066ba:	e027      	b.n	800670c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f000 f97f 	bl	80069c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	0109      	lsls	r1, r1, #4
 80066d8:	430a      	orrs	r2, r1
 80066da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69da      	ldr	r2, [r3, #28]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	490f      	ldr	r1, [pc, #60]	; (8006724 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80066e8:	400a      	ands	r2, r1
 80066ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69d9      	ldr	r1, [r3, #28]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	021a      	lsls	r2, r3, #8
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	61da      	str	r2, [r3, #28]
      break;
 8006700:	e004      	b.n	800670c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006702:	2317      	movs	r3, #23
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
      break;
 800670a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2238      	movs	r2, #56	; 0x38
 8006710:	2100      	movs	r1, #0
 8006712:	5499      	strb	r1, [r3, r2]

  return status;
 8006714:	2317      	movs	r3, #23
 8006716:	18fb      	adds	r3, r7, r3
 8006718:	781b      	ldrb	r3, [r3, #0]
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b006      	add	sp, #24
 8006720:	bd80      	pop	{r7, pc}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	fffffbff 	.word	0xfffffbff

08006728 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b0c      	cmp	r3, #12
 800673a:	d01e      	beq.n	800677a <HAL_TIM_ReadCapturedValue+0x52>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b0c      	cmp	r3, #12
 8006740:	d820      	bhi.n	8006784 <HAL_TIM_ReadCapturedValue+0x5c>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b08      	cmp	r3, #8
 8006746:	d013      	beq.n	8006770 <HAL_TIM_ReadCapturedValue+0x48>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b08      	cmp	r3, #8
 800674c:	d81a      	bhi.n	8006784 <HAL_TIM_ReadCapturedValue+0x5c>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_TIM_ReadCapturedValue+0x34>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b04      	cmp	r3, #4
 8006758:	d005      	beq.n	8006766 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800675a:	e013      	b.n	8006784 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006762:	60fb      	str	r3, [r7, #12]
      break;
 8006764:	e00f      	b.n	8006786 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	60fb      	str	r3, [r7, #12]
      break;
 800676e:	e00a      	b.n	8006786 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	60fb      	str	r3, [r7, #12]
      break;
 8006778:	e005      	b.n	8006786 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	60fb      	str	r3, [r7, #12]
      break;
 8006782:	e000      	b.n	8006786 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8006784:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8006786:	68fb      	ldr	r3, [r7, #12]
}
 8006788:	0018      	movs	r0, r3
 800678a:	46bd      	mov	sp, r7
 800678c:	b004      	add	sp, #16
 800678e:	bd80      	pop	{r7, pc}

08006790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	2380      	movs	r3, #128	; 0x80
 80067a4:	05db      	lsls	r3, r3, #23
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d00b      	beq.n	80067c2 <TIM_Base_SetConfig+0x32>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a23      	ldr	r2, [pc, #140]	; (800683c <TIM_Base_SetConfig+0xac>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d007      	beq.n	80067c2 <TIM_Base_SetConfig+0x32>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a22      	ldr	r2, [pc, #136]	; (8006840 <TIM_Base_SetConfig+0xb0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_Base_SetConfig+0x32>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a21      	ldr	r2, [pc, #132]	; (8006844 <TIM_Base_SetConfig+0xb4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d108      	bne.n	80067d4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2270      	movs	r2, #112	; 0x70
 80067c6:	4393      	bics	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	05db      	lsls	r3, r3, #23
 80067da:	429a      	cmp	r2, r3
 80067dc:	d00b      	beq.n	80067f6 <TIM_Base_SetConfig+0x66>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a16      	ldr	r2, [pc, #88]	; (800683c <TIM_Base_SetConfig+0xac>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d007      	beq.n	80067f6 <TIM_Base_SetConfig+0x66>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a15      	ldr	r2, [pc, #84]	; (8006840 <TIM_Base_SetConfig+0xb0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_Base_SetConfig+0x66>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a14      	ldr	r2, [pc, #80]	; (8006844 <TIM_Base_SetConfig+0xb4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d108      	bne.n	8006808 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4a13      	ldr	r2, [pc, #76]	; (8006848 <TIM_Base_SetConfig+0xb8>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2280      	movs	r2, #128	; 0x80
 800680c:	4393      	bics	r3, r2
 800680e:	001a      	movs	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	615a      	str	r2, [r3, #20]
}
 8006834:	46c0      	nop			; (mov r8, r8)
 8006836:	46bd      	mov	sp, r7
 8006838:	b004      	add	sp, #16
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40000400 	.word	0x40000400
 8006840:	40010800 	.word	0x40010800
 8006844:	40011400 	.word	0x40011400
 8006848:	fffffcff 	.word	0xfffffcff

0800684c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	2201      	movs	r2, #1
 800685c:	4393      	bics	r3, r2
 800685e:	001a      	movs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2270      	movs	r2, #112	; 0x70
 800687a:	4393      	bics	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2203      	movs	r2, #3
 8006882:	4393      	bics	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2202      	movs	r2, #2
 8006894:	4393      	bics	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	621a      	str	r2, [r3, #32]
}
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	b006      	add	sp, #24
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	2210      	movs	r2, #16
 80068d4:	4393      	bics	r3, r2
 80068d6:	001a      	movs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a13      	ldr	r2, [pc, #76]	; (8006940 <TIM_OC2_SetConfig+0x7c>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a12      	ldr	r2, [pc, #72]	; (8006944 <TIM_OC2_SetConfig+0x80>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2220      	movs	r2, #32
 800690e:	4393      	bics	r3, r2
 8006910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	46c0      	nop			; (mov r8, r8)
 800693a:	46bd      	mov	sp, r7
 800693c:	b006      	add	sp, #24
 800693e:	bd80      	pop	{r7, pc}
 8006940:	ffff8fff 	.word	0xffff8fff
 8006944:	fffffcff 	.word	0xfffffcff

08006948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	4a1a      	ldr	r2, [pc, #104]	; (80069c0 <TIM_OC3_SetConfig+0x78>)
 8006958:	401a      	ands	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2270      	movs	r2, #112	; 0x70
 8006974:	4393      	bics	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2203      	movs	r2, #3
 800697c:	4393      	bics	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <TIM_OC3_SetConfig+0x7c>)
 800698e:	4013      	ands	r3, r2
 8006990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	621a      	str	r2, [r3, #32]
}
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b006      	add	sp, #24
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	fffffeff 	.word	0xfffffeff
 80069c4:	fffffdff 	.word	0xfffffdff

080069c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	4a1b      	ldr	r2, [pc, #108]	; (8006a44 <TIM_OC4_SetConfig+0x7c>)
 80069d8:	401a      	ands	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <TIM_OC4_SetConfig+0x80>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <TIM_OC4_SetConfig+0x84>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	4a10      	ldr	r2, [pc, #64]	; (8006a50 <TIM_OC4_SetConfig+0x88>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	031b      	lsls	r3, r3, #12
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b006      	add	sp, #24
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	ffffefff 	.word	0xffffefff
 8006a48:	ffff8fff 	.word	0xffff8fff
 8006a4c:	fffffcff 	.word	0xfffffcff
 8006a50:	ffffdfff 	.word	0xffffdfff

08006a54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	2201      	movs	r2, #1
 8006a68:	4393      	bics	r3, r2
 8006a6a:	001a      	movs	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	2380      	movs	r3, #128	; 0x80
 8006a80:	05db      	lsls	r3, r3, #23
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d00b      	beq.n	8006a9e <TIM_TI1_SetConfig+0x4a>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <TIM_TI1_SetConfig+0xac>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d007      	beq.n	8006a9e <TIM_TI1_SetConfig+0x4a>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <TIM_TI1_SetConfig+0xb0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d003      	beq.n	8006a9e <TIM_TI1_SetConfig+0x4a>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <TIM_TI1_SetConfig+0xb4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d101      	bne.n	8006aa2 <TIM_TI1_SetConfig+0x4e>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e000      	b.n	8006aa4 <TIM_TI1_SetConfig+0x50>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d008      	beq.n	8006aba <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2203      	movs	r2, #3
 8006aac:	4393      	bics	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e003      	b.n	8006ac2 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2201      	movs	r2, #1
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	22f0      	movs	r2, #240	; 0xf0
 8006ac6:	4393      	bics	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	22ff      	movs	r2, #255	; 0xff
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	220a      	movs	r2, #10
 8006adc:	4393      	bics	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	621a      	str	r2, [r3, #32]
}
 8006af8:	46c0      	nop			; (mov r8, r8)
 8006afa:	46bd      	mov	sp, r7
 8006afc:	b006      	add	sp, #24
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40000400 	.word	0x40000400
 8006b04:	40010800 	.word	0x40010800
 8006b08:	40011400 	.word	0x40011400

08006b0c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	2210      	movs	r2, #16
 8006b20:	4393      	bics	r3, r2
 8006b22:	001a      	movs	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <TIM_TI2_SetConfig+0x7c>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	4a10      	ldr	r2, [pc, #64]	; (8006b8c <TIM_TI2_SetConfig+0x80>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	031b      	lsls	r3, r3, #12
 8006b52:	041b      	lsls	r3, r3, #16
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	22a0      	movs	r2, #160	; 0xa0
 8006b60:	4393      	bics	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	22a0      	movs	r2, #160	; 0xa0
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	621a      	str	r2, [r3, #32]
}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b006      	add	sp, #24
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	fffffcff 	.word	0xfffffcff
 8006b8c:	ffff0fff 	.word	0xffff0fff

08006b90 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	4a19      	ldr	r2, [pc, #100]	; (8006c08 <TIM_TI3_SetConfig+0x78>)
 8006ba4:	401a      	ands	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	4393      	bics	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	22f0      	movs	r2, #240	; 0xf0
 8006bca:	4393      	bics	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	22ff      	movs	r2, #255	; 0xff
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4a0b      	ldr	r2, [pc, #44]	; (8006c0c <TIM_TI3_SetConfig+0x7c>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	021a      	lsls	r2, r3, #8
 8006be8:	23a0      	movs	r3, #160	; 0xa0
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	4013      	ands	r3, r2
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	621a      	str	r2, [r3, #32]
}
 8006c00:	46c0      	nop			; (mov r8, r8)
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b006      	add	sp, #24
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	fffffeff 	.word	0xfffffeff
 8006c0c:	fffff5ff 	.word	0xfffff5ff

08006c10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	4a1a      	ldr	r2, [pc, #104]	; (8006c8c <TIM_TI4_SetConfig+0x7c>)
 8006c24:	401a      	ands	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4a15      	ldr	r2, [pc, #84]	; (8006c90 <TIM_TI4_SetConfig+0x80>)
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	4a12      	ldr	r2, [pc, #72]	; (8006c94 <TIM_TI4_SetConfig+0x84>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	031b      	lsls	r3, r3, #12
 8006c54:	041b      	lsls	r3, r3, #16
 8006c56:	0c1b      	lsrs	r3, r3, #16
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	4a0d      	ldr	r2, [pc, #52]	; (8006c98 <TIM_TI4_SetConfig+0x88>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	031a      	lsls	r2, r3, #12
 8006c6a:	23a0      	movs	r3, #160	; 0xa0
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	4013      	ands	r3, r2
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b006      	add	sp, #24
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	ffffefff 	.word	0xffffefff
 8006c90:	fffffcff 	.word	0xfffffcff
 8006c94:	ffff0fff 	.word	0xffff0fff
 8006c98:	ffff5fff 	.word	0xffff5fff

08006c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	221f      	movs	r2, #31
 8006cac:	4013      	ands	r3, r2
 8006cae:	2201      	movs	r2, #1
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	0013      	movs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	43d2      	mvns	r2, r2
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	211f      	movs	r1, #31
 8006ccc:	400b      	ands	r3, r1
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	4099      	lsls	r1, r3
 8006cd2:	000b      	movs	r3, r1
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	b006      	add	sp, #24
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2238      	movs	r2, #56	; 0x38
 8006cf2:	5c9b      	ldrb	r3, [r3, r2]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e047      	b.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2238      	movs	r2, #56	; 0x38
 8006d00:	2101      	movs	r1, #1
 8006d02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2239      	movs	r2, #57	; 0x39
 8006d08:	2102      	movs	r1, #2
 8006d0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2270      	movs	r2, #112	; 0x70
 8006d20:	4393      	bics	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	2380      	movs	r3, #128	; 0x80
 8006d3c:	05db      	lsls	r3, r3, #23
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d00e      	beq.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d009      	beq.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a11      	ldr	r2, [pc, #68]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d10c      	bne.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2280      	movs	r2, #128	; 0x80
 8006d64:	4393      	bics	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2239      	movs	r2, #57	; 0x39
 8006d7e:	2101      	movs	r1, #1
 8006d80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2238      	movs	r2, #56	; 0x38
 8006d86:	2100      	movs	r1, #0
 8006d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b004      	add	sp, #16
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40010800 	.word	0x40010800
 8006d9c:	40011400 	.word	0x40011400

08006da0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2238      	movs	r2, #56	; 0x38
 8006dae:	5c9b      	ldrb	r3, [r3, r2]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_TIMEx_RemapConfig+0x18>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e00c      	b.n	8006dd2 <HAL_TIMEx_RemapConfig+0x32>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2238      	movs	r2, #56	; 0x38
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2238      	movs	r2, #56	; 0x38
 8006dcc:	2100      	movs	r1, #0
 8006dce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	b002      	add	sp, #8
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e044      	b.n	8006e78 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d107      	bne.n	8006e06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2274      	movs	r2, #116	; 0x74
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7fd f8bd 	bl	8003f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2224      	movs	r2, #36	; 0x24
 8006e0a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2101      	movs	r1, #1
 8006e18:	438a      	bics	r2, r1
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	0018      	movs	r0, r3
 8006e20:	f000 fc3e 	bl	80076a0 <UART_SetConfig>
 8006e24:	0003      	movs	r3, r0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e024      	b.n	8006e78 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f000 fed1 	bl	8007be0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	490d      	ldr	r1, [pc, #52]	; (8006e80 <HAL_UART_Init+0xa4>)
 8006e4a:	400a      	ands	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	212a      	movs	r1, #42	; 0x2a
 8006e5a:	438a      	bics	r2, r1
 8006e5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2101      	movs	r1, #1
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 ff69 	bl	8007d48 <UART_CheckIdleState>
 8006e76:	0003      	movs	r3, r0
}
 8006e78:	0018      	movs	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b002      	add	sp, #8
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	ffffb7ff 	.word	0xffffb7ff

08006e84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	; 0x28
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	1dbb      	adds	r3, r7, #6
 8006e92:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d000      	beq.n	8006e9e <HAL_UART_Transmit+0x1a>
 8006e9c:	e095      	b.n	8006fca <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_UART_Transmit+0x28>
 8006ea4:	1dbb      	adds	r3, r7, #6
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e08d      	b.n	8006fcc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	2380      	movs	r3, #128	; 0x80
 8006eb6:	015b      	lsls	r3, r3, #5
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d109      	bne.n	8006ed0 <HAL_UART_Transmit+0x4c>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4013      	ands	r3, r2
 8006eca:	d001      	beq.n	8006ed0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e07d      	b.n	8006fcc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2274      	movs	r2, #116	; 0x74
 8006ed4:	5c9b      	ldrb	r3, [r3, r2]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Transmit+0x5a>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e076      	b.n	8006fcc <HAL_UART_Transmit+0x148>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2274      	movs	r2, #116	; 0x74
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2280      	movs	r2, #128	; 0x80
 8006eea:	2100      	movs	r1, #0
 8006eec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2221      	movs	r2, #33	; 0x21
 8006ef2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ef4:	f7fd f920 	bl	8004138 <HAL_GetTick>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	1dba      	adds	r2, r7, #6
 8006f00:	2150      	movs	r1, #80	; 0x50
 8006f02:	8812      	ldrh	r2, [r2, #0]
 8006f04:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1dba      	adds	r2, r7, #6
 8006f0a:	2152      	movs	r1, #82	; 0x52
 8006f0c:	8812      	ldrh	r2, [r2, #0]
 8006f0e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	2380      	movs	r3, #128	; 0x80
 8006f16:	015b      	lsls	r3, r3, #5
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d108      	bne.n	8006f2e <HAL_UART_Transmit+0xaa>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	61bb      	str	r3, [r7, #24]
 8006f2c:	e003      	b.n	8006f36 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2274      	movs	r2, #116	; 0x74
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006f3e:	e02c      	b.n	8006f9a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	0013      	movs	r3, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	f000 ff43 	bl	8007dd8 <UART_WaitOnFlagUntilTimeout>
 8006f52:	1e03      	subs	r3, r0, #0
 8006f54:	d001      	beq.n	8006f5a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e038      	b.n	8006fcc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10b      	bne.n	8006f78 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	001a      	movs	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	05d2      	lsls	r2, r2, #23
 8006f6c:	0dd2      	lsrs	r2, r2, #23
 8006f6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	3302      	adds	r3, #2
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	e007      	b.n	8006f88 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	3301      	adds	r3, #1
 8006f86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2252      	movs	r2, #82	; 0x52
 8006f8c:	5a9b      	ldrh	r3, [r3, r2]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b299      	uxth	r1, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2252      	movs	r2, #82	; 0x52
 8006f98:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2252      	movs	r2, #82	; 0x52
 8006f9e:	5a9b      	ldrh	r3, [r3, r2]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1cc      	bne.n	8006f40 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	0013      	movs	r3, r2
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2140      	movs	r1, #64	; 0x40
 8006fb4:	f000 ff10 	bl	8007dd8 <UART_WaitOnFlagUntilTimeout>
 8006fb8:	1e03      	subs	r3, r0, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e005      	b.n	8006fcc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e000      	b.n	8006fcc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006fca:	2302      	movs	r3, #2
  }
}
 8006fcc:	0018      	movs	r0, r3
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	b008      	add	sp, #32
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	1dbb      	adds	r3, r7, #6
 8006fe0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d155      	bne.n	8007096 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <HAL_UART_Receive_IT+0x24>
 8006ff0:	1dbb      	adds	r3, r7, #6
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e04d      	b.n	8007098 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	2380      	movs	r3, #128	; 0x80
 8007002:	015b      	lsls	r3, r3, #5
 8007004:	429a      	cmp	r2, r3
 8007006:	d109      	bne.n	800701c <HAL_UART_Receive_IT+0x48>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d105      	bne.n	800701c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2201      	movs	r2, #1
 8007014:	4013      	ands	r3, r2
 8007016:	d001      	beq.n	800701c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e03d      	b.n	8007098 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2274      	movs	r2, #116	; 0x74
 8007020:	5c9b      	ldrb	r3, [r3, r2]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_UART_Receive_IT+0x56>
 8007026:	2302      	movs	r3, #2
 8007028:	e036      	b.n	8007098 <HAL_UART_Receive_IT+0xc4>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2274      	movs	r2, #116	; 0x74
 800702e:	2101      	movs	r1, #1
 8007030:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a18      	ldr	r2, [pc, #96]	; (80070a0 <HAL_UART_Receive_IT+0xcc>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d020      	beq.n	8007084 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	041b      	lsls	r3, r3, #16
 800704c:	4013      	ands	r3, r2
 800704e:	d019      	beq.n	8007084 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007050:	f3ef 8310 	mrs	r3, PRIMASK
 8007054:	613b      	str	r3, [r7, #16]
  return(result);
 8007056:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007058:	61fb      	str	r3, [r7, #28]
 800705a:	2301      	movs	r3, #1
 800705c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f383 8810 	msr	PRIMASK, r3
}
 8007064:	46c0      	nop			; (mov r8, r8)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2180      	movs	r1, #128	; 0x80
 8007072:	04c9      	lsls	r1, r1, #19
 8007074:	430a      	orrs	r2, r1
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	f383 8810 	msr	PRIMASK, r3
}
 8007082:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007084:	1dbb      	adds	r3, r7, #6
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	0018      	movs	r0, r3
 800708e:	f000 ff67 	bl	8007f60 <UART_Start_Receive_IT>
 8007092:	0003      	movs	r3, r0
 8007094:	e000      	b.n	8007098 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007096:	2302      	movs	r3, #2
  }
}
 8007098:	0018      	movs	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	b008      	add	sp, #32
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40004800 	.word	0x40004800

080070a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b0ab      	sub	sp, #172	; 0xac
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	22a4      	movs	r2, #164	; 0xa4
 80070b4:	18b9      	adds	r1, r7, r2
 80070b6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	20a0      	movs	r0, #160	; 0xa0
 80070c0:	1839      	adds	r1, r7, r0
 80070c2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	219c      	movs	r1, #156	; 0x9c
 80070cc:	1879      	adds	r1, r7, r1
 80070ce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070d0:	0011      	movs	r1, r2
 80070d2:	18bb      	adds	r3, r7, r2
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a99      	ldr	r2, [pc, #612]	; (800733c <HAL_UART_IRQHandler+0x298>)
 80070d8:	4013      	ands	r3, r2
 80070da:	2298      	movs	r2, #152	; 0x98
 80070dc:	18bc      	adds	r4, r7, r2
 80070de:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80070e0:	18bb      	adds	r3, r7, r2
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d114      	bne.n	8007112 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070e8:	187b      	adds	r3, r7, r1
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2220      	movs	r2, #32
 80070ee:	4013      	ands	r3, r2
 80070f0:	d00f      	beq.n	8007112 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070f2:	183b      	adds	r3, r7, r0
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2220      	movs	r2, #32
 80070f8:	4013      	ands	r3, r2
 80070fa:	d00a      	beq.n	8007112 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007100:	2b00      	cmp	r3, #0
 8007102:	d100      	bne.n	8007106 <HAL_UART_IRQHandler+0x62>
 8007104:	e298      	b.n	8007638 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	0010      	movs	r0, r2
 800710e:	4798      	blx	r3
      }
      return;
 8007110:	e292      	b.n	8007638 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007112:	2398      	movs	r3, #152	; 0x98
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d100      	bne.n	800711e <HAL_UART_IRQHandler+0x7a>
 800711c:	e114      	b.n	8007348 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800711e:	239c      	movs	r3, #156	; 0x9c
 8007120:	18fb      	adds	r3, r7, r3
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2201      	movs	r2, #1
 8007126:	4013      	ands	r3, r2
 8007128:	d106      	bne.n	8007138 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800712a:	23a0      	movs	r3, #160	; 0xa0
 800712c:	18fb      	adds	r3, r7, r3
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a83      	ldr	r2, [pc, #524]	; (8007340 <HAL_UART_IRQHandler+0x29c>)
 8007132:	4013      	ands	r3, r2
 8007134:	d100      	bne.n	8007138 <HAL_UART_IRQHandler+0x94>
 8007136:	e107      	b.n	8007348 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007138:	23a4      	movs	r3, #164	; 0xa4
 800713a:	18fb      	adds	r3, r7, r3
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2201      	movs	r2, #1
 8007140:	4013      	ands	r3, r2
 8007142:	d012      	beq.n	800716a <HAL_UART_IRQHandler+0xc6>
 8007144:	23a0      	movs	r3, #160	; 0xa0
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	2380      	movs	r3, #128	; 0x80
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	4013      	ands	r3, r2
 8007150:	d00b      	beq.n	800716a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2201      	movs	r2, #1
 8007158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2280      	movs	r2, #128	; 0x80
 800715e:	589b      	ldr	r3, [r3, r2]
 8007160:	2201      	movs	r2, #1
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2180      	movs	r1, #128	; 0x80
 8007168:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800716a:	23a4      	movs	r3, #164	; 0xa4
 800716c:	18fb      	adds	r3, r7, r3
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2202      	movs	r2, #2
 8007172:	4013      	ands	r3, r2
 8007174:	d011      	beq.n	800719a <HAL_UART_IRQHandler+0xf6>
 8007176:	239c      	movs	r3, #156	; 0x9c
 8007178:	18fb      	adds	r3, r7, r3
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2201      	movs	r2, #1
 800717e:	4013      	ands	r3, r2
 8007180:	d00b      	beq.n	800719a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2202      	movs	r2, #2
 8007188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2280      	movs	r2, #128	; 0x80
 800718e:	589b      	ldr	r3, [r3, r2]
 8007190:	2204      	movs	r2, #4
 8007192:	431a      	orrs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2180      	movs	r1, #128	; 0x80
 8007198:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800719a:	23a4      	movs	r3, #164	; 0xa4
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2204      	movs	r2, #4
 80071a2:	4013      	ands	r3, r2
 80071a4:	d011      	beq.n	80071ca <HAL_UART_IRQHandler+0x126>
 80071a6:	239c      	movs	r3, #156	; 0x9c
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2201      	movs	r2, #1
 80071ae:	4013      	ands	r3, r2
 80071b0:	d00b      	beq.n	80071ca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2204      	movs	r2, #4
 80071b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2280      	movs	r2, #128	; 0x80
 80071be:	589b      	ldr	r3, [r3, r2]
 80071c0:	2202      	movs	r2, #2
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2180      	movs	r1, #128	; 0x80
 80071c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071ca:	23a4      	movs	r3, #164	; 0xa4
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2208      	movs	r2, #8
 80071d2:	4013      	ands	r3, r2
 80071d4:	d017      	beq.n	8007206 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071d6:	23a0      	movs	r3, #160	; 0xa0
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2220      	movs	r2, #32
 80071de:	4013      	ands	r3, r2
 80071e0:	d105      	bne.n	80071ee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071e2:	239c      	movs	r3, #156	; 0x9c
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2201      	movs	r2, #1
 80071ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071ec:	d00b      	beq.n	8007206 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2208      	movs	r2, #8
 80071f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2280      	movs	r2, #128	; 0x80
 80071fa:	589b      	ldr	r3, [r3, r2]
 80071fc:	2208      	movs	r2, #8
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2180      	movs	r1, #128	; 0x80
 8007204:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007206:	23a4      	movs	r3, #164	; 0xa4
 8007208:	18fb      	adds	r3, r7, r3
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	4013      	ands	r3, r2
 8007212:	d013      	beq.n	800723c <HAL_UART_IRQHandler+0x198>
 8007214:	23a0      	movs	r3, #160	; 0xa0
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	04db      	lsls	r3, r3, #19
 800721e:	4013      	ands	r3, r2
 8007220:	d00c      	beq.n	800723c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2280      	movs	r2, #128	; 0x80
 8007228:	0112      	lsls	r2, r2, #4
 800722a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2280      	movs	r2, #128	; 0x80
 8007230:	589b      	ldr	r3, [r3, r2]
 8007232:	2220      	movs	r2, #32
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2280      	movs	r2, #128	; 0x80
 8007240:	589b      	ldr	r3, [r3, r2]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d100      	bne.n	8007248 <HAL_UART_IRQHandler+0x1a4>
 8007246:	e1f9      	b.n	800763c <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007248:	23a4      	movs	r3, #164	; 0xa4
 800724a:	18fb      	adds	r3, r7, r3
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2220      	movs	r2, #32
 8007250:	4013      	ands	r3, r2
 8007252:	d00e      	beq.n	8007272 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007254:	23a0      	movs	r3, #160	; 0xa0
 8007256:	18fb      	adds	r3, r7, r3
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2220      	movs	r2, #32
 800725c:	4013      	ands	r3, r2
 800725e:	d008      	beq.n	8007272 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007264:	2b00      	cmp	r3, #0
 8007266:	d004      	beq.n	8007272 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	0010      	movs	r0, r2
 8007270:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2280      	movs	r2, #128	; 0x80
 8007276:	589b      	ldr	r3, [r3, r2]
 8007278:	2194      	movs	r1, #148	; 0x94
 800727a:	187a      	adds	r2, r7, r1
 800727c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2240      	movs	r2, #64	; 0x40
 8007286:	4013      	ands	r3, r2
 8007288:	2b40      	cmp	r3, #64	; 0x40
 800728a:	d004      	beq.n	8007296 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800728c:	187b      	adds	r3, r7, r1
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2228      	movs	r2, #40	; 0x28
 8007292:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007294:	d047      	beq.n	8007326 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	0018      	movs	r0, r3
 800729a:	f000 ff11 	bl	80080c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	2240      	movs	r2, #64	; 0x40
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d137      	bne.n	800731c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ac:	f3ef 8310 	mrs	r3, PRIMASK
 80072b0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80072b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072b4:	2090      	movs	r0, #144	; 0x90
 80072b6:	183a      	adds	r2, r7, r0
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	2301      	movs	r3, #1
 80072bc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c0:	f383 8810 	msr	PRIMASK, r3
}
 80072c4:	46c0      	nop			; (mov r8, r8)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2140      	movs	r1, #64	; 0x40
 80072d2:	438a      	bics	r2, r1
 80072d4:	609a      	str	r2, [r3, #8]
 80072d6:	183b      	adds	r3, r7, r0
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072de:	f383 8810 	msr	PRIMASK, r3
}
 80072e2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d012      	beq.n	8007312 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	4a14      	ldr	r2, [pc, #80]	; (8007344 <HAL_UART_IRQHandler+0x2a0>)
 80072f2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f8:	0018      	movs	r0, r3
 80072fa:	f7fd f869 	bl	80043d0 <HAL_DMA_Abort_IT>
 80072fe:	1e03      	subs	r3, r0, #0
 8007300:	d01a      	beq.n	8007338 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	0018      	movs	r0, r3
 800730e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	e012      	b.n	8007338 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	0018      	movs	r0, r3
 8007316:	f000 f9af 	bl	8007678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731a:	e00d      	b.n	8007338 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	0018      	movs	r0, r3
 8007320:	f000 f9aa 	bl	8007678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007324:	e008      	b.n	8007338 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	0018      	movs	r0, r3
 800732a:	f000 f9a5 	bl	8007678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2280      	movs	r2, #128	; 0x80
 8007332:	2100      	movs	r1, #0
 8007334:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007336:	e181      	b.n	800763c <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007338:	46c0      	nop			; (mov r8, r8)
    return;
 800733a:	e17f      	b.n	800763c <HAL_UART_IRQHandler+0x598>
 800733c:	0000080f 	.word	0x0000080f
 8007340:	04000120 	.word	0x04000120
 8007344:	08008185 	.word	0x08008185

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734c:	2b01      	cmp	r3, #1
 800734e:	d000      	beq.n	8007352 <HAL_UART_IRQHandler+0x2ae>
 8007350:	e133      	b.n	80075ba <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007352:	23a4      	movs	r3, #164	; 0xa4
 8007354:	18fb      	adds	r3, r7, r3
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2210      	movs	r2, #16
 800735a:	4013      	ands	r3, r2
 800735c:	d100      	bne.n	8007360 <HAL_UART_IRQHandler+0x2bc>
 800735e:	e12c      	b.n	80075ba <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007360:	23a0      	movs	r3, #160	; 0xa0
 8007362:	18fb      	adds	r3, r7, r3
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2210      	movs	r2, #16
 8007368:	4013      	ands	r3, r2
 800736a:	d100      	bne.n	800736e <HAL_UART_IRQHandler+0x2ca>
 800736c:	e125      	b.n	80075ba <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2210      	movs	r2, #16
 8007374:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2240      	movs	r2, #64	; 0x40
 800737e:	4013      	ands	r3, r2
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	d000      	beq.n	8007386 <HAL_UART_IRQHandler+0x2e2>
 8007384:	e09d      	b.n	80074c2 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	217e      	movs	r1, #126	; 0x7e
 8007390:	187b      	adds	r3, r7, r1
 8007392:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007394:	187b      	adds	r3, r7, r1
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d100      	bne.n	800739e <HAL_UART_IRQHandler+0x2fa>
 800739c:	e150      	b.n	8007640 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2258      	movs	r2, #88	; 0x58
 80073a2:	5a9b      	ldrh	r3, [r3, r2]
 80073a4:	187a      	adds	r2, r7, r1
 80073a6:	8812      	ldrh	r2, [r2, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d300      	bcc.n	80073ae <HAL_UART_IRQHandler+0x30a>
 80073ac:	e148      	b.n	8007640 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	187a      	adds	r2, r7, r1
 80073b2:	215a      	movs	r1, #90	; 0x5a
 80073b4:	8812      	ldrh	r2, [r2, #0]
 80073b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2220      	movs	r2, #32
 80073c2:	4013      	ands	r3, r2
 80073c4:	d16e      	bne.n	80074a4 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80073d0:	2301      	movs	r3, #1
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d6:	f383 8810 	msr	PRIMASK, r3
}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	499a      	ldr	r1, [pc, #616]	; (8007650 <HAL_UART_IRQHandler+0x5ac>)
 80073e8:	400a      	ands	r2, r1
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	f383 8810 	msr	PRIMASK, r3
}
 80073f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f8:	f3ef 8310 	mrs	r3, PRIMASK
 80073fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80073fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007400:	677b      	str	r3, [r7, #116]	; 0x74
 8007402:	2301      	movs	r3, #1
 8007404:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007408:	f383 8810 	msr	PRIMASK, r3
}
 800740c:	46c0      	nop			; (mov r8, r8)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2101      	movs	r1, #1
 800741a:	438a      	bics	r2, r1
 800741c:	609a      	str	r2, [r3, #8]
 800741e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007420:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007424:	f383 8810 	msr	PRIMASK, r3
}
 8007428:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800742a:	f3ef 8310 	mrs	r3, PRIMASK
 800742e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007430:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007432:	673b      	str	r3, [r7, #112]	; 0x70
 8007434:	2301      	movs	r3, #1
 8007436:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743a:	f383 8810 	msr	PRIMASK, r3
}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2140      	movs	r1, #64	; 0x40
 800744c:	438a      	bics	r2, r1
 800744e:	609a      	str	r2, [r3, #8]
 8007450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007452:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007456:	f383 8810 	msr	PRIMASK, r3
}
 800745a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007468:	f3ef 8310 	mrs	r3, PRIMASK
 800746c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800746e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007470:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007472:	2301      	movs	r3, #1
 8007474:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007478:	f383 8810 	msr	PRIMASK, r3
}
 800747c:	46c0      	nop			; (mov r8, r8)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2110      	movs	r1, #16
 800748a:	438a      	bics	r2, r1
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007490:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007494:	f383 8810 	msr	PRIMASK, r3
}
 8007498:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749e:	0018      	movs	r0, r3
 80074a0:	f7fc ff56 	bl	8004350 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2258      	movs	r2, #88	; 0x58
 80074a8:	5a9a      	ldrh	r2, [r3, r2]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	215a      	movs	r1, #90	; 0x5a
 80074ae:	5a5b      	ldrh	r3, [r3, r1]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	0011      	movs	r1, r2
 80074ba:	0018      	movs	r0, r3
 80074bc:	f000 f8e4 	bl	8007688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074c0:	e0be      	b.n	8007640 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2258      	movs	r2, #88	; 0x58
 80074c6:	5a99      	ldrh	r1, [r3, r2]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	225a      	movs	r2, #90	; 0x5a
 80074cc:	5a9b      	ldrh	r3, [r3, r2]
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	208e      	movs	r0, #142	; 0x8e
 80074d2:	183b      	adds	r3, r7, r0
 80074d4:	1a8a      	subs	r2, r1, r2
 80074d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	225a      	movs	r2, #90	; 0x5a
 80074dc:	5a9b      	ldrh	r3, [r3, r2]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d100      	bne.n	80074e6 <HAL_UART_IRQHandler+0x442>
 80074e4:	e0ae      	b.n	8007644 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80074e6:	183b      	adds	r3, r7, r0
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d100      	bne.n	80074f0 <HAL_UART_IRQHandler+0x44c>
 80074ee:	e0a9      	b.n	8007644 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f0:	f3ef 8310 	mrs	r3, PRIMASK
 80074f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80074f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f8:	2488      	movs	r4, #136	; 0x88
 80074fa:	193a      	adds	r2, r7, r4
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	2301      	movs	r3, #1
 8007500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f383 8810 	msr	PRIMASK, r3
}
 8007508:	46c0      	nop			; (mov r8, r8)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	494f      	ldr	r1, [pc, #316]	; (8007654 <HAL_UART_IRQHandler+0x5b0>)
 8007516:	400a      	ands	r2, r1
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	193b      	adds	r3, r7, r4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f383 8810 	msr	PRIMASK, r3
}
 8007526:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007528:	f3ef 8310 	mrs	r3, PRIMASK
 800752c:	61bb      	str	r3, [r7, #24]
  return(result);
 800752e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007530:	2484      	movs	r4, #132	; 0x84
 8007532:	193a      	adds	r2, r7, r4
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	2301      	movs	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	f383 8810 	msr	PRIMASK, r3
}
 8007540:	46c0      	nop			; (mov r8, r8)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2101      	movs	r1, #1
 800754e:	438a      	bics	r2, r1
 8007550:	609a      	str	r2, [r3, #8]
 8007552:	193b      	adds	r3, r7, r4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	f383 8810 	msr	PRIMASK, r3
}
 800755e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007572:	f3ef 8310 	mrs	r3, PRIMASK
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800757a:	2480      	movs	r4, #128	; 0x80
 800757c:	193a      	adds	r2, r7, r4
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	2301      	movs	r3, #1
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	f383 8810 	msr	PRIMASK, r3
}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2110      	movs	r1, #16
 8007598:	438a      	bics	r2, r1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	193b      	adds	r3, r7, r4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	f383 8810 	msr	PRIMASK, r3
}
 80075a8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075aa:	183b      	adds	r3, r7, r0
 80075ac:	881a      	ldrh	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	0011      	movs	r1, r2
 80075b2:	0018      	movs	r0, r3
 80075b4:	f000 f868 	bl	8007688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075b8:	e044      	b.n	8007644 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075ba:	23a4      	movs	r3, #164	; 0xa4
 80075bc:	18fb      	adds	r3, r7, r3
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	2380      	movs	r3, #128	; 0x80
 80075c2:	035b      	lsls	r3, r3, #13
 80075c4:	4013      	ands	r3, r2
 80075c6:	d010      	beq.n	80075ea <HAL_UART_IRQHandler+0x546>
 80075c8:	239c      	movs	r3, #156	; 0x9c
 80075ca:	18fb      	adds	r3, r7, r3
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	2380      	movs	r3, #128	; 0x80
 80075d0:	03db      	lsls	r3, r3, #15
 80075d2:	4013      	ands	r3, r2
 80075d4:	d009      	beq.n	80075ea <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2280      	movs	r2, #128	; 0x80
 80075dc:	0352      	lsls	r2, r2, #13
 80075de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	0018      	movs	r0, r3
 80075e4:	f000 ff78 	bl	80084d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075e8:	e02f      	b.n	800764a <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075ea:	23a4      	movs	r3, #164	; 0xa4
 80075ec:	18fb      	adds	r3, r7, r3
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2280      	movs	r2, #128	; 0x80
 80075f2:	4013      	ands	r3, r2
 80075f4:	d00f      	beq.n	8007616 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075f6:	23a0      	movs	r3, #160	; 0xa0
 80075f8:	18fb      	adds	r3, r7, r3
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2280      	movs	r2, #128	; 0x80
 80075fe:	4013      	ands	r3, r2
 8007600:	d009      	beq.n	8007616 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007606:	2b00      	cmp	r3, #0
 8007608:	d01e      	beq.n	8007648 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	0010      	movs	r0, r2
 8007612:	4798      	blx	r3
    }
    return;
 8007614:	e018      	b.n	8007648 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007616:	23a4      	movs	r3, #164	; 0xa4
 8007618:	18fb      	adds	r3, r7, r3
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2240      	movs	r2, #64	; 0x40
 800761e:	4013      	ands	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_UART_IRQHandler+0x5a6>
 8007622:	23a0      	movs	r3, #160	; 0xa0
 8007624:	18fb      	adds	r3, r7, r3
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2240      	movs	r2, #64	; 0x40
 800762a:	4013      	ands	r3, r2
 800762c:	d00d      	beq.n	800764a <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	0018      	movs	r0, r3
 8007632:	f000 fdbe 	bl	80081b2 <UART_EndTransmit_IT>
    return;
 8007636:	e008      	b.n	800764a <HAL_UART_IRQHandler+0x5a6>
      return;
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	e006      	b.n	800764a <HAL_UART_IRQHandler+0x5a6>
    return;
 800763c:	46c0      	nop			; (mov r8, r8)
 800763e:	e004      	b.n	800764a <HAL_UART_IRQHandler+0x5a6>
      return;
 8007640:	46c0      	nop			; (mov r8, r8)
 8007642:	e002      	b.n	800764a <HAL_UART_IRQHandler+0x5a6>
      return;
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	e000      	b.n	800764a <HAL_UART_IRQHandler+0x5a6>
    return;
 8007648:	46c0      	nop			; (mov r8, r8)
  }

}
 800764a:	46bd      	mov	sp, r7
 800764c:	b02b      	add	sp, #172	; 0xac
 800764e:	bd90      	pop	{r4, r7, pc}
 8007650:	fffffeff 	.word	0xfffffeff
 8007654:	fffffedf 	.word	0xfffffedf

08007658 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007660:	46c0      	nop			; (mov r8, r8)
 8007662:	46bd      	mov	sp, r7
 8007664:	b002      	add	sp, #8
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007670:	46c0      	nop			; (mov r8, r8)
 8007672:	46bd      	mov	sp, r7
 8007674:	b002      	add	sp, #8
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007680:	46c0      	nop			; (mov r8, r8)
 8007682:	46bd      	mov	sp, r7
 8007684:	b002      	add	sp, #8
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	000a      	movs	r2, r1
 8007692:	1cbb      	adds	r3, r7, #2
 8007694:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	46bd      	mov	sp, r7
 800769a:	b002      	add	sp, #8
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076a0:	b5b0      	push	{r4, r5, r7, lr}
 80076a2:	b08e      	sub	sp, #56	; 0x38
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076a8:	231a      	movs	r3, #26
 80076aa:	2218      	movs	r2, #24
 80076ac:	189b      	adds	r3, r3, r2
 80076ae:	19db      	adds	r3, r3, r7
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	431a      	orrs	r2, r3
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4ac3      	ldr	r2, [pc, #780]	; (80079e0 <UART_SetConfig+0x340>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	0019      	movs	r1, r3
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076de:	430a      	orrs	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4abe      	ldr	r2, [pc, #760]	; (80079e4 <UART_SetConfig+0x344>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	0019      	movs	r1, r3
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4ab8      	ldr	r2, [pc, #736]	; (80079e8 <UART_SetConfig+0x348>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d004      	beq.n	8007714 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007710:	4313      	orrs	r3, r2
 8007712:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	4ab4      	ldr	r2, [pc, #720]	; (80079ec <UART_SetConfig+0x34c>)
 800771c:	4013      	ands	r3, r2
 800771e:	0019      	movs	r1, r3
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007726:	430a      	orrs	r2, r1
 8007728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4ab0      	ldr	r2, [pc, #704]	; (80079f0 <UART_SetConfig+0x350>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d131      	bne.n	8007798 <UART_SetConfig+0xf8>
 8007734:	4baf      	ldr	r3, [pc, #700]	; (80079f4 <UART_SetConfig+0x354>)
 8007736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007738:	2203      	movs	r2, #3
 800773a:	4013      	ands	r3, r2
 800773c:	2b03      	cmp	r3, #3
 800773e:	d01d      	beq.n	800777c <UART_SetConfig+0xdc>
 8007740:	d823      	bhi.n	800778a <UART_SetConfig+0xea>
 8007742:	2b02      	cmp	r3, #2
 8007744:	d00c      	beq.n	8007760 <UART_SetConfig+0xc0>
 8007746:	d820      	bhi.n	800778a <UART_SetConfig+0xea>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <UART_SetConfig+0xb2>
 800774c:	2b01      	cmp	r3, #1
 800774e:	d00e      	beq.n	800776e <UART_SetConfig+0xce>
 8007750:	e01b      	b.n	800778a <UART_SetConfig+0xea>
 8007752:	231b      	movs	r3, #27
 8007754:	2218      	movs	r2, #24
 8007756:	189b      	adds	r3, r3, r2
 8007758:	19db      	adds	r3, r3, r7
 800775a:	2201      	movs	r2, #1
 800775c:	701a      	strb	r2, [r3, #0]
 800775e:	e0b4      	b.n	80078ca <UART_SetConfig+0x22a>
 8007760:	231b      	movs	r3, #27
 8007762:	2218      	movs	r2, #24
 8007764:	189b      	adds	r3, r3, r2
 8007766:	19db      	adds	r3, r3, r7
 8007768:	2202      	movs	r2, #2
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e0ad      	b.n	80078ca <UART_SetConfig+0x22a>
 800776e:	231b      	movs	r3, #27
 8007770:	2218      	movs	r2, #24
 8007772:	189b      	adds	r3, r3, r2
 8007774:	19db      	adds	r3, r3, r7
 8007776:	2204      	movs	r2, #4
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	e0a6      	b.n	80078ca <UART_SetConfig+0x22a>
 800777c:	231b      	movs	r3, #27
 800777e:	2218      	movs	r2, #24
 8007780:	189b      	adds	r3, r3, r2
 8007782:	19db      	adds	r3, r3, r7
 8007784:	2208      	movs	r2, #8
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e09f      	b.n	80078ca <UART_SetConfig+0x22a>
 800778a:	231b      	movs	r3, #27
 800778c:	2218      	movs	r2, #24
 800778e:	189b      	adds	r3, r3, r2
 8007790:	19db      	adds	r3, r3, r7
 8007792:	2210      	movs	r2, #16
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	e098      	b.n	80078ca <UART_SetConfig+0x22a>
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a96      	ldr	r2, [pc, #600]	; (80079f8 <UART_SetConfig+0x358>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d131      	bne.n	8007806 <UART_SetConfig+0x166>
 80077a2:	4b94      	ldr	r3, [pc, #592]	; (80079f4 <UART_SetConfig+0x354>)
 80077a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a6:	220c      	movs	r2, #12
 80077a8:	4013      	ands	r3, r2
 80077aa:	2b0c      	cmp	r3, #12
 80077ac:	d01d      	beq.n	80077ea <UART_SetConfig+0x14a>
 80077ae:	d823      	bhi.n	80077f8 <UART_SetConfig+0x158>
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d00c      	beq.n	80077ce <UART_SetConfig+0x12e>
 80077b4:	d820      	bhi.n	80077f8 <UART_SetConfig+0x158>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <UART_SetConfig+0x120>
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d00e      	beq.n	80077dc <UART_SetConfig+0x13c>
 80077be:	e01b      	b.n	80077f8 <UART_SetConfig+0x158>
 80077c0:	231b      	movs	r3, #27
 80077c2:	2218      	movs	r2, #24
 80077c4:	189b      	adds	r3, r3, r2
 80077c6:	19db      	adds	r3, r3, r7
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e07d      	b.n	80078ca <UART_SetConfig+0x22a>
 80077ce:	231b      	movs	r3, #27
 80077d0:	2218      	movs	r2, #24
 80077d2:	189b      	adds	r3, r3, r2
 80077d4:	19db      	adds	r3, r3, r7
 80077d6:	2202      	movs	r2, #2
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	e076      	b.n	80078ca <UART_SetConfig+0x22a>
 80077dc:	231b      	movs	r3, #27
 80077de:	2218      	movs	r2, #24
 80077e0:	189b      	adds	r3, r3, r2
 80077e2:	19db      	adds	r3, r3, r7
 80077e4:	2204      	movs	r2, #4
 80077e6:	701a      	strb	r2, [r3, #0]
 80077e8:	e06f      	b.n	80078ca <UART_SetConfig+0x22a>
 80077ea:	231b      	movs	r3, #27
 80077ec:	2218      	movs	r2, #24
 80077ee:	189b      	adds	r3, r3, r2
 80077f0:	19db      	adds	r3, r3, r7
 80077f2:	2208      	movs	r2, #8
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e068      	b.n	80078ca <UART_SetConfig+0x22a>
 80077f8:	231b      	movs	r3, #27
 80077fa:	2218      	movs	r2, #24
 80077fc:	189b      	adds	r3, r3, r2
 80077fe:	19db      	adds	r3, r3, r7
 8007800:	2210      	movs	r2, #16
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	e061      	b.n	80078ca <UART_SetConfig+0x22a>
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a7c      	ldr	r2, [pc, #496]	; (80079fc <UART_SetConfig+0x35c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d106      	bne.n	800781e <UART_SetConfig+0x17e>
 8007810:	231b      	movs	r3, #27
 8007812:	2218      	movs	r2, #24
 8007814:	189b      	adds	r3, r3, r2
 8007816:	19db      	adds	r3, r3, r7
 8007818:	2200      	movs	r2, #0
 800781a:	701a      	strb	r2, [r3, #0]
 800781c:	e055      	b.n	80078ca <UART_SetConfig+0x22a>
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a77      	ldr	r2, [pc, #476]	; (8007a00 <UART_SetConfig+0x360>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d106      	bne.n	8007836 <UART_SetConfig+0x196>
 8007828:	231b      	movs	r3, #27
 800782a:	2218      	movs	r2, #24
 800782c:	189b      	adds	r3, r3, r2
 800782e:	19db      	adds	r3, r3, r7
 8007830:	2200      	movs	r2, #0
 8007832:	701a      	strb	r2, [r3, #0]
 8007834:	e049      	b.n	80078ca <UART_SetConfig+0x22a>
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a6b      	ldr	r2, [pc, #428]	; (80079e8 <UART_SetConfig+0x348>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d13e      	bne.n	80078be <UART_SetConfig+0x21e>
 8007840:	4b6c      	ldr	r3, [pc, #432]	; (80079f4 <UART_SetConfig+0x354>)
 8007842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007844:	23c0      	movs	r3, #192	; 0xc0
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	4013      	ands	r3, r2
 800784a:	22c0      	movs	r2, #192	; 0xc0
 800784c:	0112      	lsls	r2, r2, #4
 800784e:	4293      	cmp	r3, r2
 8007850:	d027      	beq.n	80078a2 <UART_SetConfig+0x202>
 8007852:	22c0      	movs	r2, #192	; 0xc0
 8007854:	0112      	lsls	r2, r2, #4
 8007856:	4293      	cmp	r3, r2
 8007858:	d82a      	bhi.n	80078b0 <UART_SetConfig+0x210>
 800785a:	2280      	movs	r2, #128	; 0x80
 800785c:	0112      	lsls	r2, r2, #4
 800785e:	4293      	cmp	r3, r2
 8007860:	d011      	beq.n	8007886 <UART_SetConfig+0x1e6>
 8007862:	2280      	movs	r2, #128	; 0x80
 8007864:	0112      	lsls	r2, r2, #4
 8007866:	4293      	cmp	r3, r2
 8007868:	d822      	bhi.n	80078b0 <UART_SetConfig+0x210>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d004      	beq.n	8007878 <UART_SetConfig+0x1d8>
 800786e:	2280      	movs	r2, #128	; 0x80
 8007870:	00d2      	lsls	r2, r2, #3
 8007872:	4293      	cmp	r3, r2
 8007874:	d00e      	beq.n	8007894 <UART_SetConfig+0x1f4>
 8007876:	e01b      	b.n	80078b0 <UART_SetConfig+0x210>
 8007878:	231b      	movs	r3, #27
 800787a:	2218      	movs	r2, #24
 800787c:	189b      	adds	r3, r3, r2
 800787e:	19db      	adds	r3, r3, r7
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	e021      	b.n	80078ca <UART_SetConfig+0x22a>
 8007886:	231b      	movs	r3, #27
 8007888:	2218      	movs	r2, #24
 800788a:	189b      	adds	r3, r3, r2
 800788c:	19db      	adds	r3, r3, r7
 800788e:	2202      	movs	r2, #2
 8007890:	701a      	strb	r2, [r3, #0]
 8007892:	e01a      	b.n	80078ca <UART_SetConfig+0x22a>
 8007894:	231b      	movs	r3, #27
 8007896:	2218      	movs	r2, #24
 8007898:	189b      	adds	r3, r3, r2
 800789a:	19db      	adds	r3, r3, r7
 800789c:	2204      	movs	r2, #4
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	e013      	b.n	80078ca <UART_SetConfig+0x22a>
 80078a2:	231b      	movs	r3, #27
 80078a4:	2218      	movs	r2, #24
 80078a6:	189b      	adds	r3, r3, r2
 80078a8:	19db      	adds	r3, r3, r7
 80078aa:	2208      	movs	r2, #8
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e00c      	b.n	80078ca <UART_SetConfig+0x22a>
 80078b0:	231b      	movs	r3, #27
 80078b2:	2218      	movs	r2, #24
 80078b4:	189b      	adds	r3, r3, r2
 80078b6:	19db      	adds	r3, r3, r7
 80078b8:	2210      	movs	r2, #16
 80078ba:	701a      	strb	r2, [r3, #0]
 80078bc:	e005      	b.n	80078ca <UART_SetConfig+0x22a>
 80078be:	231b      	movs	r3, #27
 80078c0:	2218      	movs	r2, #24
 80078c2:	189b      	adds	r3, r3, r2
 80078c4:	19db      	adds	r3, r3, r7
 80078c6:	2210      	movs	r2, #16
 80078c8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a46      	ldr	r2, [pc, #280]	; (80079e8 <UART_SetConfig+0x348>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d000      	beq.n	80078d6 <UART_SetConfig+0x236>
 80078d4:	e09a      	b.n	8007a0c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078d6:	231b      	movs	r3, #27
 80078d8:	2218      	movs	r2, #24
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	19db      	adds	r3, r3, r7
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d01d      	beq.n	8007920 <UART_SetConfig+0x280>
 80078e4:	dc20      	bgt.n	8007928 <UART_SetConfig+0x288>
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d015      	beq.n	8007916 <UART_SetConfig+0x276>
 80078ea:	dc1d      	bgt.n	8007928 <UART_SetConfig+0x288>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <UART_SetConfig+0x256>
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d005      	beq.n	8007900 <UART_SetConfig+0x260>
 80078f4:	e018      	b.n	8007928 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f6:	f7fe fa73 	bl	8005de0 <HAL_RCC_GetPCLK1Freq>
 80078fa:	0003      	movs	r3, r0
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078fe:	e01c      	b.n	800793a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007900:	4b3c      	ldr	r3, [pc, #240]	; (80079f4 <UART_SetConfig+0x354>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2210      	movs	r2, #16
 8007906:	4013      	ands	r3, r2
 8007908:	d002      	beq.n	8007910 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800790a:	4b3e      	ldr	r3, [pc, #248]	; (8007a04 <UART_SetConfig+0x364>)
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800790e:	e014      	b.n	800793a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007910:	4b3d      	ldr	r3, [pc, #244]	; (8007a08 <UART_SetConfig+0x368>)
 8007912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007914:	e011      	b.n	800793a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007916:	f7fe f9b3 	bl	8005c80 <HAL_RCC_GetSysClockFreq>
 800791a:	0003      	movs	r3, r0
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800791e:	e00c      	b.n	800793a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007926:	e008      	b.n	800793a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800792c:	231a      	movs	r3, #26
 800792e:	2218      	movs	r2, #24
 8007930:	189b      	adds	r3, r3, r2
 8007932:	19db      	adds	r3, r3, r7
 8007934:	2201      	movs	r2, #1
 8007936:	701a      	strb	r2, [r3, #0]
        break;
 8007938:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d100      	bne.n	8007942 <UART_SetConfig+0x2a2>
 8007940:	e134      	b.n	8007bac <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	0013      	movs	r3, r2
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	189b      	adds	r3, r3, r2
 800794c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800794e:	429a      	cmp	r2, r3
 8007950:	d305      	bcc.n	800795e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795a:	429a      	cmp	r2, r3
 800795c:	d906      	bls.n	800796c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800795e:	231a      	movs	r3, #26
 8007960:	2218      	movs	r2, #24
 8007962:	189b      	adds	r3, r3, r2
 8007964:	19db      	adds	r3, r3, r7
 8007966:	2201      	movs	r2, #1
 8007968:	701a      	strb	r2, [r3, #0]
 800796a:	e11f      	b.n	8007bac <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	6939      	ldr	r1, [r7, #16]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	000b      	movs	r3, r1
 800797a:	0e1b      	lsrs	r3, r3, #24
 800797c:	0010      	movs	r0, r2
 800797e:	0205      	lsls	r5, r0, #8
 8007980:	431d      	orrs	r5, r3
 8007982:	000b      	movs	r3, r1
 8007984:	021c      	lsls	r4, r3, #8
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	68b8      	ldr	r0, [r7, #8]
 8007994:	68f9      	ldr	r1, [r7, #12]
 8007996:	1900      	adds	r0, r0, r4
 8007998:	4169      	adcs	r1, r5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	2300      	movs	r3, #0
 80079a2:	607b      	str	r3, [r7, #4]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f7f8 fdb8 	bl	800051c <__aeabi_uldivmod>
 80079ac:	0002      	movs	r2, r0
 80079ae:	000b      	movs	r3, r1
 80079b0:	0013      	movs	r3, r2
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b6:	23c0      	movs	r3, #192	; 0xc0
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d309      	bcc.n	80079d2 <UART_SetConfig+0x332>
 80079be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079c0:	2380      	movs	r3, #128	; 0x80
 80079c2:	035b      	lsls	r3, r3, #13
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d204      	bcs.n	80079d2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ce:	60da      	str	r2, [r3, #12]
 80079d0:	e0ec      	b.n	8007bac <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80079d2:	231a      	movs	r3, #26
 80079d4:	2218      	movs	r2, #24
 80079d6:	189b      	adds	r3, r3, r2
 80079d8:	19db      	adds	r3, r3, r7
 80079da:	2201      	movs	r2, #1
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e0e5      	b.n	8007bac <UART_SetConfig+0x50c>
 80079e0:	efff69f3 	.word	0xefff69f3
 80079e4:	ffffcfff 	.word	0xffffcfff
 80079e8:	40004800 	.word	0x40004800
 80079ec:	fffff4ff 	.word	0xfffff4ff
 80079f0:	40013800 	.word	0x40013800
 80079f4:	40021000 	.word	0x40021000
 80079f8:	40004400 	.word	0x40004400
 80079fc:	40004c00 	.word	0x40004c00
 8007a00:	40005000 	.word	0x40005000
 8007a04:	003d0900 	.word	0x003d0900
 8007a08:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	69da      	ldr	r2, [r3, #28]
 8007a10:	2380      	movs	r3, #128	; 0x80
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d000      	beq.n	8007a1a <UART_SetConfig+0x37a>
 8007a18:	e071      	b.n	8007afe <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007a1a:	231b      	movs	r3, #27
 8007a1c:	2218      	movs	r2, #24
 8007a1e:	189b      	adds	r3, r3, r2
 8007a20:	19db      	adds	r3, r3, r7
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d822      	bhi.n	8007a6e <UART_SetConfig+0x3ce>
 8007a28:	009a      	lsls	r2, r3, #2
 8007a2a:	4b68      	ldr	r3, [pc, #416]	; (8007bcc <UART_SetConfig+0x52c>)
 8007a2c:	18d3      	adds	r3, r2, r3
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a32:	f7fe f9d5 	bl	8005de0 <HAL_RCC_GetPCLK1Freq>
 8007a36:	0003      	movs	r3, r0
 8007a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a3a:	e021      	b.n	8007a80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a3c:	f7fe f9e6 	bl	8005e0c <HAL_RCC_GetPCLK2Freq>
 8007a40:	0003      	movs	r3, r0
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a44:	e01c      	b.n	8007a80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a46:	4b62      	ldr	r3, [pc, #392]	; (8007bd0 <UART_SetConfig+0x530>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2210      	movs	r2, #16
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	d002      	beq.n	8007a56 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007a50:	4b60      	ldr	r3, [pc, #384]	; (8007bd4 <UART_SetConfig+0x534>)
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a54:	e014      	b.n	8007a80 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007a56:	4b60      	ldr	r3, [pc, #384]	; (8007bd8 <UART_SetConfig+0x538>)
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a5a:	e011      	b.n	8007a80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5c:	f7fe f910 	bl	8005c80 <HAL_RCC_GetSysClockFreq>
 8007a60:	0003      	movs	r3, r0
 8007a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a64:	e00c      	b.n	8007a80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a66:	2380      	movs	r3, #128	; 0x80
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a6c:	e008      	b.n	8007a80 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a72:	231a      	movs	r3, #26
 8007a74:	2218      	movs	r2, #24
 8007a76:	189b      	adds	r3, r3, r2
 8007a78:	19db      	adds	r3, r3, r7
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
        break;
 8007a7e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d100      	bne.n	8007a88 <UART_SetConfig+0x3e8>
 8007a86:	e091      	b.n	8007bac <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	005a      	lsls	r2, r3, #1
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	18d2      	adds	r2, r2, r3
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	0019      	movs	r1, r3
 8007a9a:	0010      	movs	r0, r2
 8007a9c:	f7f8 fb50 	bl	8000140 <__udivsi3>
 8007aa0:	0003      	movs	r3, r0
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	2b0f      	cmp	r3, #15
 8007aaa:	d921      	bls.n	8007af0 <UART_SetConfig+0x450>
 8007aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aae:	2380      	movs	r3, #128	; 0x80
 8007ab0:	025b      	lsls	r3, r3, #9
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d21c      	bcs.n	8007af0 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	200e      	movs	r0, #14
 8007abc:	2418      	movs	r4, #24
 8007abe:	1903      	adds	r3, r0, r4
 8007ac0:	19db      	adds	r3, r3, r7
 8007ac2:	210f      	movs	r1, #15
 8007ac4:	438a      	bics	r2, r1
 8007ac6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2207      	movs	r2, #7
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	b299      	uxth	r1, r3
 8007ad4:	1903      	adds	r3, r0, r4
 8007ad6:	19db      	adds	r3, r3, r7
 8007ad8:	1902      	adds	r2, r0, r4
 8007ada:	19d2      	adds	r2, r2, r7
 8007adc:	8812      	ldrh	r2, [r2, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	1902      	adds	r2, r0, r4
 8007ae8:	19d2      	adds	r2, r2, r7
 8007aea:	8812      	ldrh	r2, [r2, #0]
 8007aec:	60da      	str	r2, [r3, #12]
 8007aee:	e05d      	b.n	8007bac <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8007af0:	231a      	movs	r3, #26
 8007af2:	2218      	movs	r2, #24
 8007af4:	189b      	adds	r3, r3, r2
 8007af6:	19db      	adds	r3, r3, r7
 8007af8:	2201      	movs	r2, #1
 8007afa:	701a      	strb	r2, [r3, #0]
 8007afc:	e056      	b.n	8007bac <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007afe:	231b      	movs	r3, #27
 8007b00:	2218      	movs	r2, #24
 8007b02:	189b      	adds	r3, r3, r2
 8007b04:	19db      	adds	r3, r3, r7
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d822      	bhi.n	8007b52 <UART_SetConfig+0x4b2>
 8007b0c:	009a      	lsls	r2, r3, #2
 8007b0e:	4b33      	ldr	r3, [pc, #204]	; (8007bdc <UART_SetConfig+0x53c>)
 8007b10:	18d3      	adds	r3, r2, r3
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b16:	f7fe f963 	bl	8005de0 <HAL_RCC_GetPCLK1Freq>
 8007b1a:	0003      	movs	r3, r0
 8007b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b1e:	e021      	b.n	8007b64 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b20:	f7fe f974 	bl	8005e0c <HAL_RCC_GetPCLK2Freq>
 8007b24:	0003      	movs	r3, r0
 8007b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b28:	e01c      	b.n	8007b64 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b2a:	4b29      	ldr	r3, [pc, #164]	; (8007bd0 <UART_SetConfig+0x530>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2210      	movs	r2, #16
 8007b30:	4013      	ands	r3, r2
 8007b32:	d002      	beq.n	8007b3a <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007b34:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <UART_SetConfig+0x534>)
 8007b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b38:	e014      	b.n	8007b64 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8007b3a:	4b27      	ldr	r3, [pc, #156]	; (8007bd8 <UART_SetConfig+0x538>)
 8007b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b3e:	e011      	b.n	8007b64 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b40:	f7fe f89e 	bl	8005c80 <HAL_RCC_GetSysClockFreq>
 8007b44:	0003      	movs	r3, r0
 8007b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b48:	e00c      	b.n	8007b64 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	2380      	movs	r3, #128	; 0x80
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b50:	e008      	b.n	8007b64 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b56:	231a      	movs	r3, #26
 8007b58:	2218      	movs	r2, #24
 8007b5a:	189b      	adds	r3, r3, r2
 8007b5c:	19db      	adds	r3, r3, r7
 8007b5e:	2201      	movs	r2, #1
 8007b60:	701a      	strb	r2, [r3, #0]
        break;
 8007b62:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d020      	beq.n	8007bac <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	085a      	lsrs	r2, r3, #1
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	18d2      	adds	r2, r2, r3
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	0019      	movs	r1, r3
 8007b7a:	0010      	movs	r0, r2
 8007b7c:	f7f8 fae0 	bl	8000140 <__udivsi3>
 8007b80:	0003      	movs	r3, r0
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	2b0f      	cmp	r3, #15
 8007b8a:	d909      	bls.n	8007ba0 <UART_SetConfig+0x500>
 8007b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b8e:	2380      	movs	r3, #128	; 0x80
 8007b90:	025b      	lsls	r3, r3, #9
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d204      	bcs.n	8007ba0 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	e005      	b.n	8007bac <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ba0:	231a      	movs	r3, #26
 8007ba2:	2218      	movs	r2, #24
 8007ba4:	189b      	adds	r3, r3, r2
 8007ba6:	19db      	adds	r3, r3, r7
 8007ba8:	2201      	movs	r2, #1
 8007baa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007bb8:	231a      	movs	r3, #26
 8007bba:	2218      	movs	r2, #24
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	19db      	adds	r3, r3, r7
 8007bc0:	781b      	ldrb	r3, [r3, #0]
}
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b00e      	add	sp, #56	; 0x38
 8007bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	0800b60c 	.word	0x0800b60c
 8007bd0:	40021000 	.word	0x40021000
 8007bd4:	003d0900 	.word	0x003d0900
 8007bd8:	00f42400 	.word	0x00f42400
 8007bdc:	0800b630 	.word	0x0800b630

08007be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	2201      	movs	r2, #1
 8007bee:	4013      	ands	r3, r2
 8007bf0:	d00b      	beq.n	8007c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a4a      	ldr	r2, [pc, #296]	; (8007d24 <UART_AdvFeatureConfig+0x144>)
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	0019      	movs	r1, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	2202      	movs	r2, #2
 8007c10:	4013      	ands	r3, r2
 8007c12:	d00b      	beq.n	8007c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	4a43      	ldr	r2, [pc, #268]	; (8007d28 <UART_AdvFeatureConfig+0x148>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	0019      	movs	r1, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	2204      	movs	r2, #4
 8007c32:	4013      	ands	r3, r2
 8007c34:	d00b      	beq.n	8007c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4a3b      	ldr	r2, [pc, #236]	; (8007d2c <UART_AdvFeatureConfig+0x14c>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	0019      	movs	r1, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	2208      	movs	r2, #8
 8007c54:	4013      	ands	r3, r2
 8007c56:	d00b      	beq.n	8007c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	4a34      	ldr	r2, [pc, #208]	; (8007d30 <UART_AdvFeatureConfig+0x150>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	0019      	movs	r1, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2210      	movs	r2, #16
 8007c76:	4013      	ands	r3, r2
 8007c78:	d00b      	beq.n	8007c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	4a2c      	ldr	r2, [pc, #176]	; (8007d34 <UART_AdvFeatureConfig+0x154>)
 8007c82:	4013      	ands	r3, r2
 8007c84:	0019      	movs	r1, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	2220      	movs	r2, #32
 8007c98:	4013      	ands	r3, r2
 8007c9a:	d00b      	beq.n	8007cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	4a25      	ldr	r2, [pc, #148]	; (8007d38 <UART_AdvFeatureConfig+0x158>)
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	0019      	movs	r1, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2240      	movs	r2, #64	; 0x40
 8007cba:	4013      	ands	r3, r2
 8007cbc:	d01d      	beq.n	8007cfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4a1d      	ldr	r2, [pc, #116]	; (8007d3c <UART_AdvFeatureConfig+0x15c>)
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	0019      	movs	r1, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cda:	2380      	movs	r3, #128	; 0x80
 8007cdc:	035b      	lsls	r3, r3, #13
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d10b      	bne.n	8007cfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	4a15      	ldr	r2, [pc, #84]	; (8007d40 <UART_AdvFeatureConfig+0x160>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	0019      	movs	r1, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	2280      	movs	r2, #128	; 0x80
 8007d00:	4013      	ands	r3, r2
 8007d02:	d00b      	beq.n	8007d1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	4a0e      	ldr	r2, [pc, #56]	; (8007d44 <UART_AdvFeatureConfig+0x164>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	0019      	movs	r1, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	605a      	str	r2, [r3, #4]
  }
}
 8007d1c:	46c0      	nop			; (mov r8, r8)
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b002      	add	sp, #8
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	fffdffff 	.word	0xfffdffff
 8007d28:	fffeffff 	.word	0xfffeffff
 8007d2c:	fffbffff 	.word	0xfffbffff
 8007d30:	ffff7fff 	.word	0xffff7fff
 8007d34:	ffffefff 	.word	0xffffefff
 8007d38:	ffffdfff 	.word	0xffffdfff
 8007d3c:	ffefffff 	.word	0xffefffff
 8007d40:	ff9fffff 	.word	0xff9fffff
 8007d44:	fff7ffff 	.word	0xfff7ffff

08007d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2280      	movs	r2, #128	; 0x80
 8007d54:	2100      	movs	r1, #0
 8007d56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d58:	f7fc f9ee 	bl	8004138 <HAL_GetTick>
 8007d5c:	0003      	movs	r3, r0
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2208      	movs	r2, #8
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d10c      	bne.n	8007d88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2280      	movs	r2, #128	; 0x80
 8007d72:	0391      	lsls	r1, r2, #14
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4a17      	ldr	r2, [pc, #92]	; (8007dd4 <UART_CheckIdleState+0x8c>)
 8007d78:	9200      	str	r2, [sp, #0]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f000 f82c 	bl	8007dd8 <UART_WaitOnFlagUntilTimeout>
 8007d80:	1e03      	subs	r3, r0, #0
 8007d82:	d001      	beq.n	8007d88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e021      	b.n	8007dcc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2204      	movs	r2, #4
 8007d90:	4013      	ands	r3, r2
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d10c      	bne.n	8007db0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2280      	movs	r2, #128	; 0x80
 8007d9a:	03d1      	lsls	r1, r2, #15
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4a0d      	ldr	r2, [pc, #52]	; (8007dd4 <UART_CheckIdleState+0x8c>)
 8007da0:	9200      	str	r2, [sp, #0]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f000 f818 	bl	8007dd8 <UART_WaitOnFlagUntilTimeout>
 8007da8:	1e03      	subs	r3, r0, #0
 8007daa:	d001      	beq.n	8007db0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e00d      	b.n	8007dcc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2220      	movs	r2, #32
 8007db4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2274      	movs	r2, #116	; 0x74
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	0018      	movs	r0, r3
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	b004      	add	sp, #16
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	01ffffff 	.word	0x01ffffff

08007dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b094      	sub	sp, #80	; 0x50
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	603b      	str	r3, [r7, #0]
 8007de4:	1dfb      	adds	r3, r7, #7
 8007de6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de8:	e0a3      	b.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dec:	3301      	adds	r3, #1
 8007dee:	d100      	bne.n	8007df2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007df0:	e09f      	b.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df2:	f7fc f9a1 	bl	8004138 <HAL_GetTick>
 8007df6:	0002      	movs	r2, r0
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d302      	bcc.n	8007e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d13d      	bne.n	8007e84 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e08:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e10:	647b      	str	r3, [r7, #68]	; 0x44
 8007e12:	2301      	movs	r3, #1
 8007e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	f383 8810 	msr	PRIMASK, r3
}
 8007e1c:	46c0      	nop			; (mov r8, r8)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	494c      	ldr	r1, [pc, #304]	; (8007f5c <UART_WaitOnFlagUntilTimeout+0x184>)
 8007e2a:	400a      	ands	r2, r1
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e30:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	f383 8810 	msr	PRIMASK, r3
}
 8007e38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e3e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e42:	643b      	str	r3, [r7, #64]	; 0x40
 8007e44:	2301      	movs	r3, #1
 8007e46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	f383 8810 	msr	PRIMASK, r3
}
 8007e4e:	46c0      	nop			; (mov r8, r8)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	438a      	bics	r2, r1
 8007e5e:	609a      	str	r2, [r3, #8]
 8007e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e66:	f383 8810 	msr	PRIMASK, r3
}
 8007e6a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2220      	movs	r2, #32
 8007e76:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2274      	movs	r2, #116	; 0x74
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e067      	b.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	d050      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	69da      	ldr	r2, [r3, #28]
 8007e96:	2380      	movs	r3, #128	; 0x80
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	401a      	ands	r2, r3
 8007e9c:	2380      	movs	r3, #128	; 0x80
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d146      	bne.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2280      	movs	r2, #128	; 0x80
 8007eaa:	0112      	lsls	r2, r2, #4
 8007eac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eae:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb2:	613b      	str	r3, [r7, #16]
  return(result);
 8007eb4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb8:	2301      	movs	r3, #1
 8007eba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f383 8810 	msr	PRIMASK, r3
}
 8007ec2:	46c0      	nop			; (mov r8, r8)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4923      	ldr	r1, [pc, #140]	; (8007f5c <UART_WaitOnFlagUntilTimeout+0x184>)
 8007ed0:	400a      	ands	r2, r1
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f383 8810 	msr	PRIMASK, r3
}
 8007ede:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ee6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eea:	2301      	movs	r3, #1
 8007eec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	f383 8810 	msr	PRIMASK, r3
}
 8007ef4:	46c0      	nop			; (mov r8, r8)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2101      	movs	r1, #1
 8007f02:	438a      	bics	r2, r1
 8007f04:	609a      	str	r2, [r3, #8]
 8007f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	f383 8810 	msr	PRIMASK, r3
}
 8007f10:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2280      	movs	r2, #128	; 0x80
 8007f22:	2120      	movs	r1, #32
 8007f24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2274      	movs	r2, #116	; 0x74
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e010      	b.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	425a      	negs	r2, r3
 8007f42:	4153      	adcs	r3, r2
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	001a      	movs	r2, r3
 8007f48:	1dfb      	adds	r3, r7, #7
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d100      	bne.n	8007f52 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007f50:	e74b      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	0018      	movs	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b014      	add	sp, #80	; 0x50
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	fffffe5f 	.word	0xfffffe5f

08007f60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08c      	sub	sp, #48	; 0x30
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	1dbb      	adds	r3, r7, #6
 8007f6c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	1dba      	adds	r2, r7, #6
 8007f78:	2158      	movs	r1, #88	; 0x58
 8007f7a:	8812      	ldrh	r2, [r2, #0]
 8007f7c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1dba      	adds	r2, r7, #6
 8007f82:	215a      	movs	r1, #90	; 0x5a
 8007f84:	8812      	ldrh	r2, [r2, #0]
 8007f86:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	2380      	movs	r3, #128	; 0x80
 8007f94:	015b      	lsls	r3, r3, #5
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d10d      	bne.n	8007fb6 <UART_Start_Receive_IT+0x56>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d104      	bne.n	8007fac <UART_Start_Receive_IT+0x4c>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	225c      	movs	r2, #92	; 0x5c
 8007fa6:	4943      	ldr	r1, [pc, #268]	; (80080b4 <UART_Start_Receive_IT+0x154>)
 8007fa8:	5299      	strh	r1, [r3, r2]
 8007faa:	e02e      	b.n	800800a <UART_Start_Receive_IT+0xaa>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	225c      	movs	r2, #92	; 0x5c
 8007fb0:	21ff      	movs	r1, #255	; 0xff
 8007fb2:	5299      	strh	r1, [r3, r2]
 8007fb4:	e029      	b.n	800800a <UART_Start_Receive_IT+0xaa>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10d      	bne.n	8007fda <UART_Start_Receive_IT+0x7a>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d104      	bne.n	8007fd0 <UART_Start_Receive_IT+0x70>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	225c      	movs	r2, #92	; 0x5c
 8007fca:	21ff      	movs	r1, #255	; 0xff
 8007fcc:	5299      	strh	r1, [r3, r2]
 8007fce:	e01c      	b.n	800800a <UART_Start_Receive_IT+0xaa>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	225c      	movs	r2, #92	; 0x5c
 8007fd4:	217f      	movs	r1, #127	; 0x7f
 8007fd6:	5299      	strh	r1, [r3, r2]
 8007fd8:	e017      	b.n	800800a <UART_Start_Receive_IT+0xaa>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	2380      	movs	r3, #128	; 0x80
 8007fe0:	055b      	lsls	r3, r3, #21
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d10d      	bne.n	8008002 <UART_Start_Receive_IT+0xa2>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d104      	bne.n	8007ff8 <UART_Start_Receive_IT+0x98>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	225c      	movs	r2, #92	; 0x5c
 8007ff2:	217f      	movs	r1, #127	; 0x7f
 8007ff4:	5299      	strh	r1, [r3, r2]
 8007ff6:	e008      	b.n	800800a <UART_Start_Receive_IT+0xaa>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	225c      	movs	r2, #92	; 0x5c
 8007ffc:	213f      	movs	r1, #63	; 0x3f
 8007ffe:	5299      	strh	r1, [r3, r2]
 8008000:	e003      	b.n	800800a <UART_Start_Receive_IT+0xaa>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	225c      	movs	r2, #92	; 0x5c
 8008006:	2100      	movs	r1, #0
 8008008:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2280      	movs	r2, #128	; 0x80
 800800e:	2100      	movs	r1, #0
 8008010:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2222      	movs	r2, #34	; 0x22
 8008016:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008018:	f3ef 8310 	mrs	r3, PRIMASK
 800801c:	61fb      	str	r3, [r7, #28]
  return(result);
 800801e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008022:	2301      	movs	r3, #1
 8008024:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	f383 8810 	msr	PRIMASK, r3
}
 800802c:	46c0      	nop			; (mov r8, r8)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2101      	movs	r1, #1
 800803a:	430a      	orrs	r2, r1
 800803c:	609a      	str	r2, [r3, #8]
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	f383 8810 	msr	PRIMASK, r3
}
 8008048:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	2380      	movs	r3, #128	; 0x80
 8008050:	015b      	lsls	r3, r3, #5
 8008052:	429a      	cmp	r2, r3
 8008054:	d107      	bne.n	8008066 <UART_Start_Receive_IT+0x106>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d103      	bne.n	8008066 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4a15      	ldr	r2, [pc, #84]	; (80080b8 <UART_Start_Receive_IT+0x158>)
 8008062:	665a      	str	r2, [r3, #100]	; 0x64
 8008064:	e002      	b.n	800806c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4a14      	ldr	r2, [pc, #80]	; (80080bc <UART_Start_Receive_IT+0x15c>)
 800806a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2274      	movs	r2, #116	; 0x74
 8008070:	2100      	movs	r1, #0
 8008072:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008074:	f3ef 8310 	mrs	r3, PRIMASK
 8008078:	613b      	str	r3, [r7, #16]
  return(result);
 800807a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800807c:	62bb      	str	r3, [r7, #40]	; 0x28
 800807e:	2301      	movs	r3, #1
 8008080:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f383 8810 	msr	PRIMASK, r3
}
 8008088:	46c0      	nop			; (mov r8, r8)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2190      	movs	r1, #144	; 0x90
 8008096:	0049      	lsls	r1, r1, #1
 8008098:	430a      	orrs	r2, r1
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f383 8810 	msr	PRIMASK, r3
}
 80080a6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	0018      	movs	r0, r3
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b00c      	add	sp, #48	; 0x30
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	46c0      	nop			; (mov r8, r8)
 80080b4:	000001ff 	.word	0x000001ff
 80080b8:	08008371 	.word	0x08008371
 80080bc:	08008209 	.word	0x08008209

080080c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08e      	sub	sp, #56	; 0x38
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c8:	f3ef 8310 	mrs	r3, PRIMASK
 80080cc:	617b      	str	r3, [r7, #20]
  return(result);
 80080ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d0:	637b      	str	r3, [r7, #52]	; 0x34
 80080d2:	2301      	movs	r3, #1
 80080d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f383 8810 	msr	PRIMASK, r3
}
 80080dc:	46c0      	nop			; (mov r8, r8)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4925      	ldr	r1, [pc, #148]	; (8008180 <UART_EndRxTransfer+0xc0>)
 80080ea:	400a      	ands	r2, r1
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f383 8810 	msr	PRIMASK, r3
}
 80080f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080fa:	f3ef 8310 	mrs	r3, PRIMASK
 80080fe:	623b      	str	r3, [r7, #32]
  return(result);
 8008100:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	633b      	str	r3, [r7, #48]	; 0x30
 8008104:	2301      	movs	r3, #1
 8008106:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	f383 8810 	msr	PRIMASK, r3
}
 800810e:	46c0      	nop			; (mov r8, r8)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2101      	movs	r1, #1
 800811c:	438a      	bics	r2, r1
 800811e:	609a      	str	r2, [r3, #8]
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	f383 8810 	msr	PRIMASK, r3
}
 800812a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008130:	2b01      	cmp	r3, #1
 8008132:	d118      	bne.n	8008166 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008134:	f3ef 8310 	mrs	r3, PRIMASK
 8008138:	60bb      	str	r3, [r7, #8]
  return(result);
 800813a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800813e:	2301      	movs	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f383 8810 	msr	PRIMASK, r3
}
 8008148:	46c0      	nop			; (mov r8, r8)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2110      	movs	r1, #16
 8008156:	438a      	bics	r2, r1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f383 8810 	msr	PRIMASK, r3
}
 8008164:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008178:	46c0      	nop			; (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	b00e      	add	sp, #56	; 0x38
 800817e:	bd80      	pop	{r7, pc}
 8008180:	fffffedf 	.word	0xfffffedf

08008184 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	225a      	movs	r2, #90	; 0x5a
 8008196:	2100      	movs	r1, #0
 8008198:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2252      	movs	r2, #82	; 0x52
 800819e:	2100      	movs	r1, #0
 80081a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	0018      	movs	r0, r3
 80081a6:	f7ff fa67 	bl	8007678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b004      	add	sp, #16
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ba:	f3ef 8310 	mrs	r3, PRIMASK
 80081be:	60bb      	str	r3, [r7, #8]
  return(result);
 80081c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	2301      	movs	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f383 8810 	msr	PRIMASK, r3
}
 80081ce:	46c0      	nop			; (mov r8, r8)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2140      	movs	r1, #64	; 0x40
 80081dc:	438a      	bics	r2, r1
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f383 8810 	msr	PRIMASK, r3
}
 80081ea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	0018      	movs	r0, r3
 80081fc:	f7ff fa2c 	bl	8007658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008200:	46c0      	nop			; (mov r8, r8)
 8008202:	46bd      	mov	sp, r7
 8008204:	b006      	add	sp, #24
 8008206:	bd80      	pop	{r7, pc}

08008208 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b090      	sub	sp, #64	; 0x40
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008210:	203e      	movs	r0, #62	; 0x3e
 8008212:	183b      	adds	r3, r7, r0
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	215c      	movs	r1, #92	; 0x5c
 8008218:	5a52      	ldrh	r2, [r2, r1]
 800821a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008220:	2b22      	cmp	r3, #34	; 0x22
 8008222:	d000      	beq.n	8008226 <UART_RxISR_8BIT+0x1e>
 8008224:	e095      	b.n	8008352 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800822c:	213c      	movs	r1, #60	; 0x3c
 800822e:	187b      	adds	r3, r7, r1
 8008230:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008232:	187b      	adds	r3, r7, r1
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b2da      	uxtb	r2, r3
 8008238:	183b      	adds	r3, r7, r0
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b2d9      	uxtb	r1, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008242:	400a      	ands	r2, r1
 8008244:	b2d2      	uxtb	r2, r2
 8008246:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	225a      	movs	r2, #90	; 0x5a
 8008256:	5a9b      	ldrh	r3, [r3, r2]
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	b299      	uxth	r1, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	225a      	movs	r2, #90	; 0x5a
 8008262:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	225a      	movs	r2, #90	; 0x5a
 8008268:	5a9b      	ldrh	r3, [r3, r2]
 800826a:	b29b      	uxth	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d178      	bne.n	8008362 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008270:	f3ef 8310 	mrs	r3, PRIMASK
 8008274:	61bb      	str	r3, [r7, #24]
  return(result);
 8008276:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008278:	63bb      	str	r3, [r7, #56]	; 0x38
 800827a:	2301      	movs	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	f383 8810 	msr	PRIMASK, r3
}
 8008284:	46c0      	nop			; (mov r8, r8)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4936      	ldr	r1, [pc, #216]	; (800836c <UART_RxISR_8BIT+0x164>)
 8008292:	400a      	ands	r2, r1
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	f383 8810 	msr	PRIMASK, r3
}
 80082a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a2:	f3ef 8310 	mrs	r3, PRIMASK
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	637b      	str	r3, [r7, #52]	; 0x34
 80082ac:	2301      	movs	r3, #1
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	f383 8810 	msr	PRIMASK, r3
}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2101      	movs	r1, #1
 80082c4:	438a      	bics	r2, r1
 80082c6:	609a      	str	r2, [r3, #8]
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	f383 8810 	msr	PRIMASK, r3
}
 80082d2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d12f      	bne.n	8008348 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ee:	f3ef 8310 	mrs	r3, PRIMASK
 80082f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80082f4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f6:	633b      	str	r3, [r7, #48]	; 0x30
 80082f8:	2301      	movs	r3, #1
 80082fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f383 8810 	msr	PRIMASK, r3
}
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2110      	movs	r1, #16
 8008310:	438a      	bics	r2, r1
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f383 8810 	msr	PRIMASK, r3
}
 800831e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	2210      	movs	r2, #16
 8008328:	4013      	ands	r3, r2
 800832a:	2b10      	cmp	r3, #16
 800832c:	d103      	bne.n	8008336 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2210      	movs	r2, #16
 8008334:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2258      	movs	r2, #88	; 0x58
 800833a:	5a9a      	ldrh	r2, [r3, r2]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	0011      	movs	r1, r2
 8008340:	0018      	movs	r0, r3
 8008342:	f7ff f9a1 	bl	8007688 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008346:	e00c      	b.n	8008362 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	0018      	movs	r0, r3
 800834c:	f7ff f98c 	bl	8007668 <HAL_UART_RxCpltCallback>
}
 8008350:	e007      	b.n	8008362 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699a      	ldr	r2, [r3, #24]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2108      	movs	r1, #8
 800835e:	430a      	orrs	r2, r1
 8008360:	619a      	str	r2, [r3, #24]
}
 8008362:	46c0      	nop			; (mov r8, r8)
 8008364:	46bd      	mov	sp, r7
 8008366:	b010      	add	sp, #64	; 0x40
 8008368:	bd80      	pop	{r7, pc}
 800836a:	46c0      	nop			; (mov r8, r8)
 800836c:	fffffedf 	.word	0xfffffedf

08008370 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b090      	sub	sp, #64	; 0x40
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008378:	203e      	movs	r0, #62	; 0x3e
 800837a:	183b      	adds	r3, r7, r0
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	215c      	movs	r1, #92	; 0x5c
 8008380:	5a52      	ldrh	r2, [r2, r1]
 8008382:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008388:	2b22      	cmp	r3, #34	; 0x22
 800838a:	d000      	beq.n	800838e <UART_RxISR_16BIT+0x1e>
 800838c:	e095      	b.n	80084ba <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008394:	213c      	movs	r1, #60	; 0x3c
 8008396:	187b      	adds	r3, r7, r1
 8008398:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80083a0:	187b      	adds	r3, r7, r1
 80083a2:	183a      	adds	r2, r7, r0
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	8812      	ldrh	r2, [r2, #0]
 80083a8:	4013      	ands	r3, r2
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b4:	1c9a      	adds	r2, r3, #2
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	225a      	movs	r2, #90	; 0x5a
 80083be:	5a9b      	ldrh	r3, [r3, r2]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b299      	uxth	r1, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	225a      	movs	r2, #90	; 0x5a
 80083ca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	225a      	movs	r2, #90	; 0x5a
 80083d0:	5a9b      	ldrh	r3, [r3, r2]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d178      	bne.n	80084ca <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d8:	f3ef 8310 	mrs	r3, PRIMASK
 80083dc:	617b      	str	r3, [r7, #20]
  return(result);
 80083de:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
 80083e2:	2301      	movs	r3, #1
 80083e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f383 8810 	msr	PRIMASK, r3
}
 80083ec:	46c0      	nop			; (mov r8, r8)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4936      	ldr	r1, [pc, #216]	; (80084d4 <UART_RxISR_16BIT+0x164>)
 80083fa:	400a      	ands	r2, r1
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	f383 8810 	msr	PRIMASK, r3
}
 8008408:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800840a:	f3ef 8310 	mrs	r3, PRIMASK
 800840e:	623b      	str	r3, [r7, #32]
  return(result);
 8008410:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008412:	633b      	str	r3, [r7, #48]	; 0x30
 8008414:	2301      	movs	r3, #1
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	f383 8810 	msr	PRIMASK, r3
}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2101      	movs	r1, #1
 800842c:	438a      	bics	r2, r1
 800842e:	609a      	str	r2, [r3, #8]
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	f383 8810 	msr	PRIMASK, r3
}
 800843a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800844c:	2b01      	cmp	r3, #1
 800844e:	d12f      	bne.n	80084b0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008456:	f3ef 8310 	mrs	r3, PRIMASK
 800845a:	60bb      	str	r3, [r7, #8]
  return(result);
 800845c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008460:	2301      	movs	r3, #1
 8008462:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f383 8810 	msr	PRIMASK, r3
}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2110      	movs	r1, #16
 8008478:	438a      	bics	r2, r1
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f383 8810 	msr	PRIMASK, r3
}
 8008486:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	2210      	movs	r2, #16
 8008490:	4013      	ands	r3, r2
 8008492:	2b10      	cmp	r3, #16
 8008494:	d103      	bne.n	800849e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2210      	movs	r2, #16
 800849c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2258      	movs	r2, #88	; 0x58
 80084a2:	5a9a      	ldrh	r2, [r3, r2]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	0011      	movs	r1, r2
 80084a8:	0018      	movs	r0, r3
 80084aa:	f7ff f8ed 	bl	8007688 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084ae:	e00c      	b.n	80084ca <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	0018      	movs	r0, r3
 80084b4:	f7ff f8d8 	bl	8007668 <HAL_UART_RxCpltCallback>
}
 80084b8:	e007      	b.n	80084ca <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699a      	ldr	r2, [r3, #24]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2108      	movs	r1, #8
 80084c6:	430a      	orrs	r2, r1
 80084c8:	619a      	str	r2, [r3, #24]
}
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	46bd      	mov	sp, r7
 80084ce:	b010      	add	sp, #64	; 0x40
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	46c0      	nop			; (mov r8, r8)
 80084d4:	fffffedf 	.word	0xfffffedf

080084d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084e0:	46c0      	nop			; (mov r8, r8)
 80084e2:	46bd      	mov	sp, r7
 80084e4:	b002      	add	sp, #8
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <__errno>:
 80084e8:	4b01      	ldr	r3, [pc, #4]	; (80084f0 <__errno+0x8>)
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	4770      	bx	lr
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	2000000c 	.word	0x2000000c

080084f4 <__libc_init_array>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	2600      	movs	r6, #0
 80084f8:	4d0c      	ldr	r5, [pc, #48]	; (800852c <__libc_init_array+0x38>)
 80084fa:	4c0d      	ldr	r4, [pc, #52]	; (8008530 <__libc_init_array+0x3c>)
 80084fc:	1b64      	subs	r4, r4, r5
 80084fe:	10a4      	asrs	r4, r4, #2
 8008500:	42a6      	cmp	r6, r4
 8008502:	d109      	bne.n	8008518 <__libc_init_array+0x24>
 8008504:	2600      	movs	r6, #0
 8008506:	f002 ffbb 	bl	800b480 <_init>
 800850a:	4d0a      	ldr	r5, [pc, #40]	; (8008534 <__libc_init_array+0x40>)
 800850c:	4c0a      	ldr	r4, [pc, #40]	; (8008538 <__libc_init_array+0x44>)
 800850e:	1b64      	subs	r4, r4, r5
 8008510:	10a4      	asrs	r4, r4, #2
 8008512:	42a6      	cmp	r6, r4
 8008514:	d105      	bne.n	8008522 <__libc_init_array+0x2e>
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	00b3      	lsls	r3, r6, #2
 800851a:	58eb      	ldr	r3, [r5, r3]
 800851c:	4798      	blx	r3
 800851e:	3601      	adds	r6, #1
 8008520:	e7ee      	b.n	8008500 <__libc_init_array+0xc>
 8008522:	00b3      	lsls	r3, r6, #2
 8008524:	58eb      	ldr	r3, [r5, r3]
 8008526:	4798      	blx	r3
 8008528:	3601      	adds	r6, #1
 800852a:	e7f2      	b.n	8008512 <__libc_init_array+0x1e>
 800852c:	0800ba34 	.word	0x0800ba34
 8008530:	0800ba34 	.word	0x0800ba34
 8008534:	0800ba34 	.word	0x0800ba34
 8008538:	0800ba38 	.word	0x0800ba38

0800853c <memset>:
 800853c:	0003      	movs	r3, r0
 800853e:	1882      	adds	r2, r0, r2
 8008540:	4293      	cmp	r3, r2
 8008542:	d100      	bne.n	8008546 <memset+0xa>
 8008544:	4770      	bx	lr
 8008546:	7019      	strb	r1, [r3, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	e7f9      	b.n	8008540 <memset+0x4>

0800854c <__cvt>:
 800854c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800854e:	001e      	movs	r6, r3
 8008550:	2300      	movs	r3, #0
 8008552:	0014      	movs	r4, r2
 8008554:	b08b      	sub	sp, #44	; 0x2c
 8008556:	429e      	cmp	r6, r3
 8008558:	da04      	bge.n	8008564 <__cvt+0x18>
 800855a:	2180      	movs	r1, #128	; 0x80
 800855c:	0609      	lsls	r1, r1, #24
 800855e:	1873      	adds	r3, r6, r1
 8008560:	001e      	movs	r6, r3
 8008562:	232d      	movs	r3, #45	; 0x2d
 8008564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008566:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008568:	7013      	strb	r3, [r2, #0]
 800856a:	2320      	movs	r3, #32
 800856c:	2203      	movs	r2, #3
 800856e:	439f      	bics	r7, r3
 8008570:	2f46      	cmp	r7, #70	; 0x46
 8008572:	d007      	beq.n	8008584 <__cvt+0x38>
 8008574:	003b      	movs	r3, r7
 8008576:	3b45      	subs	r3, #69	; 0x45
 8008578:	4259      	negs	r1, r3
 800857a:	414b      	adcs	r3, r1
 800857c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800857e:	3a01      	subs	r2, #1
 8008580:	18cb      	adds	r3, r1, r3
 8008582:	9310      	str	r3, [sp, #64]	; 0x40
 8008584:	ab09      	add	r3, sp, #36	; 0x24
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	ab08      	add	r3, sp, #32
 800858a:	9303      	str	r3, [sp, #12]
 800858c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800858e:	9200      	str	r2, [sp, #0]
 8008590:	9302      	str	r3, [sp, #8]
 8008592:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008594:	0022      	movs	r2, r4
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	0033      	movs	r3, r6
 800859a:	f000 fcf1 	bl	8008f80 <_dtoa_r>
 800859e:	0005      	movs	r5, r0
 80085a0:	2f47      	cmp	r7, #71	; 0x47
 80085a2:	d102      	bne.n	80085aa <__cvt+0x5e>
 80085a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085a6:	07db      	lsls	r3, r3, #31
 80085a8:	d528      	bpl.n	80085fc <__cvt+0xb0>
 80085aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ac:	18eb      	adds	r3, r5, r3
 80085ae:	9307      	str	r3, [sp, #28]
 80085b0:	2f46      	cmp	r7, #70	; 0x46
 80085b2:	d114      	bne.n	80085de <__cvt+0x92>
 80085b4:	782b      	ldrb	r3, [r5, #0]
 80085b6:	2b30      	cmp	r3, #48	; 0x30
 80085b8:	d10c      	bne.n	80085d4 <__cvt+0x88>
 80085ba:	2200      	movs	r2, #0
 80085bc:	2300      	movs	r3, #0
 80085be:	0020      	movs	r0, r4
 80085c0:	0031      	movs	r1, r6
 80085c2:	f7f7 ff43 	bl	800044c <__aeabi_dcmpeq>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d104      	bne.n	80085d4 <__cvt+0x88>
 80085ca:	2301      	movs	r3, #1
 80085cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085ce:	1a9b      	subs	r3, r3, r2
 80085d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085d6:	9a07      	ldr	r2, [sp, #28]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	18d3      	adds	r3, r2, r3
 80085dc:	9307      	str	r3, [sp, #28]
 80085de:	2200      	movs	r2, #0
 80085e0:	2300      	movs	r3, #0
 80085e2:	0020      	movs	r0, r4
 80085e4:	0031      	movs	r1, r6
 80085e6:	f7f7 ff31 	bl	800044c <__aeabi_dcmpeq>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d001      	beq.n	80085f2 <__cvt+0xa6>
 80085ee:	9b07      	ldr	r3, [sp, #28]
 80085f0:	9309      	str	r3, [sp, #36]	; 0x24
 80085f2:	2230      	movs	r2, #48	; 0x30
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	9907      	ldr	r1, [sp, #28]
 80085f8:	428b      	cmp	r3, r1
 80085fa:	d306      	bcc.n	800860a <__cvt+0xbe>
 80085fc:	0028      	movs	r0, r5
 80085fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008600:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008602:	1b5b      	subs	r3, r3, r5
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	b00b      	add	sp, #44	; 0x2c
 8008608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860a:	1c59      	adds	r1, r3, #1
 800860c:	9109      	str	r1, [sp, #36]	; 0x24
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	e7f0      	b.n	80085f4 <__cvt+0xa8>

08008612 <__exponent>:
 8008612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008614:	1c83      	adds	r3, r0, #2
 8008616:	b087      	sub	sp, #28
 8008618:	9303      	str	r3, [sp, #12]
 800861a:	0005      	movs	r5, r0
 800861c:	000c      	movs	r4, r1
 800861e:	232b      	movs	r3, #43	; 0x2b
 8008620:	7002      	strb	r2, [r0, #0]
 8008622:	2900      	cmp	r1, #0
 8008624:	da01      	bge.n	800862a <__exponent+0x18>
 8008626:	424c      	negs	r4, r1
 8008628:	3302      	adds	r3, #2
 800862a:	706b      	strb	r3, [r5, #1]
 800862c:	2c09      	cmp	r4, #9
 800862e:	dd31      	ble.n	8008694 <__exponent+0x82>
 8008630:	270a      	movs	r7, #10
 8008632:	ab04      	add	r3, sp, #16
 8008634:	1dde      	adds	r6, r3, #7
 8008636:	0020      	movs	r0, r4
 8008638:	0039      	movs	r1, r7
 800863a:	9601      	str	r6, [sp, #4]
 800863c:	f7f7 fef0 	bl	8000420 <__aeabi_idivmod>
 8008640:	3e01      	subs	r6, #1
 8008642:	3130      	adds	r1, #48	; 0x30
 8008644:	0020      	movs	r0, r4
 8008646:	7031      	strb	r1, [r6, #0]
 8008648:	0039      	movs	r1, r7
 800864a:	9402      	str	r4, [sp, #8]
 800864c:	f7f7 fe02 	bl	8000254 <__divsi3>
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	0004      	movs	r4, r0
 8008654:	2b63      	cmp	r3, #99	; 0x63
 8008656:	dcee      	bgt.n	8008636 <__exponent+0x24>
 8008658:	9b01      	ldr	r3, [sp, #4]
 800865a:	3430      	adds	r4, #48	; 0x30
 800865c:	1e9a      	subs	r2, r3, #2
 800865e:	0013      	movs	r3, r2
 8008660:	9903      	ldr	r1, [sp, #12]
 8008662:	7014      	strb	r4, [r2, #0]
 8008664:	a804      	add	r0, sp, #16
 8008666:	3007      	adds	r0, #7
 8008668:	4298      	cmp	r0, r3
 800866a:	d80e      	bhi.n	800868a <__exponent+0x78>
 800866c:	ab04      	add	r3, sp, #16
 800866e:	3307      	adds	r3, #7
 8008670:	2000      	movs	r0, #0
 8008672:	429a      	cmp	r2, r3
 8008674:	d804      	bhi.n	8008680 <__exponent+0x6e>
 8008676:	ab04      	add	r3, sp, #16
 8008678:	3009      	adds	r0, #9
 800867a:	18c0      	adds	r0, r0, r3
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	1ac0      	subs	r0, r0, r3
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	1818      	adds	r0, r3, r0
 8008684:	1b40      	subs	r0, r0, r5
 8008686:	b007      	add	sp, #28
 8008688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800868a:	7818      	ldrb	r0, [r3, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	7008      	strb	r0, [r1, #0]
 8008690:	3101      	adds	r1, #1
 8008692:	e7e7      	b.n	8008664 <__exponent+0x52>
 8008694:	2330      	movs	r3, #48	; 0x30
 8008696:	18e4      	adds	r4, r4, r3
 8008698:	70ab      	strb	r3, [r5, #2]
 800869a:	1d28      	adds	r0, r5, #4
 800869c:	70ec      	strb	r4, [r5, #3]
 800869e:	e7f1      	b.n	8008684 <__exponent+0x72>

080086a0 <_printf_float>:
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	b095      	sub	sp, #84	; 0x54
 80086a4:	000c      	movs	r4, r1
 80086a6:	9209      	str	r2, [sp, #36]	; 0x24
 80086a8:	001e      	movs	r6, r3
 80086aa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80086ac:	0007      	movs	r7, r0
 80086ae:	f001 fa81 	bl	8009bb4 <_localeconv_r>
 80086b2:	6803      	ldr	r3, [r0, #0]
 80086b4:	0018      	movs	r0, r3
 80086b6:	930c      	str	r3, [sp, #48]	; 0x30
 80086b8:	f7f7 fd26 	bl	8000108 <strlen>
 80086bc:	2300      	movs	r3, #0
 80086be:	9312      	str	r3, [sp, #72]	; 0x48
 80086c0:	7e23      	ldrb	r3, [r4, #24]
 80086c2:	2207      	movs	r2, #7
 80086c4:	930a      	str	r3, [sp, #40]	; 0x28
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	900e      	str	r0, [sp, #56]	; 0x38
 80086ca:	930d      	str	r3, [sp, #52]	; 0x34
 80086cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	05c9      	lsls	r1, r1, #23
 80086d2:	d547      	bpl.n	8008764 <_printf_float+0xc4>
 80086d4:	189b      	adds	r3, r3, r2
 80086d6:	4393      	bics	r3, r2
 80086d8:	001a      	movs	r2, r3
 80086da:	3208      	adds	r2, #8
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	64a2      	str	r2, [r4, #72]	; 0x48
 80086e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80086e6:	2201      	movs	r2, #1
 80086e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80086ea:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80086ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ee:	006b      	lsls	r3, r5, #1
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80086f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80086f6:	4ba7      	ldr	r3, [pc, #668]	; (8008994 <_printf_float+0x2f4>)
 80086f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80086fa:	4252      	negs	r2, r2
 80086fc:	f7fa fc18 	bl	8002f30 <__aeabi_dcmpun>
 8008700:	2800      	cmp	r0, #0
 8008702:	d131      	bne.n	8008768 <_printf_float+0xc8>
 8008704:	2201      	movs	r2, #1
 8008706:	4ba3      	ldr	r3, [pc, #652]	; (8008994 <_printf_float+0x2f4>)
 8008708:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800870a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800870c:	4252      	negs	r2, r2
 800870e:	f7f7 fead 	bl	800046c <__aeabi_dcmple>
 8008712:	2800      	cmp	r0, #0
 8008714:	d128      	bne.n	8008768 <_printf_float+0xc8>
 8008716:	2200      	movs	r2, #0
 8008718:	2300      	movs	r3, #0
 800871a:	0029      	movs	r1, r5
 800871c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800871e:	f7f7 fe9b 	bl	8000458 <__aeabi_dcmplt>
 8008722:	2800      	cmp	r0, #0
 8008724:	d003      	beq.n	800872e <_printf_float+0x8e>
 8008726:	0023      	movs	r3, r4
 8008728:	222d      	movs	r2, #45	; 0x2d
 800872a:	3343      	adds	r3, #67	; 0x43
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008730:	4d99      	ldr	r5, [pc, #612]	; (8008998 <_printf_float+0x2f8>)
 8008732:	2b47      	cmp	r3, #71	; 0x47
 8008734:	d900      	bls.n	8008738 <_printf_float+0x98>
 8008736:	4d99      	ldr	r5, [pc, #612]	; (800899c <_printf_float+0x2fc>)
 8008738:	2303      	movs	r3, #3
 800873a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	3301      	adds	r3, #1
 8008740:	439a      	bics	r2, r3
 8008742:	2300      	movs	r3, #0
 8008744:	6022      	str	r2, [r4, #0]
 8008746:	930b      	str	r3, [sp, #44]	; 0x2c
 8008748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800874a:	0021      	movs	r1, r4
 800874c:	0038      	movs	r0, r7
 800874e:	9600      	str	r6, [sp, #0]
 8008750:	aa13      	add	r2, sp, #76	; 0x4c
 8008752:	f000 f9e7 	bl	8008b24 <_printf_common>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d000      	beq.n	800875c <_printf_float+0xbc>
 800875a:	e0a2      	b.n	80088a2 <_printf_float+0x202>
 800875c:	2001      	movs	r0, #1
 800875e:	4240      	negs	r0, r0
 8008760:	b015      	add	sp, #84	; 0x54
 8008762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008764:	3307      	adds	r3, #7
 8008766:	e7b6      	b.n	80086d6 <_printf_float+0x36>
 8008768:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800876a:	002b      	movs	r3, r5
 800876c:	0010      	movs	r0, r2
 800876e:	0029      	movs	r1, r5
 8008770:	f7fa fbde 	bl	8002f30 <__aeabi_dcmpun>
 8008774:	2800      	cmp	r0, #0
 8008776:	d00b      	beq.n	8008790 <_printf_float+0xf0>
 8008778:	2d00      	cmp	r5, #0
 800877a:	da03      	bge.n	8008784 <_printf_float+0xe4>
 800877c:	0023      	movs	r3, r4
 800877e:	222d      	movs	r2, #45	; 0x2d
 8008780:	3343      	adds	r3, #67	; 0x43
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008786:	4d86      	ldr	r5, [pc, #536]	; (80089a0 <_printf_float+0x300>)
 8008788:	2b47      	cmp	r3, #71	; 0x47
 800878a:	d9d5      	bls.n	8008738 <_printf_float+0x98>
 800878c:	4d85      	ldr	r5, [pc, #532]	; (80089a4 <_printf_float+0x304>)
 800878e:	e7d3      	b.n	8008738 <_printf_float+0x98>
 8008790:	2220      	movs	r2, #32
 8008792:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008794:	6863      	ldr	r3, [r4, #4]
 8008796:	4391      	bics	r1, r2
 8008798:	910f      	str	r1, [sp, #60]	; 0x3c
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	d149      	bne.n	8008832 <_printf_float+0x192>
 800879e:	3307      	adds	r3, #7
 80087a0:	6063      	str	r3, [r4, #4]
 80087a2:	2380      	movs	r3, #128	; 0x80
 80087a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4313      	orrs	r3, r2
 80087aa:	2200      	movs	r2, #0
 80087ac:	9206      	str	r2, [sp, #24]
 80087ae:	aa12      	add	r2, sp, #72	; 0x48
 80087b0:	9205      	str	r2, [sp, #20]
 80087b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b4:	a908      	add	r1, sp, #32
 80087b6:	9204      	str	r2, [sp, #16]
 80087b8:	aa11      	add	r2, sp, #68	; 0x44
 80087ba:	9203      	str	r2, [sp, #12]
 80087bc:	2223      	movs	r2, #35	; 0x23
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	6863      	ldr	r3, [r4, #4]
 80087c4:	1852      	adds	r2, r2, r1
 80087c6:	9202      	str	r2, [sp, #8]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	0038      	movs	r0, r7
 80087cc:	002b      	movs	r3, r5
 80087ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087d0:	f7ff febc 	bl	800854c <__cvt>
 80087d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087d6:	0005      	movs	r5, r0
 80087d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087da:	2b47      	cmp	r3, #71	; 0x47
 80087dc:	d108      	bne.n	80087f0 <_printf_float+0x150>
 80087de:	1ccb      	adds	r3, r1, #3
 80087e0:	db02      	blt.n	80087e8 <_printf_float+0x148>
 80087e2:	6863      	ldr	r3, [r4, #4]
 80087e4:	4299      	cmp	r1, r3
 80087e6:	dd48      	ble.n	800887a <_printf_float+0x1da>
 80087e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ea:	3b02      	subs	r3, #2
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	930a      	str	r3, [sp, #40]	; 0x28
 80087f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f2:	2b65      	cmp	r3, #101	; 0x65
 80087f4:	d824      	bhi.n	8008840 <_printf_float+0x1a0>
 80087f6:	0020      	movs	r0, r4
 80087f8:	001a      	movs	r2, r3
 80087fa:	3901      	subs	r1, #1
 80087fc:	3050      	adds	r0, #80	; 0x50
 80087fe:	9111      	str	r1, [sp, #68]	; 0x44
 8008800:	f7ff ff07 	bl	8008612 <__exponent>
 8008804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008806:	900b      	str	r0, [sp, #44]	; 0x2c
 8008808:	1813      	adds	r3, r2, r0
 800880a:	6123      	str	r3, [r4, #16]
 800880c:	2a01      	cmp	r2, #1
 800880e:	dc02      	bgt.n	8008816 <_printf_float+0x176>
 8008810:	6822      	ldr	r2, [r4, #0]
 8008812:	07d2      	lsls	r2, r2, #31
 8008814:	d501      	bpl.n	800881a <_printf_float+0x17a>
 8008816:	3301      	adds	r3, #1
 8008818:	6123      	str	r3, [r4, #16]
 800881a:	2323      	movs	r3, #35	; 0x23
 800881c:	aa08      	add	r2, sp, #32
 800881e:	189b      	adds	r3, r3, r2
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d100      	bne.n	8008828 <_printf_float+0x188>
 8008826:	e78f      	b.n	8008748 <_printf_float+0xa8>
 8008828:	0023      	movs	r3, r4
 800882a:	222d      	movs	r2, #45	; 0x2d
 800882c:	3343      	adds	r3, #67	; 0x43
 800882e:	701a      	strb	r2, [r3, #0]
 8008830:	e78a      	b.n	8008748 <_printf_float+0xa8>
 8008832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008834:	2a47      	cmp	r2, #71	; 0x47
 8008836:	d1b4      	bne.n	80087a2 <_printf_float+0x102>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1b2      	bne.n	80087a2 <_printf_float+0x102>
 800883c:	3301      	adds	r3, #1
 800883e:	e7af      	b.n	80087a0 <_printf_float+0x100>
 8008840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008842:	2b66      	cmp	r3, #102	; 0x66
 8008844:	d11b      	bne.n	800887e <_printf_float+0x1de>
 8008846:	6863      	ldr	r3, [r4, #4]
 8008848:	2900      	cmp	r1, #0
 800884a:	dd0d      	ble.n	8008868 <_printf_float+0x1c8>
 800884c:	6121      	str	r1, [r4, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <_printf_float+0x1b8>
 8008852:	6822      	ldr	r2, [r4, #0]
 8008854:	07d2      	lsls	r2, r2, #31
 8008856:	d502      	bpl.n	800885e <_printf_float+0x1be>
 8008858:	3301      	adds	r3, #1
 800885a:	1859      	adds	r1, r3, r1
 800885c:	6121      	str	r1, [r4, #16]
 800885e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008860:	65a3      	str	r3, [r4, #88]	; 0x58
 8008862:	2300      	movs	r3, #0
 8008864:	930b      	str	r3, [sp, #44]	; 0x2c
 8008866:	e7d8      	b.n	800881a <_printf_float+0x17a>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <_printf_float+0x1d4>
 800886c:	2201      	movs	r2, #1
 800886e:	6821      	ldr	r1, [r4, #0]
 8008870:	4211      	tst	r1, r2
 8008872:	d000      	beq.n	8008876 <_printf_float+0x1d6>
 8008874:	1c9a      	adds	r2, r3, #2
 8008876:	6122      	str	r2, [r4, #16]
 8008878:	e7f1      	b.n	800885e <_printf_float+0x1be>
 800887a:	2367      	movs	r3, #103	; 0x67
 800887c:	930a      	str	r3, [sp, #40]	; 0x28
 800887e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008880:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008882:	4293      	cmp	r3, r2
 8008884:	db06      	blt.n	8008894 <_printf_float+0x1f4>
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	07d2      	lsls	r2, r2, #31
 800888c:	d5e7      	bpl.n	800885e <_printf_float+0x1be>
 800888e:	3301      	adds	r3, #1
 8008890:	6123      	str	r3, [r4, #16]
 8008892:	e7e4      	b.n	800885e <_printf_float+0x1be>
 8008894:	2101      	movs	r1, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	dc01      	bgt.n	800889e <_printf_float+0x1fe>
 800889a:	1849      	adds	r1, r1, r1
 800889c:	1ac9      	subs	r1, r1, r3
 800889e:	1852      	adds	r2, r2, r1
 80088a0:	e7e9      	b.n	8008876 <_printf_float+0x1d6>
 80088a2:	6822      	ldr	r2, [r4, #0]
 80088a4:	0553      	lsls	r3, r2, #21
 80088a6:	d407      	bmi.n	80088b8 <_printf_float+0x218>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	002a      	movs	r2, r5
 80088ac:	0038      	movs	r0, r7
 80088ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088b0:	47b0      	blx	r6
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d128      	bne.n	8008908 <_printf_float+0x268>
 80088b6:	e751      	b.n	800875c <_printf_float+0xbc>
 80088b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ba:	2b65      	cmp	r3, #101	; 0x65
 80088bc:	d800      	bhi.n	80088c0 <_printf_float+0x220>
 80088be:	e0e1      	b.n	8008a84 <_printf_float+0x3e4>
 80088c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80088c2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80088c4:	2200      	movs	r2, #0
 80088c6:	2300      	movs	r3, #0
 80088c8:	f7f7 fdc0 	bl	800044c <__aeabi_dcmpeq>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d031      	beq.n	8008934 <_printf_float+0x294>
 80088d0:	2301      	movs	r3, #1
 80088d2:	0038      	movs	r0, r7
 80088d4:	4a34      	ldr	r2, [pc, #208]	; (80089a8 <_printf_float+0x308>)
 80088d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088d8:	47b0      	blx	r6
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	d100      	bne.n	80088e0 <_printf_float+0x240>
 80088de:	e73d      	b.n	800875c <_printf_float+0xbc>
 80088e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088e4:	4293      	cmp	r3, r2
 80088e6:	db02      	blt.n	80088ee <_printf_float+0x24e>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	07db      	lsls	r3, r3, #31
 80088ec:	d50c      	bpl.n	8008908 <_printf_float+0x268>
 80088ee:	0038      	movs	r0, r7
 80088f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088f6:	47b0      	blx	r6
 80088f8:	2500      	movs	r5, #0
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	d100      	bne.n	8008900 <_printf_float+0x260>
 80088fe:	e72d      	b.n	800875c <_printf_float+0xbc>
 8008900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008902:	3b01      	subs	r3, #1
 8008904:	42ab      	cmp	r3, r5
 8008906:	dc0a      	bgt.n	800891e <_printf_float+0x27e>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	079b      	lsls	r3, r3, #30
 800890c:	d500      	bpl.n	8008910 <_printf_float+0x270>
 800890e:	e106      	b.n	8008b1e <_printf_float+0x47e>
 8008910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008912:	68e0      	ldr	r0, [r4, #12]
 8008914:	4298      	cmp	r0, r3
 8008916:	db00      	blt.n	800891a <_printf_float+0x27a>
 8008918:	e722      	b.n	8008760 <_printf_float+0xc0>
 800891a:	0018      	movs	r0, r3
 800891c:	e720      	b.n	8008760 <_printf_float+0xc0>
 800891e:	0022      	movs	r2, r4
 8008920:	2301      	movs	r3, #1
 8008922:	0038      	movs	r0, r7
 8008924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008926:	321a      	adds	r2, #26
 8008928:	47b0      	blx	r6
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	d100      	bne.n	8008930 <_printf_float+0x290>
 800892e:	e715      	b.n	800875c <_printf_float+0xbc>
 8008930:	3501      	adds	r5, #1
 8008932:	e7e5      	b.n	8008900 <_printf_float+0x260>
 8008934:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008936:	2b00      	cmp	r3, #0
 8008938:	dc38      	bgt.n	80089ac <_printf_float+0x30c>
 800893a:	2301      	movs	r3, #1
 800893c:	0038      	movs	r0, r7
 800893e:	4a1a      	ldr	r2, [pc, #104]	; (80089a8 <_printf_float+0x308>)
 8008940:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008942:	47b0      	blx	r6
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d100      	bne.n	800894a <_printf_float+0x2aa>
 8008948:	e708      	b.n	800875c <_printf_float+0xbc>
 800894a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800894c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800894e:	4313      	orrs	r3, r2
 8008950:	d102      	bne.n	8008958 <_printf_float+0x2b8>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	07db      	lsls	r3, r3, #31
 8008956:	d5d7      	bpl.n	8008908 <_printf_float+0x268>
 8008958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800895a:	0038      	movs	r0, r7
 800895c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800895e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008960:	47b0      	blx	r6
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	d100      	bne.n	8008968 <_printf_float+0x2c8>
 8008966:	e6f9      	b.n	800875c <_printf_float+0xbc>
 8008968:	2300      	movs	r3, #0
 800896a:	930a      	str	r3, [sp, #40]	; 0x28
 800896c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800896e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008970:	425b      	negs	r3, r3
 8008972:	4293      	cmp	r3, r2
 8008974:	dc01      	bgt.n	800897a <_printf_float+0x2da>
 8008976:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008978:	e797      	b.n	80088aa <_printf_float+0x20a>
 800897a:	0022      	movs	r2, r4
 800897c:	2301      	movs	r3, #1
 800897e:	0038      	movs	r0, r7
 8008980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008982:	321a      	adds	r2, #26
 8008984:	47b0      	blx	r6
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d100      	bne.n	800898c <_printf_float+0x2ec>
 800898a:	e6e7      	b.n	800875c <_printf_float+0xbc>
 800898c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898e:	3301      	adds	r3, #1
 8008990:	e7eb      	b.n	800896a <_printf_float+0x2ca>
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	7fefffff 	.word	0x7fefffff
 8008998:	0800b658 	.word	0x0800b658
 800899c:	0800b65c 	.word	0x0800b65c
 80089a0:	0800b660 	.word	0x0800b660
 80089a4:	0800b664 	.word	0x0800b664
 80089a8:	0800b668 	.word	0x0800b668
 80089ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089b0:	920a      	str	r2, [sp, #40]	; 0x28
 80089b2:	429a      	cmp	r2, r3
 80089b4:	dd00      	ble.n	80089b8 <_printf_float+0x318>
 80089b6:	930a      	str	r3, [sp, #40]	; 0x28
 80089b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dc3c      	bgt.n	8008a38 <_printf_float+0x398>
 80089be:	2300      	movs	r3, #0
 80089c0:	930d      	str	r3, [sp, #52]	; 0x34
 80089c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c4:	43db      	mvns	r3, r3
 80089c6:	17db      	asrs	r3, r3, #31
 80089c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80089ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80089d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d2:	4013      	ands	r3, r2
 80089d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089da:	4293      	cmp	r3, r2
 80089dc:	dc34      	bgt.n	8008a48 <_printf_float+0x3a8>
 80089de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089e2:	4293      	cmp	r3, r2
 80089e4:	db3d      	blt.n	8008a62 <_printf_float+0x3c2>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	07db      	lsls	r3, r3, #31
 80089ea:	d43a      	bmi.n	8008a62 <_printf_float+0x3c2>
 80089ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	1a52      	subs	r2, r2, r1
 80089f6:	920a      	str	r2, [sp, #40]	; 0x28
 80089f8:	429a      	cmp	r2, r3
 80089fa:	dd00      	ble.n	80089fe <_printf_float+0x35e>
 80089fc:	930a      	str	r3, [sp, #40]	; 0x28
 80089fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dc36      	bgt.n	8008a72 <_printf_float+0x3d2>
 8008a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a06:	2500      	movs	r5, #0
 8008a08:	43db      	mvns	r3, r3
 8008a0a:	17db      	asrs	r3, r3, #31
 8008a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a18:	400a      	ands	r2, r1
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	42ab      	cmp	r3, r5
 8008a1e:	dc00      	bgt.n	8008a22 <_printf_float+0x382>
 8008a20:	e772      	b.n	8008908 <_printf_float+0x268>
 8008a22:	0022      	movs	r2, r4
 8008a24:	2301      	movs	r3, #1
 8008a26:	0038      	movs	r0, r7
 8008a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a2a:	321a      	adds	r2, #26
 8008a2c:	47b0      	blx	r6
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	d100      	bne.n	8008a34 <_printf_float+0x394>
 8008a32:	e693      	b.n	800875c <_printf_float+0xbc>
 8008a34:	3501      	adds	r5, #1
 8008a36:	e7ea      	b.n	8008a0e <_printf_float+0x36e>
 8008a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3a:	002a      	movs	r2, r5
 8008a3c:	0038      	movs	r0, r7
 8008a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a40:	47b0      	blx	r6
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	d1bb      	bne.n	80089be <_printf_float+0x31e>
 8008a46:	e689      	b.n	800875c <_printf_float+0xbc>
 8008a48:	0022      	movs	r2, r4
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	0038      	movs	r0, r7
 8008a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a50:	321a      	adds	r2, #26
 8008a52:	47b0      	blx	r6
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d100      	bne.n	8008a5a <_printf_float+0x3ba>
 8008a58:	e680      	b.n	800875c <_printf_float+0xbc>
 8008a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a60:	e7b3      	b.n	80089ca <_printf_float+0x32a>
 8008a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a64:	0038      	movs	r0, r7
 8008a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a6a:	47b0      	blx	r6
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d1bd      	bne.n	80089ec <_printf_float+0x34c>
 8008a70:	e674      	b.n	800875c <_printf_float+0xbc>
 8008a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a74:	0038      	movs	r0, r7
 8008a76:	18ea      	adds	r2, r5, r3
 8008a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7c:	47b0      	blx	r6
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	d1c0      	bne.n	8008a04 <_printf_float+0x364>
 8008a82:	e66b      	b.n	800875c <_printf_float+0xbc>
 8008a84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	dc02      	bgt.n	8008a90 <_printf_float+0x3f0>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	421a      	tst	r2, r3
 8008a8e:	d034      	beq.n	8008afa <_printf_float+0x45a>
 8008a90:	2301      	movs	r3, #1
 8008a92:	002a      	movs	r2, r5
 8008a94:	0038      	movs	r0, r7
 8008a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a98:	47b0      	blx	r6
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	d100      	bne.n	8008aa0 <_printf_float+0x400>
 8008a9e:	e65d      	b.n	800875c <_printf_float+0xbc>
 8008aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aa2:	0038      	movs	r0, r7
 8008aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aa8:	47b0      	blx	r6
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	d100      	bne.n	8008ab0 <_printf_float+0x410>
 8008aae:	e655      	b.n	800875c <_printf_float+0xbc>
 8008ab0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008ab2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f7f7 fcc8 	bl	800044c <__aeabi_dcmpeq>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d11a      	bne.n	8008af6 <_printf_float+0x456>
 8008ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ac2:	1c6a      	adds	r2, r5, #1
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	0038      	movs	r0, r7
 8008ac8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aca:	47b0      	blx	r6
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d10e      	bne.n	8008aee <_printf_float+0x44e>
 8008ad0:	e644      	b.n	800875c <_printf_float+0xbc>
 8008ad2:	0022      	movs	r2, r4
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	0038      	movs	r0, r7
 8008ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ada:	321a      	adds	r2, #26
 8008adc:	47b0      	blx	r6
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	d100      	bne.n	8008ae4 <_printf_float+0x444>
 8008ae2:	e63b      	b.n	800875c <_printf_float+0xbc>
 8008ae4:	3501      	adds	r5, #1
 8008ae6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	42ab      	cmp	r3, r5
 8008aec:	dcf1      	bgt.n	8008ad2 <_printf_float+0x432>
 8008aee:	0022      	movs	r2, r4
 8008af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008af2:	3250      	adds	r2, #80	; 0x50
 8008af4:	e6da      	b.n	80088ac <_printf_float+0x20c>
 8008af6:	2500      	movs	r5, #0
 8008af8:	e7f5      	b.n	8008ae6 <_printf_float+0x446>
 8008afa:	002a      	movs	r2, r5
 8008afc:	e7e3      	b.n	8008ac6 <_printf_float+0x426>
 8008afe:	0022      	movs	r2, r4
 8008b00:	2301      	movs	r3, #1
 8008b02:	0038      	movs	r0, r7
 8008b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b06:	3219      	adds	r2, #25
 8008b08:	47b0      	blx	r6
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	d100      	bne.n	8008b10 <_printf_float+0x470>
 8008b0e:	e625      	b.n	800875c <_printf_float+0xbc>
 8008b10:	3501      	adds	r5, #1
 8008b12:	68e3      	ldr	r3, [r4, #12]
 8008b14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	dcf0      	bgt.n	8008afe <_printf_float+0x45e>
 8008b1c:	e6f8      	b.n	8008910 <_printf_float+0x270>
 8008b1e:	2500      	movs	r5, #0
 8008b20:	e7f7      	b.n	8008b12 <_printf_float+0x472>
 8008b22:	46c0      	nop			; (mov r8, r8)

08008b24 <_printf_common>:
 8008b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b26:	0015      	movs	r5, r2
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	688a      	ldr	r2, [r1, #8]
 8008b2c:	690b      	ldr	r3, [r1, #16]
 8008b2e:	000c      	movs	r4, r1
 8008b30:	9000      	str	r0, [sp, #0]
 8008b32:	4293      	cmp	r3, r2
 8008b34:	da00      	bge.n	8008b38 <_printf_common+0x14>
 8008b36:	0013      	movs	r3, r2
 8008b38:	0022      	movs	r2, r4
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	3243      	adds	r2, #67	; 0x43
 8008b3e:	7812      	ldrb	r2, [r2, #0]
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	d001      	beq.n	8008b48 <_printf_common+0x24>
 8008b44:	3301      	adds	r3, #1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	069b      	lsls	r3, r3, #26
 8008b4c:	d502      	bpl.n	8008b54 <_printf_common+0x30>
 8008b4e:	682b      	ldr	r3, [r5, #0]
 8008b50:	3302      	adds	r3, #2
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	6822      	ldr	r2, [r4, #0]
 8008b56:	2306      	movs	r3, #6
 8008b58:	0017      	movs	r7, r2
 8008b5a:	401f      	ands	r7, r3
 8008b5c:	421a      	tst	r2, r3
 8008b5e:	d027      	beq.n	8008bb0 <_printf_common+0x8c>
 8008b60:	0023      	movs	r3, r4
 8008b62:	3343      	adds	r3, #67	; 0x43
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	1e5a      	subs	r2, r3, #1
 8008b68:	4193      	sbcs	r3, r2
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	0692      	lsls	r2, r2, #26
 8008b6e:	d430      	bmi.n	8008bd2 <_printf_common+0xae>
 8008b70:	0022      	movs	r2, r4
 8008b72:	9901      	ldr	r1, [sp, #4]
 8008b74:	9800      	ldr	r0, [sp, #0]
 8008b76:	9e08      	ldr	r6, [sp, #32]
 8008b78:	3243      	adds	r2, #67	; 0x43
 8008b7a:	47b0      	blx	r6
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d025      	beq.n	8008bcc <_printf_common+0xa8>
 8008b80:	2306      	movs	r3, #6
 8008b82:	6820      	ldr	r0, [r4, #0]
 8008b84:	682a      	ldr	r2, [r5, #0]
 8008b86:	68e1      	ldr	r1, [r4, #12]
 8008b88:	2500      	movs	r5, #0
 8008b8a:	4003      	ands	r3, r0
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	d103      	bne.n	8008b98 <_printf_common+0x74>
 8008b90:	1a8d      	subs	r5, r1, r2
 8008b92:	43eb      	mvns	r3, r5
 8008b94:	17db      	asrs	r3, r3, #31
 8008b96:	401d      	ands	r5, r3
 8008b98:	68a3      	ldr	r3, [r4, #8]
 8008b9a:	6922      	ldr	r2, [r4, #16]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	dd01      	ble.n	8008ba4 <_printf_common+0x80>
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	18ed      	adds	r5, r5, r3
 8008ba4:	2700      	movs	r7, #0
 8008ba6:	42bd      	cmp	r5, r7
 8008ba8:	d120      	bne.n	8008bec <_printf_common+0xc8>
 8008baa:	2000      	movs	r0, #0
 8008bac:	e010      	b.n	8008bd0 <_printf_common+0xac>
 8008bae:	3701      	adds	r7, #1
 8008bb0:	68e3      	ldr	r3, [r4, #12]
 8008bb2:	682a      	ldr	r2, [r5, #0]
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	42bb      	cmp	r3, r7
 8008bb8:	ddd2      	ble.n	8008b60 <_printf_common+0x3c>
 8008bba:	0022      	movs	r2, r4
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	9901      	ldr	r1, [sp, #4]
 8008bc0:	9800      	ldr	r0, [sp, #0]
 8008bc2:	9e08      	ldr	r6, [sp, #32]
 8008bc4:	3219      	adds	r2, #25
 8008bc6:	47b0      	blx	r6
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d1f0      	bne.n	8008bae <_printf_common+0x8a>
 8008bcc:	2001      	movs	r0, #1
 8008bce:	4240      	negs	r0, r0
 8008bd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bd2:	2030      	movs	r0, #48	; 0x30
 8008bd4:	18e1      	adds	r1, r4, r3
 8008bd6:	3143      	adds	r1, #67	; 0x43
 8008bd8:	7008      	strb	r0, [r1, #0]
 8008bda:	0021      	movs	r1, r4
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	3145      	adds	r1, #69	; 0x45
 8008be0:	7809      	ldrb	r1, [r1, #0]
 8008be2:	18a2      	adds	r2, r4, r2
 8008be4:	3243      	adds	r2, #67	; 0x43
 8008be6:	3302      	adds	r3, #2
 8008be8:	7011      	strb	r1, [r2, #0]
 8008bea:	e7c1      	b.n	8008b70 <_printf_common+0x4c>
 8008bec:	0022      	movs	r2, r4
 8008bee:	2301      	movs	r3, #1
 8008bf0:	9901      	ldr	r1, [sp, #4]
 8008bf2:	9800      	ldr	r0, [sp, #0]
 8008bf4:	9e08      	ldr	r6, [sp, #32]
 8008bf6:	321a      	adds	r2, #26
 8008bf8:	47b0      	blx	r6
 8008bfa:	1c43      	adds	r3, r0, #1
 8008bfc:	d0e6      	beq.n	8008bcc <_printf_common+0xa8>
 8008bfe:	3701      	adds	r7, #1
 8008c00:	e7d1      	b.n	8008ba6 <_printf_common+0x82>
	...

08008c04 <_printf_i>:
 8008c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c06:	b08b      	sub	sp, #44	; 0x2c
 8008c08:	9206      	str	r2, [sp, #24]
 8008c0a:	000a      	movs	r2, r1
 8008c0c:	3243      	adds	r2, #67	; 0x43
 8008c0e:	9307      	str	r3, [sp, #28]
 8008c10:	9005      	str	r0, [sp, #20]
 8008c12:	9204      	str	r2, [sp, #16]
 8008c14:	7e0a      	ldrb	r2, [r1, #24]
 8008c16:	000c      	movs	r4, r1
 8008c18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c1a:	2a78      	cmp	r2, #120	; 0x78
 8008c1c:	d807      	bhi.n	8008c2e <_printf_i+0x2a>
 8008c1e:	2a62      	cmp	r2, #98	; 0x62
 8008c20:	d809      	bhi.n	8008c36 <_printf_i+0x32>
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	d100      	bne.n	8008c28 <_printf_i+0x24>
 8008c26:	e0c1      	b.n	8008dac <_printf_i+0x1a8>
 8008c28:	2a58      	cmp	r2, #88	; 0x58
 8008c2a:	d100      	bne.n	8008c2e <_printf_i+0x2a>
 8008c2c:	e08c      	b.n	8008d48 <_printf_i+0x144>
 8008c2e:	0026      	movs	r6, r4
 8008c30:	3642      	adds	r6, #66	; 0x42
 8008c32:	7032      	strb	r2, [r6, #0]
 8008c34:	e022      	b.n	8008c7c <_printf_i+0x78>
 8008c36:	0010      	movs	r0, r2
 8008c38:	3863      	subs	r0, #99	; 0x63
 8008c3a:	2815      	cmp	r0, #21
 8008c3c:	d8f7      	bhi.n	8008c2e <_printf_i+0x2a>
 8008c3e:	f7f7 fa75 	bl	800012c <__gnu_thumb1_case_shi>
 8008c42:	0016      	.short	0x0016
 8008c44:	fff6001f 	.word	0xfff6001f
 8008c48:	fff6fff6 	.word	0xfff6fff6
 8008c4c:	001ffff6 	.word	0x001ffff6
 8008c50:	fff6fff6 	.word	0xfff6fff6
 8008c54:	fff6fff6 	.word	0xfff6fff6
 8008c58:	003600a8 	.word	0x003600a8
 8008c5c:	fff6009a 	.word	0xfff6009a
 8008c60:	00b9fff6 	.word	0x00b9fff6
 8008c64:	0036fff6 	.word	0x0036fff6
 8008c68:	fff6fff6 	.word	0xfff6fff6
 8008c6c:	009e      	.short	0x009e
 8008c6e:	0026      	movs	r6, r4
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	3642      	adds	r6, #66	; 0x42
 8008c74:	1d11      	adds	r1, r2, #4
 8008c76:	6019      	str	r1, [r3, #0]
 8008c78:	6813      	ldr	r3, [r2, #0]
 8008c7a:	7033      	strb	r3, [r6, #0]
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0a7      	b.n	8008dd0 <_printf_i+0x1cc>
 8008c80:	6808      	ldr	r0, [r1, #0]
 8008c82:	6819      	ldr	r1, [r3, #0]
 8008c84:	1d0a      	adds	r2, r1, #4
 8008c86:	0605      	lsls	r5, r0, #24
 8008c88:	d50b      	bpl.n	8008ca2 <_printf_i+0x9e>
 8008c8a:	680d      	ldr	r5, [r1, #0]
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	2d00      	cmp	r5, #0
 8008c90:	da03      	bge.n	8008c9a <_printf_i+0x96>
 8008c92:	232d      	movs	r3, #45	; 0x2d
 8008c94:	9a04      	ldr	r2, [sp, #16]
 8008c96:	426d      	negs	r5, r5
 8008c98:	7013      	strb	r3, [r2, #0]
 8008c9a:	4b61      	ldr	r3, [pc, #388]	; (8008e20 <_printf_i+0x21c>)
 8008c9c:	270a      	movs	r7, #10
 8008c9e:	9303      	str	r3, [sp, #12]
 8008ca0:	e01b      	b.n	8008cda <_printf_i+0xd6>
 8008ca2:	680d      	ldr	r5, [r1, #0]
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	0641      	lsls	r1, r0, #25
 8008ca8:	d5f1      	bpl.n	8008c8e <_printf_i+0x8a>
 8008caa:	b22d      	sxth	r5, r5
 8008cac:	e7ef      	b.n	8008c8e <_printf_i+0x8a>
 8008cae:	680d      	ldr	r5, [r1, #0]
 8008cb0:	6819      	ldr	r1, [r3, #0]
 8008cb2:	1d08      	adds	r0, r1, #4
 8008cb4:	6018      	str	r0, [r3, #0]
 8008cb6:	062e      	lsls	r6, r5, #24
 8008cb8:	d501      	bpl.n	8008cbe <_printf_i+0xba>
 8008cba:	680d      	ldr	r5, [r1, #0]
 8008cbc:	e003      	b.n	8008cc6 <_printf_i+0xc2>
 8008cbe:	066d      	lsls	r5, r5, #25
 8008cc0:	d5fb      	bpl.n	8008cba <_printf_i+0xb6>
 8008cc2:	680d      	ldr	r5, [r1, #0]
 8008cc4:	b2ad      	uxth	r5, r5
 8008cc6:	4b56      	ldr	r3, [pc, #344]	; (8008e20 <_printf_i+0x21c>)
 8008cc8:	2708      	movs	r7, #8
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	2a6f      	cmp	r2, #111	; 0x6f
 8008cce:	d000      	beq.n	8008cd2 <_printf_i+0xce>
 8008cd0:	3702      	adds	r7, #2
 8008cd2:	0023      	movs	r3, r4
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	3343      	adds	r3, #67	; 0x43
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	6863      	ldr	r3, [r4, #4]
 8008cdc:	60a3      	str	r3, [r4, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	db03      	blt.n	8008cea <_printf_i+0xe6>
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	6821      	ldr	r1, [r4, #0]
 8008ce6:	4391      	bics	r1, r2
 8008ce8:	6021      	str	r1, [r4, #0]
 8008cea:	2d00      	cmp	r5, #0
 8008cec:	d102      	bne.n	8008cf4 <_printf_i+0xf0>
 8008cee:	9e04      	ldr	r6, [sp, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00c      	beq.n	8008d0e <_printf_i+0x10a>
 8008cf4:	9e04      	ldr	r6, [sp, #16]
 8008cf6:	0028      	movs	r0, r5
 8008cf8:	0039      	movs	r1, r7
 8008cfa:	f7f7 faa7 	bl	800024c <__aeabi_uidivmod>
 8008cfe:	9b03      	ldr	r3, [sp, #12]
 8008d00:	3e01      	subs	r6, #1
 8008d02:	5c5b      	ldrb	r3, [r3, r1]
 8008d04:	7033      	strb	r3, [r6, #0]
 8008d06:	002b      	movs	r3, r5
 8008d08:	0005      	movs	r5, r0
 8008d0a:	429f      	cmp	r7, r3
 8008d0c:	d9f3      	bls.n	8008cf6 <_printf_i+0xf2>
 8008d0e:	2f08      	cmp	r7, #8
 8008d10:	d109      	bne.n	8008d26 <_printf_i+0x122>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	07db      	lsls	r3, r3, #31
 8008d16:	d506      	bpl.n	8008d26 <_printf_i+0x122>
 8008d18:	6863      	ldr	r3, [r4, #4]
 8008d1a:	6922      	ldr	r2, [r4, #16]
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	dc02      	bgt.n	8008d26 <_printf_i+0x122>
 8008d20:	2330      	movs	r3, #48	; 0x30
 8008d22:	3e01      	subs	r6, #1
 8008d24:	7033      	strb	r3, [r6, #0]
 8008d26:	9b04      	ldr	r3, [sp, #16]
 8008d28:	1b9b      	subs	r3, r3, r6
 8008d2a:	6123      	str	r3, [r4, #16]
 8008d2c:	9b07      	ldr	r3, [sp, #28]
 8008d2e:	0021      	movs	r1, r4
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	9805      	ldr	r0, [sp, #20]
 8008d34:	9b06      	ldr	r3, [sp, #24]
 8008d36:	aa09      	add	r2, sp, #36	; 0x24
 8008d38:	f7ff fef4 	bl	8008b24 <_printf_common>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d14c      	bne.n	8008dda <_printf_i+0x1d6>
 8008d40:	2001      	movs	r0, #1
 8008d42:	4240      	negs	r0, r0
 8008d44:	b00b      	add	sp, #44	; 0x2c
 8008d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d48:	3145      	adds	r1, #69	; 0x45
 8008d4a:	700a      	strb	r2, [r1, #0]
 8008d4c:	4a34      	ldr	r2, [pc, #208]	; (8008e20 <_printf_i+0x21c>)
 8008d4e:	9203      	str	r2, [sp, #12]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	6821      	ldr	r1, [r4, #0]
 8008d54:	ca20      	ldmia	r2!, {r5}
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	0608      	lsls	r0, r1, #24
 8008d5a:	d516      	bpl.n	8008d8a <_printf_i+0x186>
 8008d5c:	07cb      	lsls	r3, r1, #31
 8008d5e:	d502      	bpl.n	8008d66 <_printf_i+0x162>
 8008d60:	2320      	movs	r3, #32
 8008d62:	4319      	orrs	r1, r3
 8008d64:	6021      	str	r1, [r4, #0]
 8008d66:	2710      	movs	r7, #16
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	d1b2      	bne.n	8008cd2 <_printf_i+0xce>
 8008d6c:	2320      	movs	r3, #32
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	439a      	bics	r2, r3
 8008d72:	6022      	str	r2, [r4, #0]
 8008d74:	e7ad      	b.n	8008cd2 <_printf_i+0xce>
 8008d76:	2220      	movs	r2, #32
 8008d78:	6809      	ldr	r1, [r1, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	6022      	str	r2, [r4, #0]
 8008d7e:	0022      	movs	r2, r4
 8008d80:	2178      	movs	r1, #120	; 0x78
 8008d82:	3245      	adds	r2, #69	; 0x45
 8008d84:	7011      	strb	r1, [r2, #0]
 8008d86:	4a27      	ldr	r2, [pc, #156]	; (8008e24 <_printf_i+0x220>)
 8008d88:	e7e1      	b.n	8008d4e <_printf_i+0x14a>
 8008d8a:	0648      	lsls	r0, r1, #25
 8008d8c:	d5e6      	bpl.n	8008d5c <_printf_i+0x158>
 8008d8e:	b2ad      	uxth	r5, r5
 8008d90:	e7e4      	b.n	8008d5c <_printf_i+0x158>
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	680d      	ldr	r5, [r1, #0]
 8008d96:	1d10      	adds	r0, r2, #4
 8008d98:	6949      	ldr	r1, [r1, #20]
 8008d9a:	6018      	str	r0, [r3, #0]
 8008d9c:	6813      	ldr	r3, [r2, #0]
 8008d9e:	062e      	lsls	r6, r5, #24
 8008da0:	d501      	bpl.n	8008da6 <_printf_i+0x1a2>
 8008da2:	6019      	str	r1, [r3, #0]
 8008da4:	e002      	b.n	8008dac <_printf_i+0x1a8>
 8008da6:	066d      	lsls	r5, r5, #25
 8008da8:	d5fb      	bpl.n	8008da2 <_printf_i+0x19e>
 8008daa:	8019      	strh	r1, [r3, #0]
 8008dac:	2300      	movs	r3, #0
 8008dae:	9e04      	ldr	r6, [sp, #16]
 8008db0:	6123      	str	r3, [r4, #16]
 8008db2:	e7bb      	b.n	8008d2c <_printf_i+0x128>
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	1d11      	adds	r1, r2, #4
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	6816      	ldr	r6, [r2, #0]
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	0030      	movs	r0, r6
 8008dc0:	6862      	ldr	r2, [r4, #4]
 8008dc2:	f000 ff05 	bl	8009bd0 <memchr>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d001      	beq.n	8008dce <_printf_i+0x1ca>
 8008dca:	1b80      	subs	r0, r0, r6
 8008dcc:	6060      	str	r0, [r4, #4]
 8008dce:	6863      	ldr	r3, [r4, #4]
 8008dd0:	6123      	str	r3, [r4, #16]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	9a04      	ldr	r2, [sp, #16]
 8008dd6:	7013      	strb	r3, [r2, #0]
 8008dd8:	e7a8      	b.n	8008d2c <_printf_i+0x128>
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	0032      	movs	r2, r6
 8008dde:	9906      	ldr	r1, [sp, #24]
 8008de0:	9805      	ldr	r0, [sp, #20]
 8008de2:	9d07      	ldr	r5, [sp, #28]
 8008de4:	47a8      	blx	r5
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	d0aa      	beq.n	8008d40 <_printf_i+0x13c>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	079b      	lsls	r3, r3, #30
 8008dee:	d415      	bmi.n	8008e1c <_printf_i+0x218>
 8008df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df2:	68e0      	ldr	r0, [r4, #12]
 8008df4:	4298      	cmp	r0, r3
 8008df6:	daa5      	bge.n	8008d44 <_printf_i+0x140>
 8008df8:	0018      	movs	r0, r3
 8008dfa:	e7a3      	b.n	8008d44 <_printf_i+0x140>
 8008dfc:	0022      	movs	r2, r4
 8008dfe:	2301      	movs	r3, #1
 8008e00:	9906      	ldr	r1, [sp, #24]
 8008e02:	9805      	ldr	r0, [sp, #20]
 8008e04:	9e07      	ldr	r6, [sp, #28]
 8008e06:	3219      	adds	r2, #25
 8008e08:	47b0      	blx	r6
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	d098      	beq.n	8008d40 <_printf_i+0x13c>
 8008e0e:	3501      	adds	r5, #1
 8008e10:	68e3      	ldr	r3, [r4, #12]
 8008e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e14:	1a9b      	subs	r3, r3, r2
 8008e16:	42ab      	cmp	r3, r5
 8008e18:	dcf0      	bgt.n	8008dfc <_printf_i+0x1f8>
 8008e1a:	e7e9      	b.n	8008df0 <_printf_i+0x1ec>
 8008e1c:	2500      	movs	r5, #0
 8008e1e:	e7f7      	b.n	8008e10 <_printf_i+0x20c>
 8008e20:	0800b66a 	.word	0x0800b66a
 8008e24:	0800b67b 	.word	0x0800b67b

08008e28 <siprintf>:
 8008e28:	b40e      	push	{r1, r2, r3}
 8008e2a:	b500      	push	{lr}
 8008e2c:	490b      	ldr	r1, [pc, #44]	; (8008e5c <siprintf+0x34>)
 8008e2e:	b09c      	sub	sp, #112	; 0x70
 8008e30:	ab1d      	add	r3, sp, #116	; 0x74
 8008e32:	9002      	str	r0, [sp, #8]
 8008e34:	9006      	str	r0, [sp, #24]
 8008e36:	9107      	str	r1, [sp, #28]
 8008e38:	9104      	str	r1, [sp, #16]
 8008e3a:	4809      	ldr	r0, [pc, #36]	; (8008e60 <siprintf+0x38>)
 8008e3c:	4909      	ldr	r1, [pc, #36]	; (8008e64 <siprintf+0x3c>)
 8008e3e:	cb04      	ldmia	r3!, {r2}
 8008e40:	9105      	str	r1, [sp, #20]
 8008e42:	6800      	ldr	r0, [r0, #0]
 8008e44:	a902      	add	r1, sp, #8
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	f001 fbe2 	bl	800a610 <_svfiprintf_r>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9a02      	ldr	r2, [sp, #8]
 8008e50:	7013      	strb	r3, [r2, #0]
 8008e52:	b01c      	add	sp, #112	; 0x70
 8008e54:	bc08      	pop	{r3}
 8008e56:	b003      	add	sp, #12
 8008e58:	4718      	bx	r3
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	7fffffff 	.word	0x7fffffff
 8008e60:	2000000c 	.word	0x2000000c
 8008e64:	ffff0208 	.word	0xffff0208

08008e68 <quorem>:
 8008e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6a:	0006      	movs	r6, r0
 8008e6c:	690b      	ldr	r3, [r1, #16]
 8008e6e:	6932      	ldr	r2, [r6, #16]
 8008e70:	b087      	sub	sp, #28
 8008e72:	2000      	movs	r0, #0
 8008e74:	9103      	str	r1, [sp, #12]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	db65      	blt.n	8008f46 <quorem+0xde>
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	009c      	lsls	r4, r3, #2
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	000b      	movs	r3, r1
 8008e82:	3314      	adds	r3, #20
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	191b      	adds	r3, r3, r4
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	0033      	movs	r3, r6
 8008e8c:	3314      	adds	r3, #20
 8008e8e:	9302      	str	r3, [sp, #8]
 8008e90:	191c      	adds	r4, r3, r4
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	6827      	ldr	r7, [r4, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	0038      	movs	r0, r7
 8008e9a:	1c5d      	adds	r5, r3, #1
 8008e9c:	0029      	movs	r1, r5
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	f7f7 f94e 	bl	8000140 <__udivsi3>
 8008ea4:	9001      	str	r0, [sp, #4]
 8008ea6:	42af      	cmp	r7, r5
 8008ea8:	d324      	bcc.n	8008ef4 <quorem+0x8c>
 8008eaa:	2500      	movs	r5, #0
 8008eac:	46ac      	mov	ip, r5
 8008eae:	9802      	ldr	r0, [sp, #8]
 8008eb0:	9f05      	ldr	r7, [sp, #20]
 8008eb2:	cf08      	ldmia	r7!, {r3}
 8008eb4:	9a01      	ldr	r2, [sp, #4]
 8008eb6:	b299      	uxth	r1, r3
 8008eb8:	4351      	muls	r1, r2
 8008eba:	0c1b      	lsrs	r3, r3, #16
 8008ebc:	4353      	muls	r3, r2
 8008ebe:	1949      	adds	r1, r1, r5
 8008ec0:	0c0a      	lsrs	r2, r1, #16
 8008ec2:	189b      	adds	r3, r3, r2
 8008ec4:	6802      	ldr	r2, [r0, #0]
 8008ec6:	b289      	uxth	r1, r1
 8008ec8:	b292      	uxth	r2, r2
 8008eca:	4462      	add	r2, ip
 8008ecc:	1a52      	subs	r2, r2, r1
 8008ece:	6801      	ldr	r1, [r0, #0]
 8008ed0:	0c1d      	lsrs	r5, r3, #16
 8008ed2:	0c09      	lsrs	r1, r1, #16
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	1acb      	subs	r3, r1, r3
 8008ed8:	1411      	asrs	r1, r2, #16
 8008eda:	185b      	adds	r3, r3, r1
 8008edc:	1419      	asrs	r1, r3, #16
 8008ede:	b292      	uxth	r2, r2
 8008ee0:	041b      	lsls	r3, r3, #16
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	9b04      	ldr	r3, [sp, #16]
 8008ee6:	468c      	mov	ip, r1
 8008ee8:	c004      	stmia	r0!, {r2}
 8008eea:	42bb      	cmp	r3, r7
 8008eec:	d2e1      	bcs.n	8008eb2 <quorem+0x4a>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d030      	beq.n	8008f56 <quorem+0xee>
 8008ef4:	0030      	movs	r0, r6
 8008ef6:	9903      	ldr	r1, [sp, #12]
 8008ef8:	f001 f902 	bl	800a100 <__mcmp>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	db21      	blt.n	8008f44 <quorem+0xdc>
 8008f00:	0030      	movs	r0, r6
 8008f02:	2400      	movs	r4, #0
 8008f04:	9b01      	ldr	r3, [sp, #4]
 8008f06:	9903      	ldr	r1, [sp, #12]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	3014      	adds	r0, #20
 8008f0e:	3114      	adds	r1, #20
 8008f10:	6803      	ldr	r3, [r0, #0]
 8008f12:	c920      	ldmia	r1!, {r5}
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	1914      	adds	r4, r2, r4
 8008f18:	b2aa      	uxth	r2, r5
 8008f1a:	1aa2      	subs	r2, r4, r2
 8008f1c:	0c1b      	lsrs	r3, r3, #16
 8008f1e:	0c2d      	lsrs	r5, r5, #16
 8008f20:	1414      	asrs	r4, r2, #16
 8008f22:	1b5b      	subs	r3, r3, r5
 8008f24:	191b      	adds	r3, r3, r4
 8008f26:	141c      	asrs	r4, r3, #16
 8008f28:	b292      	uxth	r2, r2
 8008f2a:	041b      	lsls	r3, r3, #16
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	c008      	stmia	r0!, {r3}
 8008f30:	9b04      	ldr	r3, [sp, #16]
 8008f32:	428b      	cmp	r3, r1
 8008f34:	d2ec      	bcs.n	8008f10 <quorem+0xa8>
 8008f36:	9b00      	ldr	r3, [sp, #0]
 8008f38:	9a02      	ldr	r2, [sp, #8]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	18d3      	adds	r3, r2, r3
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	d015      	beq.n	8008f70 <quorem+0x108>
 8008f44:	9801      	ldr	r0, [sp, #4]
 8008f46:	b007      	add	sp, #28
 8008f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d106      	bne.n	8008f5e <quorem+0xf6>
 8008f50:	9b00      	ldr	r3, [sp, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	9b02      	ldr	r3, [sp, #8]
 8008f58:	3c04      	subs	r4, #4
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	d3f5      	bcc.n	8008f4a <quorem+0xe2>
 8008f5e:	9b00      	ldr	r3, [sp, #0]
 8008f60:	6133      	str	r3, [r6, #16]
 8008f62:	e7c7      	b.n	8008ef4 <quorem+0x8c>
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	2a00      	cmp	r2, #0
 8008f68:	d106      	bne.n	8008f78 <quorem+0x110>
 8008f6a:	9a00      	ldr	r2, [sp, #0]
 8008f6c:	3a01      	subs	r2, #1
 8008f6e:	9200      	str	r2, [sp, #0]
 8008f70:	9a02      	ldr	r2, [sp, #8]
 8008f72:	3b04      	subs	r3, #4
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d3f5      	bcc.n	8008f64 <quorem+0xfc>
 8008f78:	9b00      	ldr	r3, [sp, #0]
 8008f7a:	6133      	str	r3, [r6, #16]
 8008f7c:	e7e2      	b.n	8008f44 <quorem+0xdc>
	...

08008f80 <_dtoa_r>:
 8008f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f82:	b09d      	sub	sp, #116	; 0x74
 8008f84:	9202      	str	r2, [sp, #8]
 8008f86:	9303      	str	r3, [sp, #12]
 8008f88:	9b02      	ldr	r3, [sp, #8]
 8008f8a:	9c03      	ldr	r4, [sp, #12]
 8008f8c:	9308      	str	r3, [sp, #32]
 8008f8e:	9409      	str	r4, [sp, #36]	; 0x24
 8008f90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f92:	0007      	movs	r7, r0
 8008f94:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008f96:	2c00      	cmp	r4, #0
 8008f98:	d10e      	bne.n	8008fb8 <_dtoa_r+0x38>
 8008f9a:	2010      	movs	r0, #16
 8008f9c:	f000 fe0e 	bl	8009bbc <malloc>
 8008fa0:	1e02      	subs	r2, r0, #0
 8008fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8008fa4:	d104      	bne.n	8008fb0 <_dtoa_r+0x30>
 8008fa6:	21ea      	movs	r1, #234	; 0xea
 8008fa8:	4bc7      	ldr	r3, [pc, #796]	; (80092c8 <_dtoa_r+0x348>)
 8008faa:	48c8      	ldr	r0, [pc, #800]	; (80092cc <_dtoa_r+0x34c>)
 8008fac:	f001 fc42 	bl	800a834 <__assert_func>
 8008fb0:	6044      	str	r4, [r0, #4]
 8008fb2:	6084      	str	r4, [r0, #8]
 8008fb4:	6004      	str	r4, [r0, #0]
 8008fb6:	60c4      	str	r4, [r0, #12]
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	6819      	ldr	r1, [r3, #0]
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	d00a      	beq.n	8008fd6 <_dtoa_r+0x56>
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	4093      	lsls	r3, r2
 8008fc6:	604a      	str	r2, [r1, #4]
 8008fc8:	608b      	str	r3, [r1, #8]
 8008fca:	0038      	movs	r0, r7
 8008fcc:	f000 fe58 	bl	8009c80 <_Bfree>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	9b03      	ldr	r3, [sp, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	da20      	bge.n	800901e <_dtoa_r+0x9e>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	602b      	str	r3, [r5, #0]
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	085b      	lsrs	r3, r3, #1
 8008fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fea:	4bb9      	ldr	r3, [pc, #740]	; (80092d0 <_dtoa_r+0x350>)
 8008fec:	4ab8      	ldr	r2, [pc, #736]	; (80092d0 <_dtoa_r+0x350>)
 8008fee:	402b      	ands	r3, r5
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d117      	bne.n	8009024 <_dtoa_r+0xa4>
 8008ff4:	4bb7      	ldr	r3, [pc, #732]	; (80092d4 <_dtoa_r+0x354>)
 8008ff6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ff8:	0328      	lsls	r0, r5, #12
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	0b00      	lsrs	r0, r0, #12
 8009000:	4318      	orrs	r0, r3
 8009002:	d101      	bne.n	8009008 <_dtoa_r+0x88>
 8009004:	f000 fdbf 	bl	8009b86 <_dtoa_r+0xc06>
 8009008:	48b3      	ldr	r0, [pc, #716]	; (80092d8 <_dtoa_r+0x358>)
 800900a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800900c:	9006      	str	r0, [sp, #24]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <_dtoa_r+0x98>
 8009012:	4bb2      	ldr	r3, [pc, #712]	; (80092dc <_dtoa_r+0x35c>)
 8009014:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	9806      	ldr	r0, [sp, #24]
 800901a:	b01d      	add	sp, #116	; 0x74
 800901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901e:	2300      	movs	r3, #0
 8009020:	602b      	str	r3, [r5, #0]
 8009022:	e7e1      	b.n	8008fe8 <_dtoa_r+0x68>
 8009024:	9b08      	ldr	r3, [sp, #32]
 8009026:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009028:	9312      	str	r3, [sp, #72]	; 0x48
 800902a:	9413      	str	r4, [sp, #76]	; 0x4c
 800902c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800902e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009030:	2200      	movs	r2, #0
 8009032:	2300      	movs	r3, #0
 8009034:	f7f7 fa0a 	bl	800044c <__aeabi_dcmpeq>
 8009038:	1e04      	subs	r4, r0, #0
 800903a:	d009      	beq.n	8009050 <_dtoa_r+0xd0>
 800903c:	2301      	movs	r3, #1
 800903e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	4ba7      	ldr	r3, [pc, #668]	; (80092e0 <_dtoa_r+0x360>)
 8009044:	9306      	str	r3, [sp, #24]
 8009046:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0e5      	beq.n	8009018 <_dtoa_r+0x98>
 800904c:	4ba5      	ldr	r3, [pc, #660]	; (80092e4 <_dtoa_r+0x364>)
 800904e:	e7e1      	b.n	8009014 <_dtoa_r+0x94>
 8009050:	ab1a      	add	r3, sp, #104	; 0x68
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	ab1b      	add	r3, sp, #108	; 0x6c
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	0038      	movs	r0, r7
 800905a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800905c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800905e:	f001 f903 	bl	800a268 <__d2b>
 8009062:	006e      	lsls	r6, r5, #1
 8009064:	9005      	str	r0, [sp, #20]
 8009066:	0d76      	lsrs	r6, r6, #21
 8009068:	d100      	bne.n	800906c <_dtoa_r+0xec>
 800906a:	e07c      	b.n	8009166 <_dtoa_r+0x1e6>
 800906c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800906e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009072:	4a9d      	ldr	r2, [pc, #628]	; (80092e8 <_dtoa_r+0x368>)
 8009074:	031b      	lsls	r3, r3, #12
 8009076:	0b1b      	lsrs	r3, r3, #12
 8009078:	431a      	orrs	r2, r3
 800907a:	0011      	movs	r1, r2
 800907c:	4b9b      	ldr	r3, [pc, #620]	; (80092ec <_dtoa_r+0x36c>)
 800907e:	9418      	str	r4, [sp, #96]	; 0x60
 8009080:	18f6      	adds	r6, r6, r3
 8009082:	2200      	movs	r2, #0
 8009084:	4b9a      	ldr	r3, [pc, #616]	; (80092f0 <_dtoa_r+0x370>)
 8009086:	f7f9 fbc1 	bl	800280c <__aeabi_dsub>
 800908a:	4a9a      	ldr	r2, [pc, #616]	; (80092f4 <_dtoa_r+0x374>)
 800908c:	4b9a      	ldr	r3, [pc, #616]	; (80092f8 <_dtoa_r+0x378>)
 800908e:	f7f9 f951 	bl	8002334 <__aeabi_dmul>
 8009092:	4a9a      	ldr	r2, [pc, #616]	; (80092fc <_dtoa_r+0x37c>)
 8009094:	4b9a      	ldr	r3, [pc, #616]	; (8009300 <_dtoa_r+0x380>)
 8009096:	f7f8 fa0f 	bl	80014b8 <__aeabi_dadd>
 800909a:	0004      	movs	r4, r0
 800909c:	0030      	movs	r0, r6
 800909e:	000d      	movs	r5, r1
 80090a0:	f7f9 ff9a 	bl	8002fd8 <__aeabi_i2d>
 80090a4:	4a97      	ldr	r2, [pc, #604]	; (8009304 <_dtoa_r+0x384>)
 80090a6:	4b98      	ldr	r3, [pc, #608]	; (8009308 <_dtoa_r+0x388>)
 80090a8:	f7f9 f944 	bl	8002334 <__aeabi_dmul>
 80090ac:	0002      	movs	r2, r0
 80090ae:	000b      	movs	r3, r1
 80090b0:	0020      	movs	r0, r4
 80090b2:	0029      	movs	r1, r5
 80090b4:	f7f8 fa00 	bl	80014b8 <__aeabi_dadd>
 80090b8:	0004      	movs	r4, r0
 80090ba:	000d      	movs	r5, r1
 80090bc:	f7f9 ff56 	bl	8002f6c <__aeabi_d2iz>
 80090c0:	2200      	movs	r2, #0
 80090c2:	9002      	str	r0, [sp, #8]
 80090c4:	2300      	movs	r3, #0
 80090c6:	0020      	movs	r0, r4
 80090c8:	0029      	movs	r1, r5
 80090ca:	f7f7 f9c5 	bl	8000458 <__aeabi_dcmplt>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d00b      	beq.n	80090ea <_dtoa_r+0x16a>
 80090d2:	9802      	ldr	r0, [sp, #8]
 80090d4:	f7f9 ff80 	bl	8002fd8 <__aeabi_i2d>
 80090d8:	002b      	movs	r3, r5
 80090da:	0022      	movs	r2, r4
 80090dc:	f7f7 f9b6 	bl	800044c <__aeabi_dcmpeq>
 80090e0:	4243      	negs	r3, r0
 80090e2:	4158      	adcs	r0, r3
 80090e4:	9b02      	ldr	r3, [sp, #8]
 80090e6:	1a1b      	subs	r3, r3, r0
 80090e8:	9302      	str	r3, [sp, #8]
 80090ea:	2301      	movs	r3, #1
 80090ec:	9316      	str	r3, [sp, #88]	; 0x58
 80090ee:	9b02      	ldr	r3, [sp, #8]
 80090f0:	2b16      	cmp	r3, #22
 80090f2:	d80f      	bhi.n	8009114 <_dtoa_r+0x194>
 80090f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80090f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80090f8:	00da      	lsls	r2, r3, #3
 80090fa:	4b84      	ldr	r3, [pc, #528]	; (800930c <_dtoa_r+0x38c>)
 80090fc:	189b      	adds	r3, r3, r2
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f7f7 f9a9 	bl	8000458 <__aeabi_dcmplt>
 8009106:	2800      	cmp	r0, #0
 8009108:	d049      	beq.n	800919e <_dtoa_r+0x21e>
 800910a:	9b02      	ldr	r3, [sp, #8]
 800910c:	3b01      	subs	r3, #1
 800910e:	9302      	str	r3, [sp, #8]
 8009110:	2300      	movs	r3, #0
 8009112:	9316      	str	r3, [sp, #88]	; 0x58
 8009114:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009116:	1b9e      	subs	r6, r3, r6
 8009118:	2300      	movs	r3, #0
 800911a:	930a      	str	r3, [sp, #40]	; 0x28
 800911c:	0033      	movs	r3, r6
 800911e:	3b01      	subs	r3, #1
 8009120:	930d      	str	r3, [sp, #52]	; 0x34
 8009122:	d504      	bpl.n	800912e <_dtoa_r+0x1ae>
 8009124:	2301      	movs	r3, #1
 8009126:	1b9b      	subs	r3, r3, r6
 8009128:	930a      	str	r3, [sp, #40]	; 0x28
 800912a:	2300      	movs	r3, #0
 800912c:	930d      	str	r3, [sp, #52]	; 0x34
 800912e:	9b02      	ldr	r3, [sp, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	db36      	blt.n	80091a2 <_dtoa_r+0x222>
 8009134:	9a02      	ldr	r2, [sp, #8]
 8009136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009138:	4694      	mov	ip, r2
 800913a:	4463      	add	r3, ip
 800913c:	930d      	str	r3, [sp, #52]	; 0x34
 800913e:	2300      	movs	r3, #0
 8009140:	9215      	str	r2, [sp, #84]	; 0x54
 8009142:	930e      	str	r3, [sp, #56]	; 0x38
 8009144:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009146:	2401      	movs	r4, #1
 8009148:	2b09      	cmp	r3, #9
 800914a:	d864      	bhi.n	8009216 <_dtoa_r+0x296>
 800914c:	2b05      	cmp	r3, #5
 800914e:	dd02      	ble.n	8009156 <_dtoa_r+0x1d6>
 8009150:	2400      	movs	r4, #0
 8009152:	3b04      	subs	r3, #4
 8009154:	9322      	str	r3, [sp, #136]	; 0x88
 8009156:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009158:	1e98      	subs	r0, r3, #2
 800915a:	2803      	cmp	r0, #3
 800915c:	d864      	bhi.n	8009228 <_dtoa_r+0x2a8>
 800915e:	f7f6 ffdb 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009162:	3829      	.short	0x3829
 8009164:	5836      	.short	0x5836
 8009166:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009168:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800916a:	189e      	adds	r6, r3, r2
 800916c:	4b68      	ldr	r3, [pc, #416]	; (8009310 <_dtoa_r+0x390>)
 800916e:	18f2      	adds	r2, r6, r3
 8009170:	2a20      	cmp	r2, #32
 8009172:	dd0f      	ble.n	8009194 <_dtoa_r+0x214>
 8009174:	2340      	movs	r3, #64	; 0x40
 8009176:	1a9b      	subs	r3, r3, r2
 8009178:	409d      	lsls	r5, r3
 800917a:	4b66      	ldr	r3, [pc, #408]	; (8009314 <_dtoa_r+0x394>)
 800917c:	9802      	ldr	r0, [sp, #8]
 800917e:	18f3      	adds	r3, r6, r3
 8009180:	40d8      	lsrs	r0, r3
 8009182:	4328      	orrs	r0, r5
 8009184:	f7f9 ff58 	bl	8003038 <__aeabi_ui2d>
 8009188:	2301      	movs	r3, #1
 800918a:	4c63      	ldr	r4, [pc, #396]	; (8009318 <_dtoa_r+0x398>)
 800918c:	3e01      	subs	r6, #1
 800918e:	1909      	adds	r1, r1, r4
 8009190:	9318      	str	r3, [sp, #96]	; 0x60
 8009192:	e776      	b.n	8009082 <_dtoa_r+0x102>
 8009194:	2320      	movs	r3, #32
 8009196:	9802      	ldr	r0, [sp, #8]
 8009198:	1a9b      	subs	r3, r3, r2
 800919a:	4098      	lsls	r0, r3
 800919c:	e7f2      	b.n	8009184 <_dtoa_r+0x204>
 800919e:	9016      	str	r0, [sp, #88]	; 0x58
 80091a0:	e7b8      	b.n	8009114 <_dtoa_r+0x194>
 80091a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a4:	9a02      	ldr	r2, [sp, #8]
 80091a6:	1a9b      	subs	r3, r3, r2
 80091a8:	930a      	str	r3, [sp, #40]	; 0x28
 80091aa:	4253      	negs	r3, r2
 80091ac:	930e      	str	r3, [sp, #56]	; 0x38
 80091ae:	2300      	movs	r3, #0
 80091b0:	9315      	str	r3, [sp, #84]	; 0x54
 80091b2:	e7c7      	b.n	8009144 <_dtoa_r+0x1c4>
 80091b4:	2300      	movs	r3, #0
 80091b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091ba:	930c      	str	r3, [sp, #48]	; 0x30
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	dc13      	bgt.n	80091ea <_dtoa_r+0x26a>
 80091c2:	2301      	movs	r3, #1
 80091c4:	001a      	movs	r2, r3
 80091c6:	930c      	str	r3, [sp, #48]	; 0x30
 80091c8:	9307      	str	r3, [sp, #28]
 80091ca:	9223      	str	r2, [sp, #140]	; 0x8c
 80091cc:	e00d      	b.n	80091ea <_dtoa_r+0x26a>
 80091ce:	2301      	movs	r3, #1
 80091d0:	e7f1      	b.n	80091b6 <_dtoa_r+0x236>
 80091d2:	2300      	movs	r3, #0
 80091d4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80091d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091d8:	4694      	mov	ip, r2
 80091da:	9b02      	ldr	r3, [sp, #8]
 80091dc:	4463      	add	r3, ip
 80091de:	930c      	str	r3, [sp, #48]	; 0x30
 80091e0:	3301      	adds	r3, #1
 80091e2:	9307      	str	r3, [sp, #28]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dc00      	bgt.n	80091ea <_dtoa_r+0x26a>
 80091e8:	2301      	movs	r3, #1
 80091ea:	2200      	movs	r2, #0
 80091ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091ee:	6042      	str	r2, [r0, #4]
 80091f0:	3204      	adds	r2, #4
 80091f2:	0015      	movs	r5, r2
 80091f4:	3514      	adds	r5, #20
 80091f6:	6841      	ldr	r1, [r0, #4]
 80091f8:	429d      	cmp	r5, r3
 80091fa:	d919      	bls.n	8009230 <_dtoa_r+0x2b0>
 80091fc:	0038      	movs	r0, r7
 80091fe:	f000 fcfb 	bl	8009bf8 <_Balloc>
 8009202:	9006      	str	r0, [sp, #24]
 8009204:	2800      	cmp	r0, #0
 8009206:	d117      	bne.n	8009238 <_dtoa_r+0x2b8>
 8009208:	21d5      	movs	r1, #213	; 0xd5
 800920a:	0002      	movs	r2, r0
 800920c:	4b43      	ldr	r3, [pc, #268]	; (800931c <_dtoa_r+0x39c>)
 800920e:	0049      	lsls	r1, r1, #1
 8009210:	e6cb      	b.n	8008faa <_dtoa_r+0x2a>
 8009212:	2301      	movs	r3, #1
 8009214:	e7de      	b.n	80091d4 <_dtoa_r+0x254>
 8009216:	2300      	movs	r3, #0
 8009218:	940f      	str	r4, [sp, #60]	; 0x3c
 800921a:	9322      	str	r3, [sp, #136]	; 0x88
 800921c:	3b01      	subs	r3, #1
 800921e:	930c      	str	r3, [sp, #48]	; 0x30
 8009220:	9307      	str	r3, [sp, #28]
 8009222:	2200      	movs	r2, #0
 8009224:	3313      	adds	r3, #19
 8009226:	e7d0      	b.n	80091ca <_dtoa_r+0x24a>
 8009228:	2301      	movs	r3, #1
 800922a:	930f      	str	r3, [sp, #60]	; 0x3c
 800922c:	3b02      	subs	r3, #2
 800922e:	e7f6      	b.n	800921e <_dtoa_r+0x29e>
 8009230:	3101      	adds	r1, #1
 8009232:	6041      	str	r1, [r0, #4]
 8009234:	0052      	lsls	r2, r2, #1
 8009236:	e7dc      	b.n	80091f2 <_dtoa_r+0x272>
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	9a06      	ldr	r2, [sp, #24]
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	9b07      	ldr	r3, [sp, #28]
 8009240:	2b0e      	cmp	r3, #14
 8009242:	d900      	bls.n	8009246 <_dtoa_r+0x2c6>
 8009244:	e0eb      	b.n	800941e <_dtoa_r+0x49e>
 8009246:	2c00      	cmp	r4, #0
 8009248:	d100      	bne.n	800924c <_dtoa_r+0x2cc>
 800924a:	e0e8      	b.n	800941e <_dtoa_r+0x49e>
 800924c:	9b02      	ldr	r3, [sp, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	dd68      	ble.n	8009324 <_dtoa_r+0x3a4>
 8009252:	001a      	movs	r2, r3
 8009254:	210f      	movs	r1, #15
 8009256:	4b2d      	ldr	r3, [pc, #180]	; (800930c <_dtoa_r+0x38c>)
 8009258:	400a      	ands	r2, r1
 800925a:	00d2      	lsls	r2, r2, #3
 800925c:	189b      	adds	r3, r3, r2
 800925e:	681d      	ldr	r5, [r3, #0]
 8009260:	685e      	ldr	r6, [r3, #4]
 8009262:	9b02      	ldr	r3, [sp, #8]
 8009264:	111c      	asrs	r4, r3, #4
 8009266:	2302      	movs	r3, #2
 8009268:	9310      	str	r3, [sp, #64]	; 0x40
 800926a:	9b02      	ldr	r3, [sp, #8]
 800926c:	05db      	lsls	r3, r3, #23
 800926e:	d50b      	bpl.n	8009288 <_dtoa_r+0x308>
 8009270:	4b2b      	ldr	r3, [pc, #172]	; (8009320 <_dtoa_r+0x3a0>)
 8009272:	400c      	ands	r4, r1
 8009274:	6a1a      	ldr	r2, [r3, #32]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	9812      	ldr	r0, [sp, #72]	; 0x48
 800927a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800927c:	f7f8 fc58 	bl	8001b30 <__aeabi_ddiv>
 8009280:	2303      	movs	r3, #3
 8009282:	9008      	str	r0, [sp, #32]
 8009284:	9109      	str	r1, [sp, #36]	; 0x24
 8009286:	9310      	str	r3, [sp, #64]	; 0x40
 8009288:	4b25      	ldr	r3, [pc, #148]	; (8009320 <_dtoa_r+0x3a0>)
 800928a:	9314      	str	r3, [sp, #80]	; 0x50
 800928c:	2c00      	cmp	r4, #0
 800928e:	d108      	bne.n	80092a2 <_dtoa_r+0x322>
 8009290:	9808      	ldr	r0, [sp, #32]
 8009292:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009294:	002a      	movs	r2, r5
 8009296:	0033      	movs	r3, r6
 8009298:	f7f8 fc4a 	bl	8001b30 <__aeabi_ddiv>
 800929c:	9008      	str	r0, [sp, #32]
 800929e:	9109      	str	r1, [sp, #36]	; 0x24
 80092a0:	e05c      	b.n	800935c <_dtoa_r+0x3dc>
 80092a2:	2301      	movs	r3, #1
 80092a4:	421c      	tst	r4, r3
 80092a6:	d00b      	beq.n	80092c0 <_dtoa_r+0x340>
 80092a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092aa:	0028      	movs	r0, r5
 80092ac:	3301      	adds	r3, #1
 80092ae:	9310      	str	r3, [sp, #64]	; 0x40
 80092b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092b2:	0031      	movs	r1, r6
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f7f9 f83c 	bl	8002334 <__aeabi_dmul>
 80092bc:	0005      	movs	r5, r0
 80092be:	000e      	movs	r6, r1
 80092c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092c2:	1064      	asrs	r4, r4, #1
 80092c4:	3308      	adds	r3, #8
 80092c6:	e7e0      	b.n	800928a <_dtoa_r+0x30a>
 80092c8:	0800b699 	.word	0x0800b699
 80092cc:	0800b6b0 	.word	0x0800b6b0
 80092d0:	7ff00000 	.word	0x7ff00000
 80092d4:	0000270f 	.word	0x0000270f
 80092d8:	0800b695 	.word	0x0800b695
 80092dc:	0800b698 	.word	0x0800b698
 80092e0:	0800b668 	.word	0x0800b668
 80092e4:	0800b669 	.word	0x0800b669
 80092e8:	3ff00000 	.word	0x3ff00000
 80092ec:	fffffc01 	.word	0xfffffc01
 80092f0:	3ff80000 	.word	0x3ff80000
 80092f4:	636f4361 	.word	0x636f4361
 80092f8:	3fd287a7 	.word	0x3fd287a7
 80092fc:	8b60c8b3 	.word	0x8b60c8b3
 8009300:	3fc68a28 	.word	0x3fc68a28
 8009304:	509f79fb 	.word	0x509f79fb
 8009308:	3fd34413 	.word	0x3fd34413
 800930c:	0800b7a0 	.word	0x0800b7a0
 8009310:	00000432 	.word	0x00000432
 8009314:	00000412 	.word	0x00000412
 8009318:	fe100000 	.word	0xfe100000
 800931c:	0800b70b 	.word	0x0800b70b
 8009320:	0800b778 	.word	0x0800b778
 8009324:	2302      	movs	r3, #2
 8009326:	9310      	str	r3, [sp, #64]	; 0x40
 8009328:	9b02      	ldr	r3, [sp, #8]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d016      	beq.n	800935c <_dtoa_r+0x3dc>
 800932e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009330:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009332:	425c      	negs	r4, r3
 8009334:	230f      	movs	r3, #15
 8009336:	4ab6      	ldr	r2, [pc, #728]	; (8009610 <_dtoa_r+0x690>)
 8009338:	4023      	ands	r3, r4
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	18d3      	adds	r3, r2, r3
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f7f8 fff7 	bl	8002334 <__aeabi_dmul>
 8009346:	2601      	movs	r6, #1
 8009348:	2300      	movs	r3, #0
 800934a:	9008      	str	r0, [sp, #32]
 800934c:	9109      	str	r1, [sp, #36]	; 0x24
 800934e:	4db1      	ldr	r5, [pc, #708]	; (8009614 <_dtoa_r+0x694>)
 8009350:	1124      	asrs	r4, r4, #4
 8009352:	2c00      	cmp	r4, #0
 8009354:	d000      	beq.n	8009358 <_dtoa_r+0x3d8>
 8009356:	e094      	b.n	8009482 <_dtoa_r+0x502>
 8009358:	2b00      	cmp	r3, #0
 800935a:	d19f      	bne.n	800929c <_dtoa_r+0x31c>
 800935c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800935e:	2b00      	cmp	r3, #0
 8009360:	d100      	bne.n	8009364 <_dtoa_r+0x3e4>
 8009362:	e09b      	b.n	800949c <_dtoa_r+0x51c>
 8009364:	9c08      	ldr	r4, [sp, #32]
 8009366:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009368:	2200      	movs	r2, #0
 800936a:	0020      	movs	r0, r4
 800936c:	0029      	movs	r1, r5
 800936e:	4baa      	ldr	r3, [pc, #680]	; (8009618 <_dtoa_r+0x698>)
 8009370:	f7f7 f872 	bl	8000458 <__aeabi_dcmplt>
 8009374:	2800      	cmp	r0, #0
 8009376:	d100      	bne.n	800937a <_dtoa_r+0x3fa>
 8009378:	e090      	b.n	800949c <_dtoa_r+0x51c>
 800937a:	9b07      	ldr	r3, [sp, #28]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d100      	bne.n	8009382 <_dtoa_r+0x402>
 8009380:	e08c      	b.n	800949c <_dtoa_r+0x51c>
 8009382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009384:	2b00      	cmp	r3, #0
 8009386:	dd46      	ble.n	8009416 <_dtoa_r+0x496>
 8009388:	9b02      	ldr	r3, [sp, #8]
 800938a:	2200      	movs	r2, #0
 800938c:	0020      	movs	r0, r4
 800938e:	0029      	movs	r1, r5
 8009390:	1e5e      	subs	r6, r3, #1
 8009392:	4ba2      	ldr	r3, [pc, #648]	; (800961c <_dtoa_r+0x69c>)
 8009394:	f7f8 ffce 	bl	8002334 <__aeabi_dmul>
 8009398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800939a:	9008      	str	r0, [sp, #32]
 800939c:	9109      	str	r1, [sp, #36]	; 0x24
 800939e:	3301      	adds	r3, #1
 80093a0:	9310      	str	r3, [sp, #64]	; 0x40
 80093a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80093a6:	9c08      	ldr	r4, [sp, #32]
 80093a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80093aa:	9314      	str	r3, [sp, #80]	; 0x50
 80093ac:	f7f9 fe14 	bl	8002fd8 <__aeabi_i2d>
 80093b0:	0022      	movs	r2, r4
 80093b2:	002b      	movs	r3, r5
 80093b4:	f7f8 ffbe 	bl	8002334 <__aeabi_dmul>
 80093b8:	2200      	movs	r2, #0
 80093ba:	4b99      	ldr	r3, [pc, #612]	; (8009620 <_dtoa_r+0x6a0>)
 80093bc:	f7f8 f87c 	bl	80014b8 <__aeabi_dadd>
 80093c0:	9010      	str	r0, [sp, #64]	; 0x40
 80093c2:	9111      	str	r1, [sp, #68]	; 0x44
 80093c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093c8:	9208      	str	r2, [sp, #32]
 80093ca:	9309      	str	r3, [sp, #36]	; 0x24
 80093cc:	4a95      	ldr	r2, [pc, #596]	; (8009624 <_dtoa_r+0x6a4>)
 80093ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093d0:	4694      	mov	ip, r2
 80093d2:	4463      	add	r3, ip
 80093d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80093d6:	9309      	str	r3, [sp, #36]	; 0x24
 80093d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d161      	bne.n	80094a2 <_dtoa_r+0x522>
 80093de:	2200      	movs	r2, #0
 80093e0:	0020      	movs	r0, r4
 80093e2:	0029      	movs	r1, r5
 80093e4:	4b90      	ldr	r3, [pc, #576]	; (8009628 <_dtoa_r+0x6a8>)
 80093e6:	f7f9 fa11 	bl	800280c <__aeabi_dsub>
 80093ea:	9a08      	ldr	r2, [sp, #32]
 80093ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093ee:	0004      	movs	r4, r0
 80093f0:	000d      	movs	r5, r1
 80093f2:	f7f7 f845 	bl	8000480 <__aeabi_dcmpgt>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d000      	beq.n	80093fc <_dtoa_r+0x47c>
 80093fa:	e2af      	b.n	800995c <_dtoa_r+0x9dc>
 80093fc:	488b      	ldr	r0, [pc, #556]	; (800962c <_dtoa_r+0x6ac>)
 80093fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009400:	4684      	mov	ip, r0
 8009402:	4461      	add	r1, ip
 8009404:	000b      	movs	r3, r1
 8009406:	0020      	movs	r0, r4
 8009408:	0029      	movs	r1, r5
 800940a:	9a08      	ldr	r2, [sp, #32]
 800940c:	f7f7 f824 	bl	8000458 <__aeabi_dcmplt>
 8009410:	2800      	cmp	r0, #0
 8009412:	d000      	beq.n	8009416 <_dtoa_r+0x496>
 8009414:	e29f      	b.n	8009956 <_dtoa_r+0x9d6>
 8009416:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009418:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800941a:	9308      	str	r3, [sp, #32]
 800941c:	9409      	str	r4, [sp, #36]	; 0x24
 800941e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009420:	2b00      	cmp	r3, #0
 8009422:	da00      	bge.n	8009426 <_dtoa_r+0x4a6>
 8009424:	e172      	b.n	800970c <_dtoa_r+0x78c>
 8009426:	9a02      	ldr	r2, [sp, #8]
 8009428:	2a0e      	cmp	r2, #14
 800942a:	dd00      	ble.n	800942e <_dtoa_r+0x4ae>
 800942c:	e16e      	b.n	800970c <_dtoa_r+0x78c>
 800942e:	4b78      	ldr	r3, [pc, #480]	; (8009610 <_dtoa_r+0x690>)
 8009430:	00d2      	lsls	r2, r2, #3
 8009432:	189b      	adds	r3, r3, r2
 8009434:	685c      	ldr	r4, [r3, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	930a      	str	r3, [sp, #40]	; 0x28
 800943a:	940b      	str	r4, [sp, #44]	; 0x2c
 800943c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800943e:	2b00      	cmp	r3, #0
 8009440:	db00      	blt.n	8009444 <_dtoa_r+0x4c4>
 8009442:	e0f7      	b.n	8009634 <_dtoa_r+0x6b4>
 8009444:	9b07      	ldr	r3, [sp, #28]
 8009446:	2b00      	cmp	r3, #0
 8009448:	dd00      	ble.n	800944c <_dtoa_r+0x4cc>
 800944a:	e0f3      	b.n	8009634 <_dtoa_r+0x6b4>
 800944c:	d000      	beq.n	8009450 <_dtoa_r+0x4d0>
 800944e:	e282      	b.n	8009956 <_dtoa_r+0x9d6>
 8009450:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009452:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009454:	2200      	movs	r2, #0
 8009456:	4b74      	ldr	r3, [pc, #464]	; (8009628 <_dtoa_r+0x6a8>)
 8009458:	f7f8 ff6c 	bl	8002334 <__aeabi_dmul>
 800945c:	9a08      	ldr	r2, [sp, #32]
 800945e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009460:	f7f7 f818 	bl	8000494 <__aeabi_dcmpge>
 8009464:	9e07      	ldr	r6, [sp, #28]
 8009466:	0035      	movs	r5, r6
 8009468:	2800      	cmp	r0, #0
 800946a:	d000      	beq.n	800946e <_dtoa_r+0x4ee>
 800946c:	e259      	b.n	8009922 <_dtoa_r+0x9a2>
 800946e:	9b06      	ldr	r3, [sp, #24]
 8009470:	9a06      	ldr	r2, [sp, #24]
 8009472:	3301      	adds	r3, #1
 8009474:	9308      	str	r3, [sp, #32]
 8009476:	2331      	movs	r3, #49	; 0x31
 8009478:	7013      	strb	r3, [r2, #0]
 800947a:	9b02      	ldr	r3, [sp, #8]
 800947c:	3301      	adds	r3, #1
 800947e:	9302      	str	r3, [sp, #8]
 8009480:	e254      	b.n	800992c <_dtoa_r+0x9ac>
 8009482:	4234      	tst	r4, r6
 8009484:	d007      	beq.n	8009496 <_dtoa_r+0x516>
 8009486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009488:	3301      	adds	r3, #1
 800948a:	9310      	str	r3, [sp, #64]	; 0x40
 800948c:	682a      	ldr	r2, [r5, #0]
 800948e:	686b      	ldr	r3, [r5, #4]
 8009490:	f7f8 ff50 	bl	8002334 <__aeabi_dmul>
 8009494:	0033      	movs	r3, r6
 8009496:	1064      	asrs	r4, r4, #1
 8009498:	3508      	adds	r5, #8
 800949a:	e75a      	b.n	8009352 <_dtoa_r+0x3d2>
 800949c:	9e02      	ldr	r6, [sp, #8]
 800949e:	9b07      	ldr	r3, [sp, #28]
 80094a0:	e780      	b.n	80093a4 <_dtoa_r+0x424>
 80094a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094a6:	1e5a      	subs	r2, r3, #1
 80094a8:	4b59      	ldr	r3, [pc, #356]	; (8009610 <_dtoa_r+0x690>)
 80094aa:	00d2      	lsls	r2, r2, #3
 80094ac:	189b      	adds	r3, r3, r2
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2900      	cmp	r1, #0
 80094b4:	d051      	beq.n	800955a <_dtoa_r+0x5da>
 80094b6:	2000      	movs	r0, #0
 80094b8:	495d      	ldr	r1, [pc, #372]	; (8009630 <_dtoa_r+0x6b0>)
 80094ba:	f7f8 fb39 	bl	8001b30 <__aeabi_ddiv>
 80094be:	9a08      	ldr	r2, [sp, #32]
 80094c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c2:	f7f9 f9a3 	bl	800280c <__aeabi_dsub>
 80094c6:	9a06      	ldr	r2, [sp, #24]
 80094c8:	9b06      	ldr	r3, [sp, #24]
 80094ca:	4694      	mov	ip, r2
 80094cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80094ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094d0:	9010      	str	r0, [sp, #64]	; 0x40
 80094d2:	9111      	str	r1, [sp, #68]	; 0x44
 80094d4:	4463      	add	r3, ip
 80094d6:	9319      	str	r3, [sp, #100]	; 0x64
 80094d8:	0029      	movs	r1, r5
 80094da:	0020      	movs	r0, r4
 80094dc:	f7f9 fd46 	bl	8002f6c <__aeabi_d2iz>
 80094e0:	9014      	str	r0, [sp, #80]	; 0x50
 80094e2:	f7f9 fd79 	bl	8002fd8 <__aeabi_i2d>
 80094e6:	0002      	movs	r2, r0
 80094e8:	000b      	movs	r3, r1
 80094ea:	0020      	movs	r0, r4
 80094ec:	0029      	movs	r1, r5
 80094ee:	f7f9 f98d 	bl	800280c <__aeabi_dsub>
 80094f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094f6:	3301      	adds	r3, #1
 80094f8:	9308      	str	r3, [sp, #32]
 80094fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094fc:	0004      	movs	r4, r0
 80094fe:	3330      	adds	r3, #48	; 0x30
 8009500:	7013      	strb	r3, [r2, #0]
 8009502:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009504:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009506:	000d      	movs	r5, r1
 8009508:	f7f6 ffa6 	bl	8000458 <__aeabi_dcmplt>
 800950c:	2800      	cmp	r0, #0
 800950e:	d175      	bne.n	80095fc <_dtoa_r+0x67c>
 8009510:	0022      	movs	r2, r4
 8009512:	002b      	movs	r3, r5
 8009514:	2000      	movs	r0, #0
 8009516:	4940      	ldr	r1, [pc, #256]	; (8009618 <_dtoa_r+0x698>)
 8009518:	f7f9 f978 	bl	800280c <__aeabi_dsub>
 800951c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800951e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009520:	f7f6 ff9a 	bl	8000458 <__aeabi_dcmplt>
 8009524:	2800      	cmp	r0, #0
 8009526:	d000      	beq.n	800952a <_dtoa_r+0x5aa>
 8009528:	e0d2      	b.n	80096d0 <_dtoa_r+0x750>
 800952a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800952c:	9a08      	ldr	r2, [sp, #32]
 800952e:	4293      	cmp	r3, r2
 8009530:	d100      	bne.n	8009534 <_dtoa_r+0x5b4>
 8009532:	e770      	b.n	8009416 <_dtoa_r+0x496>
 8009534:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009536:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009538:	2200      	movs	r2, #0
 800953a:	4b38      	ldr	r3, [pc, #224]	; (800961c <_dtoa_r+0x69c>)
 800953c:	f7f8 fefa 	bl	8002334 <__aeabi_dmul>
 8009540:	4b36      	ldr	r3, [pc, #216]	; (800961c <_dtoa_r+0x69c>)
 8009542:	9010      	str	r0, [sp, #64]	; 0x40
 8009544:	9111      	str	r1, [sp, #68]	; 0x44
 8009546:	2200      	movs	r2, #0
 8009548:	0020      	movs	r0, r4
 800954a:	0029      	movs	r1, r5
 800954c:	f7f8 fef2 	bl	8002334 <__aeabi_dmul>
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	0004      	movs	r4, r0
 8009554:	000d      	movs	r5, r1
 8009556:	9317      	str	r3, [sp, #92]	; 0x5c
 8009558:	e7be      	b.n	80094d8 <_dtoa_r+0x558>
 800955a:	9808      	ldr	r0, [sp, #32]
 800955c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800955e:	f7f8 fee9 	bl	8002334 <__aeabi_dmul>
 8009562:	9a06      	ldr	r2, [sp, #24]
 8009564:	9b06      	ldr	r3, [sp, #24]
 8009566:	4694      	mov	ip, r2
 8009568:	9308      	str	r3, [sp, #32]
 800956a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800956c:	9010      	str	r0, [sp, #64]	; 0x40
 800956e:	9111      	str	r1, [sp, #68]	; 0x44
 8009570:	4463      	add	r3, ip
 8009572:	9319      	str	r3, [sp, #100]	; 0x64
 8009574:	0029      	movs	r1, r5
 8009576:	0020      	movs	r0, r4
 8009578:	f7f9 fcf8 	bl	8002f6c <__aeabi_d2iz>
 800957c:	9017      	str	r0, [sp, #92]	; 0x5c
 800957e:	f7f9 fd2b 	bl	8002fd8 <__aeabi_i2d>
 8009582:	0002      	movs	r2, r0
 8009584:	000b      	movs	r3, r1
 8009586:	0020      	movs	r0, r4
 8009588:	0029      	movs	r1, r5
 800958a:	f7f9 f93f 	bl	800280c <__aeabi_dsub>
 800958e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009590:	9a08      	ldr	r2, [sp, #32]
 8009592:	3330      	adds	r3, #48	; 0x30
 8009594:	7013      	strb	r3, [r2, #0]
 8009596:	0013      	movs	r3, r2
 8009598:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800959a:	3301      	adds	r3, #1
 800959c:	0004      	movs	r4, r0
 800959e:	000d      	movs	r5, r1
 80095a0:	9308      	str	r3, [sp, #32]
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d12c      	bne.n	8009600 <_dtoa_r+0x680>
 80095a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80095a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80095aa:	9a06      	ldr	r2, [sp, #24]
 80095ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095ae:	4694      	mov	ip, r2
 80095b0:	4463      	add	r3, ip
 80095b2:	2200      	movs	r2, #0
 80095b4:	9308      	str	r3, [sp, #32]
 80095b6:	4b1e      	ldr	r3, [pc, #120]	; (8009630 <_dtoa_r+0x6b0>)
 80095b8:	f7f7 ff7e 	bl	80014b8 <__aeabi_dadd>
 80095bc:	0002      	movs	r2, r0
 80095be:	000b      	movs	r3, r1
 80095c0:	0020      	movs	r0, r4
 80095c2:	0029      	movs	r1, r5
 80095c4:	f7f6 ff5c 	bl	8000480 <__aeabi_dcmpgt>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d000      	beq.n	80095ce <_dtoa_r+0x64e>
 80095cc:	e080      	b.n	80096d0 <_dtoa_r+0x750>
 80095ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095d2:	2000      	movs	r0, #0
 80095d4:	4916      	ldr	r1, [pc, #88]	; (8009630 <_dtoa_r+0x6b0>)
 80095d6:	f7f9 f919 	bl	800280c <__aeabi_dsub>
 80095da:	0002      	movs	r2, r0
 80095dc:	000b      	movs	r3, r1
 80095de:	0020      	movs	r0, r4
 80095e0:	0029      	movs	r1, r5
 80095e2:	f7f6 ff39 	bl	8000458 <__aeabi_dcmplt>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d100      	bne.n	80095ec <_dtoa_r+0x66c>
 80095ea:	e714      	b.n	8009416 <_dtoa_r+0x496>
 80095ec:	9b08      	ldr	r3, [sp, #32]
 80095ee:	001a      	movs	r2, r3
 80095f0:	3a01      	subs	r2, #1
 80095f2:	9208      	str	r2, [sp, #32]
 80095f4:	7812      	ldrb	r2, [r2, #0]
 80095f6:	2a30      	cmp	r2, #48	; 0x30
 80095f8:	d0f8      	beq.n	80095ec <_dtoa_r+0x66c>
 80095fa:	9308      	str	r3, [sp, #32]
 80095fc:	9602      	str	r6, [sp, #8]
 80095fe:	e055      	b.n	80096ac <_dtoa_r+0x72c>
 8009600:	2200      	movs	r2, #0
 8009602:	4b06      	ldr	r3, [pc, #24]	; (800961c <_dtoa_r+0x69c>)
 8009604:	f7f8 fe96 	bl	8002334 <__aeabi_dmul>
 8009608:	0004      	movs	r4, r0
 800960a:	000d      	movs	r5, r1
 800960c:	e7b2      	b.n	8009574 <_dtoa_r+0x5f4>
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	0800b7a0 	.word	0x0800b7a0
 8009614:	0800b778 	.word	0x0800b778
 8009618:	3ff00000 	.word	0x3ff00000
 800961c:	40240000 	.word	0x40240000
 8009620:	401c0000 	.word	0x401c0000
 8009624:	fcc00000 	.word	0xfcc00000
 8009628:	40140000 	.word	0x40140000
 800962c:	7cc00000 	.word	0x7cc00000
 8009630:	3fe00000 	.word	0x3fe00000
 8009634:	9b07      	ldr	r3, [sp, #28]
 8009636:	9e06      	ldr	r6, [sp, #24]
 8009638:	3b01      	subs	r3, #1
 800963a:	199b      	adds	r3, r3, r6
 800963c:	930c      	str	r3, [sp, #48]	; 0x30
 800963e:	9c08      	ldr	r4, [sp, #32]
 8009640:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009646:	0020      	movs	r0, r4
 8009648:	0029      	movs	r1, r5
 800964a:	f7f8 fa71 	bl	8001b30 <__aeabi_ddiv>
 800964e:	f7f9 fc8d 	bl	8002f6c <__aeabi_d2iz>
 8009652:	9007      	str	r0, [sp, #28]
 8009654:	f7f9 fcc0 	bl	8002fd8 <__aeabi_i2d>
 8009658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800965a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800965c:	f7f8 fe6a 	bl	8002334 <__aeabi_dmul>
 8009660:	0002      	movs	r2, r0
 8009662:	000b      	movs	r3, r1
 8009664:	0020      	movs	r0, r4
 8009666:	0029      	movs	r1, r5
 8009668:	f7f9 f8d0 	bl	800280c <__aeabi_dsub>
 800966c:	0033      	movs	r3, r6
 800966e:	9a07      	ldr	r2, [sp, #28]
 8009670:	3601      	adds	r6, #1
 8009672:	3230      	adds	r2, #48	; 0x30
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009678:	9608      	str	r6, [sp, #32]
 800967a:	429a      	cmp	r2, r3
 800967c:	d139      	bne.n	80096f2 <_dtoa_r+0x772>
 800967e:	0002      	movs	r2, r0
 8009680:	000b      	movs	r3, r1
 8009682:	f7f7 ff19 	bl	80014b8 <__aeabi_dadd>
 8009686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800968a:	0004      	movs	r4, r0
 800968c:	000d      	movs	r5, r1
 800968e:	f7f6 fef7 	bl	8000480 <__aeabi_dcmpgt>
 8009692:	2800      	cmp	r0, #0
 8009694:	d11b      	bne.n	80096ce <_dtoa_r+0x74e>
 8009696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969a:	0020      	movs	r0, r4
 800969c:	0029      	movs	r1, r5
 800969e:	f7f6 fed5 	bl	800044c <__aeabi_dcmpeq>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d002      	beq.n	80096ac <_dtoa_r+0x72c>
 80096a6:	9b07      	ldr	r3, [sp, #28]
 80096a8:	07db      	lsls	r3, r3, #31
 80096aa:	d410      	bmi.n	80096ce <_dtoa_r+0x74e>
 80096ac:	0038      	movs	r0, r7
 80096ae:	9905      	ldr	r1, [sp, #20]
 80096b0:	f000 fae6 	bl	8009c80 <_Bfree>
 80096b4:	2300      	movs	r3, #0
 80096b6:	9a08      	ldr	r2, [sp, #32]
 80096b8:	9802      	ldr	r0, [sp, #8]
 80096ba:	7013      	strb	r3, [r2, #0]
 80096bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80096be:	3001      	adds	r0, #1
 80096c0:	6018      	str	r0, [r3, #0]
 80096c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d100      	bne.n	80096ca <_dtoa_r+0x74a>
 80096c8:	e4a6      	b.n	8009018 <_dtoa_r+0x98>
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	e4a4      	b.n	8009018 <_dtoa_r+0x98>
 80096ce:	9e02      	ldr	r6, [sp, #8]
 80096d0:	9b08      	ldr	r3, [sp, #32]
 80096d2:	9308      	str	r3, [sp, #32]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	781a      	ldrb	r2, [r3, #0]
 80096d8:	2a39      	cmp	r2, #57	; 0x39
 80096da:	d106      	bne.n	80096ea <_dtoa_r+0x76a>
 80096dc:	9a06      	ldr	r2, [sp, #24]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d1f7      	bne.n	80096d2 <_dtoa_r+0x752>
 80096e2:	2230      	movs	r2, #48	; 0x30
 80096e4:	9906      	ldr	r1, [sp, #24]
 80096e6:	3601      	adds	r6, #1
 80096e8:	700a      	strb	r2, [r1, #0]
 80096ea:	781a      	ldrb	r2, [r3, #0]
 80096ec:	3201      	adds	r2, #1
 80096ee:	701a      	strb	r2, [r3, #0]
 80096f0:	e784      	b.n	80095fc <_dtoa_r+0x67c>
 80096f2:	2200      	movs	r2, #0
 80096f4:	4baa      	ldr	r3, [pc, #680]	; (80099a0 <_dtoa_r+0xa20>)
 80096f6:	f7f8 fe1d 	bl	8002334 <__aeabi_dmul>
 80096fa:	2200      	movs	r2, #0
 80096fc:	2300      	movs	r3, #0
 80096fe:	0004      	movs	r4, r0
 8009700:	000d      	movs	r5, r1
 8009702:	f7f6 fea3 	bl	800044c <__aeabi_dcmpeq>
 8009706:	2800      	cmp	r0, #0
 8009708:	d09b      	beq.n	8009642 <_dtoa_r+0x6c2>
 800970a:	e7cf      	b.n	80096ac <_dtoa_r+0x72c>
 800970c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800970e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009710:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009712:	2d00      	cmp	r5, #0
 8009714:	d012      	beq.n	800973c <_dtoa_r+0x7bc>
 8009716:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009718:	2a01      	cmp	r2, #1
 800971a:	dc66      	bgt.n	80097ea <_dtoa_r+0x86a>
 800971c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800971e:	2a00      	cmp	r2, #0
 8009720:	d05d      	beq.n	80097de <_dtoa_r+0x85e>
 8009722:	4aa0      	ldr	r2, [pc, #640]	; (80099a4 <_dtoa_r+0xa24>)
 8009724:	189b      	adds	r3, r3, r2
 8009726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009728:	2101      	movs	r1, #1
 800972a:	18d2      	adds	r2, r2, r3
 800972c:	920a      	str	r2, [sp, #40]	; 0x28
 800972e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009730:	0038      	movs	r0, r7
 8009732:	18d3      	adds	r3, r2, r3
 8009734:	930d      	str	r3, [sp, #52]	; 0x34
 8009736:	f000 fb53 	bl	8009de0 <__i2b>
 800973a:	0005      	movs	r5, r0
 800973c:	2c00      	cmp	r4, #0
 800973e:	dd0e      	ble.n	800975e <_dtoa_r+0x7de>
 8009740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009742:	2b00      	cmp	r3, #0
 8009744:	dd0b      	ble.n	800975e <_dtoa_r+0x7de>
 8009746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009748:	0023      	movs	r3, r4
 800974a:	4294      	cmp	r4, r2
 800974c:	dd00      	ble.n	8009750 <_dtoa_r+0x7d0>
 800974e:	0013      	movs	r3, r2
 8009750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009752:	1ae4      	subs	r4, r4, r3
 8009754:	1ad2      	subs	r2, r2, r3
 8009756:	920a      	str	r2, [sp, #40]	; 0x28
 8009758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	930d      	str	r3, [sp, #52]	; 0x34
 800975e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01f      	beq.n	80097a4 <_dtoa_r+0x824>
 8009764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009766:	2b00      	cmp	r3, #0
 8009768:	d054      	beq.n	8009814 <_dtoa_r+0x894>
 800976a:	2e00      	cmp	r6, #0
 800976c:	dd11      	ble.n	8009792 <_dtoa_r+0x812>
 800976e:	0029      	movs	r1, r5
 8009770:	0032      	movs	r2, r6
 8009772:	0038      	movs	r0, r7
 8009774:	f000 fbfa 	bl	8009f6c <__pow5mult>
 8009778:	9a05      	ldr	r2, [sp, #20]
 800977a:	0001      	movs	r1, r0
 800977c:	0005      	movs	r5, r0
 800977e:	0038      	movs	r0, r7
 8009780:	f000 fb44 	bl	8009e0c <__multiply>
 8009784:	9905      	ldr	r1, [sp, #20]
 8009786:	9014      	str	r0, [sp, #80]	; 0x50
 8009788:	0038      	movs	r0, r7
 800978a:	f000 fa79 	bl	8009c80 <_Bfree>
 800978e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009790:	9305      	str	r3, [sp, #20]
 8009792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009794:	1b9a      	subs	r2, r3, r6
 8009796:	42b3      	cmp	r3, r6
 8009798:	d004      	beq.n	80097a4 <_dtoa_r+0x824>
 800979a:	0038      	movs	r0, r7
 800979c:	9905      	ldr	r1, [sp, #20]
 800979e:	f000 fbe5 	bl	8009f6c <__pow5mult>
 80097a2:	9005      	str	r0, [sp, #20]
 80097a4:	2101      	movs	r1, #1
 80097a6:	0038      	movs	r0, r7
 80097a8:	f000 fb1a 	bl	8009de0 <__i2b>
 80097ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097ae:	0006      	movs	r6, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dd31      	ble.n	8009818 <_dtoa_r+0x898>
 80097b4:	001a      	movs	r2, r3
 80097b6:	0001      	movs	r1, r0
 80097b8:	0038      	movs	r0, r7
 80097ba:	f000 fbd7 	bl	8009f6c <__pow5mult>
 80097be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097c0:	0006      	movs	r6, r0
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	dd2d      	ble.n	8009822 <_dtoa_r+0x8a2>
 80097c6:	2300      	movs	r3, #0
 80097c8:	930e      	str	r3, [sp, #56]	; 0x38
 80097ca:	6933      	ldr	r3, [r6, #16]
 80097cc:	3303      	adds	r3, #3
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	18f3      	adds	r3, r6, r3
 80097d2:	6858      	ldr	r0, [r3, #4]
 80097d4:	f000 fabc 	bl	8009d50 <__hi0bits>
 80097d8:	2320      	movs	r3, #32
 80097da:	1a18      	subs	r0, r3, r0
 80097dc:	e039      	b.n	8009852 <_dtoa_r+0x8d2>
 80097de:	2336      	movs	r3, #54	; 0x36
 80097e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80097e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80097e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097e6:	1a9b      	subs	r3, r3, r2
 80097e8:	e79d      	b.n	8009726 <_dtoa_r+0x7a6>
 80097ea:	9b07      	ldr	r3, [sp, #28]
 80097ec:	1e5e      	subs	r6, r3, #1
 80097ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	db07      	blt.n	8009804 <_dtoa_r+0x884>
 80097f4:	1b9e      	subs	r6, r3, r6
 80097f6:	9b07      	ldr	r3, [sp, #28]
 80097f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	da93      	bge.n	8009726 <_dtoa_r+0x7a6>
 80097fe:	1ae4      	subs	r4, r4, r3
 8009800:	2300      	movs	r3, #0
 8009802:	e790      	b.n	8009726 <_dtoa_r+0x7a6>
 8009804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009806:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009808:	1af3      	subs	r3, r6, r3
 800980a:	18d3      	adds	r3, r2, r3
 800980c:	960e      	str	r6, [sp, #56]	; 0x38
 800980e:	9315      	str	r3, [sp, #84]	; 0x54
 8009810:	2600      	movs	r6, #0
 8009812:	e7f0      	b.n	80097f6 <_dtoa_r+0x876>
 8009814:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009816:	e7c0      	b.n	800979a <_dtoa_r+0x81a>
 8009818:	2300      	movs	r3, #0
 800981a:	930e      	str	r3, [sp, #56]	; 0x38
 800981c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800981e:	2b01      	cmp	r3, #1
 8009820:	dc13      	bgt.n	800984a <_dtoa_r+0x8ca>
 8009822:	2300      	movs	r3, #0
 8009824:	930e      	str	r3, [sp, #56]	; 0x38
 8009826:	9b08      	ldr	r3, [sp, #32]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10e      	bne.n	800984a <_dtoa_r+0x8ca>
 800982c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982e:	031b      	lsls	r3, r3, #12
 8009830:	d10b      	bne.n	800984a <_dtoa_r+0x8ca>
 8009832:	4b5d      	ldr	r3, [pc, #372]	; (80099a8 <_dtoa_r+0xa28>)
 8009834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009836:	4213      	tst	r3, r2
 8009838:	d007      	beq.n	800984a <_dtoa_r+0x8ca>
 800983a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800983c:	3301      	adds	r3, #1
 800983e:	930a      	str	r3, [sp, #40]	; 0x28
 8009840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009842:	3301      	adds	r3, #1
 8009844:	930d      	str	r3, [sp, #52]	; 0x34
 8009846:	2301      	movs	r3, #1
 8009848:	930e      	str	r3, [sp, #56]	; 0x38
 800984a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800984c:	2001      	movs	r0, #1
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1bb      	bne.n	80097ca <_dtoa_r+0x84a>
 8009852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009854:	221f      	movs	r2, #31
 8009856:	1818      	adds	r0, r3, r0
 8009858:	0003      	movs	r3, r0
 800985a:	4013      	ands	r3, r2
 800985c:	4210      	tst	r0, r2
 800985e:	d046      	beq.n	80098ee <_dtoa_r+0x96e>
 8009860:	3201      	adds	r2, #1
 8009862:	1ad2      	subs	r2, r2, r3
 8009864:	2a04      	cmp	r2, #4
 8009866:	dd3f      	ble.n	80098e8 <_dtoa_r+0x968>
 8009868:	221c      	movs	r2, #28
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800986e:	18e4      	adds	r4, r4, r3
 8009870:	18d2      	adds	r2, r2, r3
 8009872:	920a      	str	r2, [sp, #40]	; 0x28
 8009874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009876:	18d3      	adds	r3, r2, r3
 8009878:	930d      	str	r3, [sp, #52]	; 0x34
 800987a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987c:	2b00      	cmp	r3, #0
 800987e:	dd05      	ble.n	800988c <_dtoa_r+0x90c>
 8009880:	001a      	movs	r2, r3
 8009882:	0038      	movs	r0, r7
 8009884:	9905      	ldr	r1, [sp, #20]
 8009886:	f000 fbcd 	bl	800a024 <__lshift>
 800988a:	9005      	str	r0, [sp, #20]
 800988c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800988e:	2b00      	cmp	r3, #0
 8009890:	dd05      	ble.n	800989e <_dtoa_r+0x91e>
 8009892:	0031      	movs	r1, r6
 8009894:	001a      	movs	r2, r3
 8009896:	0038      	movs	r0, r7
 8009898:	f000 fbc4 	bl	800a024 <__lshift>
 800989c:	0006      	movs	r6, r0
 800989e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d026      	beq.n	80098f2 <_dtoa_r+0x972>
 80098a4:	0031      	movs	r1, r6
 80098a6:	9805      	ldr	r0, [sp, #20]
 80098a8:	f000 fc2a 	bl	800a100 <__mcmp>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	da20      	bge.n	80098f2 <_dtoa_r+0x972>
 80098b0:	9b02      	ldr	r3, [sp, #8]
 80098b2:	220a      	movs	r2, #10
 80098b4:	3b01      	subs	r3, #1
 80098b6:	9302      	str	r3, [sp, #8]
 80098b8:	0038      	movs	r0, r7
 80098ba:	2300      	movs	r3, #0
 80098bc:	9905      	ldr	r1, [sp, #20]
 80098be:	f000 fa03 	bl	8009cc8 <__multadd>
 80098c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098c4:	9005      	str	r0, [sp, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d100      	bne.n	80098cc <_dtoa_r+0x94c>
 80098ca:	e166      	b.n	8009b9a <_dtoa_r+0xc1a>
 80098cc:	2300      	movs	r3, #0
 80098ce:	0029      	movs	r1, r5
 80098d0:	220a      	movs	r2, #10
 80098d2:	0038      	movs	r0, r7
 80098d4:	f000 f9f8 	bl	8009cc8 <__multadd>
 80098d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098da:	0005      	movs	r5, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dc47      	bgt.n	8009970 <_dtoa_r+0x9f0>
 80098e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	dc0d      	bgt.n	8009902 <_dtoa_r+0x982>
 80098e6:	e043      	b.n	8009970 <_dtoa_r+0x9f0>
 80098e8:	2a04      	cmp	r2, #4
 80098ea:	d0c6      	beq.n	800987a <_dtoa_r+0x8fa>
 80098ec:	0013      	movs	r3, r2
 80098ee:	331c      	adds	r3, #28
 80098f0:	e7bc      	b.n	800986c <_dtoa_r+0x8ec>
 80098f2:	9b07      	ldr	r3, [sp, #28]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dc35      	bgt.n	8009964 <_dtoa_r+0x9e4>
 80098f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	dd32      	ble.n	8009964 <_dtoa_r+0x9e4>
 80098fe:	9b07      	ldr	r3, [sp, #28]
 8009900:	930c      	str	r3, [sp, #48]	; 0x30
 8009902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10c      	bne.n	8009922 <_dtoa_r+0x9a2>
 8009908:	0031      	movs	r1, r6
 800990a:	2205      	movs	r2, #5
 800990c:	0038      	movs	r0, r7
 800990e:	f000 f9db 	bl	8009cc8 <__multadd>
 8009912:	0006      	movs	r6, r0
 8009914:	0001      	movs	r1, r0
 8009916:	9805      	ldr	r0, [sp, #20]
 8009918:	f000 fbf2 	bl	800a100 <__mcmp>
 800991c:	2800      	cmp	r0, #0
 800991e:	dd00      	ble.n	8009922 <_dtoa_r+0x9a2>
 8009920:	e5a5      	b.n	800946e <_dtoa_r+0x4ee>
 8009922:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009924:	43db      	mvns	r3, r3
 8009926:	9302      	str	r3, [sp, #8]
 8009928:	9b06      	ldr	r3, [sp, #24]
 800992a:	9308      	str	r3, [sp, #32]
 800992c:	2400      	movs	r4, #0
 800992e:	0031      	movs	r1, r6
 8009930:	0038      	movs	r0, r7
 8009932:	f000 f9a5 	bl	8009c80 <_Bfree>
 8009936:	2d00      	cmp	r5, #0
 8009938:	d100      	bne.n	800993c <_dtoa_r+0x9bc>
 800993a:	e6b7      	b.n	80096ac <_dtoa_r+0x72c>
 800993c:	2c00      	cmp	r4, #0
 800993e:	d005      	beq.n	800994c <_dtoa_r+0x9cc>
 8009940:	42ac      	cmp	r4, r5
 8009942:	d003      	beq.n	800994c <_dtoa_r+0x9cc>
 8009944:	0021      	movs	r1, r4
 8009946:	0038      	movs	r0, r7
 8009948:	f000 f99a 	bl	8009c80 <_Bfree>
 800994c:	0029      	movs	r1, r5
 800994e:	0038      	movs	r0, r7
 8009950:	f000 f996 	bl	8009c80 <_Bfree>
 8009954:	e6aa      	b.n	80096ac <_dtoa_r+0x72c>
 8009956:	2600      	movs	r6, #0
 8009958:	0035      	movs	r5, r6
 800995a:	e7e2      	b.n	8009922 <_dtoa_r+0x9a2>
 800995c:	9602      	str	r6, [sp, #8]
 800995e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009960:	0035      	movs	r5, r6
 8009962:	e584      	b.n	800946e <_dtoa_r+0x4ee>
 8009964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d100      	bne.n	800996c <_dtoa_r+0x9ec>
 800996a:	e0ce      	b.n	8009b0a <_dtoa_r+0xb8a>
 800996c:	9b07      	ldr	r3, [sp, #28]
 800996e:	930c      	str	r3, [sp, #48]	; 0x30
 8009970:	2c00      	cmp	r4, #0
 8009972:	dd05      	ble.n	8009980 <_dtoa_r+0xa00>
 8009974:	0029      	movs	r1, r5
 8009976:	0022      	movs	r2, r4
 8009978:	0038      	movs	r0, r7
 800997a:	f000 fb53 	bl	800a024 <__lshift>
 800997e:	0005      	movs	r5, r0
 8009980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009982:	0028      	movs	r0, r5
 8009984:	2b00      	cmp	r3, #0
 8009986:	d022      	beq.n	80099ce <_dtoa_r+0xa4e>
 8009988:	0038      	movs	r0, r7
 800998a:	6869      	ldr	r1, [r5, #4]
 800998c:	f000 f934 	bl	8009bf8 <_Balloc>
 8009990:	1e04      	subs	r4, r0, #0
 8009992:	d10f      	bne.n	80099b4 <_dtoa_r+0xa34>
 8009994:	0002      	movs	r2, r0
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <_dtoa_r+0xa2c>)
 8009998:	4905      	ldr	r1, [pc, #20]	; (80099b0 <_dtoa_r+0xa30>)
 800999a:	f7ff fb06 	bl	8008faa <_dtoa_r+0x2a>
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	40240000 	.word	0x40240000
 80099a4:	00000433 	.word	0x00000433
 80099a8:	7ff00000 	.word	0x7ff00000
 80099ac:	0800b70b 	.word	0x0800b70b
 80099b0:	000002ea 	.word	0x000002ea
 80099b4:	0029      	movs	r1, r5
 80099b6:	692b      	ldr	r3, [r5, #16]
 80099b8:	310c      	adds	r1, #12
 80099ba:	1c9a      	adds	r2, r3, #2
 80099bc:	0092      	lsls	r2, r2, #2
 80099be:	300c      	adds	r0, #12
 80099c0:	f000 f911 	bl	8009be6 <memcpy>
 80099c4:	2201      	movs	r2, #1
 80099c6:	0021      	movs	r1, r4
 80099c8:	0038      	movs	r0, r7
 80099ca:	f000 fb2b 	bl	800a024 <__lshift>
 80099ce:	9b06      	ldr	r3, [sp, #24]
 80099d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d2:	930a      	str	r3, [sp, #40]	; 0x28
 80099d4:	3b01      	subs	r3, #1
 80099d6:	189b      	adds	r3, r3, r2
 80099d8:	2201      	movs	r2, #1
 80099da:	002c      	movs	r4, r5
 80099dc:	0005      	movs	r5, r0
 80099de:	9314      	str	r3, [sp, #80]	; 0x50
 80099e0:	9b08      	ldr	r3, [sp, #32]
 80099e2:	4013      	ands	r3, r2
 80099e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e6:	0031      	movs	r1, r6
 80099e8:	9805      	ldr	r0, [sp, #20]
 80099ea:	f7ff fa3d 	bl	8008e68 <quorem>
 80099ee:	0003      	movs	r3, r0
 80099f0:	0021      	movs	r1, r4
 80099f2:	3330      	adds	r3, #48	; 0x30
 80099f4:	900d      	str	r0, [sp, #52]	; 0x34
 80099f6:	9805      	ldr	r0, [sp, #20]
 80099f8:	9307      	str	r3, [sp, #28]
 80099fa:	f000 fb81 	bl	800a100 <__mcmp>
 80099fe:	002a      	movs	r2, r5
 8009a00:	900e      	str	r0, [sp, #56]	; 0x38
 8009a02:	0031      	movs	r1, r6
 8009a04:	0038      	movs	r0, r7
 8009a06:	f000 fb97 	bl	800a138 <__mdiff>
 8009a0a:	68c3      	ldr	r3, [r0, #12]
 8009a0c:	9008      	str	r0, [sp, #32]
 8009a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8009a10:	2301      	movs	r3, #1
 8009a12:	930c      	str	r3, [sp, #48]	; 0x30
 8009a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d104      	bne.n	8009a24 <_dtoa_r+0xaa4>
 8009a1a:	0001      	movs	r1, r0
 8009a1c:	9805      	ldr	r0, [sp, #20]
 8009a1e:	f000 fb6f 	bl	800a100 <__mcmp>
 8009a22:	900c      	str	r0, [sp, #48]	; 0x30
 8009a24:	0038      	movs	r0, r7
 8009a26:	9908      	ldr	r1, [sp, #32]
 8009a28:	f000 f92a 	bl	8009c80 <_Bfree>
 8009a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a30:	3301      	adds	r3, #1
 8009a32:	9308      	str	r3, [sp, #32]
 8009a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a36:	4313      	orrs	r3, r2
 8009a38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	d10c      	bne.n	8009a58 <_dtoa_r+0xad8>
 8009a3e:	9b07      	ldr	r3, [sp, #28]
 8009a40:	2b39      	cmp	r3, #57	; 0x39
 8009a42:	d026      	beq.n	8009a92 <_dtoa_r+0xb12>
 8009a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	dd02      	ble.n	8009a50 <_dtoa_r+0xad0>
 8009a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a4c:	3331      	adds	r3, #49	; 0x31
 8009a4e:	9307      	str	r3, [sp, #28]
 8009a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a52:	9a07      	ldr	r2, [sp, #28]
 8009a54:	701a      	strb	r2, [r3, #0]
 8009a56:	e76a      	b.n	800992e <_dtoa_r+0x9ae>
 8009a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	db04      	blt.n	8009a68 <_dtoa_r+0xae8>
 8009a5e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a60:	4313      	orrs	r3, r2
 8009a62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a64:	4313      	orrs	r3, r2
 8009a66:	d11f      	bne.n	8009aa8 <_dtoa_r+0xb28>
 8009a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	ddf0      	ble.n	8009a50 <_dtoa_r+0xad0>
 8009a6e:	9905      	ldr	r1, [sp, #20]
 8009a70:	2201      	movs	r2, #1
 8009a72:	0038      	movs	r0, r7
 8009a74:	f000 fad6 	bl	800a024 <__lshift>
 8009a78:	0031      	movs	r1, r6
 8009a7a:	9005      	str	r0, [sp, #20]
 8009a7c:	f000 fb40 	bl	800a100 <__mcmp>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	dc03      	bgt.n	8009a8c <_dtoa_r+0xb0c>
 8009a84:	d1e4      	bne.n	8009a50 <_dtoa_r+0xad0>
 8009a86:	9b07      	ldr	r3, [sp, #28]
 8009a88:	07db      	lsls	r3, r3, #31
 8009a8a:	d5e1      	bpl.n	8009a50 <_dtoa_r+0xad0>
 8009a8c:	9b07      	ldr	r3, [sp, #28]
 8009a8e:	2b39      	cmp	r3, #57	; 0x39
 8009a90:	d1db      	bne.n	8009a4a <_dtoa_r+0xaca>
 8009a92:	2339      	movs	r3, #57	; 0x39
 8009a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a96:	7013      	strb	r3, [r2, #0]
 8009a98:	9b08      	ldr	r3, [sp, #32]
 8009a9a:	9308      	str	r3, [sp, #32]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	781a      	ldrb	r2, [r3, #0]
 8009aa0:	2a39      	cmp	r2, #57	; 0x39
 8009aa2:	d068      	beq.n	8009b76 <_dtoa_r+0xbf6>
 8009aa4:	3201      	adds	r2, #1
 8009aa6:	e7d5      	b.n	8009a54 <_dtoa_r+0xad4>
 8009aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	dd07      	ble.n	8009abe <_dtoa_r+0xb3e>
 8009aae:	9b07      	ldr	r3, [sp, #28]
 8009ab0:	2b39      	cmp	r3, #57	; 0x39
 8009ab2:	d0ee      	beq.n	8009a92 <_dtoa_r+0xb12>
 8009ab4:	9b07      	ldr	r3, [sp, #28]
 8009ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ab8:	3301      	adds	r3, #1
 8009aba:	7013      	strb	r3, [r2, #0]
 8009abc:	e737      	b.n	800992e <_dtoa_r+0x9ae>
 8009abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac0:	9a07      	ldr	r2, [sp, #28]
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d03e      	beq.n	8009b4a <_dtoa_r+0xbca>
 8009acc:	2300      	movs	r3, #0
 8009ace:	220a      	movs	r2, #10
 8009ad0:	9905      	ldr	r1, [sp, #20]
 8009ad2:	0038      	movs	r0, r7
 8009ad4:	f000 f8f8 	bl	8009cc8 <__multadd>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	9005      	str	r0, [sp, #20]
 8009adc:	220a      	movs	r2, #10
 8009ade:	0021      	movs	r1, r4
 8009ae0:	0038      	movs	r0, r7
 8009ae2:	42ac      	cmp	r4, r5
 8009ae4:	d106      	bne.n	8009af4 <_dtoa_r+0xb74>
 8009ae6:	f000 f8ef 	bl	8009cc8 <__multadd>
 8009aea:	0004      	movs	r4, r0
 8009aec:	0005      	movs	r5, r0
 8009aee:	9b08      	ldr	r3, [sp, #32]
 8009af0:	930a      	str	r3, [sp, #40]	; 0x28
 8009af2:	e778      	b.n	80099e6 <_dtoa_r+0xa66>
 8009af4:	f000 f8e8 	bl	8009cc8 <__multadd>
 8009af8:	0029      	movs	r1, r5
 8009afa:	0004      	movs	r4, r0
 8009afc:	2300      	movs	r3, #0
 8009afe:	220a      	movs	r2, #10
 8009b00:	0038      	movs	r0, r7
 8009b02:	f000 f8e1 	bl	8009cc8 <__multadd>
 8009b06:	0005      	movs	r5, r0
 8009b08:	e7f1      	b.n	8009aee <_dtoa_r+0xb6e>
 8009b0a:	9b07      	ldr	r3, [sp, #28]
 8009b0c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b0e:	2400      	movs	r4, #0
 8009b10:	0031      	movs	r1, r6
 8009b12:	9805      	ldr	r0, [sp, #20]
 8009b14:	f7ff f9a8 	bl	8008e68 <quorem>
 8009b18:	9b06      	ldr	r3, [sp, #24]
 8009b1a:	3030      	adds	r0, #48	; 0x30
 8009b1c:	5518      	strb	r0, [r3, r4]
 8009b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b20:	3401      	adds	r4, #1
 8009b22:	9007      	str	r0, [sp, #28]
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	dd07      	ble.n	8009b38 <_dtoa_r+0xbb8>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	220a      	movs	r2, #10
 8009b2c:	0038      	movs	r0, r7
 8009b2e:	9905      	ldr	r1, [sp, #20]
 8009b30:	f000 f8ca 	bl	8009cc8 <__multadd>
 8009b34:	9005      	str	r0, [sp, #20]
 8009b36:	e7eb      	b.n	8009b10 <_dtoa_r+0xb90>
 8009b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	dd00      	ble.n	8009b42 <_dtoa_r+0xbc2>
 8009b40:	0018      	movs	r0, r3
 8009b42:	2400      	movs	r4, #0
 8009b44:	9b06      	ldr	r3, [sp, #24]
 8009b46:	181b      	adds	r3, r3, r0
 8009b48:	9308      	str	r3, [sp, #32]
 8009b4a:	9905      	ldr	r1, [sp, #20]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	0038      	movs	r0, r7
 8009b50:	f000 fa68 	bl	800a024 <__lshift>
 8009b54:	0031      	movs	r1, r6
 8009b56:	9005      	str	r0, [sp, #20]
 8009b58:	f000 fad2 	bl	800a100 <__mcmp>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	dc9b      	bgt.n	8009a98 <_dtoa_r+0xb18>
 8009b60:	d102      	bne.n	8009b68 <_dtoa_r+0xbe8>
 8009b62:	9b07      	ldr	r3, [sp, #28]
 8009b64:	07db      	lsls	r3, r3, #31
 8009b66:	d497      	bmi.n	8009a98 <_dtoa_r+0xb18>
 8009b68:	9b08      	ldr	r3, [sp, #32]
 8009b6a:	9308      	str	r3, [sp, #32]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	781a      	ldrb	r2, [r3, #0]
 8009b70:	2a30      	cmp	r2, #48	; 0x30
 8009b72:	d0fa      	beq.n	8009b6a <_dtoa_r+0xbea>
 8009b74:	e6db      	b.n	800992e <_dtoa_r+0x9ae>
 8009b76:	9a06      	ldr	r2, [sp, #24]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d18e      	bne.n	8009a9a <_dtoa_r+0xb1a>
 8009b7c:	9b02      	ldr	r3, [sp, #8]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	9302      	str	r3, [sp, #8]
 8009b82:	2331      	movs	r3, #49	; 0x31
 8009b84:	e799      	b.n	8009aba <_dtoa_r+0xb3a>
 8009b86:	4b09      	ldr	r3, [pc, #36]	; (8009bac <_dtoa_r+0xc2c>)
 8009b88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b8a:	9306      	str	r3, [sp, #24]
 8009b8c:	4b08      	ldr	r3, [pc, #32]	; (8009bb0 <_dtoa_r+0xc30>)
 8009b8e:	2a00      	cmp	r2, #0
 8009b90:	d001      	beq.n	8009b96 <_dtoa_r+0xc16>
 8009b92:	f7ff fa3f 	bl	8009014 <_dtoa_r+0x94>
 8009b96:	f7ff fa3f 	bl	8009018 <_dtoa_r+0x98>
 8009b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	dcb6      	bgt.n	8009b0e <_dtoa_r+0xb8e>
 8009ba0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	dd00      	ble.n	8009ba8 <_dtoa_r+0xc28>
 8009ba6:	e6ac      	b.n	8009902 <_dtoa_r+0x982>
 8009ba8:	e7b1      	b.n	8009b0e <_dtoa_r+0xb8e>
 8009baa:	46c0      	nop			; (mov r8, r8)
 8009bac:	0800b68c 	.word	0x0800b68c
 8009bb0:	0800b694 	.word	0x0800b694

08009bb4 <_localeconv_r>:
 8009bb4:	4800      	ldr	r0, [pc, #0]	; (8009bb8 <_localeconv_r+0x4>)
 8009bb6:	4770      	bx	lr
 8009bb8:	20000160 	.word	0x20000160

08009bbc <malloc>:
 8009bbc:	b510      	push	{r4, lr}
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <malloc+0x10>)
 8009bc0:	0001      	movs	r1, r0
 8009bc2:	6818      	ldr	r0, [r3, #0]
 8009bc4:	f000 fc4c 	bl	800a460 <_malloc_r>
 8009bc8:	bd10      	pop	{r4, pc}
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	2000000c 	.word	0x2000000c

08009bd0 <memchr>:
 8009bd0:	b2c9      	uxtb	r1, r1
 8009bd2:	1882      	adds	r2, r0, r2
 8009bd4:	4290      	cmp	r0, r2
 8009bd6:	d101      	bne.n	8009bdc <memchr+0xc>
 8009bd8:	2000      	movs	r0, #0
 8009bda:	4770      	bx	lr
 8009bdc:	7803      	ldrb	r3, [r0, #0]
 8009bde:	428b      	cmp	r3, r1
 8009be0:	d0fb      	beq.n	8009bda <memchr+0xa>
 8009be2:	3001      	adds	r0, #1
 8009be4:	e7f6      	b.n	8009bd4 <memchr+0x4>

08009be6 <memcpy>:
 8009be6:	2300      	movs	r3, #0
 8009be8:	b510      	push	{r4, lr}
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d100      	bne.n	8009bf0 <memcpy+0xa>
 8009bee:	bd10      	pop	{r4, pc}
 8009bf0:	5ccc      	ldrb	r4, [r1, r3]
 8009bf2:	54c4      	strb	r4, [r0, r3]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	e7f8      	b.n	8009bea <memcpy+0x4>

08009bf8 <_Balloc>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009bfc:	0006      	movs	r6, r0
 8009bfe:	000c      	movs	r4, r1
 8009c00:	2d00      	cmp	r5, #0
 8009c02:	d10e      	bne.n	8009c22 <_Balloc+0x2a>
 8009c04:	2010      	movs	r0, #16
 8009c06:	f7ff ffd9 	bl	8009bbc <malloc>
 8009c0a:	1e02      	subs	r2, r0, #0
 8009c0c:	6270      	str	r0, [r6, #36]	; 0x24
 8009c0e:	d104      	bne.n	8009c1a <_Balloc+0x22>
 8009c10:	2166      	movs	r1, #102	; 0x66
 8009c12:	4b19      	ldr	r3, [pc, #100]	; (8009c78 <_Balloc+0x80>)
 8009c14:	4819      	ldr	r0, [pc, #100]	; (8009c7c <_Balloc+0x84>)
 8009c16:	f000 fe0d 	bl	800a834 <__assert_func>
 8009c1a:	6045      	str	r5, [r0, #4]
 8009c1c:	6085      	str	r5, [r0, #8]
 8009c1e:	6005      	str	r5, [r0, #0]
 8009c20:	60c5      	str	r5, [r0, #12]
 8009c22:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009c24:	68eb      	ldr	r3, [r5, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d013      	beq.n	8009c52 <_Balloc+0x5a>
 8009c2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c2c:	00a2      	lsls	r2, r4, #2
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	189b      	adds	r3, r3, r2
 8009c32:	6818      	ldr	r0, [r3, #0]
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d118      	bne.n	8009c6a <_Balloc+0x72>
 8009c38:	2101      	movs	r1, #1
 8009c3a:	000d      	movs	r5, r1
 8009c3c:	40a5      	lsls	r5, r4
 8009c3e:	1d6a      	adds	r2, r5, #5
 8009c40:	0030      	movs	r0, r6
 8009c42:	0092      	lsls	r2, r2, #2
 8009c44:	f000 fb74 	bl	800a330 <_calloc_r>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d00c      	beq.n	8009c66 <_Balloc+0x6e>
 8009c4c:	6044      	str	r4, [r0, #4]
 8009c4e:	6085      	str	r5, [r0, #8]
 8009c50:	e00d      	b.n	8009c6e <_Balloc+0x76>
 8009c52:	2221      	movs	r2, #33	; 0x21
 8009c54:	2104      	movs	r1, #4
 8009c56:	0030      	movs	r0, r6
 8009c58:	f000 fb6a 	bl	800a330 <_calloc_r>
 8009c5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c5e:	60e8      	str	r0, [r5, #12]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e1      	bne.n	8009c2a <_Balloc+0x32>
 8009c66:	2000      	movs	r0, #0
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
 8009c6a:	6802      	ldr	r2, [r0, #0]
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6103      	str	r3, [r0, #16]
 8009c72:	60c3      	str	r3, [r0, #12]
 8009c74:	e7f8      	b.n	8009c68 <_Balloc+0x70>
 8009c76:	46c0      	nop			; (mov r8, r8)
 8009c78:	0800b699 	.word	0x0800b699
 8009c7c:	0800b71c 	.word	0x0800b71c

08009c80 <_Bfree>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c84:	0005      	movs	r5, r0
 8009c86:	000c      	movs	r4, r1
 8009c88:	2e00      	cmp	r6, #0
 8009c8a:	d10e      	bne.n	8009caa <_Bfree+0x2a>
 8009c8c:	2010      	movs	r0, #16
 8009c8e:	f7ff ff95 	bl	8009bbc <malloc>
 8009c92:	1e02      	subs	r2, r0, #0
 8009c94:	6268      	str	r0, [r5, #36]	; 0x24
 8009c96:	d104      	bne.n	8009ca2 <_Bfree+0x22>
 8009c98:	218a      	movs	r1, #138	; 0x8a
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <_Bfree+0x40>)
 8009c9c:	4809      	ldr	r0, [pc, #36]	; (8009cc4 <_Bfree+0x44>)
 8009c9e:	f000 fdc9 	bl	800a834 <__assert_func>
 8009ca2:	6046      	str	r6, [r0, #4]
 8009ca4:	6086      	str	r6, [r0, #8]
 8009ca6:	6006      	str	r6, [r0, #0]
 8009ca8:	60c6      	str	r6, [r0, #12]
 8009caa:	2c00      	cmp	r4, #0
 8009cac:	d007      	beq.n	8009cbe <_Bfree+0x3e>
 8009cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009cb0:	6862      	ldr	r2, [r4, #4]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	0092      	lsls	r2, r2, #2
 8009cb6:	189b      	adds	r3, r3, r2
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	6022      	str	r2, [r4, #0]
 8009cbc:	601c      	str	r4, [r3, #0]
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}
 8009cc0:	0800b699 	.word	0x0800b699
 8009cc4:	0800b71c 	.word	0x0800b71c

08009cc8 <__multadd>:
 8009cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cca:	000e      	movs	r6, r1
 8009ccc:	9001      	str	r0, [sp, #4]
 8009cce:	000c      	movs	r4, r1
 8009cd0:	001d      	movs	r5, r3
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	690f      	ldr	r7, [r1, #16]
 8009cd6:	3614      	adds	r6, #20
 8009cd8:	6833      	ldr	r3, [r6, #0]
 8009cda:	3001      	adds	r0, #1
 8009cdc:	b299      	uxth	r1, r3
 8009cde:	4351      	muls	r1, r2
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	4353      	muls	r3, r2
 8009ce4:	1949      	adds	r1, r1, r5
 8009ce6:	0c0d      	lsrs	r5, r1, #16
 8009ce8:	195b      	adds	r3, r3, r5
 8009cea:	0c1d      	lsrs	r5, r3, #16
 8009cec:	b289      	uxth	r1, r1
 8009cee:	041b      	lsls	r3, r3, #16
 8009cf0:	185b      	adds	r3, r3, r1
 8009cf2:	c608      	stmia	r6!, {r3}
 8009cf4:	4287      	cmp	r7, r0
 8009cf6:	dcef      	bgt.n	8009cd8 <__multadd+0x10>
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	d022      	beq.n	8009d42 <__multadd+0x7a>
 8009cfc:	68a3      	ldr	r3, [r4, #8]
 8009cfe:	42bb      	cmp	r3, r7
 8009d00:	dc19      	bgt.n	8009d36 <__multadd+0x6e>
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	9801      	ldr	r0, [sp, #4]
 8009d06:	1c59      	adds	r1, r3, #1
 8009d08:	f7ff ff76 	bl	8009bf8 <_Balloc>
 8009d0c:	1e06      	subs	r6, r0, #0
 8009d0e:	d105      	bne.n	8009d1c <__multadd+0x54>
 8009d10:	0002      	movs	r2, r0
 8009d12:	21b5      	movs	r1, #181	; 0xb5
 8009d14:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <__multadd+0x80>)
 8009d16:	480d      	ldr	r0, [pc, #52]	; (8009d4c <__multadd+0x84>)
 8009d18:	f000 fd8c 	bl	800a834 <__assert_func>
 8009d1c:	0021      	movs	r1, r4
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	310c      	adds	r1, #12
 8009d22:	1c9a      	adds	r2, r3, #2
 8009d24:	0092      	lsls	r2, r2, #2
 8009d26:	300c      	adds	r0, #12
 8009d28:	f7ff ff5d 	bl	8009be6 <memcpy>
 8009d2c:	0021      	movs	r1, r4
 8009d2e:	9801      	ldr	r0, [sp, #4]
 8009d30:	f7ff ffa6 	bl	8009c80 <_Bfree>
 8009d34:	0034      	movs	r4, r6
 8009d36:	1d3b      	adds	r3, r7, #4
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	18e3      	adds	r3, r4, r3
 8009d3c:	605d      	str	r5, [r3, #4]
 8009d3e:	1c7b      	adds	r3, r7, #1
 8009d40:	6123      	str	r3, [r4, #16]
 8009d42:	0020      	movs	r0, r4
 8009d44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d46:	46c0      	nop			; (mov r8, r8)
 8009d48:	0800b70b 	.word	0x0800b70b
 8009d4c:	0800b71c 	.word	0x0800b71c

08009d50 <__hi0bits>:
 8009d50:	0003      	movs	r3, r0
 8009d52:	0c02      	lsrs	r2, r0, #16
 8009d54:	2000      	movs	r0, #0
 8009d56:	4282      	cmp	r2, r0
 8009d58:	d101      	bne.n	8009d5e <__hi0bits+0xe>
 8009d5a:	041b      	lsls	r3, r3, #16
 8009d5c:	3010      	adds	r0, #16
 8009d5e:	0e1a      	lsrs	r2, r3, #24
 8009d60:	d101      	bne.n	8009d66 <__hi0bits+0x16>
 8009d62:	3008      	adds	r0, #8
 8009d64:	021b      	lsls	r3, r3, #8
 8009d66:	0f1a      	lsrs	r2, r3, #28
 8009d68:	d101      	bne.n	8009d6e <__hi0bits+0x1e>
 8009d6a:	3004      	adds	r0, #4
 8009d6c:	011b      	lsls	r3, r3, #4
 8009d6e:	0f9a      	lsrs	r2, r3, #30
 8009d70:	d101      	bne.n	8009d76 <__hi0bits+0x26>
 8009d72:	3002      	adds	r0, #2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	db03      	blt.n	8009d82 <__hi0bits+0x32>
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	d400      	bmi.n	8009d82 <__hi0bits+0x32>
 8009d80:	2020      	movs	r0, #32
 8009d82:	4770      	bx	lr

08009d84 <__lo0bits>:
 8009d84:	6803      	ldr	r3, [r0, #0]
 8009d86:	0002      	movs	r2, r0
 8009d88:	2107      	movs	r1, #7
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	4008      	ands	r0, r1
 8009d8e:	420b      	tst	r3, r1
 8009d90:	d00d      	beq.n	8009dae <__lo0bits+0x2a>
 8009d92:	3906      	subs	r1, #6
 8009d94:	2000      	movs	r0, #0
 8009d96:	420b      	tst	r3, r1
 8009d98:	d105      	bne.n	8009da6 <__lo0bits+0x22>
 8009d9a:	3002      	adds	r0, #2
 8009d9c:	4203      	tst	r3, r0
 8009d9e:	d003      	beq.n	8009da8 <__lo0bits+0x24>
 8009da0:	40cb      	lsrs	r3, r1
 8009da2:	0008      	movs	r0, r1
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	4770      	bx	lr
 8009da8:	089b      	lsrs	r3, r3, #2
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	e7fb      	b.n	8009da6 <__lo0bits+0x22>
 8009dae:	b299      	uxth	r1, r3
 8009db0:	2900      	cmp	r1, #0
 8009db2:	d101      	bne.n	8009db8 <__lo0bits+0x34>
 8009db4:	2010      	movs	r0, #16
 8009db6:	0c1b      	lsrs	r3, r3, #16
 8009db8:	b2d9      	uxtb	r1, r3
 8009dba:	2900      	cmp	r1, #0
 8009dbc:	d101      	bne.n	8009dc2 <__lo0bits+0x3e>
 8009dbe:	3008      	adds	r0, #8
 8009dc0:	0a1b      	lsrs	r3, r3, #8
 8009dc2:	0719      	lsls	r1, r3, #28
 8009dc4:	d101      	bne.n	8009dca <__lo0bits+0x46>
 8009dc6:	3004      	adds	r0, #4
 8009dc8:	091b      	lsrs	r3, r3, #4
 8009dca:	0799      	lsls	r1, r3, #30
 8009dcc:	d101      	bne.n	8009dd2 <__lo0bits+0x4e>
 8009dce:	3002      	adds	r0, #2
 8009dd0:	089b      	lsrs	r3, r3, #2
 8009dd2:	07d9      	lsls	r1, r3, #31
 8009dd4:	d4e9      	bmi.n	8009daa <__lo0bits+0x26>
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	085b      	lsrs	r3, r3, #1
 8009dda:	d1e6      	bne.n	8009daa <__lo0bits+0x26>
 8009ddc:	2020      	movs	r0, #32
 8009dde:	e7e2      	b.n	8009da6 <__lo0bits+0x22>

08009de0 <__i2b>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	000c      	movs	r4, r1
 8009de4:	2101      	movs	r1, #1
 8009de6:	f7ff ff07 	bl	8009bf8 <_Balloc>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d106      	bne.n	8009dfc <__i2b+0x1c>
 8009dee:	21a0      	movs	r1, #160	; 0xa0
 8009df0:	0002      	movs	r2, r0
 8009df2:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <__i2b+0x24>)
 8009df4:	4804      	ldr	r0, [pc, #16]	; (8009e08 <__i2b+0x28>)
 8009df6:	0049      	lsls	r1, r1, #1
 8009df8:	f000 fd1c 	bl	800a834 <__assert_func>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	6144      	str	r4, [r0, #20]
 8009e00:	6103      	str	r3, [r0, #16]
 8009e02:	bd10      	pop	{r4, pc}
 8009e04:	0800b70b 	.word	0x0800b70b
 8009e08:	0800b71c 	.word	0x0800b71c

08009e0c <__multiply>:
 8009e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e0e:	690b      	ldr	r3, [r1, #16]
 8009e10:	0014      	movs	r4, r2
 8009e12:	6912      	ldr	r2, [r2, #16]
 8009e14:	000d      	movs	r5, r1
 8009e16:	b089      	sub	sp, #36	; 0x24
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	da01      	bge.n	8009e20 <__multiply+0x14>
 8009e1c:	0025      	movs	r5, r4
 8009e1e:	000c      	movs	r4, r1
 8009e20:	692f      	ldr	r7, [r5, #16]
 8009e22:	6926      	ldr	r6, [r4, #16]
 8009e24:	6869      	ldr	r1, [r5, #4]
 8009e26:	19bb      	adds	r3, r7, r6
 8009e28:	9302      	str	r3, [sp, #8]
 8009e2a:	68ab      	ldr	r3, [r5, #8]
 8009e2c:	19ba      	adds	r2, r7, r6
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	da00      	bge.n	8009e34 <__multiply+0x28>
 8009e32:	3101      	adds	r1, #1
 8009e34:	f7ff fee0 	bl	8009bf8 <_Balloc>
 8009e38:	9001      	str	r0, [sp, #4]
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d106      	bne.n	8009e4c <__multiply+0x40>
 8009e3e:	215e      	movs	r1, #94	; 0x5e
 8009e40:	0002      	movs	r2, r0
 8009e42:	4b48      	ldr	r3, [pc, #288]	; (8009f64 <__multiply+0x158>)
 8009e44:	4848      	ldr	r0, [pc, #288]	; (8009f68 <__multiply+0x15c>)
 8009e46:	31ff      	adds	r1, #255	; 0xff
 8009e48:	f000 fcf4 	bl	800a834 <__assert_func>
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	3314      	adds	r3, #20
 8009e52:	469c      	mov	ip, r3
 8009e54:	19bb      	adds	r3, r7, r6
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4463      	add	r3, ip
 8009e5a:	9303      	str	r3, [sp, #12]
 8009e5c:	4663      	mov	r3, ip
 8009e5e:	9903      	ldr	r1, [sp, #12]
 8009e60:	428b      	cmp	r3, r1
 8009e62:	d32c      	bcc.n	8009ebe <__multiply+0xb2>
 8009e64:	002b      	movs	r3, r5
 8009e66:	0022      	movs	r2, r4
 8009e68:	3314      	adds	r3, #20
 8009e6a:	00bf      	lsls	r7, r7, #2
 8009e6c:	3214      	adds	r2, #20
 8009e6e:	9306      	str	r3, [sp, #24]
 8009e70:	00b6      	lsls	r6, r6, #2
 8009e72:	19db      	adds	r3, r3, r7
 8009e74:	9304      	str	r3, [sp, #16]
 8009e76:	1993      	adds	r3, r2, r6
 8009e78:	9307      	str	r3, [sp, #28]
 8009e7a:	2304      	movs	r3, #4
 8009e7c:	9305      	str	r3, [sp, #20]
 8009e7e:	002b      	movs	r3, r5
 8009e80:	9904      	ldr	r1, [sp, #16]
 8009e82:	3315      	adds	r3, #21
 8009e84:	9200      	str	r2, [sp, #0]
 8009e86:	4299      	cmp	r1, r3
 8009e88:	d305      	bcc.n	8009e96 <__multiply+0x8a>
 8009e8a:	1b4b      	subs	r3, r1, r5
 8009e8c:	3b15      	subs	r3, #21
 8009e8e:	089b      	lsrs	r3, r3, #2
 8009e90:	3301      	adds	r3, #1
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	9305      	str	r3, [sp, #20]
 8009e96:	9b07      	ldr	r3, [sp, #28]
 8009e98:	9a00      	ldr	r2, [sp, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d311      	bcc.n	8009ec2 <__multiply+0xb6>
 8009e9e:	9b02      	ldr	r3, [sp, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	dd06      	ble.n	8009eb2 <__multiply+0xa6>
 8009ea4:	9b03      	ldr	r3, [sp, #12]
 8009ea6:	3b04      	subs	r3, #4
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d053      	beq.n	8009f5a <__multiply+0x14e>
 8009eb2:	9b01      	ldr	r3, [sp, #4]
 8009eb4:	9a02      	ldr	r2, [sp, #8]
 8009eb6:	0018      	movs	r0, r3
 8009eb8:	611a      	str	r2, [r3, #16]
 8009eba:	b009      	add	sp, #36	; 0x24
 8009ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ebe:	c304      	stmia	r3!, {r2}
 8009ec0:	e7cd      	b.n	8009e5e <__multiply+0x52>
 8009ec2:	9b00      	ldr	r3, [sp, #0]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	b298      	uxth	r0, r3
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d01b      	beq.n	8009f04 <__multiply+0xf8>
 8009ecc:	4667      	mov	r7, ip
 8009ece:	2400      	movs	r4, #0
 8009ed0:	9e06      	ldr	r6, [sp, #24]
 8009ed2:	ce02      	ldmia	r6!, {r1}
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	b28b      	uxth	r3, r1
 8009ed8:	4343      	muls	r3, r0
 8009eda:	b292      	uxth	r2, r2
 8009edc:	189b      	adds	r3, r3, r2
 8009ede:	191b      	adds	r3, r3, r4
 8009ee0:	0c0c      	lsrs	r4, r1, #16
 8009ee2:	4344      	muls	r4, r0
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	0c11      	lsrs	r1, r2, #16
 8009ee8:	1861      	adds	r1, r4, r1
 8009eea:	0c1c      	lsrs	r4, r3, #16
 8009eec:	1909      	adds	r1, r1, r4
 8009eee:	0c0c      	lsrs	r4, r1, #16
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	0409      	lsls	r1, r1, #16
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	c708      	stmia	r7!, {r3}
 8009ef8:	9b04      	ldr	r3, [sp, #16]
 8009efa:	42b3      	cmp	r3, r6
 8009efc:	d8e9      	bhi.n	8009ed2 <__multiply+0xc6>
 8009efe:	4663      	mov	r3, ip
 8009f00:	9a05      	ldr	r2, [sp, #20]
 8009f02:	509c      	str	r4, [r3, r2]
 8009f04:	9b00      	ldr	r3, [sp, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	0c1e      	lsrs	r6, r3, #16
 8009f0a:	d020      	beq.n	8009f4e <__multiply+0x142>
 8009f0c:	4663      	mov	r3, ip
 8009f0e:	002c      	movs	r4, r5
 8009f10:	4660      	mov	r0, ip
 8009f12:	2700      	movs	r7, #0
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3414      	adds	r4, #20
 8009f18:	6822      	ldr	r2, [r4, #0]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	b291      	uxth	r1, r2
 8009f1e:	4371      	muls	r1, r6
 8009f20:	6802      	ldr	r2, [r0, #0]
 8009f22:	0c12      	lsrs	r2, r2, #16
 8009f24:	1889      	adds	r1, r1, r2
 8009f26:	19cf      	adds	r7, r1, r7
 8009f28:	0439      	lsls	r1, r7, #16
 8009f2a:	430b      	orrs	r3, r1
 8009f2c:	6003      	str	r3, [r0, #0]
 8009f2e:	cc02      	ldmia	r4!, {r1}
 8009f30:	6843      	ldr	r3, [r0, #4]
 8009f32:	0c09      	lsrs	r1, r1, #16
 8009f34:	4371      	muls	r1, r6
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	0c3f      	lsrs	r7, r7, #16
 8009f3a:	18cb      	adds	r3, r1, r3
 8009f3c:	9a04      	ldr	r2, [sp, #16]
 8009f3e:	19db      	adds	r3, r3, r7
 8009f40:	0c1f      	lsrs	r7, r3, #16
 8009f42:	3004      	adds	r0, #4
 8009f44:	42a2      	cmp	r2, r4
 8009f46:	d8e7      	bhi.n	8009f18 <__multiply+0x10c>
 8009f48:	4662      	mov	r2, ip
 8009f4a:	9905      	ldr	r1, [sp, #20]
 8009f4c:	5053      	str	r3, [r2, r1]
 8009f4e:	9b00      	ldr	r3, [sp, #0]
 8009f50:	3304      	adds	r3, #4
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	2304      	movs	r3, #4
 8009f56:	449c      	add	ip, r3
 8009f58:	e79d      	b.n	8009e96 <__multiply+0x8a>
 8009f5a:	9b02      	ldr	r3, [sp, #8]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	9302      	str	r3, [sp, #8]
 8009f60:	e79d      	b.n	8009e9e <__multiply+0x92>
 8009f62:	46c0      	nop			; (mov r8, r8)
 8009f64:	0800b70b 	.word	0x0800b70b
 8009f68:	0800b71c 	.word	0x0800b71c

08009f6c <__pow5mult>:
 8009f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f6e:	2303      	movs	r3, #3
 8009f70:	0015      	movs	r5, r2
 8009f72:	0007      	movs	r7, r0
 8009f74:	000e      	movs	r6, r1
 8009f76:	401a      	ands	r2, r3
 8009f78:	421d      	tst	r5, r3
 8009f7a:	d008      	beq.n	8009f8e <__pow5mult+0x22>
 8009f7c:	4925      	ldr	r1, [pc, #148]	; (800a014 <__pow5mult+0xa8>)
 8009f7e:	3a01      	subs	r2, #1
 8009f80:	0092      	lsls	r2, r2, #2
 8009f82:	5852      	ldr	r2, [r2, r1]
 8009f84:	2300      	movs	r3, #0
 8009f86:	0031      	movs	r1, r6
 8009f88:	f7ff fe9e 	bl	8009cc8 <__multadd>
 8009f8c:	0006      	movs	r6, r0
 8009f8e:	10ad      	asrs	r5, r5, #2
 8009f90:	d03d      	beq.n	800a00e <__pow5mult+0xa2>
 8009f92:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009f94:	2c00      	cmp	r4, #0
 8009f96:	d10f      	bne.n	8009fb8 <__pow5mult+0x4c>
 8009f98:	2010      	movs	r0, #16
 8009f9a:	f7ff fe0f 	bl	8009bbc <malloc>
 8009f9e:	1e02      	subs	r2, r0, #0
 8009fa0:	6278      	str	r0, [r7, #36]	; 0x24
 8009fa2:	d105      	bne.n	8009fb0 <__pow5mult+0x44>
 8009fa4:	21d7      	movs	r1, #215	; 0xd7
 8009fa6:	4b1c      	ldr	r3, [pc, #112]	; (800a018 <__pow5mult+0xac>)
 8009fa8:	481c      	ldr	r0, [pc, #112]	; (800a01c <__pow5mult+0xb0>)
 8009faa:	0049      	lsls	r1, r1, #1
 8009fac:	f000 fc42 	bl	800a834 <__assert_func>
 8009fb0:	6044      	str	r4, [r0, #4]
 8009fb2:	6084      	str	r4, [r0, #8]
 8009fb4:	6004      	str	r4, [r0, #0]
 8009fb6:	60c4      	str	r4, [r0, #12]
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	689c      	ldr	r4, [r3, #8]
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	2c00      	cmp	r4, #0
 8009fc0:	d108      	bne.n	8009fd4 <__pow5mult+0x68>
 8009fc2:	0038      	movs	r0, r7
 8009fc4:	4916      	ldr	r1, [pc, #88]	; (800a020 <__pow5mult+0xb4>)
 8009fc6:	f7ff ff0b 	bl	8009de0 <__i2b>
 8009fca:	9b01      	ldr	r3, [sp, #4]
 8009fcc:	0004      	movs	r4, r0
 8009fce:	6098      	str	r0, [r3, #8]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	6003      	str	r3, [r0, #0]
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	421d      	tst	r5, r3
 8009fd8:	d00a      	beq.n	8009ff0 <__pow5mult+0x84>
 8009fda:	0031      	movs	r1, r6
 8009fdc:	0022      	movs	r2, r4
 8009fde:	0038      	movs	r0, r7
 8009fe0:	f7ff ff14 	bl	8009e0c <__multiply>
 8009fe4:	0031      	movs	r1, r6
 8009fe6:	9001      	str	r0, [sp, #4]
 8009fe8:	0038      	movs	r0, r7
 8009fea:	f7ff fe49 	bl	8009c80 <_Bfree>
 8009fee:	9e01      	ldr	r6, [sp, #4]
 8009ff0:	106d      	asrs	r5, r5, #1
 8009ff2:	d00c      	beq.n	800a00e <__pow5mult+0xa2>
 8009ff4:	6820      	ldr	r0, [r4, #0]
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d107      	bne.n	800a00a <__pow5mult+0x9e>
 8009ffa:	0022      	movs	r2, r4
 8009ffc:	0021      	movs	r1, r4
 8009ffe:	0038      	movs	r0, r7
 800a000:	f7ff ff04 	bl	8009e0c <__multiply>
 800a004:	2300      	movs	r3, #0
 800a006:	6020      	str	r0, [r4, #0]
 800a008:	6003      	str	r3, [r0, #0]
 800a00a:	0004      	movs	r4, r0
 800a00c:	e7e2      	b.n	8009fd4 <__pow5mult+0x68>
 800a00e:	0030      	movs	r0, r6
 800a010:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a012:	46c0      	nop			; (mov r8, r8)
 800a014:	0800b868 	.word	0x0800b868
 800a018:	0800b699 	.word	0x0800b699
 800a01c:	0800b71c 	.word	0x0800b71c
 800a020:	00000271 	.word	0x00000271

0800a024 <__lshift>:
 800a024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a026:	000c      	movs	r4, r1
 800a028:	0017      	movs	r7, r2
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	1155      	asrs	r5, r2, #5
 800a02e:	b087      	sub	sp, #28
 800a030:	18eb      	adds	r3, r5, r3
 800a032:	9302      	str	r3, [sp, #8]
 800a034:	3301      	adds	r3, #1
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	6849      	ldr	r1, [r1, #4]
 800a03a:	68a3      	ldr	r3, [r4, #8]
 800a03c:	9004      	str	r0, [sp, #16]
 800a03e:	9a01      	ldr	r2, [sp, #4]
 800a040:	4293      	cmp	r3, r2
 800a042:	db10      	blt.n	800a066 <__lshift+0x42>
 800a044:	9804      	ldr	r0, [sp, #16]
 800a046:	f7ff fdd7 	bl	8009bf8 <_Balloc>
 800a04a:	2300      	movs	r3, #0
 800a04c:	0002      	movs	r2, r0
 800a04e:	0006      	movs	r6, r0
 800a050:	0019      	movs	r1, r3
 800a052:	3214      	adds	r2, #20
 800a054:	4298      	cmp	r0, r3
 800a056:	d10c      	bne.n	800a072 <__lshift+0x4e>
 800a058:	21da      	movs	r1, #218	; 0xda
 800a05a:	0002      	movs	r2, r0
 800a05c:	4b26      	ldr	r3, [pc, #152]	; (800a0f8 <__lshift+0xd4>)
 800a05e:	4827      	ldr	r0, [pc, #156]	; (800a0fc <__lshift+0xd8>)
 800a060:	31ff      	adds	r1, #255	; 0xff
 800a062:	f000 fbe7 	bl	800a834 <__assert_func>
 800a066:	3101      	adds	r1, #1
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	e7e8      	b.n	800a03e <__lshift+0x1a>
 800a06c:	0098      	lsls	r0, r3, #2
 800a06e:	5011      	str	r1, [r2, r0]
 800a070:	3301      	adds	r3, #1
 800a072:	42ab      	cmp	r3, r5
 800a074:	dbfa      	blt.n	800a06c <__lshift+0x48>
 800a076:	43eb      	mvns	r3, r5
 800a078:	17db      	asrs	r3, r3, #31
 800a07a:	401d      	ands	r5, r3
 800a07c:	211f      	movs	r1, #31
 800a07e:	0023      	movs	r3, r4
 800a080:	0038      	movs	r0, r7
 800a082:	00ad      	lsls	r5, r5, #2
 800a084:	1955      	adds	r5, r2, r5
 800a086:	6922      	ldr	r2, [r4, #16]
 800a088:	3314      	adds	r3, #20
 800a08a:	0092      	lsls	r2, r2, #2
 800a08c:	4008      	ands	r0, r1
 800a08e:	4684      	mov	ip, r0
 800a090:	189a      	adds	r2, r3, r2
 800a092:	420f      	tst	r7, r1
 800a094:	d02a      	beq.n	800a0ec <__lshift+0xc8>
 800a096:	3101      	adds	r1, #1
 800a098:	1a09      	subs	r1, r1, r0
 800a09a:	9105      	str	r1, [sp, #20]
 800a09c:	2100      	movs	r1, #0
 800a09e:	9503      	str	r5, [sp, #12]
 800a0a0:	4667      	mov	r7, ip
 800a0a2:	6818      	ldr	r0, [r3, #0]
 800a0a4:	40b8      	lsls	r0, r7
 800a0a6:	4301      	orrs	r1, r0
 800a0a8:	9803      	ldr	r0, [sp, #12]
 800a0aa:	c002      	stmia	r0!, {r1}
 800a0ac:	cb02      	ldmia	r3!, {r1}
 800a0ae:	9003      	str	r0, [sp, #12]
 800a0b0:	9805      	ldr	r0, [sp, #20]
 800a0b2:	40c1      	lsrs	r1, r0
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d8f3      	bhi.n	800a0a0 <__lshift+0x7c>
 800a0b8:	0020      	movs	r0, r4
 800a0ba:	3015      	adds	r0, #21
 800a0bc:	2304      	movs	r3, #4
 800a0be:	4282      	cmp	r2, r0
 800a0c0:	d304      	bcc.n	800a0cc <__lshift+0xa8>
 800a0c2:	1b13      	subs	r3, r2, r4
 800a0c4:	3b15      	subs	r3, #21
 800a0c6:	089b      	lsrs	r3, r3, #2
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	50e9      	str	r1, [r5, r3]
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	d002      	beq.n	800a0d8 <__lshift+0xb4>
 800a0d2:	9b02      	ldr	r3, [sp, #8]
 800a0d4:	3302      	adds	r3, #2
 800a0d6:	9301      	str	r3, [sp, #4]
 800a0d8:	9b01      	ldr	r3, [sp, #4]
 800a0da:	9804      	ldr	r0, [sp, #16]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	0021      	movs	r1, r4
 800a0e0:	6133      	str	r3, [r6, #16]
 800a0e2:	f7ff fdcd 	bl	8009c80 <_Bfree>
 800a0e6:	0030      	movs	r0, r6
 800a0e8:	b007      	add	sp, #28
 800a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ec:	cb02      	ldmia	r3!, {r1}
 800a0ee:	c502      	stmia	r5!, {r1}
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d8fb      	bhi.n	800a0ec <__lshift+0xc8>
 800a0f4:	e7f0      	b.n	800a0d8 <__lshift+0xb4>
 800a0f6:	46c0      	nop			; (mov r8, r8)
 800a0f8:	0800b70b 	.word	0x0800b70b
 800a0fc:	0800b71c 	.word	0x0800b71c

0800a100 <__mcmp>:
 800a100:	6902      	ldr	r2, [r0, #16]
 800a102:	690b      	ldr	r3, [r1, #16]
 800a104:	b530      	push	{r4, r5, lr}
 800a106:	0004      	movs	r4, r0
 800a108:	1ad0      	subs	r0, r2, r3
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d10d      	bne.n	800a12a <__mcmp+0x2a>
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	3414      	adds	r4, #20
 800a112:	3114      	adds	r1, #20
 800a114:	18e2      	adds	r2, r4, r3
 800a116:	18c9      	adds	r1, r1, r3
 800a118:	3a04      	subs	r2, #4
 800a11a:	3904      	subs	r1, #4
 800a11c:	6815      	ldr	r5, [r2, #0]
 800a11e:	680b      	ldr	r3, [r1, #0]
 800a120:	429d      	cmp	r5, r3
 800a122:	d003      	beq.n	800a12c <__mcmp+0x2c>
 800a124:	2001      	movs	r0, #1
 800a126:	429d      	cmp	r5, r3
 800a128:	d303      	bcc.n	800a132 <__mcmp+0x32>
 800a12a:	bd30      	pop	{r4, r5, pc}
 800a12c:	4294      	cmp	r4, r2
 800a12e:	d3f3      	bcc.n	800a118 <__mcmp+0x18>
 800a130:	e7fb      	b.n	800a12a <__mcmp+0x2a>
 800a132:	4240      	negs	r0, r0
 800a134:	e7f9      	b.n	800a12a <__mcmp+0x2a>
	...

0800a138 <__mdiff>:
 800a138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a13a:	000e      	movs	r6, r1
 800a13c:	0007      	movs	r7, r0
 800a13e:	0011      	movs	r1, r2
 800a140:	0030      	movs	r0, r6
 800a142:	b087      	sub	sp, #28
 800a144:	0014      	movs	r4, r2
 800a146:	f7ff ffdb 	bl	800a100 <__mcmp>
 800a14a:	1e05      	subs	r5, r0, #0
 800a14c:	d110      	bne.n	800a170 <__mdiff+0x38>
 800a14e:	0001      	movs	r1, r0
 800a150:	0038      	movs	r0, r7
 800a152:	f7ff fd51 	bl	8009bf8 <_Balloc>
 800a156:	1e02      	subs	r2, r0, #0
 800a158:	d104      	bne.n	800a164 <__mdiff+0x2c>
 800a15a:	4b40      	ldr	r3, [pc, #256]	; (800a25c <__mdiff+0x124>)
 800a15c:	4940      	ldr	r1, [pc, #256]	; (800a260 <__mdiff+0x128>)
 800a15e:	4841      	ldr	r0, [pc, #260]	; (800a264 <__mdiff+0x12c>)
 800a160:	f000 fb68 	bl	800a834 <__assert_func>
 800a164:	2301      	movs	r3, #1
 800a166:	6145      	str	r5, [r0, #20]
 800a168:	6103      	str	r3, [r0, #16]
 800a16a:	0010      	movs	r0, r2
 800a16c:	b007      	add	sp, #28
 800a16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a170:	2301      	movs	r3, #1
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	2800      	cmp	r0, #0
 800a176:	db04      	blt.n	800a182 <__mdiff+0x4a>
 800a178:	0023      	movs	r3, r4
 800a17a:	0034      	movs	r4, r6
 800a17c:	001e      	movs	r6, r3
 800a17e:	2300      	movs	r3, #0
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	0038      	movs	r0, r7
 800a184:	6861      	ldr	r1, [r4, #4]
 800a186:	f7ff fd37 	bl	8009bf8 <_Balloc>
 800a18a:	1e02      	subs	r2, r0, #0
 800a18c:	d103      	bne.n	800a196 <__mdiff+0x5e>
 800a18e:	2190      	movs	r1, #144	; 0x90
 800a190:	4b32      	ldr	r3, [pc, #200]	; (800a25c <__mdiff+0x124>)
 800a192:	0089      	lsls	r1, r1, #2
 800a194:	e7e3      	b.n	800a15e <__mdiff+0x26>
 800a196:	9b01      	ldr	r3, [sp, #4]
 800a198:	2700      	movs	r7, #0
 800a19a:	60c3      	str	r3, [r0, #12]
 800a19c:	6920      	ldr	r0, [r4, #16]
 800a19e:	3414      	adds	r4, #20
 800a1a0:	9401      	str	r4, [sp, #4]
 800a1a2:	9b01      	ldr	r3, [sp, #4]
 800a1a4:	0084      	lsls	r4, r0, #2
 800a1a6:	191b      	adds	r3, r3, r4
 800a1a8:	0034      	movs	r4, r6
 800a1aa:	9302      	str	r3, [sp, #8]
 800a1ac:	6933      	ldr	r3, [r6, #16]
 800a1ae:	3414      	adds	r4, #20
 800a1b0:	0099      	lsls	r1, r3, #2
 800a1b2:	1863      	adds	r3, r4, r1
 800a1b4:	9303      	str	r3, [sp, #12]
 800a1b6:	0013      	movs	r3, r2
 800a1b8:	3314      	adds	r3, #20
 800a1ba:	469c      	mov	ip, r3
 800a1bc:	9305      	str	r3, [sp, #20]
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	9b04      	ldr	r3, [sp, #16]
 800a1c4:	cc02      	ldmia	r4!, {r1}
 800a1c6:	cb20      	ldmia	r3!, {r5}
 800a1c8:	9304      	str	r3, [sp, #16]
 800a1ca:	b2ab      	uxth	r3, r5
 800a1cc:	19df      	adds	r7, r3, r7
 800a1ce:	b28b      	uxth	r3, r1
 800a1d0:	1afb      	subs	r3, r7, r3
 800a1d2:	0c09      	lsrs	r1, r1, #16
 800a1d4:	0c2d      	lsrs	r5, r5, #16
 800a1d6:	1a6d      	subs	r5, r5, r1
 800a1d8:	1419      	asrs	r1, r3, #16
 800a1da:	186d      	adds	r5, r5, r1
 800a1dc:	4661      	mov	r1, ip
 800a1de:	142f      	asrs	r7, r5, #16
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	042d      	lsls	r5, r5, #16
 800a1e4:	432b      	orrs	r3, r5
 800a1e6:	c108      	stmia	r1!, {r3}
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	468c      	mov	ip, r1
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	d8e8      	bhi.n	800a1c2 <__mdiff+0x8a>
 800a1f0:	0031      	movs	r1, r6
 800a1f2:	9c03      	ldr	r4, [sp, #12]
 800a1f4:	3115      	adds	r1, #21
 800a1f6:	2304      	movs	r3, #4
 800a1f8:	428c      	cmp	r4, r1
 800a1fa:	d304      	bcc.n	800a206 <__mdiff+0xce>
 800a1fc:	1ba3      	subs	r3, r4, r6
 800a1fe:	3b15      	subs	r3, #21
 800a200:	089b      	lsrs	r3, r3, #2
 800a202:	3301      	adds	r3, #1
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	9901      	ldr	r1, [sp, #4]
 800a208:	18cc      	adds	r4, r1, r3
 800a20a:	9905      	ldr	r1, [sp, #20]
 800a20c:	0026      	movs	r6, r4
 800a20e:	18cb      	adds	r3, r1, r3
 800a210:	469c      	mov	ip, r3
 800a212:	9902      	ldr	r1, [sp, #8]
 800a214:	428e      	cmp	r6, r1
 800a216:	d310      	bcc.n	800a23a <__mdiff+0x102>
 800a218:	9e02      	ldr	r6, [sp, #8]
 800a21a:	1ee1      	subs	r1, r4, #3
 800a21c:	2500      	movs	r5, #0
 800a21e:	428e      	cmp	r6, r1
 800a220:	d304      	bcc.n	800a22c <__mdiff+0xf4>
 800a222:	0031      	movs	r1, r6
 800a224:	3103      	adds	r1, #3
 800a226:	1b0c      	subs	r4, r1, r4
 800a228:	08a4      	lsrs	r4, r4, #2
 800a22a:	00a5      	lsls	r5, r4, #2
 800a22c:	195b      	adds	r3, r3, r5
 800a22e:	3b04      	subs	r3, #4
 800a230:	6819      	ldr	r1, [r3, #0]
 800a232:	2900      	cmp	r1, #0
 800a234:	d00f      	beq.n	800a256 <__mdiff+0x11e>
 800a236:	6110      	str	r0, [r2, #16]
 800a238:	e797      	b.n	800a16a <__mdiff+0x32>
 800a23a:	ce02      	ldmia	r6!, {r1}
 800a23c:	b28d      	uxth	r5, r1
 800a23e:	19ed      	adds	r5, r5, r7
 800a240:	0c0f      	lsrs	r7, r1, #16
 800a242:	1429      	asrs	r1, r5, #16
 800a244:	1879      	adds	r1, r7, r1
 800a246:	140f      	asrs	r7, r1, #16
 800a248:	b2ad      	uxth	r5, r5
 800a24a:	0409      	lsls	r1, r1, #16
 800a24c:	430d      	orrs	r5, r1
 800a24e:	4661      	mov	r1, ip
 800a250:	c120      	stmia	r1!, {r5}
 800a252:	468c      	mov	ip, r1
 800a254:	e7dd      	b.n	800a212 <__mdiff+0xda>
 800a256:	3801      	subs	r0, #1
 800a258:	e7e9      	b.n	800a22e <__mdiff+0xf6>
 800a25a:	46c0      	nop			; (mov r8, r8)
 800a25c:	0800b70b 	.word	0x0800b70b
 800a260:	00000232 	.word	0x00000232
 800a264:	0800b71c 	.word	0x0800b71c

0800a268 <__d2b>:
 800a268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a26a:	2101      	movs	r1, #1
 800a26c:	0014      	movs	r4, r2
 800a26e:	001e      	movs	r6, r3
 800a270:	9f08      	ldr	r7, [sp, #32]
 800a272:	f7ff fcc1 	bl	8009bf8 <_Balloc>
 800a276:	1e05      	subs	r5, r0, #0
 800a278:	d105      	bne.n	800a286 <__d2b+0x1e>
 800a27a:	0002      	movs	r2, r0
 800a27c:	4b26      	ldr	r3, [pc, #152]	; (800a318 <__d2b+0xb0>)
 800a27e:	4927      	ldr	r1, [pc, #156]	; (800a31c <__d2b+0xb4>)
 800a280:	4827      	ldr	r0, [pc, #156]	; (800a320 <__d2b+0xb8>)
 800a282:	f000 fad7 	bl	800a834 <__assert_func>
 800a286:	0333      	lsls	r3, r6, #12
 800a288:	0076      	lsls	r6, r6, #1
 800a28a:	0b1b      	lsrs	r3, r3, #12
 800a28c:	0d76      	lsrs	r6, r6, #21
 800a28e:	d124      	bne.n	800a2da <__d2b+0x72>
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	2c00      	cmp	r4, #0
 800a294:	d027      	beq.n	800a2e6 <__d2b+0x7e>
 800a296:	4668      	mov	r0, sp
 800a298:	9400      	str	r4, [sp, #0]
 800a29a:	f7ff fd73 	bl	8009d84 <__lo0bits>
 800a29e:	9c00      	ldr	r4, [sp, #0]
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d01e      	beq.n	800a2e2 <__d2b+0x7a>
 800a2a4:	9b01      	ldr	r3, [sp, #4]
 800a2a6:	2120      	movs	r1, #32
 800a2a8:	001a      	movs	r2, r3
 800a2aa:	1a09      	subs	r1, r1, r0
 800a2ac:	408a      	lsls	r2, r1
 800a2ae:	40c3      	lsrs	r3, r0
 800a2b0:	4322      	orrs	r2, r4
 800a2b2:	616a      	str	r2, [r5, #20]
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	9c01      	ldr	r4, [sp, #4]
 800a2b8:	61ac      	str	r4, [r5, #24]
 800a2ba:	1e63      	subs	r3, r4, #1
 800a2bc:	419c      	sbcs	r4, r3
 800a2be:	3401      	adds	r4, #1
 800a2c0:	612c      	str	r4, [r5, #16]
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d018      	beq.n	800a2f8 <__d2b+0x90>
 800a2c6:	4b17      	ldr	r3, [pc, #92]	; (800a324 <__d2b+0xbc>)
 800a2c8:	18f6      	adds	r6, r6, r3
 800a2ca:	2335      	movs	r3, #53	; 0x35
 800a2cc:	1836      	adds	r6, r6, r0
 800a2ce:	1a18      	subs	r0, r3, r0
 800a2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d2:	603e      	str	r6, [r7, #0]
 800a2d4:	6018      	str	r0, [r3, #0]
 800a2d6:	0028      	movs	r0, r5
 800a2d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2da:	2280      	movs	r2, #128	; 0x80
 800a2dc:	0352      	lsls	r2, r2, #13
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	e7d6      	b.n	800a290 <__d2b+0x28>
 800a2e2:	616c      	str	r4, [r5, #20]
 800a2e4:	e7e7      	b.n	800a2b6 <__d2b+0x4e>
 800a2e6:	a801      	add	r0, sp, #4
 800a2e8:	f7ff fd4c 	bl	8009d84 <__lo0bits>
 800a2ec:	2401      	movs	r4, #1
 800a2ee:	9b01      	ldr	r3, [sp, #4]
 800a2f0:	612c      	str	r4, [r5, #16]
 800a2f2:	616b      	str	r3, [r5, #20]
 800a2f4:	3020      	adds	r0, #32
 800a2f6:	e7e4      	b.n	800a2c2 <__d2b+0x5a>
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <__d2b+0xc0>)
 800a2fa:	18c0      	adds	r0, r0, r3
 800a2fc:	4b0b      	ldr	r3, [pc, #44]	; (800a32c <__d2b+0xc4>)
 800a2fe:	6038      	str	r0, [r7, #0]
 800a300:	18e3      	adds	r3, r4, r3
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	18eb      	adds	r3, r5, r3
 800a306:	6958      	ldr	r0, [r3, #20]
 800a308:	f7ff fd22 	bl	8009d50 <__hi0bits>
 800a30c:	0164      	lsls	r4, r4, #5
 800a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a310:	1a24      	subs	r4, r4, r0
 800a312:	601c      	str	r4, [r3, #0]
 800a314:	e7df      	b.n	800a2d6 <__d2b+0x6e>
 800a316:	46c0      	nop			; (mov r8, r8)
 800a318:	0800b70b 	.word	0x0800b70b
 800a31c:	0000030a 	.word	0x0000030a
 800a320:	0800b71c 	.word	0x0800b71c
 800a324:	fffffbcd 	.word	0xfffffbcd
 800a328:	fffffbce 	.word	0xfffffbce
 800a32c:	3fffffff 	.word	0x3fffffff

0800a330 <_calloc_r>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	0c13      	lsrs	r3, r2, #16
 800a334:	0c0d      	lsrs	r5, r1, #16
 800a336:	d11e      	bne.n	800a376 <_calloc_r+0x46>
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10c      	bne.n	800a356 <_calloc_r+0x26>
 800a33c:	b289      	uxth	r1, r1
 800a33e:	b294      	uxth	r4, r2
 800a340:	434c      	muls	r4, r1
 800a342:	0021      	movs	r1, r4
 800a344:	f000 f88c 	bl	800a460 <_malloc_r>
 800a348:	1e05      	subs	r5, r0, #0
 800a34a:	d01b      	beq.n	800a384 <_calloc_r+0x54>
 800a34c:	0022      	movs	r2, r4
 800a34e:	2100      	movs	r1, #0
 800a350:	f7fe f8f4 	bl	800853c <memset>
 800a354:	e016      	b.n	800a384 <_calloc_r+0x54>
 800a356:	1c1d      	adds	r5, r3, #0
 800a358:	1c0b      	adds	r3, r1, #0
 800a35a:	b292      	uxth	r2, r2
 800a35c:	b289      	uxth	r1, r1
 800a35e:	b29c      	uxth	r4, r3
 800a360:	4351      	muls	r1, r2
 800a362:	b2ab      	uxth	r3, r5
 800a364:	4363      	muls	r3, r4
 800a366:	0c0c      	lsrs	r4, r1, #16
 800a368:	191c      	adds	r4, r3, r4
 800a36a:	0c22      	lsrs	r2, r4, #16
 800a36c:	d107      	bne.n	800a37e <_calloc_r+0x4e>
 800a36e:	0424      	lsls	r4, r4, #16
 800a370:	b289      	uxth	r1, r1
 800a372:	430c      	orrs	r4, r1
 800a374:	e7e5      	b.n	800a342 <_calloc_r+0x12>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <_calloc_r+0x4e>
 800a37a:	1c13      	adds	r3, r2, #0
 800a37c:	e7ed      	b.n	800a35a <_calloc_r+0x2a>
 800a37e:	230c      	movs	r3, #12
 800a380:	2500      	movs	r5, #0
 800a382:	6003      	str	r3, [r0, #0]
 800a384:	0028      	movs	r0, r5
 800a386:	bd70      	pop	{r4, r5, r6, pc}

0800a388 <_free_r>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	0005      	movs	r5, r0
 800a38c:	2900      	cmp	r1, #0
 800a38e:	d010      	beq.n	800a3b2 <_free_r+0x2a>
 800a390:	1f0c      	subs	r4, r1, #4
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	da00      	bge.n	800a39a <_free_r+0x12>
 800a398:	18e4      	adds	r4, r4, r3
 800a39a:	0028      	movs	r0, r5
 800a39c:	f000 fa9e 	bl	800a8dc <__malloc_lock>
 800a3a0:	4a1d      	ldr	r2, [pc, #116]	; (800a418 <_free_r+0x90>)
 800a3a2:	6813      	ldr	r3, [r2, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d105      	bne.n	800a3b4 <_free_r+0x2c>
 800a3a8:	6063      	str	r3, [r4, #4]
 800a3aa:	6014      	str	r4, [r2, #0]
 800a3ac:	0028      	movs	r0, r5
 800a3ae:	f000 fa9d 	bl	800a8ec <__malloc_unlock>
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	42a3      	cmp	r3, r4
 800a3b6:	d908      	bls.n	800a3ca <_free_r+0x42>
 800a3b8:	6821      	ldr	r1, [r4, #0]
 800a3ba:	1860      	adds	r0, r4, r1
 800a3bc:	4283      	cmp	r3, r0
 800a3be:	d1f3      	bne.n	800a3a8 <_free_r+0x20>
 800a3c0:	6818      	ldr	r0, [r3, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	1841      	adds	r1, r0, r1
 800a3c6:	6021      	str	r1, [r4, #0]
 800a3c8:	e7ee      	b.n	800a3a8 <_free_r+0x20>
 800a3ca:	001a      	movs	r2, r3
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <_free_r+0x4e>
 800a3d2:	42a3      	cmp	r3, r4
 800a3d4:	d9f9      	bls.n	800a3ca <_free_r+0x42>
 800a3d6:	6811      	ldr	r1, [r2, #0]
 800a3d8:	1850      	adds	r0, r2, r1
 800a3da:	42a0      	cmp	r0, r4
 800a3dc:	d10b      	bne.n	800a3f6 <_free_r+0x6e>
 800a3de:	6820      	ldr	r0, [r4, #0]
 800a3e0:	1809      	adds	r1, r1, r0
 800a3e2:	1850      	adds	r0, r2, r1
 800a3e4:	6011      	str	r1, [r2, #0]
 800a3e6:	4283      	cmp	r3, r0
 800a3e8:	d1e0      	bne.n	800a3ac <_free_r+0x24>
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	1841      	adds	r1, r0, r1
 800a3f0:	6011      	str	r1, [r2, #0]
 800a3f2:	6053      	str	r3, [r2, #4]
 800a3f4:	e7da      	b.n	800a3ac <_free_r+0x24>
 800a3f6:	42a0      	cmp	r0, r4
 800a3f8:	d902      	bls.n	800a400 <_free_r+0x78>
 800a3fa:	230c      	movs	r3, #12
 800a3fc:	602b      	str	r3, [r5, #0]
 800a3fe:	e7d5      	b.n	800a3ac <_free_r+0x24>
 800a400:	6821      	ldr	r1, [r4, #0]
 800a402:	1860      	adds	r0, r4, r1
 800a404:	4283      	cmp	r3, r0
 800a406:	d103      	bne.n	800a410 <_free_r+0x88>
 800a408:	6818      	ldr	r0, [r3, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	1841      	adds	r1, r0, r1
 800a40e:	6021      	str	r1, [r4, #0]
 800a410:	6063      	str	r3, [r4, #4]
 800a412:	6054      	str	r4, [r2, #4]
 800a414:	e7ca      	b.n	800a3ac <_free_r+0x24>
 800a416:	46c0      	nop			; (mov r8, r8)
 800a418:	200003b8 	.word	0x200003b8

0800a41c <sbrk_aligned>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	4e0f      	ldr	r6, [pc, #60]	; (800a45c <sbrk_aligned+0x40>)
 800a420:	000d      	movs	r5, r1
 800a422:	6831      	ldr	r1, [r6, #0]
 800a424:	0004      	movs	r4, r0
 800a426:	2900      	cmp	r1, #0
 800a428:	d102      	bne.n	800a430 <sbrk_aligned+0x14>
 800a42a:	f000 f9f1 	bl	800a810 <_sbrk_r>
 800a42e:	6030      	str	r0, [r6, #0]
 800a430:	0029      	movs	r1, r5
 800a432:	0020      	movs	r0, r4
 800a434:	f000 f9ec 	bl	800a810 <_sbrk_r>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d00a      	beq.n	800a452 <sbrk_aligned+0x36>
 800a43c:	2303      	movs	r3, #3
 800a43e:	1cc5      	adds	r5, r0, #3
 800a440:	439d      	bics	r5, r3
 800a442:	42a8      	cmp	r0, r5
 800a444:	d007      	beq.n	800a456 <sbrk_aligned+0x3a>
 800a446:	1a29      	subs	r1, r5, r0
 800a448:	0020      	movs	r0, r4
 800a44a:	f000 f9e1 	bl	800a810 <_sbrk_r>
 800a44e:	1c43      	adds	r3, r0, #1
 800a450:	d101      	bne.n	800a456 <sbrk_aligned+0x3a>
 800a452:	2501      	movs	r5, #1
 800a454:	426d      	negs	r5, r5
 800a456:	0028      	movs	r0, r5
 800a458:	bd70      	pop	{r4, r5, r6, pc}
 800a45a:	46c0      	nop			; (mov r8, r8)
 800a45c:	200003bc 	.word	0x200003bc

0800a460 <_malloc_r>:
 800a460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a462:	2203      	movs	r2, #3
 800a464:	1ccb      	adds	r3, r1, #3
 800a466:	4393      	bics	r3, r2
 800a468:	3308      	adds	r3, #8
 800a46a:	0006      	movs	r6, r0
 800a46c:	001f      	movs	r7, r3
 800a46e:	2b0c      	cmp	r3, #12
 800a470:	d232      	bcs.n	800a4d8 <_malloc_r+0x78>
 800a472:	270c      	movs	r7, #12
 800a474:	42b9      	cmp	r1, r7
 800a476:	d831      	bhi.n	800a4dc <_malloc_r+0x7c>
 800a478:	0030      	movs	r0, r6
 800a47a:	f000 fa2f 	bl	800a8dc <__malloc_lock>
 800a47e:	4d32      	ldr	r5, [pc, #200]	; (800a548 <_malloc_r+0xe8>)
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	001c      	movs	r4, r3
 800a484:	2c00      	cmp	r4, #0
 800a486:	d12e      	bne.n	800a4e6 <_malloc_r+0x86>
 800a488:	0039      	movs	r1, r7
 800a48a:	0030      	movs	r0, r6
 800a48c:	f7ff ffc6 	bl	800a41c <sbrk_aligned>
 800a490:	0004      	movs	r4, r0
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	d11e      	bne.n	800a4d4 <_malloc_r+0x74>
 800a496:	682c      	ldr	r4, [r5, #0]
 800a498:	0025      	movs	r5, r4
 800a49a:	2d00      	cmp	r5, #0
 800a49c:	d14a      	bne.n	800a534 <_malloc_r+0xd4>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	0029      	movs	r1, r5
 800a4a2:	18e3      	adds	r3, r4, r3
 800a4a4:	0030      	movs	r0, r6
 800a4a6:	9301      	str	r3, [sp, #4]
 800a4a8:	f000 f9b2 	bl	800a810 <_sbrk_r>
 800a4ac:	9b01      	ldr	r3, [sp, #4]
 800a4ae:	4283      	cmp	r3, r0
 800a4b0:	d143      	bne.n	800a53a <_malloc_r+0xda>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	3703      	adds	r7, #3
 800a4b6:	1aff      	subs	r7, r7, r3
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	439f      	bics	r7, r3
 800a4bc:	3708      	adds	r7, #8
 800a4be:	2f0c      	cmp	r7, #12
 800a4c0:	d200      	bcs.n	800a4c4 <_malloc_r+0x64>
 800a4c2:	270c      	movs	r7, #12
 800a4c4:	0039      	movs	r1, r7
 800a4c6:	0030      	movs	r0, r6
 800a4c8:	f7ff ffa8 	bl	800a41c <sbrk_aligned>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d034      	beq.n	800a53a <_malloc_r+0xda>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	19df      	adds	r7, r3, r7
 800a4d4:	6027      	str	r7, [r4, #0]
 800a4d6:	e013      	b.n	800a500 <_malloc_r+0xa0>
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	dacb      	bge.n	800a474 <_malloc_r+0x14>
 800a4dc:	230c      	movs	r3, #12
 800a4de:	2500      	movs	r5, #0
 800a4e0:	6033      	str	r3, [r6, #0]
 800a4e2:	0028      	movs	r0, r5
 800a4e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4e6:	6822      	ldr	r2, [r4, #0]
 800a4e8:	1bd1      	subs	r1, r2, r7
 800a4ea:	d420      	bmi.n	800a52e <_malloc_r+0xce>
 800a4ec:	290b      	cmp	r1, #11
 800a4ee:	d917      	bls.n	800a520 <_malloc_r+0xc0>
 800a4f0:	19e2      	adds	r2, r4, r7
 800a4f2:	6027      	str	r7, [r4, #0]
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	d111      	bne.n	800a51c <_malloc_r+0xbc>
 800a4f8:	602a      	str	r2, [r5, #0]
 800a4fa:	6863      	ldr	r3, [r4, #4]
 800a4fc:	6011      	str	r1, [r2, #0]
 800a4fe:	6053      	str	r3, [r2, #4]
 800a500:	0030      	movs	r0, r6
 800a502:	0025      	movs	r5, r4
 800a504:	f000 f9f2 	bl	800a8ec <__malloc_unlock>
 800a508:	2207      	movs	r2, #7
 800a50a:	350b      	adds	r5, #11
 800a50c:	1d23      	adds	r3, r4, #4
 800a50e:	4395      	bics	r5, r2
 800a510:	1aea      	subs	r2, r5, r3
 800a512:	429d      	cmp	r5, r3
 800a514:	d0e5      	beq.n	800a4e2 <_malloc_r+0x82>
 800a516:	1b5b      	subs	r3, r3, r5
 800a518:	50a3      	str	r3, [r4, r2]
 800a51a:	e7e2      	b.n	800a4e2 <_malloc_r+0x82>
 800a51c:	605a      	str	r2, [r3, #4]
 800a51e:	e7ec      	b.n	800a4fa <_malloc_r+0x9a>
 800a520:	6862      	ldr	r2, [r4, #4]
 800a522:	42a3      	cmp	r3, r4
 800a524:	d101      	bne.n	800a52a <_malloc_r+0xca>
 800a526:	602a      	str	r2, [r5, #0]
 800a528:	e7ea      	b.n	800a500 <_malloc_r+0xa0>
 800a52a:	605a      	str	r2, [r3, #4]
 800a52c:	e7e8      	b.n	800a500 <_malloc_r+0xa0>
 800a52e:	0023      	movs	r3, r4
 800a530:	6864      	ldr	r4, [r4, #4]
 800a532:	e7a7      	b.n	800a484 <_malloc_r+0x24>
 800a534:	002c      	movs	r4, r5
 800a536:	686d      	ldr	r5, [r5, #4]
 800a538:	e7af      	b.n	800a49a <_malloc_r+0x3a>
 800a53a:	230c      	movs	r3, #12
 800a53c:	0030      	movs	r0, r6
 800a53e:	6033      	str	r3, [r6, #0]
 800a540:	f000 f9d4 	bl	800a8ec <__malloc_unlock>
 800a544:	e7cd      	b.n	800a4e2 <_malloc_r+0x82>
 800a546:	46c0      	nop			; (mov r8, r8)
 800a548:	200003b8 	.word	0x200003b8

0800a54c <__ssputs_r>:
 800a54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54e:	688e      	ldr	r6, [r1, #8]
 800a550:	b085      	sub	sp, #20
 800a552:	0007      	movs	r7, r0
 800a554:	000c      	movs	r4, r1
 800a556:	9203      	str	r2, [sp, #12]
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	429e      	cmp	r6, r3
 800a55c:	d83c      	bhi.n	800a5d8 <__ssputs_r+0x8c>
 800a55e:	2390      	movs	r3, #144	; 0x90
 800a560:	898a      	ldrh	r2, [r1, #12]
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	421a      	tst	r2, r3
 800a566:	d034      	beq.n	800a5d2 <__ssputs_r+0x86>
 800a568:	6909      	ldr	r1, [r1, #16]
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	6960      	ldr	r0, [r4, #20]
 800a56e:	1a5b      	subs	r3, r3, r1
 800a570:	9302      	str	r3, [sp, #8]
 800a572:	2303      	movs	r3, #3
 800a574:	4343      	muls	r3, r0
 800a576:	0fdd      	lsrs	r5, r3, #31
 800a578:	18ed      	adds	r5, r5, r3
 800a57a:	9b01      	ldr	r3, [sp, #4]
 800a57c:	9802      	ldr	r0, [sp, #8]
 800a57e:	3301      	adds	r3, #1
 800a580:	181b      	adds	r3, r3, r0
 800a582:	106d      	asrs	r5, r5, #1
 800a584:	42ab      	cmp	r3, r5
 800a586:	d900      	bls.n	800a58a <__ssputs_r+0x3e>
 800a588:	001d      	movs	r5, r3
 800a58a:	0553      	lsls	r3, r2, #21
 800a58c:	d532      	bpl.n	800a5f4 <__ssputs_r+0xa8>
 800a58e:	0029      	movs	r1, r5
 800a590:	0038      	movs	r0, r7
 800a592:	f7ff ff65 	bl	800a460 <_malloc_r>
 800a596:	1e06      	subs	r6, r0, #0
 800a598:	d109      	bne.n	800a5ae <__ssputs_r+0x62>
 800a59a:	230c      	movs	r3, #12
 800a59c:	603b      	str	r3, [r7, #0]
 800a59e:	2340      	movs	r3, #64	; 0x40
 800a5a0:	2001      	movs	r0, #1
 800a5a2:	89a2      	ldrh	r2, [r4, #12]
 800a5a4:	4240      	negs	r0, r0
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	b005      	add	sp, #20
 800a5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ae:	9a02      	ldr	r2, [sp, #8]
 800a5b0:	6921      	ldr	r1, [r4, #16]
 800a5b2:	f7ff fb18 	bl	8009be6 <memcpy>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	4a14      	ldr	r2, [pc, #80]	; (800a60c <__ssputs_r+0xc0>)
 800a5ba:	401a      	ands	r2, r3
 800a5bc:	2380      	movs	r3, #128	; 0x80
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	81a3      	strh	r3, [r4, #12]
 800a5c2:	9b02      	ldr	r3, [sp, #8]
 800a5c4:	6126      	str	r6, [r4, #16]
 800a5c6:	18f6      	adds	r6, r6, r3
 800a5c8:	6026      	str	r6, [r4, #0]
 800a5ca:	6165      	str	r5, [r4, #20]
 800a5cc:	9e01      	ldr	r6, [sp, #4]
 800a5ce:	1aed      	subs	r5, r5, r3
 800a5d0:	60a5      	str	r5, [r4, #8]
 800a5d2:	9b01      	ldr	r3, [sp, #4]
 800a5d4:	429e      	cmp	r6, r3
 800a5d6:	d900      	bls.n	800a5da <__ssputs_r+0x8e>
 800a5d8:	9e01      	ldr	r6, [sp, #4]
 800a5da:	0032      	movs	r2, r6
 800a5dc:	9903      	ldr	r1, [sp, #12]
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	f000 f968 	bl	800a8b4 <memmove>
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	1b9b      	subs	r3, r3, r6
 800a5ea:	60a3      	str	r3, [r4, #8]
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	199e      	adds	r6, r3, r6
 800a5f0:	6026      	str	r6, [r4, #0]
 800a5f2:	e7da      	b.n	800a5aa <__ssputs_r+0x5e>
 800a5f4:	002a      	movs	r2, r5
 800a5f6:	0038      	movs	r0, r7
 800a5f8:	f000 f980 	bl	800a8fc <_realloc_r>
 800a5fc:	1e06      	subs	r6, r0, #0
 800a5fe:	d1e0      	bne.n	800a5c2 <__ssputs_r+0x76>
 800a600:	0038      	movs	r0, r7
 800a602:	6921      	ldr	r1, [r4, #16]
 800a604:	f7ff fec0 	bl	800a388 <_free_r>
 800a608:	e7c7      	b.n	800a59a <__ssputs_r+0x4e>
 800a60a:	46c0      	nop			; (mov r8, r8)
 800a60c:	fffffb7f 	.word	0xfffffb7f

0800a610 <_svfiprintf_r>:
 800a610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a612:	b0a1      	sub	sp, #132	; 0x84
 800a614:	9003      	str	r0, [sp, #12]
 800a616:	001d      	movs	r5, r3
 800a618:	898b      	ldrh	r3, [r1, #12]
 800a61a:	000f      	movs	r7, r1
 800a61c:	0016      	movs	r6, r2
 800a61e:	061b      	lsls	r3, r3, #24
 800a620:	d511      	bpl.n	800a646 <_svfiprintf_r+0x36>
 800a622:	690b      	ldr	r3, [r1, #16]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10e      	bne.n	800a646 <_svfiprintf_r+0x36>
 800a628:	2140      	movs	r1, #64	; 0x40
 800a62a:	f7ff ff19 	bl	800a460 <_malloc_r>
 800a62e:	6038      	str	r0, [r7, #0]
 800a630:	6138      	str	r0, [r7, #16]
 800a632:	2800      	cmp	r0, #0
 800a634:	d105      	bne.n	800a642 <_svfiprintf_r+0x32>
 800a636:	230c      	movs	r3, #12
 800a638:	9a03      	ldr	r2, [sp, #12]
 800a63a:	3801      	subs	r0, #1
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	b021      	add	sp, #132	; 0x84
 800a640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a642:	2340      	movs	r3, #64	; 0x40
 800a644:	617b      	str	r3, [r7, #20]
 800a646:	2300      	movs	r3, #0
 800a648:	ac08      	add	r4, sp, #32
 800a64a:	6163      	str	r3, [r4, #20]
 800a64c:	3320      	adds	r3, #32
 800a64e:	7663      	strb	r3, [r4, #25]
 800a650:	3310      	adds	r3, #16
 800a652:	76a3      	strb	r3, [r4, #26]
 800a654:	9507      	str	r5, [sp, #28]
 800a656:	0035      	movs	r5, r6
 800a658:	782b      	ldrb	r3, [r5, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <_svfiprintf_r+0x52>
 800a65e:	2b25      	cmp	r3, #37	; 0x25
 800a660:	d147      	bne.n	800a6f2 <_svfiprintf_r+0xe2>
 800a662:	1bab      	subs	r3, r5, r6
 800a664:	9305      	str	r3, [sp, #20]
 800a666:	42b5      	cmp	r5, r6
 800a668:	d00c      	beq.n	800a684 <_svfiprintf_r+0x74>
 800a66a:	0032      	movs	r2, r6
 800a66c:	0039      	movs	r1, r7
 800a66e:	9803      	ldr	r0, [sp, #12]
 800a670:	f7ff ff6c 	bl	800a54c <__ssputs_r>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d100      	bne.n	800a67a <_svfiprintf_r+0x6a>
 800a678:	e0ae      	b.n	800a7d8 <_svfiprintf_r+0x1c8>
 800a67a:	6962      	ldr	r2, [r4, #20]
 800a67c:	9b05      	ldr	r3, [sp, #20]
 800a67e:	4694      	mov	ip, r2
 800a680:	4463      	add	r3, ip
 800a682:	6163      	str	r3, [r4, #20]
 800a684:	782b      	ldrb	r3, [r5, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d100      	bne.n	800a68c <_svfiprintf_r+0x7c>
 800a68a:	e0a5      	b.n	800a7d8 <_svfiprintf_r+0x1c8>
 800a68c:	2201      	movs	r2, #1
 800a68e:	2300      	movs	r3, #0
 800a690:	4252      	negs	r2, r2
 800a692:	6062      	str	r2, [r4, #4]
 800a694:	a904      	add	r1, sp, #16
 800a696:	3254      	adds	r2, #84	; 0x54
 800a698:	1852      	adds	r2, r2, r1
 800a69a:	1c6e      	adds	r6, r5, #1
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	60e3      	str	r3, [r4, #12]
 800a6a0:	60a3      	str	r3, [r4, #8]
 800a6a2:	7013      	strb	r3, [r2, #0]
 800a6a4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a6a6:	2205      	movs	r2, #5
 800a6a8:	7831      	ldrb	r1, [r6, #0]
 800a6aa:	4854      	ldr	r0, [pc, #336]	; (800a7fc <_svfiprintf_r+0x1ec>)
 800a6ac:	f7ff fa90 	bl	8009bd0 <memchr>
 800a6b0:	1c75      	adds	r5, r6, #1
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d11f      	bne.n	800a6f6 <_svfiprintf_r+0xe6>
 800a6b6:	6822      	ldr	r2, [r4, #0]
 800a6b8:	06d3      	lsls	r3, r2, #27
 800a6ba:	d504      	bpl.n	800a6c6 <_svfiprintf_r+0xb6>
 800a6bc:	2353      	movs	r3, #83	; 0x53
 800a6be:	a904      	add	r1, sp, #16
 800a6c0:	185b      	adds	r3, r3, r1
 800a6c2:	2120      	movs	r1, #32
 800a6c4:	7019      	strb	r1, [r3, #0]
 800a6c6:	0713      	lsls	r3, r2, #28
 800a6c8:	d504      	bpl.n	800a6d4 <_svfiprintf_r+0xc4>
 800a6ca:	2353      	movs	r3, #83	; 0x53
 800a6cc:	a904      	add	r1, sp, #16
 800a6ce:	185b      	adds	r3, r3, r1
 800a6d0:	212b      	movs	r1, #43	; 0x2b
 800a6d2:	7019      	strb	r1, [r3, #0]
 800a6d4:	7833      	ldrb	r3, [r6, #0]
 800a6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d8:	d016      	beq.n	800a708 <_svfiprintf_r+0xf8>
 800a6da:	0035      	movs	r5, r6
 800a6dc:	2100      	movs	r1, #0
 800a6de:	200a      	movs	r0, #10
 800a6e0:	68e3      	ldr	r3, [r4, #12]
 800a6e2:	782a      	ldrb	r2, [r5, #0]
 800a6e4:	1c6e      	adds	r6, r5, #1
 800a6e6:	3a30      	subs	r2, #48	; 0x30
 800a6e8:	2a09      	cmp	r2, #9
 800a6ea:	d94e      	bls.n	800a78a <_svfiprintf_r+0x17a>
 800a6ec:	2900      	cmp	r1, #0
 800a6ee:	d111      	bne.n	800a714 <_svfiprintf_r+0x104>
 800a6f0:	e017      	b.n	800a722 <_svfiprintf_r+0x112>
 800a6f2:	3501      	adds	r5, #1
 800a6f4:	e7b0      	b.n	800a658 <_svfiprintf_r+0x48>
 800a6f6:	4b41      	ldr	r3, [pc, #260]	; (800a7fc <_svfiprintf_r+0x1ec>)
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	1ac0      	subs	r0, r0, r3
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	4083      	lsls	r3, r0
 800a700:	4313      	orrs	r3, r2
 800a702:	002e      	movs	r6, r5
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	e7ce      	b.n	800a6a6 <_svfiprintf_r+0x96>
 800a708:	9b07      	ldr	r3, [sp, #28]
 800a70a:	1d19      	adds	r1, r3, #4
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	9107      	str	r1, [sp, #28]
 800a710:	2b00      	cmp	r3, #0
 800a712:	db01      	blt.n	800a718 <_svfiprintf_r+0x108>
 800a714:	930b      	str	r3, [sp, #44]	; 0x2c
 800a716:	e004      	b.n	800a722 <_svfiprintf_r+0x112>
 800a718:	425b      	negs	r3, r3
 800a71a:	60e3      	str	r3, [r4, #12]
 800a71c:	2302      	movs	r3, #2
 800a71e:	4313      	orrs	r3, r2
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	782b      	ldrb	r3, [r5, #0]
 800a724:	2b2e      	cmp	r3, #46	; 0x2e
 800a726:	d10a      	bne.n	800a73e <_svfiprintf_r+0x12e>
 800a728:	786b      	ldrb	r3, [r5, #1]
 800a72a:	2b2a      	cmp	r3, #42	; 0x2a
 800a72c:	d135      	bne.n	800a79a <_svfiprintf_r+0x18a>
 800a72e:	9b07      	ldr	r3, [sp, #28]
 800a730:	3502      	adds	r5, #2
 800a732:	1d1a      	adds	r2, r3, #4
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	9207      	str	r2, [sp, #28]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	db2b      	blt.n	800a794 <_svfiprintf_r+0x184>
 800a73c:	9309      	str	r3, [sp, #36]	; 0x24
 800a73e:	4e30      	ldr	r6, [pc, #192]	; (800a800 <_svfiprintf_r+0x1f0>)
 800a740:	2203      	movs	r2, #3
 800a742:	0030      	movs	r0, r6
 800a744:	7829      	ldrb	r1, [r5, #0]
 800a746:	f7ff fa43 	bl	8009bd0 <memchr>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d006      	beq.n	800a75c <_svfiprintf_r+0x14c>
 800a74e:	2340      	movs	r3, #64	; 0x40
 800a750:	1b80      	subs	r0, r0, r6
 800a752:	4083      	lsls	r3, r0
 800a754:	6822      	ldr	r2, [r4, #0]
 800a756:	3501      	adds	r5, #1
 800a758:	4313      	orrs	r3, r2
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	7829      	ldrb	r1, [r5, #0]
 800a75e:	2206      	movs	r2, #6
 800a760:	4828      	ldr	r0, [pc, #160]	; (800a804 <_svfiprintf_r+0x1f4>)
 800a762:	1c6e      	adds	r6, r5, #1
 800a764:	7621      	strb	r1, [r4, #24]
 800a766:	f7ff fa33 	bl	8009bd0 <memchr>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d03c      	beq.n	800a7e8 <_svfiprintf_r+0x1d8>
 800a76e:	4b26      	ldr	r3, [pc, #152]	; (800a808 <_svfiprintf_r+0x1f8>)
 800a770:	2b00      	cmp	r3, #0
 800a772:	d125      	bne.n	800a7c0 <_svfiprintf_r+0x1b0>
 800a774:	2207      	movs	r2, #7
 800a776:	9b07      	ldr	r3, [sp, #28]
 800a778:	3307      	adds	r3, #7
 800a77a:	4393      	bics	r3, r2
 800a77c:	3308      	adds	r3, #8
 800a77e:	9307      	str	r3, [sp, #28]
 800a780:	6963      	ldr	r3, [r4, #20]
 800a782:	9a04      	ldr	r2, [sp, #16]
 800a784:	189b      	adds	r3, r3, r2
 800a786:	6163      	str	r3, [r4, #20]
 800a788:	e765      	b.n	800a656 <_svfiprintf_r+0x46>
 800a78a:	4343      	muls	r3, r0
 800a78c:	0035      	movs	r5, r6
 800a78e:	2101      	movs	r1, #1
 800a790:	189b      	adds	r3, r3, r2
 800a792:	e7a6      	b.n	800a6e2 <_svfiprintf_r+0xd2>
 800a794:	2301      	movs	r3, #1
 800a796:	425b      	negs	r3, r3
 800a798:	e7d0      	b.n	800a73c <_svfiprintf_r+0x12c>
 800a79a:	2300      	movs	r3, #0
 800a79c:	200a      	movs	r0, #10
 800a79e:	001a      	movs	r2, r3
 800a7a0:	3501      	adds	r5, #1
 800a7a2:	6063      	str	r3, [r4, #4]
 800a7a4:	7829      	ldrb	r1, [r5, #0]
 800a7a6:	1c6e      	adds	r6, r5, #1
 800a7a8:	3930      	subs	r1, #48	; 0x30
 800a7aa:	2909      	cmp	r1, #9
 800a7ac:	d903      	bls.n	800a7b6 <_svfiprintf_r+0x1a6>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0c5      	beq.n	800a73e <_svfiprintf_r+0x12e>
 800a7b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7b4:	e7c3      	b.n	800a73e <_svfiprintf_r+0x12e>
 800a7b6:	4342      	muls	r2, r0
 800a7b8:	0035      	movs	r5, r6
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	1852      	adds	r2, r2, r1
 800a7be:	e7f1      	b.n	800a7a4 <_svfiprintf_r+0x194>
 800a7c0:	ab07      	add	r3, sp, #28
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	003a      	movs	r2, r7
 800a7c6:	0021      	movs	r1, r4
 800a7c8:	4b10      	ldr	r3, [pc, #64]	; (800a80c <_svfiprintf_r+0x1fc>)
 800a7ca:	9803      	ldr	r0, [sp, #12]
 800a7cc:	f7fd ff68 	bl	80086a0 <_printf_float>
 800a7d0:	9004      	str	r0, [sp, #16]
 800a7d2:	9b04      	ldr	r3, [sp, #16]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	d1d3      	bne.n	800a780 <_svfiprintf_r+0x170>
 800a7d8:	89bb      	ldrh	r3, [r7, #12]
 800a7da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a7dc:	065b      	lsls	r3, r3, #25
 800a7de:	d400      	bmi.n	800a7e2 <_svfiprintf_r+0x1d2>
 800a7e0:	e72d      	b.n	800a63e <_svfiprintf_r+0x2e>
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	4240      	negs	r0, r0
 800a7e6:	e72a      	b.n	800a63e <_svfiprintf_r+0x2e>
 800a7e8:	ab07      	add	r3, sp, #28
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	003a      	movs	r2, r7
 800a7ee:	0021      	movs	r1, r4
 800a7f0:	4b06      	ldr	r3, [pc, #24]	; (800a80c <_svfiprintf_r+0x1fc>)
 800a7f2:	9803      	ldr	r0, [sp, #12]
 800a7f4:	f7fe fa06 	bl	8008c04 <_printf_i>
 800a7f8:	e7ea      	b.n	800a7d0 <_svfiprintf_r+0x1c0>
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	0800b874 	.word	0x0800b874
 800a800:	0800b87a 	.word	0x0800b87a
 800a804:	0800b87e 	.word	0x0800b87e
 800a808:	080086a1 	.word	0x080086a1
 800a80c:	0800a54d 	.word	0x0800a54d

0800a810 <_sbrk_r>:
 800a810:	2300      	movs	r3, #0
 800a812:	b570      	push	{r4, r5, r6, lr}
 800a814:	4d06      	ldr	r5, [pc, #24]	; (800a830 <_sbrk_r+0x20>)
 800a816:	0004      	movs	r4, r0
 800a818:	0008      	movs	r0, r1
 800a81a:	602b      	str	r3, [r5, #0]
 800a81c:	f7f9 f980 	bl	8003b20 <_sbrk>
 800a820:	1c43      	adds	r3, r0, #1
 800a822:	d103      	bne.n	800a82c <_sbrk_r+0x1c>
 800a824:	682b      	ldr	r3, [r5, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d000      	beq.n	800a82c <_sbrk_r+0x1c>
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	bd70      	pop	{r4, r5, r6, pc}
 800a82e:	46c0      	nop			; (mov r8, r8)
 800a830:	200003c0 	.word	0x200003c0

0800a834 <__assert_func>:
 800a834:	b530      	push	{r4, r5, lr}
 800a836:	0014      	movs	r4, r2
 800a838:	001a      	movs	r2, r3
 800a83a:	4b09      	ldr	r3, [pc, #36]	; (800a860 <__assert_func+0x2c>)
 800a83c:	0005      	movs	r5, r0
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	b085      	sub	sp, #20
 800a842:	68d8      	ldr	r0, [r3, #12]
 800a844:	4b07      	ldr	r3, [pc, #28]	; (800a864 <__assert_func+0x30>)
 800a846:	2c00      	cmp	r4, #0
 800a848:	d101      	bne.n	800a84e <__assert_func+0x1a>
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <__assert_func+0x34>)
 800a84c:	001c      	movs	r4, r3
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	9100      	str	r1, [sp, #0]
 800a852:	002b      	movs	r3, r5
 800a854:	4905      	ldr	r1, [pc, #20]	; (800a86c <__assert_func+0x38>)
 800a856:	9402      	str	r4, [sp, #8]
 800a858:	f000 f80a 	bl	800a870 <fiprintf>
 800a85c:	f000 faba 	bl	800add4 <abort>
 800a860:	2000000c 	.word	0x2000000c
 800a864:	0800b885 	.word	0x0800b885
 800a868:	0800b8c0 	.word	0x0800b8c0
 800a86c:	0800b892 	.word	0x0800b892

0800a870 <fiprintf>:
 800a870:	b40e      	push	{r1, r2, r3}
 800a872:	b503      	push	{r0, r1, lr}
 800a874:	0001      	movs	r1, r0
 800a876:	ab03      	add	r3, sp, #12
 800a878:	4804      	ldr	r0, [pc, #16]	; (800a88c <fiprintf+0x1c>)
 800a87a:	cb04      	ldmia	r3!, {r2}
 800a87c:	6800      	ldr	r0, [r0, #0]
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	f000 f892 	bl	800a9a8 <_vfiprintf_r>
 800a884:	b002      	add	sp, #8
 800a886:	bc08      	pop	{r3}
 800a888:	b003      	add	sp, #12
 800a88a:	4718      	bx	r3
 800a88c:	2000000c 	.word	0x2000000c

0800a890 <__ascii_mbtowc>:
 800a890:	b082      	sub	sp, #8
 800a892:	2900      	cmp	r1, #0
 800a894:	d100      	bne.n	800a898 <__ascii_mbtowc+0x8>
 800a896:	a901      	add	r1, sp, #4
 800a898:	1e10      	subs	r0, r2, #0
 800a89a:	d006      	beq.n	800a8aa <__ascii_mbtowc+0x1a>
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d006      	beq.n	800a8ae <__ascii_mbtowc+0x1e>
 800a8a0:	7813      	ldrb	r3, [r2, #0]
 800a8a2:	600b      	str	r3, [r1, #0]
 800a8a4:	7810      	ldrb	r0, [r2, #0]
 800a8a6:	1e43      	subs	r3, r0, #1
 800a8a8:	4198      	sbcs	r0, r3
 800a8aa:	b002      	add	sp, #8
 800a8ac:	4770      	bx	lr
 800a8ae:	2002      	movs	r0, #2
 800a8b0:	4240      	negs	r0, r0
 800a8b2:	e7fa      	b.n	800a8aa <__ascii_mbtowc+0x1a>

0800a8b4 <memmove>:
 800a8b4:	b510      	push	{r4, lr}
 800a8b6:	4288      	cmp	r0, r1
 800a8b8:	d902      	bls.n	800a8c0 <memmove+0xc>
 800a8ba:	188b      	adds	r3, r1, r2
 800a8bc:	4298      	cmp	r0, r3
 800a8be:	d303      	bcc.n	800a8c8 <memmove+0x14>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	e007      	b.n	800a8d4 <memmove+0x20>
 800a8c4:	5c8b      	ldrb	r3, [r1, r2]
 800a8c6:	5483      	strb	r3, [r0, r2]
 800a8c8:	3a01      	subs	r2, #1
 800a8ca:	d2fb      	bcs.n	800a8c4 <memmove+0x10>
 800a8cc:	bd10      	pop	{r4, pc}
 800a8ce:	5ccc      	ldrb	r4, [r1, r3]
 800a8d0:	54c4      	strb	r4, [r0, r3]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d1fa      	bne.n	800a8ce <memmove+0x1a>
 800a8d8:	e7f8      	b.n	800a8cc <memmove+0x18>
	...

0800a8dc <__malloc_lock>:
 800a8dc:	b510      	push	{r4, lr}
 800a8de:	4802      	ldr	r0, [pc, #8]	; (800a8e8 <__malloc_lock+0xc>)
 800a8e0:	f000 fc4f 	bl	800b182 <__retarget_lock_acquire_recursive>
 800a8e4:	bd10      	pop	{r4, pc}
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	200003c4 	.word	0x200003c4

0800a8ec <__malloc_unlock>:
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	4802      	ldr	r0, [pc, #8]	; (800a8f8 <__malloc_unlock+0xc>)
 800a8f0:	f000 fc48 	bl	800b184 <__retarget_lock_release_recursive>
 800a8f4:	bd10      	pop	{r4, pc}
 800a8f6:	46c0      	nop			; (mov r8, r8)
 800a8f8:	200003c4 	.word	0x200003c4

0800a8fc <_realloc_r>:
 800a8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8fe:	0007      	movs	r7, r0
 800a900:	000e      	movs	r6, r1
 800a902:	0014      	movs	r4, r2
 800a904:	2900      	cmp	r1, #0
 800a906:	d105      	bne.n	800a914 <_realloc_r+0x18>
 800a908:	0011      	movs	r1, r2
 800a90a:	f7ff fda9 	bl	800a460 <_malloc_r>
 800a90e:	0005      	movs	r5, r0
 800a910:	0028      	movs	r0, r5
 800a912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a914:	2a00      	cmp	r2, #0
 800a916:	d103      	bne.n	800a920 <_realloc_r+0x24>
 800a918:	f7ff fd36 	bl	800a388 <_free_r>
 800a91c:	0025      	movs	r5, r4
 800a91e:	e7f7      	b.n	800a910 <_realloc_r+0x14>
 800a920:	f000 fc9e 	bl	800b260 <_malloc_usable_size_r>
 800a924:	9001      	str	r0, [sp, #4]
 800a926:	4284      	cmp	r4, r0
 800a928:	d803      	bhi.n	800a932 <_realloc_r+0x36>
 800a92a:	0035      	movs	r5, r6
 800a92c:	0843      	lsrs	r3, r0, #1
 800a92e:	42a3      	cmp	r3, r4
 800a930:	d3ee      	bcc.n	800a910 <_realloc_r+0x14>
 800a932:	0021      	movs	r1, r4
 800a934:	0038      	movs	r0, r7
 800a936:	f7ff fd93 	bl	800a460 <_malloc_r>
 800a93a:	1e05      	subs	r5, r0, #0
 800a93c:	d0e8      	beq.n	800a910 <_realloc_r+0x14>
 800a93e:	9b01      	ldr	r3, [sp, #4]
 800a940:	0022      	movs	r2, r4
 800a942:	429c      	cmp	r4, r3
 800a944:	d900      	bls.n	800a948 <_realloc_r+0x4c>
 800a946:	001a      	movs	r2, r3
 800a948:	0031      	movs	r1, r6
 800a94a:	0028      	movs	r0, r5
 800a94c:	f7ff f94b 	bl	8009be6 <memcpy>
 800a950:	0031      	movs	r1, r6
 800a952:	0038      	movs	r0, r7
 800a954:	f7ff fd18 	bl	800a388 <_free_r>
 800a958:	e7da      	b.n	800a910 <_realloc_r+0x14>

0800a95a <__sfputc_r>:
 800a95a:	6893      	ldr	r3, [r2, #8]
 800a95c:	b510      	push	{r4, lr}
 800a95e:	3b01      	subs	r3, #1
 800a960:	6093      	str	r3, [r2, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	da04      	bge.n	800a970 <__sfputc_r+0x16>
 800a966:	6994      	ldr	r4, [r2, #24]
 800a968:	42a3      	cmp	r3, r4
 800a96a:	db07      	blt.n	800a97c <__sfputc_r+0x22>
 800a96c:	290a      	cmp	r1, #10
 800a96e:	d005      	beq.n	800a97c <__sfputc_r+0x22>
 800a970:	6813      	ldr	r3, [r2, #0]
 800a972:	1c58      	adds	r0, r3, #1
 800a974:	6010      	str	r0, [r2, #0]
 800a976:	7019      	strb	r1, [r3, #0]
 800a978:	0008      	movs	r0, r1
 800a97a:	bd10      	pop	{r4, pc}
 800a97c:	f000 f94e 	bl	800ac1c <__swbuf_r>
 800a980:	0001      	movs	r1, r0
 800a982:	e7f9      	b.n	800a978 <__sfputc_r+0x1e>

0800a984 <__sfputs_r>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	0006      	movs	r6, r0
 800a988:	000f      	movs	r7, r1
 800a98a:	0014      	movs	r4, r2
 800a98c:	18d5      	adds	r5, r2, r3
 800a98e:	42ac      	cmp	r4, r5
 800a990:	d101      	bne.n	800a996 <__sfputs_r+0x12>
 800a992:	2000      	movs	r0, #0
 800a994:	e007      	b.n	800a9a6 <__sfputs_r+0x22>
 800a996:	7821      	ldrb	r1, [r4, #0]
 800a998:	003a      	movs	r2, r7
 800a99a:	0030      	movs	r0, r6
 800a99c:	f7ff ffdd 	bl	800a95a <__sfputc_r>
 800a9a0:	3401      	adds	r4, #1
 800a9a2:	1c43      	adds	r3, r0, #1
 800a9a4:	d1f3      	bne.n	800a98e <__sfputs_r+0xa>
 800a9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9a8 <_vfiprintf_r>:
 800a9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9aa:	b0a1      	sub	sp, #132	; 0x84
 800a9ac:	0006      	movs	r6, r0
 800a9ae:	000c      	movs	r4, r1
 800a9b0:	001f      	movs	r7, r3
 800a9b2:	9203      	str	r2, [sp, #12]
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d004      	beq.n	800a9c2 <_vfiprintf_r+0x1a>
 800a9b8:	6983      	ldr	r3, [r0, #24]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <_vfiprintf_r+0x1a>
 800a9be:	f000 fb3f 	bl	800b040 <__sinit>
 800a9c2:	4b8e      	ldr	r3, [pc, #568]	; (800abfc <_vfiprintf_r+0x254>)
 800a9c4:	429c      	cmp	r4, r3
 800a9c6:	d11c      	bne.n	800aa02 <_vfiprintf_r+0x5a>
 800a9c8:	6874      	ldr	r4, [r6, #4]
 800a9ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9cc:	07db      	lsls	r3, r3, #31
 800a9ce:	d405      	bmi.n	800a9dc <_vfiprintf_r+0x34>
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	059b      	lsls	r3, r3, #22
 800a9d4:	d402      	bmi.n	800a9dc <_vfiprintf_r+0x34>
 800a9d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9d8:	f000 fbd3 	bl	800b182 <__retarget_lock_acquire_recursive>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	071b      	lsls	r3, r3, #28
 800a9e0:	d502      	bpl.n	800a9e8 <_vfiprintf_r+0x40>
 800a9e2:	6923      	ldr	r3, [r4, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d11d      	bne.n	800aa24 <_vfiprintf_r+0x7c>
 800a9e8:	0021      	movs	r1, r4
 800a9ea:	0030      	movs	r0, r6
 800a9ec:	f000 f97a 	bl	800ace4 <__swsetup_r>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d017      	beq.n	800aa24 <_vfiprintf_r+0x7c>
 800a9f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9f6:	07db      	lsls	r3, r3, #31
 800a9f8:	d50d      	bpl.n	800aa16 <_vfiprintf_r+0x6e>
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	4240      	negs	r0, r0
 800a9fe:	b021      	add	sp, #132	; 0x84
 800aa00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa02:	4b7f      	ldr	r3, [pc, #508]	; (800ac00 <_vfiprintf_r+0x258>)
 800aa04:	429c      	cmp	r4, r3
 800aa06:	d101      	bne.n	800aa0c <_vfiprintf_r+0x64>
 800aa08:	68b4      	ldr	r4, [r6, #8]
 800aa0a:	e7de      	b.n	800a9ca <_vfiprintf_r+0x22>
 800aa0c:	4b7d      	ldr	r3, [pc, #500]	; (800ac04 <_vfiprintf_r+0x25c>)
 800aa0e:	429c      	cmp	r4, r3
 800aa10:	d1db      	bne.n	800a9ca <_vfiprintf_r+0x22>
 800aa12:	68f4      	ldr	r4, [r6, #12]
 800aa14:	e7d9      	b.n	800a9ca <_vfiprintf_r+0x22>
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	059b      	lsls	r3, r3, #22
 800aa1a:	d4ee      	bmi.n	800a9fa <_vfiprintf_r+0x52>
 800aa1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa1e:	f000 fbb1 	bl	800b184 <__retarget_lock_release_recursive>
 800aa22:	e7ea      	b.n	800a9fa <_vfiprintf_r+0x52>
 800aa24:	2300      	movs	r3, #0
 800aa26:	ad08      	add	r5, sp, #32
 800aa28:	616b      	str	r3, [r5, #20]
 800aa2a:	3320      	adds	r3, #32
 800aa2c:	766b      	strb	r3, [r5, #25]
 800aa2e:	3310      	adds	r3, #16
 800aa30:	76ab      	strb	r3, [r5, #26]
 800aa32:	9707      	str	r7, [sp, #28]
 800aa34:	9f03      	ldr	r7, [sp, #12]
 800aa36:	783b      	ldrb	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <_vfiprintf_r+0x98>
 800aa3c:	2b25      	cmp	r3, #37	; 0x25
 800aa3e:	d14e      	bne.n	800aade <_vfiprintf_r+0x136>
 800aa40:	9b03      	ldr	r3, [sp, #12]
 800aa42:	1afb      	subs	r3, r7, r3
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	429f      	cmp	r7, r3
 800aa4a:	d00d      	beq.n	800aa68 <_vfiprintf_r+0xc0>
 800aa4c:	9b05      	ldr	r3, [sp, #20]
 800aa4e:	0021      	movs	r1, r4
 800aa50:	0030      	movs	r0, r6
 800aa52:	9a03      	ldr	r2, [sp, #12]
 800aa54:	f7ff ff96 	bl	800a984 <__sfputs_r>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d100      	bne.n	800aa5e <_vfiprintf_r+0xb6>
 800aa5c:	e0b5      	b.n	800abca <_vfiprintf_r+0x222>
 800aa5e:	696a      	ldr	r2, [r5, #20]
 800aa60:	9b05      	ldr	r3, [sp, #20]
 800aa62:	4694      	mov	ip, r2
 800aa64:	4463      	add	r3, ip
 800aa66:	616b      	str	r3, [r5, #20]
 800aa68:	783b      	ldrb	r3, [r7, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d100      	bne.n	800aa70 <_vfiprintf_r+0xc8>
 800aa6e:	e0ac      	b.n	800abca <_vfiprintf_r+0x222>
 800aa70:	2201      	movs	r2, #1
 800aa72:	1c7b      	adds	r3, r7, #1
 800aa74:	9303      	str	r3, [sp, #12]
 800aa76:	2300      	movs	r3, #0
 800aa78:	4252      	negs	r2, r2
 800aa7a:	606a      	str	r2, [r5, #4]
 800aa7c:	a904      	add	r1, sp, #16
 800aa7e:	3254      	adds	r2, #84	; 0x54
 800aa80:	1852      	adds	r2, r2, r1
 800aa82:	602b      	str	r3, [r5, #0]
 800aa84:	60eb      	str	r3, [r5, #12]
 800aa86:	60ab      	str	r3, [r5, #8]
 800aa88:	7013      	strb	r3, [r2, #0]
 800aa8a:	65ab      	str	r3, [r5, #88]	; 0x58
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	2205      	movs	r2, #5
 800aa90:	7819      	ldrb	r1, [r3, #0]
 800aa92:	485d      	ldr	r0, [pc, #372]	; (800ac08 <_vfiprintf_r+0x260>)
 800aa94:	f7ff f89c 	bl	8009bd0 <memchr>
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	1c5f      	adds	r7, r3, #1
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d120      	bne.n	800aae2 <_vfiprintf_r+0x13a>
 800aaa0:	682a      	ldr	r2, [r5, #0]
 800aaa2:	06d3      	lsls	r3, r2, #27
 800aaa4:	d504      	bpl.n	800aab0 <_vfiprintf_r+0x108>
 800aaa6:	2353      	movs	r3, #83	; 0x53
 800aaa8:	a904      	add	r1, sp, #16
 800aaaa:	185b      	adds	r3, r3, r1
 800aaac:	2120      	movs	r1, #32
 800aaae:	7019      	strb	r1, [r3, #0]
 800aab0:	0713      	lsls	r3, r2, #28
 800aab2:	d504      	bpl.n	800aabe <_vfiprintf_r+0x116>
 800aab4:	2353      	movs	r3, #83	; 0x53
 800aab6:	a904      	add	r1, sp, #16
 800aab8:	185b      	adds	r3, r3, r1
 800aaba:	212b      	movs	r1, #43	; 0x2b
 800aabc:	7019      	strb	r1, [r3, #0]
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2b2a      	cmp	r3, #42	; 0x2a
 800aac4:	d016      	beq.n	800aaf4 <_vfiprintf_r+0x14c>
 800aac6:	2100      	movs	r1, #0
 800aac8:	68eb      	ldr	r3, [r5, #12]
 800aaca:	9f03      	ldr	r7, [sp, #12]
 800aacc:	783a      	ldrb	r2, [r7, #0]
 800aace:	1c78      	adds	r0, r7, #1
 800aad0:	3a30      	subs	r2, #48	; 0x30
 800aad2:	4684      	mov	ip, r0
 800aad4:	2a09      	cmp	r2, #9
 800aad6:	d94f      	bls.n	800ab78 <_vfiprintf_r+0x1d0>
 800aad8:	2900      	cmp	r1, #0
 800aada:	d111      	bne.n	800ab00 <_vfiprintf_r+0x158>
 800aadc:	e017      	b.n	800ab0e <_vfiprintf_r+0x166>
 800aade:	3701      	adds	r7, #1
 800aae0:	e7a9      	b.n	800aa36 <_vfiprintf_r+0x8e>
 800aae2:	4b49      	ldr	r3, [pc, #292]	; (800ac08 <_vfiprintf_r+0x260>)
 800aae4:	682a      	ldr	r2, [r5, #0]
 800aae6:	1ac0      	subs	r0, r0, r3
 800aae8:	2301      	movs	r3, #1
 800aaea:	4083      	lsls	r3, r0
 800aaec:	4313      	orrs	r3, r2
 800aaee:	602b      	str	r3, [r5, #0]
 800aaf0:	9703      	str	r7, [sp, #12]
 800aaf2:	e7cb      	b.n	800aa8c <_vfiprintf_r+0xe4>
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	1d19      	adds	r1, r3, #4
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	9107      	str	r1, [sp, #28]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	db01      	blt.n	800ab04 <_vfiprintf_r+0x15c>
 800ab00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab02:	e004      	b.n	800ab0e <_vfiprintf_r+0x166>
 800ab04:	425b      	negs	r3, r3
 800ab06:	60eb      	str	r3, [r5, #12]
 800ab08:	2302      	movs	r3, #2
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	602b      	str	r3, [r5, #0]
 800ab0e:	783b      	ldrb	r3, [r7, #0]
 800ab10:	2b2e      	cmp	r3, #46	; 0x2e
 800ab12:	d10a      	bne.n	800ab2a <_vfiprintf_r+0x182>
 800ab14:	787b      	ldrb	r3, [r7, #1]
 800ab16:	2b2a      	cmp	r3, #42	; 0x2a
 800ab18:	d137      	bne.n	800ab8a <_vfiprintf_r+0x1e2>
 800ab1a:	9b07      	ldr	r3, [sp, #28]
 800ab1c:	3702      	adds	r7, #2
 800ab1e:	1d1a      	adds	r2, r3, #4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	9207      	str	r2, [sp, #28]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	db2d      	blt.n	800ab84 <_vfiprintf_r+0x1dc>
 800ab28:	9309      	str	r3, [sp, #36]	; 0x24
 800ab2a:	2203      	movs	r2, #3
 800ab2c:	7839      	ldrb	r1, [r7, #0]
 800ab2e:	4837      	ldr	r0, [pc, #220]	; (800ac0c <_vfiprintf_r+0x264>)
 800ab30:	f7ff f84e 	bl	8009bd0 <memchr>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d007      	beq.n	800ab48 <_vfiprintf_r+0x1a0>
 800ab38:	4b34      	ldr	r3, [pc, #208]	; (800ac0c <_vfiprintf_r+0x264>)
 800ab3a:	682a      	ldr	r2, [r5, #0]
 800ab3c:	1ac0      	subs	r0, r0, r3
 800ab3e:	2340      	movs	r3, #64	; 0x40
 800ab40:	4083      	lsls	r3, r0
 800ab42:	4313      	orrs	r3, r2
 800ab44:	3701      	adds	r7, #1
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	7839      	ldrb	r1, [r7, #0]
 800ab4a:	1c7b      	adds	r3, r7, #1
 800ab4c:	2206      	movs	r2, #6
 800ab4e:	4830      	ldr	r0, [pc, #192]	; (800ac10 <_vfiprintf_r+0x268>)
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	7629      	strb	r1, [r5, #24]
 800ab54:	f7ff f83c 	bl	8009bd0 <memchr>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d045      	beq.n	800abe8 <_vfiprintf_r+0x240>
 800ab5c:	4b2d      	ldr	r3, [pc, #180]	; (800ac14 <_vfiprintf_r+0x26c>)
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d127      	bne.n	800abb2 <_vfiprintf_r+0x20a>
 800ab62:	2207      	movs	r2, #7
 800ab64:	9b07      	ldr	r3, [sp, #28]
 800ab66:	3307      	adds	r3, #7
 800ab68:	4393      	bics	r3, r2
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	9307      	str	r3, [sp, #28]
 800ab6e:	696b      	ldr	r3, [r5, #20]
 800ab70:	9a04      	ldr	r2, [sp, #16]
 800ab72:	189b      	adds	r3, r3, r2
 800ab74:	616b      	str	r3, [r5, #20]
 800ab76:	e75d      	b.n	800aa34 <_vfiprintf_r+0x8c>
 800ab78:	210a      	movs	r1, #10
 800ab7a:	434b      	muls	r3, r1
 800ab7c:	4667      	mov	r7, ip
 800ab7e:	189b      	adds	r3, r3, r2
 800ab80:	3909      	subs	r1, #9
 800ab82:	e7a3      	b.n	800aacc <_vfiprintf_r+0x124>
 800ab84:	2301      	movs	r3, #1
 800ab86:	425b      	negs	r3, r3
 800ab88:	e7ce      	b.n	800ab28 <_vfiprintf_r+0x180>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	001a      	movs	r2, r3
 800ab8e:	3701      	adds	r7, #1
 800ab90:	606b      	str	r3, [r5, #4]
 800ab92:	7839      	ldrb	r1, [r7, #0]
 800ab94:	1c78      	adds	r0, r7, #1
 800ab96:	3930      	subs	r1, #48	; 0x30
 800ab98:	4684      	mov	ip, r0
 800ab9a:	2909      	cmp	r1, #9
 800ab9c:	d903      	bls.n	800aba6 <_vfiprintf_r+0x1fe>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d0c3      	beq.n	800ab2a <_vfiprintf_r+0x182>
 800aba2:	9209      	str	r2, [sp, #36]	; 0x24
 800aba4:	e7c1      	b.n	800ab2a <_vfiprintf_r+0x182>
 800aba6:	230a      	movs	r3, #10
 800aba8:	435a      	muls	r2, r3
 800abaa:	4667      	mov	r7, ip
 800abac:	1852      	adds	r2, r2, r1
 800abae:	3b09      	subs	r3, #9
 800abb0:	e7ef      	b.n	800ab92 <_vfiprintf_r+0x1ea>
 800abb2:	ab07      	add	r3, sp, #28
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	0022      	movs	r2, r4
 800abb8:	0029      	movs	r1, r5
 800abba:	0030      	movs	r0, r6
 800abbc:	4b16      	ldr	r3, [pc, #88]	; (800ac18 <_vfiprintf_r+0x270>)
 800abbe:	f7fd fd6f 	bl	80086a0 <_printf_float>
 800abc2:	9004      	str	r0, [sp, #16]
 800abc4:	9b04      	ldr	r3, [sp, #16]
 800abc6:	3301      	adds	r3, #1
 800abc8:	d1d1      	bne.n	800ab6e <_vfiprintf_r+0x1c6>
 800abca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abcc:	07db      	lsls	r3, r3, #31
 800abce:	d405      	bmi.n	800abdc <_vfiprintf_r+0x234>
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	059b      	lsls	r3, r3, #22
 800abd4:	d402      	bmi.n	800abdc <_vfiprintf_r+0x234>
 800abd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abd8:	f000 fad4 	bl	800b184 <__retarget_lock_release_recursive>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	065b      	lsls	r3, r3, #25
 800abe0:	d500      	bpl.n	800abe4 <_vfiprintf_r+0x23c>
 800abe2:	e70a      	b.n	800a9fa <_vfiprintf_r+0x52>
 800abe4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800abe6:	e70a      	b.n	800a9fe <_vfiprintf_r+0x56>
 800abe8:	ab07      	add	r3, sp, #28
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	0022      	movs	r2, r4
 800abee:	0029      	movs	r1, r5
 800abf0:	0030      	movs	r0, r6
 800abf2:	4b09      	ldr	r3, [pc, #36]	; (800ac18 <_vfiprintf_r+0x270>)
 800abf4:	f7fe f806 	bl	8008c04 <_printf_i>
 800abf8:	e7e3      	b.n	800abc2 <_vfiprintf_r+0x21a>
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	0800b9ec 	.word	0x0800b9ec
 800ac00:	0800ba0c 	.word	0x0800ba0c
 800ac04:	0800b9cc 	.word	0x0800b9cc
 800ac08:	0800b874 	.word	0x0800b874
 800ac0c:	0800b87a 	.word	0x0800b87a
 800ac10:	0800b87e 	.word	0x0800b87e
 800ac14:	080086a1 	.word	0x080086a1
 800ac18:	0800a985 	.word	0x0800a985

0800ac1c <__swbuf_r>:
 800ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1e:	0005      	movs	r5, r0
 800ac20:	000e      	movs	r6, r1
 800ac22:	0014      	movs	r4, r2
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d004      	beq.n	800ac32 <__swbuf_r+0x16>
 800ac28:	6983      	ldr	r3, [r0, #24]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <__swbuf_r+0x16>
 800ac2e:	f000 fa07 	bl	800b040 <__sinit>
 800ac32:	4b22      	ldr	r3, [pc, #136]	; (800acbc <__swbuf_r+0xa0>)
 800ac34:	429c      	cmp	r4, r3
 800ac36:	d12e      	bne.n	800ac96 <__swbuf_r+0x7a>
 800ac38:	686c      	ldr	r4, [r5, #4]
 800ac3a:	69a3      	ldr	r3, [r4, #24]
 800ac3c:	60a3      	str	r3, [r4, #8]
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	071b      	lsls	r3, r3, #28
 800ac42:	d532      	bpl.n	800acaa <__swbuf_r+0x8e>
 800ac44:	6923      	ldr	r3, [r4, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d02f      	beq.n	800acaa <__swbuf_r+0x8e>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	6922      	ldr	r2, [r4, #16]
 800ac4e:	b2f7      	uxtb	r7, r6
 800ac50:	1a98      	subs	r0, r3, r2
 800ac52:	6963      	ldr	r3, [r4, #20]
 800ac54:	b2f6      	uxtb	r6, r6
 800ac56:	4283      	cmp	r3, r0
 800ac58:	dc05      	bgt.n	800ac66 <__swbuf_r+0x4a>
 800ac5a:	0021      	movs	r1, r4
 800ac5c:	0028      	movs	r0, r5
 800ac5e:	f000 f94d 	bl	800aefc <_fflush_r>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d127      	bne.n	800acb6 <__swbuf_r+0x9a>
 800ac66:	68a3      	ldr	r3, [r4, #8]
 800ac68:	3001      	adds	r0, #1
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	60a3      	str	r3, [r4, #8]
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	6022      	str	r2, [r4, #0]
 800ac74:	701f      	strb	r7, [r3, #0]
 800ac76:	6963      	ldr	r3, [r4, #20]
 800ac78:	4283      	cmp	r3, r0
 800ac7a:	d004      	beq.n	800ac86 <__swbuf_r+0x6a>
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	07db      	lsls	r3, r3, #31
 800ac80:	d507      	bpl.n	800ac92 <__swbuf_r+0x76>
 800ac82:	2e0a      	cmp	r6, #10
 800ac84:	d105      	bne.n	800ac92 <__swbuf_r+0x76>
 800ac86:	0021      	movs	r1, r4
 800ac88:	0028      	movs	r0, r5
 800ac8a:	f000 f937 	bl	800aefc <_fflush_r>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d111      	bne.n	800acb6 <__swbuf_r+0x9a>
 800ac92:	0030      	movs	r0, r6
 800ac94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac96:	4b0a      	ldr	r3, [pc, #40]	; (800acc0 <__swbuf_r+0xa4>)
 800ac98:	429c      	cmp	r4, r3
 800ac9a:	d101      	bne.n	800aca0 <__swbuf_r+0x84>
 800ac9c:	68ac      	ldr	r4, [r5, #8]
 800ac9e:	e7cc      	b.n	800ac3a <__swbuf_r+0x1e>
 800aca0:	4b08      	ldr	r3, [pc, #32]	; (800acc4 <__swbuf_r+0xa8>)
 800aca2:	429c      	cmp	r4, r3
 800aca4:	d1c9      	bne.n	800ac3a <__swbuf_r+0x1e>
 800aca6:	68ec      	ldr	r4, [r5, #12]
 800aca8:	e7c7      	b.n	800ac3a <__swbuf_r+0x1e>
 800acaa:	0021      	movs	r1, r4
 800acac:	0028      	movs	r0, r5
 800acae:	f000 f819 	bl	800ace4 <__swsetup_r>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d0c9      	beq.n	800ac4a <__swbuf_r+0x2e>
 800acb6:	2601      	movs	r6, #1
 800acb8:	4276      	negs	r6, r6
 800acba:	e7ea      	b.n	800ac92 <__swbuf_r+0x76>
 800acbc:	0800b9ec 	.word	0x0800b9ec
 800acc0:	0800ba0c 	.word	0x0800ba0c
 800acc4:	0800b9cc 	.word	0x0800b9cc

0800acc8 <__ascii_wctomb>:
 800acc8:	0003      	movs	r3, r0
 800acca:	1e08      	subs	r0, r1, #0
 800accc:	d005      	beq.n	800acda <__ascii_wctomb+0x12>
 800acce:	2aff      	cmp	r2, #255	; 0xff
 800acd0:	d904      	bls.n	800acdc <__ascii_wctomb+0x14>
 800acd2:	228a      	movs	r2, #138	; 0x8a
 800acd4:	2001      	movs	r0, #1
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	4240      	negs	r0, r0
 800acda:	4770      	bx	lr
 800acdc:	2001      	movs	r0, #1
 800acde:	700a      	strb	r2, [r1, #0]
 800ace0:	e7fb      	b.n	800acda <__ascii_wctomb+0x12>
	...

0800ace4 <__swsetup_r>:
 800ace4:	4b37      	ldr	r3, [pc, #220]	; (800adc4 <__swsetup_r+0xe0>)
 800ace6:	b570      	push	{r4, r5, r6, lr}
 800ace8:	681d      	ldr	r5, [r3, #0]
 800acea:	0006      	movs	r6, r0
 800acec:	000c      	movs	r4, r1
 800acee:	2d00      	cmp	r5, #0
 800acf0:	d005      	beq.n	800acfe <__swsetup_r+0x1a>
 800acf2:	69ab      	ldr	r3, [r5, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d102      	bne.n	800acfe <__swsetup_r+0x1a>
 800acf8:	0028      	movs	r0, r5
 800acfa:	f000 f9a1 	bl	800b040 <__sinit>
 800acfe:	4b32      	ldr	r3, [pc, #200]	; (800adc8 <__swsetup_r+0xe4>)
 800ad00:	429c      	cmp	r4, r3
 800ad02:	d10f      	bne.n	800ad24 <__swsetup_r+0x40>
 800ad04:	686c      	ldr	r4, [r5, #4]
 800ad06:	230c      	movs	r3, #12
 800ad08:	5ee2      	ldrsh	r2, [r4, r3]
 800ad0a:	b293      	uxth	r3, r2
 800ad0c:	0711      	lsls	r1, r2, #28
 800ad0e:	d42d      	bmi.n	800ad6c <__swsetup_r+0x88>
 800ad10:	06d9      	lsls	r1, r3, #27
 800ad12:	d411      	bmi.n	800ad38 <__swsetup_r+0x54>
 800ad14:	2309      	movs	r3, #9
 800ad16:	2001      	movs	r0, #1
 800ad18:	6033      	str	r3, [r6, #0]
 800ad1a:	3337      	adds	r3, #55	; 0x37
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	4240      	negs	r0, r0
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	4b29      	ldr	r3, [pc, #164]	; (800adcc <__swsetup_r+0xe8>)
 800ad26:	429c      	cmp	r4, r3
 800ad28:	d101      	bne.n	800ad2e <__swsetup_r+0x4a>
 800ad2a:	68ac      	ldr	r4, [r5, #8]
 800ad2c:	e7eb      	b.n	800ad06 <__swsetup_r+0x22>
 800ad2e:	4b28      	ldr	r3, [pc, #160]	; (800add0 <__swsetup_r+0xec>)
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d1e8      	bne.n	800ad06 <__swsetup_r+0x22>
 800ad34:	68ec      	ldr	r4, [r5, #12]
 800ad36:	e7e6      	b.n	800ad06 <__swsetup_r+0x22>
 800ad38:	075b      	lsls	r3, r3, #29
 800ad3a:	d513      	bpl.n	800ad64 <__swsetup_r+0x80>
 800ad3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad3e:	2900      	cmp	r1, #0
 800ad40:	d008      	beq.n	800ad54 <__swsetup_r+0x70>
 800ad42:	0023      	movs	r3, r4
 800ad44:	3344      	adds	r3, #68	; 0x44
 800ad46:	4299      	cmp	r1, r3
 800ad48:	d002      	beq.n	800ad50 <__swsetup_r+0x6c>
 800ad4a:	0030      	movs	r0, r6
 800ad4c:	f7ff fb1c 	bl	800a388 <_free_r>
 800ad50:	2300      	movs	r3, #0
 800ad52:	6363      	str	r3, [r4, #52]	; 0x34
 800ad54:	2224      	movs	r2, #36	; 0x24
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	4393      	bics	r3, r2
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	6063      	str	r3, [r4, #4]
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	6023      	str	r3, [r4, #0]
 800ad64:	2308      	movs	r3, #8
 800ad66:	89a2      	ldrh	r2, [r4, #12]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	81a3      	strh	r3, [r4, #12]
 800ad6c:	6923      	ldr	r3, [r4, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10b      	bne.n	800ad8a <__swsetup_r+0xa6>
 800ad72:	21a0      	movs	r1, #160	; 0xa0
 800ad74:	2280      	movs	r2, #128	; 0x80
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	0089      	lsls	r1, r1, #2
 800ad7a:	0092      	lsls	r2, r2, #2
 800ad7c:	400b      	ands	r3, r1
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d003      	beq.n	800ad8a <__swsetup_r+0xa6>
 800ad82:	0021      	movs	r1, r4
 800ad84:	0030      	movs	r0, r6
 800ad86:	f000 fa27 	bl	800b1d8 <__smakebuf_r>
 800ad8a:	220c      	movs	r2, #12
 800ad8c:	5ea3      	ldrsh	r3, [r4, r2]
 800ad8e:	2001      	movs	r0, #1
 800ad90:	001a      	movs	r2, r3
 800ad92:	b299      	uxth	r1, r3
 800ad94:	4002      	ands	r2, r0
 800ad96:	4203      	tst	r3, r0
 800ad98:	d00f      	beq.n	800adba <__swsetup_r+0xd6>
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	60a2      	str	r2, [r4, #8]
 800ad9e:	6962      	ldr	r2, [r4, #20]
 800ada0:	4252      	negs	r2, r2
 800ada2:	61a2      	str	r2, [r4, #24]
 800ada4:	2000      	movs	r0, #0
 800ada6:	6922      	ldr	r2, [r4, #16]
 800ada8:	4282      	cmp	r2, r0
 800adaa:	d1ba      	bne.n	800ad22 <__swsetup_r+0x3e>
 800adac:	060a      	lsls	r2, r1, #24
 800adae:	d5b8      	bpl.n	800ad22 <__swsetup_r+0x3e>
 800adb0:	2240      	movs	r2, #64	; 0x40
 800adb2:	4313      	orrs	r3, r2
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	3801      	subs	r0, #1
 800adb8:	e7b3      	b.n	800ad22 <__swsetup_r+0x3e>
 800adba:	0788      	lsls	r0, r1, #30
 800adbc:	d400      	bmi.n	800adc0 <__swsetup_r+0xdc>
 800adbe:	6962      	ldr	r2, [r4, #20]
 800adc0:	60a2      	str	r2, [r4, #8]
 800adc2:	e7ef      	b.n	800ada4 <__swsetup_r+0xc0>
 800adc4:	2000000c 	.word	0x2000000c
 800adc8:	0800b9ec 	.word	0x0800b9ec
 800adcc:	0800ba0c 	.word	0x0800ba0c
 800add0:	0800b9cc 	.word	0x0800b9cc

0800add4 <abort>:
 800add4:	2006      	movs	r0, #6
 800add6:	b510      	push	{r4, lr}
 800add8:	f000 fa74 	bl	800b2c4 <raise>
 800addc:	2001      	movs	r0, #1
 800adde:	f7f8 fe2d 	bl	8003a3c <_exit>
	...

0800ade4 <__sflush_r>:
 800ade4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ade6:	898b      	ldrh	r3, [r1, #12]
 800ade8:	0005      	movs	r5, r0
 800adea:	000c      	movs	r4, r1
 800adec:	071a      	lsls	r2, r3, #28
 800adee:	d45f      	bmi.n	800aeb0 <__sflush_r+0xcc>
 800adf0:	684a      	ldr	r2, [r1, #4]
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	dc04      	bgt.n	800ae00 <__sflush_r+0x1c>
 800adf6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800adf8:	2a00      	cmp	r2, #0
 800adfa:	dc01      	bgt.n	800ae00 <__sflush_r+0x1c>
 800adfc:	2000      	movs	r0, #0
 800adfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ae02:	2f00      	cmp	r7, #0
 800ae04:	d0fa      	beq.n	800adfc <__sflush_r+0x18>
 800ae06:	2200      	movs	r2, #0
 800ae08:	2180      	movs	r1, #128	; 0x80
 800ae0a:	682e      	ldr	r6, [r5, #0]
 800ae0c:	602a      	str	r2, [r5, #0]
 800ae0e:	001a      	movs	r2, r3
 800ae10:	0149      	lsls	r1, r1, #5
 800ae12:	400a      	ands	r2, r1
 800ae14:	420b      	tst	r3, r1
 800ae16:	d034      	beq.n	800ae82 <__sflush_r+0x9e>
 800ae18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	075b      	lsls	r3, r3, #29
 800ae1e:	d506      	bpl.n	800ae2e <__sflush_r+0x4a>
 800ae20:	6863      	ldr	r3, [r4, #4]
 800ae22:	1ac0      	subs	r0, r0, r3
 800ae24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <__sflush_r+0x4a>
 800ae2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae2c:	1ac0      	subs	r0, r0, r3
 800ae2e:	0002      	movs	r2, r0
 800ae30:	6a21      	ldr	r1, [r4, #32]
 800ae32:	2300      	movs	r3, #0
 800ae34:	0028      	movs	r0, r5
 800ae36:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ae38:	47b8      	blx	r7
 800ae3a:	89a1      	ldrh	r1, [r4, #12]
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d106      	bne.n	800ae4e <__sflush_r+0x6a>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	2b1d      	cmp	r3, #29
 800ae44:	d831      	bhi.n	800aeaa <__sflush_r+0xc6>
 800ae46:	4a2c      	ldr	r2, [pc, #176]	; (800aef8 <__sflush_r+0x114>)
 800ae48:	40da      	lsrs	r2, r3
 800ae4a:	07d3      	lsls	r3, r2, #31
 800ae4c:	d52d      	bpl.n	800aeaa <__sflush_r+0xc6>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	6063      	str	r3, [r4, #4]
 800ae52:	6923      	ldr	r3, [r4, #16]
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	04cb      	lsls	r3, r1, #19
 800ae58:	d505      	bpl.n	800ae66 <__sflush_r+0x82>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	d102      	bne.n	800ae64 <__sflush_r+0x80>
 800ae5e:	682b      	ldr	r3, [r5, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d100      	bne.n	800ae66 <__sflush_r+0x82>
 800ae64:	6560      	str	r0, [r4, #84]	; 0x54
 800ae66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae68:	602e      	str	r6, [r5, #0]
 800ae6a:	2900      	cmp	r1, #0
 800ae6c:	d0c6      	beq.n	800adfc <__sflush_r+0x18>
 800ae6e:	0023      	movs	r3, r4
 800ae70:	3344      	adds	r3, #68	; 0x44
 800ae72:	4299      	cmp	r1, r3
 800ae74:	d002      	beq.n	800ae7c <__sflush_r+0x98>
 800ae76:	0028      	movs	r0, r5
 800ae78:	f7ff fa86 	bl	800a388 <_free_r>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	6360      	str	r0, [r4, #52]	; 0x34
 800ae80:	e7bd      	b.n	800adfe <__sflush_r+0x1a>
 800ae82:	2301      	movs	r3, #1
 800ae84:	0028      	movs	r0, r5
 800ae86:	6a21      	ldr	r1, [r4, #32]
 800ae88:	47b8      	blx	r7
 800ae8a:	1c43      	adds	r3, r0, #1
 800ae8c:	d1c5      	bne.n	800ae1a <__sflush_r+0x36>
 800ae8e:	682b      	ldr	r3, [r5, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d0c2      	beq.n	800ae1a <__sflush_r+0x36>
 800ae94:	2b1d      	cmp	r3, #29
 800ae96:	d001      	beq.n	800ae9c <__sflush_r+0xb8>
 800ae98:	2b16      	cmp	r3, #22
 800ae9a:	d101      	bne.n	800aea0 <__sflush_r+0xbc>
 800ae9c:	602e      	str	r6, [r5, #0]
 800ae9e:	e7ad      	b.n	800adfc <__sflush_r+0x18>
 800aea0:	2340      	movs	r3, #64	; 0x40
 800aea2:	89a2      	ldrh	r2, [r4, #12]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	81a3      	strh	r3, [r4, #12]
 800aea8:	e7a9      	b.n	800adfe <__sflush_r+0x1a>
 800aeaa:	2340      	movs	r3, #64	; 0x40
 800aeac:	430b      	orrs	r3, r1
 800aeae:	e7fa      	b.n	800aea6 <__sflush_r+0xc2>
 800aeb0:	690f      	ldr	r7, [r1, #16]
 800aeb2:	2f00      	cmp	r7, #0
 800aeb4:	d0a2      	beq.n	800adfc <__sflush_r+0x18>
 800aeb6:	680a      	ldr	r2, [r1, #0]
 800aeb8:	600f      	str	r7, [r1, #0]
 800aeba:	1bd2      	subs	r2, r2, r7
 800aebc:	9201      	str	r2, [sp, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	079b      	lsls	r3, r3, #30
 800aec2:	d100      	bne.n	800aec6 <__sflush_r+0xe2>
 800aec4:	694a      	ldr	r2, [r1, #20]
 800aec6:	60a2      	str	r2, [r4, #8]
 800aec8:	9b01      	ldr	r3, [sp, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dc00      	bgt.n	800aed0 <__sflush_r+0xec>
 800aece:	e795      	b.n	800adfc <__sflush_r+0x18>
 800aed0:	003a      	movs	r2, r7
 800aed2:	0028      	movs	r0, r5
 800aed4:	9b01      	ldr	r3, [sp, #4]
 800aed6:	6a21      	ldr	r1, [r4, #32]
 800aed8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aeda:	47b0      	blx	r6
 800aedc:	2800      	cmp	r0, #0
 800aede:	dc06      	bgt.n	800aeee <__sflush_r+0x10a>
 800aee0:	2340      	movs	r3, #64	; 0x40
 800aee2:	2001      	movs	r0, #1
 800aee4:	89a2      	ldrh	r2, [r4, #12]
 800aee6:	4240      	negs	r0, r0
 800aee8:	4313      	orrs	r3, r2
 800aeea:	81a3      	strh	r3, [r4, #12]
 800aeec:	e787      	b.n	800adfe <__sflush_r+0x1a>
 800aeee:	9b01      	ldr	r3, [sp, #4]
 800aef0:	183f      	adds	r7, r7, r0
 800aef2:	1a1b      	subs	r3, r3, r0
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	e7e7      	b.n	800aec8 <__sflush_r+0xe4>
 800aef8:	20400001 	.word	0x20400001

0800aefc <_fflush_r>:
 800aefc:	690b      	ldr	r3, [r1, #16]
 800aefe:	b570      	push	{r4, r5, r6, lr}
 800af00:	0005      	movs	r5, r0
 800af02:	000c      	movs	r4, r1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d102      	bne.n	800af0e <_fflush_r+0x12>
 800af08:	2500      	movs	r5, #0
 800af0a:	0028      	movs	r0, r5
 800af0c:	bd70      	pop	{r4, r5, r6, pc}
 800af0e:	2800      	cmp	r0, #0
 800af10:	d004      	beq.n	800af1c <_fflush_r+0x20>
 800af12:	6983      	ldr	r3, [r0, #24]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <_fflush_r+0x20>
 800af18:	f000 f892 	bl	800b040 <__sinit>
 800af1c:	4b14      	ldr	r3, [pc, #80]	; (800af70 <_fflush_r+0x74>)
 800af1e:	429c      	cmp	r4, r3
 800af20:	d11b      	bne.n	800af5a <_fflush_r+0x5e>
 800af22:	686c      	ldr	r4, [r5, #4]
 800af24:	220c      	movs	r2, #12
 800af26:	5ea3      	ldrsh	r3, [r4, r2]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0ed      	beq.n	800af08 <_fflush_r+0xc>
 800af2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af2e:	07d2      	lsls	r2, r2, #31
 800af30:	d404      	bmi.n	800af3c <_fflush_r+0x40>
 800af32:	059b      	lsls	r3, r3, #22
 800af34:	d402      	bmi.n	800af3c <_fflush_r+0x40>
 800af36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af38:	f000 f923 	bl	800b182 <__retarget_lock_acquire_recursive>
 800af3c:	0028      	movs	r0, r5
 800af3e:	0021      	movs	r1, r4
 800af40:	f7ff ff50 	bl	800ade4 <__sflush_r>
 800af44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af46:	0005      	movs	r5, r0
 800af48:	07db      	lsls	r3, r3, #31
 800af4a:	d4de      	bmi.n	800af0a <_fflush_r+0xe>
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	059b      	lsls	r3, r3, #22
 800af50:	d4db      	bmi.n	800af0a <_fflush_r+0xe>
 800af52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af54:	f000 f916 	bl	800b184 <__retarget_lock_release_recursive>
 800af58:	e7d7      	b.n	800af0a <_fflush_r+0xe>
 800af5a:	4b06      	ldr	r3, [pc, #24]	; (800af74 <_fflush_r+0x78>)
 800af5c:	429c      	cmp	r4, r3
 800af5e:	d101      	bne.n	800af64 <_fflush_r+0x68>
 800af60:	68ac      	ldr	r4, [r5, #8]
 800af62:	e7df      	b.n	800af24 <_fflush_r+0x28>
 800af64:	4b04      	ldr	r3, [pc, #16]	; (800af78 <_fflush_r+0x7c>)
 800af66:	429c      	cmp	r4, r3
 800af68:	d1dc      	bne.n	800af24 <_fflush_r+0x28>
 800af6a:	68ec      	ldr	r4, [r5, #12]
 800af6c:	e7da      	b.n	800af24 <_fflush_r+0x28>
 800af6e:	46c0      	nop			; (mov r8, r8)
 800af70:	0800b9ec 	.word	0x0800b9ec
 800af74:	0800ba0c 	.word	0x0800ba0c
 800af78:	0800b9cc 	.word	0x0800b9cc

0800af7c <std>:
 800af7c:	2300      	movs	r3, #0
 800af7e:	b510      	push	{r4, lr}
 800af80:	0004      	movs	r4, r0
 800af82:	6003      	str	r3, [r0, #0]
 800af84:	6043      	str	r3, [r0, #4]
 800af86:	6083      	str	r3, [r0, #8]
 800af88:	8181      	strh	r1, [r0, #12]
 800af8a:	6643      	str	r3, [r0, #100]	; 0x64
 800af8c:	0019      	movs	r1, r3
 800af8e:	81c2      	strh	r2, [r0, #14]
 800af90:	6103      	str	r3, [r0, #16]
 800af92:	6143      	str	r3, [r0, #20]
 800af94:	6183      	str	r3, [r0, #24]
 800af96:	2208      	movs	r2, #8
 800af98:	305c      	adds	r0, #92	; 0x5c
 800af9a:	f7fd facf 	bl	800853c <memset>
 800af9e:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <std+0x38>)
 800afa0:	6224      	str	r4, [r4, #32]
 800afa2:	6263      	str	r3, [r4, #36]	; 0x24
 800afa4:	4b04      	ldr	r3, [pc, #16]	; (800afb8 <std+0x3c>)
 800afa6:	62a3      	str	r3, [r4, #40]	; 0x28
 800afa8:	4b04      	ldr	r3, [pc, #16]	; (800afbc <std+0x40>)
 800afaa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afac:	4b04      	ldr	r3, [pc, #16]	; (800afc0 <std+0x44>)
 800afae:	6323      	str	r3, [r4, #48]	; 0x30
 800afb0:	bd10      	pop	{r4, pc}
 800afb2:	46c0      	nop			; (mov r8, r8)
 800afb4:	0800b305 	.word	0x0800b305
 800afb8:	0800b32d 	.word	0x0800b32d
 800afbc:	0800b365 	.word	0x0800b365
 800afc0:	0800b391 	.word	0x0800b391

0800afc4 <_cleanup_r>:
 800afc4:	b510      	push	{r4, lr}
 800afc6:	4902      	ldr	r1, [pc, #8]	; (800afd0 <_cleanup_r+0xc>)
 800afc8:	f000 f8ba 	bl	800b140 <_fwalk_reent>
 800afcc:	bd10      	pop	{r4, pc}
 800afce:	46c0      	nop			; (mov r8, r8)
 800afd0:	0800aefd 	.word	0x0800aefd

0800afd4 <__sfmoreglue>:
 800afd4:	b570      	push	{r4, r5, r6, lr}
 800afd6:	2568      	movs	r5, #104	; 0x68
 800afd8:	1e4a      	subs	r2, r1, #1
 800afda:	4355      	muls	r5, r2
 800afdc:	000e      	movs	r6, r1
 800afde:	0029      	movs	r1, r5
 800afe0:	3174      	adds	r1, #116	; 0x74
 800afe2:	f7ff fa3d 	bl	800a460 <_malloc_r>
 800afe6:	1e04      	subs	r4, r0, #0
 800afe8:	d008      	beq.n	800affc <__sfmoreglue+0x28>
 800afea:	2100      	movs	r1, #0
 800afec:	002a      	movs	r2, r5
 800afee:	6001      	str	r1, [r0, #0]
 800aff0:	6046      	str	r6, [r0, #4]
 800aff2:	300c      	adds	r0, #12
 800aff4:	60a0      	str	r0, [r4, #8]
 800aff6:	3268      	adds	r2, #104	; 0x68
 800aff8:	f7fd faa0 	bl	800853c <memset>
 800affc:	0020      	movs	r0, r4
 800affe:	bd70      	pop	{r4, r5, r6, pc}

0800b000 <__sfp_lock_acquire>:
 800b000:	b510      	push	{r4, lr}
 800b002:	4802      	ldr	r0, [pc, #8]	; (800b00c <__sfp_lock_acquire+0xc>)
 800b004:	f000 f8bd 	bl	800b182 <__retarget_lock_acquire_recursive>
 800b008:	bd10      	pop	{r4, pc}
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	200003c5 	.word	0x200003c5

0800b010 <__sfp_lock_release>:
 800b010:	b510      	push	{r4, lr}
 800b012:	4802      	ldr	r0, [pc, #8]	; (800b01c <__sfp_lock_release+0xc>)
 800b014:	f000 f8b6 	bl	800b184 <__retarget_lock_release_recursive>
 800b018:	bd10      	pop	{r4, pc}
 800b01a:	46c0      	nop			; (mov r8, r8)
 800b01c:	200003c5 	.word	0x200003c5

0800b020 <__sinit_lock_acquire>:
 800b020:	b510      	push	{r4, lr}
 800b022:	4802      	ldr	r0, [pc, #8]	; (800b02c <__sinit_lock_acquire+0xc>)
 800b024:	f000 f8ad 	bl	800b182 <__retarget_lock_acquire_recursive>
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	46c0      	nop			; (mov r8, r8)
 800b02c:	200003c6 	.word	0x200003c6

0800b030 <__sinit_lock_release>:
 800b030:	b510      	push	{r4, lr}
 800b032:	4802      	ldr	r0, [pc, #8]	; (800b03c <__sinit_lock_release+0xc>)
 800b034:	f000 f8a6 	bl	800b184 <__retarget_lock_release_recursive>
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	200003c6 	.word	0x200003c6

0800b040 <__sinit>:
 800b040:	b513      	push	{r0, r1, r4, lr}
 800b042:	0004      	movs	r4, r0
 800b044:	f7ff ffec 	bl	800b020 <__sinit_lock_acquire>
 800b048:	69a3      	ldr	r3, [r4, #24]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <__sinit+0x14>
 800b04e:	f7ff ffef 	bl	800b030 <__sinit_lock_release>
 800b052:	bd13      	pop	{r0, r1, r4, pc}
 800b054:	64a3      	str	r3, [r4, #72]	; 0x48
 800b056:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b058:	6523      	str	r3, [r4, #80]	; 0x50
 800b05a:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <__sinit+0x68>)
 800b05c:	4a13      	ldr	r2, [pc, #76]	; (800b0ac <__sinit+0x6c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	62a2      	str	r2, [r4, #40]	; 0x28
 800b062:	9301      	str	r3, [sp, #4]
 800b064:	42a3      	cmp	r3, r4
 800b066:	d101      	bne.n	800b06c <__sinit+0x2c>
 800b068:	2301      	movs	r3, #1
 800b06a:	61a3      	str	r3, [r4, #24]
 800b06c:	0020      	movs	r0, r4
 800b06e:	f000 f81f 	bl	800b0b0 <__sfp>
 800b072:	6060      	str	r0, [r4, #4]
 800b074:	0020      	movs	r0, r4
 800b076:	f000 f81b 	bl	800b0b0 <__sfp>
 800b07a:	60a0      	str	r0, [r4, #8]
 800b07c:	0020      	movs	r0, r4
 800b07e:	f000 f817 	bl	800b0b0 <__sfp>
 800b082:	2200      	movs	r2, #0
 800b084:	2104      	movs	r1, #4
 800b086:	60e0      	str	r0, [r4, #12]
 800b088:	6860      	ldr	r0, [r4, #4]
 800b08a:	f7ff ff77 	bl	800af7c <std>
 800b08e:	2201      	movs	r2, #1
 800b090:	2109      	movs	r1, #9
 800b092:	68a0      	ldr	r0, [r4, #8]
 800b094:	f7ff ff72 	bl	800af7c <std>
 800b098:	2202      	movs	r2, #2
 800b09a:	2112      	movs	r1, #18
 800b09c:	68e0      	ldr	r0, [r4, #12]
 800b09e:	f7ff ff6d 	bl	800af7c <std>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	61a3      	str	r3, [r4, #24]
 800b0a6:	e7d2      	b.n	800b04e <__sinit+0xe>
 800b0a8:	0800b654 	.word	0x0800b654
 800b0ac:	0800afc5 	.word	0x0800afc5

0800b0b0 <__sfp>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	0007      	movs	r7, r0
 800b0b4:	f7ff ffa4 	bl	800b000 <__sfp_lock_acquire>
 800b0b8:	4b1f      	ldr	r3, [pc, #124]	; (800b138 <__sfp+0x88>)
 800b0ba:	681e      	ldr	r6, [r3, #0]
 800b0bc:	69b3      	ldr	r3, [r6, #24]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d102      	bne.n	800b0c8 <__sfp+0x18>
 800b0c2:	0030      	movs	r0, r6
 800b0c4:	f7ff ffbc 	bl	800b040 <__sinit>
 800b0c8:	3648      	adds	r6, #72	; 0x48
 800b0ca:	68b4      	ldr	r4, [r6, #8]
 800b0cc:	6873      	ldr	r3, [r6, #4]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	d504      	bpl.n	800b0dc <__sfp+0x2c>
 800b0d2:	6833      	ldr	r3, [r6, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d022      	beq.n	800b11e <__sfp+0x6e>
 800b0d8:	6836      	ldr	r6, [r6, #0]
 800b0da:	e7f6      	b.n	800b0ca <__sfp+0x1a>
 800b0dc:	220c      	movs	r2, #12
 800b0de:	5ea5      	ldrsh	r5, [r4, r2]
 800b0e0:	2d00      	cmp	r5, #0
 800b0e2:	d11a      	bne.n	800b11a <__sfp+0x6a>
 800b0e4:	0020      	movs	r0, r4
 800b0e6:	4b15      	ldr	r3, [pc, #84]	; (800b13c <__sfp+0x8c>)
 800b0e8:	3058      	adds	r0, #88	; 0x58
 800b0ea:	60e3      	str	r3, [r4, #12]
 800b0ec:	6665      	str	r5, [r4, #100]	; 0x64
 800b0ee:	f000 f847 	bl	800b180 <__retarget_lock_init_recursive>
 800b0f2:	f7ff ff8d 	bl	800b010 <__sfp_lock_release>
 800b0f6:	0020      	movs	r0, r4
 800b0f8:	2208      	movs	r2, #8
 800b0fa:	0029      	movs	r1, r5
 800b0fc:	6025      	str	r5, [r4, #0]
 800b0fe:	60a5      	str	r5, [r4, #8]
 800b100:	6065      	str	r5, [r4, #4]
 800b102:	6125      	str	r5, [r4, #16]
 800b104:	6165      	str	r5, [r4, #20]
 800b106:	61a5      	str	r5, [r4, #24]
 800b108:	305c      	adds	r0, #92	; 0x5c
 800b10a:	f7fd fa17 	bl	800853c <memset>
 800b10e:	6365      	str	r5, [r4, #52]	; 0x34
 800b110:	63a5      	str	r5, [r4, #56]	; 0x38
 800b112:	64a5      	str	r5, [r4, #72]	; 0x48
 800b114:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b116:	0020      	movs	r0, r4
 800b118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b11a:	3468      	adds	r4, #104	; 0x68
 800b11c:	e7d7      	b.n	800b0ce <__sfp+0x1e>
 800b11e:	2104      	movs	r1, #4
 800b120:	0038      	movs	r0, r7
 800b122:	f7ff ff57 	bl	800afd4 <__sfmoreglue>
 800b126:	1e04      	subs	r4, r0, #0
 800b128:	6030      	str	r0, [r6, #0]
 800b12a:	d1d5      	bne.n	800b0d8 <__sfp+0x28>
 800b12c:	f7ff ff70 	bl	800b010 <__sfp_lock_release>
 800b130:	230c      	movs	r3, #12
 800b132:	603b      	str	r3, [r7, #0]
 800b134:	e7ef      	b.n	800b116 <__sfp+0x66>
 800b136:	46c0      	nop			; (mov r8, r8)
 800b138:	0800b654 	.word	0x0800b654
 800b13c:	ffff0001 	.word	0xffff0001

0800b140 <_fwalk_reent>:
 800b140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b142:	0004      	movs	r4, r0
 800b144:	0006      	movs	r6, r0
 800b146:	2700      	movs	r7, #0
 800b148:	9101      	str	r1, [sp, #4]
 800b14a:	3448      	adds	r4, #72	; 0x48
 800b14c:	6863      	ldr	r3, [r4, #4]
 800b14e:	68a5      	ldr	r5, [r4, #8]
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	9b00      	ldr	r3, [sp, #0]
 800b154:	3b01      	subs	r3, #1
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	d504      	bpl.n	800b164 <_fwalk_reent+0x24>
 800b15a:	6824      	ldr	r4, [r4, #0]
 800b15c:	2c00      	cmp	r4, #0
 800b15e:	d1f5      	bne.n	800b14c <_fwalk_reent+0xc>
 800b160:	0038      	movs	r0, r7
 800b162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b164:	89ab      	ldrh	r3, [r5, #12]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d908      	bls.n	800b17c <_fwalk_reent+0x3c>
 800b16a:	220e      	movs	r2, #14
 800b16c:	5eab      	ldrsh	r3, [r5, r2]
 800b16e:	3301      	adds	r3, #1
 800b170:	d004      	beq.n	800b17c <_fwalk_reent+0x3c>
 800b172:	0029      	movs	r1, r5
 800b174:	0030      	movs	r0, r6
 800b176:	9b01      	ldr	r3, [sp, #4]
 800b178:	4798      	blx	r3
 800b17a:	4307      	orrs	r7, r0
 800b17c:	3568      	adds	r5, #104	; 0x68
 800b17e:	e7e8      	b.n	800b152 <_fwalk_reent+0x12>

0800b180 <__retarget_lock_init_recursive>:
 800b180:	4770      	bx	lr

0800b182 <__retarget_lock_acquire_recursive>:
 800b182:	4770      	bx	lr

0800b184 <__retarget_lock_release_recursive>:
 800b184:	4770      	bx	lr
	...

0800b188 <__swhatbuf_r>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	000e      	movs	r6, r1
 800b18c:	001d      	movs	r5, r3
 800b18e:	230e      	movs	r3, #14
 800b190:	5ec9      	ldrsh	r1, [r1, r3]
 800b192:	0014      	movs	r4, r2
 800b194:	b096      	sub	sp, #88	; 0x58
 800b196:	2900      	cmp	r1, #0
 800b198:	da08      	bge.n	800b1ac <__swhatbuf_r+0x24>
 800b19a:	220c      	movs	r2, #12
 800b19c:	5eb3      	ldrsh	r3, [r6, r2]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	602a      	str	r2, [r5, #0]
 800b1a2:	061b      	lsls	r3, r3, #24
 800b1a4:	d411      	bmi.n	800b1ca <__swhatbuf_r+0x42>
 800b1a6:	2380      	movs	r3, #128	; 0x80
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	e00f      	b.n	800b1cc <__swhatbuf_r+0x44>
 800b1ac:	466a      	mov	r2, sp
 800b1ae:	f000 f91b 	bl	800b3e8 <_fstat_r>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	dbf1      	blt.n	800b19a <__swhatbuf_r+0x12>
 800b1b6:	23f0      	movs	r3, #240	; 0xf0
 800b1b8:	9901      	ldr	r1, [sp, #4]
 800b1ba:	021b      	lsls	r3, r3, #8
 800b1bc:	4019      	ands	r1, r3
 800b1be:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <__swhatbuf_r+0x4c>)
 800b1c0:	18c9      	adds	r1, r1, r3
 800b1c2:	424b      	negs	r3, r1
 800b1c4:	4159      	adcs	r1, r3
 800b1c6:	6029      	str	r1, [r5, #0]
 800b1c8:	e7ed      	b.n	800b1a6 <__swhatbuf_r+0x1e>
 800b1ca:	2340      	movs	r3, #64	; 0x40
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	6023      	str	r3, [r4, #0]
 800b1d0:	b016      	add	sp, #88	; 0x58
 800b1d2:	bd70      	pop	{r4, r5, r6, pc}
 800b1d4:	ffffe000 	.word	0xffffe000

0800b1d8 <__smakebuf_r>:
 800b1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1da:	2602      	movs	r6, #2
 800b1dc:	898b      	ldrh	r3, [r1, #12]
 800b1de:	0005      	movs	r5, r0
 800b1e0:	000c      	movs	r4, r1
 800b1e2:	4233      	tst	r3, r6
 800b1e4:	d006      	beq.n	800b1f4 <__smakebuf_r+0x1c>
 800b1e6:	0023      	movs	r3, r4
 800b1e8:	3347      	adds	r3, #71	; 0x47
 800b1ea:	6023      	str	r3, [r4, #0]
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	6163      	str	r3, [r4, #20]
 800b1f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b1f4:	466a      	mov	r2, sp
 800b1f6:	ab01      	add	r3, sp, #4
 800b1f8:	f7ff ffc6 	bl	800b188 <__swhatbuf_r>
 800b1fc:	9900      	ldr	r1, [sp, #0]
 800b1fe:	0007      	movs	r7, r0
 800b200:	0028      	movs	r0, r5
 800b202:	f7ff f92d 	bl	800a460 <_malloc_r>
 800b206:	2800      	cmp	r0, #0
 800b208:	d108      	bne.n	800b21c <__smakebuf_r+0x44>
 800b20a:	220c      	movs	r2, #12
 800b20c:	5ea3      	ldrsh	r3, [r4, r2]
 800b20e:	059a      	lsls	r2, r3, #22
 800b210:	d4ef      	bmi.n	800b1f2 <__smakebuf_r+0x1a>
 800b212:	2203      	movs	r2, #3
 800b214:	4393      	bics	r3, r2
 800b216:	431e      	orrs	r6, r3
 800b218:	81a6      	strh	r6, [r4, #12]
 800b21a:	e7e4      	b.n	800b1e6 <__smakebuf_r+0xe>
 800b21c:	4b0f      	ldr	r3, [pc, #60]	; (800b25c <__smakebuf_r+0x84>)
 800b21e:	62ab      	str	r3, [r5, #40]	; 0x28
 800b220:	2380      	movs	r3, #128	; 0x80
 800b222:	89a2      	ldrh	r2, [r4, #12]
 800b224:	6020      	str	r0, [r4, #0]
 800b226:	4313      	orrs	r3, r2
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	9b00      	ldr	r3, [sp, #0]
 800b22c:	6120      	str	r0, [r4, #16]
 800b22e:	6163      	str	r3, [r4, #20]
 800b230:	9b01      	ldr	r3, [sp, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00d      	beq.n	800b252 <__smakebuf_r+0x7a>
 800b236:	0028      	movs	r0, r5
 800b238:	230e      	movs	r3, #14
 800b23a:	5ee1      	ldrsh	r1, [r4, r3]
 800b23c:	f000 f8e6 	bl	800b40c <_isatty_r>
 800b240:	2800      	cmp	r0, #0
 800b242:	d006      	beq.n	800b252 <__smakebuf_r+0x7a>
 800b244:	2203      	movs	r2, #3
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	4393      	bics	r3, r2
 800b24a:	001a      	movs	r2, r3
 800b24c:	2301      	movs	r3, #1
 800b24e:	4313      	orrs	r3, r2
 800b250:	81a3      	strh	r3, [r4, #12]
 800b252:	89a0      	ldrh	r0, [r4, #12]
 800b254:	4307      	orrs	r7, r0
 800b256:	81a7      	strh	r7, [r4, #12]
 800b258:	e7cb      	b.n	800b1f2 <__smakebuf_r+0x1a>
 800b25a:	46c0      	nop			; (mov r8, r8)
 800b25c:	0800afc5 	.word	0x0800afc5

0800b260 <_malloc_usable_size_r>:
 800b260:	1f0b      	subs	r3, r1, #4
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	1f18      	subs	r0, r3, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	da01      	bge.n	800b26e <_malloc_usable_size_r+0xe>
 800b26a:	580b      	ldr	r3, [r1, r0]
 800b26c:	18c0      	adds	r0, r0, r3
 800b26e:	4770      	bx	lr

0800b270 <_raise_r>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	0004      	movs	r4, r0
 800b274:	000d      	movs	r5, r1
 800b276:	291f      	cmp	r1, #31
 800b278:	d904      	bls.n	800b284 <_raise_r+0x14>
 800b27a:	2316      	movs	r3, #22
 800b27c:	6003      	str	r3, [r0, #0]
 800b27e:	2001      	movs	r0, #1
 800b280:	4240      	negs	r0, r0
 800b282:	bd70      	pop	{r4, r5, r6, pc}
 800b284:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <_raise_r+0x24>
 800b28a:	008a      	lsls	r2, r1, #2
 800b28c:	189b      	adds	r3, r3, r2
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	2a00      	cmp	r2, #0
 800b292:	d108      	bne.n	800b2a6 <_raise_r+0x36>
 800b294:	0020      	movs	r0, r4
 800b296:	f000 f831 	bl	800b2fc <_getpid_r>
 800b29a:	002a      	movs	r2, r5
 800b29c:	0001      	movs	r1, r0
 800b29e:	0020      	movs	r0, r4
 800b2a0:	f000 f81a 	bl	800b2d8 <_kill_r>
 800b2a4:	e7ed      	b.n	800b282 <_raise_r+0x12>
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	2a01      	cmp	r2, #1
 800b2aa:	d0ea      	beq.n	800b282 <_raise_r+0x12>
 800b2ac:	1c51      	adds	r1, r2, #1
 800b2ae:	d103      	bne.n	800b2b8 <_raise_r+0x48>
 800b2b0:	2316      	movs	r3, #22
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	e7e4      	b.n	800b282 <_raise_r+0x12>
 800b2b8:	2400      	movs	r4, #0
 800b2ba:	0028      	movs	r0, r5
 800b2bc:	601c      	str	r4, [r3, #0]
 800b2be:	4790      	blx	r2
 800b2c0:	0020      	movs	r0, r4
 800b2c2:	e7de      	b.n	800b282 <_raise_r+0x12>

0800b2c4 <raise>:
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	4b03      	ldr	r3, [pc, #12]	; (800b2d4 <raise+0x10>)
 800b2c8:	0001      	movs	r1, r0
 800b2ca:	6818      	ldr	r0, [r3, #0]
 800b2cc:	f7ff ffd0 	bl	800b270 <_raise_r>
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	46c0      	nop			; (mov r8, r8)
 800b2d4:	2000000c 	.word	0x2000000c

0800b2d8 <_kill_r>:
 800b2d8:	2300      	movs	r3, #0
 800b2da:	b570      	push	{r4, r5, r6, lr}
 800b2dc:	4d06      	ldr	r5, [pc, #24]	; (800b2f8 <_kill_r+0x20>)
 800b2de:	0004      	movs	r4, r0
 800b2e0:	0008      	movs	r0, r1
 800b2e2:	0011      	movs	r1, r2
 800b2e4:	602b      	str	r3, [r5, #0]
 800b2e6:	f7f8 fb99 	bl	8003a1c <_kill>
 800b2ea:	1c43      	adds	r3, r0, #1
 800b2ec:	d103      	bne.n	800b2f6 <_kill_r+0x1e>
 800b2ee:	682b      	ldr	r3, [r5, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d000      	beq.n	800b2f6 <_kill_r+0x1e>
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	200003c0 	.word	0x200003c0

0800b2fc <_getpid_r>:
 800b2fc:	b510      	push	{r4, lr}
 800b2fe:	f7f8 fb87 	bl	8003a10 <_getpid>
 800b302:	bd10      	pop	{r4, pc}

0800b304 <__sread>:
 800b304:	b570      	push	{r4, r5, r6, lr}
 800b306:	000c      	movs	r4, r1
 800b308:	250e      	movs	r5, #14
 800b30a:	5f49      	ldrsh	r1, [r1, r5]
 800b30c:	f000 f8a4 	bl	800b458 <_read_r>
 800b310:	2800      	cmp	r0, #0
 800b312:	db03      	blt.n	800b31c <__sread+0x18>
 800b314:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b316:	181b      	adds	r3, r3, r0
 800b318:	6563      	str	r3, [r4, #84]	; 0x54
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	4a02      	ldr	r2, [pc, #8]	; (800b328 <__sread+0x24>)
 800b320:	4013      	ands	r3, r2
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	e7f9      	b.n	800b31a <__sread+0x16>
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	ffffefff 	.word	0xffffefff

0800b32c <__swrite>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	001f      	movs	r7, r3
 800b330:	898b      	ldrh	r3, [r1, #12]
 800b332:	0005      	movs	r5, r0
 800b334:	000c      	movs	r4, r1
 800b336:	0016      	movs	r6, r2
 800b338:	05db      	lsls	r3, r3, #23
 800b33a:	d505      	bpl.n	800b348 <__swrite+0x1c>
 800b33c:	230e      	movs	r3, #14
 800b33e:	5ec9      	ldrsh	r1, [r1, r3]
 800b340:	2200      	movs	r2, #0
 800b342:	2302      	movs	r3, #2
 800b344:	f000 f874 	bl	800b430 <_lseek_r>
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	4a05      	ldr	r2, [pc, #20]	; (800b360 <__swrite+0x34>)
 800b34c:	0028      	movs	r0, r5
 800b34e:	4013      	ands	r3, r2
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	0032      	movs	r2, r6
 800b354:	230e      	movs	r3, #14
 800b356:	5ee1      	ldrsh	r1, [r4, r3]
 800b358:	003b      	movs	r3, r7
 800b35a:	f000 f81f 	bl	800b39c <_write_r>
 800b35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b360:	ffffefff 	.word	0xffffefff

0800b364 <__sseek>:
 800b364:	b570      	push	{r4, r5, r6, lr}
 800b366:	000c      	movs	r4, r1
 800b368:	250e      	movs	r5, #14
 800b36a:	5f49      	ldrsh	r1, [r1, r5]
 800b36c:	f000 f860 	bl	800b430 <_lseek_r>
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	1c42      	adds	r2, r0, #1
 800b374:	d103      	bne.n	800b37e <__sseek+0x1a>
 800b376:	4a05      	ldr	r2, [pc, #20]	; (800b38c <__sseek+0x28>)
 800b378:	4013      	ands	r3, r2
 800b37a:	81a3      	strh	r3, [r4, #12]
 800b37c:	bd70      	pop	{r4, r5, r6, pc}
 800b37e:	2280      	movs	r2, #128	; 0x80
 800b380:	0152      	lsls	r2, r2, #5
 800b382:	4313      	orrs	r3, r2
 800b384:	81a3      	strh	r3, [r4, #12]
 800b386:	6560      	str	r0, [r4, #84]	; 0x54
 800b388:	e7f8      	b.n	800b37c <__sseek+0x18>
 800b38a:	46c0      	nop			; (mov r8, r8)
 800b38c:	ffffefff 	.word	0xffffefff

0800b390 <__sclose>:
 800b390:	b510      	push	{r4, lr}
 800b392:	230e      	movs	r3, #14
 800b394:	5ec9      	ldrsh	r1, [r1, r3]
 800b396:	f000 f815 	bl	800b3c4 <_close_r>
 800b39a:	bd10      	pop	{r4, pc}

0800b39c <_write_r>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	0004      	movs	r4, r0
 800b3a0:	0008      	movs	r0, r1
 800b3a2:	0011      	movs	r1, r2
 800b3a4:	001a      	movs	r2, r3
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4d05      	ldr	r5, [pc, #20]	; (800b3c0 <_write_r+0x24>)
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	f7f8 fb6f 	bl	8003a8e <_write>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d103      	bne.n	800b3bc <_write_r+0x20>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d000      	beq.n	800b3bc <_write_r+0x20>
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	bd70      	pop	{r4, r5, r6, pc}
 800b3be:	46c0      	nop			; (mov r8, r8)
 800b3c0:	200003c0 	.word	0x200003c0

0800b3c4 <_close_r>:
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	b570      	push	{r4, r5, r6, lr}
 800b3c8:	4d06      	ldr	r5, [pc, #24]	; (800b3e4 <_close_r+0x20>)
 800b3ca:	0004      	movs	r4, r0
 800b3cc:	0008      	movs	r0, r1
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	f7f8 fb79 	bl	8003ac6 <_close>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d103      	bne.n	800b3e0 <_close_r+0x1c>
 800b3d8:	682b      	ldr	r3, [r5, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d000      	beq.n	800b3e0 <_close_r+0x1c>
 800b3de:	6023      	str	r3, [r4, #0]
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
 800b3e2:	46c0      	nop			; (mov r8, r8)
 800b3e4:	200003c0 	.word	0x200003c0

0800b3e8 <_fstat_r>:
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	b570      	push	{r4, r5, r6, lr}
 800b3ec:	4d06      	ldr	r5, [pc, #24]	; (800b408 <_fstat_r+0x20>)
 800b3ee:	0004      	movs	r4, r0
 800b3f0:	0008      	movs	r0, r1
 800b3f2:	0011      	movs	r1, r2
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	f7f8 fb70 	bl	8003ada <_fstat>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d103      	bne.n	800b406 <_fstat_r+0x1e>
 800b3fe:	682b      	ldr	r3, [r5, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d000      	beq.n	800b406 <_fstat_r+0x1e>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd70      	pop	{r4, r5, r6, pc}
 800b408:	200003c0 	.word	0x200003c0

0800b40c <_isatty_r>:
 800b40c:	2300      	movs	r3, #0
 800b40e:	b570      	push	{r4, r5, r6, lr}
 800b410:	4d06      	ldr	r5, [pc, #24]	; (800b42c <_isatty_r+0x20>)
 800b412:	0004      	movs	r4, r0
 800b414:	0008      	movs	r0, r1
 800b416:	602b      	str	r3, [r5, #0]
 800b418:	f7f8 fb6d 	bl	8003af6 <_isatty>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d103      	bne.n	800b428 <_isatty_r+0x1c>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d000      	beq.n	800b428 <_isatty_r+0x1c>
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	46c0      	nop			; (mov r8, r8)
 800b42c:	200003c0 	.word	0x200003c0

0800b430 <_lseek_r>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	0004      	movs	r4, r0
 800b434:	0008      	movs	r0, r1
 800b436:	0011      	movs	r1, r2
 800b438:	001a      	movs	r2, r3
 800b43a:	2300      	movs	r3, #0
 800b43c:	4d05      	ldr	r5, [pc, #20]	; (800b454 <_lseek_r+0x24>)
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7f8 fb62 	bl	8003b08 <_lseek>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d103      	bne.n	800b450 <_lseek_r+0x20>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d000      	beq.n	800b450 <_lseek_r+0x20>
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	bd70      	pop	{r4, r5, r6, pc}
 800b452:	46c0      	nop			; (mov r8, r8)
 800b454:	200003c0 	.word	0x200003c0

0800b458 <_read_r>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	0004      	movs	r4, r0
 800b45c:	0008      	movs	r0, r1
 800b45e:	0011      	movs	r1, r2
 800b460:	001a      	movs	r2, r3
 800b462:	2300      	movs	r3, #0
 800b464:	4d05      	ldr	r5, [pc, #20]	; (800b47c <_read_r+0x24>)
 800b466:	602b      	str	r3, [r5, #0]
 800b468:	f7f8 faf4 	bl	8003a54 <_read>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d103      	bne.n	800b478 <_read_r+0x20>
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d000      	beq.n	800b478 <_read_r+0x20>
 800b476:	6023      	str	r3, [r4, #0]
 800b478:	bd70      	pop	{r4, r5, r6, pc}
 800b47a:	46c0      	nop			; (mov r8, r8)
 800b47c:	200003c0 	.word	0x200003c0

0800b480 <_init>:
 800b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b482:	46c0      	nop			; (mov r8, r8)
 800b484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b486:	bc08      	pop	{r3}
 800b488:	469e      	mov	lr, r3
 800b48a:	4770      	bx	lr

0800b48c <_fini>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	46c0      	nop			; (mov r8, r8)
 800b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b492:	bc08      	pop	{r3}
 800b494:	469e      	mov	lr, r3
 800b496:	4770      	bx	lr
