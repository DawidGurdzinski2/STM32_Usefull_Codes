
F334R8T6_ServoControlledbyEncoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800356c  0800356c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800356c  0800356c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800356c  0800356c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad2  00000000  00000000  0002d604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b10  00000000  00000000  0002fca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f87a  00000000  00000000  000307b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eaf9  00000000  00000000  0005002a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf000  00000000  00000000  0005eb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011db23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030dc  00000000  00000000  0011db74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800351c 	.word	0x0800351c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800351c 	.word	0x0800351c

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b2b      	ldr	r3, [pc, #172]	; (800028c <MX_GPIO_Init+0xc4>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a2a      	ldr	r2, [pc, #168]	; (800028c <MX_GPIO_Init+0xc4>)
 80001e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b28      	ldr	r3, [pc, #160]	; (800028c <MX_GPIO_Init+0xc4>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001f6:	4b25      	ldr	r3, [pc, #148]	; (800028c <MX_GPIO_Init+0xc4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a24      	ldr	r2, [pc, #144]	; (800028c <MX_GPIO_Init+0xc4>)
 80001fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b22      	ldr	r3, [pc, #136]	; (800028c <MX_GPIO_Init+0xc4>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b1f      	ldr	r3, [pc, #124]	; (800028c <MX_GPIO_Init+0xc4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a1e      	ldr	r2, [pc, #120]	; (800028c <MX_GPIO_Init+0xc4>)
 8000214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b1c      	ldr	r3, [pc, #112]	; (800028c <MX_GPIO_Init+0xc4>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000226:	4b19      	ldr	r3, [pc, #100]	; (800028c <MX_GPIO_Init+0xc4>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a18      	ldr	r2, [pc, #96]	; (800028c <MX_GPIO_Init+0xc4>)
 800022c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <MX_GPIO_Init+0xc4>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2120      	movs	r1, #32
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 fd09 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800024a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800024e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000250:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0314 	add.w	r3, r7, #20
 800025e:	4619      	mov	r1, r3
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <MX_GPIO_Init+0xc8>)
 8000262:	f000 fb89 	bl	8000978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000266:	2320      	movs	r3, #32
 8000268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	4619      	mov	r1, r3
 800027c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000280:	f000 fb7a 	bl	8000978 <HAL_GPIO_Init>

}
 8000284:	bf00      	nop
 8000286:	3728      	adds	r7, #40	; 0x28
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40021000 	.word	0x40021000
 8000290:	48000800 	.word	0x48000800

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fa22 	bl	80006e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f80e 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f7ff ff92 	bl	80001c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a4:	f000 f980 	bl	80005a8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80002a8:	f000 f8ae 	bl	8000408 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1 );//incjalizuje timer16 chanel1 jako pwm output
 80002ac:	2100      	movs	r1, #0
 80002ae:	4802      	ldr	r0, [pc, #8]	; (80002b8 <main+0x24>)
 80002b0:	f002 f818 	bl	80022e4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <main+0x20>
 80002b6:	bf00      	nop
 80002b8:	20000028 	.word	0x20000028

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	; 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 f91e 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	2310      	movs	r3, #16
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	2302      	movs	r3, #2
 80002ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ee:	2300      	movs	r3, #0
 80002f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002f2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fcc5 	bl	8000c8c <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000308:	f000 f819 	bl	800033e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2302      	movs	r3, #2
 8000312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2102      	movs	r1, #2
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fcee 	bl	8001d08 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000332:	f000 f804 	bl	800033e <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	; 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000342:	b672      	cpsid	i
}
 8000344:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000346:	e7fe      	b.n	8000346 <Error_Handler+0x8>

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x44>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_MspInit+0x44>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x44>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_MspInit+0x44>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	4a08      	ldr	r2, [pc, #32]	; (800038c <HAL_MspInit+0x44>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000370:	61d3      	str	r3, [r2, #28]
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <HAL_MspInit+0x44>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800037e:	2007      	movs	r0, #7
 8000380:	f000 fac6 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000

08000390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000394:	e7fe      	b.n	8000394 <NMI_Handler+0x4>

08000396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800039a:	e7fe      	b.n	800039a <HardFault_Handler+0x4>

0800039c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <MemManage_Handler+0x4>

080003a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <BusFault_Handler+0x4>

080003a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <UsageFault_Handler+0x4>

080003ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003dc:	f000 f9c6 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <SystemInit+0x20>)
 80003ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ee:	4a05      	ldr	r2, [pc, #20]	; (8000404 <SystemInit+0x20>)
 80003f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b092      	sub	sp, #72	; 0x48
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800040e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000422:	463b      	mov	r3, r7
 8000424:	222c      	movs	r2, #44	; 0x2c
 8000426:	2100      	movs	r1, #0
 8000428:	4618      	mov	r0, r3
 800042a:	f003 f86f 	bl	800350c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800042e:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <MX_TIM16_Init+0xec>)
 8000430:	4a31      	ldr	r2, [pc, #196]	; (80004f8 <MX_TIM16_Init+0xf0>)
 8000432:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8000434:	4b2f      	ldr	r3, [pc, #188]	; (80004f4 <MX_TIM16_Init+0xec>)
 8000436:	223f      	movs	r2, #63	; 0x3f
 8000438:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043a:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <MX_TIM16_Init+0xec>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8000440:	4b2c      	ldr	r3, [pc, #176]	; (80004f4 <MX_TIM16_Init+0xec>)
 8000442:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000446:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <MX_TIM16_Init+0xec>)
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800044e:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <MX_TIM16_Init+0xec>)
 8000450:	2200      	movs	r2, #0
 8000452:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000454:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <MX_TIM16_Init+0xec>)
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800045a:	4826      	ldr	r0, [pc, #152]	; (80004f4 <MX_TIM16_Init+0xec>)
 800045c:	f001 fe8a 	bl	8002174 <HAL_TIM_Base_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000466:	f7ff ff6a 	bl	800033e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800046a:	4822      	ldr	r0, [pc, #136]	; (80004f4 <MX_TIM16_Init+0xec>)
 800046c:	f001 fed9 	bl	8002222 <HAL_TIM_PWM_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000476:	f7ff ff62 	bl	800033e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800047a:	2360      	movs	r3, #96	; 0x60
 800047c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000482:	2300      	movs	r3, #0
 8000484:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000486:	2300      	movs	r3, #0
 8000488:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800048a:	2300      	movs	r3, #0
 800048c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800048e:	2300      	movs	r3, #0
 8000490:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000492:	2300      	movs	r3, #0
 8000494:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800049a:	2200      	movs	r2, #0
 800049c:	4619      	mov	r1, r3
 800049e:	4815      	ldr	r0, [pc, #84]	; (80004f4 <MX_TIM16_Init+0xec>)
 80004a0:	f002 f80c 	bl	80024bc <HAL_TIM_PWM_ConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80004aa:	f7ff ff48 	bl	800033e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80004d0:	463b      	mov	r3, r7
 80004d2:	4619      	mov	r1, r3
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <MX_TIM16_Init+0xec>)
 80004d6:	f002 fc49 	bl	8002d6c <HAL_TIMEx_ConfigBreakDeadTime>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80004e0:	f7ff ff2d 	bl	800033e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <MX_TIM16_Init+0xec>)
 80004e6:	f000 f829 	bl	800053c <HAL_TIM_MspPostInit>

}
 80004ea:	bf00      	nop
 80004ec:	3748      	adds	r7, #72	; 0x48
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000028 	.word	0x20000028
 80004f8:	40014400 	.word	0x40014400

080004fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <HAL_TIM_Base_MspInit+0x38>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d10b      	bne.n	8000526 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_TIM_Base_MspInit+0x3c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a09      	ldr	r2, [pc, #36]	; (8000538 <HAL_TIM_Base_MspInit+0x3c>)
 8000514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <HAL_TIM_Base_MspInit+0x3c>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40014400 	.word	0x40014400
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <HAL_TIM_MspPostInit+0x64>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d11c      	bne.n	8000598 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <HAL_TIM_MspPostInit+0x68>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <HAL_TIM_MspPostInit+0x68>)
 8000564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <HAL_TIM_MspPostInit+0x68>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000576:	2340      	movs	r3, #64	; 0x40
 8000578:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	2302      	movs	r3, #2
 800057c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000586:	2301      	movs	r3, #1
 8000588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	4619      	mov	r1, r3
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f000 f9f0 	bl	8000978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40014400 	.word	0x40014400
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ec:	f002 fc36 	bl	8002e5c <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f7ff fea2 	bl	800033e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000074 	.word	0x20000074
 8000604:	40004400 	.word	0x40004400

08000608 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a17      	ldr	r2, [pc, #92]	; (8000684 <HAL_UART_MspInit+0x7c>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d128      	bne.n	800067c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_UART_MspInit+0x80>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a16      	ldr	r2, [pc, #88]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a10      	ldr	r2, [pc, #64]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800065a:	230c      	movs	r3, #12
 800065c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800066a:	2307      	movs	r3, #7
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 f97e 	bl	8000978 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	40021000 	.word	0x40021000

0800068c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800068c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490e      	ldr	r1, [pc, #56]	; (80006cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0b      	ldr	r4, [pc, #44]	; (80006d8 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b6:	f7ff fe95 	bl	80003e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ba:	f002 ff03 	bl	80034c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006be:	f7ff fde9 	bl	8000294 <main>

080006c2 <LoopForever>:

LoopForever:
    b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d0:	08003574 	.word	0x08003574
  ldr r2, =_sbss
 80006d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d8:	200000fc 	.word	0x200000fc

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>
	...

080006e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_Init+0x28>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_Init+0x28>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f90d 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 f808 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fc:	f7ff fe24 	bl	8000348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x54>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x58>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f917 	bl	800095e <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000748:	f000 f8ed 	bl	8000926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_InitTick+0x5c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	200000f8 	.word	0x200000f8

08000794 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;  
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200000f8 	.word	0x200000f8

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008dc:	d301      	bcc.n	80008e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2301      	movs	r3, #1
 80008e0:	e00f      	b.n	8000902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SysTick_Config+0x40>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ea:	210f      	movs	r1, #15
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f0:	f7ff ff8e 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SysTick_Config+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <SysTick_Config+0x40>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff47 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000938:	f7ff ff5c 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 800093c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	f7ff ff8e 	bl	8000864 <NVIC_EncodePriority>
 8000948:	4602      	mov	r2, r0
 800094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff5d 	bl	8000810 <__NVIC_SetPriority>
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffb0 	bl	80008cc <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000986:	e14e      	b.n	8000c26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2101      	movs	r1, #1
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 8140 	beq.w	8000c20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d005      	beq.n	80009b8 <HAL_GPIO_Init+0x40>
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0303 	and.w	r3, r3, #3
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d130      	bne.n	8000a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ee:	2201      	movs	r2, #1
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	091b      	lsrs	r3, r3, #4
 8000a04:	f003 0201 	and.w	r2, r3, #1
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d017      	beq.n	8000a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	2203      	movs	r2, #3
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d123      	bne.n	8000aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	08da      	lsrs	r2, r3, #3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3208      	adds	r2, #8
 8000a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	220f      	movs	r2, #15
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	691a      	ldr	r2, [r3, #16]
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 0307 	and.w	r3, r3, #7
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	08da      	lsrs	r2, r3, #3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3208      	adds	r2, #8
 8000aa4:	6939      	ldr	r1, [r7, #16]
 8000aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0203 	and.w	r2, r3, #3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 809a 	beq.w	8000c20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aec:	4b55      	ldr	r3, [pc, #340]	; (8000c44 <HAL_GPIO_Init+0x2cc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a54      	ldr	r2, [pc, #336]	; (8000c44 <HAL_GPIO_Init+0x2cc>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b52      	ldr	r3, [pc, #328]	; (8000c44 <HAL_GPIO_Init+0x2cc>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b04:	4a50      	ldr	r2, [pc, #320]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b2e:	d013      	beq.n	8000b58 <HAL_GPIO_Init+0x1e0>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <HAL_GPIO_Init+0x2d4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00d      	beq.n	8000b54 <HAL_GPIO_Init+0x1dc>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a45      	ldr	r2, [pc, #276]	; (8000c50 <HAL_GPIO_Init+0x2d8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x1d8>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a44      	ldr	r2, [pc, #272]	; (8000c54 <HAL_GPIO_Init+0x2dc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <HAL_GPIO_Init+0x1d4>
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e006      	b.n	8000b5a <HAL_GPIO_Init+0x1e2>
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	e004      	b.n	8000b5a <HAL_GPIO_Init+0x1e2>
 8000b50:	2302      	movs	r3, #2
 8000b52:	e002      	b.n	8000b5a <HAL_GPIO_Init+0x1e2>
 8000b54:	2301      	movs	r3, #1
 8000b56:	e000      	b.n	8000b5a <HAL_GPIO_Init+0x1e2>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	f002 0203 	and.w	r2, r2, #3
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	4093      	lsls	r3, r2
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b6a:	4937      	ldr	r1, [pc, #220]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	3302      	adds	r3, #2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b78:	4b37      	ldr	r3, [pc, #220]	; (8000c58 <HAL_GPIO_Init+0x2e0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b9c:	4a2e      	ldr	r2, [pc, #184]	; (8000c58 <HAL_GPIO_Init+0x2e0>)
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <HAL_GPIO_Init+0x2e0>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bc6:	4a24      	ldr	r2, [pc, #144]	; (8000c58 <HAL_GPIO_Init+0x2e0>)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <HAL_GPIO_Init+0x2e0>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_GPIO_Init+0x2e0>)
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_GPIO_Init+0x2e0>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_GPIO_Init+0x2e0>)
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3301      	adds	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f47f aea9 	bne.w	8000988 <HAL_GPIO_Init+0x10>
  }
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	371c      	adds	r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	48000800 	.word	0x48000800
 8000c54:	48000c00 	.word	0x48000c00
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c6c:	787b      	ldrb	r3, [r7, #1]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c78:	e002      	b.n	8000c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f001 b823 	b.w	8001cf8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 817d 	beq.w	8000fc2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cc8:	4bbc      	ldr	r3, [pc, #752]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d00c      	beq.n	8000cee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd4:	4bb9      	ldr	r3, [pc, #740]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b08      	cmp	r3, #8
 8000cde:	d15c      	bne.n	8000d9a <HAL_RCC_OscConfig+0x10e>
 8000ce0:	4bb6      	ldr	r3, [pc, #728]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cec:	d155      	bne.n	8000d9a <HAL_RCC_OscConfig+0x10e>
 8000cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d102      	bne.n	8000d20 <HAL_RCC_OscConfig+0x94>
 8000d1a:	4ba8      	ldr	r3, [pc, #672]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	e015      	b.n	8000d4c <HAL_RCC_OscConfig+0xc0>
 8000d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d24:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d2c:	fa93 f3a3 	rbit	r3, r3
 8000d30:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d38:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d40:	fa93 f3a3 	rbit	r3, r3
 8000d44:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d48:	4b9c      	ldr	r3, [pc, #624]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d50:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d58:	fa92 f2a2 	rbit	r2, r2
 8000d5c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	f042 0220 	orr.w	r2, r2, #32
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	f002 021f 	and.w	r2, r2, #31
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 811f 	beq.w	8000fc0 <HAL_RCC_OscConfig+0x334>
 8000d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8116 	bne.w	8000fc0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f000 bfaf 	b.w	8001cf8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000daa:	d106      	bne.n	8000dba <HAL_RCC_OscConfig+0x12e>
 8000dac:	4b83      	ldr	r3, [pc, #524]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a82      	ldr	r2, [pc, #520]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e036      	b.n	8000e28 <HAL_RCC_OscConfig+0x19c>
 8000dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10c      	bne.n	8000de4 <HAL_RCC_OscConfig+0x158>
 8000dca:	4b7c      	ldr	r3, [pc, #496]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7b      	ldr	r2, [pc, #492]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	4b79      	ldr	r3, [pc, #484]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a78      	ldr	r2, [pc, #480]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e021      	b.n	8000e28 <HAL_RCC_OscConfig+0x19c>
 8000de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df4:	d10c      	bne.n	8000e10 <HAL_RCC_OscConfig+0x184>
 8000df6:	4b71      	ldr	r3, [pc, #452]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a70      	ldr	r2, [pc, #448]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b6e      	ldr	r3, [pc, #440]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a6d      	ldr	r2, [pc, #436]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e00b      	b.n	8000e28 <HAL_RCC_OscConfig+0x19c>
 8000e10:	4b6a      	ldr	r3, [pc, #424]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a69      	ldr	r2, [pc, #420]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b67      	ldr	r3, [pc, #412]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a66      	ldr	r2, [pc, #408]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e26:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e28:	4b64      	ldr	r3, [pc, #400]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	f023 020f 	bic.w	r2, r3, #15
 8000e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	495f      	ldr	r1, [pc, #380]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d059      	beq.n	8000f06 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff fc9f 	bl	8000794 <HAL_GetTick>
 8000e56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5a:	e00a      	b.n	8000e72 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fc9a 	bl	8000794 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b64      	cmp	r3, #100	; 0x64
 8000e6a:	d902      	bls.n	8000e72 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f000 bf43 	b.w	8001cf8 <HAL_RCC_OscConfig+0x106c>
 8000e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e76:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	095b      	lsrs	r3, r3, #5
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d102      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x218>
 8000e9e:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	e015      	b.n	8000ed0 <HAL_RCC_OscConfig+0x244>
 8000ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000eb0:	fa93 f3a3 	rbit	r3, r3
 8000eb4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ec0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ec4:	fa93 f3a3 	rbit	r3, r3
 8000ec8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ecc:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ed4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ed8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000edc:	fa92 f2a2 	rbit	r2, r2
 8000ee0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ee4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ee8:	fab2 f282 	clz	r2, r2
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	f042 0220 	orr.w	r2, r2, #32
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	f002 021f 	and.w	r2, r2, #31
 8000ef8:	2101      	movs	r1, #1
 8000efa:	fa01 f202 	lsl.w	r2, r1, r2
 8000efe:	4013      	ands	r3, r2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0ab      	beq.n	8000e5c <HAL_RCC_OscConfig+0x1d0>
 8000f04:	e05d      	b.n	8000fc2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fc45 	bl	8000794 <HAL_GetTick>
 8000f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0e:	e00a      	b.n	8000f26 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fc40 	bl	8000794 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b64      	cmp	r3, #100	; 0x64
 8000f1e:	d902      	bls.n	8000f26 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	f000 bee9 	b.w	8001cf8 <HAL_RCC_OscConfig+0x106c>
 8000f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	fab3 f383 	clz	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	095b      	lsrs	r3, r3, #5
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <HAL_RCC_OscConfig+0x2cc>
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	e015      	b.n	8000f84 <HAL_RCC_OscConfig+0x2f8>
 8000f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f70:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_RCC_OscConfig+0x330>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f88:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f8c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f90:	fa92 f2a2 	rbit	r2, r2
 8000f94:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f98:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	f042 0220 	orr.w	r2, r2, #32
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	f002 021f 	and.w	r2, r2, #31
 8000fac:	2101      	movs	r1, #1
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1ab      	bne.n	8000f10 <HAL_RCC_OscConfig+0x284>
 8000fb8:	e003      	b.n	8000fc2 <HAL_RCC_OscConfig+0x336>
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 817d 	beq.w	80012d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd8:	4ba6      	ldr	r3, [pc, #664]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00b      	beq.n	8000ffc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe4:	4ba3      	ldr	r3, [pc, #652]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d172      	bne.n	80010d6 <HAL_RCC_OscConfig+0x44a>
 8000ff0:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d16c      	bne.n	80010d6 <HAL_RCC_OscConfig+0x44a>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800100e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <HAL_RCC_OscConfig+0x3a0>
 8001026:	4b93      	ldr	r3, [pc, #588]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	e013      	b.n	8001054 <HAL_RCC_OscConfig+0x3c8>
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001044:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001050:	4b88      	ldr	r3, [pc, #544]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	2202      	movs	r2, #2
 8001056:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800105a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800105e:	fa92 f2a2 	rbit	r2, r2
 8001062:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001066:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800106a:	fab2 f282 	clz	r2, r2
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	f042 0220 	orr.w	r2, r2, #32
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	f002 021f 	and.w	r2, r2, #31
 800107a:	2101      	movs	r1, #1
 800107c:	fa01 f202 	lsl.w	r2, r1, r2
 8001080:	4013      	ands	r3, r2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00a      	beq.n	800109c <HAL_RCC_OscConfig+0x410>
 8001086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800108a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d002      	beq.n	800109c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	f000 be2e 	b.w	8001cf8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109c:	4b75      	ldr	r3, [pc, #468]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	21f8      	movs	r1, #248	; 0xf8
 80010b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010ba:	fa91 f1a1 	rbit	r1, r1
 80010be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010c6:	fab1 f181 	clz	r1, r1
 80010ca:	b2c9      	uxtb	r1, r1
 80010cc:	408b      	lsls	r3, r1
 80010ce:	4969      	ldr	r1, [pc, #420]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d4:	e0fd      	b.n	80012d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8088 	beq.w	80011f8 <HAL_RCC_OscConfig+0x56c>
 80010e8:	2301      	movs	r3, #1
 80010ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010fe:	fab3 f383 	clz	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001108:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	2301      	movs	r3, #1
 8001112:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fb3e 	bl	8000794 <HAL_GetTick>
 8001118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111c:	e00a      	b.n	8001134 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800111e:	f7ff fb39 	bl	8000794 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d902      	bls.n	8001134 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	f000 bde2 	b.w	8001cf8 <HAL_RCC_OscConfig+0x106c>
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001146:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	095b      	lsrs	r3, r3, #5
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d102      	bne.n	8001164 <HAL_RCC_OscConfig+0x4d8>
 800115e:	4b45      	ldr	r3, [pc, #276]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	e013      	b.n	800118c <HAL_RCC_OscConfig+0x500>
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800117c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001188:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	2202      	movs	r2, #2
 800118e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001192:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001196:	fa92 f2a2 	rbit	r2, r2
 800119a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800119e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011a2:	fab2 f282 	clz	r2, r2
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	f042 0220 	orr.w	r2, r2, #32
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	f002 021f 	and.w	r2, r2, #31
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0af      	beq.n	800111e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	21f8      	movs	r1, #248	; 0xf8
 80011d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011dc:	fa91 f1a1 	rbit	r1, r1
 80011e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011e8:	fab1 f181 	clz	r1, r1
 80011ec:	b2c9      	uxtb	r1, r1
 80011ee:	408b      	lsls	r3, r1
 80011f0:	4920      	ldr	r1, [pc, #128]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]
 80011f6:	e06c      	b.n	80012d2 <HAL_RCC_OscConfig+0x646>
 80011f8:	2301      	movs	r3, #1
 80011fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800120a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	fab3 f383 	clz	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001218:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	461a      	mov	r2, r3
 8001220:	2300      	movs	r3, #0
 8001222:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fab6 	bl	8000794 <HAL_GetTick>
 8001228:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122c:	e00a      	b.n	8001244 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fab1 	bl	8000794 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d902      	bls.n	8001244 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	f000 bd5a 	b.w	8001cf8 <HAL_RCC_OscConfig+0x106c>
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	095b      	lsrs	r3, r3, #5
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d104      	bne.n	8001278 <HAL_RCC_OscConfig+0x5ec>
 800126e:	4b01      	ldr	r3, [pc, #4]	; (8001274 <HAL_RCC_OscConfig+0x5e8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	e015      	b.n	80012a0 <HAL_RCC_OscConfig+0x614>
 8001274:	40021000 	.word	0x40021000
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001290:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800129c:	4bc8      	ldr	r3, [pc, #800]	; (80015c0 <HAL_RCC_OscConfig+0x934>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2202      	movs	r2, #2
 80012a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012aa:	fa92 f2a2 	rbit	r2, r2
 80012ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012b6:	fab2 f282 	clz	r2, r2
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	f042 0220 	orr.w	r2, r2, #32
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	f002 021f 	and.w	r2, r2, #31
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1ad      	bne.n	800122e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8110 	beq.w	8001508 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d079      	beq.n	80013ec <HAL_RCC_OscConfig+0x760>
 80012f8:	2301      	movs	r3, #1
 80012fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001302:	fa93 f3a3 	rbit	r3, r3
 8001306:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800130a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4bab      	ldr	r3, [pc, #684]	; (80015c4 <HAL_RCC_OscConfig+0x938>)
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	461a      	mov	r2, r3
 800131e:	2301      	movs	r3, #1
 8001320:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fa37 	bl	8000794 <HAL_GetTick>
 8001326:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	e00a      	b.n	8001342 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff fa32 	bl	8000794 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d902      	bls.n	8001342 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	f000 bcdb 	b.w	8001cf8 <HAL_RCC_OscConfig+0x106c>
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001348:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001358:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800135c:	2202      	movs	r2, #2
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001364:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	fa93 f2a3 	rbit	r2, r3
 800136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001380:	2202      	movs	r2, #2
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fa93 f2a3 	rbit	r2, r3
 8001392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001396:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800139a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139c:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <HAL_RCC_OscConfig+0x934>)
 800139e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013a8:	2102      	movs	r1, #2
 80013aa:	6019      	str	r1, [r3, #0]
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	fa93 f1a3 	rbit	r1, r3
 80013ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013c2:	6019      	str	r1, [r3, #0]
  return result;
 80013c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	2101      	movs	r1, #1
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0a0      	beq.n	800132c <HAL_RCC_OscConfig+0x6a0>
 80013ea:	e08d      	b.n	8001508 <HAL_RCC_OscConfig+0x87c>
 80013ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fa93 f2a3 	rbit	r2, r3
 8001406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800140e:	601a      	str	r2, [r3, #0]
  return result;
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001418:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	4b68      	ldr	r3, [pc, #416]	; (80015c4 <HAL_RCC_OscConfig+0x938>)
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	461a      	mov	r2, r3
 800142a:	2300      	movs	r3, #0
 800142c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff f9b1 	bl	8000794 <HAL_GetTick>
 8001432:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001436:	e00a      	b.n	800144e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff f9ac 	bl	8000794 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d902      	bls.n	800144e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	f000 bc55 	b.w	8001cf8 <HAL_RCC_OscConfig+0x106c>
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001456:	2202      	movs	r2, #2
 8001458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	fa93 f2a3 	rbit	r2, r3
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800147a:	2202      	movs	r2, #2
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	fa93 f2a3 	rbit	r2, r3
 800148c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800149e:	2202      	movs	r2, #2
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fa93 f2a3 	rbit	r2, r3
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_OscConfig+0x934>)
 80014bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014c6:	2102      	movs	r1, #2
 80014c8:	6019      	str	r1, [r3, #0]
 80014ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f1a3 	rbit	r1, r3
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014e0:	6019      	str	r1, [r3, #0]
  return result;
 80014e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d197      	bne.n	8001438 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 81a1 	beq.w	8001860 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_RCC_OscConfig+0x934>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d116      	bne.n	800155e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <HAL_RCC_OscConfig+0x934>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <HAL_RCC_OscConfig+0x934>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	61d3      	str	r3, [r2, #28]
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_RCC_OscConfig+0x934>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001552:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001556:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001558:	2301      	movs	r3, #1
 800155a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_RCC_OscConfig+0x93c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11a      	bne.n	80015a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_RCC_OscConfig+0x93c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <HAL_RCC_OscConfig+0x93c>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff f90d 	bl	8000794 <HAL_GetTick>
 800157a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	e009      	b.n	8001594 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001580:	f7ff f908 	bl	8000794 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b64      	cmp	r3, #100	; 0x64
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e3b1      	b.n	8001cf8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_RCC_OscConfig+0x93c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ef      	beq.n	8001580 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d10d      	bne.n	80015cc <HAL_RCC_OscConfig+0x940>
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_RCC_OscConfig+0x934>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a02      	ldr	r2, [pc, #8]	; (80015c0 <HAL_RCC_OscConfig+0x934>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	e03c      	b.n	8001638 <HAL_RCC_OscConfig+0x9ac>
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	10908120 	.word	0x10908120
 80015c8:	40007000 	.word	0x40007000
 80015cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x96a>
 80015dc:	4bc1      	ldr	r3, [pc, #772]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4ac0      	ldr	r2, [pc, #768]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	4bbe      	ldr	r3, [pc, #760]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4abd      	ldr	r2, [pc, #756]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e020      	b.n	8001638 <HAL_RCC_OscConfig+0x9ac>
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b05      	cmp	r3, #5
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x994>
 8001606:	4bb7      	ldr	r3, [pc, #732]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4ab6      	ldr	r2, [pc, #728]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	4bb4      	ldr	r3, [pc, #720]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4ab3      	ldr	r2, [pc, #716]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0x9ac>
 8001620:	4bb0      	ldr	r3, [pc, #704]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4aaf      	ldr	r2, [pc, #700]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	4bad      	ldr	r3, [pc, #692]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4aac      	ldr	r2, [pc, #688]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 8001632:	f023 0304 	bic.w	r3, r3, #4
 8001636:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 8081 	beq.w	800174c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff f8a3 	bl	8000794 <HAL_GetTick>
 800164e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff f89e 	bl	8000794 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	; 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e345      	b.n	8001cf8 <HAL_RCC_OscConfig+0x106c>
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001698:	2202      	movs	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	fa93 f2a3 	rbit	r2, r3
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016b2:	601a      	str	r2, [r3, #0]
  return result;
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	095b      	lsrs	r3, r3, #5
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d102      	bne.n	80016d8 <HAL_RCC_OscConfig+0xa4c>
 80016d2:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	e013      	b.n	8001700 <HAL_RCC_OscConfig+0xa74>
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016e0:	2202      	movs	r2, #2
 80016e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fa93 f2a3 	rbit	r2, r3
 80016f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	4b79      	ldr	r3, [pc, #484]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001704:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001708:	2102      	movs	r1, #2
 800170a:	6011      	str	r1, [r2, #0]
 800170c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001710:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	fa92 f1a2 	rbit	r1, r2
 800171a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800171e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001722:	6011      	str	r1, [r2, #0]
  return result;
 8001724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001728:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	fab2 f282 	clz	r2, r2
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f002 021f 	and.w	r2, r2, #31
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d084      	beq.n	8001654 <HAL_RCC_OscConfig+0x9c8>
 800174a:	e07f      	b.n	800184c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff f822 	bl	8000794 <HAL_GetTick>
 8001750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	e00b      	b.n	800176e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff f81d 	bl	8000794 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e2c4      	b.n	8001cf8 <HAL_RCC_OscConfig+0x106c>
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f2a3 	rbit	r2, r3
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800179a:	2202      	movs	r2, #2
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017b4:	601a      	str	r2, [r3, #0]
  return result;
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d102      	bne.n	80017da <HAL_RCC_OscConfig+0xb4e>
 80017d4:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	e013      	b.n	8001802 <HAL_RCC_OscConfig+0xb76>
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	4b39      	ldr	r3, [pc, #228]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001806:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800180a:	2102      	movs	r1, #2
 800180c:	6011      	str	r1, [r2, #0]
 800180e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001812:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	fa92 f1a2 	rbit	r1, r2
 800181c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001820:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001824:	6011      	str	r1, [r2, #0]
  return result;
 8001826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800182a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	fab2 f282 	clz	r2, r2
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f002 021f 	and.w	r2, r2, #31
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f202 	lsl.w	r2, r1, r2
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d184      	bne.n	8001756 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800184c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 8242 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_RCC_OscConfig+0xc58>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b08      	cmp	r3, #8
 800187c:	f000 8213 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b02      	cmp	r3, #2
 800188e:	f040 8162 	bne.w	8001b56 <HAL_RCC_OscConfig+0xeca>
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800189a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800189e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018b6:	601a      	str	r2, [r3, #0]
  return result;
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	461a      	mov	r2, r3
 80018d4:	2300      	movs	r3, #0
 80018d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7fe ff5c 	bl	8000794 <HAL_GetTick>
 80018dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	e00c      	b.n	80018fc <HAL_RCC_OscConfig+0xc70>
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7fe ff54 	bl	8000794 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e1fd      	b.n	8001cf8 <HAL_RCC_OscConfig+0x106c>
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f2a3 	rbit	r2, r3
 8001918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001920:	601a      	str	r2, [r3, #0]
  return result;
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800192a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d102      	bne.n	8001946 <HAL_RCC_OscConfig+0xcba>
 8001940:	4bb0      	ldr	r3, [pc, #704]	; (8001c04 <HAL_RCC_OscConfig+0xf78>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e027      	b.n	8001996 <HAL_RCC_OscConfig+0xd0a>
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800194e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	4b9c      	ldr	r3, [pc, #624]	; (8001c04 <HAL_RCC_OscConfig+0xf78>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800199e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019a2:	6011      	str	r1, [r2, #0]
 80019a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	fa92 f1a2 	rbit	r1, r2
 80019b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019ba:	6011      	str	r1, [r2, #0]
  return result;
 80019bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	fab2 f282 	clz	r2, r2
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	f042 0220 	orr.w	r2, r2, #32
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	f002 021f 	and.w	r2, r2, #31
 80019d6:	2101      	movs	r1, #1
 80019d8:	fa01 f202 	lsl.w	r2, r1, r2
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d182      	bne.n	80018e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e2:	4b88      	ldr	r3, [pc, #544]	; (8001c04 <HAL_RCC_OscConfig+0xf78>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	430b      	orrs	r3, r1
 8001a04:	497f      	ldr	r1, [pc, #508]	; (8001c04 <HAL_RCC_OscConfig+0xf78>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a2e:	601a      	str	r2, [r3, #0]
  return result;
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7fe fea0 	bl	8000794 <HAL_GetTick>
 8001a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a58:	e009      	b.n	8001a6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7fe fe9b 	bl	8000794 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e144      	b.n	8001cf8 <HAL_RCC_OscConfig+0x106c>
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a92:	601a      	str	r2, [r3, #0]
  return result;
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	095b      	lsrs	r3, r3, #5
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xe2c>
 8001ab2:	4b54      	ldr	r3, [pc, #336]	; (8001c04 <HAL_RCC_OscConfig+0xf78>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	e027      	b.n	8001b08 <HAL_RCC_OscConfig+0xe7c>
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fa93 f2a3 	rbit	r2, r3
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ae6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <HAL_RCC_OscConfig+0xf78>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b14:	6011      	str	r1, [r2, #0]
 8001b16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	fa92 f1a2 	rbit	r1, r2
 8001b24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b28:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b2c:	6011      	str	r1, [r2, #0]
  return result;
 8001b2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b32:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	fab2 f282 	clz	r2, r2
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	f002 021f 	and.w	r2, r2, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d082      	beq.n	8001a5a <HAL_RCC_OscConfig+0xdce>
 8001b54:	e0cf      	b.n	8001cf6 <HAL_RCC_OscConfig+0x106a>
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b7a:	601a      	str	r2, [r3, #0]
  return result;
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	461a      	mov	r2, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7fe fdfa 	bl	8000794 <HAL_GetTick>
 8001ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba4:	e009      	b.n	8001bba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7fe fdf5 	bl	8000794 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e09e      	b.n	8001cf8 <HAL_RCC_OscConfig+0x106c>
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fa93 f2a3 	rbit	r2, r3
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bde:	601a      	str	r2, [r3, #0]
  return result;
 8001be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001be8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	095b      	lsrs	r3, r3, #5
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d104      	bne.n	8001c08 <HAL_RCC_OscConfig+0xf7c>
 8001bfe:	4b01      	ldr	r3, [pc, #4]	; (8001c04 <HAL_RCC_OscConfig+0xf78>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e029      	b.n	8001c58 <HAL_RCC_OscConfig+0xfcc>
 8001c04:	40021000 	.word	0x40021000
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_RCC_OscConfig+0x1078>)
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c64:	6011      	str	r1, [r2, #0]
 8001c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	fa92 f1a2 	rbit	r1, r2
 8001c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c78:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c7c:	6011      	str	r1, [r2, #0]
  return result;
 8001c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c82:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f042 0220 	orr.w	r2, r2, #32
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f002 021f 	and.w	r2, r2, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d180      	bne.n	8001ba6 <HAL_RCC_OscConfig+0xf1a>
 8001ca4:	e027      	b.n	8001cf6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e01e      	b.n	8001cf8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_RCC_OscConfig+0x1078>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b09e      	sub	sp, #120	; 0x78
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e162      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b90      	ldr	r3, [pc, #576]	; (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d910      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	498b      	ldr	r1, [pc, #556]	; (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e14a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b82      	ldr	r3, [pc, #520]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	497f      	ldr	r1, [pc, #508]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80dc 	beq.w	8001f34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d13c      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xf6>
 8001d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_ClockConfig+0xa6>
 8001da8:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	e00f      	b.n	8001dce <HAL_RCC_ClockConfig+0xc6>
 8001dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	667b      	str	r3, [r7, #100]	; 0x64
 8001dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8001dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dca:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dd6:	fa92 f2a2 	rbit	r2, r2
 8001dda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ddc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dde:	fab2 f282 	clz	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f042 0220 	orr.w	r2, r2, #32
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f002 021f 	and.w	r2, r2, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d17b      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0f3      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d13c      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x178>
 8001e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x128>
 8001e2a:	4b4f      	ldr	r3, [pc, #316]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	e00f      	b.n	8001e50 <HAL_RCC_ClockConfig+0x148>
 8001e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e42:	643b      	str	r3, [r7, #64]	; 0x40
 8001e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e4c:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e54:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e58:	fa92 f2a2 	rbit	r2, r2
 8001e5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e60:	fab2 f282 	clz	r2, r2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f002 021f 	and.w	r2, r2, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d13a      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0b2      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x2de>
 8001e80:	2302      	movs	r3, #2
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x1a0>
 8001ea2:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	e00d      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1bc>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	623b      	str	r3, [r7, #32]
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	61ba      	str	r2, [r7, #24]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	fa92 f2a2 	rbit	r2, r2
 8001ece:	617a      	str	r2, [r7, #20]
  return result;
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	fab2 f282 	clz	r2, r2
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f042 0220 	orr.w	r2, r2, #32
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f002 021f 	and.w	r2, r2, #31
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e079      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f023 0203 	bic.w	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	491a      	ldr	r1, [pc, #104]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f04:	f7fe fc46 	bl	8000794 <HAL_GetTick>
 8001f08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7fe fc42 	bl	8000794 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e061      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 020c 	and.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1eb      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d214      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4906      	ldr	r1, [pc, #24]	; (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e040      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x2de>
 8001f64:	40022000 	.word	0x40022000
 8001f68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	491a      	ldr	r1, [pc, #104]	; (8001ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4912      	ldr	r1, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001faa:	f000 f829 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fae:	4601      	mov	r1, r0
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb8:	22f0      	movs	r2, #240	; 0xf0
 8001fba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	fa92 f2a2 	rbit	r2, r2
 8001fc2:	60fa      	str	r2, [r7, #12]
  return result;
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	fab2 f282 	clz	r2, r2
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	40d3      	lsrs	r3, r2
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_RCC_ClockConfig+0x2ec>)
 8001fd0:	5cd3      	ldrb	r3, [r2, r3]
 8001fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fd6:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <HAL_RCC_ClockConfig+0x2f0>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_RCC_ClockConfig+0x2f4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fb94 	bl	800070c <HAL_InitTick>
  
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3778      	adds	r7, #120	; 0x78
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08003534 	.word	0x08003534
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b08b      	sub	sp, #44	; 0x2c
 8002004:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800201a:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d002      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x30>
 800202a:	2b08      	cmp	r3, #8
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0x36>
 800202e:	e03c      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002032:	623b      	str	r3, [r7, #32]
      break;
 8002034:	e03c      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800203c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002040:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	fa92 f2a2 	rbit	r2, r2
 8002048:	607a      	str	r2, [r7, #4]
  return result;
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	fab2 f282 	clz	r2, r2
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	40d3      	lsrs	r3, r2
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	220f      	movs	r2, #15
 8002064:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	fa92 f2a2 	rbit	r2, r2
 800206c:	60fa      	str	r2, [r7, #12]
  return result;
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	fab2 f282 	clz	r2, r2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	40d3      	lsrs	r3, r2
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
 8002098:	e004      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	623b      	str	r3, [r7, #32]
      break;
 80020a8:	e002      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ac:	623b      	str	r3, [r7, #32]
      break;
 80020ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	372c      	adds	r7, #44	; 0x2c
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	007a1200 	.word	0x007a1200
 80020c8:	0800354c 	.word	0x0800354c
 80020cc:	0800355c 	.word	0x0800355c
 80020d0:	003d0900 	.word	0x003d0900

080020d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000000 	.word	0x20000000

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020f2:	f7ff ffef 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f6:	4601      	mov	r1, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002100:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002104:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	fa92 f2a2 	rbit	r2, r2
 800210c:	603a      	str	r2, [r7, #0]
  return result;
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	fab2 f282 	clz	r2, r2
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	40d3      	lsrs	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_RCC_GetPCLK1Freq+0x40>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	08003544 	.word	0x08003544

08002130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002136:	f7ff ffcd 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 800213a:	4601      	mov	r1, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002144:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002148:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	603a      	str	r2, [r7, #0]
  return result;
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	40d3      	lsrs	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x40>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08003544 	.word	0x08003544

08002174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e049      	b.n	800221a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe f9ae 	bl	80004fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f000 fa96 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e049      	b.n	80022c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f841 	bl	80022d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f000 fa3f 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <HAL_TIM_PWM_Start+0x24>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e03c      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d109      	bne.n	8002322 <HAL_TIM_PWM_Start+0x3e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	bf14      	ite	ne
 800231a:	2301      	movne	r3, #1
 800231c:	2300      	moveq	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e02f      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d109      	bne.n	800233c <HAL_TIM_PWM_Start+0x58>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e022      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d109      	bne.n	8002356 <HAL_TIM_PWM_Start+0x72>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	e015      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b10      	cmp	r3, #16
 800235a:	d109      	bne.n	8002370 <HAL_TIM_PWM_Start+0x8c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	bf14      	ite	ne
 8002368:	2301      	movne	r3, #1
 800236a:	2300      	moveq	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e008      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e088      	b.n	800249c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d104      	bne.n	800239a <HAL_TIM_PWM_Start+0xb6>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002398:	e023      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d104      	bne.n	80023aa <HAL_TIM_PWM_Start+0xc6>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a8:	e01b      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_PWM_Start+0xd6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b8:	e013      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Start+0xe6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023c8:	e00b      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Start+0xf6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d8:	e003      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fc98 	bl	8002d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <HAL_TIM_PWM_Start+0x1c0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00e      	beq.n	8002418 <HAL_TIM_PWM_Start+0x134>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <HAL_TIM_PWM_Start+0x1c4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d009      	beq.n	8002418 <HAL_TIM_PWM_Start+0x134>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <HAL_TIM_PWM_Start+0x1c8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d004      	beq.n	8002418 <HAL_TIM_PWM_Start+0x134>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_TIM_PWM_Start+0x1cc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_TIM_PWM_Start+0x138>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_TIM_PWM_Start+0x13a>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_TIM_PWM_Start+0x1c0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00e      	beq.n	800245a <HAL_TIM_PWM_Start+0x176>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d009      	beq.n	800245a <HAL_TIM_PWM_Start+0x176>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_TIM_PWM_Start+0x1d0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d004      	beq.n	800245a <HAL_TIM_PWM_Start+0x176>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_TIM_PWM_Start+0x1c4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d115      	bne.n	8002486 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_TIM_PWM_Start+0x1d4>)
 8002462:	4013      	ands	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b06      	cmp	r3, #6
 800246a:	d015      	beq.n	8002498 <HAL_TIM_PWM_Start+0x1b4>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d011      	beq.n	8002498 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	e008      	b.n	8002498 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e000      	b.n	800249a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40014000 	.word	0x40014000
 80024ac:	40014400 	.word	0x40014400
 80024b0:	40014800 	.word	0x40014800
 80024b4:	40000400 	.word	0x40000400
 80024b8:	00010007 	.word	0x00010007

080024bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e0ff      	b.n	80026da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b14      	cmp	r3, #20
 80024e6:	f200 80f0 	bhi.w	80026ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002545 	.word	0x08002545
 80024f4:	080026cb 	.word	0x080026cb
 80024f8:	080026cb 	.word	0x080026cb
 80024fc:	080026cb 	.word	0x080026cb
 8002500:	08002585 	.word	0x08002585
 8002504:	080026cb 	.word	0x080026cb
 8002508:	080026cb 	.word	0x080026cb
 800250c:	080026cb 	.word	0x080026cb
 8002510:	080025c7 	.word	0x080025c7
 8002514:	080026cb 	.word	0x080026cb
 8002518:	080026cb 	.word	0x080026cb
 800251c:	080026cb 	.word	0x080026cb
 8002520:	08002607 	.word	0x08002607
 8002524:	080026cb 	.word	0x080026cb
 8002528:	080026cb 	.word	0x080026cb
 800252c:	080026cb 	.word	0x080026cb
 8002530:	08002649 	.word	0x08002649
 8002534:	080026cb 	.word	0x080026cb
 8002538:	080026cb 	.word	0x080026cb
 800253c:	080026cb 	.word	0x080026cb
 8002540:	08002689 	.word	0x08002689
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f942 	bl	80027d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	619a      	str	r2, [r3, #24]
      break;
 8002582:	e0a5      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f9a8 	bl	80028e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6999      	ldr	r1, [r3, #24]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	021a      	lsls	r2, r3, #8
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	619a      	str	r2, [r3, #24]
      break;
 80025c4:	e084      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fa07 	bl	80029e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0208 	orr.w	r2, r2, #8
 80025e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0204 	bic.w	r2, r2, #4
 80025f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	61da      	str	r2, [r3, #28]
      break;
 8002604:	e064      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fa65 	bl	8002adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69d9      	ldr	r1, [r3, #28]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	021a      	lsls	r2, r3, #8
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	61da      	str	r2, [r3, #28]
      break;
 8002646:	e043      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 faa8 	bl	8002ba4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0208 	orr.w	r2, r2, #8
 8002662:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002686:	e023      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fae6 	bl	8002c60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	021a      	lsls	r2, r3, #8
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80026c8:	e002      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
      break;
 80026ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a32      	ldr	r2, [pc, #200]	; (80027c0 <TIM_Base_SetConfig+0xdc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <TIM_Base_SetConfig+0x28>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0x28>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a2f      	ldr	r2, [pc, #188]	; (80027c4 <TIM_Base_SetConfig+0xe0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <TIM_Base_SetConfig+0xdc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <TIM_Base_SetConfig+0x6a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d00f      	beq.n	800274e <TIM_Base_SetConfig+0x6a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <TIM_Base_SetConfig+0xe0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00b      	beq.n	800274e <TIM_Base_SetConfig+0x6a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a23      	ldr	r2, [pc, #140]	; (80027c8 <TIM_Base_SetConfig+0xe4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <TIM_Base_SetConfig+0x6a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <TIM_Base_SetConfig+0xe8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_Base_SetConfig+0x6a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <TIM_Base_SetConfig+0xec>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d108      	bne.n	8002760 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <TIM_Base_SetConfig+0xdc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00b      	beq.n	80027a4 <TIM_Base_SetConfig+0xc0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <TIM_Base_SetConfig+0xe4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <TIM_Base_SetConfig+0xc0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <TIM_Base_SetConfig+0xe8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0xc0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <TIM_Base_SetConfig+0xec>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	615a      	str	r2, [r3, #20]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40000400 	.word	0x40000400
 80027c8:	40014000 	.word	0x40014000
 80027cc:	40014400 	.word	0x40014400
 80027d0:	40014800 	.word	0x40014800

080027d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f023 0201 	bic.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0303 	bic.w	r3, r3, #3
 800280e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f023 0302 	bic.w	r3, r3, #2
 8002820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <TIM_OC1_SetConfig+0xfc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00b      	beq.n	800284c <TIM_OC1_SetConfig+0x78>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <TIM_OC1_SetConfig+0x100>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d007      	beq.n	800284c <TIM_OC1_SetConfig+0x78>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <TIM_OC1_SetConfig+0x104>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d003      	beq.n	800284c <TIM_OC1_SetConfig+0x78>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a25      	ldr	r2, [pc, #148]	; (80028dc <TIM_OC1_SetConfig+0x108>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d10c      	bne.n	8002866 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f023 0308 	bic.w	r3, r3, #8
 8002852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <TIM_OC1_SetConfig+0xfc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00b      	beq.n	8002886 <TIM_OC1_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <TIM_OC1_SetConfig+0x100>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <TIM_OC1_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <TIM_OC1_SetConfig+0x104>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d003      	beq.n	8002886 <TIM_OC1_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a16      	ldr	r2, [pc, #88]	; (80028dc <TIM_OC1_SetConfig+0x108>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d111      	bne.n	80028aa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800288c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	621a      	str	r2, [r3, #32]
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800

080028e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f023 0210 	bic.w	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f023 0320 	bic.w	r3, r3, #32
 800292e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a24      	ldr	r2, [pc, #144]	; (80029d0 <TIM_OC2_SetConfig+0xf0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10d      	bne.n	8002960 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800295e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <TIM_OC2_SetConfig+0xf0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00b      	beq.n	8002980 <TIM_OC2_SetConfig+0xa0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <TIM_OC2_SetConfig+0xf4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_OC2_SetConfig+0xa0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <TIM_OC2_SetConfig+0xf8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_OC2_SetConfig+0xa0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <TIM_OC2_SetConfig+0xfc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d113      	bne.n	80029a8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002986:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800298e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	621a      	str	r2, [r3, #32]
}
 80029c2:	bf00      	nop
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800

080029e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a23      	ldr	r2, [pc, #140]	; (8002acc <TIM_OC3_SetConfig+0xec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a5c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <TIM_OC3_SetConfig+0xec>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_OC3_SetConfig+0x9e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <TIM_OC3_SetConfig+0xf0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_OC3_SetConfig+0x9e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <TIM_OC3_SetConfig+0xf4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_OC3_SetConfig+0x9e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <TIM_OC3_SetConfig+0xf8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d113      	bne.n	8002aa6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	621a      	str	r2, [r3, #32]
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40014000 	.word	0x40014000
 8002ad4:	40014400 	.word	0x40014400
 8002ad8:	40014800 	.word	0x40014800

08002adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	031b      	lsls	r3, r3, #12
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <TIM_OC4_SetConfig+0xb8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <TIM_OC4_SetConfig+0x7c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <TIM_OC4_SetConfig+0xbc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_OC4_SetConfig+0x7c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <TIM_OC4_SetConfig+0xc0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_OC4_SetConfig+0x7c>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <TIM_OC4_SetConfig+0xc4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d109      	bne.n	8002b6c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	019b      	lsls	r3, r3, #6
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800

08002ba4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002be8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <TIM_OC5_SetConfig+0xac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00b      	beq.n	8002c16 <TIM_OC5_SetConfig+0x72>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <TIM_OC5_SetConfig+0xb0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <TIM_OC5_SetConfig+0x72>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <TIM_OC5_SetConfig+0xb4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_OC5_SetConfig+0x72>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <TIM_OC5_SetConfig+0xb8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d109      	bne.n	8002c2a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	621a      	str	r2, [r3, #32]
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40014000 	.word	0x40014000
 8002c58:	40014400 	.word	0x40014400
 8002c5c:	40014800 	.word	0x40014800

08002c60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	051b      	lsls	r3, r3, #20
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a16      	ldr	r2, [pc, #88]	; (8002d10 <TIM_OC6_SetConfig+0xb0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00b      	beq.n	8002cd4 <TIM_OC6_SetConfig+0x74>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <TIM_OC6_SetConfig+0xb4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <TIM_OC6_SetConfig+0x74>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <TIM_OC6_SetConfig+0xb8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_OC6_SetConfig+0x74>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <TIM_OC6_SetConfig+0xbc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d109      	bne.n	8002ce8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	621a      	str	r2, [r3, #32]
}
 8002d02:	bf00      	nop
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800

08002d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2201      	movs	r2, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1a      	ldr	r2, [r3, #32]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	621a      	str	r2, [r3, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e060      	b.n	8002e4a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d115      	bne.n	8002e38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	051b      	lsls	r3, r3, #20
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40012c00 	.word	0x40012c00

08002e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e040      	b.n	8002ef0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd fbc2 	bl	8000608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	; 0x24
 8002e88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f82c 	bl	8002ef8 <UART_SetConfig>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e022      	b.n	8002ef0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f956 	bl	8003164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f9dd 	bl	80032a8 <UART_CheckIdleState>
 8002eee:	4603      	mov	r3, r0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b8a      	ldr	r3, [pc, #552]	; (800314c <UART_SetConfig+0x254>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	6979      	ldr	r1, [r7, #20]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a78      	ldr	r2, [pc, #480]	; (8003150 <UART_SetConfig+0x258>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d120      	bne.n	8002fb6 <UART_SetConfig+0xbe>
 8002f74:	4b77      	ldr	r3, [pc, #476]	; (8003154 <UART_SetConfig+0x25c>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d817      	bhi.n	8002fb0 <UART_SetConfig+0xb8>
 8002f80:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <UART_SetConfig+0x90>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa5 	.word	0x08002fa5
 8002f90:	08002fab 	.word	0x08002fab
 8002f94:	08002f9f 	.word	0x08002f9f
 8002f98:	2300      	movs	r3, #0
 8002f9a:	77fb      	strb	r3, [r7, #31]
 8002f9c:	e01d      	b.n	8002fda <UART_SetConfig+0xe2>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e01a      	b.n	8002fda <UART_SetConfig+0xe2>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e017      	b.n	8002fda <UART_SetConfig+0xe2>
 8002faa:	2308      	movs	r3, #8
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e014      	b.n	8002fda <UART_SetConfig+0xe2>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e011      	b.n	8002fda <UART_SetConfig+0xe2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a67      	ldr	r2, [pc, #412]	; (8003158 <UART_SetConfig+0x260>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d102      	bne.n	8002fc6 <UART_SetConfig+0xce>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e009      	b.n	8002fda <UART_SetConfig+0xe2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a64      	ldr	r2, [pc, #400]	; (800315c <UART_SetConfig+0x264>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d102      	bne.n	8002fd6 <UART_SetConfig+0xde>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e001      	b.n	8002fda <UART_SetConfig+0xe2>
 8002fd6:	2310      	movs	r3, #16
 8002fd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe2:	d15b      	bne.n	800309c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002fe4:	7ffb      	ldrb	r3, [r7, #31]
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d827      	bhi.n	800303a <UART_SetConfig+0x142>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <UART_SetConfig+0xf8>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003015 	.word	0x08003015
 8002ff4:	0800301d 	.word	0x0800301d
 8002ff8:	08003025 	.word	0x08003025
 8002ffc:	0800303b 	.word	0x0800303b
 8003000:	0800302b 	.word	0x0800302b
 8003004:	0800303b 	.word	0x0800303b
 8003008:	0800303b 	.word	0x0800303b
 800300c:	0800303b 	.word	0x0800303b
 8003010:	08003033 	.word	0x08003033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003014:	f7ff f86a 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8003018:	61b8      	str	r0, [r7, #24]
        break;
 800301a:	e013      	b.n	8003044 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800301c:	f7ff f888 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 8003020:	61b8      	str	r0, [r7, #24]
        break;
 8003022:	e00f      	b.n	8003044 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003024:	4b4e      	ldr	r3, [pc, #312]	; (8003160 <UART_SetConfig+0x268>)
 8003026:	61bb      	str	r3, [r7, #24]
        break;
 8003028:	e00c      	b.n	8003044 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302a:	f7fe ffe9 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 800302e:	61b8      	str	r0, [r7, #24]
        break;
 8003030:	e008      	b.n	8003044 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003036:	61bb      	str	r3, [r7, #24]
        break;
 8003038:	e004      	b.n	8003044 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	77bb      	strb	r3, [r7, #30]
        break;
 8003042:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d074      	beq.n	8003134 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	005a      	lsls	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	b29b      	uxth	r3, r3
 8003060:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d916      	bls.n	8003096 <UART_SetConfig+0x19e>
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306e:	d212      	bcs.n	8003096 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f023 030f 	bic.w	r3, r3, #15
 8003078:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	b29a      	uxth	r2, r3
 8003086:	89fb      	ldrh	r3, [r7, #14]
 8003088:	4313      	orrs	r3, r2
 800308a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	89fa      	ldrh	r2, [r7, #14]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	e04e      	b.n	8003134 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	77bb      	strb	r3, [r7, #30]
 800309a:	e04b      	b.n	8003134 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800309c:	7ffb      	ldrb	r3, [r7, #31]
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d827      	bhi.n	80030f2 <UART_SetConfig+0x1fa>
 80030a2:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <UART_SetConfig+0x1b0>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	080030d5 	.word	0x080030d5
 80030b0:	080030dd 	.word	0x080030dd
 80030b4:	080030f3 	.word	0x080030f3
 80030b8:	080030e3 	.word	0x080030e3
 80030bc:	080030f3 	.word	0x080030f3
 80030c0:	080030f3 	.word	0x080030f3
 80030c4:	080030f3 	.word	0x080030f3
 80030c8:	080030eb 	.word	0x080030eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030cc:	f7ff f80e 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 80030d0:	61b8      	str	r0, [r7, #24]
        break;
 80030d2:	e013      	b.n	80030fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d4:	f7ff f82c 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 80030d8:	61b8      	str	r0, [r7, #24]
        break;
 80030da:	e00f      	b.n	80030fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030dc:	4b20      	ldr	r3, [pc, #128]	; (8003160 <UART_SetConfig+0x268>)
 80030de:	61bb      	str	r3, [r7, #24]
        break;
 80030e0:	e00c      	b.n	80030fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e2:	f7fe ff8d 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 80030e6:	61b8      	str	r0, [r7, #24]
        break;
 80030e8:	e008      	b.n	80030fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ee:	61bb      	str	r3, [r7, #24]
        break;
 80030f0:	e004      	b.n	80030fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	77bb      	strb	r3, [r7, #30]
        break;
 80030fa:	bf00      	nop
    }

    if (pclk != 0U)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	085a      	lsrs	r2, r3, #1
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	441a      	add	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	b29b      	uxth	r3, r3
 8003116:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	d908      	bls.n	8003130 <UART_SetConfig+0x238>
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d204      	bcs.n	8003130 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	e001      	b.n	8003134 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003140:	7fbb      	ldrb	r3, [r7, #30]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	efff69f3 	.word	0xefff69f3
 8003150:	40013800 	.word	0x40013800
 8003154:	40021000 	.word	0x40021000
 8003158:	40004400 	.word	0x40004400
 800315c:	40004800 	.word	0x40004800
 8003160:	007a1200 	.word	0x007a1200

08003164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01a      	beq.n	800327a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003262:	d10a      	bne.n	800327a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]
  }
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032b8:	f7fd fa6c 	bl	8000794 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d10e      	bne.n	80032ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f82d 	bl	800333a <UART_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e023      	b.n	8003332 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d10e      	bne.n	8003316 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f817 	bl	800333a <UART_WaitOnFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e00d      	b.n	8003332 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b09c      	sub	sp, #112	; 0x70
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4613      	mov	r3, r2
 8003348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334a:	e0a5      	b.n	8003498 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003352:	f000 80a1 	beq.w	8003498 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7fd fa1d 	bl	8000794 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <UART_WaitOnFlagUntilTimeout+0x32>
 8003366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003368:	2b00      	cmp	r3, #0
 800336a:	d13e      	bne.n	80033ea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800337a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003380:	667b      	str	r3, [r7, #100]	; 0x64
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003390:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e6      	bne.n	800336c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3308      	adds	r3, #8
 80033a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	663b      	str	r3, [r7, #96]	; 0x60
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3308      	adds	r3, #8
 80033bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033be:	64ba      	str	r2, [r7, #72]	; 0x48
 80033c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e5      	bne.n	800339e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e067      	b.n	80034ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d04f      	beq.n	8003498 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003406:	d147      	bne.n	8003498 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003410:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
 8003432:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e6      	bne.n	8003412 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3308      	adds	r3, #8
 800344a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	613b      	str	r3, [r7, #16]
   return(result);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	66bb      	str	r3, [r7, #104]	; 0x68
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003464:	623a      	str	r2, [r7, #32]
 8003466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	69f9      	ldr	r1, [r7, #28]
 800346a:	6a3a      	ldr	r2, [r7, #32]
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	61bb      	str	r3, [r7, #24]
   return(result);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e010      	b.n	80034ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	f43f af4a 	beq.w	800334c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3770      	adds	r7, #112	; 0x70
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <__libc_init_array>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	4d0d      	ldr	r5, [pc, #52]	; (80034fc <__libc_init_array+0x38>)
 80034c8:	4c0d      	ldr	r4, [pc, #52]	; (8003500 <__libc_init_array+0x3c>)
 80034ca:	1b64      	subs	r4, r4, r5
 80034cc:	10a4      	asrs	r4, r4, #2
 80034ce:	2600      	movs	r6, #0
 80034d0:	42a6      	cmp	r6, r4
 80034d2:	d109      	bne.n	80034e8 <__libc_init_array+0x24>
 80034d4:	4d0b      	ldr	r5, [pc, #44]	; (8003504 <__libc_init_array+0x40>)
 80034d6:	4c0c      	ldr	r4, [pc, #48]	; (8003508 <__libc_init_array+0x44>)
 80034d8:	f000 f820 	bl	800351c <_init>
 80034dc:	1b64      	subs	r4, r4, r5
 80034de:	10a4      	asrs	r4, r4, #2
 80034e0:	2600      	movs	r6, #0
 80034e2:	42a6      	cmp	r6, r4
 80034e4:	d105      	bne.n	80034f2 <__libc_init_array+0x2e>
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ec:	4798      	blx	r3
 80034ee:	3601      	adds	r6, #1
 80034f0:	e7ee      	b.n	80034d0 <__libc_init_array+0xc>
 80034f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f6:	4798      	blx	r3
 80034f8:	3601      	adds	r6, #1
 80034fa:	e7f2      	b.n	80034e2 <__libc_init_array+0x1e>
 80034fc:	0800356c 	.word	0x0800356c
 8003500:	0800356c 	.word	0x0800356c
 8003504:	0800356c 	.word	0x0800356c
 8003508:	08003570 	.word	0x08003570

0800350c <memset>:
 800350c:	4402      	add	r2, r0
 800350e:	4603      	mov	r3, r0
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	f803 1b01 	strb.w	r1, [r3], #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <_init>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr

08003528 <_fini>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr
