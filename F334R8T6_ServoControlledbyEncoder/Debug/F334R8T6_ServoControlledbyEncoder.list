
F334R8T6_ServoControlledbyEncoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004528  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004730  08004730  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004730  08004730  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004730  08004730  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000150  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e760  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001db2  00000000  00000000  0002e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  000305b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b60  00000000  00000000  000311f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a60  00000000  00000000  00031d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9b6  00000000  00000000  000527b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3334  00000000  00000000  00062166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012549a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003628  00000000  00000000  001254ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046a0 	.word	0x080046a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080046a0 	.word	0x080046a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b3a      	ldr	r3, [pc, #232]	; (8000380 <MX_GPIO_Init+0x100>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a39      	ldr	r2, [pc, #228]	; (8000380 <MX_GPIO_Init+0x100>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b37      	ldr	r3, [pc, #220]	; (8000380 <MX_GPIO_Init+0x100>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b34      	ldr	r3, [pc, #208]	; (8000380 <MX_GPIO_Init+0x100>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a33      	ldr	r2, [pc, #204]	; (8000380 <MX_GPIO_Init+0x100>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b31      	ldr	r3, [pc, #196]	; (8000380 <MX_GPIO_Init+0x100>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b2e      	ldr	r3, [pc, #184]	; (8000380 <MX_GPIO_Init+0x100>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a2d      	ldr	r2, [pc, #180]	; (8000380 <MX_GPIO_Init+0x100>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b2b      	ldr	r3, [pc, #172]	; (8000380 <MX_GPIO_Init+0x100>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b28      	ldr	r3, [pc, #160]	; (8000380 <MX_GPIO_Init+0x100>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a27      	ldr	r2, [pc, #156]	; (8000380 <MX_GPIO_Init+0x100>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b25      	ldr	r3, [pc, #148]	; (8000380 <MX_GPIO_Init+0x100>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2120      	movs	r1, #32
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fe:	f000 fe93 	bl	8001028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = P1_Pin;
 8000302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000308:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800030c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	4619      	mov	r1, r3
 8000318:	481a      	ldr	r0, [pc, #104]	; (8000384 <MX_GPIO_Init+0x104>)
 800031a:	f000 fd13 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800031e:	2320      	movs	r3, #32
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2300      	movs	r3, #0
 800032c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	4619      	mov	r1, r3
 8000334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000338:	f000 fd04 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000340:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800034a:	f107 0314 	add.w	r3, r7, #20
 800034e:	4619      	mov	r1, r3
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f000 fcf6 	bl	8000d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2100      	movs	r1, #0
 800035c:	2017      	movs	r0, #23
 800035e:	f000 fcba 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000362:	2017      	movs	r0, #23
 8000364:	f000 fcd3 	bl	8000d0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	2100      	movs	r1, #0
 800036c:	2028      	movs	r0, #40	; 0x28
 800036e:	f000 fcb2 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000372:	2028      	movs	r0, #40	; 0x28
 8000374:	f000 fccb 	bl	8000d0e <HAL_NVIC_EnableIRQ>

}
 8000378:	bf00      	nop
 800037a:	3728      	adds	r7, #40	; 0x28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	48000800 	.word	0x48000800

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b092      	sub	sp, #72	; 0x48
 800038c:	af00      	add	r7, sp, #0
int main(void)
 800038e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000392:	643b      	str	r3, [r7, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 fb5e 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f83e 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f7ff ff70 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003a0:	f000 fabc 	bl	800091c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80003a4:	f000 f9a6 	bl	80006f4 <MX_TIM16_Init>
  MX_TIM3_Init();
 80003a8:	f000 f950 	bl	800064c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1 );//incjalizuje timer16 chanel1 jako pwm output
 80003ac:	2100      	movs	r1, #0
 80003ae:	4816      	ldr	r0, [pc, #88]	; (8000408 <main+0x80>)
 80003b0:	f002 f9b0 	bl	8002714 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80003b4:	213c      	movs	r1, #60	; 0x3c
 80003b6:	4815      	ldr	r0, [pc, #84]	; (800040c <main+0x84>)
 80003b8:	f002 fb3e 	bl	8002a38 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count=__HAL_TIM_GET_COUNTER(&htim3)/2;
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <main+0x84>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c2:	085b      	lsrs	r3, r3, #1
 80003c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  //niggamryga();
	  sprintf((char*)msg,"NIGGA: %d\n",count);
 80003c8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80003cc:	463b      	mov	r3, r7
 80003ce:	4910      	ldr	r1, [pc, #64]	; (8000410 <main+0x88>)
 80003d0:	4618      	mov	r0, r3
 80003d2:	f003 fcf7 	bl	8003dc4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 80003d6:	463b      	mov	r3, r7
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff fef9 	bl	80001d0 <strlen>
 80003de:	4603      	mov	r3, r0
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4639      	mov	r1, r7
 80003e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e8:	480a      	ldr	r0, [pc, #40]	; (8000414 <main+0x8c>)
 80003ea:	f003 f93f 	bl	800366c <HAL_UART_Transmit>
	  set_ang(count*20);
 80003ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	461a      	mov	r2, r3
 80003f6:	0092      	lsls	r2, r2, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 f862 	bl	80004c8 <set_ang>
	  count=__HAL_TIM_GET_COUNTER(&htim3)/2;
 8000404:	e7da      	b.n	80003bc <main+0x34>
 8000406:	bf00      	nop
 8000408:	200000dc 	.word	0x200000dc
 800040c:	20000090 	.word	0x20000090
 8000410:	080046b8 	.word	0x080046b8
 8000414:	20000128 	.word	0x20000128

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b090      	sub	sp, #64	; 0x40
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0318 	add.w	r3, r7, #24
 8000422:	2228      	movs	r2, #40	; 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f003 fcc4 	bl	8003db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043a:	2302      	movs	r3, #2
 800043c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	2301      	movs	r3, #1
 8000440:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000442:	2310      	movs	r3, #16
 8000444:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000446:	2302      	movs	r3, #2
 8000448:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800044a:	2300      	movs	r3, #0
 800044c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800044e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000452:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	f107 0318 	add.w	r3, r7, #24
 8000458:	4618      	mov	r0, r3
 800045a:	f000 fe2f 	bl	80010bc <HAL_RCC_OscConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000464:	f000 f82b 	bl	80004be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	230f      	movs	r3, #15
 800046a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2302      	movs	r3, #2
 800046e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fe58 	bl	8002138 <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800048e:	f000 f816 	bl	80004be <Error_Handler>
  }
}
 8000492:	bf00      	nop
 8000494:	3740      	adds	r7, #64	; 0x40
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
 80004a0:	4603      	mov	r3, r0
 80004a2:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin== P1_Pin)
 80004a4:	88fb      	ldrh	r3, [r7, #6]
 80004a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004aa:	d104      	bne.n	80004b6 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004ac:	2120      	movs	r1, #32
 80004ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b2:	f000 fdd1 	bl	8001058 <HAL_GPIO_TogglePin>
	}



}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c2:	b672      	cpsid	i
}
 80004c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <Error_Handler+0x8>

080004c8 <set_ang>:
/*
 * ang - kat obrotu walu serwomechanizmu
 * mode - tryb obrotu zgodnie/przeciwnie do wskazowek zegara
 */
void set_ang(uint16_t ang)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	uint16_t val;

	if(ang > ANGLE_MAX)
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80004d8:	d902      	bls.n	80004e0 <set_ang+0x18>
	{
		ang = ANGLE_MAX;
 80004da:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80004de:	80fb      	strh	r3, [r7, #6]
	}
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}
	val = PWM_MIN + (ang * STEP) / 1000;
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80004e6:	81fb      	strh	r3, [r7, #14]



	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <set_ang+0x34>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	89fa      	ldrh	r2, [r7, #14]
 80004ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	200000dc 	.word	0x200000dc

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x44>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_MspInit+0x44>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x44>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <HAL_MspInit+0x44>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <HAL_MspInit+0x44>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_MspInit+0x44>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000536:	2007      	movs	r0, #7
 8000538:	f000 fbc2 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021000 	.word	0x40021000

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000594:	f000 faa4 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 80005a0:	2080      	movs	r0, #128	; 0x80
 80005a2:	f000 fd73 	bl	800108c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}

080005aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P1_Pin);
 80005ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005b2:	f000 fd6b 	bl	800108c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f003 fbb8 	bl	8003d60 <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20003000 	.word	0x20003000
 800061c:	00000400 	.word	0x00000400
 8000620:	2000008c 	.word	0x2000008c
 8000624:	200001c0 	.word	0x200001c0

08000628 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <SystemInit+0x20>)
 800062e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <SystemInit+0x20>)
 8000634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2224      	movs	r2, #36	; 0x24
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fbaa 	bl	8003db4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_TIM3_Init+0xa0>)
 800066c:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <MX_TIM3_Init+0xa4>)
 800066e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_TIM3_Init+0xa0>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_TIM3_Init+0xa0>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 181;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_TIM3_Init+0xa0>)
 800067e:	22b5      	movs	r2, #181	; 0xb5
 8000680:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_TIM3_Init+0xa0>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_TIM3_Init+0xa0>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800068e:	2301      	movs	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000696:	2301      	movs	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006a6:	2301      	movs	r3, #1
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_TIM3_Init+0xa0>)
 80006ba:	f002 f917 	bl	80028ec <HAL_TIM_Encoder_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80006c4:	f7ff fefb 	bl	80004be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_TIM3_Init+0xa0>)
 80006d6:	f002 fe95 	bl	8003404 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80006e0:	f7ff feed 	bl	80004be <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3730      	adds	r7, #48	; 0x30
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000090 	.word	0x20000090
 80006f0:	40000400 	.word	0x40000400

080006f4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b092      	sub	sp, #72	; 0x48
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	222c      	movs	r2, #44	; 0x2c
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fb4d 	bl	8003db4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800071a:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <MX_TIM16_Init+0xec>)
 800071c:	4a31      	ldr	r2, [pc, #196]	; (80007e4 <MX_TIM16_Init+0xf0>)
 800071e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8000720:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <MX_TIM16_Init+0xec>)
 8000722:	223f      	movs	r2, #63	; 0x3f
 8000724:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <MX_TIM16_Init+0xec>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <MX_TIM16_Init+0xec>)
 800072e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000732:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_TIM16_Init+0xec>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800073a:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <MX_TIM16_Init+0xec>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_TIM16_Init+0xec>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000746:	4826      	ldr	r0, [pc, #152]	; (80007e0 <MX_TIM16_Init+0xec>)
 8000748:	f001 ff2c 	bl	80025a4 <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000752:	f7ff feb4 	bl	80004be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000756:	4822      	ldr	r0, [pc, #136]	; (80007e0 <MX_TIM16_Init+0xec>)
 8000758:	f001 ff7b 	bl	8002652 <HAL_TIM_PWM_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000762:	f7ff feac 	bl	80004be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000766:	2360      	movs	r3, #96	; 0x60
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000772:	2300      	movs	r3, #0
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000786:	2200      	movs	r2, #0
 8000788:	4619      	mov	r1, r3
 800078a:	4815      	ldr	r0, [pc, #84]	; (80007e0 <MX_TIM16_Init+0xec>)
 800078c:	f002 f9e2 	bl	8002b54 <HAL_TIM_PWM_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000796:	f7ff fe92 	bl	80004be <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_TIM16_Init+0xec>)
 80007c2:	f002 fe8d 	bl	80034e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80007cc:	f7ff fe77 	bl	80004be <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <MX_TIM16_Init+0xec>)
 80007d2:	f000 f86b 	bl	80008ac <HAL_TIM_MspPostInit>

}
 80007d6:	bf00      	nop
 80007d8:	3748      	adds	r7, #72	; 0x48
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000dc 	.word	0x200000dc
 80007e4:	40014400 	.word	0x40014400

080007e8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d128      	bne.n	800085c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_TIM_Encoder_MspInit+0x80>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <HAL_TIM_Encoder_MspInit+0x80>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_TIM_Encoder_MspInit+0x80>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_TIM_Encoder_MspInit+0x80>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <HAL_TIM_Encoder_MspInit+0x80>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_TIM_Encoder_MspInit+0x80>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800083a:	2350      	movs	r3, #80	; 0x50
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800084a:	2302      	movs	r3, #2
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f000 fa74 	bl	8000d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40000400 	.word	0x40000400
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_TIM_Base_MspInit+0x38>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d10b      	bne.n	8000896 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <HAL_TIM_Base_MspInit+0x3c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <HAL_TIM_Base_MspInit+0x3c>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <HAL_TIM_Base_MspInit+0x3c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40014400 	.word	0x40014400
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a12      	ldr	r2, [pc, #72]	; (8000914 <HAL_TIM_MspPostInit+0x68>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d11d      	bne.n	800090a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_TIM_MspPostInit+0x6c>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <HAL_TIM_MspPostInit+0x6c>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_TIM_MspPostInit+0x6c>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA12     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 fa1d 	bl	8000d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40014400 	.word	0x40014400
 8000918:	40021000 	.word	0x40021000

0800091c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <MX_USART2_UART_Init+0x5c>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART2_UART_Init+0x58>)
 8000960:	f002 fe36 	bl	80035d0 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800096a:	f7ff fda8 	bl	80004be <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000128 	.word	0x20000128
 8000978:	40004400 	.word	0x40004400

0800097c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0x7c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d128      	bne.n	80009f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a16      	ldr	r2, [pc, #88]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_UART_MspInit+0x80>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f000 f9aa 	bl	8000d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40021000 	.word	0x40021000

08000a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a06:	490e      	ldr	r1, [pc, #56]	; (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a1c:	4c0b      	ldr	r4, [pc, #44]	; (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff fdfd 	bl	8000628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f003 f99d 	bl	8003d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a32:	f7ff fca9 	bl	8000388 <main>

08000a36 <LoopForever>:

LoopForever:
    b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a38:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a44:	08004738 	.word	0x08004738
  ldr r2, =_sbss
 8000a48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a4c:	200001c0 	.word	0x200001c0

08000a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_2_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x28>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x28>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f92b 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fd46 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40022000 	.word	0x40022000

08000a80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f943 	bl	8000d2a <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	f000 f90b 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	200001ac 	.word	0x200001ac

08000b08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200001ac 	.word	0x200001ac

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	; (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	; (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff29 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff3e 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff31 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffa2 	bl	8000c7c <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e14e      	b.n	8000ff2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8140 	beq.w	8000fec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x40>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	f003 0201 	and.w	r2, r3, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d017      	beq.n	8000e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d123      	bne.n	8000e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	6939      	ldr	r1, [r7, #16]
 8000e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0203 	and.w	r2, r3, #3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 809a 	beq.w	8000fec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	4b55      	ldr	r3, [pc, #340]	; (8001010 <HAL_GPIO_Init+0x2cc>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a54      	ldr	r2, [pc, #336]	; (8001010 <HAL_GPIO_Init+0x2cc>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b52      	ldr	r3, [pc, #328]	; (8001010 <HAL_GPIO_Init+0x2cc>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed0:	4a50      	ldr	r2, [pc, #320]	; (8001014 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x1e0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a46      	ldr	r2, [pc, #280]	; (8001018 <HAL_GPIO_Init+0x2d4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1dc>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a45      	ldr	r2, [pc, #276]	; (800101c <HAL_GPIO_Init+0x2d8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1d8>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a44      	ldr	r2, [pc, #272]	; (8001020 <HAL_GPIO_Init+0x2dc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1d4>
 8000f14:	2303      	movs	r3, #3
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1e2>
 8000f18:	2305      	movs	r3, #5
 8000f1a:	e004      	b.n	8000f26 <HAL_GPIO_Init+0x1e2>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x1e2>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_Init+0x1e2>
 8000f24:	2300      	movs	r3, #0
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f36:	4937      	ldr	r1, [pc, #220]	; (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f44:	4b37      	ldr	r3, [pc, #220]	; (8001024 <HAL_GPIO_Init+0x2e0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f68:	4a2e      	ldr	r2, [pc, #184]	; (8001024 <HAL_GPIO_Init+0x2e0>)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_GPIO_Init+0x2e0>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f92:	4a24      	ldr	r2, [pc, #144]	; (8001024 <HAL_GPIO_Init+0x2e0>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_GPIO_Init+0x2e0>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fbc:	4a19      	ldr	r2, [pc, #100]	; (8001024 <HAL_GPIO_Init+0x2e0>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_GPIO_Init+0x2e0>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_GPIO_Init+0x2e0>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f47f aea9 	bne.w	8000d54 <HAL_GPIO_Init+0x10>
  }
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000
 8001014:	40010000 	.word	0x40010000
 8001018:	48000400 	.word	0x48000400
 800101c:	48000800 	.word	0x48000800
 8001020:	48000c00 	.word	0x48000c00
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
 8001034:	4613      	mov	r3, r2
 8001036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001044:	e002      	b.n	800104c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4013      	ands	r3, r2
 8001070:	041a      	lsls	r2, r3, #16
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43d9      	mvns	r1, r3
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	400b      	ands	r3, r1
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4013      	ands	r3, r2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff f9f5 	bl	800049a <HAL_GPIO_EXTI_Callback>
  }
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010400 	.word	0x40010400

080010bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	f001 b823 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 817d 	beq.w	80013f2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f8:	4bbc      	ldr	r3, [pc, #752]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	d00c      	beq.n	800111e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001104:	4bb9      	ldr	r3, [pc, #740]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d15c      	bne.n	80011ca <HAL_RCC_OscConfig+0x10e>
 8001110:	4bb6      	ldr	r3, [pc, #728]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d155      	bne.n	80011ca <HAL_RCC_OscConfig+0x10e>
 800111e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001122:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001132:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <HAL_RCC_OscConfig+0x94>
 800114a:	4ba8      	ldr	r3, [pc, #672]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	e015      	b.n	800117c <HAL_RCC_OscConfig+0xc0>
 8001150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001154:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001168:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800116c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001178:	4b9c      	ldr	r3, [pc, #624]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001180:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001184:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001188:	fa92 f2a2 	rbit	r2, r2
 800118c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001190:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001194:	fab2 f282 	clz	r2, r2
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	f002 021f 	and.w	r2, r2, #31
 80011a4:	2101      	movs	r1, #1
 80011a6:	fa01 f202 	lsl.w	r2, r1, r2
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 811f 	beq.w	80013f0 <HAL_RCC_OscConfig+0x334>
 80011b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8116 	bne.w	80013f0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f000 bfaf 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x12e>
 80011dc:	4b83      	ldr	r3, [pc, #524]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a82      	ldr	r2, [pc, #520]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e036      	b.n	8001258 <HAL_RCC_OscConfig+0x19c>
 80011ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x158>
 80011fa:	4b7c      	ldr	r3, [pc, #496]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7b      	ldr	r2, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b79      	ldr	r3, [pc, #484]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a78      	ldr	r2, [pc, #480]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e021      	b.n	8001258 <HAL_RCC_OscConfig+0x19c>
 8001214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x184>
 8001226:	4b71      	ldr	r3, [pc, #452]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a70      	ldr	r2, [pc, #448]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6d      	ldr	r2, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e00b      	b.n	8001258 <HAL_RCC_OscConfig+0x19c>
 8001240:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a69      	ldr	r2, [pc, #420]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b67      	ldr	r3, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001256:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001258:	4b64      	ldr	r3, [pc, #400]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	f023 020f 	bic.w	r2, r3, #15
 8001260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	495f      	ldr	r1, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800126e:	4313      	orrs	r3, r2
 8001270:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d059      	beq.n	8001336 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fc41 	bl	8000b08 <HAL_GetTick>
 8001286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fc3c 	bl	8000b08 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b64      	cmp	r3, #100	; 0x64
 800129a:	d902      	bls.n	80012a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	f000 bf43 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 80012a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80012b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	095b      	lsrs	r3, r3, #5
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d102      	bne.n	80012d4 <HAL_RCC_OscConfig+0x218>
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	e015      	b.n	8001300 <HAL_RCC_OscConfig+0x244>
 80012d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012f4:	fa93 f3a3 	rbit	r3, r3
 80012f8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012fc:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001304:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001308:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800130c:	fa92 f2a2 	rbit	r2, r2
 8001310:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001314:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001318:	fab2 f282 	clz	r2, r2
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	f042 0220 	orr.w	r2, r2, #32
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	f002 021f 	and.w	r2, r2, #31
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0ab      	beq.n	800128c <HAL_RCC_OscConfig+0x1d0>
 8001334:	e05d      	b.n	80013f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fbe7 	bl	8000b08 <HAL_GetTick>
 800133a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	e00a      	b.n	8001356 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fbe2 	bl	8000b08 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	d902      	bls.n	8001356 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	f000 bee9 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 8001356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800136a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	095b      	lsrs	r3, r3, #5
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <HAL_RCC_OscConfig+0x2cc>
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	e015      	b.n	80013b4 <HAL_RCC_OscConfig+0x2f8>
 8001388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800139c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013a4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80013bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013c0:	fa92 f2a2 	rbit	r2, r2
 80013c4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013cc:	fab2 f282 	clz	r2, r2
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f042 0220 	orr.w	r2, r2, #32
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f002 021f 	and.w	r2, r2, #31
 80013dc:	2101      	movs	r1, #1
 80013de:	fa01 f202 	lsl.w	r2, r1, r2
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ab      	bne.n	8001340 <HAL_RCC_OscConfig+0x284>
 80013e8:	e003      	b.n	80013f2 <HAL_RCC_OscConfig+0x336>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 817d 	beq.w	8001702 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001408:	4ba6      	ldr	r3, [pc, #664]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001414:	4ba3      	ldr	r3, [pc, #652]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b08      	cmp	r3, #8
 800141e:	d172      	bne.n	8001506 <HAL_RCC_OscConfig+0x44a>
 8001420:	4ba0      	ldr	r3, [pc, #640]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d16c      	bne.n	8001506 <HAL_RCC_OscConfig+0x44a>
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800143e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d102      	bne.n	800145c <HAL_RCC_OscConfig+0x3a0>
 8001456:	4b93      	ldr	r3, [pc, #588]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	e013      	b.n	8001484 <HAL_RCC_OscConfig+0x3c8>
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001474:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2202      	movs	r2, #2
 8001486:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800148a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800148e:	fa92 f2a2 	rbit	r2, r2
 8001492:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001496:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800149a:	fab2 f282 	clz	r2, r2
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	f042 0220 	orr.w	r2, r2, #32
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	f002 021f 	and.w	r2, r2, #31
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00a      	beq.n	80014cc <HAL_RCC_OscConfig+0x410>
 80014b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d002      	beq.n	80014cc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f000 be2e 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b75      	ldr	r3, [pc, #468]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	21f8      	movs	r1, #248	; 0xf8
 80014e2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014ea:	fa91 f1a1 	rbit	r1, r1
 80014ee:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014f2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014f6:	fab1 f181 	clz	r1, r1
 80014fa:	b2c9      	uxtb	r1, r1
 80014fc:	408b      	lsls	r3, r1
 80014fe:	4969      	ldr	r1, [pc, #420]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001504:	e0fd      	b.n	8001702 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8088 	beq.w	8001628 <HAL_RCC_OscConfig+0x56c>
 8001518:	2301      	movs	r3, #1
 800151a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800152a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001538:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	461a      	mov	r2, r3
 8001540:	2301      	movs	r3, #1
 8001542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fae0 	bl	8000b08 <HAL_GetTick>
 8001548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fadb 	bl	8000b08 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d902      	bls.n	8001564 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	f000 bde2 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 8001564:	2302      	movs	r3, #2
 8001566:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001576:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	095b      	lsrs	r3, r3, #5
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d102      	bne.n	8001594 <HAL_RCC_OscConfig+0x4d8>
 800158e:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	e013      	b.n	80015bc <HAL_RCC_OscConfig+0x500>
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015b8:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	2202      	movs	r2, #2
 80015be:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015c6:	fa92 f2a2 	rbit	r2, r2
 80015ca:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015d2:	fab2 f282 	clz	r2, r2
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	f042 0220 	orr.w	r2, r2, #32
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	f002 021f 	and.w	r2, r2, #31
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f202 	lsl.w	r2, r1, r2
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0af      	beq.n	800154e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	21f8      	movs	r1, #248	; 0xf8
 8001604:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800160c:	fa91 f1a1 	rbit	r1, r1
 8001610:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001614:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001618:	fab1 f181 	clz	r1, r1
 800161c:	b2c9      	uxtb	r1, r1
 800161e:	408b      	lsls	r3, r1
 8001620:	4920      	ldr	r1, [pc, #128]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
 8001626:	e06c      	b.n	8001702 <HAL_RCC_OscConfig+0x646>
 8001628:	2301      	movs	r3, #1
 800162a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800163a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001648:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	461a      	mov	r2, r3
 8001650:	2300      	movs	r3, #0
 8001652:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fa58 	bl	8000b08 <HAL_GetTick>
 8001658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff fa53 	bl	8000b08 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d902      	bls.n	8001674 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	f000 bd5a 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 8001674:	2302      	movs	r3, #2
 8001676:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	095b      	lsrs	r3, r3, #5
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d104      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5ec>
 800169e:	4b01      	ldr	r3, [pc, #4]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	e015      	b.n	80016d0 <HAL_RCC_OscConfig+0x614>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016cc:	4bc8      	ldr	r3, [pc, #800]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2202      	movs	r2, #2
 80016d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016da:	fa92 f2a2 	rbit	r2, r2
 80016de:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016e6:	fab2 f282 	clz	r2, r2
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	f042 0220 	orr.w	r2, r2, #32
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	f002 021f 	and.w	r2, r2, #31
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ad      	bne.n	800165e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8110 	beq.w	8001938 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d079      	beq.n	800181c <HAL_RCC_OscConfig+0x760>
 8001728:	2301      	movs	r3, #1
 800172a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800173a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4bab      	ldr	r3, [pc, #684]	; (80019f4 <HAL_RCC_OscConfig+0x938>)
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	461a      	mov	r2, r3
 800174e:	2301      	movs	r3, #1
 8001750:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff f9d9 	bl	8000b08 <HAL_GetTick>
 8001756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff f9d4 	bl	8000b08 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d902      	bls.n	8001772 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	f000 bcdb 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800178c:	2202      	movs	r2, #2
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017b0:	2202      	movs	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fa93 f2a3 	rbit	r2, r3
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017cc:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80017ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017d8:	2102      	movs	r1, #2
 80017da:	6019      	str	r1, [r3, #0]
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f1a3 	rbit	r1, r3
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017f2:	6019      	str	r1, [r3, #0]
  return result;
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0a0      	beq.n	800175c <HAL_RCC_OscConfig+0x6a0>
 800181a:	e08d      	b.n	8001938 <HAL_RCC_OscConfig+0x87c>
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800183e:	601a      	str	r2, [r3, #0]
  return result;
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001848:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x938>)
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	461a      	mov	r2, r3
 800185a:	2300      	movs	r3, #0
 800185c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff f953 	bl	8000b08 <HAL_GetTick>
 8001862:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff f94e 	bl	8000b08 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d902      	bls.n	800187e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	f000 bc55 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001886:	2202      	movs	r2, #2
 8001888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80018ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018f6:	2102      	movs	r1, #2
 80018f8:	6019      	str	r1, [r3, #0]
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f1a3 	rbit	r1, r3
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001910:	6019      	str	r1, [r3, #0]
  return result;
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d197      	bne.n	8001868 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 81a1 	beq.w	8001c90 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d116      	bne.n	800198e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 8001966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196a:	61d3      	str	r3, [r2, #28]
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001986:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_RCC_OscConfig+0x93c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d11a      	bne.n	80019d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_RCC_OscConfig+0x93c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_RCC_OscConfig+0x93c>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff f8af 	bl	8000b08 <HAL_GetTick>
 80019aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ae:	e009      	b.n	80019c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b0:	f7ff f8aa 	bl	8000b08 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e3b1      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x93c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ef      	beq.n	80019b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10d      	bne.n	80019fc <HAL_RCC_OscConfig+0x940>
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a02      	ldr	r2, [pc, #8]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	e03c      	b.n	8001a68 <HAL_RCC_OscConfig+0x9ac>
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	10908120 	.word	0x10908120
 80019f8:	40007000 	.word	0x40007000
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x96a>
 8001a0c:	4bc1      	ldr	r3, [pc, #772]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4ac0      	ldr	r2, [pc, #768]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	4bbe      	ldr	r3, [pc, #760]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4abd      	ldr	r2, [pc, #756]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a1e:	f023 0304 	bic.w	r3, r3, #4
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e020      	b.n	8001a68 <HAL_RCC_OscConfig+0x9ac>
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x994>
 8001a36:	4bb7      	ldr	r3, [pc, #732]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4ab6      	ldr	r2, [pc, #728]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	4bb4      	ldr	r3, [pc, #720]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4ab3      	ldr	r2, [pc, #716]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x9ac>
 8001a50:	4bb0      	ldr	r3, [pc, #704]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4aaf      	ldr	r2, [pc, #700]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	4bad      	ldr	r3, [pc, #692]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4aac      	ldr	r2, [pc, #688]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8081 	beq.w	8001b7c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f845 	bl	8000b08 <HAL_GetTick>
 8001a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff f840 	bl	8000b08 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e345      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ac8:	2202      	movs	r2, #2
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fa93 f2a3 	rbit	r2, r3
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ae2:	601a      	str	r2, [r3, #0]
  return result;
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001aec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d102      	bne.n	8001b08 <HAL_RCC_OscConfig+0xa4c>
 8001b02:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	e013      	b.n	8001b30 <HAL_RCC_OscConfig+0xa74>
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b10:	2202      	movs	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	4b79      	ldr	r3, [pc, #484]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b34:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b38:	2102      	movs	r1, #2
 8001b3a:	6011      	str	r1, [r2, #0]
 8001b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b40:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	fa92 f1a2 	rbit	r1, r2
 8001b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b52:	6011      	str	r1, [r2, #0]
  return result;
 8001b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b58:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	fab2 f282 	clz	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f002 021f 	and.w	r2, r2, #31
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d084      	beq.n	8001a84 <HAL_RCC_OscConfig+0x9c8>
 8001b7a:	e07f      	b.n	8001c7c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7c:	f7fe ffc4 	bl	8000b08 <HAL_GetTick>
 8001b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b84:	e00b      	b.n	8001b9e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7fe ffbf 	bl	8000b08 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e2c4      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bca:	2202      	movs	r2, #2
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001be4:	601a      	str	r2, [r3, #0]
  return result;
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_OscConfig+0xb4e>
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	e013      	b.n	8001c32 <HAL_RCC_OscConfig+0xb76>
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c12:	2202      	movs	r2, #2
 8001c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c36:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	6011      	str	r1, [r2, #0]
 8001c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c42:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	fa92 f1a2 	rbit	r1, r2
 8001c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c50:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c54:	6011      	str	r1, [r2, #0]
  return result;
 8001c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	fab2 f282 	clz	r2, r2
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f002 021f 	and.w	r2, r2, #31
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d184      	bne.n	8001b86 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8242 	beq.w	8002126 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	f000 8213 	beq.w	80020d6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	f040 8162 	bne.w	8001f86 <HAL_RCC_OscConfig+0xeca>
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ce6:	601a      	str	r2, [r3, #0]
  return result;
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cf0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	461a      	mov	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe fefe 	bl	8000b08 <HAL_GetTick>
 8001d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d10:	e00c      	b.n	8001d2c <HAL_RCC_OscConfig+0xc70>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7fe fef6 	bl	8000b08 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1fd      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d50:	601a      	str	r2, [r3, #0]
  return result;
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_OscConfig+0xcba>
 8001d70:	4bb0      	ldr	r3, [pc, #704]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	e027      	b.n	8001dc6 <HAL_RCC_OscConfig+0xd0a>
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	4b9c      	ldr	r3, [pc, #624]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dca:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001dce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dd2:	6011      	str	r1, [r2, #0]
 8001dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fa92 f1a2 	rbit	r1, r2
 8001de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001dea:	6011      	str	r1, [r2, #0]
  return result;
 8001dec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	fab2 f282 	clz	r2, r2
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f042 0220 	orr.w	r2, r2, #32
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f002 021f 	and.w	r2, r2, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d182      	bne.n	8001d18 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e12:	4b88      	ldr	r3, [pc, #544]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	497f      	ldr	r1, [pc, #508]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e68:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7fe fe42 	bl	8000b08 <HAL_GetTick>
 8001e84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	e009      	b.n	8001e9e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fe3d 	bl	8000b08 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e144      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ec2:	601a      	str	r2, [r3, #0]
  return result;
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ecc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xe2c>
 8001ee2:	4b54      	ldr	r3, [pc, #336]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e027      	b.n	8001f38 <HAL_RCC_OscConfig+0xe7c>
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f2a3 	rbit	r2, r3
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f3c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f4a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	fa92 f1a2 	rbit	r1, r2
 8001f54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f58:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f5c:	6011      	str	r1, [r2, #0]
  return result;
 8001f5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f62:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f002 021f 	and.w	r2, r2, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d082      	beq.n	8001e8a <HAL_RCC_OscConfig+0xdce>
 8001f84:	e0cf      	b.n	8002126 <HAL_RCC_OscConfig+0x106a>
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001faa:	601a      	str	r2, [r3, #0]
  return result;
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001fb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fd9c 	bl	8000b08 <HAL_GetTick>
 8001fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	e009      	b.n	8001fea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7fe fd97 	bl	8000b08 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e09e      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800200e:	601a      	str	r2, [r3, #0]
  return result;
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002018:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d104      	bne.n	8002038 <HAL_RCC_OscConfig+0xf7c>
 800202e:	4b01      	ldr	r3, [pc, #4]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e029      	b.n	8002088 <HAL_RCC_OscConfig+0xfcc>
 8002034:	40021000 	.word	0x40021000
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x1078>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800208c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002090:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002094:	6011      	str	r1, [r2, #0]
 8002096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fa92 f1a2 	rbit	r1, r2
 80020a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80020ac:	6011      	str	r1, [r2, #0]
  return result;
 80020ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020b2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f002 021f 	and.w	r2, r2, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f202 	lsl.w	r2, r1, r2
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d180      	bne.n	8001fd6 <HAL_RCC_OscConfig+0xf1a>
 80020d4:	e027      	b.n	8002126 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e01e      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_OscConfig+0x1078>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020f6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	429a      	cmp	r2, r3
 8002108:	d10b      	bne.n	8002122 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800210a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800210e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b09e      	sub	sp, #120	; 0x78
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e162      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b90      	ldr	r3, [pc, #576]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d910      	bls.n	8002180 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b8d      	ldr	r3, [pc, #564]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	498b      	ldr	r1, [pc, #556]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e14a      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b82      	ldr	r3, [pc, #520]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	497f      	ldr	r1, [pc, #508]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80dc 	beq.w	8002364 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d13c      	bne.n	800222e <HAL_RCC_ClockConfig+0xf6>
 80021b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d102      	bne.n	80021de <HAL_RCC_ClockConfig+0xa6>
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	e00f      	b.n	80021fe <HAL_RCC_ClockConfig+0xc6>
 80021de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	667b      	str	r3, [r7, #100]	; 0x64
 80021ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f0:	663b      	str	r3, [r7, #96]	; 0x60
 80021f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021fa:	4b67      	ldr	r3, [pc, #412]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002202:	65ba      	str	r2, [r7, #88]	; 0x58
 8002204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002206:	fa92 f2a2 	rbit	r2, r2
 800220a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800220c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d17b      	bne.n	8002322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0f3      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d13c      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x178>
 8002236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_RCC_ClockConfig+0x128>
 800225a:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e00f      	b.n	8002280 <HAL_RCC_ClockConfig+0x148>
 8002260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002264:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	647b      	str	r3, [r7, #68]	; 0x44
 800226e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002272:	643b      	str	r3, [r7, #64]	; 0x40
 8002274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002284:	63ba      	str	r2, [r7, #56]	; 0x38
 8002286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800228e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f042 0220 	orr.w	r2, r2, #32
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f002 021f 	and.w	r2, r2, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d13a      	bne.n	8002322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b2      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
 80022b0:	2302      	movs	r3, #2
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d102      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x1a0>
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	e00d      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1bc>
 80022d8:	2302      	movs	r3, #2
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
 80022e4:	2302      	movs	r3, #2
 80022e6:	623b      	str	r3, [r7, #32]
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2202      	movs	r2, #2
 80022f6:	61ba      	str	r2, [r7, #24]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	fa92 f2a2 	rbit	r2, r2
 80022fe:	617a      	str	r2, [r7, #20]
  return result;
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f042 0220 	orr.w	r2, r2, #32
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f002 021f 	and.w	r2, r2, #31
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e079      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f023 0203 	bic.w	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	491a      	ldr	r1, [pc, #104]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002334:	f7fe fbe8 	bl	8000b08 <HAL_GetTick>
 8002338:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	e00a      	b.n	8002352 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233c:	f7fe fbe4 	bl	8000b08 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e061      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 020c 	and.w	r2, r3, #12
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	429a      	cmp	r2, r3
 8002362:	d1eb      	bne.n	800233c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d214      	bcs.n	800239c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4906      	ldr	r1, [pc, #24]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e040      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
 8002394:	40022000 	.word	0x40022000
 8002398:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	491a      	ldr	r1, [pc, #104]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4912      	ldr	r1, [pc, #72]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023da:	f000 f829 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023de:	4601      	mov	r1, r0
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e8:	22f0      	movs	r2, #240	; 0xf0
 80023ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	fa92 f2a2 	rbit	r2, r2
 80023f2:	60fa      	str	r2, [r7, #12]
  return result;
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	40d3      	lsrs	r3, r2
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x2ec>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	fa21 f303 	lsr.w	r3, r1, r3
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <HAL_RCC_ClockConfig+0x2f0>)
 8002408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_RCC_ClockConfig+0x2f4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fb36 	bl	8000a80 <HAL_InitTick>
  
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3778      	adds	r7, #120	; 0x78
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	080046c4 	.word	0x080046c4
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b08b      	sub	sp, #44	; 0x2c
 8002434:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x30>
 800245a:	2b08      	cmp	r3, #8
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x36>
 800245e:	e03c      	b.n	80024da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002462:	623b      	str	r3, [r7, #32]
      break;
 8002464:	e03c      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800246c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002470:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	607a      	str	r2, [r7, #4]
  return result;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	40d3      	lsrs	r3, r2
 8002484:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	220f      	movs	r2, #15
 8002494:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	fa92 f2a2 	rbit	r2, r2
 800249c:	60fa      	str	r2, [r7, #12]
  return result;
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	fab2 f282 	clz	r2, r2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	40d3      	lsrs	r3, r2
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
 80024c8:	e004      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	623b      	str	r3, [r7, #32]
      break;
 80024d8:	e002      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024dc:	623b      	str	r3, [r7, #32]
      break;
 80024de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	372c      	adds	r7, #44	; 0x2c
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	007a1200 	.word	0x007a1200
 80024f8:	080046dc 	.word	0x080046dc
 80024fc:	080046ec 	.word	0x080046ec
 8002500:	003d0900 	.word	0x003d0900

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000000 	.word	0x20000000

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002522:	f7ff ffef 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002526:	4601      	mov	r1, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002530:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002534:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	fa92 f2a2 	rbit	r2, r2
 800253c:	603a      	str	r2, [r7, #0]
  return result;
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	40d3      	lsrs	r3, r2
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_RCC_GetPCLK1Freq+0x40>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	080046d4 	.word	0x080046d4

08002560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002566:	f7ff ffcd 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 800256a:	4601      	mov	r1, r0
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002574:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002578:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	fa92 f2a2 	rbit	r2, r2
 8002580:	603a      	str	r2, [r7, #0]
  return result;
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	fab2 f282 	clz	r2, r2
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	40d3      	lsrs	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	080046d4 	.word	0x080046d4

080025a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e049      	b.n	800264a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe f94e 	bl	800086c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fbca 	bl	8002d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e049      	b.n	80026f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f841 	bl	8002700 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f000 fb73 	bl	8002d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_TIM_PWM_Start+0x24>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e03c      	b.n	80027b2 <HAL_TIM_PWM_Start+0x9e>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b04      	cmp	r3, #4
 800273c:	d109      	bne.n	8002752 <HAL_TIM_PWM_Start+0x3e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	bf14      	ite	ne
 800274a:	2301      	movne	r3, #1
 800274c:	2300      	moveq	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	e02f      	b.n	80027b2 <HAL_TIM_PWM_Start+0x9e>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d109      	bne.n	800276c <HAL_TIM_PWM_Start+0x58>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e022      	b.n	80027b2 <HAL_TIM_PWM_Start+0x9e>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d109      	bne.n	8002786 <HAL_TIM_PWM_Start+0x72>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	e015      	b.n	80027b2 <HAL_TIM_PWM_Start+0x9e>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b10      	cmp	r3, #16
 800278a:	d109      	bne.n	80027a0 <HAL_TIM_PWM_Start+0x8c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e008      	b.n	80027b2 <HAL_TIM_PWM_Start+0x9e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e088      	b.n	80028cc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d104      	bne.n	80027ca <HAL_TIM_PWM_Start+0xb6>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c8:	e023      	b.n	8002812 <HAL_TIM_PWM_Start+0xfe>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d104      	bne.n	80027da <HAL_TIM_PWM_Start+0xc6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d8:	e01b      	b.n	8002812 <HAL_TIM_PWM_Start+0xfe>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d104      	bne.n	80027ea <HAL_TIM_PWM_Start+0xd6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e8:	e013      	b.n	8002812 <HAL_TIM_PWM_Start+0xfe>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d104      	bne.n	80027fa <HAL_TIM_PWM_Start+0xe6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027f8:	e00b      	b.n	8002812 <HAL_TIM_PWM_Start+0xfe>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d104      	bne.n	800280a <HAL_TIM_PWM_Start+0xf6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002808:	e003      	b.n	8002812 <HAL_TIM_PWM_Start+0xfe>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2201      	movs	r2, #1
 8002818:	6839      	ldr	r1, [r7, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fdcc 	bl	80033b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2b      	ldr	r2, [pc, #172]	; (80028d4 <HAL_TIM_PWM_Start+0x1c0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_TIM_PWM_Start+0x134>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a2a      	ldr	r2, [pc, #168]	; (80028d8 <HAL_TIM_PWM_Start+0x1c4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_TIM_PWM_Start+0x134>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a28      	ldr	r2, [pc, #160]	; (80028dc <HAL_TIM_PWM_Start+0x1c8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_TIM_PWM_Start+0x134>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <HAL_TIM_PWM_Start+0x1cc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_TIM_PWM_Start+0x138>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_TIM_PWM_Start+0x13a>
 800284c:	2300      	movs	r3, #0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <HAL_TIM_PWM_Start+0x1c0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00e      	beq.n	800288a <HAL_TIM_PWM_Start+0x176>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d009      	beq.n	800288a <HAL_TIM_PWM_Start+0x176>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1a      	ldr	r2, [pc, #104]	; (80028e4 <HAL_TIM_PWM_Start+0x1d0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_TIM_PWM_Start+0x176>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <HAL_TIM_PWM_Start+0x1c4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d115      	bne.n	80028b6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_TIM_PWM_Start+0x1d4>)
 8002892:	4013      	ands	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d015      	beq.n	80028c8 <HAL_TIM_PWM_Start+0x1b4>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d011      	beq.n	80028c8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b4:	e008      	b.n	80028c8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e000      	b.n	80028ca <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40014000 	.word	0x40014000
 80028dc:	40014400 	.word	0x40014400
 80028e0:	40014800 	.word	0x40014800
 80028e4:	40000400 	.word	0x40000400
 80028e8:	00010007 	.word	0x00010007

080028ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e097      	b.n	8002a30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fd ff67 	bl	80007e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002930:	f023 0307 	bic.w	r3, r3, #7
 8002934:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f000 fa1b 	bl	8002d7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	4313      	orrs	r3, r2
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800298c:	f023 030c 	bic.w	r3, r3, #12
 8002990:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800299c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	4313      	orrs	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	011a      	lsls	r2, r3, #4
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	031b      	lsls	r3, r3, #12
 80029bc:	4313      	orrs	r3, r2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80029ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80029d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4313      	orrs	r3, r2
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d110      	bne.n	8002a8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a6e:	7b7b      	ldrb	r3, [r7, #13]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d001      	beq.n	8002a78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e069      	b.n	8002b4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a88:	e031      	b.n	8002aee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d110      	bne.n	8002ab2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a90:	7bbb      	ldrb	r3, [r7, #14]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d102      	bne.n	8002a9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a96:	7b3b      	ldrb	r3, [r7, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d001      	beq.n	8002aa0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e055      	b.n	8002b4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab0:	e01d      	b.n	8002aee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d108      	bne.n	8002aca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ab8:	7bbb      	ldrb	r3, [r7, #14]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002abe:	7b7b      	ldrb	r3, [r7, #13]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d102      	bne.n	8002aca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ac4:	7b3b      	ldrb	r3, [r7, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d001      	beq.n	8002ace <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e03e      	b.n	8002b4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_TIM_Encoder_Start+0xc4>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d008      	beq.n	8002b0c <HAL_TIM_Encoder_Start+0xd4>
 8002afa:	e00f      	b.n	8002b1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fc57 	bl	80033b8 <TIM_CCxChannelCmd>
      break;
 8002b0a:	e016      	b.n	8002b3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	2104      	movs	r1, #4
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fc4f 	bl	80033b8 <TIM_CCxChannelCmd>
      break;
 8002b1a:	e00e      	b.n	8002b3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fc47 	bl	80033b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2104      	movs	r1, #4
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fc40 	bl	80033b8 <TIM_CCxChannelCmd>
      break;
 8002b38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e0ff      	b.n	8002d72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b14      	cmp	r3, #20
 8002b7e:	f200 80f0 	bhi.w	8002d62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002bdd 	.word	0x08002bdd
 8002b8c:	08002d63 	.word	0x08002d63
 8002b90:	08002d63 	.word	0x08002d63
 8002b94:	08002d63 	.word	0x08002d63
 8002b98:	08002c1d 	.word	0x08002c1d
 8002b9c:	08002d63 	.word	0x08002d63
 8002ba0:	08002d63 	.word	0x08002d63
 8002ba4:	08002d63 	.word	0x08002d63
 8002ba8:	08002c5f 	.word	0x08002c5f
 8002bac:	08002d63 	.word	0x08002d63
 8002bb0:	08002d63 	.word	0x08002d63
 8002bb4:	08002d63 	.word	0x08002d63
 8002bb8:	08002c9f 	.word	0x08002c9f
 8002bbc:	08002d63 	.word	0x08002d63
 8002bc0:	08002d63 	.word	0x08002d63
 8002bc4:	08002d63 	.word	0x08002d63
 8002bc8:	08002ce1 	.word	0x08002ce1
 8002bcc:	08002d63 	.word	0x08002d63
 8002bd0:	08002d63 	.word	0x08002d63
 8002bd4:	08002d63 	.word	0x08002d63
 8002bd8:	08002d21 	.word	0x08002d21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f942 	bl	8002e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0208 	orr.w	r2, r2, #8
 8002bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6999      	ldr	r1, [r3, #24]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	619a      	str	r2, [r3, #24]
      break;
 8002c1a:	e0a5      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f9a8 	bl	8002f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6999      	ldr	r1, [r3, #24]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	619a      	str	r2, [r3, #24]
      break;
 8002c5c:	e084      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fa07 	bl	8003078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0208 	orr.w	r2, r2, #8
 8002c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0204 	bic.w	r2, r2, #4
 8002c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69d9      	ldr	r1, [r3, #28]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
      break;
 8002c9c:	e064      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fa65 	bl	8003174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69d9      	ldr	r1, [r3, #28]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	021a      	lsls	r2, r3, #8
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	61da      	str	r2, [r3, #28]
      break;
 8002cde:	e043      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 faa8 	bl	800323c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0208 	orr.w	r2, r2, #8
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0204 	bic.w	r2, r2, #4
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d1e:	e023      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fae6 	bl	80032f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	021a      	lsls	r2, r3, #8
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d60:	e002      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
      break;
 8002d66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop

08002d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a32      	ldr	r2, [pc, #200]	; (8002e58 <TIM_Base_SetConfig+0xdc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <TIM_Base_SetConfig+0x28>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9a:	d003      	beq.n	8002da4 <TIM_Base_SetConfig+0x28>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <TIM_Base_SetConfig+0xe0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d108      	bne.n	8002db6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <TIM_Base_SetConfig+0xdc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <TIM_Base_SetConfig+0x6a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d00f      	beq.n	8002de6 <TIM_Base_SetConfig+0x6a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <TIM_Base_SetConfig+0xe0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00b      	beq.n	8002de6 <TIM_Base_SetConfig+0x6a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a23      	ldr	r2, [pc, #140]	; (8002e60 <TIM_Base_SetConfig+0xe4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <TIM_Base_SetConfig+0x6a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <TIM_Base_SetConfig+0xe8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_Base_SetConfig+0x6a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <TIM_Base_SetConfig+0xec>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d108      	bne.n	8002df8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <TIM_Base_SetConfig+0xdc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <TIM_Base_SetConfig+0xc0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <TIM_Base_SetConfig+0xe4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <TIM_Base_SetConfig+0xc0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0d      	ldr	r2, [pc, #52]	; (8002e64 <TIM_Base_SetConfig+0xe8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0xc0>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <TIM_Base_SetConfig+0xec>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d103      	bne.n	8002e44 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	615a      	str	r2, [r3, #20]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40014400 	.word	0x40014400
 8002e68:	40014800 	.word	0x40014800

08002e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f023 0201 	bic.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f023 0302 	bic.w	r3, r3, #2
 8002eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <TIM_OC1_SetConfig+0xfc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <TIM_OC1_SetConfig+0x78>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <TIM_OC1_SetConfig+0x100>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <TIM_OC1_SetConfig+0x78>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <TIM_OC1_SetConfig+0x104>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_OC1_SetConfig+0x78>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <TIM_OC1_SetConfig+0x108>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d10c      	bne.n	8002efe <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0308 	bic.w	r3, r3, #8
 8002eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <TIM_OC1_SetConfig+0xfc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <TIM_OC1_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <TIM_OC1_SetConfig+0x100>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d007      	beq.n	8002f1e <TIM_OC1_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <TIM_OC1_SetConfig+0x104>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d003      	beq.n	8002f1e <TIM_OC1_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <TIM_OC1_SetConfig+0x108>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d111      	bne.n	8002f42 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	621a      	str	r2, [r3, #32]
}
 8002f5c:	bf00      	nop
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800

08002f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0210 	bic.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0320 	bic.w	r3, r3, #32
 8002fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <TIM_OC2_SetConfig+0xf0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d10d      	bne.n	8002ff8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <TIM_OC2_SetConfig+0xf0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <TIM_OC2_SetConfig+0xa0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <TIM_OC2_SetConfig+0xf4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_OC2_SetConfig+0xa0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a19      	ldr	r2, [pc, #100]	; (8003070 <TIM_OC2_SetConfig+0xf8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_OC2_SetConfig+0xa0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <TIM_OC2_SetConfig+0xfc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d113      	bne.n	8003040 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800301e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003026:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	621a      	str	r2, [r3, #32]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40014000 	.word	0x40014000
 8003070:	40014400 	.word	0x40014400
 8003074:	40014800 	.word	0x40014800

08003078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a23      	ldr	r2, [pc, #140]	; (8003164 <TIM_OC3_SetConfig+0xec>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10d      	bne.n	80030f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030f4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <TIM_OC3_SetConfig+0xec>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00b      	beq.n	8003116 <TIM_OC3_SetConfig+0x9e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a19      	ldr	r2, [pc, #100]	; (8003168 <TIM_OC3_SetConfig+0xf0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <TIM_OC3_SetConfig+0x9e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a18      	ldr	r2, [pc, #96]	; (800316c <TIM_OC3_SetConfig+0xf4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <TIM_OC3_SetConfig+0x9e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a17      	ldr	r2, [pc, #92]	; (8003170 <TIM_OC3_SetConfig+0xf8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d113      	bne.n	800313e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800311c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800

08003174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	031b      	lsls	r3, r3, #12
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a16      	ldr	r2, [pc, #88]	; (800322c <TIM_OC4_SetConfig+0xb8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <TIM_OC4_SetConfig+0x7c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <TIM_OC4_SetConfig+0xbc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <TIM_OC4_SetConfig+0x7c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <TIM_OC4_SetConfig+0xc0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_OC4_SetConfig+0x7c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a13      	ldr	r2, [pc, #76]	; (8003238 <TIM_OC4_SetConfig+0xc4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d109      	bne.n	8003204 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	019b      	lsls	r3, r3, #6
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800

0800323c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003280:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <TIM_OC5_SetConfig+0xac>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_OC5_SetConfig+0x72>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <TIM_OC5_SetConfig+0xb0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_OC5_SetConfig+0x72>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <TIM_OC5_SetConfig+0xb4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC5_SetConfig+0x72>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <TIM_OC5_SetConfig+0xb8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d109      	bne.n	80032c2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	621a      	str	r2, [r3, #32]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800

080032f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800333e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <TIM_OC6_SetConfig+0xb0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_OC6_SetConfig+0x74>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a15      	ldr	r2, [pc, #84]	; (80033ac <TIM_OC6_SetConfig+0xb4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_OC6_SetConfig+0x74>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <TIM_OC6_SetConfig+0xb8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_OC6_SetConfig+0x74>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <TIM_OC6_SetConfig+0xbc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d109      	bne.n	8003380 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800

080033b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2201      	movs	r2, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1a      	ldr	r2, [r3, #32]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003418:	2302      	movs	r3, #2
 800341a:	e054      	b.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a24      	ldr	r2, [pc, #144]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d108      	bne.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800344c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d009      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a11      	ldr	r2, [pc, #68]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10c      	bne.n	80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40014000 	.word	0x40014000

080034e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e060      	b.n	80035be <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a14      	ldr	r2, [pc, #80]	; (80035cc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d115      	bne.n	80035ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	051b      	lsls	r3, r3, #20
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40012c00 	.word	0x40012c00

080035d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e040      	b.n	8003664 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd f9c2 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8c0 	bl	8003794 <UART_SetConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e022      	b.n	8003664 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9ea 	bl	8003a00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800363a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800364a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa71 	bl	8003b44 <UART_CheckIdleState>
 8003662:	4603      	mov	r3, r0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003680:	2b20      	cmp	r3, #32
 8003682:	f040 8082 	bne.w	800378a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_UART_Transmit+0x26>
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07a      	b.n	800378c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit+0x38>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e073      	b.n	800378c <HAL_UART_Transmit+0x120>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2221      	movs	r2, #33	; 0x21
 80036b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ba:	f7fd fa25 	bl	8000b08 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d8:	d108      	bne.n	80036ec <HAL_UART_Transmit+0x80>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	e003      	b.n	80036f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036fc:	e02d      	b.n	800375a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2200      	movs	r2, #0
 8003706:	2180      	movs	r1, #128	; 0x80
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fa64 	bl	8003bd6 <UART_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e039      	b.n	800378c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10b      	bne.n	8003736 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800372a:	b292      	uxth	r2, r2
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	3302      	adds	r3, #2
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	e008      	b.n	8003748 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	b292      	uxth	r2, r2
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3301      	adds	r3, #1
 8003746:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1cb      	bne.n	80036fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	2140      	movs	r1, #64	; 0x40
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fa30 	bl	8003bd6 <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e005      	b.n	800378c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e000      	b.n	800378c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800378a:	2302      	movs	r3, #2
  }
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4b8a      	ldr	r3, [pc, #552]	; (80039e8 <UART_SetConfig+0x254>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a78      	ldr	r2, [pc, #480]	; (80039ec <UART_SetConfig+0x258>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d120      	bne.n	8003852 <UART_SetConfig+0xbe>
 8003810:	4b77      	ldr	r3, [pc, #476]	; (80039f0 <UART_SetConfig+0x25c>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	2b03      	cmp	r3, #3
 800381a:	d817      	bhi.n	800384c <UART_SetConfig+0xb8>
 800381c:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <UART_SetConfig+0x90>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003835 	.word	0x08003835
 8003828:	08003841 	.word	0x08003841
 800382c:	08003847 	.word	0x08003847
 8003830:	0800383b 	.word	0x0800383b
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e01d      	b.n	8003876 <UART_SetConfig+0xe2>
 800383a:	2302      	movs	r3, #2
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e01a      	b.n	8003876 <UART_SetConfig+0xe2>
 8003840:	2304      	movs	r3, #4
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e017      	b.n	8003876 <UART_SetConfig+0xe2>
 8003846:	2308      	movs	r3, #8
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e014      	b.n	8003876 <UART_SetConfig+0xe2>
 800384c:	2310      	movs	r3, #16
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e011      	b.n	8003876 <UART_SetConfig+0xe2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a67      	ldr	r2, [pc, #412]	; (80039f4 <UART_SetConfig+0x260>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d102      	bne.n	8003862 <UART_SetConfig+0xce>
 800385c:	2300      	movs	r3, #0
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e009      	b.n	8003876 <UART_SetConfig+0xe2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a64      	ldr	r2, [pc, #400]	; (80039f8 <UART_SetConfig+0x264>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d102      	bne.n	8003872 <UART_SetConfig+0xde>
 800386c:	2300      	movs	r3, #0
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e001      	b.n	8003876 <UART_SetConfig+0xe2>
 8003872:	2310      	movs	r3, #16
 8003874:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387e:	d15b      	bne.n	8003938 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003880:	7ffb      	ldrb	r3, [r7, #31]
 8003882:	2b08      	cmp	r3, #8
 8003884:	d827      	bhi.n	80038d6 <UART_SetConfig+0x142>
 8003886:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0xf8>)
 8003888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe fe34 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e013      	b.n	80038e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe fe52 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <UART_SetConfig+0x268>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00c      	b.n	80038e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe fdb3 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e008      	b.n	80038e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77bb      	strb	r3, [r7, #30]
        break;
 80038de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d074      	beq.n	80039d0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	005a      	lsls	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b0f      	cmp	r3, #15
 8003902:	d916      	bls.n	8003932 <UART_SetConfig+0x19e>
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390a:	d212      	bcs.n	8003932 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f023 030f 	bic.w	r3, r3, #15
 8003914:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	b29b      	uxth	r3, r3
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	b29a      	uxth	r2, r3
 8003922:	89fb      	ldrh	r3, [r7, #14]
 8003924:	4313      	orrs	r3, r2
 8003926:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	89fa      	ldrh	r2, [r7, #14]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	e04e      	b.n	80039d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	77bb      	strb	r3, [r7, #30]
 8003936:	e04b      	b.n	80039d0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003938:	7ffb      	ldrb	r3, [r7, #31]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d827      	bhi.n	800398e <UART_SetConfig+0x1fa>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0x1b0>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
 8003950:	0800398f 	.word	0x0800398f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800398f 	.word	0x0800398f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7fe fdd8 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e013      	b.n	8003998 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7fe fdf6 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 8003974:	61b8      	str	r0, [r7, #24]
        break;
 8003976:	e00f      	b.n	8003998 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <UART_SetConfig+0x268>)
 800397a:	61bb      	str	r3, [r7, #24]
        break;
 800397c:	e00c      	b.n	8003998 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7fe fd57 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8003982:	61b8      	str	r0, [r7, #24]
        break;
 8003984:	e008      	b.n	8003998 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398a:	61bb      	str	r3, [r7, #24]
        break;
 800398c:	e004      	b.n	8003998 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	77bb      	strb	r3, [r7, #30]
        break;
 8003996:	bf00      	nop
    }

    if (pclk != 0U)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d018      	beq.n	80039d0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085a      	lsrs	r2, r3, #1
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	441a      	add	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	d908      	bls.n	80039cc <UART_SetConfig+0x238>
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d204      	bcs.n	80039cc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e001      	b.n	80039d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	efff69f3 	.word	0xefff69f3
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40004400 	.word	0x40004400
 80039f8:	40004800 	.word	0x40004800
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01a      	beq.n	8003b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afe:	d10a      	bne.n	8003b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]
  }
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b54:	f7fc ffd8 	bl	8000b08 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d10e      	bne.n	8003b86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f82d 	bl	8003bd6 <UART_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e023      	b.n	8003bce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d10e      	bne.n	8003bb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f817 	bl	8003bd6 <UART_WaitOnFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00d      	b.n	8003bce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b09c      	sub	sp, #112	; 0x70
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be6:	e0a5      	b.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bee:	f000 80a1 	beq.w	8003d34 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fc ff89 	bl	8000b08 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d13e      	bne.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	663b      	str	r3, [r7, #96]	; 0x60
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e067      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d04f      	beq.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca2:	d147      	bne.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e6      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d00:	623a      	str	r2, [r7, #32]
 8003d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	69f9      	ldr	r1, [r7, #28]
 8003d06:	6a3a      	ldr	r2, [r7, #32]
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e5      	bne.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e010      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	f43f af4a 	beq.w	8003be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3770      	adds	r7, #112	; 0x70
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <__errno>:
 8003d60:	4b01      	ldr	r3, [pc, #4]	; (8003d68 <__errno+0x8>)
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	2000000c 	.word	0x2000000c

08003d6c <__libc_init_array>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	4d0d      	ldr	r5, [pc, #52]	; (8003da4 <__libc_init_array+0x38>)
 8003d70:	4c0d      	ldr	r4, [pc, #52]	; (8003da8 <__libc_init_array+0x3c>)
 8003d72:	1b64      	subs	r4, r4, r5
 8003d74:	10a4      	asrs	r4, r4, #2
 8003d76:	2600      	movs	r6, #0
 8003d78:	42a6      	cmp	r6, r4
 8003d7a:	d109      	bne.n	8003d90 <__libc_init_array+0x24>
 8003d7c:	4d0b      	ldr	r5, [pc, #44]	; (8003dac <__libc_init_array+0x40>)
 8003d7e:	4c0c      	ldr	r4, [pc, #48]	; (8003db0 <__libc_init_array+0x44>)
 8003d80:	f000 fc8e 	bl	80046a0 <_init>
 8003d84:	1b64      	subs	r4, r4, r5
 8003d86:	10a4      	asrs	r4, r4, #2
 8003d88:	2600      	movs	r6, #0
 8003d8a:	42a6      	cmp	r6, r4
 8003d8c:	d105      	bne.n	8003d9a <__libc_init_array+0x2e>
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d94:	4798      	blx	r3
 8003d96:	3601      	adds	r6, #1
 8003d98:	e7ee      	b.n	8003d78 <__libc_init_array+0xc>
 8003d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9e:	4798      	blx	r3
 8003da0:	3601      	adds	r6, #1
 8003da2:	e7f2      	b.n	8003d8a <__libc_init_array+0x1e>
 8003da4:	08004730 	.word	0x08004730
 8003da8:	08004730 	.word	0x08004730
 8003dac:	08004730 	.word	0x08004730
 8003db0:	08004734 	.word	0x08004734

08003db4 <memset>:
 8003db4:	4402      	add	r2, r0
 8003db6:	4603      	mov	r3, r0
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d100      	bne.n	8003dbe <memset+0xa>
 8003dbc:	4770      	bx	lr
 8003dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003dc2:	e7f9      	b.n	8003db8 <memset+0x4>

08003dc4 <siprintf>:
 8003dc4:	b40e      	push	{r1, r2, r3}
 8003dc6:	b500      	push	{lr}
 8003dc8:	b09c      	sub	sp, #112	; 0x70
 8003dca:	ab1d      	add	r3, sp, #116	; 0x74
 8003dcc:	9002      	str	r0, [sp, #8]
 8003dce:	9006      	str	r0, [sp, #24]
 8003dd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dd4:	4809      	ldr	r0, [pc, #36]	; (8003dfc <siprintf+0x38>)
 8003dd6:	9107      	str	r1, [sp, #28]
 8003dd8:	9104      	str	r1, [sp, #16]
 8003dda:	4909      	ldr	r1, [pc, #36]	; (8003e00 <siprintf+0x3c>)
 8003ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003de0:	9105      	str	r1, [sp, #20]
 8003de2:	6800      	ldr	r0, [r0, #0]
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	a902      	add	r1, sp, #8
 8003de8:	f000 f868 	bl	8003ebc <_svfiprintf_r>
 8003dec:	9b02      	ldr	r3, [sp, #8]
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	b01c      	add	sp, #112	; 0x70
 8003df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df8:	b003      	add	sp, #12
 8003dfa:	4770      	bx	lr
 8003dfc:	2000000c 	.word	0x2000000c
 8003e00:	ffff0208 	.word	0xffff0208

08003e04 <__ssputs_r>:
 8003e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e08:	688e      	ldr	r6, [r1, #8]
 8003e0a:	429e      	cmp	r6, r3
 8003e0c:	4682      	mov	sl, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	4690      	mov	r8, r2
 8003e12:	461f      	mov	r7, r3
 8003e14:	d838      	bhi.n	8003e88 <__ssputs_r+0x84>
 8003e16:	898a      	ldrh	r2, [r1, #12]
 8003e18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e1c:	d032      	beq.n	8003e84 <__ssputs_r+0x80>
 8003e1e:	6825      	ldr	r5, [r4, #0]
 8003e20:	6909      	ldr	r1, [r1, #16]
 8003e22:	eba5 0901 	sub.w	r9, r5, r1
 8003e26:	6965      	ldr	r5, [r4, #20]
 8003e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e30:	3301      	adds	r3, #1
 8003e32:	444b      	add	r3, r9
 8003e34:	106d      	asrs	r5, r5, #1
 8003e36:	429d      	cmp	r5, r3
 8003e38:	bf38      	it	cc
 8003e3a:	461d      	movcc	r5, r3
 8003e3c:	0553      	lsls	r3, r2, #21
 8003e3e:	d531      	bpl.n	8003ea4 <__ssputs_r+0xa0>
 8003e40:	4629      	mov	r1, r5
 8003e42:	f000 fb63 	bl	800450c <_malloc_r>
 8003e46:	4606      	mov	r6, r0
 8003e48:	b950      	cbnz	r0, 8003e60 <__ssputs_r+0x5c>
 8003e4a:	230c      	movs	r3, #12
 8003e4c:	f8ca 3000 	str.w	r3, [sl]
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e56:	81a3      	strh	r3, [r4, #12]
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e60:	6921      	ldr	r1, [r4, #16]
 8003e62:	464a      	mov	r2, r9
 8003e64:	f000 fabe 	bl	80043e4 <memcpy>
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e72:	81a3      	strh	r3, [r4, #12]
 8003e74:	6126      	str	r6, [r4, #16]
 8003e76:	6165      	str	r5, [r4, #20]
 8003e78:	444e      	add	r6, r9
 8003e7a:	eba5 0509 	sub.w	r5, r5, r9
 8003e7e:	6026      	str	r6, [r4, #0]
 8003e80:	60a5      	str	r5, [r4, #8]
 8003e82:	463e      	mov	r6, r7
 8003e84:	42be      	cmp	r6, r7
 8003e86:	d900      	bls.n	8003e8a <__ssputs_r+0x86>
 8003e88:	463e      	mov	r6, r7
 8003e8a:	6820      	ldr	r0, [r4, #0]
 8003e8c:	4632      	mov	r2, r6
 8003e8e:	4641      	mov	r1, r8
 8003e90:	f000 fab6 	bl	8004400 <memmove>
 8003e94:	68a3      	ldr	r3, [r4, #8]
 8003e96:	1b9b      	subs	r3, r3, r6
 8003e98:	60a3      	str	r3, [r4, #8]
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	4433      	add	r3, r6
 8003e9e:	6023      	str	r3, [r4, #0]
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e7db      	b.n	8003e5c <__ssputs_r+0x58>
 8003ea4:	462a      	mov	r2, r5
 8003ea6:	f000 fba5 	bl	80045f4 <_realloc_r>
 8003eaa:	4606      	mov	r6, r0
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d1e1      	bne.n	8003e74 <__ssputs_r+0x70>
 8003eb0:	6921      	ldr	r1, [r4, #16]
 8003eb2:	4650      	mov	r0, sl
 8003eb4:	f000 fabe 	bl	8004434 <_free_r>
 8003eb8:	e7c7      	b.n	8003e4a <__ssputs_r+0x46>
	...

08003ebc <_svfiprintf_r>:
 8003ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec0:	4698      	mov	r8, r3
 8003ec2:	898b      	ldrh	r3, [r1, #12]
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	b09d      	sub	sp, #116	; 0x74
 8003ec8:	4607      	mov	r7, r0
 8003eca:	460d      	mov	r5, r1
 8003ecc:	4614      	mov	r4, r2
 8003ece:	d50e      	bpl.n	8003eee <_svfiprintf_r+0x32>
 8003ed0:	690b      	ldr	r3, [r1, #16]
 8003ed2:	b963      	cbnz	r3, 8003eee <_svfiprintf_r+0x32>
 8003ed4:	2140      	movs	r1, #64	; 0x40
 8003ed6:	f000 fb19 	bl	800450c <_malloc_r>
 8003eda:	6028      	str	r0, [r5, #0]
 8003edc:	6128      	str	r0, [r5, #16]
 8003ede:	b920      	cbnz	r0, 8003eea <_svfiprintf_r+0x2e>
 8003ee0:	230c      	movs	r3, #12
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee8:	e0d1      	b.n	800408e <_svfiprintf_r+0x1d2>
 8003eea:	2340      	movs	r3, #64	; 0x40
 8003eec:	616b      	str	r3, [r5, #20]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ef8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003efc:	2330      	movs	r3, #48	; 0x30
 8003efe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040a8 <_svfiprintf_r+0x1ec>
 8003f02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f06:	f04f 0901 	mov.w	r9, #1
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	469a      	mov	sl, r3
 8003f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f12:	b10a      	cbz	r2, 8003f18 <_svfiprintf_r+0x5c>
 8003f14:	2a25      	cmp	r2, #37	; 0x25
 8003f16:	d1f9      	bne.n	8003f0c <_svfiprintf_r+0x50>
 8003f18:	ebba 0b04 	subs.w	fp, sl, r4
 8003f1c:	d00b      	beq.n	8003f36 <_svfiprintf_r+0x7a>
 8003f1e:	465b      	mov	r3, fp
 8003f20:	4622      	mov	r2, r4
 8003f22:	4629      	mov	r1, r5
 8003f24:	4638      	mov	r0, r7
 8003f26:	f7ff ff6d 	bl	8003e04 <__ssputs_r>
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	f000 80aa 	beq.w	8004084 <_svfiprintf_r+0x1c8>
 8003f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f32:	445a      	add	r2, fp
 8003f34:	9209      	str	r2, [sp, #36]	; 0x24
 8003f36:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80a2 	beq.w	8004084 <_svfiprintf_r+0x1c8>
 8003f40:	2300      	movs	r3, #0
 8003f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f4a:	f10a 0a01 	add.w	sl, sl, #1
 8003f4e:	9304      	str	r3, [sp, #16]
 8003f50:	9307      	str	r3, [sp, #28]
 8003f52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f56:	931a      	str	r3, [sp, #104]	; 0x68
 8003f58:	4654      	mov	r4, sl
 8003f5a:	2205      	movs	r2, #5
 8003f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f60:	4851      	ldr	r0, [pc, #324]	; (80040a8 <_svfiprintf_r+0x1ec>)
 8003f62:	f7fc f93d 	bl	80001e0 <memchr>
 8003f66:	9a04      	ldr	r2, [sp, #16]
 8003f68:	b9d8      	cbnz	r0, 8003fa2 <_svfiprintf_r+0xe6>
 8003f6a:	06d0      	lsls	r0, r2, #27
 8003f6c:	bf44      	itt	mi
 8003f6e:	2320      	movmi	r3, #32
 8003f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f74:	0711      	lsls	r1, r2, #28
 8003f76:	bf44      	itt	mi
 8003f78:	232b      	movmi	r3, #43	; 0x2b
 8003f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f82:	2b2a      	cmp	r3, #42	; 0x2a
 8003f84:	d015      	beq.n	8003fb2 <_svfiprintf_r+0xf6>
 8003f86:	9a07      	ldr	r2, [sp, #28]
 8003f88:	4654      	mov	r4, sl
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f04f 0c0a 	mov.w	ip, #10
 8003f90:	4621      	mov	r1, r4
 8003f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f96:	3b30      	subs	r3, #48	; 0x30
 8003f98:	2b09      	cmp	r3, #9
 8003f9a:	d94e      	bls.n	800403a <_svfiprintf_r+0x17e>
 8003f9c:	b1b0      	cbz	r0, 8003fcc <_svfiprintf_r+0x110>
 8003f9e:	9207      	str	r2, [sp, #28]
 8003fa0:	e014      	b.n	8003fcc <_svfiprintf_r+0x110>
 8003fa2:	eba0 0308 	sub.w	r3, r0, r8
 8003fa6:	fa09 f303 	lsl.w	r3, r9, r3
 8003faa:	4313      	orrs	r3, r2
 8003fac:	9304      	str	r3, [sp, #16]
 8003fae:	46a2      	mov	sl, r4
 8003fb0:	e7d2      	b.n	8003f58 <_svfiprintf_r+0x9c>
 8003fb2:	9b03      	ldr	r3, [sp, #12]
 8003fb4:	1d19      	adds	r1, r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	9103      	str	r1, [sp, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bfbb      	ittet	lt
 8003fbe:	425b      	neglt	r3, r3
 8003fc0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fc4:	9307      	strge	r3, [sp, #28]
 8003fc6:	9307      	strlt	r3, [sp, #28]
 8003fc8:	bfb8      	it	lt
 8003fca:	9204      	strlt	r2, [sp, #16]
 8003fcc:	7823      	ldrb	r3, [r4, #0]
 8003fce:	2b2e      	cmp	r3, #46	; 0x2e
 8003fd0:	d10c      	bne.n	8003fec <_svfiprintf_r+0x130>
 8003fd2:	7863      	ldrb	r3, [r4, #1]
 8003fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd6:	d135      	bne.n	8004044 <_svfiprintf_r+0x188>
 8003fd8:	9b03      	ldr	r3, [sp, #12]
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	9203      	str	r2, [sp, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bfb8      	it	lt
 8003fe4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003fe8:	3402      	adds	r4, #2
 8003fea:	9305      	str	r3, [sp, #20]
 8003fec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040b8 <_svfiprintf_r+0x1fc>
 8003ff0:	7821      	ldrb	r1, [r4, #0]
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	f7fc f8f3 	bl	80001e0 <memchr>
 8003ffa:	b140      	cbz	r0, 800400e <_svfiprintf_r+0x152>
 8003ffc:	2340      	movs	r3, #64	; 0x40
 8003ffe:	eba0 000a 	sub.w	r0, r0, sl
 8004002:	fa03 f000 	lsl.w	r0, r3, r0
 8004006:	9b04      	ldr	r3, [sp, #16]
 8004008:	4303      	orrs	r3, r0
 800400a:	3401      	adds	r4, #1
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004012:	4826      	ldr	r0, [pc, #152]	; (80040ac <_svfiprintf_r+0x1f0>)
 8004014:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004018:	2206      	movs	r2, #6
 800401a:	f7fc f8e1 	bl	80001e0 <memchr>
 800401e:	2800      	cmp	r0, #0
 8004020:	d038      	beq.n	8004094 <_svfiprintf_r+0x1d8>
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <_svfiprintf_r+0x1f4>)
 8004024:	bb1b      	cbnz	r3, 800406e <_svfiprintf_r+0x1b2>
 8004026:	9b03      	ldr	r3, [sp, #12]
 8004028:	3307      	adds	r3, #7
 800402a:	f023 0307 	bic.w	r3, r3, #7
 800402e:	3308      	adds	r3, #8
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004034:	4433      	add	r3, r6
 8004036:	9309      	str	r3, [sp, #36]	; 0x24
 8004038:	e767      	b.n	8003f0a <_svfiprintf_r+0x4e>
 800403a:	fb0c 3202 	mla	r2, ip, r2, r3
 800403e:	460c      	mov	r4, r1
 8004040:	2001      	movs	r0, #1
 8004042:	e7a5      	b.n	8003f90 <_svfiprintf_r+0xd4>
 8004044:	2300      	movs	r3, #0
 8004046:	3401      	adds	r4, #1
 8004048:	9305      	str	r3, [sp, #20]
 800404a:	4619      	mov	r1, r3
 800404c:	f04f 0c0a 	mov.w	ip, #10
 8004050:	4620      	mov	r0, r4
 8004052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004056:	3a30      	subs	r2, #48	; 0x30
 8004058:	2a09      	cmp	r2, #9
 800405a:	d903      	bls.n	8004064 <_svfiprintf_r+0x1a8>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0c5      	beq.n	8003fec <_svfiprintf_r+0x130>
 8004060:	9105      	str	r1, [sp, #20]
 8004062:	e7c3      	b.n	8003fec <_svfiprintf_r+0x130>
 8004064:	fb0c 2101 	mla	r1, ip, r1, r2
 8004068:	4604      	mov	r4, r0
 800406a:	2301      	movs	r3, #1
 800406c:	e7f0      	b.n	8004050 <_svfiprintf_r+0x194>
 800406e:	ab03      	add	r3, sp, #12
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	462a      	mov	r2, r5
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <_svfiprintf_r+0x1f8>)
 8004076:	a904      	add	r1, sp, #16
 8004078:	4638      	mov	r0, r7
 800407a:	f3af 8000 	nop.w
 800407e:	1c42      	adds	r2, r0, #1
 8004080:	4606      	mov	r6, r0
 8004082:	d1d6      	bne.n	8004032 <_svfiprintf_r+0x176>
 8004084:	89ab      	ldrh	r3, [r5, #12]
 8004086:	065b      	lsls	r3, r3, #25
 8004088:	f53f af2c 	bmi.w	8003ee4 <_svfiprintf_r+0x28>
 800408c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800408e:	b01d      	add	sp, #116	; 0x74
 8004090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004094:	ab03      	add	r3, sp, #12
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	462a      	mov	r2, r5
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <_svfiprintf_r+0x1f8>)
 800409c:	a904      	add	r1, sp, #16
 800409e:	4638      	mov	r0, r7
 80040a0:	f000 f87a 	bl	8004198 <_printf_i>
 80040a4:	e7eb      	b.n	800407e <_svfiprintf_r+0x1c2>
 80040a6:	bf00      	nop
 80040a8:	080046fc 	.word	0x080046fc
 80040ac:	08004706 	.word	0x08004706
 80040b0:	00000000 	.word	0x00000000
 80040b4:	08003e05 	.word	0x08003e05
 80040b8:	08004702 	.word	0x08004702

080040bc <_printf_common>:
 80040bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c0:	4616      	mov	r6, r2
 80040c2:	4699      	mov	r9, r3
 80040c4:	688a      	ldr	r2, [r1, #8]
 80040c6:	690b      	ldr	r3, [r1, #16]
 80040c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bfb8      	it	lt
 80040d0:	4613      	movlt	r3, r2
 80040d2:	6033      	str	r3, [r6, #0]
 80040d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040d8:	4607      	mov	r7, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	b10a      	cbz	r2, 80040e2 <_printf_common+0x26>
 80040de:	3301      	adds	r3, #1
 80040e0:	6033      	str	r3, [r6, #0]
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	0699      	lsls	r1, r3, #26
 80040e6:	bf42      	ittt	mi
 80040e8:	6833      	ldrmi	r3, [r6, #0]
 80040ea:	3302      	addmi	r3, #2
 80040ec:	6033      	strmi	r3, [r6, #0]
 80040ee:	6825      	ldr	r5, [r4, #0]
 80040f0:	f015 0506 	ands.w	r5, r5, #6
 80040f4:	d106      	bne.n	8004104 <_printf_common+0x48>
 80040f6:	f104 0a19 	add.w	sl, r4, #25
 80040fa:	68e3      	ldr	r3, [r4, #12]
 80040fc:	6832      	ldr	r2, [r6, #0]
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	42ab      	cmp	r3, r5
 8004102:	dc26      	bgt.n	8004152 <_printf_common+0x96>
 8004104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004108:	1e13      	subs	r3, r2, #0
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	bf18      	it	ne
 800410e:	2301      	movne	r3, #1
 8004110:	0692      	lsls	r2, r2, #26
 8004112:	d42b      	bmi.n	800416c <_printf_common+0xb0>
 8004114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004118:	4649      	mov	r1, r9
 800411a:	4638      	mov	r0, r7
 800411c:	47c0      	blx	r8
 800411e:	3001      	adds	r0, #1
 8004120:	d01e      	beq.n	8004160 <_printf_common+0xa4>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	68e5      	ldr	r5, [r4, #12]
 8004126:	6832      	ldr	r2, [r6, #0]
 8004128:	f003 0306 	and.w	r3, r3, #6
 800412c:	2b04      	cmp	r3, #4
 800412e:	bf08      	it	eq
 8004130:	1aad      	subeq	r5, r5, r2
 8004132:	68a3      	ldr	r3, [r4, #8]
 8004134:	6922      	ldr	r2, [r4, #16]
 8004136:	bf0c      	ite	eq
 8004138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800413c:	2500      	movne	r5, #0
 800413e:	4293      	cmp	r3, r2
 8004140:	bfc4      	itt	gt
 8004142:	1a9b      	subgt	r3, r3, r2
 8004144:	18ed      	addgt	r5, r5, r3
 8004146:	2600      	movs	r6, #0
 8004148:	341a      	adds	r4, #26
 800414a:	42b5      	cmp	r5, r6
 800414c:	d11a      	bne.n	8004184 <_printf_common+0xc8>
 800414e:	2000      	movs	r0, #0
 8004150:	e008      	b.n	8004164 <_printf_common+0xa8>
 8004152:	2301      	movs	r3, #1
 8004154:	4652      	mov	r2, sl
 8004156:	4649      	mov	r1, r9
 8004158:	4638      	mov	r0, r7
 800415a:	47c0      	blx	r8
 800415c:	3001      	adds	r0, #1
 800415e:	d103      	bne.n	8004168 <_printf_common+0xac>
 8004160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004168:	3501      	adds	r5, #1
 800416a:	e7c6      	b.n	80040fa <_printf_common+0x3e>
 800416c:	18e1      	adds	r1, r4, r3
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	2030      	movs	r0, #48	; 0x30
 8004172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004176:	4422      	add	r2, r4
 8004178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800417c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004180:	3302      	adds	r3, #2
 8004182:	e7c7      	b.n	8004114 <_printf_common+0x58>
 8004184:	2301      	movs	r3, #1
 8004186:	4622      	mov	r2, r4
 8004188:	4649      	mov	r1, r9
 800418a:	4638      	mov	r0, r7
 800418c:	47c0      	blx	r8
 800418e:	3001      	adds	r0, #1
 8004190:	d0e6      	beq.n	8004160 <_printf_common+0xa4>
 8004192:	3601      	adds	r6, #1
 8004194:	e7d9      	b.n	800414a <_printf_common+0x8e>
	...

08004198 <_printf_i>:
 8004198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800419c:	7e0f      	ldrb	r7, [r1, #24]
 800419e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041a0:	2f78      	cmp	r7, #120	; 0x78
 80041a2:	4691      	mov	r9, r2
 80041a4:	4680      	mov	r8, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	469a      	mov	sl, r3
 80041aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041ae:	d807      	bhi.n	80041c0 <_printf_i+0x28>
 80041b0:	2f62      	cmp	r7, #98	; 0x62
 80041b2:	d80a      	bhi.n	80041ca <_printf_i+0x32>
 80041b4:	2f00      	cmp	r7, #0
 80041b6:	f000 80d8 	beq.w	800436a <_printf_i+0x1d2>
 80041ba:	2f58      	cmp	r7, #88	; 0x58
 80041bc:	f000 80a3 	beq.w	8004306 <_printf_i+0x16e>
 80041c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041c8:	e03a      	b.n	8004240 <_printf_i+0xa8>
 80041ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ce:	2b15      	cmp	r3, #21
 80041d0:	d8f6      	bhi.n	80041c0 <_printf_i+0x28>
 80041d2:	a101      	add	r1, pc, #4	; (adr r1, 80041d8 <_printf_i+0x40>)
 80041d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041d8:	08004231 	.word	0x08004231
 80041dc:	08004245 	.word	0x08004245
 80041e0:	080041c1 	.word	0x080041c1
 80041e4:	080041c1 	.word	0x080041c1
 80041e8:	080041c1 	.word	0x080041c1
 80041ec:	080041c1 	.word	0x080041c1
 80041f0:	08004245 	.word	0x08004245
 80041f4:	080041c1 	.word	0x080041c1
 80041f8:	080041c1 	.word	0x080041c1
 80041fc:	080041c1 	.word	0x080041c1
 8004200:	080041c1 	.word	0x080041c1
 8004204:	08004351 	.word	0x08004351
 8004208:	08004275 	.word	0x08004275
 800420c:	08004333 	.word	0x08004333
 8004210:	080041c1 	.word	0x080041c1
 8004214:	080041c1 	.word	0x080041c1
 8004218:	08004373 	.word	0x08004373
 800421c:	080041c1 	.word	0x080041c1
 8004220:	08004275 	.word	0x08004275
 8004224:	080041c1 	.word	0x080041c1
 8004228:	080041c1 	.word	0x080041c1
 800422c:	0800433b 	.word	0x0800433b
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	1d1a      	adds	r2, r3, #4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	602a      	str	r2, [r5, #0]
 8004238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800423c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004240:	2301      	movs	r3, #1
 8004242:	e0a3      	b.n	800438c <_printf_i+0x1f4>
 8004244:	6820      	ldr	r0, [r4, #0]
 8004246:	6829      	ldr	r1, [r5, #0]
 8004248:	0606      	lsls	r6, r0, #24
 800424a:	f101 0304 	add.w	r3, r1, #4
 800424e:	d50a      	bpl.n	8004266 <_printf_i+0xce>
 8004250:	680e      	ldr	r6, [r1, #0]
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	2e00      	cmp	r6, #0
 8004256:	da03      	bge.n	8004260 <_printf_i+0xc8>
 8004258:	232d      	movs	r3, #45	; 0x2d
 800425a:	4276      	negs	r6, r6
 800425c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004260:	485e      	ldr	r0, [pc, #376]	; (80043dc <_printf_i+0x244>)
 8004262:	230a      	movs	r3, #10
 8004264:	e019      	b.n	800429a <_printf_i+0x102>
 8004266:	680e      	ldr	r6, [r1, #0]
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800426e:	bf18      	it	ne
 8004270:	b236      	sxthne	r6, r6
 8004272:	e7ef      	b.n	8004254 <_printf_i+0xbc>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	6820      	ldr	r0, [r4, #0]
 8004278:	1d19      	adds	r1, r3, #4
 800427a:	6029      	str	r1, [r5, #0]
 800427c:	0601      	lsls	r1, r0, #24
 800427e:	d501      	bpl.n	8004284 <_printf_i+0xec>
 8004280:	681e      	ldr	r6, [r3, #0]
 8004282:	e002      	b.n	800428a <_printf_i+0xf2>
 8004284:	0646      	lsls	r6, r0, #25
 8004286:	d5fb      	bpl.n	8004280 <_printf_i+0xe8>
 8004288:	881e      	ldrh	r6, [r3, #0]
 800428a:	4854      	ldr	r0, [pc, #336]	; (80043dc <_printf_i+0x244>)
 800428c:	2f6f      	cmp	r7, #111	; 0x6f
 800428e:	bf0c      	ite	eq
 8004290:	2308      	moveq	r3, #8
 8004292:	230a      	movne	r3, #10
 8004294:	2100      	movs	r1, #0
 8004296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800429a:	6865      	ldr	r5, [r4, #4]
 800429c:	60a5      	str	r5, [r4, #8]
 800429e:	2d00      	cmp	r5, #0
 80042a0:	bfa2      	ittt	ge
 80042a2:	6821      	ldrge	r1, [r4, #0]
 80042a4:	f021 0104 	bicge.w	r1, r1, #4
 80042a8:	6021      	strge	r1, [r4, #0]
 80042aa:	b90e      	cbnz	r6, 80042b0 <_printf_i+0x118>
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d04d      	beq.n	800434c <_printf_i+0x1b4>
 80042b0:	4615      	mov	r5, r2
 80042b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042b6:	fb03 6711 	mls	r7, r3, r1, r6
 80042ba:	5dc7      	ldrb	r7, [r0, r7]
 80042bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042c0:	4637      	mov	r7, r6
 80042c2:	42bb      	cmp	r3, r7
 80042c4:	460e      	mov	r6, r1
 80042c6:	d9f4      	bls.n	80042b2 <_printf_i+0x11a>
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d10b      	bne.n	80042e4 <_printf_i+0x14c>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	07de      	lsls	r6, r3, #31
 80042d0:	d508      	bpl.n	80042e4 <_printf_i+0x14c>
 80042d2:	6923      	ldr	r3, [r4, #16]
 80042d4:	6861      	ldr	r1, [r4, #4]
 80042d6:	4299      	cmp	r1, r3
 80042d8:	bfde      	ittt	le
 80042da:	2330      	movle	r3, #48	; 0x30
 80042dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80042e4:	1b52      	subs	r2, r2, r5
 80042e6:	6122      	str	r2, [r4, #16]
 80042e8:	f8cd a000 	str.w	sl, [sp]
 80042ec:	464b      	mov	r3, r9
 80042ee:	aa03      	add	r2, sp, #12
 80042f0:	4621      	mov	r1, r4
 80042f2:	4640      	mov	r0, r8
 80042f4:	f7ff fee2 	bl	80040bc <_printf_common>
 80042f8:	3001      	adds	r0, #1
 80042fa:	d14c      	bne.n	8004396 <_printf_i+0x1fe>
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004300:	b004      	add	sp, #16
 8004302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004306:	4835      	ldr	r0, [pc, #212]	; (80043dc <_printf_i+0x244>)
 8004308:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800430c:	6829      	ldr	r1, [r5, #0]
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	f851 6b04 	ldr.w	r6, [r1], #4
 8004314:	6029      	str	r1, [r5, #0]
 8004316:	061d      	lsls	r5, r3, #24
 8004318:	d514      	bpl.n	8004344 <_printf_i+0x1ac>
 800431a:	07df      	lsls	r7, r3, #31
 800431c:	bf44      	itt	mi
 800431e:	f043 0320 	orrmi.w	r3, r3, #32
 8004322:	6023      	strmi	r3, [r4, #0]
 8004324:	b91e      	cbnz	r6, 800432e <_printf_i+0x196>
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f023 0320 	bic.w	r3, r3, #32
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	2310      	movs	r3, #16
 8004330:	e7b0      	b.n	8004294 <_printf_i+0xfc>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	f043 0320 	orr.w	r3, r3, #32
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	2378      	movs	r3, #120	; 0x78
 800433c:	4828      	ldr	r0, [pc, #160]	; (80043e0 <_printf_i+0x248>)
 800433e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004342:	e7e3      	b.n	800430c <_printf_i+0x174>
 8004344:	0659      	lsls	r1, r3, #25
 8004346:	bf48      	it	mi
 8004348:	b2b6      	uxthmi	r6, r6
 800434a:	e7e6      	b.n	800431a <_printf_i+0x182>
 800434c:	4615      	mov	r5, r2
 800434e:	e7bb      	b.n	80042c8 <_printf_i+0x130>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	6826      	ldr	r6, [r4, #0]
 8004354:	6961      	ldr	r1, [r4, #20]
 8004356:	1d18      	adds	r0, r3, #4
 8004358:	6028      	str	r0, [r5, #0]
 800435a:	0635      	lsls	r5, r6, #24
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	d501      	bpl.n	8004364 <_printf_i+0x1cc>
 8004360:	6019      	str	r1, [r3, #0]
 8004362:	e002      	b.n	800436a <_printf_i+0x1d2>
 8004364:	0670      	lsls	r0, r6, #25
 8004366:	d5fb      	bpl.n	8004360 <_printf_i+0x1c8>
 8004368:	8019      	strh	r1, [r3, #0]
 800436a:	2300      	movs	r3, #0
 800436c:	6123      	str	r3, [r4, #16]
 800436e:	4615      	mov	r5, r2
 8004370:	e7ba      	b.n	80042e8 <_printf_i+0x150>
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	1d1a      	adds	r2, r3, #4
 8004376:	602a      	str	r2, [r5, #0]
 8004378:	681d      	ldr	r5, [r3, #0]
 800437a:	6862      	ldr	r2, [r4, #4]
 800437c:	2100      	movs	r1, #0
 800437e:	4628      	mov	r0, r5
 8004380:	f7fb ff2e 	bl	80001e0 <memchr>
 8004384:	b108      	cbz	r0, 800438a <_printf_i+0x1f2>
 8004386:	1b40      	subs	r0, r0, r5
 8004388:	6060      	str	r0, [r4, #4]
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	6123      	str	r3, [r4, #16]
 800438e:	2300      	movs	r3, #0
 8004390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004394:	e7a8      	b.n	80042e8 <_printf_i+0x150>
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	462a      	mov	r2, r5
 800439a:	4649      	mov	r1, r9
 800439c:	4640      	mov	r0, r8
 800439e:	47d0      	blx	sl
 80043a0:	3001      	adds	r0, #1
 80043a2:	d0ab      	beq.n	80042fc <_printf_i+0x164>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	079b      	lsls	r3, r3, #30
 80043a8:	d413      	bmi.n	80043d2 <_printf_i+0x23a>
 80043aa:	68e0      	ldr	r0, [r4, #12]
 80043ac:	9b03      	ldr	r3, [sp, #12]
 80043ae:	4298      	cmp	r0, r3
 80043b0:	bfb8      	it	lt
 80043b2:	4618      	movlt	r0, r3
 80043b4:	e7a4      	b.n	8004300 <_printf_i+0x168>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4632      	mov	r2, r6
 80043ba:	4649      	mov	r1, r9
 80043bc:	4640      	mov	r0, r8
 80043be:	47d0      	blx	sl
 80043c0:	3001      	adds	r0, #1
 80043c2:	d09b      	beq.n	80042fc <_printf_i+0x164>
 80043c4:	3501      	adds	r5, #1
 80043c6:	68e3      	ldr	r3, [r4, #12]
 80043c8:	9903      	ldr	r1, [sp, #12]
 80043ca:	1a5b      	subs	r3, r3, r1
 80043cc:	42ab      	cmp	r3, r5
 80043ce:	dcf2      	bgt.n	80043b6 <_printf_i+0x21e>
 80043d0:	e7eb      	b.n	80043aa <_printf_i+0x212>
 80043d2:	2500      	movs	r5, #0
 80043d4:	f104 0619 	add.w	r6, r4, #25
 80043d8:	e7f5      	b.n	80043c6 <_printf_i+0x22e>
 80043da:	bf00      	nop
 80043dc:	0800470d 	.word	0x0800470d
 80043e0:	0800471e 	.word	0x0800471e

080043e4 <memcpy>:
 80043e4:	440a      	add	r2, r1
 80043e6:	4291      	cmp	r1, r2
 80043e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043ec:	d100      	bne.n	80043f0 <memcpy+0xc>
 80043ee:	4770      	bx	lr
 80043f0:	b510      	push	{r4, lr}
 80043f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043fa:	4291      	cmp	r1, r2
 80043fc:	d1f9      	bne.n	80043f2 <memcpy+0xe>
 80043fe:	bd10      	pop	{r4, pc}

08004400 <memmove>:
 8004400:	4288      	cmp	r0, r1
 8004402:	b510      	push	{r4, lr}
 8004404:	eb01 0402 	add.w	r4, r1, r2
 8004408:	d902      	bls.n	8004410 <memmove+0x10>
 800440a:	4284      	cmp	r4, r0
 800440c:	4623      	mov	r3, r4
 800440e:	d807      	bhi.n	8004420 <memmove+0x20>
 8004410:	1e43      	subs	r3, r0, #1
 8004412:	42a1      	cmp	r1, r4
 8004414:	d008      	beq.n	8004428 <memmove+0x28>
 8004416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800441a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800441e:	e7f8      	b.n	8004412 <memmove+0x12>
 8004420:	4402      	add	r2, r0
 8004422:	4601      	mov	r1, r0
 8004424:	428a      	cmp	r2, r1
 8004426:	d100      	bne.n	800442a <memmove+0x2a>
 8004428:	bd10      	pop	{r4, pc}
 800442a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800442e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004432:	e7f7      	b.n	8004424 <memmove+0x24>

08004434 <_free_r>:
 8004434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004436:	2900      	cmp	r1, #0
 8004438:	d044      	beq.n	80044c4 <_free_r+0x90>
 800443a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443e:	9001      	str	r0, [sp, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f1a1 0404 	sub.w	r4, r1, #4
 8004446:	bfb8      	it	lt
 8004448:	18e4      	addlt	r4, r4, r3
 800444a:	f000 f913 	bl	8004674 <__malloc_lock>
 800444e:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <_free_r+0x94>)
 8004450:	9801      	ldr	r0, [sp, #4]
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	b933      	cbnz	r3, 8004464 <_free_r+0x30>
 8004456:	6063      	str	r3, [r4, #4]
 8004458:	6014      	str	r4, [r2, #0]
 800445a:	b003      	add	sp, #12
 800445c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004460:	f000 b90e 	b.w	8004680 <__malloc_unlock>
 8004464:	42a3      	cmp	r3, r4
 8004466:	d908      	bls.n	800447a <_free_r+0x46>
 8004468:	6825      	ldr	r5, [r4, #0]
 800446a:	1961      	adds	r1, r4, r5
 800446c:	428b      	cmp	r3, r1
 800446e:	bf01      	itttt	eq
 8004470:	6819      	ldreq	r1, [r3, #0]
 8004472:	685b      	ldreq	r3, [r3, #4]
 8004474:	1949      	addeq	r1, r1, r5
 8004476:	6021      	streq	r1, [r4, #0]
 8004478:	e7ed      	b.n	8004456 <_free_r+0x22>
 800447a:	461a      	mov	r2, r3
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b10b      	cbz	r3, 8004484 <_free_r+0x50>
 8004480:	42a3      	cmp	r3, r4
 8004482:	d9fa      	bls.n	800447a <_free_r+0x46>
 8004484:	6811      	ldr	r1, [r2, #0]
 8004486:	1855      	adds	r5, r2, r1
 8004488:	42a5      	cmp	r5, r4
 800448a:	d10b      	bne.n	80044a4 <_free_r+0x70>
 800448c:	6824      	ldr	r4, [r4, #0]
 800448e:	4421      	add	r1, r4
 8004490:	1854      	adds	r4, r2, r1
 8004492:	42a3      	cmp	r3, r4
 8004494:	6011      	str	r1, [r2, #0]
 8004496:	d1e0      	bne.n	800445a <_free_r+0x26>
 8004498:	681c      	ldr	r4, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	6053      	str	r3, [r2, #4]
 800449e:	4421      	add	r1, r4
 80044a0:	6011      	str	r1, [r2, #0]
 80044a2:	e7da      	b.n	800445a <_free_r+0x26>
 80044a4:	d902      	bls.n	80044ac <_free_r+0x78>
 80044a6:	230c      	movs	r3, #12
 80044a8:	6003      	str	r3, [r0, #0]
 80044aa:	e7d6      	b.n	800445a <_free_r+0x26>
 80044ac:	6825      	ldr	r5, [r4, #0]
 80044ae:	1961      	adds	r1, r4, r5
 80044b0:	428b      	cmp	r3, r1
 80044b2:	bf04      	itt	eq
 80044b4:	6819      	ldreq	r1, [r3, #0]
 80044b6:	685b      	ldreq	r3, [r3, #4]
 80044b8:	6063      	str	r3, [r4, #4]
 80044ba:	bf04      	itt	eq
 80044bc:	1949      	addeq	r1, r1, r5
 80044be:	6021      	streq	r1, [r4, #0]
 80044c0:	6054      	str	r4, [r2, #4]
 80044c2:	e7ca      	b.n	800445a <_free_r+0x26>
 80044c4:	b003      	add	sp, #12
 80044c6:	bd30      	pop	{r4, r5, pc}
 80044c8:	200001b0 	.word	0x200001b0

080044cc <sbrk_aligned>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	4e0e      	ldr	r6, [pc, #56]	; (8004508 <sbrk_aligned+0x3c>)
 80044d0:	460c      	mov	r4, r1
 80044d2:	6831      	ldr	r1, [r6, #0]
 80044d4:	4605      	mov	r5, r0
 80044d6:	b911      	cbnz	r1, 80044de <sbrk_aligned+0x12>
 80044d8:	f000 f8bc 	bl	8004654 <_sbrk_r>
 80044dc:	6030      	str	r0, [r6, #0]
 80044de:	4621      	mov	r1, r4
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 f8b7 	bl	8004654 <_sbrk_r>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	d00a      	beq.n	8004500 <sbrk_aligned+0x34>
 80044ea:	1cc4      	adds	r4, r0, #3
 80044ec:	f024 0403 	bic.w	r4, r4, #3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d007      	beq.n	8004504 <sbrk_aligned+0x38>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 f8ac 	bl	8004654 <_sbrk_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d101      	bne.n	8004504 <sbrk_aligned+0x38>
 8004500:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004504:	4620      	mov	r0, r4
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	200001b4 	.word	0x200001b4

0800450c <_malloc_r>:
 800450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004510:	1ccd      	adds	r5, r1, #3
 8004512:	f025 0503 	bic.w	r5, r5, #3
 8004516:	3508      	adds	r5, #8
 8004518:	2d0c      	cmp	r5, #12
 800451a:	bf38      	it	cc
 800451c:	250c      	movcc	r5, #12
 800451e:	2d00      	cmp	r5, #0
 8004520:	4607      	mov	r7, r0
 8004522:	db01      	blt.n	8004528 <_malloc_r+0x1c>
 8004524:	42a9      	cmp	r1, r5
 8004526:	d905      	bls.n	8004534 <_malloc_r+0x28>
 8004528:	230c      	movs	r3, #12
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	2600      	movs	r6, #0
 800452e:	4630      	mov	r0, r6
 8004530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004534:	4e2e      	ldr	r6, [pc, #184]	; (80045f0 <_malloc_r+0xe4>)
 8004536:	f000 f89d 	bl	8004674 <__malloc_lock>
 800453a:	6833      	ldr	r3, [r6, #0]
 800453c:	461c      	mov	r4, r3
 800453e:	bb34      	cbnz	r4, 800458e <_malloc_r+0x82>
 8004540:	4629      	mov	r1, r5
 8004542:	4638      	mov	r0, r7
 8004544:	f7ff ffc2 	bl	80044cc <sbrk_aligned>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	4604      	mov	r4, r0
 800454c:	d14d      	bne.n	80045ea <_malloc_r+0xde>
 800454e:	6834      	ldr	r4, [r6, #0]
 8004550:	4626      	mov	r6, r4
 8004552:	2e00      	cmp	r6, #0
 8004554:	d140      	bne.n	80045d8 <_malloc_r+0xcc>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	4631      	mov	r1, r6
 800455a:	4638      	mov	r0, r7
 800455c:	eb04 0803 	add.w	r8, r4, r3
 8004560:	f000 f878 	bl	8004654 <_sbrk_r>
 8004564:	4580      	cmp	r8, r0
 8004566:	d13a      	bne.n	80045de <_malloc_r+0xd2>
 8004568:	6821      	ldr	r1, [r4, #0]
 800456a:	3503      	adds	r5, #3
 800456c:	1a6d      	subs	r5, r5, r1
 800456e:	f025 0503 	bic.w	r5, r5, #3
 8004572:	3508      	adds	r5, #8
 8004574:	2d0c      	cmp	r5, #12
 8004576:	bf38      	it	cc
 8004578:	250c      	movcc	r5, #12
 800457a:	4629      	mov	r1, r5
 800457c:	4638      	mov	r0, r7
 800457e:	f7ff ffa5 	bl	80044cc <sbrk_aligned>
 8004582:	3001      	adds	r0, #1
 8004584:	d02b      	beq.n	80045de <_malloc_r+0xd2>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	442b      	add	r3, r5
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	e00e      	b.n	80045ac <_malloc_r+0xa0>
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	1b52      	subs	r2, r2, r5
 8004592:	d41e      	bmi.n	80045d2 <_malloc_r+0xc6>
 8004594:	2a0b      	cmp	r2, #11
 8004596:	d916      	bls.n	80045c6 <_malloc_r+0xba>
 8004598:	1961      	adds	r1, r4, r5
 800459a:	42a3      	cmp	r3, r4
 800459c:	6025      	str	r5, [r4, #0]
 800459e:	bf18      	it	ne
 80045a0:	6059      	strne	r1, [r3, #4]
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	bf08      	it	eq
 80045a6:	6031      	streq	r1, [r6, #0]
 80045a8:	5162      	str	r2, [r4, r5]
 80045aa:	604b      	str	r3, [r1, #4]
 80045ac:	4638      	mov	r0, r7
 80045ae:	f104 060b 	add.w	r6, r4, #11
 80045b2:	f000 f865 	bl	8004680 <__malloc_unlock>
 80045b6:	f026 0607 	bic.w	r6, r6, #7
 80045ba:	1d23      	adds	r3, r4, #4
 80045bc:	1af2      	subs	r2, r6, r3
 80045be:	d0b6      	beq.n	800452e <_malloc_r+0x22>
 80045c0:	1b9b      	subs	r3, r3, r6
 80045c2:	50a3      	str	r3, [r4, r2]
 80045c4:	e7b3      	b.n	800452e <_malloc_r+0x22>
 80045c6:	6862      	ldr	r2, [r4, #4]
 80045c8:	42a3      	cmp	r3, r4
 80045ca:	bf0c      	ite	eq
 80045cc:	6032      	streq	r2, [r6, #0]
 80045ce:	605a      	strne	r2, [r3, #4]
 80045d0:	e7ec      	b.n	80045ac <_malloc_r+0xa0>
 80045d2:	4623      	mov	r3, r4
 80045d4:	6864      	ldr	r4, [r4, #4]
 80045d6:	e7b2      	b.n	800453e <_malloc_r+0x32>
 80045d8:	4634      	mov	r4, r6
 80045da:	6876      	ldr	r6, [r6, #4]
 80045dc:	e7b9      	b.n	8004552 <_malloc_r+0x46>
 80045de:	230c      	movs	r3, #12
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	4638      	mov	r0, r7
 80045e4:	f000 f84c 	bl	8004680 <__malloc_unlock>
 80045e8:	e7a1      	b.n	800452e <_malloc_r+0x22>
 80045ea:	6025      	str	r5, [r4, #0]
 80045ec:	e7de      	b.n	80045ac <_malloc_r+0xa0>
 80045ee:	bf00      	nop
 80045f0:	200001b0 	.word	0x200001b0

080045f4 <_realloc_r>:
 80045f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f8:	4680      	mov	r8, r0
 80045fa:	4614      	mov	r4, r2
 80045fc:	460e      	mov	r6, r1
 80045fe:	b921      	cbnz	r1, 800460a <_realloc_r+0x16>
 8004600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004604:	4611      	mov	r1, r2
 8004606:	f7ff bf81 	b.w	800450c <_malloc_r>
 800460a:	b92a      	cbnz	r2, 8004618 <_realloc_r+0x24>
 800460c:	f7ff ff12 	bl	8004434 <_free_r>
 8004610:	4625      	mov	r5, r4
 8004612:	4628      	mov	r0, r5
 8004614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004618:	f000 f838 	bl	800468c <_malloc_usable_size_r>
 800461c:	4284      	cmp	r4, r0
 800461e:	4607      	mov	r7, r0
 8004620:	d802      	bhi.n	8004628 <_realloc_r+0x34>
 8004622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004626:	d812      	bhi.n	800464e <_realloc_r+0x5a>
 8004628:	4621      	mov	r1, r4
 800462a:	4640      	mov	r0, r8
 800462c:	f7ff ff6e 	bl	800450c <_malloc_r>
 8004630:	4605      	mov	r5, r0
 8004632:	2800      	cmp	r0, #0
 8004634:	d0ed      	beq.n	8004612 <_realloc_r+0x1e>
 8004636:	42bc      	cmp	r4, r7
 8004638:	4622      	mov	r2, r4
 800463a:	4631      	mov	r1, r6
 800463c:	bf28      	it	cs
 800463e:	463a      	movcs	r2, r7
 8004640:	f7ff fed0 	bl	80043e4 <memcpy>
 8004644:	4631      	mov	r1, r6
 8004646:	4640      	mov	r0, r8
 8004648:	f7ff fef4 	bl	8004434 <_free_r>
 800464c:	e7e1      	b.n	8004612 <_realloc_r+0x1e>
 800464e:	4635      	mov	r5, r6
 8004650:	e7df      	b.n	8004612 <_realloc_r+0x1e>
	...

08004654 <_sbrk_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d06      	ldr	r5, [pc, #24]	; (8004670 <_sbrk_r+0x1c>)
 8004658:	2300      	movs	r3, #0
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	f7fb ffac 	bl	80005bc <_sbrk>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_sbrk_r+0x1a>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_sbrk_r+0x1a>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	200001b8 	.word	0x200001b8

08004674 <__malloc_lock>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__malloc_lock+0x8>)
 8004676:	f000 b811 	b.w	800469c <__retarget_lock_acquire_recursive>
 800467a:	bf00      	nop
 800467c:	200001bc 	.word	0x200001bc

08004680 <__malloc_unlock>:
 8004680:	4801      	ldr	r0, [pc, #4]	; (8004688 <__malloc_unlock+0x8>)
 8004682:	f000 b80c 	b.w	800469e <__retarget_lock_release_recursive>
 8004686:	bf00      	nop
 8004688:	200001bc 	.word	0x200001bc

0800468c <_malloc_usable_size_r>:
 800468c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004690:	1f18      	subs	r0, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	bfbc      	itt	lt
 8004696:	580b      	ldrlt	r3, [r1, r0]
 8004698:	18c0      	addlt	r0, r0, r3
 800469a:	4770      	bx	lr

0800469c <__retarget_lock_acquire_recursive>:
 800469c:	4770      	bx	lr

0800469e <__retarget_lock_release_recursive>:
 800469e:	4770      	bx	lr

080046a0 <_init>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	bf00      	nop
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr

080046ac <_fini>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	bf00      	nop
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr
