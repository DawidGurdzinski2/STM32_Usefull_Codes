/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/*
Autorzy: JAKUB ŚLUBOWSKI i LUKASZ KUSTOSZ
Projekt: Balanser piłeczki ping-pongowej w rynience
Opis działania: Na podstawie odległości mierzonej czujnikiem VL53L1X program
przewarza dane przez regulator PID i steruje servem, które ustawia kąt ustawienia
rynienki tak aby ustawić rynienkę na środku.
*/
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include "servo.h"
#include "akcelerometr.h"
#include "distance_sensor.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct
{
	uint16_t set_point;
	float Kp;
	float Kd;
	float Ki;
	uint32_t time_old;
	uint32_t time_new;
    uint32_t period;
	int16_t distance_error;
	int16_t distance_previous_error;
	int16_t dist_diference;
	float PID_p, PID_i, PID_d, PID_total;
}PIDStruct;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define dev 0x52  // address of IR distance sensor

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint16_t data_recdist;
int8_t data_recangle;
float  data_PID_total  ;
PIDStruct PID;
float  dist_avg_new= 175, dist_avg_old=175 ;
float 	dist_sample;
float n = 2.0;
uint16_t servo_angle = ANGLE_MID;
//uartzm
char msg[64];
//uart
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void PIDRegulator(uint16_t distance, PIDStruct *PID);
uint16_t CalculateAngle(float PID_value);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  set_ang(940);

 // bma_init();
  //IR_Init();

  //PID VARIABLES INIT
  PID.Kd =0.0;
  PID.Ki = 0.0;
  PID.Kp = 2; // 0.5 ustawione bylo
  PID.time_old = HAL_GetTick();
  PID.set_point = 185;
  //PID VARIABLES INIT
  //HAL_TIM_Base_Start_IT(&htim2);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	// data_recdist = IR_Get_Distance();
	// data_recangle = 5.625*bma_read(bma_x,1);

	// dist_sample = (float) IR_Get_Distance();

	// dist_avg_new = ((n-1)/n) * dist_avg_old + ((1/n) * dist_sample);

	// dist_avg_old = dist_avg_new;
	// PIDRegulator(data_recdist, &PID);
	// PIDRegulator((uint16_t)dist_avg_new, &PID);
	// temp = PID.PID_total;


	 //
	 // uart test
	// uint16_t temp;
	// temp = CalculateAngle(PID.PID_total);
	// sprintf((char*)msg," angle %d  PID_total %f  , Dist %d\n",temp,  PID.PID_total, data_recdist);


	// HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),1000);

	 //uarttest
	 //set_ang(CalculateAngle(PID.PID_total));
	 set_ang(1300); // prawo
	 HAL_Delay(1000);
	 set_ang(1800); // lewo
	 HAL_Delay(1000);
	 set_ang(1520);
	 HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void PIDRegulator( uint16_t distance,  PIDStruct *PID)
{
	PID->time_new = HAL_GetTick();
	PID->period = PID->time_new - PID->time_old;
	PID->time_old = PID->time_new;

	PID->distance_error = PID->set_point - distance;

	PID->PID_p = PID->Kp * PID->distance_error;

	PID->dist_diference = PID->distance_error - PID->distance_previous_error;

	PID->PID_d = PID->Kd*(((float)PID->distance_error - (float)PID->distance_previous_error)/(float)PID->period);

	if(-3 < PID->distance_error && PID->distance_error < 3)
	    {
			PID->PID_i = PID->PID_i + (PID->Ki * PID->distance_error);
	    }
	else
	    {
	    	PID->PID_i = 0;
	    }
	PID->PID_total = PID->PID_p + PID->PID_i + PID->PID_d;
	PID->distance_previous_error =  PID->distance_error;
	return;
}

uint16_t CalculateAngle(float PID_value)
{


	if(PID_value < 0 && PID_value >-320){
		servo_angle = ANGLE_MID + 1.875*(-PID_value);
	}
	else if(PID_value > 0 && PID_value < 320){
		servo_angle =  ANGLE_MID - 1.875*PID_value;
	}
	else {

	}

	return servo_angle;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim -> Instance == TIM2)
	{
		//set_ang(CalculateAngle(PID.PID_total));
	}

}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
