#include "MPU6050.h"

extern float Ax, Ay, Az, Gx, Gy, Gz, height_point,width_point,alfay;
int16_t Accel_X_RAW = 0;
int16_t Accel_Y_RAW = 0;
int16_t Accel_Z_RAW = 0;

int16_t Gyro_X_RAW = 0;
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;







void MPU6050_Init (void)
{
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&I2C_NO, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);

 	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
		HAL_I2C_Mem_Write(&I2C_NO, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
		HAL_I2C_Mem_Write(&I2C_NO, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
		HAL_I2C_Mem_Write(&I2C_NO, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
		HAL_I2C_Mem_Write(&I2C_NO, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
	}
	else {
		Error_Handler();
	}

}

void MPU6050_Read_Accel (void)
{
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&I2C_NO, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);

	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
	Ay = Accel_Y_RAW/17500.0;
	Az = Accel_Z_RAW/17500.0 ;
}

void MPU6050_Read_Gyro (void)
{
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&I2C_NO, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);

	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
	Gy = Gyro_Y_RAW/131.0;
	Gz = Gyro_Z_RAW/131.0;
}
void setBankLine(float zg, float yg){


	if(zg > 0 && yg > 0){ // 1 cwiartka plaszczyzny gziemskiego i y samolot (obrot od 0 do 90 w prawo) alfa od 0 do pi/2
		alfay = acos(yg);
		height_point = sin(alfay-M_PI_2)*Image_radius;
		width_point = cos(alfay-M_PI_2)*Image_radius;
		triangle_point_h = sin(alfay)*Image_radius/5;
		triangle_point_w = cos(alfay)*Image_radius/5;
	}
	else if(zg > 0 && yg < 0){ // cwiartka 2 (obrot od 0 do -90 w prawo) alfa od pi/2 do pi
		alfay = acos(yg);
		height_point = sin(alfay-M_PI_2)*Image_radius;
		width_point = cos(alfay-M_PI_2)*Image_radius;
		triangle_point_h = sin(alfay)*Image_radius/5;
		triangle_point_w = cos(alfay)*Image_radius/5;
	}
	else if(zg < 0 && yg < 0){ // cwiartka 3 (obrot od -90 do -180 w prawo) alfa od pi do 3/4 pi
		alfay = 2*M_PI - acos(yg); // te same co w 2 cwiartce ale alfa wieksza o 90 stopni
		height_point = sin(alfay-M_PI_2)*Image_radius;
		width_point = cos(alfay-M_PI_2)*Image_radius;
		triangle_point_h = sin(alfay)*Image_radius/5;
		triangle_point_w = cos(alfay)*Image_radius/5;
	}
	else if(zg < 0 && yg > 0){ // cwiartka 4 (obrot od -180 do -270 w prawo) alfa od 3/4 pi do 2 pi
		alfay = 2*M_PI - acos(yg); //te same wartosci co w 1 cwiartce ale alfa wieksza o 270 stopni
		height_point = sin(alfay-M_PI_2)*Image_radius;
		width_point = cos(alfay-M_PI_2)*Image_radius;
		triangle_point_h = sin(alfay)*Image_radius/5;
		triangle_point_w = cos(alfay)*Image_radius/5;
	}
}
