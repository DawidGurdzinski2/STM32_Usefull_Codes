
PMIK_PROJEKT_CLEAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b350  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800b410  0800b410  0001b410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba1c  0800ba1c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba1c  0800ba1c  0001ba1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba24  0800ba24  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba24  0800ba24  0001ba24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba28  0800ba28  0001ba28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ba2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001e4  0800bc10  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800bc10  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013364  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c69  00000000  00000000  00033570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  000361e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00037318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ec9  00000000  00000000  000382f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152f6  00000000  00000000  0003e1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008983d  00000000  00000000  000534b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dccf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  000dcd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b3f8 	.word	0x0800b3f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800b3f8 	.word	0x0800b3f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff81 	bl	8002344 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fed1 	bl	80021f4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff73 	bl	8002344 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ff69 	bl	8002344 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fef9 	bl	8002278 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 feef 	bl	8002278 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc31 	bl	8000d28 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc3d 	bl	8000d74 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc33 	bl	8000d74 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	; 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff31 	bl	8001430 <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	; 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd7d 	bl	80010d4 <__aeabi_fsub>
 80005da:	f000 ff29 	bl	8001430 <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fd21 	bl	8003044 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 f96a 	bl	80028e4 <__aeabi_dsub>
 8000610:	f002 fd18 	bl	8003044 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fdf0 	bl	8003228 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fdeb 	bl	8003228 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	469b      	mov	fp, r3
 800065a:	d433      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065c:	465a      	mov	r2, fp
 800065e:	4653      	mov	r3, sl
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83a      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e078      	b.n	8000768 <__udivmoddi4+0x144>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e075      	b.n	800076e <__udivmoddi4+0x14a>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e028      	b.n	80006ee <__udivmoddi4+0xca>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	4652      	mov	r2, sl
 80006cc:	40da      	lsrs	r2, r3
 80006ce:	4641      	mov	r1, r8
 80006d0:	0013      	movs	r3, r2
 80006d2:	464a      	mov	r2, r9
 80006d4:	408a      	lsls	r2, r1
 80006d6:	0017      	movs	r7, r2
 80006d8:	4642      	mov	r2, r8
 80006da:	431f      	orrs	r7, r3
 80006dc:	4653      	mov	r3, sl
 80006de:	4093      	lsls	r3, r2
 80006e0:	001e      	movs	r6, r3
 80006e2:	42af      	cmp	r7, r5
 80006e4:	d9c4      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2300      	movs	r3, #0
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	4643      	mov	r3, r8
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0d9      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f4:	07fb      	lsls	r3, r7, #31
 80006f6:	0872      	lsrs	r2, r6, #1
 80006f8:	431a      	orrs	r2, r3
 80006fa:	4646      	mov	r6, r8
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	e00e      	b.n	800071e <__udivmoddi4+0xfa>
 8000700:	42ab      	cmp	r3, r5
 8000702:	d101      	bne.n	8000708 <__udivmoddi4+0xe4>
 8000704:	42a2      	cmp	r2, r4
 8000706:	d80c      	bhi.n	8000722 <__udivmoddi4+0xfe>
 8000708:	1aa4      	subs	r4, r4, r2
 800070a:	419d      	sbcs	r5, r3
 800070c:	2001      	movs	r0, #1
 800070e:	1924      	adds	r4, r4, r4
 8000710:	416d      	adcs	r5, r5
 8000712:	2100      	movs	r1, #0
 8000714:	3e01      	subs	r6, #1
 8000716:	1824      	adds	r4, r4, r0
 8000718:	414d      	adcs	r5, r1
 800071a:	2e00      	cmp	r6, #0
 800071c:	d006      	beq.n	800072c <__udivmoddi4+0x108>
 800071e:	42ab      	cmp	r3, r5
 8000720:	d9ee      	bls.n	8000700 <__udivmoddi4+0xdc>
 8000722:	3e01      	subs	r6, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2e00      	cmp	r6, #0
 800072a:	d1f8      	bne.n	800071e <__udivmoddi4+0xfa>
 800072c:	9800      	ldr	r0, [sp, #0]
 800072e:	9901      	ldr	r1, [sp, #4]
 8000730:	465b      	mov	r3, fp
 8000732:	1900      	adds	r0, r0, r4
 8000734:	4169      	adcs	r1, r5
 8000736:	2b00      	cmp	r3, #0
 8000738:	db24      	blt.n	8000784 <__udivmoddi4+0x160>
 800073a:	002b      	movs	r3, r5
 800073c:	465a      	mov	r2, fp
 800073e:	4644      	mov	r4, r8
 8000740:	40d3      	lsrs	r3, r2
 8000742:	002a      	movs	r2, r5
 8000744:	40e2      	lsrs	r2, r4
 8000746:	001c      	movs	r4, r3
 8000748:	465b      	mov	r3, fp
 800074a:	0015      	movs	r5, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	db2a      	blt.n	80007a6 <__udivmoddi4+0x182>
 8000750:	0026      	movs	r6, r4
 8000752:	409e      	lsls	r6, r3
 8000754:	0033      	movs	r3, r6
 8000756:	0026      	movs	r6, r4
 8000758:	4647      	mov	r7, r8
 800075a:	40be      	lsls	r6, r7
 800075c:	0032      	movs	r2, r6
 800075e:	1a80      	subs	r0, r0, r2
 8000760:	4199      	sbcs	r1, r3
 8000762:	9000      	str	r0, [sp, #0]
 8000764:	9101      	str	r1, [sp, #4]
 8000766:	e79f      	b.n	80006a8 <__udivmoddi4+0x84>
 8000768:	42a3      	cmp	r3, r4
 800076a:	d8bc      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 800076c:	e783      	b.n	8000676 <__udivmoddi4+0x52>
 800076e:	4642      	mov	r2, r8
 8000770:	2320      	movs	r3, #32
 8000772:	2100      	movs	r1, #0
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	2200      	movs	r2, #0
 8000778:	9100      	str	r1, [sp, #0]
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	40da      	lsrs	r2, r3
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	e786      	b.n	8000692 <__udivmoddi4+0x6e>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	002a      	movs	r2, r5
 800078c:	4646      	mov	r6, r8
 800078e:	409a      	lsls	r2, r3
 8000790:	0023      	movs	r3, r4
 8000792:	40f3      	lsrs	r3, r6
 8000794:	4644      	mov	r4, r8
 8000796:	4313      	orrs	r3, r2
 8000798:	002a      	movs	r2, r5
 800079a:	40e2      	lsrs	r2, r4
 800079c:	001c      	movs	r4, r3
 800079e:	465b      	mov	r3, fp
 80007a0:	0015      	movs	r5, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dad4      	bge.n	8000750 <__udivmoddi4+0x12c>
 80007a6:	4642      	mov	r2, r8
 80007a8:	002f      	movs	r7, r5
 80007aa:	2320      	movs	r3, #32
 80007ac:	0026      	movs	r6, r4
 80007ae:	4097      	lsls	r7, r2
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	40de      	lsrs	r6, r3
 80007b4:	003b      	movs	r3, r7
 80007b6:	4333      	orrs	r3, r6
 80007b8:	e7cd      	b.n	8000756 <__udivmoddi4+0x132>
 80007ba:	46c0      	nop			; (mov r8, r8)

080007bc <__aeabi_fadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	46c6      	mov	lr, r8
 80007c0:	0243      	lsls	r3, r0, #9
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	024e      	lsls	r6, r1, #9
 80007c6:	0045      	lsls	r5, r0, #1
 80007c8:	004f      	lsls	r7, r1, #1
 80007ca:	00da      	lsls	r2, r3, #3
 80007cc:	0fc4      	lsrs	r4, r0, #31
 80007ce:	469c      	mov	ip, r3
 80007d0:	0a70      	lsrs	r0, r6, #9
 80007d2:	4690      	mov	r8, r2
 80007d4:	b500      	push	{lr}
 80007d6:	0e2d      	lsrs	r5, r5, #24
 80007d8:	0e3f      	lsrs	r7, r7, #24
 80007da:	0fc9      	lsrs	r1, r1, #31
 80007dc:	09b6      	lsrs	r6, r6, #6
 80007de:	428c      	cmp	r4, r1
 80007e0:	d04b      	beq.n	800087a <__aeabi_fadd+0xbe>
 80007e2:	1bea      	subs	r2, r5, r7
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	dd36      	ble.n	8000856 <__aeabi_fadd+0x9a>
 80007e8:	2f00      	cmp	r7, #0
 80007ea:	d061      	beq.n	80008b0 <__aeabi_fadd+0xf4>
 80007ec:	2dff      	cmp	r5, #255	; 0xff
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fadd+0x36>
 80007f0:	e0ad      	b.n	800094e <__aeabi_fadd+0x192>
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	04db      	lsls	r3, r3, #19
 80007f6:	431e      	orrs	r6, r3
 80007f8:	2a1b      	cmp	r2, #27
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fadd+0x42>
 80007fc:	e0d3      	b.n	80009a6 <__aeabi_fadd+0x1ea>
 80007fe:	2001      	movs	r0, #1
 8000800:	4643      	mov	r3, r8
 8000802:	1a18      	subs	r0, r3, r0
 8000804:	0143      	lsls	r3, r0, #5
 8000806:	d400      	bmi.n	800080a <__aeabi_fadd+0x4e>
 8000808:	e08c      	b.n	8000924 <__aeabi_fadd+0x168>
 800080a:	0180      	lsls	r0, r0, #6
 800080c:	0987      	lsrs	r7, r0, #6
 800080e:	0038      	movs	r0, r7
 8000810:	f002 fcec 	bl	80031ec <__clzsi2>
 8000814:	3805      	subs	r0, #5
 8000816:	4087      	lsls	r7, r0
 8000818:	4285      	cmp	r5, r0
 800081a:	dc00      	bgt.n	800081e <__aeabi_fadd+0x62>
 800081c:	e0b6      	b.n	800098c <__aeabi_fadd+0x1d0>
 800081e:	1a2d      	subs	r5, r5, r0
 8000820:	48b3      	ldr	r0, [pc, #716]	; (8000af0 <__aeabi_fadd+0x334>)
 8000822:	4038      	ands	r0, r7
 8000824:	0743      	lsls	r3, r0, #29
 8000826:	d004      	beq.n	8000832 <__aeabi_fadd+0x76>
 8000828:	230f      	movs	r3, #15
 800082a:	4003      	ands	r3, r0
 800082c:	2b04      	cmp	r3, #4
 800082e:	d000      	beq.n	8000832 <__aeabi_fadd+0x76>
 8000830:	3004      	adds	r0, #4
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x7c>
 8000836:	e078      	b.n	800092a <__aeabi_fadd+0x16e>
 8000838:	1c6a      	adds	r2, r5, #1
 800083a:	2dfe      	cmp	r5, #254	; 0xfe
 800083c:	d065      	beq.n	800090a <__aeabi_fadd+0x14e>
 800083e:	0180      	lsls	r0, r0, #6
 8000840:	0a43      	lsrs	r3, r0, #9
 8000842:	469c      	mov	ip, r3
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	4663      	mov	r3, ip
 8000848:	05d0      	lsls	r0, r2, #23
 800084a:	4318      	orrs	r0, r3
 800084c:	07e4      	lsls	r4, r4, #31
 800084e:	4320      	orrs	r0, r4
 8000850:	bc80      	pop	{r7}
 8000852:	46b8      	mov	r8, r7
 8000854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000856:	2a00      	cmp	r2, #0
 8000858:	d035      	beq.n	80008c6 <__aeabi_fadd+0x10a>
 800085a:	1b7a      	subs	r2, r7, r5
 800085c:	2d00      	cmp	r5, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_fadd+0xa6>
 8000860:	e0af      	b.n	80009c2 <__aeabi_fadd+0x206>
 8000862:	4643      	mov	r3, r8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0xae>
 8000868:	e0a7      	b.n	80009ba <__aeabi_fadd+0x1fe>
 800086a:	1e53      	subs	r3, r2, #1
 800086c:	2a01      	cmp	r2, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0xb6>
 8000870:	e12f      	b.n	8000ad2 <__aeabi_fadd+0x316>
 8000872:	2aff      	cmp	r2, #255	; 0xff
 8000874:	d069      	beq.n	800094a <__aeabi_fadd+0x18e>
 8000876:	001a      	movs	r2, r3
 8000878:	e0aa      	b.n	80009d0 <__aeabi_fadd+0x214>
 800087a:	1be9      	subs	r1, r5, r7
 800087c:	2900      	cmp	r1, #0
 800087e:	dd70      	ble.n	8000962 <__aeabi_fadd+0x1a6>
 8000880:	2f00      	cmp	r7, #0
 8000882:	d037      	beq.n	80008f4 <__aeabi_fadd+0x138>
 8000884:	2dff      	cmp	r5, #255	; 0xff
 8000886:	d062      	beq.n	800094e <__aeabi_fadd+0x192>
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	04db      	lsls	r3, r3, #19
 800088c:	431e      	orrs	r6, r3
 800088e:	291b      	cmp	r1, #27
 8000890:	dc00      	bgt.n	8000894 <__aeabi_fadd+0xd8>
 8000892:	e0b0      	b.n	80009f6 <__aeabi_fadd+0x23a>
 8000894:	2001      	movs	r0, #1
 8000896:	4440      	add	r0, r8
 8000898:	0143      	lsls	r3, r0, #5
 800089a:	d543      	bpl.n	8000924 <__aeabi_fadd+0x168>
 800089c:	3501      	adds	r5, #1
 800089e:	2dff      	cmp	r5, #255	; 0xff
 80008a0:	d033      	beq.n	800090a <__aeabi_fadd+0x14e>
 80008a2:	2301      	movs	r3, #1
 80008a4:	4a93      	ldr	r2, [pc, #588]	; (8000af4 <__aeabi_fadd+0x338>)
 80008a6:	4003      	ands	r3, r0
 80008a8:	0840      	lsrs	r0, r0, #1
 80008aa:	4010      	ands	r0, r2
 80008ac:	4318      	orrs	r0, r3
 80008ae:	e7b9      	b.n	8000824 <__aeabi_fadd+0x68>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e083      	b.n	80009be <__aeabi_fadd+0x202>
 80008b6:	1e51      	subs	r1, r2, #1
 80008b8:	2a01      	cmp	r2, #1
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x102>
 80008bc:	e0d8      	b.n	8000a70 <__aeabi_fadd+0x2b4>
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d045      	beq.n	800094e <__aeabi_fadd+0x192>
 80008c2:	000a      	movs	r2, r1
 80008c4:	e798      	b.n	80007f8 <__aeabi_fadd+0x3c>
 80008c6:	27fe      	movs	r7, #254	; 0xfe
 80008c8:	1c6a      	adds	r2, r5, #1
 80008ca:	4217      	tst	r7, r2
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fadd+0x114>
 80008ce:	e086      	b.n	80009de <__aeabi_fadd+0x222>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d000      	beq.n	80008d6 <__aeabi_fadd+0x11a>
 80008d4:	e0b7      	b.n	8000a46 <__aeabi_fadd+0x28a>
 80008d6:	4643      	mov	r3, r8
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0x122>
 80008dc:	e0f3      	b.n	8000ac6 <__aeabi_fadd+0x30a>
 80008de:	2200      	movs	r2, #0
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d0b0      	beq.n	8000846 <__aeabi_fadd+0x8a>
 80008e4:	1b98      	subs	r0, r3, r6
 80008e6:	0143      	lsls	r3, r0, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fadd+0x130>
 80008ea:	e0fa      	b.n	8000ae2 <__aeabi_fadd+0x326>
 80008ec:	4643      	mov	r3, r8
 80008ee:	000c      	movs	r4, r1
 80008f0:	1af0      	subs	r0, r6, r3
 80008f2:	e797      	b.n	8000824 <__aeabi_fadd+0x68>
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x13e>
 80008f8:	e0c8      	b.n	8000a8c <__aeabi_fadd+0x2d0>
 80008fa:	1e4a      	subs	r2, r1, #1
 80008fc:	2901      	cmp	r1, #1
 80008fe:	d100      	bne.n	8000902 <__aeabi_fadd+0x146>
 8000900:	e0ae      	b.n	8000a60 <__aeabi_fadd+0x2a4>
 8000902:	29ff      	cmp	r1, #255	; 0xff
 8000904:	d023      	beq.n	800094e <__aeabi_fadd+0x192>
 8000906:	0011      	movs	r1, r2
 8000908:	e7c1      	b.n	800088e <__aeabi_fadd+0xd2>
 800090a:	2300      	movs	r3, #0
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	469c      	mov	ip, r3
 8000910:	e799      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000912:	21fe      	movs	r1, #254	; 0xfe
 8000914:	1c6a      	adds	r2, r5, #1
 8000916:	4211      	tst	r1, r2
 8000918:	d077      	beq.n	8000a0a <__aeabi_fadd+0x24e>
 800091a:	2aff      	cmp	r2, #255	; 0xff
 800091c:	d0f5      	beq.n	800090a <__aeabi_fadd+0x14e>
 800091e:	0015      	movs	r5, r2
 8000920:	4446      	add	r6, r8
 8000922:	0870      	lsrs	r0, r6, #1
 8000924:	0743      	lsls	r3, r0, #29
 8000926:	d000      	beq.n	800092a <__aeabi_fadd+0x16e>
 8000928:	e77e      	b.n	8000828 <__aeabi_fadd+0x6c>
 800092a:	08c3      	lsrs	r3, r0, #3
 800092c:	2dff      	cmp	r5, #255	; 0xff
 800092e:	d00e      	beq.n	800094e <__aeabi_fadd+0x192>
 8000930:	025b      	lsls	r3, r3, #9
 8000932:	0a5b      	lsrs	r3, r3, #9
 8000934:	469c      	mov	ip, r3
 8000936:	b2ea      	uxtb	r2, r5
 8000938:	e785      	b.n	8000846 <__aeabi_fadd+0x8a>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d007      	beq.n	800094e <__aeabi_fadd+0x192>
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	03d2      	lsls	r2, r2, #15
 8000942:	4213      	tst	r3, r2
 8000944:	d003      	beq.n	800094e <__aeabi_fadd+0x192>
 8000946:	4210      	tst	r0, r2
 8000948:	d101      	bne.n	800094e <__aeabi_fadd+0x192>
 800094a:	000c      	movs	r4, r1
 800094c:	0003      	movs	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0db      	beq.n	800090a <__aeabi_fadd+0x14e>
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	03c0      	lsls	r0, r0, #15
 8000956:	4318      	orrs	r0, r3
 8000958:	0240      	lsls	r0, r0, #9
 800095a:	0a43      	lsrs	r3, r0, #9
 800095c:	469c      	mov	ip, r3
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	e771      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000962:	2900      	cmp	r1, #0
 8000964:	d0d5      	beq.n	8000912 <__aeabi_fadd+0x156>
 8000966:	1b7a      	subs	r2, r7, r5
 8000968:	2d00      	cmp	r5, #0
 800096a:	d160      	bne.n	8000a2e <__aeabi_fadd+0x272>
 800096c:	4643      	mov	r3, r8
 800096e:	2b00      	cmp	r3, #0
 8000970:	d024      	beq.n	80009bc <__aeabi_fadd+0x200>
 8000972:	1e53      	subs	r3, r2, #1
 8000974:	2a01      	cmp	r2, #1
 8000976:	d073      	beq.n	8000a60 <__aeabi_fadd+0x2a4>
 8000978:	2aff      	cmp	r2, #255	; 0xff
 800097a:	d0e7      	beq.n	800094c <__aeabi_fadd+0x190>
 800097c:	001a      	movs	r2, r3
 800097e:	2a1b      	cmp	r2, #27
 8000980:	dc00      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 8000982:	e085      	b.n	8000a90 <__aeabi_fadd+0x2d4>
 8000984:	2001      	movs	r0, #1
 8000986:	003d      	movs	r5, r7
 8000988:	1980      	adds	r0, r0, r6
 800098a:	e785      	b.n	8000898 <__aeabi_fadd+0xdc>
 800098c:	2320      	movs	r3, #32
 800098e:	003a      	movs	r2, r7
 8000990:	1b45      	subs	r5, r0, r5
 8000992:	0038      	movs	r0, r7
 8000994:	3501      	adds	r5, #1
 8000996:	40ea      	lsrs	r2, r5
 8000998:	1b5d      	subs	r5, r3, r5
 800099a:	40a8      	lsls	r0, r5
 800099c:	1e43      	subs	r3, r0, #1
 800099e:	4198      	sbcs	r0, r3
 80009a0:	2500      	movs	r5, #0
 80009a2:	4310      	orrs	r0, r2
 80009a4:	e73e      	b.n	8000824 <__aeabi_fadd+0x68>
 80009a6:	2320      	movs	r3, #32
 80009a8:	0030      	movs	r0, r6
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	0031      	movs	r1, r6
 80009ae:	4098      	lsls	r0, r3
 80009b0:	40d1      	lsrs	r1, r2
 80009b2:	1e43      	subs	r3, r0, #1
 80009b4:	4198      	sbcs	r0, r3
 80009b6:	4308      	orrs	r0, r1
 80009b8:	e722      	b.n	8000800 <__aeabi_fadd+0x44>
 80009ba:	000c      	movs	r4, r1
 80009bc:	0003      	movs	r3, r0
 80009be:	0015      	movs	r5, r2
 80009c0:	e7b4      	b.n	800092c <__aeabi_fadd+0x170>
 80009c2:	2fff      	cmp	r7, #255	; 0xff
 80009c4:	d0c1      	beq.n	800094a <__aeabi_fadd+0x18e>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	4640      	mov	r0, r8
 80009ca:	04db      	lsls	r3, r3, #19
 80009cc:	4318      	orrs	r0, r3
 80009ce:	4680      	mov	r8, r0
 80009d0:	2a1b      	cmp	r2, #27
 80009d2:	dd51      	ble.n	8000a78 <__aeabi_fadd+0x2bc>
 80009d4:	2001      	movs	r0, #1
 80009d6:	000c      	movs	r4, r1
 80009d8:	003d      	movs	r5, r7
 80009da:	1a30      	subs	r0, r6, r0
 80009dc:	e712      	b.n	8000804 <__aeabi_fadd+0x48>
 80009de:	4643      	mov	r3, r8
 80009e0:	1b9f      	subs	r7, r3, r6
 80009e2:	017b      	lsls	r3, r7, #5
 80009e4:	d42b      	bmi.n	8000a3e <__aeabi_fadd+0x282>
 80009e6:	2f00      	cmp	r7, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_fadd+0x230>
 80009ea:	e710      	b.n	800080e <__aeabi_fadd+0x52>
 80009ec:	2300      	movs	r3, #0
 80009ee:	2400      	movs	r4, #0
 80009f0:	2200      	movs	r2, #0
 80009f2:	469c      	mov	ip, r3
 80009f4:	e727      	b.n	8000846 <__aeabi_fadd+0x8a>
 80009f6:	2320      	movs	r3, #32
 80009f8:	0032      	movs	r2, r6
 80009fa:	0030      	movs	r0, r6
 80009fc:	40ca      	lsrs	r2, r1
 80009fe:	1a59      	subs	r1, r3, r1
 8000a00:	4088      	lsls	r0, r1
 8000a02:	1e43      	subs	r3, r0, #1
 8000a04:	4198      	sbcs	r0, r3
 8000a06:	4310      	orrs	r0, r2
 8000a08:	e745      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d14a      	bne.n	8000aa4 <__aeabi_fadd+0x2e8>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d063      	beq.n	8000adc <__aeabi_fadd+0x320>
 8000a14:	2200      	movs	r2, #0
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e714      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000a1c:	0030      	movs	r0, r6
 8000a1e:	4440      	add	r0, r8
 8000a20:	0143      	lsls	r3, r0, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x26a>
 8000a24:	e77e      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a26:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <__aeabi_fadd+0x334>)
 8000a28:	3501      	adds	r5, #1
 8000a2a:	4018      	ands	r0, r3
 8000a2c:	e77a      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a2e:	2fff      	cmp	r7, #255	; 0xff
 8000a30:	d08c      	beq.n	800094c <__aeabi_fadd+0x190>
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	4641      	mov	r1, r8
 8000a36:	04db      	lsls	r3, r3, #19
 8000a38:	4319      	orrs	r1, r3
 8000a3a:	4688      	mov	r8, r1
 8000a3c:	e79f      	b.n	800097e <__aeabi_fadd+0x1c2>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	000c      	movs	r4, r1
 8000a42:	1af7      	subs	r7, r6, r3
 8000a44:	e6e3      	b.n	800080e <__aeabi_fadd+0x52>
 8000a46:	4642      	mov	r2, r8
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fadd+0x292>
 8000a4c:	e775      	b.n	800093a <__aeabi_fadd+0x17e>
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fadd+0x298>
 8000a52:	e77a      	b.n	800094a <__aeabi_fadd+0x18e>
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	03db      	lsls	r3, r3, #15
 8000a58:	2400      	movs	r4, #0
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	e6f2      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000a60:	0030      	movs	r0, r6
 8000a62:	4440      	add	r0, r8
 8000a64:	2501      	movs	r5, #1
 8000a66:	0143      	lsls	r3, r0, #5
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_fadd+0x2b0>
 8000a6a:	e75b      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a6c:	2502      	movs	r5, #2
 8000a6e:	e718      	b.n	80008a2 <__aeabi_fadd+0xe6>
 8000a70:	4643      	mov	r3, r8
 8000a72:	2501      	movs	r5, #1
 8000a74:	1b98      	subs	r0, r3, r6
 8000a76:	e6c5      	b.n	8000804 <__aeabi_fadd+0x48>
 8000a78:	2320      	movs	r3, #32
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	40d4      	lsrs	r4, r2
 8000a80:	1a9a      	subs	r2, r3, r2
 8000a82:	4090      	lsls	r0, r2
 8000a84:	1e43      	subs	r3, r0, #1
 8000a86:	4198      	sbcs	r0, r3
 8000a88:	4320      	orrs	r0, r4
 8000a8a:	e7a4      	b.n	80009d6 <__aeabi_fadd+0x21a>
 8000a8c:	000d      	movs	r5, r1
 8000a8e:	e74d      	b.n	800092c <__aeabi_fadd+0x170>
 8000a90:	2320      	movs	r3, #32
 8000a92:	4641      	mov	r1, r8
 8000a94:	4640      	mov	r0, r8
 8000a96:	40d1      	lsrs	r1, r2
 8000a98:	1a9a      	subs	r2, r3, r2
 8000a9a:	4090      	lsls	r0, r2
 8000a9c:	1e43      	subs	r3, r0, #1
 8000a9e:	4198      	sbcs	r0, r3
 8000aa0:	4308      	orrs	r0, r1
 8000aa2:	e770      	b.n	8000986 <__aeabi_fadd+0x1ca>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fadd+0x2f0>
 8000aaa:	e74f      	b.n	800094c <__aeabi_fadd+0x190>
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000ab0:	e74d      	b.n	800094e <__aeabi_fadd+0x192>
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	03d2      	lsls	r2, r2, #15
 8000ab6:	4213      	tst	r3, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x300>
 8000aba:	e748      	b.n	800094e <__aeabi_fadd+0x192>
 8000abc:	4210      	tst	r0, r2
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fadd+0x306>
 8000ac0:	e745      	b.n	800094e <__aeabi_fadd+0x192>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	e743      	b.n	800094e <__aeabi_fadd+0x192>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d090      	beq.n	80009ec <__aeabi_fadd+0x230>
 8000aca:	000c      	movs	r4, r1
 8000acc:	4684      	mov	ip, r0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	e6b9      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	1af0      	subs	r0, r6, r3
 8000ad8:	3501      	adds	r5, #1
 8000ada:	e693      	b.n	8000804 <__aeabi_fadd+0x48>
 8000adc:	4684      	mov	ip, r0
 8000ade:	2200      	movs	r2, #0
 8000ae0:	e6b1      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_fadd+0x32c>
 8000ae6:	e71d      	b.n	8000924 <__aeabi_fadd+0x168>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2400      	movs	r4, #0
 8000aec:	469c      	mov	ip, r3
 8000aee:	e6aa      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000af0:	fbffffff 	.word	0xfbffffff
 8000af4:	7dffffff 	.word	0x7dffffff

08000af8 <__aeabi_fdiv>:
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	464f      	mov	r7, r9
 8000afc:	4646      	mov	r6, r8
 8000afe:	46d6      	mov	lr, sl
 8000b00:	0245      	lsls	r5, r0, #9
 8000b02:	b5c0      	push	{r6, r7, lr}
 8000b04:	0047      	lsls	r7, r0, #1
 8000b06:	1c0c      	adds	r4, r1, #0
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	0e3f      	lsrs	r7, r7, #24
 8000b0c:	0fc6      	lsrs	r6, r0, #31
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fdiv+0x1c>
 8000b12:	e070      	b.n	8000bf6 <__aeabi_fdiv+0xfe>
 8000b14:	2fff      	cmp	r7, #255	; 0xff
 8000b16:	d100      	bne.n	8000b1a <__aeabi_fdiv+0x22>
 8000b18:	e075      	b.n	8000c06 <__aeabi_fdiv+0x10e>
 8000b1a:	00eb      	lsls	r3, r5, #3
 8000b1c:	2580      	movs	r5, #128	; 0x80
 8000b1e:	04ed      	lsls	r5, r5, #19
 8000b20:	431d      	orrs	r5, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	4699      	mov	r9, r3
 8000b26:	469a      	mov	sl, r3
 8000b28:	3f7f      	subs	r7, #127	; 0x7f
 8000b2a:	0260      	lsls	r0, r4, #9
 8000b2c:	0a43      	lsrs	r3, r0, #9
 8000b2e:	4698      	mov	r8, r3
 8000b30:	0063      	lsls	r3, r4, #1
 8000b32:	0e1b      	lsrs	r3, r3, #24
 8000b34:	0fe4      	lsrs	r4, r4, #31
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d04e      	beq.n	8000bd8 <__aeabi_fdiv+0xe0>
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d046      	beq.n	8000bcc <__aeabi_fdiv+0xd4>
 8000b3e:	4642      	mov	r2, r8
 8000b40:	00d0      	lsls	r0, r2, #3
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	04d2      	lsls	r2, r2, #19
 8000b46:	4302      	orrs	r2, r0
 8000b48:	4690      	mov	r8, r2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	3b7f      	subs	r3, #127	; 0x7f
 8000b4e:	0031      	movs	r1, r6
 8000b50:	1aff      	subs	r7, r7, r3
 8000b52:	464b      	mov	r3, r9
 8000b54:	4061      	eors	r1, r4
 8000b56:	b2c9      	uxtb	r1, r1
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	d900      	bls.n	8000b60 <__aeabi_fdiv+0x68>
 8000b5e:	e0b5      	b.n	8000ccc <__aeabi_fdiv+0x1d4>
 8000b60:	486e      	ldr	r0, [pc, #440]	; (8000d1c <__aeabi_fdiv+0x224>)
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	58c3      	ldr	r3, [r0, r3]
 8000b66:	469f      	mov	pc, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4698      	mov	r8, r3
 8000b6c:	0026      	movs	r6, r4
 8000b6e:	4645      	mov	r5, r8
 8000b70:	4692      	mov	sl, r2
 8000b72:	4653      	mov	r3, sl
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d100      	bne.n	8000b7a <__aeabi_fdiv+0x82>
 8000b78:	e089      	b.n	8000c8e <__aeabi_fdiv+0x196>
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fdiv+0x88>
 8000b7e:	e09e      	b.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d018      	beq.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000b84:	003b      	movs	r3, r7
 8000b86:	337f      	adds	r3, #127	; 0x7f
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dd69      	ble.n	8000c60 <__aeabi_fdiv+0x168>
 8000b8c:	076a      	lsls	r2, r5, #29
 8000b8e:	d004      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b90:	220f      	movs	r2, #15
 8000b92:	402a      	ands	r2, r5
 8000b94:	2a04      	cmp	r2, #4
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b98:	3504      	adds	r5, #4
 8000b9a:	012a      	lsls	r2, r5, #4
 8000b9c:	d503      	bpl.n	8000ba6 <__aeabi_fdiv+0xae>
 8000b9e:	4b60      	ldr	r3, [pc, #384]	; (8000d20 <__aeabi_fdiv+0x228>)
 8000ba0:	401d      	ands	r5, r3
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	3380      	adds	r3, #128	; 0x80
 8000ba6:	2bfe      	cmp	r3, #254	; 0xfe
 8000ba8:	dd00      	ble.n	8000bac <__aeabi_fdiv+0xb4>
 8000baa:	e070      	b.n	8000c8e <__aeabi_fdiv+0x196>
 8000bac:	01ad      	lsls	r5, r5, #6
 8000bae:	0a6d      	lsrs	r5, r5, #9
 8000bb0:	b2d8      	uxtb	r0, r3
 8000bb2:	e002      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000bb4:	000e      	movs	r6, r1
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	2500      	movs	r5, #0
 8000bba:	05c0      	lsls	r0, r0, #23
 8000bbc:	4328      	orrs	r0, r5
 8000bbe:	07f6      	lsls	r6, r6, #31
 8000bc0:	4330      	orrs	r0, r6
 8000bc2:	bce0      	pop	{r5, r6, r7}
 8000bc4:	46ba      	mov	sl, r7
 8000bc6:	46b1      	mov	r9, r6
 8000bc8:	46a8      	mov	r8, r5
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	4643      	mov	r3, r8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d13f      	bne.n	8000c52 <__aeabi_fdiv+0x15a>
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	3fff      	subs	r7, #255	; 0xff
 8000bd6:	e003      	b.n	8000be0 <__aeabi_fdiv+0xe8>
 8000bd8:	4643      	mov	r3, r8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d12d      	bne.n	8000c3a <__aeabi_fdiv+0x142>
 8000bde:	2201      	movs	r2, #1
 8000be0:	0031      	movs	r1, r6
 8000be2:	464b      	mov	r3, r9
 8000be4:	4061      	eors	r1, r4
 8000be6:	b2c9      	uxtb	r1, r1
 8000be8:	4313      	orrs	r3, r2
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	d834      	bhi.n	8000c58 <__aeabi_fdiv+0x160>
 8000bee:	484d      	ldr	r0, [pc, #308]	; (8000d24 <__aeabi_fdiv+0x22c>)
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	58c3      	ldr	r3, [r0, r3]
 8000bf4:	469f      	mov	pc, r3
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d113      	bne.n	8000c22 <__aeabi_fdiv+0x12a>
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	4699      	mov	r9, r3
 8000bfe:	3b03      	subs	r3, #3
 8000c00:	2700      	movs	r7, #0
 8000c02:	469a      	mov	sl, r3
 8000c04:	e791      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d105      	bne.n	8000c16 <__aeabi_fdiv+0x11e>
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	4699      	mov	r9, r3
 8000c0e:	3b06      	subs	r3, #6
 8000c10:	27ff      	movs	r7, #255	; 0xff
 8000c12:	469a      	mov	sl, r3
 8000c14:	e789      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c16:	230c      	movs	r3, #12
 8000c18:	4699      	mov	r9, r3
 8000c1a:	3b09      	subs	r3, #9
 8000c1c:	27ff      	movs	r7, #255	; 0xff
 8000c1e:	469a      	mov	sl, r3
 8000c20:	e783      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c22:	0028      	movs	r0, r5
 8000c24:	f002 fae2 	bl	80031ec <__clzsi2>
 8000c28:	2776      	movs	r7, #118	; 0x76
 8000c2a:	1f43      	subs	r3, r0, #5
 8000c2c:	409d      	lsls	r5, r3
 8000c2e:	2300      	movs	r3, #0
 8000c30:	427f      	negs	r7, r7
 8000c32:	4699      	mov	r9, r3
 8000c34:	469a      	mov	sl, r3
 8000c36:	1a3f      	subs	r7, r7, r0
 8000c38:	e777      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	f002 fad6 	bl	80031ec <__clzsi2>
 8000c40:	4642      	mov	r2, r8
 8000c42:	1f43      	subs	r3, r0, #5
 8000c44:	409a      	lsls	r2, r3
 8000c46:	2376      	movs	r3, #118	; 0x76
 8000c48:	425b      	negs	r3, r3
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	1a1b      	subs	r3, r3, r0
 8000c4e:	2200      	movs	r2, #0
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c52:	23ff      	movs	r3, #255	; 0xff
 8000c54:	2203      	movs	r2, #3
 8000c56:	e77a      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c58:	000e      	movs	r6, r1
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	e7ac      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c60:	2001      	movs	r0, #1
 8000c62:	1ac0      	subs	r0, r0, r3
 8000c64:	281b      	cmp	r0, #27
 8000c66:	dca6      	bgt.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c68:	379e      	adds	r7, #158	; 0x9e
 8000c6a:	002a      	movs	r2, r5
 8000c6c:	40bd      	lsls	r5, r7
 8000c6e:	40c2      	lsrs	r2, r0
 8000c70:	1e6b      	subs	r3, r5, #1
 8000c72:	419d      	sbcs	r5, r3
 8000c74:	4315      	orrs	r5, r2
 8000c76:	076b      	lsls	r3, r5, #29
 8000c78:	d004      	beq.n	8000c84 <__aeabi_fdiv+0x18c>
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	402b      	ands	r3, r5
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d000      	beq.n	8000c84 <__aeabi_fdiv+0x18c>
 8000c82:	3504      	adds	r5, #4
 8000c84:	016b      	lsls	r3, r5, #5
 8000c86:	d544      	bpl.n	8000d12 <__aeabi_fdiv+0x21a>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	e795      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c8e:	20ff      	movs	r0, #255	; 0xff
 8000c90:	2500      	movs	r5, #0
 8000c92:	e792      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c94:	2580      	movs	r5, #128	; 0x80
 8000c96:	2600      	movs	r6, #0
 8000c98:	20ff      	movs	r0, #255	; 0xff
 8000c9a:	03ed      	lsls	r5, r5, #15
 8000c9c:	e78d      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2080      	movs	r0, #128	; 0x80
 8000ca4:	03c0      	lsls	r0, r0, #15
 8000ca6:	4205      	tst	r5, r0
 8000ca8:	d009      	beq.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000caa:	4643      	mov	r3, r8
 8000cac:	4203      	tst	r3, r0
 8000cae:	d106      	bne.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000cb0:	4645      	mov	r5, r8
 8000cb2:	4305      	orrs	r5, r0
 8000cb4:	026d      	lsls	r5, r5, #9
 8000cb6:	0026      	movs	r6, r4
 8000cb8:	20ff      	movs	r0, #255	; 0xff
 8000cba:	0a6d      	lsrs	r5, r5, #9
 8000cbc:	e77d      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000cbe:	2080      	movs	r0, #128	; 0x80
 8000cc0:	03c0      	lsls	r0, r0, #15
 8000cc2:	4305      	orrs	r5, r0
 8000cc4:	026d      	lsls	r5, r5, #9
 8000cc6:	20ff      	movs	r0, #255	; 0xff
 8000cc8:	0a6d      	lsrs	r5, r5, #9
 8000cca:	e776      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000ccc:	4642      	mov	r2, r8
 8000cce:	016b      	lsls	r3, r5, #5
 8000cd0:	0150      	lsls	r0, r2, #5
 8000cd2:	4283      	cmp	r3, r0
 8000cd4:	d219      	bcs.n	8000d0a <__aeabi_fdiv+0x212>
 8000cd6:	221b      	movs	r2, #27
 8000cd8:	2500      	movs	r5, #0
 8000cda:	3f01      	subs	r7, #1
 8000cdc:	2601      	movs	r6, #1
 8000cde:	001c      	movs	r4, r3
 8000ce0:	006d      	lsls	r5, r5, #1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	db01      	blt.n	8000cec <__aeabi_fdiv+0x1f4>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	d801      	bhi.n	8000cf0 <__aeabi_fdiv+0x1f8>
 8000cec:	1a1b      	subs	r3, r3, r0
 8000cee:	4335      	orrs	r5, r6
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d1f3      	bne.n	8000cde <__aeabi_fdiv+0x1e6>
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	4193      	sbcs	r3, r2
 8000cfa:	431d      	orrs	r5, r3
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	337f      	adds	r3, #127	; 0x7f
 8000d00:	000e      	movs	r6, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_fdiv+0x210>
 8000d06:	e741      	b.n	8000b8c <__aeabi_fdiv+0x94>
 8000d08:	e7aa      	b.n	8000c60 <__aeabi_fdiv+0x168>
 8000d0a:	221a      	movs	r2, #26
 8000d0c:	2501      	movs	r5, #1
 8000d0e:	1a1b      	subs	r3, r3, r0
 8000d10:	e7e4      	b.n	8000cdc <__aeabi_fdiv+0x1e4>
 8000d12:	01ad      	lsls	r5, r5, #6
 8000d14:	2000      	movs	r0, #0
 8000d16:	0a6d      	lsrs	r5, r5, #9
 8000d18:	e74f      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	0800b438 	.word	0x0800b438
 8000d20:	f7ffffff 	.word	0xf7ffffff
 8000d24:	0800b478 	.word	0x0800b478

08000d28 <__eqsf2>:
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	0042      	lsls	r2, r0, #1
 8000d2c:	0245      	lsls	r5, r0, #9
 8000d2e:	024e      	lsls	r6, r1, #9
 8000d30:	004c      	lsls	r4, r1, #1
 8000d32:	0fc3      	lsrs	r3, r0, #31
 8000d34:	0a6d      	lsrs	r5, r5, #9
 8000d36:	2001      	movs	r0, #1
 8000d38:	0e12      	lsrs	r2, r2, #24
 8000d3a:	0a76      	lsrs	r6, r6, #9
 8000d3c:	0e24      	lsrs	r4, r4, #24
 8000d3e:	0fc9      	lsrs	r1, r1, #31
 8000d40:	2aff      	cmp	r2, #255	; 0xff
 8000d42:	d006      	beq.n	8000d52 <__eqsf2+0x2a>
 8000d44:	2cff      	cmp	r4, #255	; 0xff
 8000d46:	d003      	beq.n	8000d50 <__eqsf2+0x28>
 8000d48:	42a2      	cmp	r2, r4
 8000d4a:	d101      	bne.n	8000d50 <__eqsf2+0x28>
 8000d4c:	42b5      	cmp	r5, r6
 8000d4e:	d006      	beq.n	8000d5e <__eqsf2+0x36>
 8000d50:	bd70      	pop	{r4, r5, r6, pc}
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d1fc      	bne.n	8000d50 <__eqsf2+0x28>
 8000d56:	2cff      	cmp	r4, #255	; 0xff
 8000d58:	d1fa      	bne.n	8000d50 <__eqsf2+0x28>
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d1f8      	bne.n	8000d50 <__eqsf2+0x28>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d006      	beq.n	8000d70 <__eqsf2+0x48>
 8000d62:	2001      	movs	r0, #1
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	d1f3      	bne.n	8000d50 <__eqsf2+0x28>
 8000d68:	0028      	movs	r0, r5
 8000d6a:	1e43      	subs	r3, r0, #1
 8000d6c:	4198      	sbcs	r0, r3
 8000d6e:	e7ef      	b.n	8000d50 <__eqsf2+0x28>
 8000d70:	2000      	movs	r0, #0
 8000d72:	e7ed      	b.n	8000d50 <__eqsf2+0x28>

08000d74 <__gesf2>:
 8000d74:	b570      	push	{r4, r5, r6, lr}
 8000d76:	0042      	lsls	r2, r0, #1
 8000d78:	0245      	lsls	r5, r0, #9
 8000d7a:	024e      	lsls	r6, r1, #9
 8000d7c:	004c      	lsls	r4, r1, #1
 8000d7e:	0fc3      	lsrs	r3, r0, #31
 8000d80:	0a6d      	lsrs	r5, r5, #9
 8000d82:	0e12      	lsrs	r2, r2, #24
 8000d84:	0a76      	lsrs	r6, r6, #9
 8000d86:	0e24      	lsrs	r4, r4, #24
 8000d88:	0fc8      	lsrs	r0, r1, #31
 8000d8a:	2aff      	cmp	r2, #255	; 0xff
 8000d8c:	d01b      	beq.n	8000dc6 <__gesf2+0x52>
 8000d8e:	2cff      	cmp	r4, #255	; 0xff
 8000d90:	d00e      	beq.n	8000db0 <__gesf2+0x3c>
 8000d92:	2a00      	cmp	r2, #0
 8000d94:	d11b      	bne.n	8000dce <__gesf2+0x5a>
 8000d96:	2c00      	cmp	r4, #0
 8000d98:	d101      	bne.n	8000d9e <__gesf2+0x2a>
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d01c      	beq.n	8000dd8 <__gesf2+0x64>
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d00c      	beq.n	8000dbc <__gesf2+0x48>
 8000da2:	4283      	cmp	r3, r0
 8000da4:	d01c      	beq.n	8000de0 <__gesf2+0x6c>
 8000da6:	2102      	movs	r1, #2
 8000da8:	1e58      	subs	r0, r3, #1
 8000daa:	4008      	ands	r0, r1
 8000dac:	3801      	subs	r0, #1
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d122      	bne.n	8000dfa <__gesf2+0x86>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	d1f4      	bne.n	8000da2 <__gesf2+0x2e>
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d1f2      	bne.n	8000da2 <__gesf2+0x2e>
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d1f6      	bne.n	8000dae <__gesf2+0x3a>
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	4240      	negs	r0, r0
 8000dc4:	e7f3      	b.n	8000dae <__gesf2+0x3a>
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d117      	bne.n	8000dfa <__gesf2+0x86>
 8000dca:	2cff      	cmp	r4, #255	; 0xff
 8000dcc:	d0f0      	beq.n	8000db0 <__gesf2+0x3c>
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d1e7      	bne.n	8000da2 <__gesf2+0x2e>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d1e5      	bne.n	8000da2 <__gesf2+0x2e>
 8000dd6:	e7e6      	b.n	8000da6 <__gesf2+0x32>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d0e7      	beq.n	8000dae <__gesf2+0x3a>
 8000dde:	e7e2      	b.n	8000da6 <__gesf2+0x32>
 8000de0:	42a2      	cmp	r2, r4
 8000de2:	dc05      	bgt.n	8000df0 <__gesf2+0x7c>
 8000de4:	dbea      	blt.n	8000dbc <__gesf2+0x48>
 8000de6:	42b5      	cmp	r5, r6
 8000de8:	d802      	bhi.n	8000df0 <__gesf2+0x7c>
 8000dea:	d3e7      	bcc.n	8000dbc <__gesf2+0x48>
 8000dec:	2000      	movs	r0, #0
 8000dee:	e7de      	b.n	8000dae <__gesf2+0x3a>
 8000df0:	4243      	negs	r3, r0
 8000df2:	4158      	adcs	r0, r3
 8000df4:	0040      	lsls	r0, r0, #1
 8000df6:	3801      	subs	r0, #1
 8000df8:	e7d9      	b.n	8000dae <__gesf2+0x3a>
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	4240      	negs	r0, r0
 8000dfe:	e7d6      	b.n	8000dae <__gesf2+0x3a>

08000e00 <__lesf2>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0245      	lsls	r5, r0, #9
 8000e06:	024e      	lsls	r6, r1, #9
 8000e08:	004c      	lsls	r4, r1, #1
 8000e0a:	0fc3      	lsrs	r3, r0, #31
 8000e0c:	0a6d      	lsrs	r5, r5, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a76      	lsrs	r6, r6, #9
 8000e12:	0e24      	lsrs	r4, r4, #24
 8000e14:	0fc8      	lsrs	r0, r1, #31
 8000e16:	2aff      	cmp	r2, #255	; 0xff
 8000e18:	d00b      	beq.n	8000e32 <__lesf2+0x32>
 8000e1a:	2cff      	cmp	r4, #255	; 0xff
 8000e1c:	d00d      	beq.n	8000e3a <__lesf2+0x3a>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11f      	bne.n	8000e62 <__lesf2+0x62>
 8000e22:	2c00      	cmp	r4, #0
 8000e24:	d116      	bne.n	8000e54 <__lesf2+0x54>
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d114      	bne.n	8000e54 <__lesf2+0x54>
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d010      	beq.n	8000e52 <__lesf2+0x52>
 8000e30:	e009      	b.n	8000e46 <__lesf2+0x46>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d10c      	bne.n	8000e50 <__lesf2+0x50>
 8000e36:	2cff      	cmp	r4, #255	; 0xff
 8000e38:	d113      	bne.n	8000e62 <__lesf2+0x62>
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d108      	bne.n	8000e50 <__lesf2+0x50>
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	d008      	beq.n	8000e54 <__lesf2+0x54>
 8000e42:	4283      	cmp	r3, r0
 8000e44:	d012      	beq.n	8000e6c <__lesf2+0x6c>
 8000e46:	2102      	movs	r1, #2
 8000e48:	1e58      	subs	r0, r3, #1
 8000e4a:	4008      	ands	r0, r1
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e000      	b.n	8000e52 <__lesf2+0x52>
 8000e50:	2002      	movs	r0, #2
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d1f4      	bne.n	8000e42 <__lesf2+0x42>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d1fa      	bne.n	8000e52 <__lesf2+0x52>
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	4240      	negs	r0, r0
 8000e60:	e7f7      	b.n	8000e52 <__lesf2+0x52>
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	d1ed      	bne.n	8000e42 <__lesf2+0x42>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d1eb      	bne.n	8000e42 <__lesf2+0x42>
 8000e6a:	e7ec      	b.n	8000e46 <__lesf2+0x46>
 8000e6c:	42a2      	cmp	r2, r4
 8000e6e:	dc05      	bgt.n	8000e7c <__lesf2+0x7c>
 8000e70:	dbf2      	blt.n	8000e58 <__lesf2+0x58>
 8000e72:	42b5      	cmp	r5, r6
 8000e74:	d802      	bhi.n	8000e7c <__lesf2+0x7c>
 8000e76:	d3ef      	bcc.n	8000e58 <__lesf2+0x58>
 8000e78:	2000      	movs	r0, #0
 8000e7a:	e7ea      	b.n	8000e52 <__lesf2+0x52>
 8000e7c:	4243      	negs	r3, r0
 8000e7e:	4158      	adcs	r0, r3
 8000e80:	0040      	lsls	r0, r0, #1
 8000e82:	3801      	subs	r0, #1
 8000e84:	e7e5      	b.n	8000e52 <__lesf2+0x52>
 8000e86:	46c0      	nop			; (mov r8, r8)

08000e88 <__aeabi_fmul>:
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	464f      	mov	r7, r9
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	0244      	lsls	r4, r0, #9
 8000e92:	0045      	lsls	r5, r0, #1
 8000e94:	b5c0      	push	{r6, r7, lr}
 8000e96:	0a64      	lsrs	r4, r4, #9
 8000e98:	1c0f      	adds	r7, r1, #0
 8000e9a:	0e2d      	lsrs	r5, r5, #24
 8000e9c:	0fc6      	lsrs	r6, r0, #31
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_fmul+0x1c>
 8000ea2:	e08d      	b.n	8000fc0 <__aeabi_fmul+0x138>
 8000ea4:	2dff      	cmp	r5, #255	; 0xff
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_fmul+0x22>
 8000ea8:	e092      	b.n	8000fd0 <__aeabi_fmul+0x148>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	4699      	mov	r9, r3
 8000eb0:	469a      	mov	sl, r3
 8000eb2:	00e4      	lsls	r4, r4, #3
 8000eb4:	04c0      	lsls	r0, r0, #19
 8000eb6:	4304      	orrs	r4, r0
 8000eb8:	3d7f      	subs	r5, #127	; 0x7f
 8000eba:	0278      	lsls	r0, r7, #9
 8000ebc:	0a43      	lsrs	r3, r0, #9
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	007b      	lsls	r3, r7, #1
 8000ec2:	0e1b      	lsrs	r3, r3, #24
 8000ec4:	0fff      	lsrs	r7, r7, #31
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fmul+0x44>
 8000eca:	e070      	b.n	8000fae <__aeabi_fmul+0x126>
 8000ecc:	2bff      	cmp	r3, #255	; 0xff
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fmul+0x4a>
 8000ed0:	e086      	b.n	8000fe0 <__aeabi_fmul+0x158>
 8000ed2:	4642      	mov	r2, r8
 8000ed4:	00d0      	lsls	r0, r2, #3
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	3b7f      	subs	r3, #127	; 0x7f
 8000eda:	18ed      	adds	r5, r5, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	04d2      	lsls	r2, r2, #19
 8000ee0:	4302      	orrs	r2, r0
 8000ee2:	4690      	mov	r8, r2
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	0031      	movs	r1, r6
 8000ee8:	464b      	mov	r3, r9
 8000eea:	4079      	eors	r1, r7
 8000eec:	1c68      	adds	r0, r5, #1
 8000eee:	2b0f      	cmp	r3, #15
 8000ef0:	d81c      	bhi.n	8000f2c <__aeabi_fmul+0xa4>
 8000ef2:	4a76      	ldr	r2, [pc, #472]	; (80010cc <__aeabi_fmul+0x244>)
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	58d3      	ldr	r3, [r2, r3]
 8000ef8:	469f      	mov	pc, r3
 8000efa:	0039      	movs	r1, r7
 8000efc:	4644      	mov	r4, r8
 8000efe:	46e2      	mov	sl, ip
 8000f00:	4653      	mov	r3, sl
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d00f      	beq.n	8000f26 <__aeabi_fmul+0x9e>
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fmul+0x84>
 8000f0a:	e0d7      	b.n	80010bc <__aeabi_fmul+0x234>
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d137      	bne.n	8000f80 <__aeabi_fmul+0xf8>
 8000f10:	2000      	movs	r0, #0
 8000f12:	2400      	movs	r4, #0
 8000f14:	05c0      	lsls	r0, r0, #23
 8000f16:	4320      	orrs	r0, r4
 8000f18:	07c9      	lsls	r1, r1, #31
 8000f1a:	4308      	orrs	r0, r1
 8000f1c:	bce0      	pop	{r5, r6, r7}
 8000f1e:	46ba      	mov	sl, r7
 8000f20:	46b1      	mov	r9, r6
 8000f22:	46a8      	mov	r8, r5
 8000f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f26:	20ff      	movs	r0, #255	; 0xff
 8000f28:	2400      	movs	r4, #0
 8000f2a:	e7f3      	b.n	8000f14 <__aeabi_fmul+0x8c>
 8000f2c:	0c26      	lsrs	r6, r4, #16
 8000f2e:	0424      	lsls	r4, r4, #16
 8000f30:	0c22      	lsrs	r2, r4, #16
 8000f32:	4644      	mov	r4, r8
 8000f34:	0424      	lsls	r4, r4, #16
 8000f36:	0c24      	lsrs	r4, r4, #16
 8000f38:	4643      	mov	r3, r8
 8000f3a:	0027      	movs	r7, r4
 8000f3c:	0c1b      	lsrs	r3, r3, #16
 8000f3e:	4357      	muls	r7, r2
 8000f40:	4374      	muls	r4, r6
 8000f42:	435a      	muls	r2, r3
 8000f44:	435e      	muls	r6, r3
 8000f46:	1912      	adds	r2, r2, r4
 8000f48:	0c3b      	lsrs	r3, r7, #16
 8000f4a:	189b      	adds	r3, r3, r2
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	d903      	bls.n	8000f58 <__aeabi_fmul+0xd0>
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	0252      	lsls	r2, r2, #9
 8000f54:	4694      	mov	ip, r2
 8000f56:	4466      	add	r6, ip
 8000f58:	043f      	lsls	r7, r7, #16
 8000f5a:	041a      	lsls	r2, r3, #16
 8000f5c:	0c3f      	lsrs	r7, r7, #16
 8000f5e:	19d2      	adds	r2, r2, r7
 8000f60:	0194      	lsls	r4, r2, #6
 8000f62:	1e67      	subs	r7, r4, #1
 8000f64:	41bc      	sbcs	r4, r7
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	0e92      	lsrs	r2, r2, #26
 8000f6a:	199b      	adds	r3, r3, r6
 8000f6c:	4314      	orrs	r4, r2
 8000f6e:	019b      	lsls	r3, r3, #6
 8000f70:	431c      	orrs	r4, r3
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	d400      	bmi.n	8000f78 <__aeabi_fmul+0xf0>
 8000f76:	e09b      	b.n	80010b0 <__aeabi_fmul+0x228>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	0862      	lsrs	r2, r4, #1
 8000f7c:	401c      	ands	r4, r3
 8000f7e:	4314      	orrs	r4, r2
 8000f80:	0002      	movs	r2, r0
 8000f82:	327f      	adds	r2, #127	; 0x7f
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	dd64      	ble.n	8001052 <__aeabi_fmul+0x1ca>
 8000f88:	0763      	lsls	r3, r4, #29
 8000f8a:	d004      	beq.n	8000f96 <__aeabi_fmul+0x10e>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4023      	ands	r3, r4
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fmul+0x10e>
 8000f94:	3404      	adds	r4, #4
 8000f96:	0123      	lsls	r3, r4, #4
 8000f98:	d503      	bpl.n	8000fa2 <__aeabi_fmul+0x11a>
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <__aeabi_fmul+0x248>)
 8000f9e:	3280      	adds	r2, #128	; 0x80
 8000fa0:	401c      	ands	r4, r3
 8000fa2:	2afe      	cmp	r2, #254	; 0xfe
 8000fa4:	dcbf      	bgt.n	8000f26 <__aeabi_fmul+0x9e>
 8000fa6:	01a4      	lsls	r4, r4, #6
 8000fa8:	0a64      	lsrs	r4, r4, #9
 8000faa:	b2d0      	uxtb	r0, r2
 8000fac:	e7b2      	b.n	8000f14 <__aeabi_fmul+0x8c>
 8000fae:	4643      	mov	r3, r8
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d13d      	bne.n	8001030 <__aeabi_fmul+0x1a8>
 8000fb4:	464a      	mov	r2, r9
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	4691      	mov	r9, r2
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	e792      	b.n	8000ee6 <__aeabi_fmul+0x5e>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d129      	bne.n	8001018 <__aeabi_fmul+0x190>
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	4699      	mov	r9, r3
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	2500      	movs	r5, #0
 8000fcc:	469a      	mov	sl, r3
 8000fce:	e774      	b.n	8000eba <__aeabi_fmul+0x32>
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d11b      	bne.n	800100c <__aeabi_fmul+0x184>
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	4699      	mov	r9, r3
 8000fd8:	3b06      	subs	r3, #6
 8000fda:	25ff      	movs	r5, #255	; 0xff
 8000fdc:	469a      	mov	sl, r3
 8000fde:	e76c      	b.n	8000eba <__aeabi_fmul+0x32>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	35ff      	adds	r5, #255	; 0xff
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10b      	bne.n	8001000 <__aeabi_fmul+0x178>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	464a      	mov	r2, r9
 8000fec:	431a      	orrs	r2, r3
 8000fee:	4691      	mov	r9, r2
 8000ff0:	469c      	mov	ip, r3
 8000ff2:	e778      	b.n	8000ee6 <__aeabi_fmul+0x5e>
 8000ff4:	4653      	mov	r3, sl
 8000ff6:	0031      	movs	r1, r6
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_fmul+0x176>
 8000ffc:	e783      	b.n	8000f06 <__aeabi_fmul+0x7e>
 8000ffe:	e792      	b.n	8000f26 <__aeabi_fmul+0x9e>
 8001000:	2303      	movs	r3, #3
 8001002:	464a      	mov	r2, r9
 8001004:	431a      	orrs	r2, r3
 8001006:	4691      	mov	r9, r2
 8001008:	469c      	mov	ip, r3
 800100a:	e76c      	b.n	8000ee6 <__aeabi_fmul+0x5e>
 800100c:	230c      	movs	r3, #12
 800100e:	4699      	mov	r9, r3
 8001010:	3b09      	subs	r3, #9
 8001012:	25ff      	movs	r5, #255	; 0xff
 8001014:	469a      	mov	sl, r3
 8001016:	e750      	b.n	8000eba <__aeabi_fmul+0x32>
 8001018:	0020      	movs	r0, r4
 800101a:	f002 f8e7 	bl	80031ec <__clzsi2>
 800101e:	2576      	movs	r5, #118	; 0x76
 8001020:	1f43      	subs	r3, r0, #5
 8001022:	409c      	lsls	r4, r3
 8001024:	2300      	movs	r3, #0
 8001026:	426d      	negs	r5, r5
 8001028:	4699      	mov	r9, r3
 800102a:	469a      	mov	sl, r3
 800102c:	1a2d      	subs	r5, r5, r0
 800102e:	e744      	b.n	8000eba <__aeabi_fmul+0x32>
 8001030:	4640      	mov	r0, r8
 8001032:	f002 f8db 	bl	80031ec <__clzsi2>
 8001036:	4642      	mov	r2, r8
 8001038:	1f43      	subs	r3, r0, #5
 800103a:	409a      	lsls	r2, r3
 800103c:	2300      	movs	r3, #0
 800103e:	1a2d      	subs	r5, r5, r0
 8001040:	4690      	mov	r8, r2
 8001042:	469c      	mov	ip, r3
 8001044:	3d76      	subs	r5, #118	; 0x76
 8001046:	e74e      	b.n	8000ee6 <__aeabi_fmul+0x5e>
 8001048:	2480      	movs	r4, #128	; 0x80
 800104a:	2100      	movs	r1, #0
 800104c:	20ff      	movs	r0, #255	; 0xff
 800104e:	03e4      	lsls	r4, r4, #15
 8001050:	e760      	b.n	8000f14 <__aeabi_fmul+0x8c>
 8001052:	2301      	movs	r3, #1
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	2b1b      	cmp	r3, #27
 8001058:	dd00      	ble.n	800105c <__aeabi_fmul+0x1d4>
 800105a:	e759      	b.n	8000f10 <__aeabi_fmul+0x88>
 800105c:	0022      	movs	r2, r4
 800105e:	309e      	adds	r0, #158	; 0x9e
 8001060:	40da      	lsrs	r2, r3
 8001062:	4084      	lsls	r4, r0
 8001064:	0013      	movs	r3, r2
 8001066:	1e62      	subs	r2, r4, #1
 8001068:	4194      	sbcs	r4, r2
 800106a:	431c      	orrs	r4, r3
 800106c:	0763      	lsls	r3, r4, #29
 800106e:	d004      	beq.n	800107a <__aeabi_fmul+0x1f2>
 8001070:	230f      	movs	r3, #15
 8001072:	4023      	ands	r3, r4
 8001074:	2b04      	cmp	r3, #4
 8001076:	d000      	beq.n	800107a <__aeabi_fmul+0x1f2>
 8001078:	3404      	adds	r4, #4
 800107a:	0163      	lsls	r3, r4, #5
 800107c:	d51a      	bpl.n	80010b4 <__aeabi_fmul+0x22c>
 800107e:	2001      	movs	r0, #1
 8001080:	2400      	movs	r4, #0
 8001082:	e747      	b.n	8000f14 <__aeabi_fmul+0x8c>
 8001084:	2080      	movs	r0, #128	; 0x80
 8001086:	03c0      	lsls	r0, r0, #15
 8001088:	4204      	tst	r4, r0
 800108a:	d009      	beq.n	80010a0 <__aeabi_fmul+0x218>
 800108c:	4643      	mov	r3, r8
 800108e:	4203      	tst	r3, r0
 8001090:	d106      	bne.n	80010a0 <__aeabi_fmul+0x218>
 8001092:	4644      	mov	r4, r8
 8001094:	4304      	orrs	r4, r0
 8001096:	0264      	lsls	r4, r4, #9
 8001098:	0039      	movs	r1, r7
 800109a:	20ff      	movs	r0, #255	; 0xff
 800109c:	0a64      	lsrs	r4, r4, #9
 800109e:	e739      	b.n	8000f14 <__aeabi_fmul+0x8c>
 80010a0:	2080      	movs	r0, #128	; 0x80
 80010a2:	03c0      	lsls	r0, r0, #15
 80010a4:	4304      	orrs	r4, r0
 80010a6:	0264      	lsls	r4, r4, #9
 80010a8:	0031      	movs	r1, r6
 80010aa:	20ff      	movs	r0, #255	; 0xff
 80010ac:	0a64      	lsrs	r4, r4, #9
 80010ae:	e731      	b.n	8000f14 <__aeabi_fmul+0x8c>
 80010b0:	0028      	movs	r0, r5
 80010b2:	e765      	b.n	8000f80 <__aeabi_fmul+0xf8>
 80010b4:	01a4      	lsls	r4, r4, #6
 80010b6:	2000      	movs	r0, #0
 80010b8:	0a64      	lsrs	r4, r4, #9
 80010ba:	e72b      	b.n	8000f14 <__aeabi_fmul+0x8c>
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	03c0      	lsls	r0, r0, #15
 80010c0:	4304      	orrs	r4, r0
 80010c2:	0264      	lsls	r4, r4, #9
 80010c4:	20ff      	movs	r0, #255	; 0xff
 80010c6:	0a64      	lsrs	r4, r4, #9
 80010c8:	e724      	b.n	8000f14 <__aeabi_fmul+0x8c>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	0800b4b8 	.word	0x0800b4b8
 80010d0:	f7ffffff 	.word	0xf7ffffff

080010d4 <__aeabi_fsub>:
 80010d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d6:	46ce      	mov	lr, r9
 80010d8:	4647      	mov	r7, r8
 80010da:	0243      	lsls	r3, r0, #9
 80010dc:	0a5b      	lsrs	r3, r3, #9
 80010de:	024e      	lsls	r6, r1, #9
 80010e0:	00da      	lsls	r2, r3, #3
 80010e2:	4694      	mov	ip, r2
 80010e4:	0a72      	lsrs	r2, r6, #9
 80010e6:	4691      	mov	r9, r2
 80010e8:	0045      	lsls	r5, r0, #1
 80010ea:	004a      	lsls	r2, r1, #1
 80010ec:	b580      	push	{r7, lr}
 80010ee:	0e2d      	lsrs	r5, r5, #24
 80010f0:	001f      	movs	r7, r3
 80010f2:	0fc4      	lsrs	r4, r0, #31
 80010f4:	0e12      	lsrs	r2, r2, #24
 80010f6:	0fc9      	lsrs	r1, r1, #31
 80010f8:	09b6      	lsrs	r6, r6, #6
 80010fa:	2aff      	cmp	r2, #255	; 0xff
 80010fc:	d05b      	beq.n	80011b6 <__aeabi_fsub+0xe2>
 80010fe:	2001      	movs	r0, #1
 8001100:	4041      	eors	r1, r0
 8001102:	428c      	cmp	r4, r1
 8001104:	d039      	beq.n	800117a <__aeabi_fsub+0xa6>
 8001106:	1aa8      	subs	r0, r5, r2
 8001108:	2800      	cmp	r0, #0
 800110a:	dd5a      	ble.n	80011c2 <__aeabi_fsub+0xee>
 800110c:	2a00      	cmp	r2, #0
 800110e:	d06a      	beq.n	80011e6 <__aeabi_fsub+0x112>
 8001110:	2dff      	cmp	r5, #255	; 0xff
 8001112:	d100      	bne.n	8001116 <__aeabi_fsub+0x42>
 8001114:	e0d9      	b.n	80012ca <__aeabi_fsub+0x1f6>
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	04d2      	lsls	r2, r2, #19
 800111a:	4316      	orrs	r6, r2
 800111c:	281b      	cmp	r0, #27
 800111e:	dc00      	bgt.n	8001122 <__aeabi_fsub+0x4e>
 8001120:	e0e9      	b.n	80012f6 <__aeabi_fsub+0x222>
 8001122:	2001      	movs	r0, #1
 8001124:	4663      	mov	r3, ip
 8001126:	1a18      	subs	r0, r3, r0
 8001128:	0143      	lsls	r3, r0, #5
 800112a:	d400      	bmi.n	800112e <__aeabi_fsub+0x5a>
 800112c:	e0b4      	b.n	8001298 <__aeabi_fsub+0x1c4>
 800112e:	0180      	lsls	r0, r0, #6
 8001130:	0987      	lsrs	r7, r0, #6
 8001132:	0038      	movs	r0, r7
 8001134:	f002 f85a 	bl	80031ec <__clzsi2>
 8001138:	3805      	subs	r0, #5
 800113a:	4087      	lsls	r7, r0
 800113c:	4285      	cmp	r5, r0
 800113e:	dc00      	bgt.n	8001142 <__aeabi_fsub+0x6e>
 8001140:	e0cc      	b.n	80012dc <__aeabi_fsub+0x208>
 8001142:	1a2d      	subs	r5, r5, r0
 8001144:	48b5      	ldr	r0, [pc, #724]	; (800141c <__aeabi_fsub+0x348>)
 8001146:	4038      	ands	r0, r7
 8001148:	0743      	lsls	r3, r0, #29
 800114a:	d004      	beq.n	8001156 <__aeabi_fsub+0x82>
 800114c:	230f      	movs	r3, #15
 800114e:	4003      	ands	r3, r0
 8001150:	2b04      	cmp	r3, #4
 8001152:	d000      	beq.n	8001156 <__aeabi_fsub+0x82>
 8001154:	3004      	adds	r0, #4
 8001156:	0143      	lsls	r3, r0, #5
 8001158:	d400      	bmi.n	800115c <__aeabi_fsub+0x88>
 800115a:	e0a0      	b.n	800129e <__aeabi_fsub+0x1ca>
 800115c:	1c6a      	adds	r2, r5, #1
 800115e:	2dfe      	cmp	r5, #254	; 0xfe
 8001160:	d100      	bne.n	8001164 <__aeabi_fsub+0x90>
 8001162:	e08d      	b.n	8001280 <__aeabi_fsub+0x1ac>
 8001164:	0180      	lsls	r0, r0, #6
 8001166:	0a47      	lsrs	r7, r0, #9
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	05d0      	lsls	r0, r2, #23
 800116c:	4338      	orrs	r0, r7
 800116e:	07e4      	lsls	r4, r4, #31
 8001170:	4320      	orrs	r0, r4
 8001172:	bcc0      	pop	{r6, r7}
 8001174:	46b9      	mov	r9, r7
 8001176:	46b0      	mov	r8, r6
 8001178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800117a:	1aa8      	subs	r0, r5, r2
 800117c:	4680      	mov	r8, r0
 800117e:	2800      	cmp	r0, #0
 8001180:	dd45      	ble.n	800120e <__aeabi_fsub+0x13a>
 8001182:	2a00      	cmp	r2, #0
 8001184:	d070      	beq.n	8001268 <__aeabi_fsub+0x194>
 8001186:	2dff      	cmp	r5, #255	; 0xff
 8001188:	d100      	bne.n	800118c <__aeabi_fsub+0xb8>
 800118a:	e09e      	b.n	80012ca <__aeabi_fsub+0x1f6>
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	04db      	lsls	r3, r3, #19
 8001190:	431e      	orrs	r6, r3
 8001192:	4643      	mov	r3, r8
 8001194:	2b1b      	cmp	r3, #27
 8001196:	dc00      	bgt.n	800119a <__aeabi_fsub+0xc6>
 8001198:	e0d2      	b.n	8001340 <__aeabi_fsub+0x26c>
 800119a:	2001      	movs	r0, #1
 800119c:	4460      	add	r0, ip
 800119e:	0143      	lsls	r3, r0, #5
 80011a0:	d57a      	bpl.n	8001298 <__aeabi_fsub+0x1c4>
 80011a2:	3501      	adds	r5, #1
 80011a4:	2dff      	cmp	r5, #255	; 0xff
 80011a6:	d06b      	beq.n	8001280 <__aeabi_fsub+0x1ac>
 80011a8:	2301      	movs	r3, #1
 80011aa:	4a9d      	ldr	r2, [pc, #628]	; (8001420 <__aeabi_fsub+0x34c>)
 80011ac:	4003      	ands	r3, r0
 80011ae:	0840      	lsrs	r0, r0, #1
 80011b0:	4010      	ands	r0, r2
 80011b2:	4318      	orrs	r0, r3
 80011b4:	e7c8      	b.n	8001148 <__aeabi_fsub+0x74>
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	d020      	beq.n	80011fc <__aeabi_fsub+0x128>
 80011ba:	428c      	cmp	r4, r1
 80011bc:	d023      	beq.n	8001206 <__aeabi_fsub+0x132>
 80011be:	0028      	movs	r0, r5
 80011c0:	38ff      	subs	r0, #255	; 0xff
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d039      	beq.n	800123a <__aeabi_fsub+0x166>
 80011c6:	1b57      	subs	r7, r2, r5
 80011c8:	2d00      	cmp	r5, #0
 80011ca:	d000      	beq.n	80011ce <__aeabi_fsub+0xfa>
 80011cc:	e09d      	b.n	800130a <__aeabi_fsub+0x236>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_fsub+0x102>
 80011d4:	e0db      	b.n	800138e <__aeabi_fsub+0x2ba>
 80011d6:	1e7b      	subs	r3, r7, #1
 80011d8:	2f01      	cmp	r7, #1
 80011da:	d100      	bne.n	80011de <__aeabi_fsub+0x10a>
 80011dc:	e10d      	b.n	80013fa <__aeabi_fsub+0x326>
 80011de:	2fff      	cmp	r7, #255	; 0xff
 80011e0:	d071      	beq.n	80012c6 <__aeabi_fsub+0x1f2>
 80011e2:	001f      	movs	r7, r3
 80011e4:	e098      	b.n	8001318 <__aeabi_fsub+0x244>
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x118>
 80011ea:	e0a7      	b.n	800133c <__aeabi_fsub+0x268>
 80011ec:	1e42      	subs	r2, r0, #1
 80011ee:	2801      	cmp	r0, #1
 80011f0:	d100      	bne.n	80011f4 <__aeabi_fsub+0x120>
 80011f2:	e0e6      	b.n	80013c2 <__aeabi_fsub+0x2ee>
 80011f4:	28ff      	cmp	r0, #255	; 0xff
 80011f6:	d068      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 80011f8:	0010      	movs	r0, r2
 80011fa:	e78f      	b.n	800111c <__aeabi_fsub+0x48>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4041      	eors	r1, r0
 8001200:	42a1      	cmp	r1, r4
 8001202:	d000      	beq.n	8001206 <__aeabi_fsub+0x132>
 8001204:	e77f      	b.n	8001106 <__aeabi_fsub+0x32>
 8001206:	20ff      	movs	r0, #255	; 0xff
 8001208:	4240      	negs	r0, r0
 800120a:	4680      	mov	r8, r0
 800120c:	44a8      	add	r8, r5
 800120e:	4640      	mov	r0, r8
 8001210:	2800      	cmp	r0, #0
 8001212:	d038      	beq.n	8001286 <__aeabi_fsub+0x1b2>
 8001214:	1b51      	subs	r1, r2, r5
 8001216:	2d00      	cmp	r5, #0
 8001218:	d100      	bne.n	800121c <__aeabi_fsub+0x148>
 800121a:	e0ae      	b.n	800137a <__aeabi_fsub+0x2a6>
 800121c:	2aff      	cmp	r2, #255	; 0xff
 800121e:	d100      	bne.n	8001222 <__aeabi_fsub+0x14e>
 8001220:	e0df      	b.n	80013e2 <__aeabi_fsub+0x30e>
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	4660      	mov	r0, ip
 8001226:	04db      	lsls	r3, r3, #19
 8001228:	4318      	orrs	r0, r3
 800122a:	4684      	mov	ip, r0
 800122c:	291b      	cmp	r1, #27
 800122e:	dc00      	bgt.n	8001232 <__aeabi_fsub+0x15e>
 8001230:	e0d9      	b.n	80013e6 <__aeabi_fsub+0x312>
 8001232:	2001      	movs	r0, #1
 8001234:	0015      	movs	r5, r2
 8001236:	1980      	adds	r0, r0, r6
 8001238:	e7b1      	b.n	800119e <__aeabi_fsub+0xca>
 800123a:	20fe      	movs	r0, #254	; 0xfe
 800123c:	1c6a      	adds	r2, r5, #1
 800123e:	4210      	tst	r0, r2
 8001240:	d171      	bne.n	8001326 <__aeabi_fsub+0x252>
 8001242:	2d00      	cmp	r5, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x174>
 8001246:	e0a6      	b.n	8001396 <__aeabi_fsub+0x2c2>
 8001248:	4663      	mov	r3, ip
 800124a:	2b00      	cmp	r3, #0
 800124c:	d100      	bne.n	8001250 <__aeabi_fsub+0x17c>
 800124e:	e0d9      	b.n	8001404 <__aeabi_fsub+0x330>
 8001250:	2200      	movs	r2, #0
 8001252:	2e00      	cmp	r6, #0
 8001254:	d100      	bne.n	8001258 <__aeabi_fsub+0x184>
 8001256:	e788      	b.n	800116a <__aeabi_fsub+0x96>
 8001258:	1b98      	subs	r0, r3, r6
 800125a:	0143      	lsls	r3, r0, #5
 800125c:	d400      	bmi.n	8001260 <__aeabi_fsub+0x18c>
 800125e:	e0e1      	b.n	8001424 <__aeabi_fsub+0x350>
 8001260:	4663      	mov	r3, ip
 8001262:	000c      	movs	r4, r1
 8001264:	1af0      	subs	r0, r6, r3
 8001266:	e76f      	b.n	8001148 <__aeabi_fsub+0x74>
 8001268:	2e00      	cmp	r6, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x19a>
 800126c:	e0b7      	b.n	80013de <__aeabi_fsub+0x30a>
 800126e:	0002      	movs	r2, r0
 8001270:	3a01      	subs	r2, #1
 8001272:	2801      	cmp	r0, #1
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x1a4>
 8001276:	e09c      	b.n	80013b2 <__aeabi_fsub+0x2de>
 8001278:	28ff      	cmp	r0, #255	; 0xff
 800127a:	d026      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 800127c:	4690      	mov	r8, r2
 800127e:	e788      	b.n	8001192 <__aeabi_fsub+0xbe>
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	2700      	movs	r7, #0
 8001284:	e771      	b.n	800116a <__aeabi_fsub+0x96>
 8001286:	20fe      	movs	r0, #254	; 0xfe
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	4210      	tst	r0, r2
 800128c:	d064      	beq.n	8001358 <__aeabi_fsub+0x284>
 800128e:	2aff      	cmp	r2, #255	; 0xff
 8001290:	d0f6      	beq.n	8001280 <__aeabi_fsub+0x1ac>
 8001292:	0015      	movs	r5, r2
 8001294:	4466      	add	r6, ip
 8001296:	0870      	lsrs	r0, r6, #1
 8001298:	0743      	lsls	r3, r0, #29
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x1ca>
 800129c:	e756      	b.n	800114c <__aeabi_fsub+0x78>
 800129e:	08c3      	lsrs	r3, r0, #3
 80012a0:	2dff      	cmp	r5, #255	; 0xff
 80012a2:	d012      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 80012a4:	025b      	lsls	r3, r3, #9
 80012a6:	0a5f      	lsrs	r7, r3, #9
 80012a8:	b2ea      	uxtb	r2, r5
 80012aa:	e75e      	b.n	800116a <__aeabi_fsub+0x96>
 80012ac:	4662      	mov	r2, ip
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x1e0>
 80012b2:	e096      	b.n	80013e2 <__aeabi_fsub+0x30e>
 80012b4:	2e00      	cmp	r6, #0
 80012b6:	d008      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	03d2      	lsls	r2, r2, #15
 80012bc:	4213      	tst	r3, r2
 80012be:	d004      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 80012c0:	4648      	mov	r0, r9
 80012c2:	4210      	tst	r0, r2
 80012c4:	d101      	bne.n	80012ca <__aeabi_fsub+0x1f6>
 80012c6:	000c      	movs	r4, r1
 80012c8:	464b      	mov	r3, r9
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0d8      	beq.n	8001280 <__aeabi_fsub+0x1ac>
 80012ce:	2780      	movs	r7, #128	; 0x80
 80012d0:	03ff      	lsls	r7, r7, #15
 80012d2:	431f      	orrs	r7, r3
 80012d4:	027f      	lsls	r7, r7, #9
 80012d6:	22ff      	movs	r2, #255	; 0xff
 80012d8:	0a7f      	lsrs	r7, r7, #9
 80012da:	e746      	b.n	800116a <__aeabi_fsub+0x96>
 80012dc:	2320      	movs	r3, #32
 80012de:	003a      	movs	r2, r7
 80012e0:	1b45      	subs	r5, r0, r5
 80012e2:	0038      	movs	r0, r7
 80012e4:	3501      	adds	r5, #1
 80012e6:	40ea      	lsrs	r2, r5
 80012e8:	1b5d      	subs	r5, r3, r5
 80012ea:	40a8      	lsls	r0, r5
 80012ec:	1e43      	subs	r3, r0, #1
 80012ee:	4198      	sbcs	r0, r3
 80012f0:	2500      	movs	r5, #0
 80012f2:	4310      	orrs	r0, r2
 80012f4:	e728      	b.n	8001148 <__aeabi_fsub+0x74>
 80012f6:	2320      	movs	r3, #32
 80012f8:	1a1b      	subs	r3, r3, r0
 80012fa:	0032      	movs	r2, r6
 80012fc:	409e      	lsls	r6, r3
 80012fe:	40c2      	lsrs	r2, r0
 8001300:	0030      	movs	r0, r6
 8001302:	1e43      	subs	r3, r0, #1
 8001304:	4198      	sbcs	r0, r3
 8001306:	4310      	orrs	r0, r2
 8001308:	e70c      	b.n	8001124 <__aeabi_fsub+0x50>
 800130a:	2aff      	cmp	r2, #255	; 0xff
 800130c:	d0db      	beq.n	80012c6 <__aeabi_fsub+0x1f2>
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	4660      	mov	r0, ip
 8001312:	04db      	lsls	r3, r3, #19
 8001314:	4318      	orrs	r0, r3
 8001316:	4684      	mov	ip, r0
 8001318:	2f1b      	cmp	r7, #27
 800131a:	dd56      	ble.n	80013ca <__aeabi_fsub+0x2f6>
 800131c:	2001      	movs	r0, #1
 800131e:	000c      	movs	r4, r1
 8001320:	0015      	movs	r5, r2
 8001322:	1a30      	subs	r0, r6, r0
 8001324:	e700      	b.n	8001128 <__aeabi_fsub+0x54>
 8001326:	4663      	mov	r3, ip
 8001328:	1b9f      	subs	r7, r3, r6
 800132a:	017b      	lsls	r3, r7, #5
 800132c:	d43d      	bmi.n	80013aa <__aeabi_fsub+0x2d6>
 800132e:	2f00      	cmp	r7, #0
 8001330:	d000      	beq.n	8001334 <__aeabi_fsub+0x260>
 8001332:	e6fe      	b.n	8001132 <__aeabi_fsub+0x5e>
 8001334:	2400      	movs	r4, #0
 8001336:	2200      	movs	r2, #0
 8001338:	2700      	movs	r7, #0
 800133a:	e716      	b.n	800116a <__aeabi_fsub+0x96>
 800133c:	0005      	movs	r5, r0
 800133e:	e7af      	b.n	80012a0 <__aeabi_fsub+0x1cc>
 8001340:	0032      	movs	r2, r6
 8001342:	4643      	mov	r3, r8
 8001344:	4641      	mov	r1, r8
 8001346:	40da      	lsrs	r2, r3
 8001348:	2320      	movs	r3, #32
 800134a:	1a5b      	subs	r3, r3, r1
 800134c:	409e      	lsls	r6, r3
 800134e:	0030      	movs	r0, r6
 8001350:	1e43      	subs	r3, r0, #1
 8001352:	4198      	sbcs	r0, r3
 8001354:	4310      	orrs	r0, r2
 8001356:	e721      	b.n	800119c <__aeabi_fsub+0xc8>
 8001358:	2d00      	cmp	r5, #0
 800135a:	d1a7      	bne.n	80012ac <__aeabi_fsub+0x1d8>
 800135c:	4663      	mov	r3, ip
 800135e:	2b00      	cmp	r3, #0
 8001360:	d059      	beq.n	8001416 <__aeabi_fsub+0x342>
 8001362:	2200      	movs	r2, #0
 8001364:	2e00      	cmp	r6, #0
 8001366:	d100      	bne.n	800136a <__aeabi_fsub+0x296>
 8001368:	e6ff      	b.n	800116a <__aeabi_fsub+0x96>
 800136a:	0030      	movs	r0, r6
 800136c:	4460      	add	r0, ip
 800136e:	0143      	lsls	r3, r0, #5
 8001370:	d592      	bpl.n	8001298 <__aeabi_fsub+0x1c4>
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <__aeabi_fsub+0x348>)
 8001374:	3501      	adds	r5, #1
 8001376:	4018      	ands	r0, r3
 8001378:	e78e      	b.n	8001298 <__aeabi_fsub+0x1c4>
 800137a:	4663      	mov	r3, ip
 800137c:	2b00      	cmp	r3, #0
 800137e:	d047      	beq.n	8001410 <__aeabi_fsub+0x33c>
 8001380:	1e4b      	subs	r3, r1, #1
 8001382:	2901      	cmp	r1, #1
 8001384:	d015      	beq.n	80013b2 <__aeabi_fsub+0x2de>
 8001386:	29ff      	cmp	r1, #255	; 0xff
 8001388:	d02b      	beq.n	80013e2 <__aeabi_fsub+0x30e>
 800138a:	0019      	movs	r1, r3
 800138c:	e74e      	b.n	800122c <__aeabi_fsub+0x158>
 800138e:	000c      	movs	r4, r1
 8001390:	464b      	mov	r3, r9
 8001392:	003d      	movs	r5, r7
 8001394:	e784      	b.n	80012a0 <__aeabi_fsub+0x1cc>
 8001396:	4662      	mov	r2, ip
 8001398:	2a00      	cmp	r2, #0
 800139a:	d18b      	bne.n	80012b4 <__aeabi_fsub+0x1e0>
 800139c:	2e00      	cmp	r6, #0
 800139e:	d192      	bne.n	80012c6 <__aeabi_fsub+0x1f2>
 80013a0:	2780      	movs	r7, #128	; 0x80
 80013a2:	2400      	movs	r4, #0
 80013a4:	22ff      	movs	r2, #255	; 0xff
 80013a6:	03ff      	lsls	r7, r7, #15
 80013a8:	e6df      	b.n	800116a <__aeabi_fsub+0x96>
 80013aa:	4663      	mov	r3, ip
 80013ac:	000c      	movs	r4, r1
 80013ae:	1af7      	subs	r7, r6, r3
 80013b0:	e6bf      	b.n	8001132 <__aeabi_fsub+0x5e>
 80013b2:	0030      	movs	r0, r6
 80013b4:	4460      	add	r0, ip
 80013b6:	2501      	movs	r5, #1
 80013b8:	0143      	lsls	r3, r0, #5
 80013ba:	d400      	bmi.n	80013be <__aeabi_fsub+0x2ea>
 80013bc:	e76c      	b.n	8001298 <__aeabi_fsub+0x1c4>
 80013be:	2502      	movs	r5, #2
 80013c0:	e6f2      	b.n	80011a8 <__aeabi_fsub+0xd4>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2501      	movs	r5, #1
 80013c6:	1b98      	subs	r0, r3, r6
 80013c8:	e6ae      	b.n	8001128 <__aeabi_fsub+0x54>
 80013ca:	2320      	movs	r3, #32
 80013cc:	4664      	mov	r4, ip
 80013ce:	4660      	mov	r0, ip
 80013d0:	40fc      	lsrs	r4, r7
 80013d2:	1bdf      	subs	r7, r3, r7
 80013d4:	40b8      	lsls	r0, r7
 80013d6:	1e43      	subs	r3, r0, #1
 80013d8:	4198      	sbcs	r0, r3
 80013da:	4320      	orrs	r0, r4
 80013dc:	e79f      	b.n	800131e <__aeabi_fsub+0x24a>
 80013de:	0005      	movs	r5, r0
 80013e0:	e75e      	b.n	80012a0 <__aeabi_fsub+0x1cc>
 80013e2:	464b      	mov	r3, r9
 80013e4:	e771      	b.n	80012ca <__aeabi_fsub+0x1f6>
 80013e6:	2320      	movs	r3, #32
 80013e8:	4665      	mov	r5, ip
 80013ea:	4660      	mov	r0, ip
 80013ec:	40cd      	lsrs	r5, r1
 80013ee:	1a59      	subs	r1, r3, r1
 80013f0:	4088      	lsls	r0, r1
 80013f2:	1e43      	subs	r3, r0, #1
 80013f4:	4198      	sbcs	r0, r3
 80013f6:	4328      	orrs	r0, r5
 80013f8:	e71c      	b.n	8001234 <__aeabi_fsub+0x160>
 80013fa:	4663      	mov	r3, ip
 80013fc:	000c      	movs	r4, r1
 80013fe:	2501      	movs	r5, #1
 8001400:	1af0      	subs	r0, r6, r3
 8001402:	e691      	b.n	8001128 <__aeabi_fsub+0x54>
 8001404:	2e00      	cmp	r6, #0
 8001406:	d095      	beq.n	8001334 <__aeabi_fsub+0x260>
 8001408:	000c      	movs	r4, r1
 800140a:	464f      	mov	r7, r9
 800140c:	2200      	movs	r2, #0
 800140e:	e6ac      	b.n	800116a <__aeabi_fsub+0x96>
 8001410:	464b      	mov	r3, r9
 8001412:	000d      	movs	r5, r1
 8001414:	e744      	b.n	80012a0 <__aeabi_fsub+0x1cc>
 8001416:	464f      	mov	r7, r9
 8001418:	2200      	movs	r2, #0
 800141a:	e6a6      	b.n	800116a <__aeabi_fsub+0x96>
 800141c:	fbffffff 	.word	0xfbffffff
 8001420:	7dffffff 	.word	0x7dffffff
 8001424:	2800      	cmp	r0, #0
 8001426:	d000      	beq.n	800142a <__aeabi_fsub+0x356>
 8001428:	e736      	b.n	8001298 <__aeabi_fsub+0x1c4>
 800142a:	2400      	movs	r4, #0
 800142c:	2700      	movs	r7, #0
 800142e:	e69c      	b.n	800116a <__aeabi_fsub+0x96>

08001430 <__aeabi_f2iz>:
 8001430:	0241      	lsls	r1, r0, #9
 8001432:	0042      	lsls	r2, r0, #1
 8001434:	0fc3      	lsrs	r3, r0, #31
 8001436:	0a49      	lsrs	r1, r1, #9
 8001438:	2000      	movs	r0, #0
 800143a:	0e12      	lsrs	r2, r2, #24
 800143c:	2a7e      	cmp	r2, #126	; 0x7e
 800143e:	dd03      	ble.n	8001448 <__aeabi_f2iz+0x18>
 8001440:	2a9d      	cmp	r2, #157	; 0x9d
 8001442:	dd02      	ble.n	800144a <__aeabi_f2iz+0x1a>
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <__aeabi_f2iz+0x3c>)
 8001446:	1898      	adds	r0, r3, r2
 8001448:	4770      	bx	lr
 800144a:	2080      	movs	r0, #128	; 0x80
 800144c:	0400      	lsls	r0, r0, #16
 800144e:	4301      	orrs	r1, r0
 8001450:	2a95      	cmp	r2, #149	; 0x95
 8001452:	dc07      	bgt.n	8001464 <__aeabi_f2iz+0x34>
 8001454:	2096      	movs	r0, #150	; 0x96
 8001456:	1a82      	subs	r2, r0, r2
 8001458:	40d1      	lsrs	r1, r2
 800145a:	4248      	negs	r0, r1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f3      	bne.n	8001448 <__aeabi_f2iz+0x18>
 8001460:	0008      	movs	r0, r1
 8001462:	e7f1      	b.n	8001448 <__aeabi_f2iz+0x18>
 8001464:	3a96      	subs	r2, #150	; 0x96
 8001466:	4091      	lsls	r1, r2
 8001468:	e7f7      	b.n	800145a <__aeabi_f2iz+0x2a>
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	7fffffff 	.word	0x7fffffff

08001470 <__aeabi_i2f>:
 8001470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001472:	2800      	cmp	r0, #0
 8001474:	d013      	beq.n	800149e <__aeabi_i2f+0x2e>
 8001476:	17c3      	asrs	r3, r0, #31
 8001478:	18c6      	adds	r6, r0, r3
 800147a:	405e      	eors	r6, r3
 800147c:	0fc4      	lsrs	r4, r0, #31
 800147e:	0030      	movs	r0, r6
 8001480:	f001 feb4 	bl	80031ec <__clzsi2>
 8001484:	239e      	movs	r3, #158	; 0x9e
 8001486:	0005      	movs	r5, r0
 8001488:	1a1b      	subs	r3, r3, r0
 800148a:	2b96      	cmp	r3, #150	; 0x96
 800148c:	dc0f      	bgt.n	80014ae <__aeabi_i2f+0x3e>
 800148e:	2808      	cmp	r0, #8
 8001490:	dd01      	ble.n	8001496 <__aeabi_i2f+0x26>
 8001492:	3d08      	subs	r5, #8
 8001494:	40ae      	lsls	r6, r5
 8001496:	0276      	lsls	r6, r6, #9
 8001498:	0a76      	lsrs	r6, r6, #9
 800149a:	b2d8      	uxtb	r0, r3
 800149c:	e002      	b.n	80014a4 <__aeabi_i2f+0x34>
 800149e:	2400      	movs	r4, #0
 80014a0:	2000      	movs	r0, #0
 80014a2:	2600      	movs	r6, #0
 80014a4:	05c0      	lsls	r0, r0, #23
 80014a6:	4330      	orrs	r0, r6
 80014a8:	07e4      	lsls	r4, r4, #31
 80014aa:	4320      	orrs	r0, r4
 80014ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014ae:	2b99      	cmp	r3, #153	; 0x99
 80014b0:	dd0c      	ble.n	80014cc <__aeabi_i2f+0x5c>
 80014b2:	2205      	movs	r2, #5
 80014b4:	0031      	movs	r1, r6
 80014b6:	1a12      	subs	r2, r2, r0
 80014b8:	40d1      	lsrs	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	0001      	movs	r1, r0
 80014be:	0030      	movs	r0, r6
 80014c0:	311b      	adds	r1, #27
 80014c2:	4088      	lsls	r0, r1
 80014c4:	1e41      	subs	r1, r0, #1
 80014c6:	4188      	sbcs	r0, r1
 80014c8:	4302      	orrs	r2, r0
 80014ca:	0016      	movs	r6, r2
 80014cc:	2d05      	cmp	r5, #5
 80014ce:	dc12      	bgt.n	80014f6 <__aeabi_i2f+0x86>
 80014d0:	0031      	movs	r1, r6
 80014d2:	4f0d      	ldr	r7, [pc, #52]	; (8001508 <__aeabi_i2f+0x98>)
 80014d4:	4039      	ands	r1, r7
 80014d6:	0772      	lsls	r2, r6, #29
 80014d8:	d009      	beq.n	80014ee <__aeabi_i2f+0x7e>
 80014da:	200f      	movs	r0, #15
 80014dc:	4030      	ands	r0, r6
 80014de:	2804      	cmp	r0, #4
 80014e0:	d005      	beq.n	80014ee <__aeabi_i2f+0x7e>
 80014e2:	3104      	adds	r1, #4
 80014e4:	014a      	lsls	r2, r1, #5
 80014e6:	d502      	bpl.n	80014ee <__aeabi_i2f+0x7e>
 80014e8:	239f      	movs	r3, #159	; 0x9f
 80014ea:	4039      	ands	r1, r7
 80014ec:	1b5b      	subs	r3, r3, r5
 80014ee:	0189      	lsls	r1, r1, #6
 80014f0:	0a4e      	lsrs	r6, r1, #9
 80014f2:	b2d8      	uxtb	r0, r3
 80014f4:	e7d6      	b.n	80014a4 <__aeabi_i2f+0x34>
 80014f6:	1f6a      	subs	r2, r5, #5
 80014f8:	4096      	lsls	r6, r2
 80014fa:	0031      	movs	r1, r6
 80014fc:	4f02      	ldr	r7, [pc, #8]	; (8001508 <__aeabi_i2f+0x98>)
 80014fe:	4039      	ands	r1, r7
 8001500:	0772      	lsls	r2, r6, #29
 8001502:	d0f4      	beq.n	80014ee <__aeabi_i2f+0x7e>
 8001504:	e7e9      	b.n	80014da <__aeabi_i2f+0x6a>
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	fbffffff 	.word	0xfbffffff

0800150c <__aeabi_ui2f>:
 800150c:	b570      	push	{r4, r5, r6, lr}
 800150e:	1e05      	subs	r5, r0, #0
 8001510:	d00e      	beq.n	8001530 <__aeabi_ui2f+0x24>
 8001512:	f001 fe6b 	bl	80031ec <__clzsi2>
 8001516:	239e      	movs	r3, #158	; 0x9e
 8001518:	0004      	movs	r4, r0
 800151a:	1a1b      	subs	r3, r3, r0
 800151c:	2b96      	cmp	r3, #150	; 0x96
 800151e:	dc0c      	bgt.n	800153a <__aeabi_ui2f+0x2e>
 8001520:	2808      	cmp	r0, #8
 8001522:	dd01      	ble.n	8001528 <__aeabi_ui2f+0x1c>
 8001524:	3c08      	subs	r4, #8
 8001526:	40a5      	lsls	r5, r4
 8001528:	026d      	lsls	r5, r5, #9
 800152a:	0a6d      	lsrs	r5, r5, #9
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	e001      	b.n	8001534 <__aeabi_ui2f+0x28>
 8001530:	2000      	movs	r0, #0
 8001532:	2500      	movs	r5, #0
 8001534:	05c0      	lsls	r0, r0, #23
 8001536:	4328      	orrs	r0, r5
 8001538:	bd70      	pop	{r4, r5, r6, pc}
 800153a:	2b99      	cmp	r3, #153	; 0x99
 800153c:	dd09      	ble.n	8001552 <__aeabi_ui2f+0x46>
 800153e:	0002      	movs	r2, r0
 8001540:	0029      	movs	r1, r5
 8001542:	321b      	adds	r2, #27
 8001544:	4091      	lsls	r1, r2
 8001546:	1e4a      	subs	r2, r1, #1
 8001548:	4191      	sbcs	r1, r2
 800154a:	2205      	movs	r2, #5
 800154c:	1a12      	subs	r2, r2, r0
 800154e:	40d5      	lsrs	r5, r2
 8001550:	430d      	orrs	r5, r1
 8001552:	2c05      	cmp	r4, #5
 8001554:	dc12      	bgt.n	800157c <__aeabi_ui2f+0x70>
 8001556:	0029      	movs	r1, r5
 8001558:	4e0c      	ldr	r6, [pc, #48]	; (800158c <__aeabi_ui2f+0x80>)
 800155a:	4031      	ands	r1, r6
 800155c:	076a      	lsls	r2, r5, #29
 800155e:	d009      	beq.n	8001574 <__aeabi_ui2f+0x68>
 8001560:	200f      	movs	r0, #15
 8001562:	4028      	ands	r0, r5
 8001564:	2804      	cmp	r0, #4
 8001566:	d005      	beq.n	8001574 <__aeabi_ui2f+0x68>
 8001568:	3104      	adds	r1, #4
 800156a:	014a      	lsls	r2, r1, #5
 800156c:	d502      	bpl.n	8001574 <__aeabi_ui2f+0x68>
 800156e:	239f      	movs	r3, #159	; 0x9f
 8001570:	4031      	ands	r1, r6
 8001572:	1b1b      	subs	r3, r3, r4
 8001574:	0189      	lsls	r1, r1, #6
 8001576:	0a4d      	lsrs	r5, r1, #9
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	e7db      	b.n	8001534 <__aeabi_ui2f+0x28>
 800157c:	1f62      	subs	r2, r4, #5
 800157e:	4095      	lsls	r5, r2
 8001580:	0029      	movs	r1, r5
 8001582:	4e02      	ldr	r6, [pc, #8]	; (800158c <__aeabi_ui2f+0x80>)
 8001584:	4031      	ands	r1, r6
 8001586:	076a      	lsls	r2, r5, #29
 8001588:	d0f4      	beq.n	8001574 <__aeabi_ui2f+0x68>
 800158a:	e7e9      	b.n	8001560 <__aeabi_ui2f+0x54>
 800158c:	fbffffff 	.word	0xfbffffff

08001590 <__aeabi_dadd>:
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	464f      	mov	r7, r9
 8001594:	4646      	mov	r6, r8
 8001596:	46d6      	mov	lr, sl
 8001598:	000d      	movs	r5, r1
 800159a:	0004      	movs	r4, r0
 800159c:	b5c0      	push	{r6, r7, lr}
 800159e:	001f      	movs	r7, r3
 80015a0:	0011      	movs	r1, r2
 80015a2:	0328      	lsls	r0, r5, #12
 80015a4:	0f62      	lsrs	r2, r4, #29
 80015a6:	0a40      	lsrs	r0, r0, #9
 80015a8:	4310      	orrs	r0, r2
 80015aa:	007a      	lsls	r2, r7, #1
 80015ac:	0d52      	lsrs	r2, r2, #21
 80015ae:	00e3      	lsls	r3, r4, #3
 80015b0:	033c      	lsls	r4, r7, #12
 80015b2:	4691      	mov	r9, r2
 80015b4:	0a64      	lsrs	r4, r4, #9
 80015b6:	0ffa      	lsrs	r2, r7, #31
 80015b8:	0f4f      	lsrs	r7, r1, #29
 80015ba:	006e      	lsls	r6, r5, #1
 80015bc:	4327      	orrs	r7, r4
 80015be:	4692      	mov	sl, r2
 80015c0:	46b8      	mov	r8, r7
 80015c2:	0d76      	lsrs	r6, r6, #21
 80015c4:	0fed      	lsrs	r5, r5, #31
 80015c6:	00c9      	lsls	r1, r1, #3
 80015c8:	4295      	cmp	r5, r2
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x3e>
 80015cc:	e099      	b.n	8001702 <__aeabi_dadd+0x172>
 80015ce:	464c      	mov	r4, r9
 80015d0:	1b34      	subs	r4, r6, r4
 80015d2:	46a4      	mov	ip, r4
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	dc00      	bgt.n	80015da <__aeabi_dadd+0x4a>
 80015d8:	e07c      	b.n	80016d4 <__aeabi_dadd+0x144>
 80015da:	464a      	mov	r2, r9
 80015dc:	2a00      	cmp	r2, #0
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x52>
 80015e0:	e0b8      	b.n	8001754 <__aeabi_dadd+0x1c4>
 80015e2:	4ac5      	ldr	r2, [pc, #788]	; (80018f8 <__aeabi_dadd+0x368>)
 80015e4:	4296      	cmp	r6, r2
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x5a>
 80015e8:	e11c      	b.n	8001824 <__aeabi_dadd+0x294>
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	003c      	movs	r4, r7
 80015ee:	0412      	lsls	r2, r2, #16
 80015f0:	4314      	orrs	r4, r2
 80015f2:	46a0      	mov	r8, r4
 80015f4:	4662      	mov	r2, ip
 80015f6:	2a38      	cmp	r2, #56	; 0x38
 80015f8:	dd00      	ble.n	80015fc <__aeabi_dadd+0x6c>
 80015fa:	e161      	b.n	80018c0 <__aeabi_dadd+0x330>
 80015fc:	2a1f      	cmp	r2, #31
 80015fe:	dd00      	ble.n	8001602 <__aeabi_dadd+0x72>
 8001600:	e1cc      	b.n	800199c <__aeabi_dadd+0x40c>
 8001602:	4664      	mov	r4, ip
 8001604:	2220      	movs	r2, #32
 8001606:	1b12      	subs	r2, r2, r4
 8001608:	4644      	mov	r4, r8
 800160a:	4094      	lsls	r4, r2
 800160c:	000f      	movs	r7, r1
 800160e:	46a1      	mov	r9, r4
 8001610:	4664      	mov	r4, ip
 8001612:	4091      	lsls	r1, r2
 8001614:	40e7      	lsrs	r7, r4
 8001616:	464c      	mov	r4, r9
 8001618:	1e4a      	subs	r2, r1, #1
 800161a:	4191      	sbcs	r1, r2
 800161c:	433c      	orrs	r4, r7
 800161e:	4642      	mov	r2, r8
 8001620:	4321      	orrs	r1, r4
 8001622:	4664      	mov	r4, ip
 8001624:	40e2      	lsrs	r2, r4
 8001626:	1a80      	subs	r0, r0, r2
 8001628:	1a5c      	subs	r4, r3, r1
 800162a:	42a3      	cmp	r3, r4
 800162c:	419b      	sbcs	r3, r3
 800162e:	425f      	negs	r7, r3
 8001630:	1bc7      	subs	r7, r0, r7
 8001632:	023b      	lsls	r3, r7, #8
 8001634:	d400      	bmi.n	8001638 <__aeabi_dadd+0xa8>
 8001636:	e0d0      	b.n	80017da <__aeabi_dadd+0x24a>
 8001638:	027f      	lsls	r7, r7, #9
 800163a:	0a7f      	lsrs	r7, r7, #9
 800163c:	2f00      	cmp	r7, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_dadd+0xb2>
 8001640:	e0ff      	b.n	8001842 <__aeabi_dadd+0x2b2>
 8001642:	0038      	movs	r0, r7
 8001644:	f001 fdd2 	bl	80031ec <__clzsi2>
 8001648:	0001      	movs	r1, r0
 800164a:	3908      	subs	r1, #8
 800164c:	2320      	movs	r3, #32
 800164e:	0022      	movs	r2, r4
 8001650:	1a5b      	subs	r3, r3, r1
 8001652:	408f      	lsls	r7, r1
 8001654:	40da      	lsrs	r2, r3
 8001656:	408c      	lsls	r4, r1
 8001658:	4317      	orrs	r7, r2
 800165a:	42b1      	cmp	r1, r6
 800165c:	da00      	bge.n	8001660 <__aeabi_dadd+0xd0>
 800165e:	e0ff      	b.n	8001860 <__aeabi_dadd+0x2d0>
 8001660:	1b89      	subs	r1, r1, r6
 8001662:	1c4b      	adds	r3, r1, #1
 8001664:	2b1f      	cmp	r3, #31
 8001666:	dd00      	ble.n	800166a <__aeabi_dadd+0xda>
 8001668:	e0a8      	b.n	80017bc <__aeabi_dadd+0x22c>
 800166a:	2220      	movs	r2, #32
 800166c:	0039      	movs	r1, r7
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	0020      	movs	r0, r4
 8001672:	4094      	lsls	r4, r2
 8001674:	4091      	lsls	r1, r2
 8001676:	40d8      	lsrs	r0, r3
 8001678:	1e62      	subs	r2, r4, #1
 800167a:	4194      	sbcs	r4, r2
 800167c:	40df      	lsrs	r7, r3
 800167e:	2600      	movs	r6, #0
 8001680:	4301      	orrs	r1, r0
 8001682:	430c      	orrs	r4, r1
 8001684:	0763      	lsls	r3, r4, #29
 8001686:	d009      	beq.n	800169c <__aeabi_dadd+0x10c>
 8001688:	230f      	movs	r3, #15
 800168a:	4023      	ands	r3, r4
 800168c:	2b04      	cmp	r3, #4
 800168e:	d005      	beq.n	800169c <__aeabi_dadd+0x10c>
 8001690:	1d23      	adds	r3, r4, #4
 8001692:	42a3      	cmp	r3, r4
 8001694:	41a4      	sbcs	r4, r4
 8001696:	4264      	negs	r4, r4
 8001698:	193f      	adds	r7, r7, r4
 800169a:	001c      	movs	r4, r3
 800169c:	023b      	lsls	r3, r7, #8
 800169e:	d400      	bmi.n	80016a2 <__aeabi_dadd+0x112>
 80016a0:	e09e      	b.n	80017e0 <__aeabi_dadd+0x250>
 80016a2:	4b95      	ldr	r3, [pc, #596]	; (80018f8 <__aeabi_dadd+0x368>)
 80016a4:	3601      	adds	r6, #1
 80016a6:	429e      	cmp	r6, r3
 80016a8:	d100      	bne.n	80016ac <__aeabi_dadd+0x11c>
 80016aa:	e0b7      	b.n	800181c <__aeabi_dadd+0x28c>
 80016ac:	4a93      	ldr	r2, [pc, #588]	; (80018fc <__aeabi_dadd+0x36c>)
 80016ae:	08e4      	lsrs	r4, r4, #3
 80016b0:	4017      	ands	r7, r2
 80016b2:	077b      	lsls	r3, r7, #29
 80016b4:	0571      	lsls	r1, r6, #21
 80016b6:	027f      	lsls	r7, r7, #9
 80016b8:	4323      	orrs	r3, r4
 80016ba:	0b3f      	lsrs	r7, r7, #12
 80016bc:	0d4a      	lsrs	r2, r1, #21
 80016be:	0512      	lsls	r2, r2, #20
 80016c0:	433a      	orrs	r2, r7
 80016c2:	07ed      	lsls	r5, r5, #31
 80016c4:	432a      	orrs	r2, r5
 80016c6:	0018      	movs	r0, r3
 80016c8:	0011      	movs	r1, r2
 80016ca:	bce0      	pop	{r5, r6, r7}
 80016cc:	46ba      	mov	sl, r7
 80016ce:	46b1      	mov	r9, r6
 80016d0:	46a8      	mov	r8, r5
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d4:	2c00      	cmp	r4, #0
 80016d6:	d04b      	beq.n	8001770 <__aeabi_dadd+0x1e0>
 80016d8:	464c      	mov	r4, r9
 80016da:	1ba4      	subs	r4, r4, r6
 80016dc:	46a4      	mov	ip, r4
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dadd+0x154>
 80016e2:	e123      	b.n	800192c <__aeabi_dadd+0x39c>
 80016e4:	0004      	movs	r4, r0
 80016e6:	431c      	orrs	r4, r3
 80016e8:	d100      	bne.n	80016ec <__aeabi_dadd+0x15c>
 80016ea:	e1af      	b.n	8001a4c <__aeabi_dadd+0x4bc>
 80016ec:	4662      	mov	r2, ip
 80016ee:	1e54      	subs	r4, r2, #1
 80016f0:	2a01      	cmp	r2, #1
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0x166>
 80016f4:	e215      	b.n	8001b22 <__aeabi_dadd+0x592>
 80016f6:	4d80      	ldr	r5, [pc, #512]	; (80018f8 <__aeabi_dadd+0x368>)
 80016f8:	45ac      	cmp	ip, r5
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x16e>
 80016fc:	e1c8      	b.n	8001a90 <__aeabi_dadd+0x500>
 80016fe:	46a4      	mov	ip, r4
 8001700:	e11b      	b.n	800193a <__aeabi_dadd+0x3aa>
 8001702:	464a      	mov	r2, r9
 8001704:	1ab2      	subs	r2, r6, r2
 8001706:	4694      	mov	ip, r2
 8001708:	2a00      	cmp	r2, #0
 800170a:	dc00      	bgt.n	800170e <__aeabi_dadd+0x17e>
 800170c:	e0ac      	b.n	8001868 <__aeabi_dadd+0x2d8>
 800170e:	464a      	mov	r2, r9
 8001710:	2a00      	cmp	r2, #0
 8001712:	d043      	beq.n	800179c <__aeabi_dadd+0x20c>
 8001714:	4a78      	ldr	r2, [pc, #480]	; (80018f8 <__aeabi_dadd+0x368>)
 8001716:	4296      	cmp	r6, r2
 8001718:	d100      	bne.n	800171c <__aeabi_dadd+0x18c>
 800171a:	e1af      	b.n	8001a7c <__aeabi_dadd+0x4ec>
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	003c      	movs	r4, r7
 8001720:	0412      	lsls	r2, r2, #16
 8001722:	4314      	orrs	r4, r2
 8001724:	46a0      	mov	r8, r4
 8001726:	4662      	mov	r2, ip
 8001728:	2a38      	cmp	r2, #56	; 0x38
 800172a:	dc67      	bgt.n	80017fc <__aeabi_dadd+0x26c>
 800172c:	2a1f      	cmp	r2, #31
 800172e:	dc00      	bgt.n	8001732 <__aeabi_dadd+0x1a2>
 8001730:	e15f      	b.n	80019f2 <__aeabi_dadd+0x462>
 8001732:	4647      	mov	r7, r8
 8001734:	3a20      	subs	r2, #32
 8001736:	40d7      	lsrs	r7, r2
 8001738:	4662      	mov	r2, ip
 800173a:	2a20      	cmp	r2, #32
 800173c:	d005      	beq.n	800174a <__aeabi_dadd+0x1ba>
 800173e:	4664      	mov	r4, ip
 8001740:	2240      	movs	r2, #64	; 0x40
 8001742:	1b12      	subs	r2, r2, r4
 8001744:	4644      	mov	r4, r8
 8001746:	4094      	lsls	r4, r2
 8001748:	4321      	orrs	r1, r4
 800174a:	1e4a      	subs	r2, r1, #1
 800174c:	4191      	sbcs	r1, r2
 800174e:	000c      	movs	r4, r1
 8001750:	433c      	orrs	r4, r7
 8001752:	e057      	b.n	8001804 <__aeabi_dadd+0x274>
 8001754:	003a      	movs	r2, r7
 8001756:	430a      	orrs	r2, r1
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x1cc>
 800175a:	e105      	b.n	8001968 <__aeabi_dadd+0x3d8>
 800175c:	0022      	movs	r2, r4
 800175e:	3a01      	subs	r2, #1
 8001760:	2c01      	cmp	r4, #1
 8001762:	d100      	bne.n	8001766 <__aeabi_dadd+0x1d6>
 8001764:	e182      	b.n	8001a6c <__aeabi_dadd+0x4dc>
 8001766:	4c64      	ldr	r4, [pc, #400]	; (80018f8 <__aeabi_dadd+0x368>)
 8001768:	45a4      	cmp	ip, r4
 800176a:	d05b      	beq.n	8001824 <__aeabi_dadd+0x294>
 800176c:	4694      	mov	ip, r2
 800176e:	e741      	b.n	80015f4 <__aeabi_dadd+0x64>
 8001770:	4c63      	ldr	r4, [pc, #396]	; (8001900 <__aeabi_dadd+0x370>)
 8001772:	1c77      	adds	r7, r6, #1
 8001774:	4227      	tst	r7, r4
 8001776:	d000      	beq.n	800177a <__aeabi_dadd+0x1ea>
 8001778:	e0c4      	b.n	8001904 <__aeabi_dadd+0x374>
 800177a:	0004      	movs	r4, r0
 800177c:	431c      	orrs	r4, r3
 800177e:	2e00      	cmp	r6, #0
 8001780:	d000      	beq.n	8001784 <__aeabi_dadd+0x1f4>
 8001782:	e169      	b.n	8001a58 <__aeabi_dadd+0x4c8>
 8001784:	2c00      	cmp	r4, #0
 8001786:	d100      	bne.n	800178a <__aeabi_dadd+0x1fa>
 8001788:	e1bf      	b.n	8001b0a <__aeabi_dadd+0x57a>
 800178a:	4644      	mov	r4, r8
 800178c:	430c      	orrs	r4, r1
 800178e:	d000      	beq.n	8001792 <__aeabi_dadd+0x202>
 8001790:	e1d0      	b.n	8001b34 <__aeabi_dadd+0x5a4>
 8001792:	0742      	lsls	r2, r0, #29
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	4313      	orrs	r3, r2
 8001798:	08c0      	lsrs	r0, r0, #3
 800179a:	e029      	b.n	80017f0 <__aeabi_dadd+0x260>
 800179c:	003a      	movs	r2, r7
 800179e:	430a      	orrs	r2, r1
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dadd+0x214>
 80017a2:	e170      	b.n	8001a86 <__aeabi_dadd+0x4f6>
 80017a4:	4662      	mov	r2, ip
 80017a6:	4664      	mov	r4, ip
 80017a8:	3a01      	subs	r2, #1
 80017aa:	2c01      	cmp	r4, #1
 80017ac:	d100      	bne.n	80017b0 <__aeabi_dadd+0x220>
 80017ae:	e0e0      	b.n	8001972 <__aeabi_dadd+0x3e2>
 80017b0:	4c51      	ldr	r4, [pc, #324]	; (80018f8 <__aeabi_dadd+0x368>)
 80017b2:	45a4      	cmp	ip, r4
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x228>
 80017b6:	e161      	b.n	8001a7c <__aeabi_dadd+0x4ec>
 80017b8:	4694      	mov	ip, r2
 80017ba:	e7b4      	b.n	8001726 <__aeabi_dadd+0x196>
 80017bc:	003a      	movs	r2, r7
 80017be:	391f      	subs	r1, #31
 80017c0:	40ca      	lsrs	r2, r1
 80017c2:	0011      	movs	r1, r2
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d003      	beq.n	80017d0 <__aeabi_dadd+0x240>
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	409f      	lsls	r7, r3
 80017ce:	433c      	orrs	r4, r7
 80017d0:	1e63      	subs	r3, r4, #1
 80017d2:	419c      	sbcs	r4, r3
 80017d4:	2700      	movs	r7, #0
 80017d6:	2600      	movs	r6, #0
 80017d8:	430c      	orrs	r4, r1
 80017da:	0763      	lsls	r3, r4, #29
 80017dc:	d000      	beq.n	80017e0 <__aeabi_dadd+0x250>
 80017de:	e753      	b.n	8001688 <__aeabi_dadd+0xf8>
 80017e0:	46b4      	mov	ip, r6
 80017e2:	08e4      	lsrs	r4, r4, #3
 80017e4:	077b      	lsls	r3, r7, #29
 80017e6:	4323      	orrs	r3, r4
 80017e8:	08f8      	lsrs	r0, r7, #3
 80017ea:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <__aeabi_dadd+0x368>)
 80017ec:	4594      	cmp	ip, r2
 80017ee:	d01d      	beq.n	800182c <__aeabi_dadd+0x29c>
 80017f0:	4662      	mov	r2, ip
 80017f2:	0307      	lsls	r7, r0, #12
 80017f4:	0552      	lsls	r2, r2, #21
 80017f6:	0b3f      	lsrs	r7, r7, #12
 80017f8:	0d52      	lsrs	r2, r2, #21
 80017fa:	e760      	b.n	80016be <__aeabi_dadd+0x12e>
 80017fc:	4644      	mov	r4, r8
 80017fe:	430c      	orrs	r4, r1
 8001800:	1e62      	subs	r2, r4, #1
 8001802:	4194      	sbcs	r4, r2
 8001804:	18e4      	adds	r4, r4, r3
 8001806:	429c      	cmp	r4, r3
 8001808:	419b      	sbcs	r3, r3
 800180a:	425f      	negs	r7, r3
 800180c:	183f      	adds	r7, r7, r0
 800180e:	023b      	lsls	r3, r7, #8
 8001810:	d5e3      	bpl.n	80017da <__aeabi_dadd+0x24a>
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <__aeabi_dadd+0x368>)
 8001814:	3601      	adds	r6, #1
 8001816:	429e      	cmp	r6, r3
 8001818:	d000      	beq.n	800181c <__aeabi_dadd+0x28c>
 800181a:	e0b5      	b.n	8001988 <__aeabi_dadd+0x3f8>
 800181c:	0032      	movs	r2, r6
 800181e:	2700      	movs	r7, #0
 8001820:	2300      	movs	r3, #0
 8001822:	e74c      	b.n	80016be <__aeabi_dadd+0x12e>
 8001824:	0742      	lsls	r2, r0, #29
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	4313      	orrs	r3, r2
 800182a:	08c0      	lsrs	r0, r0, #3
 800182c:	001a      	movs	r2, r3
 800182e:	4302      	orrs	r2, r0
 8001830:	d100      	bne.n	8001834 <__aeabi_dadd+0x2a4>
 8001832:	e1e1      	b.n	8001bf8 <__aeabi_dadd+0x668>
 8001834:	2780      	movs	r7, #128	; 0x80
 8001836:	033f      	lsls	r7, r7, #12
 8001838:	4307      	orrs	r7, r0
 800183a:	033f      	lsls	r7, r7, #12
 800183c:	4a2e      	ldr	r2, [pc, #184]	; (80018f8 <__aeabi_dadd+0x368>)
 800183e:	0b3f      	lsrs	r7, r7, #12
 8001840:	e73d      	b.n	80016be <__aeabi_dadd+0x12e>
 8001842:	0020      	movs	r0, r4
 8001844:	f001 fcd2 	bl	80031ec <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	3118      	adds	r1, #24
 800184c:	291f      	cmp	r1, #31
 800184e:	dc00      	bgt.n	8001852 <__aeabi_dadd+0x2c2>
 8001850:	e6fc      	b.n	800164c <__aeabi_dadd+0xbc>
 8001852:	3808      	subs	r0, #8
 8001854:	4084      	lsls	r4, r0
 8001856:	0027      	movs	r7, r4
 8001858:	2400      	movs	r4, #0
 800185a:	42b1      	cmp	r1, r6
 800185c:	db00      	blt.n	8001860 <__aeabi_dadd+0x2d0>
 800185e:	e6ff      	b.n	8001660 <__aeabi_dadd+0xd0>
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <__aeabi_dadd+0x36c>)
 8001862:	1a76      	subs	r6, r6, r1
 8001864:	4017      	ands	r7, r2
 8001866:	e70d      	b.n	8001684 <__aeabi_dadd+0xf4>
 8001868:	2a00      	cmp	r2, #0
 800186a:	d02f      	beq.n	80018cc <__aeabi_dadd+0x33c>
 800186c:	464a      	mov	r2, r9
 800186e:	1b92      	subs	r2, r2, r6
 8001870:	4694      	mov	ip, r2
 8001872:	2e00      	cmp	r6, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_dadd+0x2e8>
 8001876:	e0ad      	b.n	80019d4 <__aeabi_dadd+0x444>
 8001878:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <__aeabi_dadd+0x368>)
 800187a:	4591      	cmp	r9, r2
 800187c:	d100      	bne.n	8001880 <__aeabi_dadd+0x2f0>
 800187e:	e10f      	b.n	8001aa0 <__aeabi_dadd+0x510>
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	0412      	lsls	r2, r2, #16
 8001884:	4310      	orrs	r0, r2
 8001886:	4662      	mov	r2, ip
 8001888:	2a38      	cmp	r2, #56	; 0x38
 800188a:	dd00      	ble.n	800188e <__aeabi_dadd+0x2fe>
 800188c:	e10f      	b.n	8001aae <__aeabi_dadd+0x51e>
 800188e:	2a1f      	cmp	r2, #31
 8001890:	dd00      	ble.n	8001894 <__aeabi_dadd+0x304>
 8001892:	e180      	b.n	8001b96 <__aeabi_dadd+0x606>
 8001894:	4664      	mov	r4, ip
 8001896:	2220      	movs	r2, #32
 8001898:	001e      	movs	r6, r3
 800189a:	1b12      	subs	r2, r2, r4
 800189c:	4667      	mov	r7, ip
 800189e:	0004      	movs	r4, r0
 80018a0:	4093      	lsls	r3, r2
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40fe      	lsrs	r6, r7
 80018a6:	1e5a      	subs	r2, r3, #1
 80018a8:	4193      	sbcs	r3, r2
 80018aa:	40f8      	lsrs	r0, r7
 80018ac:	4334      	orrs	r4, r6
 80018ae:	431c      	orrs	r4, r3
 80018b0:	4480      	add	r8, r0
 80018b2:	1864      	adds	r4, r4, r1
 80018b4:	428c      	cmp	r4, r1
 80018b6:	41bf      	sbcs	r7, r7
 80018b8:	427f      	negs	r7, r7
 80018ba:	464e      	mov	r6, r9
 80018bc:	4447      	add	r7, r8
 80018be:	e7a6      	b.n	800180e <__aeabi_dadd+0x27e>
 80018c0:	4642      	mov	r2, r8
 80018c2:	430a      	orrs	r2, r1
 80018c4:	0011      	movs	r1, r2
 80018c6:	1e4a      	subs	r2, r1, #1
 80018c8:	4191      	sbcs	r1, r2
 80018ca:	e6ad      	b.n	8001628 <__aeabi_dadd+0x98>
 80018cc:	4c0c      	ldr	r4, [pc, #48]	; (8001900 <__aeabi_dadd+0x370>)
 80018ce:	1c72      	adds	r2, r6, #1
 80018d0:	4222      	tst	r2, r4
 80018d2:	d000      	beq.n	80018d6 <__aeabi_dadd+0x346>
 80018d4:	e0a1      	b.n	8001a1a <__aeabi_dadd+0x48a>
 80018d6:	0002      	movs	r2, r0
 80018d8:	431a      	orrs	r2, r3
 80018da:	2e00      	cmp	r6, #0
 80018dc:	d000      	beq.n	80018e0 <__aeabi_dadd+0x350>
 80018de:	e0fa      	b.n	8001ad6 <__aeabi_dadd+0x546>
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dadd+0x356>
 80018e4:	e145      	b.n	8001b72 <__aeabi_dadd+0x5e2>
 80018e6:	003a      	movs	r2, r7
 80018e8:	430a      	orrs	r2, r1
 80018ea:	d000      	beq.n	80018ee <__aeabi_dadd+0x35e>
 80018ec:	e146      	b.n	8001b7c <__aeabi_dadd+0x5ec>
 80018ee:	0742      	lsls	r2, r0, #29
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	08c0      	lsrs	r0, r0, #3
 80018f6:	e77b      	b.n	80017f0 <__aeabi_dadd+0x260>
 80018f8:	000007ff 	.word	0x000007ff
 80018fc:	ff7fffff 	.word	0xff7fffff
 8001900:	000007fe 	.word	0x000007fe
 8001904:	4647      	mov	r7, r8
 8001906:	1a5c      	subs	r4, r3, r1
 8001908:	1bc2      	subs	r2, r0, r7
 800190a:	42a3      	cmp	r3, r4
 800190c:	41bf      	sbcs	r7, r7
 800190e:	427f      	negs	r7, r7
 8001910:	46b9      	mov	r9, r7
 8001912:	0017      	movs	r7, r2
 8001914:	464a      	mov	r2, r9
 8001916:	1abf      	subs	r7, r7, r2
 8001918:	023a      	lsls	r2, r7, #8
 800191a:	d500      	bpl.n	800191e <__aeabi_dadd+0x38e>
 800191c:	e08d      	b.n	8001a3a <__aeabi_dadd+0x4aa>
 800191e:	0023      	movs	r3, r4
 8001920:	433b      	orrs	r3, r7
 8001922:	d000      	beq.n	8001926 <__aeabi_dadd+0x396>
 8001924:	e68a      	b.n	800163c <__aeabi_dadd+0xac>
 8001926:	2000      	movs	r0, #0
 8001928:	2500      	movs	r5, #0
 800192a:	e761      	b.n	80017f0 <__aeabi_dadd+0x260>
 800192c:	4cb4      	ldr	r4, [pc, #720]	; (8001c00 <__aeabi_dadd+0x670>)
 800192e:	45a1      	cmp	r9, r4
 8001930:	d100      	bne.n	8001934 <__aeabi_dadd+0x3a4>
 8001932:	e0ad      	b.n	8001a90 <__aeabi_dadd+0x500>
 8001934:	2480      	movs	r4, #128	; 0x80
 8001936:	0424      	lsls	r4, r4, #16
 8001938:	4320      	orrs	r0, r4
 800193a:	4664      	mov	r4, ip
 800193c:	2c38      	cmp	r4, #56	; 0x38
 800193e:	dc3d      	bgt.n	80019bc <__aeabi_dadd+0x42c>
 8001940:	4662      	mov	r2, ip
 8001942:	2c1f      	cmp	r4, #31
 8001944:	dd00      	ble.n	8001948 <__aeabi_dadd+0x3b8>
 8001946:	e0b7      	b.n	8001ab8 <__aeabi_dadd+0x528>
 8001948:	2520      	movs	r5, #32
 800194a:	001e      	movs	r6, r3
 800194c:	1b2d      	subs	r5, r5, r4
 800194e:	0004      	movs	r4, r0
 8001950:	40ab      	lsls	r3, r5
 8001952:	40ac      	lsls	r4, r5
 8001954:	40d6      	lsrs	r6, r2
 8001956:	40d0      	lsrs	r0, r2
 8001958:	4642      	mov	r2, r8
 800195a:	1e5d      	subs	r5, r3, #1
 800195c:	41ab      	sbcs	r3, r5
 800195e:	4334      	orrs	r4, r6
 8001960:	1a12      	subs	r2, r2, r0
 8001962:	4690      	mov	r8, r2
 8001964:	4323      	orrs	r3, r4
 8001966:	e02c      	b.n	80019c2 <__aeabi_dadd+0x432>
 8001968:	0742      	lsls	r2, r0, #29
 800196a:	08db      	lsrs	r3, r3, #3
 800196c:	4313      	orrs	r3, r2
 800196e:	08c0      	lsrs	r0, r0, #3
 8001970:	e73b      	b.n	80017ea <__aeabi_dadd+0x25a>
 8001972:	185c      	adds	r4, r3, r1
 8001974:	429c      	cmp	r4, r3
 8001976:	419b      	sbcs	r3, r3
 8001978:	4440      	add	r0, r8
 800197a:	425b      	negs	r3, r3
 800197c:	18c7      	adds	r7, r0, r3
 800197e:	2601      	movs	r6, #1
 8001980:	023b      	lsls	r3, r7, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dadd+0x3f6>
 8001984:	e729      	b.n	80017da <__aeabi_dadd+0x24a>
 8001986:	2602      	movs	r6, #2
 8001988:	4a9e      	ldr	r2, [pc, #632]	; (8001c04 <__aeabi_dadd+0x674>)
 800198a:	0863      	lsrs	r3, r4, #1
 800198c:	4017      	ands	r7, r2
 800198e:	2201      	movs	r2, #1
 8001990:	4014      	ands	r4, r2
 8001992:	431c      	orrs	r4, r3
 8001994:	07fb      	lsls	r3, r7, #31
 8001996:	431c      	orrs	r4, r3
 8001998:	087f      	lsrs	r7, r7, #1
 800199a:	e673      	b.n	8001684 <__aeabi_dadd+0xf4>
 800199c:	4644      	mov	r4, r8
 800199e:	3a20      	subs	r2, #32
 80019a0:	40d4      	lsrs	r4, r2
 80019a2:	4662      	mov	r2, ip
 80019a4:	2a20      	cmp	r2, #32
 80019a6:	d005      	beq.n	80019b4 <__aeabi_dadd+0x424>
 80019a8:	4667      	mov	r7, ip
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	1bd2      	subs	r2, r2, r7
 80019ae:	4647      	mov	r7, r8
 80019b0:	4097      	lsls	r7, r2
 80019b2:	4339      	orrs	r1, r7
 80019b4:	1e4a      	subs	r2, r1, #1
 80019b6:	4191      	sbcs	r1, r2
 80019b8:	4321      	orrs	r1, r4
 80019ba:	e635      	b.n	8001628 <__aeabi_dadd+0x98>
 80019bc:	4303      	orrs	r3, r0
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	4183      	sbcs	r3, r0
 80019c2:	1acc      	subs	r4, r1, r3
 80019c4:	42a1      	cmp	r1, r4
 80019c6:	41bf      	sbcs	r7, r7
 80019c8:	4643      	mov	r3, r8
 80019ca:	427f      	negs	r7, r7
 80019cc:	4655      	mov	r5, sl
 80019ce:	464e      	mov	r6, r9
 80019d0:	1bdf      	subs	r7, r3, r7
 80019d2:	e62e      	b.n	8001632 <__aeabi_dadd+0xa2>
 80019d4:	0002      	movs	r2, r0
 80019d6:	431a      	orrs	r2, r3
 80019d8:	d100      	bne.n	80019dc <__aeabi_dadd+0x44c>
 80019da:	e0bd      	b.n	8001b58 <__aeabi_dadd+0x5c8>
 80019dc:	4662      	mov	r2, ip
 80019de:	4664      	mov	r4, ip
 80019e0:	3a01      	subs	r2, #1
 80019e2:	2c01      	cmp	r4, #1
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dadd+0x458>
 80019e6:	e0e5      	b.n	8001bb4 <__aeabi_dadd+0x624>
 80019e8:	4c85      	ldr	r4, [pc, #532]	; (8001c00 <__aeabi_dadd+0x670>)
 80019ea:	45a4      	cmp	ip, r4
 80019ec:	d058      	beq.n	8001aa0 <__aeabi_dadd+0x510>
 80019ee:	4694      	mov	ip, r2
 80019f0:	e749      	b.n	8001886 <__aeabi_dadd+0x2f6>
 80019f2:	4664      	mov	r4, ip
 80019f4:	2220      	movs	r2, #32
 80019f6:	1b12      	subs	r2, r2, r4
 80019f8:	4644      	mov	r4, r8
 80019fa:	4094      	lsls	r4, r2
 80019fc:	000f      	movs	r7, r1
 80019fe:	46a1      	mov	r9, r4
 8001a00:	4664      	mov	r4, ip
 8001a02:	4091      	lsls	r1, r2
 8001a04:	40e7      	lsrs	r7, r4
 8001a06:	464c      	mov	r4, r9
 8001a08:	1e4a      	subs	r2, r1, #1
 8001a0a:	4191      	sbcs	r1, r2
 8001a0c:	433c      	orrs	r4, r7
 8001a0e:	4642      	mov	r2, r8
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4661      	mov	r1, ip
 8001a14:	40ca      	lsrs	r2, r1
 8001a16:	1880      	adds	r0, r0, r2
 8001a18:	e6f4      	b.n	8001804 <__aeabi_dadd+0x274>
 8001a1a:	4c79      	ldr	r4, [pc, #484]	; (8001c00 <__aeabi_dadd+0x670>)
 8001a1c:	42a2      	cmp	r2, r4
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dadd+0x492>
 8001a20:	e6fd      	b.n	800181e <__aeabi_dadd+0x28e>
 8001a22:	1859      	adds	r1, r3, r1
 8001a24:	4299      	cmp	r1, r3
 8001a26:	419b      	sbcs	r3, r3
 8001a28:	4440      	add	r0, r8
 8001a2a:	425f      	negs	r7, r3
 8001a2c:	19c7      	adds	r7, r0, r7
 8001a2e:	07fc      	lsls	r4, r7, #31
 8001a30:	0849      	lsrs	r1, r1, #1
 8001a32:	0016      	movs	r6, r2
 8001a34:	430c      	orrs	r4, r1
 8001a36:	087f      	lsrs	r7, r7, #1
 8001a38:	e6cf      	b.n	80017da <__aeabi_dadd+0x24a>
 8001a3a:	1acc      	subs	r4, r1, r3
 8001a3c:	42a1      	cmp	r1, r4
 8001a3e:	41bf      	sbcs	r7, r7
 8001a40:	4643      	mov	r3, r8
 8001a42:	427f      	negs	r7, r7
 8001a44:	1a18      	subs	r0, r3, r0
 8001a46:	4655      	mov	r5, sl
 8001a48:	1bc7      	subs	r7, r0, r7
 8001a4a:	e5f7      	b.n	800163c <__aeabi_dadd+0xac>
 8001a4c:	08c9      	lsrs	r1, r1, #3
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	4655      	mov	r5, sl
 8001a52:	430b      	orrs	r3, r1
 8001a54:	08f8      	lsrs	r0, r7, #3
 8001a56:	e6c8      	b.n	80017ea <__aeabi_dadd+0x25a>
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d000      	beq.n	8001a5e <__aeabi_dadd+0x4ce>
 8001a5c:	e081      	b.n	8001b62 <__aeabi_dadd+0x5d2>
 8001a5e:	4643      	mov	r3, r8
 8001a60:	430b      	orrs	r3, r1
 8001a62:	d115      	bne.n	8001a90 <__aeabi_dadd+0x500>
 8001a64:	2080      	movs	r0, #128	; 0x80
 8001a66:	2500      	movs	r5, #0
 8001a68:	0300      	lsls	r0, r0, #12
 8001a6a:	e6e3      	b.n	8001834 <__aeabi_dadd+0x2a4>
 8001a6c:	1a5c      	subs	r4, r3, r1
 8001a6e:	42a3      	cmp	r3, r4
 8001a70:	419b      	sbcs	r3, r3
 8001a72:	1bc7      	subs	r7, r0, r7
 8001a74:	425b      	negs	r3, r3
 8001a76:	2601      	movs	r6, #1
 8001a78:	1aff      	subs	r7, r7, r3
 8001a7a:	e5da      	b.n	8001632 <__aeabi_dadd+0xa2>
 8001a7c:	0742      	lsls	r2, r0, #29
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	08c0      	lsrs	r0, r0, #3
 8001a84:	e6d2      	b.n	800182c <__aeabi_dadd+0x29c>
 8001a86:	0742      	lsls	r2, r0, #29
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	08c0      	lsrs	r0, r0, #3
 8001a8e:	e6ac      	b.n	80017ea <__aeabi_dadd+0x25a>
 8001a90:	4643      	mov	r3, r8
 8001a92:	4642      	mov	r2, r8
 8001a94:	08c9      	lsrs	r1, r1, #3
 8001a96:	075b      	lsls	r3, r3, #29
 8001a98:	4655      	mov	r5, sl
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	08d0      	lsrs	r0, r2, #3
 8001a9e:	e6c5      	b.n	800182c <__aeabi_dadd+0x29c>
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	4642      	mov	r2, r8
 8001aa4:	075b      	lsls	r3, r3, #29
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	08d0      	lsrs	r0, r2, #3
 8001aac:	e6be      	b.n	800182c <__aeabi_dadd+0x29c>
 8001aae:	4303      	orrs	r3, r0
 8001ab0:	001c      	movs	r4, r3
 8001ab2:	1e63      	subs	r3, r4, #1
 8001ab4:	419c      	sbcs	r4, r3
 8001ab6:	e6fc      	b.n	80018b2 <__aeabi_dadd+0x322>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	3c20      	subs	r4, #32
 8001abc:	40e2      	lsrs	r2, r4
 8001abe:	0014      	movs	r4, r2
 8001ac0:	4662      	mov	r2, ip
 8001ac2:	2a20      	cmp	r2, #32
 8001ac4:	d003      	beq.n	8001ace <__aeabi_dadd+0x53e>
 8001ac6:	2540      	movs	r5, #64	; 0x40
 8001ac8:	1aad      	subs	r5, r5, r2
 8001aca:	40a8      	lsls	r0, r5
 8001acc:	4303      	orrs	r3, r0
 8001ace:	1e58      	subs	r0, r3, #1
 8001ad0:	4183      	sbcs	r3, r0
 8001ad2:	4323      	orrs	r3, r4
 8001ad4:	e775      	b.n	80019c2 <__aeabi_dadd+0x432>
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	d0e2      	beq.n	8001aa0 <__aeabi_dadd+0x510>
 8001ada:	003a      	movs	r2, r7
 8001adc:	430a      	orrs	r2, r1
 8001ade:	d0cd      	beq.n	8001a7c <__aeabi_dadd+0x4ec>
 8001ae0:	0742      	lsls	r2, r0, #29
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	08c0      	lsrs	r0, r0, #3
 8001aea:	0312      	lsls	r2, r2, #12
 8001aec:	4210      	tst	r0, r2
 8001aee:	d006      	beq.n	8001afe <__aeabi_dadd+0x56e>
 8001af0:	08fc      	lsrs	r4, r7, #3
 8001af2:	4214      	tst	r4, r2
 8001af4:	d103      	bne.n	8001afe <__aeabi_dadd+0x56e>
 8001af6:	0020      	movs	r0, r4
 8001af8:	08cb      	lsrs	r3, r1, #3
 8001afa:	077a      	lsls	r2, r7, #29
 8001afc:	4313      	orrs	r3, r2
 8001afe:	0f5a      	lsrs	r2, r3, #29
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	0752      	lsls	r2, r2, #29
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	e690      	b.n	800182c <__aeabi_dadd+0x29c>
 8001b0a:	4643      	mov	r3, r8
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dadd+0x582>
 8001b10:	e709      	b.n	8001926 <__aeabi_dadd+0x396>
 8001b12:	4643      	mov	r3, r8
 8001b14:	4642      	mov	r2, r8
 8001b16:	08c9      	lsrs	r1, r1, #3
 8001b18:	075b      	lsls	r3, r3, #29
 8001b1a:	4655      	mov	r5, sl
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	08d0      	lsrs	r0, r2, #3
 8001b20:	e666      	b.n	80017f0 <__aeabi_dadd+0x260>
 8001b22:	1acc      	subs	r4, r1, r3
 8001b24:	42a1      	cmp	r1, r4
 8001b26:	4189      	sbcs	r1, r1
 8001b28:	1a3f      	subs	r7, r7, r0
 8001b2a:	4249      	negs	r1, r1
 8001b2c:	4655      	mov	r5, sl
 8001b2e:	2601      	movs	r6, #1
 8001b30:	1a7f      	subs	r7, r7, r1
 8001b32:	e57e      	b.n	8001632 <__aeabi_dadd+0xa2>
 8001b34:	4642      	mov	r2, r8
 8001b36:	1a5c      	subs	r4, r3, r1
 8001b38:	1a87      	subs	r7, r0, r2
 8001b3a:	42a3      	cmp	r3, r4
 8001b3c:	4192      	sbcs	r2, r2
 8001b3e:	4252      	negs	r2, r2
 8001b40:	1abf      	subs	r7, r7, r2
 8001b42:	023a      	lsls	r2, r7, #8
 8001b44:	d53d      	bpl.n	8001bc2 <__aeabi_dadd+0x632>
 8001b46:	1acc      	subs	r4, r1, r3
 8001b48:	42a1      	cmp	r1, r4
 8001b4a:	4189      	sbcs	r1, r1
 8001b4c:	4643      	mov	r3, r8
 8001b4e:	4249      	negs	r1, r1
 8001b50:	1a1f      	subs	r7, r3, r0
 8001b52:	4655      	mov	r5, sl
 8001b54:	1a7f      	subs	r7, r7, r1
 8001b56:	e595      	b.n	8001684 <__aeabi_dadd+0xf4>
 8001b58:	077b      	lsls	r3, r7, #29
 8001b5a:	08c9      	lsrs	r1, r1, #3
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	08f8      	lsrs	r0, r7, #3
 8001b60:	e643      	b.n	80017ea <__aeabi_dadd+0x25a>
 8001b62:	4644      	mov	r4, r8
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	430c      	orrs	r4, r1
 8001b68:	d130      	bne.n	8001bcc <__aeabi_dadd+0x63c>
 8001b6a:	0742      	lsls	r2, r0, #29
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	08c0      	lsrs	r0, r0, #3
 8001b70:	e65c      	b.n	800182c <__aeabi_dadd+0x29c>
 8001b72:	077b      	lsls	r3, r7, #29
 8001b74:	08c9      	lsrs	r1, r1, #3
 8001b76:	430b      	orrs	r3, r1
 8001b78:	08f8      	lsrs	r0, r7, #3
 8001b7a:	e639      	b.n	80017f0 <__aeabi_dadd+0x260>
 8001b7c:	185c      	adds	r4, r3, r1
 8001b7e:	429c      	cmp	r4, r3
 8001b80:	419b      	sbcs	r3, r3
 8001b82:	4440      	add	r0, r8
 8001b84:	425b      	negs	r3, r3
 8001b86:	18c7      	adds	r7, r0, r3
 8001b88:	023b      	lsls	r3, r7, #8
 8001b8a:	d400      	bmi.n	8001b8e <__aeabi_dadd+0x5fe>
 8001b8c:	e625      	b.n	80017da <__aeabi_dadd+0x24a>
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <__aeabi_dadd+0x674>)
 8001b90:	2601      	movs	r6, #1
 8001b92:	401f      	ands	r7, r3
 8001b94:	e621      	b.n	80017da <__aeabi_dadd+0x24a>
 8001b96:	0004      	movs	r4, r0
 8001b98:	3a20      	subs	r2, #32
 8001b9a:	40d4      	lsrs	r4, r2
 8001b9c:	4662      	mov	r2, ip
 8001b9e:	2a20      	cmp	r2, #32
 8001ba0:	d004      	beq.n	8001bac <__aeabi_dadd+0x61c>
 8001ba2:	2240      	movs	r2, #64	; 0x40
 8001ba4:	4666      	mov	r6, ip
 8001ba6:	1b92      	subs	r2, r2, r6
 8001ba8:	4090      	lsls	r0, r2
 8001baa:	4303      	orrs	r3, r0
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	4193      	sbcs	r3, r2
 8001bb0:	431c      	orrs	r4, r3
 8001bb2:	e67e      	b.n	80018b2 <__aeabi_dadd+0x322>
 8001bb4:	185c      	adds	r4, r3, r1
 8001bb6:	428c      	cmp	r4, r1
 8001bb8:	4189      	sbcs	r1, r1
 8001bba:	4440      	add	r0, r8
 8001bbc:	4249      	negs	r1, r1
 8001bbe:	1847      	adds	r7, r0, r1
 8001bc0:	e6dd      	b.n	800197e <__aeabi_dadd+0x3ee>
 8001bc2:	0023      	movs	r3, r4
 8001bc4:	433b      	orrs	r3, r7
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dadd+0x63a>
 8001bc8:	e6ad      	b.n	8001926 <__aeabi_dadd+0x396>
 8001bca:	e606      	b.n	80017da <__aeabi_dadd+0x24a>
 8001bcc:	0744      	lsls	r4, r0, #29
 8001bce:	4323      	orrs	r3, r4
 8001bd0:	2480      	movs	r4, #128	; 0x80
 8001bd2:	08c0      	lsrs	r0, r0, #3
 8001bd4:	0324      	lsls	r4, r4, #12
 8001bd6:	4220      	tst	r0, r4
 8001bd8:	d008      	beq.n	8001bec <__aeabi_dadd+0x65c>
 8001bda:	4642      	mov	r2, r8
 8001bdc:	08d6      	lsrs	r6, r2, #3
 8001bde:	4226      	tst	r6, r4
 8001be0:	d104      	bne.n	8001bec <__aeabi_dadd+0x65c>
 8001be2:	4655      	mov	r5, sl
 8001be4:	0030      	movs	r0, r6
 8001be6:	08cb      	lsrs	r3, r1, #3
 8001be8:	0751      	lsls	r1, r2, #29
 8001bea:	430b      	orrs	r3, r1
 8001bec:	0f5a      	lsrs	r2, r3, #29
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	08db      	lsrs	r3, r3, #3
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	e619      	b.n	800182c <__aeabi_dadd+0x29c>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4a01      	ldr	r2, [pc, #4]	; (8001c00 <__aeabi_dadd+0x670>)
 8001bfc:	001f      	movs	r7, r3
 8001bfe:	e55e      	b.n	80016be <__aeabi_dadd+0x12e>
 8001c00:	000007ff 	.word	0x000007ff
 8001c04:	ff7fffff 	.word	0xff7fffff

08001c08 <__aeabi_ddiv>:
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	4657      	mov	r7, sl
 8001c0c:	464e      	mov	r6, r9
 8001c0e:	4645      	mov	r5, r8
 8001c10:	46de      	mov	lr, fp
 8001c12:	b5e0      	push	{r5, r6, r7, lr}
 8001c14:	4681      	mov	r9, r0
 8001c16:	0005      	movs	r5, r0
 8001c18:	030c      	lsls	r4, r1, #12
 8001c1a:	0048      	lsls	r0, r1, #1
 8001c1c:	4692      	mov	sl, r2
 8001c1e:	001f      	movs	r7, r3
 8001c20:	b085      	sub	sp, #20
 8001c22:	0b24      	lsrs	r4, r4, #12
 8001c24:	0d40      	lsrs	r0, r0, #21
 8001c26:	0fce      	lsrs	r6, r1, #31
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_ddiv+0x26>
 8001c2c:	e156      	b.n	8001edc <__aeabi_ddiv+0x2d4>
 8001c2e:	4bd4      	ldr	r3, [pc, #848]	; (8001f80 <__aeabi_ddiv+0x378>)
 8001c30:	4298      	cmp	r0, r3
 8001c32:	d100      	bne.n	8001c36 <__aeabi_ddiv+0x2e>
 8001c34:	e172      	b.n	8001f1c <__aeabi_ddiv+0x314>
 8001c36:	0f6b      	lsrs	r3, r5, #29
 8001c38:	00e4      	lsls	r4, r4, #3
 8001c3a:	431c      	orrs	r4, r3
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	041b      	lsls	r3, r3, #16
 8001c40:	4323      	orrs	r3, r4
 8001c42:	4698      	mov	r8, r3
 8001c44:	4bcf      	ldr	r3, [pc, #828]	; (8001f84 <__aeabi_ddiv+0x37c>)
 8001c46:	00ed      	lsls	r5, r5, #3
 8001c48:	469b      	mov	fp, r3
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	4483      	add	fp, r0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	033c      	lsls	r4, r7, #12
 8001c54:	007b      	lsls	r3, r7, #1
 8001c56:	4650      	mov	r0, sl
 8001c58:	0b24      	lsrs	r4, r4, #12
 8001c5a:	0d5b      	lsrs	r3, r3, #21
 8001c5c:	0fff      	lsrs	r7, r7, #31
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d100      	bne.n	8001c64 <__aeabi_ddiv+0x5c>
 8001c62:	e11f      	b.n	8001ea4 <__aeabi_ddiv+0x29c>
 8001c64:	4ac6      	ldr	r2, [pc, #792]	; (8001f80 <__aeabi_ddiv+0x378>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d100      	bne.n	8001c6c <__aeabi_ddiv+0x64>
 8001c6a:	e162      	b.n	8001f32 <__aeabi_ddiv+0x32a>
 8001c6c:	49c5      	ldr	r1, [pc, #788]	; (8001f84 <__aeabi_ddiv+0x37c>)
 8001c6e:	0f42      	lsrs	r2, r0, #29
 8001c70:	468c      	mov	ip, r1
 8001c72:	00e4      	lsls	r4, r4, #3
 8001c74:	4659      	mov	r1, fp
 8001c76:	4314      	orrs	r4, r2
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	4463      	add	r3, ip
 8001c7c:	0412      	lsls	r2, r2, #16
 8001c7e:	1acb      	subs	r3, r1, r3
 8001c80:	4314      	orrs	r4, r2
 8001c82:	469b      	mov	fp, r3
 8001c84:	00c2      	lsls	r2, r0, #3
 8001c86:	2000      	movs	r0, #0
 8001c88:	0033      	movs	r3, r6
 8001c8a:	407b      	eors	r3, r7
 8001c8c:	469a      	mov	sl, r3
 8001c8e:	464b      	mov	r3, r9
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d827      	bhi.n	8001ce4 <__aeabi_ddiv+0xdc>
 8001c94:	49bc      	ldr	r1, [pc, #752]	; (8001f88 <__aeabi_ddiv+0x380>)
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	58cb      	ldr	r3, [r1, r3]
 8001c9a:	469f      	mov	pc, r3
 8001c9c:	46b2      	mov	sl, r6
 8001c9e:	9b00      	ldr	r3, [sp, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d016      	beq.n	8001cd2 <__aeabi_ddiv+0xca>
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d100      	bne.n	8001caa <__aeabi_ddiv+0xa2>
 8001ca8:	e28e      	b.n	80021c8 <__aeabi_ddiv+0x5c0>
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_ddiv+0xa8>
 8001cae:	e0d9      	b.n	8001e64 <__aeabi_ddiv+0x25c>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	2500      	movs	r5, #0
 8001cb6:	4652      	mov	r2, sl
 8001cb8:	051b      	lsls	r3, r3, #20
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	07d2      	lsls	r2, r2, #31
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	0028      	movs	r0, r5
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	b005      	add	sp, #20
 8001cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc8:	46bb      	mov	fp, r7
 8001cca:	46b2      	mov	sl, r6
 8001ccc:	46a9      	mov	r9, r5
 8001cce:	46a0      	mov	r8, r4
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd2:	2400      	movs	r4, #0
 8001cd4:	2500      	movs	r5, #0
 8001cd6:	4baa      	ldr	r3, [pc, #680]	; (8001f80 <__aeabi_ddiv+0x378>)
 8001cd8:	e7ed      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8001cda:	46ba      	mov	sl, r7
 8001cdc:	46a0      	mov	r8, r4
 8001cde:	0015      	movs	r5, r2
 8001ce0:	9000      	str	r0, [sp, #0]
 8001ce2:	e7dc      	b.n	8001c9e <__aeabi_ddiv+0x96>
 8001ce4:	4544      	cmp	r4, r8
 8001ce6:	d200      	bcs.n	8001cea <__aeabi_ddiv+0xe2>
 8001ce8:	e1c7      	b.n	800207a <__aeabi_ddiv+0x472>
 8001cea:	d100      	bne.n	8001cee <__aeabi_ddiv+0xe6>
 8001cec:	e1c2      	b.n	8002074 <__aeabi_ddiv+0x46c>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	425b      	negs	r3, r3
 8001cf2:	469c      	mov	ip, r3
 8001cf4:	002e      	movs	r6, r5
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	44e3      	add	fp, ip
 8001cfc:	0223      	lsls	r3, r4, #8
 8001cfe:	0e14      	lsrs	r4, r2, #24
 8001d00:	431c      	orrs	r4, r3
 8001d02:	0c1b      	lsrs	r3, r3, #16
 8001d04:	4699      	mov	r9, r3
 8001d06:	0423      	lsls	r3, r4, #16
 8001d08:	0c1f      	lsrs	r7, r3, #16
 8001d0a:	0212      	lsls	r2, r2, #8
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	9200      	str	r2, [sp, #0]
 8001d10:	9701      	str	r7, [sp, #4]
 8001d12:	f7fe fa9b 	bl	800024c <__aeabi_uidivmod>
 8001d16:	0002      	movs	r2, r0
 8001d18:	437a      	muls	r2, r7
 8001d1a:	040b      	lsls	r3, r1, #16
 8001d1c:	0c31      	lsrs	r1, r6, #16
 8001d1e:	4680      	mov	r8, r0
 8001d20:	4319      	orrs	r1, r3
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d907      	bls.n	8001d36 <__aeabi_ddiv+0x12e>
 8001d26:	2301      	movs	r3, #1
 8001d28:	425b      	negs	r3, r3
 8001d2a:	469c      	mov	ip, r3
 8001d2c:	1909      	adds	r1, r1, r4
 8001d2e:	44e0      	add	r8, ip
 8001d30:	428c      	cmp	r4, r1
 8001d32:	d800      	bhi.n	8001d36 <__aeabi_ddiv+0x12e>
 8001d34:	e207      	b.n	8002146 <__aeabi_ddiv+0x53e>
 8001d36:	1a88      	subs	r0, r1, r2
 8001d38:	4649      	mov	r1, r9
 8001d3a:	f7fe fa87 	bl	800024c <__aeabi_uidivmod>
 8001d3e:	0409      	lsls	r1, r1, #16
 8001d40:	468c      	mov	ip, r1
 8001d42:	0431      	lsls	r1, r6, #16
 8001d44:	4666      	mov	r6, ip
 8001d46:	9a01      	ldr	r2, [sp, #4]
 8001d48:	0c09      	lsrs	r1, r1, #16
 8001d4a:	4342      	muls	r2, r0
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	4331      	orrs	r1, r6
 8001d50:	428a      	cmp	r2, r1
 8001d52:	d904      	bls.n	8001d5e <__aeabi_ddiv+0x156>
 8001d54:	1909      	adds	r1, r1, r4
 8001d56:	3b01      	subs	r3, #1
 8001d58:	428c      	cmp	r4, r1
 8001d5a:	d800      	bhi.n	8001d5e <__aeabi_ddiv+0x156>
 8001d5c:	e1ed      	b.n	800213a <__aeabi_ddiv+0x532>
 8001d5e:	1a88      	subs	r0, r1, r2
 8001d60:	4642      	mov	r2, r8
 8001d62:	0412      	lsls	r2, r2, #16
 8001d64:	431a      	orrs	r2, r3
 8001d66:	4690      	mov	r8, r2
 8001d68:	4641      	mov	r1, r8
 8001d6a:	9b00      	ldr	r3, [sp, #0]
 8001d6c:	040e      	lsls	r6, r1, #16
 8001d6e:	0c1b      	lsrs	r3, r3, #16
 8001d70:	001f      	movs	r7, r3
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	9b00      	ldr	r3, [sp, #0]
 8001d76:	0c36      	lsrs	r6, r6, #16
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	0c19      	lsrs	r1, r3, #16
 8001d7c:	000b      	movs	r3, r1
 8001d7e:	4373      	muls	r3, r6
 8001d80:	0c12      	lsrs	r2, r2, #16
 8001d82:	437e      	muls	r6, r7
 8001d84:	9103      	str	r1, [sp, #12]
 8001d86:	4351      	muls	r1, r2
 8001d88:	437a      	muls	r2, r7
 8001d8a:	0c1f      	lsrs	r7, r3, #16
 8001d8c:	46bc      	mov	ip, r7
 8001d8e:	1876      	adds	r6, r6, r1
 8001d90:	4466      	add	r6, ip
 8001d92:	42b1      	cmp	r1, r6
 8001d94:	d903      	bls.n	8001d9e <__aeabi_ddiv+0x196>
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	0249      	lsls	r1, r1, #9
 8001d9a:	468c      	mov	ip, r1
 8001d9c:	4462      	add	r2, ip
 8001d9e:	0c31      	lsrs	r1, r6, #16
 8001da0:	188a      	adds	r2, r1, r2
 8001da2:	0431      	lsls	r1, r6, #16
 8001da4:	041e      	lsls	r6, r3, #16
 8001da6:	0c36      	lsrs	r6, r6, #16
 8001da8:	198e      	adds	r6, r1, r6
 8001daa:	4290      	cmp	r0, r2
 8001dac:	d302      	bcc.n	8001db4 <__aeabi_ddiv+0x1ac>
 8001dae:	d112      	bne.n	8001dd6 <__aeabi_ddiv+0x1ce>
 8001db0:	42b5      	cmp	r5, r6
 8001db2:	d210      	bcs.n	8001dd6 <__aeabi_ddiv+0x1ce>
 8001db4:	4643      	mov	r3, r8
 8001db6:	1e59      	subs	r1, r3, #1
 8001db8:	9b00      	ldr	r3, [sp, #0]
 8001dba:	469c      	mov	ip, r3
 8001dbc:	4465      	add	r5, ip
 8001dbe:	001f      	movs	r7, r3
 8001dc0:	429d      	cmp	r5, r3
 8001dc2:	419b      	sbcs	r3, r3
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	191b      	adds	r3, r3, r4
 8001dc8:	18c0      	adds	r0, r0, r3
 8001dca:	4284      	cmp	r4, r0
 8001dcc:	d200      	bcs.n	8001dd0 <__aeabi_ddiv+0x1c8>
 8001dce:	e1a0      	b.n	8002112 <__aeabi_ddiv+0x50a>
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x1cc>
 8001dd2:	e19b      	b.n	800210c <__aeabi_ddiv+0x504>
 8001dd4:	4688      	mov	r8, r1
 8001dd6:	1bae      	subs	r6, r5, r6
 8001dd8:	42b5      	cmp	r5, r6
 8001dda:	41ad      	sbcs	r5, r5
 8001ddc:	1a80      	subs	r0, r0, r2
 8001dde:	426d      	negs	r5, r5
 8001de0:	1b40      	subs	r0, r0, r5
 8001de2:	4284      	cmp	r4, r0
 8001de4:	d100      	bne.n	8001de8 <__aeabi_ddiv+0x1e0>
 8001de6:	e1d5      	b.n	8002194 <__aeabi_ddiv+0x58c>
 8001de8:	4649      	mov	r1, r9
 8001dea:	f7fe fa2f 	bl	800024c <__aeabi_uidivmod>
 8001dee:	9a01      	ldr	r2, [sp, #4]
 8001df0:	040b      	lsls	r3, r1, #16
 8001df2:	4342      	muls	r2, r0
 8001df4:	0c31      	lsrs	r1, r6, #16
 8001df6:	0005      	movs	r5, r0
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	428a      	cmp	r2, r1
 8001dfc:	d900      	bls.n	8001e00 <__aeabi_ddiv+0x1f8>
 8001dfe:	e16c      	b.n	80020da <__aeabi_ddiv+0x4d2>
 8001e00:	1a88      	subs	r0, r1, r2
 8001e02:	4649      	mov	r1, r9
 8001e04:	f7fe fa22 	bl	800024c <__aeabi_uidivmod>
 8001e08:	9a01      	ldr	r2, [sp, #4]
 8001e0a:	0436      	lsls	r6, r6, #16
 8001e0c:	4342      	muls	r2, r0
 8001e0e:	0409      	lsls	r1, r1, #16
 8001e10:	0c36      	lsrs	r6, r6, #16
 8001e12:	0003      	movs	r3, r0
 8001e14:	430e      	orrs	r6, r1
 8001e16:	42b2      	cmp	r2, r6
 8001e18:	d900      	bls.n	8001e1c <__aeabi_ddiv+0x214>
 8001e1a:	e153      	b.n	80020c4 <__aeabi_ddiv+0x4bc>
 8001e1c:	9803      	ldr	r0, [sp, #12]
 8001e1e:	1ab6      	subs	r6, r6, r2
 8001e20:	0002      	movs	r2, r0
 8001e22:	042d      	lsls	r5, r5, #16
 8001e24:	431d      	orrs	r5, r3
 8001e26:	9f02      	ldr	r7, [sp, #8]
 8001e28:	042b      	lsls	r3, r5, #16
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	435a      	muls	r2, r3
 8001e2e:	437b      	muls	r3, r7
 8001e30:	469c      	mov	ip, r3
 8001e32:	0c29      	lsrs	r1, r5, #16
 8001e34:	4348      	muls	r0, r1
 8001e36:	0c13      	lsrs	r3, r2, #16
 8001e38:	4484      	add	ip, r0
 8001e3a:	4463      	add	r3, ip
 8001e3c:	4379      	muls	r1, r7
 8001e3e:	4298      	cmp	r0, r3
 8001e40:	d903      	bls.n	8001e4a <__aeabi_ddiv+0x242>
 8001e42:	2080      	movs	r0, #128	; 0x80
 8001e44:	0240      	lsls	r0, r0, #9
 8001e46:	4684      	mov	ip, r0
 8001e48:	4461      	add	r1, ip
 8001e4a:	0c18      	lsrs	r0, r3, #16
 8001e4c:	0412      	lsls	r2, r2, #16
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	0c12      	lsrs	r2, r2, #16
 8001e52:	1841      	adds	r1, r0, r1
 8001e54:	189b      	adds	r3, r3, r2
 8001e56:	428e      	cmp	r6, r1
 8001e58:	d200      	bcs.n	8001e5c <__aeabi_ddiv+0x254>
 8001e5a:	e0ff      	b.n	800205c <__aeabi_ddiv+0x454>
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_ddiv+0x258>
 8001e5e:	e0fa      	b.n	8002056 <__aeabi_ddiv+0x44e>
 8001e60:	2301      	movs	r3, #1
 8001e62:	431d      	orrs	r5, r3
 8001e64:	4a49      	ldr	r2, [pc, #292]	; (8001f8c <__aeabi_ddiv+0x384>)
 8001e66:	445a      	add	r2, fp
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	dc00      	bgt.n	8001e6e <__aeabi_ddiv+0x266>
 8001e6c:	e0aa      	b.n	8001fc4 <__aeabi_ddiv+0x3bc>
 8001e6e:	076b      	lsls	r3, r5, #29
 8001e70:	d000      	beq.n	8001e74 <__aeabi_ddiv+0x26c>
 8001e72:	e13d      	b.n	80020f0 <__aeabi_ddiv+0x4e8>
 8001e74:	08ed      	lsrs	r5, r5, #3
 8001e76:	4643      	mov	r3, r8
 8001e78:	01db      	lsls	r3, r3, #7
 8001e7a:	d506      	bpl.n	8001e8a <__aeabi_ddiv+0x282>
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <__aeabi_ddiv+0x388>)
 8001e80:	401a      	ands	r2, r3
 8001e82:	4690      	mov	r8, r2
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	00d2      	lsls	r2, r2, #3
 8001e88:	445a      	add	r2, fp
 8001e8a:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <__aeabi_ddiv+0x38c>)
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dd00      	ble.n	8001e92 <__aeabi_ddiv+0x28a>
 8001e90:	e71f      	b.n	8001cd2 <__aeabi_ddiv+0xca>
 8001e92:	4643      	mov	r3, r8
 8001e94:	075b      	lsls	r3, r3, #29
 8001e96:	431d      	orrs	r5, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	0552      	lsls	r2, r2, #21
 8001e9c:	025c      	lsls	r4, r3, #9
 8001e9e:	0b24      	lsrs	r4, r4, #12
 8001ea0:	0d53      	lsrs	r3, r2, #21
 8001ea2:	e708      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8001ea4:	4652      	mov	r2, sl
 8001ea6:	4322      	orrs	r2, r4
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x2a4>
 8001eaa:	e07b      	b.n	8001fa4 <__aeabi_ddiv+0x39c>
 8001eac:	2c00      	cmp	r4, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_ddiv+0x2aa>
 8001eb0:	e0fa      	b.n	80020a8 <__aeabi_ddiv+0x4a0>
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	f001 f99a 	bl	80031ec <__clzsi2>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	3a0b      	subs	r2, #11
 8001ebc:	231d      	movs	r3, #29
 8001ebe:	0001      	movs	r1, r0
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	4652      	mov	r2, sl
 8001ec4:	3908      	subs	r1, #8
 8001ec6:	40da      	lsrs	r2, r3
 8001ec8:	408c      	lsls	r4, r1
 8001eca:	4314      	orrs	r4, r2
 8001ecc:	4652      	mov	r2, sl
 8001ece:	408a      	lsls	r2, r1
 8001ed0:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <__aeabi_ddiv+0x390>)
 8001ed2:	4458      	add	r0, fp
 8001ed4:	469b      	mov	fp, r3
 8001ed6:	4483      	add	fp, r0
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e6d5      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001edc:	464b      	mov	r3, r9
 8001ede:	4323      	orrs	r3, r4
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	d044      	beq.n	8001f6e <__aeabi_ddiv+0x366>
 8001ee4:	2c00      	cmp	r4, #0
 8001ee6:	d100      	bne.n	8001eea <__aeabi_ddiv+0x2e2>
 8001ee8:	e0ce      	b.n	8002088 <__aeabi_ddiv+0x480>
 8001eea:	0020      	movs	r0, r4
 8001eec:	f001 f97e 	bl	80031ec <__clzsi2>
 8001ef0:	0001      	movs	r1, r0
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	390b      	subs	r1, #11
 8001ef6:	231d      	movs	r3, #29
 8001ef8:	1a5b      	subs	r3, r3, r1
 8001efa:	4649      	mov	r1, r9
 8001efc:	0010      	movs	r0, r2
 8001efe:	40d9      	lsrs	r1, r3
 8001f00:	3808      	subs	r0, #8
 8001f02:	4084      	lsls	r4, r0
 8001f04:	000b      	movs	r3, r1
 8001f06:	464d      	mov	r5, r9
 8001f08:	4323      	orrs	r3, r4
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	4085      	lsls	r5, r0
 8001f0e:	4823      	ldr	r0, [pc, #140]	; (8001f9c <__aeabi_ddiv+0x394>)
 8001f10:	1a83      	subs	r3, r0, r2
 8001f12:	469b      	mov	fp, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	4699      	mov	r9, r3
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	e69a      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f1c:	464b      	mov	r3, r9
 8001f1e:	4323      	orrs	r3, r4
 8001f20:	4698      	mov	r8, r3
 8001f22:	d11d      	bne.n	8001f60 <__aeabi_ddiv+0x358>
 8001f24:	2308      	movs	r3, #8
 8001f26:	4699      	mov	r9, r3
 8001f28:	3b06      	subs	r3, #6
 8001f2a:	2500      	movs	r5, #0
 8001f2c:	4683      	mov	fp, r0
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	e68f      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f32:	4652      	mov	r2, sl
 8001f34:	4322      	orrs	r2, r4
 8001f36:	d109      	bne.n	8001f4c <__aeabi_ddiv+0x344>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	4319      	orrs	r1, r3
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <__aeabi_ddiv+0x398>)
 8001f40:	4689      	mov	r9, r1
 8001f42:	469c      	mov	ip, r3
 8001f44:	2400      	movs	r4, #0
 8001f46:	2002      	movs	r0, #2
 8001f48:	44e3      	add	fp, ip
 8001f4a:	e69d      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	464a      	mov	r2, r9
 8001f50:	431a      	orrs	r2, r3
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <__aeabi_ddiv+0x398>)
 8001f54:	4691      	mov	r9, r2
 8001f56:	469c      	mov	ip, r3
 8001f58:	4652      	mov	r2, sl
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	44e3      	add	fp, ip
 8001f5e:	e693      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001f60:	230c      	movs	r3, #12
 8001f62:	4699      	mov	r9, r3
 8001f64:	3b09      	subs	r3, #9
 8001f66:	46a0      	mov	r8, r4
 8001f68:	4683      	mov	fp, r0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	e671      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	4699      	mov	r9, r3
 8001f72:	2300      	movs	r3, #0
 8001f74:	469b      	mov	fp, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	2500      	movs	r5, #0
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	e669      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff
 8001f84:	fffffc01 	.word	0xfffffc01
 8001f88:	0800b4f8 	.word	0x0800b4f8
 8001f8c:	000003ff 	.word	0x000003ff
 8001f90:	feffffff 	.word	0xfeffffff
 8001f94:	000007fe 	.word	0x000007fe
 8001f98:	000003f3 	.word	0x000003f3
 8001f9c:	fffffc0d 	.word	0xfffffc0d
 8001fa0:	fffff801 	.word	0xfffff801
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4319      	orrs	r1, r3
 8001faa:	4689      	mov	r9, r1
 8001fac:	2400      	movs	r4, #0
 8001fae:	2001      	movs	r0, #1
 8001fb0:	e66a      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2480      	movs	r4, #128	; 0x80
 8001fb6:	469a      	mov	sl, r3
 8001fb8:	2500      	movs	r5, #0
 8001fba:	4b8a      	ldr	r3, [pc, #552]	; (80021e4 <__aeabi_ddiv+0x5dc>)
 8001fbc:	0324      	lsls	r4, r4, #12
 8001fbe:	e67a      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8001fc0:	2501      	movs	r5, #1
 8001fc2:	426d      	negs	r5, r5
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	2b38      	cmp	r3, #56	; 0x38
 8001fca:	dd00      	ble.n	8001fce <__aeabi_ddiv+0x3c6>
 8001fcc:	e670      	b.n	8001cb0 <__aeabi_ddiv+0xa8>
 8001fce:	2b1f      	cmp	r3, #31
 8001fd0:	dc00      	bgt.n	8001fd4 <__aeabi_ddiv+0x3cc>
 8001fd2:	e0bf      	b.n	8002154 <__aeabi_ddiv+0x54c>
 8001fd4:	211f      	movs	r1, #31
 8001fd6:	4249      	negs	r1, r1
 8001fd8:	1a8a      	subs	r2, r1, r2
 8001fda:	4641      	mov	r1, r8
 8001fdc:	40d1      	lsrs	r1, r2
 8001fde:	000a      	movs	r2, r1
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d004      	beq.n	8001fee <__aeabi_ddiv+0x3e6>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <__aeabi_ddiv+0x5e0>)
 8001fe8:	445b      	add	r3, fp
 8001fea:	4099      	lsls	r1, r3
 8001fec:	430d      	orrs	r5, r1
 8001fee:	1e6b      	subs	r3, r5, #1
 8001ff0:	419d      	sbcs	r5, r3
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	432a      	orrs	r2, r5
 8001ff6:	001d      	movs	r5, r3
 8001ff8:	2400      	movs	r4, #0
 8001ffa:	4015      	ands	r5, r2
 8001ffc:	4213      	tst	r3, r2
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0x3fa>
 8002000:	e0d4      	b.n	80021ac <__aeabi_ddiv+0x5a4>
 8002002:	210f      	movs	r1, #15
 8002004:	2300      	movs	r3, #0
 8002006:	4011      	ands	r1, r2
 8002008:	2904      	cmp	r1, #4
 800200a:	d100      	bne.n	800200e <__aeabi_ddiv+0x406>
 800200c:	e0cb      	b.n	80021a6 <__aeabi_ddiv+0x59e>
 800200e:	1d11      	adds	r1, r2, #4
 8002010:	4291      	cmp	r1, r2
 8002012:	4192      	sbcs	r2, r2
 8002014:	4252      	negs	r2, r2
 8002016:	189b      	adds	r3, r3, r2
 8002018:	000a      	movs	r2, r1
 800201a:	0219      	lsls	r1, r3, #8
 800201c:	d400      	bmi.n	8002020 <__aeabi_ddiv+0x418>
 800201e:	e0c2      	b.n	80021a6 <__aeabi_ddiv+0x59e>
 8002020:	2301      	movs	r3, #1
 8002022:	2400      	movs	r4, #0
 8002024:	2500      	movs	r5, #0
 8002026:	e646      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	4641      	mov	r1, r8
 800202c:	031b      	lsls	r3, r3, #12
 800202e:	4219      	tst	r1, r3
 8002030:	d008      	beq.n	8002044 <__aeabi_ddiv+0x43c>
 8002032:	421c      	tst	r4, r3
 8002034:	d106      	bne.n	8002044 <__aeabi_ddiv+0x43c>
 8002036:	431c      	orrs	r4, r3
 8002038:	0324      	lsls	r4, r4, #12
 800203a:	46ba      	mov	sl, r7
 800203c:	0015      	movs	r5, r2
 800203e:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <__aeabi_ddiv+0x5dc>)
 8002040:	0b24      	lsrs	r4, r4, #12
 8002042:	e638      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8002044:	2480      	movs	r4, #128	; 0x80
 8002046:	4643      	mov	r3, r8
 8002048:	0324      	lsls	r4, r4, #12
 800204a:	431c      	orrs	r4, r3
 800204c:	0324      	lsls	r4, r4, #12
 800204e:	46b2      	mov	sl, r6
 8002050:	4b64      	ldr	r3, [pc, #400]	; (80021e4 <__aeabi_ddiv+0x5dc>)
 8002052:	0b24      	lsrs	r4, r4, #12
 8002054:	e62f      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d100      	bne.n	800205c <__aeabi_ddiv+0x454>
 800205a:	e703      	b.n	8001e64 <__aeabi_ddiv+0x25c>
 800205c:	19a6      	adds	r6, r4, r6
 800205e:	1e68      	subs	r0, r5, #1
 8002060:	42a6      	cmp	r6, r4
 8002062:	d200      	bcs.n	8002066 <__aeabi_ddiv+0x45e>
 8002064:	e08d      	b.n	8002182 <__aeabi_ddiv+0x57a>
 8002066:	428e      	cmp	r6, r1
 8002068:	d200      	bcs.n	800206c <__aeabi_ddiv+0x464>
 800206a:	e0a3      	b.n	80021b4 <__aeabi_ddiv+0x5ac>
 800206c:	d100      	bne.n	8002070 <__aeabi_ddiv+0x468>
 800206e:	e0b3      	b.n	80021d8 <__aeabi_ddiv+0x5d0>
 8002070:	0005      	movs	r5, r0
 8002072:	e6f5      	b.n	8001e60 <__aeabi_ddiv+0x258>
 8002074:	42aa      	cmp	r2, r5
 8002076:	d900      	bls.n	800207a <__aeabi_ddiv+0x472>
 8002078:	e639      	b.n	8001cee <__aeabi_ddiv+0xe6>
 800207a:	4643      	mov	r3, r8
 800207c:	07de      	lsls	r6, r3, #31
 800207e:	0858      	lsrs	r0, r3, #1
 8002080:	086b      	lsrs	r3, r5, #1
 8002082:	431e      	orrs	r6, r3
 8002084:	07ed      	lsls	r5, r5, #31
 8002086:	e639      	b.n	8001cfc <__aeabi_ddiv+0xf4>
 8002088:	4648      	mov	r0, r9
 800208a:	f001 f8af 	bl	80031ec <__clzsi2>
 800208e:	0001      	movs	r1, r0
 8002090:	0002      	movs	r2, r0
 8002092:	3115      	adds	r1, #21
 8002094:	3220      	adds	r2, #32
 8002096:	291c      	cmp	r1, #28
 8002098:	dc00      	bgt.n	800209c <__aeabi_ddiv+0x494>
 800209a:	e72c      	b.n	8001ef6 <__aeabi_ddiv+0x2ee>
 800209c:	464b      	mov	r3, r9
 800209e:	3808      	subs	r0, #8
 80020a0:	4083      	lsls	r3, r0
 80020a2:	2500      	movs	r5, #0
 80020a4:	4698      	mov	r8, r3
 80020a6:	e732      	b.n	8001f0e <__aeabi_ddiv+0x306>
 80020a8:	f001 f8a0 	bl	80031ec <__clzsi2>
 80020ac:	0003      	movs	r3, r0
 80020ae:	001a      	movs	r2, r3
 80020b0:	3215      	adds	r2, #21
 80020b2:	3020      	adds	r0, #32
 80020b4:	2a1c      	cmp	r2, #28
 80020b6:	dc00      	bgt.n	80020ba <__aeabi_ddiv+0x4b2>
 80020b8:	e700      	b.n	8001ebc <__aeabi_ddiv+0x2b4>
 80020ba:	4654      	mov	r4, sl
 80020bc:	3b08      	subs	r3, #8
 80020be:	2200      	movs	r2, #0
 80020c0:	409c      	lsls	r4, r3
 80020c2:	e705      	b.n	8001ed0 <__aeabi_ddiv+0x2c8>
 80020c4:	1936      	adds	r6, r6, r4
 80020c6:	3b01      	subs	r3, #1
 80020c8:	42b4      	cmp	r4, r6
 80020ca:	d900      	bls.n	80020ce <__aeabi_ddiv+0x4c6>
 80020cc:	e6a6      	b.n	8001e1c <__aeabi_ddiv+0x214>
 80020ce:	42b2      	cmp	r2, r6
 80020d0:	d800      	bhi.n	80020d4 <__aeabi_ddiv+0x4cc>
 80020d2:	e6a3      	b.n	8001e1c <__aeabi_ddiv+0x214>
 80020d4:	1e83      	subs	r3, r0, #2
 80020d6:	1936      	adds	r6, r6, r4
 80020d8:	e6a0      	b.n	8001e1c <__aeabi_ddiv+0x214>
 80020da:	1909      	adds	r1, r1, r4
 80020dc:	3d01      	subs	r5, #1
 80020de:	428c      	cmp	r4, r1
 80020e0:	d900      	bls.n	80020e4 <__aeabi_ddiv+0x4dc>
 80020e2:	e68d      	b.n	8001e00 <__aeabi_ddiv+0x1f8>
 80020e4:	428a      	cmp	r2, r1
 80020e6:	d800      	bhi.n	80020ea <__aeabi_ddiv+0x4e2>
 80020e8:	e68a      	b.n	8001e00 <__aeabi_ddiv+0x1f8>
 80020ea:	1e85      	subs	r5, r0, #2
 80020ec:	1909      	adds	r1, r1, r4
 80020ee:	e687      	b.n	8001e00 <__aeabi_ddiv+0x1f8>
 80020f0:	230f      	movs	r3, #15
 80020f2:	402b      	ands	r3, r5
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d100      	bne.n	80020fa <__aeabi_ddiv+0x4f2>
 80020f8:	e6bc      	b.n	8001e74 <__aeabi_ddiv+0x26c>
 80020fa:	2305      	movs	r3, #5
 80020fc:	425b      	negs	r3, r3
 80020fe:	42ab      	cmp	r3, r5
 8002100:	419b      	sbcs	r3, r3
 8002102:	3504      	adds	r5, #4
 8002104:	425b      	negs	r3, r3
 8002106:	08ed      	lsrs	r5, r5, #3
 8002108:	4498      	add	r8, r3
 800210a:	e6b4      	b.n	8001e76 <__aeabi_ddiv+0x26e>
 800210c:	42af      	cmp	r7, r5
 800210e:	d900      	bls.n	8002112 <__aeabi_ddiv+0x50a>
 8002110:	e660      	b.n	8001dd4 <__aeabi_ddiv+0x1cc>
 8002112:	4282      	cmp	r2, r0
 8002114:	d804      	bhi.n	8002120 <__aeabi_ddiv+0x518>
 8002116:	d000      	beq.n	800211a <__aeabi_ddiv+0x512>
 8002118:	e65c      	b.n	8001dd4 <__aeabi_ddiv+0x1cc>
 800211a:	42ae      	cmp	r6, r5
 800211c:	d800      	bhi.n	8002120 <__aeabi_ddiv+0x518>
 800211e:	e659      	b.n	8001dd4 <__aeabi_ddiv+0x1cc>
 8002120:	2302      	movs	r3, #2
 8002122:	425b      	negs	r3, r3
 8002124:	469c      	mov	ip, r3
 8002126:	9b00      	ldr	r3, [sp, #0]
 8002128:	44e0      	add	r8, ip
 800212a:	469c      	mov	ip, r3
 800212c:	4465      	add	r5, ip
 800212e:	429d      	cmp	r5, r3
 8002130:	419b      	sbcs	r3, r3
 8002132:	425b      	negs	r3, r3
 8002134:	191b      	adds	r3, r3, r4
 8002136:	18c0      	adds	r0, r0, r3
 8002138:	e64d      	b.n	8001dd6 <__aeabi_ddiv+0x1ce>
 800213a:	428a      	cmp	r2, r1
 800213c:	d800      	bhi.n	8002140 <__aeabi_ddiv+0x538>
 800213e:	e60e      	b.n	8001d5e <__aeabi_ddiv+0x156>
 8002140:	1e83      	subs	r3, r0, #2
 8002142:	1909      	adds	r1, r1, r4
 8002144:	e60b      	b.n	8001d5e <__aeabi_ddiv+0x156>
 8002146:	428a      	cmp	r2, r1
 8002148:	d800      	bhi.n	800214c <__aeabi_ddiv+0x544>
 800214a:	e5f4      	b.n	8001d36 <__aeabi_ddiv+0x12e>
 800214c:	1e83      	subs	r3, r0, #2
 800214e:	4698      	mov	r8, r3
 8002150:	1909      	adds	r1, r1, r4
 8002152:	e5f0      	b.n	8001d36 <__aeabi_ddiv+0x12e>
 8002154:	4925      	ldr	r1, [pc, #148]	; (80021ec <__aeabi_ddiv+0x5e4>)
 8002156:	0028      	movs	r0, r5
 8002158:	4459      	add	r1, fp
 800215a:	408d      	lsls	r5, r1
 800215c:	4642      	mov	r2, r8
 800215e:	408a      	lsls	r2, r1
 8002160:	1e69      	subs	r1, r5, #1
 8002162:	418d      	sbcs	r5, r1
 8002164:	4641      	mov	r1, r8
 8002166:	40d8      	lsrs	r0, r3
 8002168:	40d9      	lsrs	r1, r3
 800216a:	4302      	orrs	r2, r0
 800216c:	432a      	orrs	r2, r5
 800216e:	000b      	movs	r3, r1
 8002170:	0751      	lsls	r1, r2, #29
 8002172:	d100      	bne.n	8002176 <__aeabi_ddiv+0x56e>
 8002174:	e751      	b.n	800201a <__aeabi_ddiv+0x412>
 8002176:	210f      	movs	r1, #15
 8002178:	4011      	ands	r1, r2
 800217a:	2904      	cmp	r1, #4
 800217c:	d000      	beq.n	8002180 <__aeabi_ddiv+0x578>
 800217e:	e746      	b.n	800200e <__aeabi_ddiv+0x406>
 8002180:	e74b      	b.n	800201a <__aeabi_ddiv+0x412>
 8002182:	0005      	movs	r5, r0
 8002184:	428e      	cmp	r6, r1
 8002186:	d000      	beq.n	800218a <__aeabi_ddiv+0x582>
 8002188:	e66a      	b.n	8001e60 <__aeabi_ddiv+0x258>
 800218a:	9a00      	ldr	r2, [sp, #0]
 800218c:	4293      	cmp	r3, r2
 800218e:	d000      	beq.n	8002192 <__aeabi_ddiv+0x58a>
 8002190:	e666      	b.n	8001e60 <__aeabi_ddiv+0x258>
 8002192:	e667      	b.n	8001e64 <__aeabi_ddiv+0x25c>
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <__aeabi_ddiv+0x5e8>)
 8002196:	445a      	add	r2, fp
 8002198:	2a00      	cmp	r2, #0
 800219a:	dc00      	bgt.n	800219e <__aeabi_ddiv+0x596>
 800219c:	e710      	b.n	8001fc0 <__aeabi_ddiv+0x3b8>
 800219e:	2301      	movs	r3, #1
 80021a0:	2500      	movs	r5, #0
 80021a2:	4498      	add	r8, r3
 80021a4:	e667      	b.n	8001e76 <__aeabi_ddiv+0x26e>
 80021a6:	075d      	lsls	r5, r3, #29
 80021a8:	025b      	lsls	r3, r3, #9
 80021aa:	0b1c      	lsrs	r4, r3, #12
 80021ac:	08d2      	lsrs	r2, r2, #3
 80021ae:	2300      	movs	r3, #0
 80021b0:	4315      	orrs	r5, r2
 80021b2:	e580      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 80021b4:	9800      	ldr	r0, [sp, #0]
 80021b6:	3d02      	subs	r5, #2
 80021b8:	0042      	lsls	r2, r0, #1
 80021ba:	4282      	cmp	r2, r0
 80021bc:	41bf      	sbcs	r7, r7
 80021be:	427f      	negs	r7, r7
 80021c0:	193c      	adds	r4, r7, r4
 80021c2:	1936      	adds	r6, r6, r4
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	e7dd      	b.n	8002184 <__aeabi_ddiv+0x57c>
 80021c8:	2480      	movs	r4, #128	; 0x80
 80021ca:	4643      	mov	r3, r8
 80021cc:	0324      	lsls	r4, r4, #12
 80021ce:	431c      	orrs	r4, r3
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__aeabi_ddiv+0x5dc>)
 80021d4:	0b24      	lsrs	r4, r4, #12
 80021d6:	e56e      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 80021d8:	9a00      	ldr	r2, [sp, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3ea      	bcc.n	80021b4 <__aeabi_ddiv+0x5ac>
 80021de:	0005      	movs	r5, r0
 80021e0:	e7d3      	b.n	800218a <__aeabi_ddiv+0x582>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff
 80021e8:	0000043e 	.word	0x0000043e
 80021ec:	0000041e 	.word	0x0000041e
 80021f0:	000003ff 	.word	0x000003ff

080021f4 <__eqdf2>:
 80021f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f6:	464e      	mov	r6, r9
 80021f8:	4645      	mov	r5, r8
 80021fa:	46de      	mov	lr, fp
 80021fc:	4657      	mov	r7, sl
 80021fe:	4690      	mov	r8, r2
 8002200:	b5e0      	push	{r5, r6, r7, lr}
 8002202:	0017      	movs	r7, r2
 8002204:	031a      	lsls	r2, r3, #12
 8002206:	0b12      	lsrs	r2, r2, #12
 8002208:	0005      	movs	r5, r0
 800220a:	4684      	mov	ip, r0
 800220c:	4819      	ldr	r0, [pc, #100]	; (8002274 <__eqdf2+0x80>)
 800220e:	030e      	lsls	r6, r1, #12
 8002210:	004c      	lsls	r4, r1, #1
 8002212:	4691      	mov	r9, r2
 8002214:	005a      	lsls	r2, r3, #1
 8002216:	0fdb      	lsrs	r3, r3, #31
 8002218:	469b      	mov	fp, r3
 800221a:	0b36      	lsrs	r6, r6, #12
 800221c:	0d64      	lsrs	r4, r4, #21
 800221e:	0fc9      	lsrs	r1, r1, #31
 8002220:	0d52      	lsrs	r2, r2, #21
 8002222:	4284      	cmp	r4, r0
 8002224:	d019      	beq.n	800225a <__eqdf2+0x66>
 8002226:	4282      	cmp	r2, r0
 8002228:	d010      	beq.n	800224c <__eqdf2+0x58>
 800222a:	2001      	movs	r0, #1
 800222c:	4294      	cmp	r4, r2
 800222e:	d10e      	bne.n	800224e <__eqdf2+0x5a>
 8002230:	454e      	cmp	r6, r9
 8002232:	d10c      	bne.n	800224e <__eqdf2+0x5a>
 8002234:	2001      	movs	r0, #1
 8002236:	45c4      	cmp	ip, r8
 8002238:	d109      	bne.n	800224e <__eqdf2+0x5a>
 800223a:	4559      	cmp	r1, fp
 800223c:	d017      	beq.n	800226e <__eqdf2+0x7a>
 800223e:	2c00      	cmp	r4, #0
 8002240:	d105      	bne.n	800224e <__eqdf2+0x5a>
 8002242:	0030      	movs	r0, r6
 8002244:	4328      	orrs	r0, r5
 8002246:	1e43      	subs	r3, r0, #1
 8002248:	4198      	sbcs	r0, r3
 800224a:	e000      	b.n	800224e <__eqdf2+0x5a>
 800224c:	2001      	movs	r0, #1
 800224e:	bcf0      	pop	{r4, r5, r6, r7}
 8002250:	46bb      	mov	fp, r7
 8002252:	46b2      	mov	sl, r6
 8002254:	46a9      	mov	r9, r5
 8002256:	46a0      	mov	r8, r4
 8002258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225a:	0033      	movs	r3, r6
 800225c:	2001      	movs	r0, #1
 800225e:	432b      	orrs	r3, r5
 8002260:	d1f5      	bne.n	800224e <__eqdf2+0x5a>
 8002262:	42a2      	cmp	r2, r4
 8002264:	d1f3      	bne.n	800224e <__eqdf2+0x5a>
 8002266:	464b      	mov	r3, r9
 8002268:	433b      	orrs	r3, r7
 800226a:	d1f0      	bne.n	800224e <__eqdf2+0x5a>
 800226c:	e7e2      	b.n	8002234 <__eqdf2+0x40>
 800226e:	2000      	movs	r0, #0
 8002270:	e7ed      	b.n	800224e <__eqdf2+0x5a>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	000007ff 	.word	0x000007ff

08002278 <__gedf2>:
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	4647      	mov	r7, r8
 800227c:	46ce      	mov	lr, r9
 800227e:	0004      	movs	r4, r0
 8002280:	0018      	movs	r0, r3
 8002282:	0016      	movs	r6, r2
 8002284:	031b      	lsls	r3, r3, #12
 8002286:	0b1b      	lsrs	r3, r3, #12
 8002288:	4d2d      	ldr	r5, [pc, #180]	; (8002340 <__gedf2+0xc8>)
 800228a:	004a      	lsls	r2, r1, #1
 800228c:	4699      	mov	r9, r3
 800228e:	b580      	push	{r7, lr}
 8002290:	0043      	lsls	r3, r0, #1
 8002292:	030f      	lsls	r7, r1, #12
 8002294:	46a4      	mov	ip, r4
 8002296:	46b0      	mov	r8, r6
 8002298:	0b3f      	lsrs	r7, r7, #12
 800229a:	0d52      	lsrs	r2, r2, #21
 800229c:	0fc9      	lsrs	r1, r1, #31
 800229e:	0d5b      	lsrs	r3, r3, #21
 80022a0:	0fc0      	lsrs	r0, r0, #31
 80022a2:	42aa      	cmp	r2, r5
 80022a4:	d021      	beq.n	80022ea <__gedf2+0x72>
 80022a6:	42ab      	cmp	r3, r5
 80022a8:	d013      	beq.n	80022d2 <__gedf2+0x5a>
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d122      	bne.n	80022f4 <__gedf2+0x7c>
 80022ae:	433c      	orrs	r4, r7
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <__gedf2+0x42>
 80022b4:	464d      	mov	r5, r9
 80022b6:	432e      	orrs	r6, r5
 80022b8:	d022      	beq.n	8002300 <__gedf2+0x88>
 80022ba:	2c00      	cmp	r4, #0
 80022bc:	d010      	beq.n	80022e0 <__gedf2+0x68>
 80022be:	4281      	cmp	r1, r0
 80022c0:	d022      	beq.n	8002308 <__gedf2+0x90>
 80022c2:	2002      	movs	r0, #2
 80022c4:	3901      	subs	r1, #1
 80022c6:	4008      	ands	r0, r1
 80022c8:	3801      	subs	r0, #1
 80022ca:	bcc0      	pop	{r6, r7}
 80022cc:	46b9      	mov	r9, r7
 80022ce:	46b0      	mov	r8, r6
 80022d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d2:	464d      	mov	r5, r9
 80022d4:	432e      	orrs	r6, r5
 80022d6:	d129      	bne.n	800232c <__gedf2+0xb4>
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d1f0      	bne.n	80022be <__gedf2+0x46>
 80022dc:	433c      	orrs	r4, r7
 80022de:	d1ee      	bne.n	80022be <__gedf2+0x46>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d1f2      	bne.n	80022ca <__gedf2+0x52>
 80022e4:	2001      	movs	r0, #1
 80022e6:	4240      	negs	r0, r0
 80022e8:	e7ef      	b.n	80022ca <__gedf2+0x52>
 80022ea:	003d      	movs	r5, r7
 80022ec:	4325      	orrs	r5, r4
 80022ee:	d11d      	bne.n	800232c <__gedf2+0xb4>
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d0ee      	beq.n	80022d2 <__gedf2+0x5a>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e2      	bne.n	80022be <__gedf2+0x46>
 80022f8:	464c      	mov	r4, r9
 80022fa:	4326      	orrs	r6, r4
 80022fc:	d1df      	bne.n	80022be <__gedf2+0x46>
 80022fe:	e7e0      	b.n	80022c2 <__gedf2+0x4a>
 8002300:	2000      	movs	r0, #0
 8002302:	2c00      	cmp	r4, #0
 8002304:	d0e1      	beq.n	80022ca <__gedf2+0x52>
 8002306:	e7dc      	b.n	80022c2 <__gedf2+0x4a>
 8002308:	429a      	cmp	r2, r3
 800230a:	dc0a      	bgt.n	8002322 <__gedf2+0xaa>
 800230c:	dbe8      	blt.n	80022e0 <__gedf2+0x68>
 800230e:	454f      	cmp	r7, r9
 8002310:	d8d7      	bhi.n	80022c2 <__gedf2+0x4a>
 8002312:	d00e      	beq.n	8002332 <__gedf2+0xba>
 8002314:	2000      	movs	r0, #0
 8002316:	454f      	cmp	r7, r9
 8002318:	d2d7      	bcs.n	80022ca <__gedf2+0x52>
 800231a:	2900      	cmp	r1, #0
 800231c:	d0e2      	beq.n	80022e4 <__gedf2+0x6c>
 800231e:	0008      	movs	r0, r1
 8002320:	e7d3      	b.n	80022ca <__gedf2+0x52>
 8002322:	4243      	negs	r3, r0
 8002324:	4158      	adcs	r0, r3
 8002326:	0040      	lsls	r0, r0, #1
 8002328:	3801      	subs	r0, #1
 800232a:	e7ce      	b.n	80022ca <__gedf2+0x52>
 800232c:	2002      	movs	r0, #2
 800232e:	4240      	negs	r0, r0
 8002330:	e7cb      	b.n	80022ca <__gedf2+0x52>
 8002332:	45c4      	cmp	ip, r8
 8002334:	d8c5      	bhi.n	80022c2 <__gedf2+0x4a>
 8002336:	2000      	movs	r0, #0
 8002338:	45c4      	cmp	ip, r8
 800233a:	d2c6      	bcs.n	80022ca <__gedf2+0x52>
 800233c:	e7ed      	b.n	800231a <__gedf2+0xa2>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	000007ff 	.word	0x000007ff

08002344 <__ledf2>:
 8002344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002346:	4647      	mov	r7, r8
 8002348:	46ce      	mov	lr, r9
 800234a:	0004      	movs	r4, r0
 800234c:	0018      	movs	r0, r3
 800234e:	0016      	movs	r6, r2
 8002350:	031b      	lsls	r3, r3, #12
 8002352:	0b1b      	lsrs	r3, r3, #12
 8002354:	4d2c      	ldr	r5, [pc, #176]	; (8002408 <__ledf2+0xc4>)
 8002356:	004a      	lsls	r2, r1, #1
 8002358:	4699      	mov	r9, r3
 800235a:	b580      	push	{r7, lr}
 800235c:	0043      	lsls	r3, r0, #1
 800235e:	030f      	lsls	r7, r1, #12
 8002360:	46a4      	mov	ip, r4
 8002362:	46b0      	mov	r8, r6
 8002364:	0b3f      	lsrs	r7, r7, #12
 8002366:	0d52      	lsrs	r2, r2, #21
 8002368:	0fc9      	lsrs	r1, r1, #31
 800236a:	0d5b      	lsrs	r3, r3, #21
 800236c:	0fc0      	lsrs	r0, r0, #31
 800236e:	42aa      	cmp	r2, r5
 8002370:	d00d      	beq.n	800238e <__ledf2+0x4a>
 8002372:	42ab      	cmp	r3, r5
 8002374:	d010      	beq.n	8002398 <__ledf2+0x54>
 8002376:	2a00      	cmp	r2, #0
 8002378:	d127      	bne.n	80023ca <__ledf2+0x86>
 800237a:	433c      	orrs	r4, r7
 800237c:	2b00      	cmp	r3, #0
 800237e:	d111      	bne.n	80023a4 <__ledf2+0x60>
 8002380:	464d      	mov	r5, r9
 8002382:	432e      	orrs	r6, r5
 8002384:	d10e      	bne.n	80023a4 <__ledf2+0x60>
 8002386:	2000      	movs	r0, #0
 8002388:	2c00      	cmp	r4, #0
 800238a:	d015      	beq.n	80023b8 <__ledf2+0x74>
 800238c:	e00e      	b.n	80023ac <__ledf2+0x68>
 800238e:	003d      	movs	r5, r7
 8002390:	4325      	orrs	r5, r4
 8002392:	d110      	bne.n	80023b6 <__ledf2+0x72>
 8002394:	4293      	cmp	r3, r2
 8002396:	d118      	bne.n	80023ca <__ledf2+0x86>
 8002398:	464d      	mov	r5, r9
 800239a:	432e      	orrs	r6, r5
 800239c:	d10b      	bne.n	80023b6 <__ledf2+0x72>
 800239e:	2a00      	cmp	r2, #0
 80023a0:	d102      	bne.n	80023a8 <__ledf2+0x64>
 80023a2:	433c      	orrs	r4, r7
 80023a4:	2c00      	cmp	r4, #0
 80023a6:	d00b      	beq.n	80023c0 <__ledf2+0x7c>
 80023a8:	4281      	cmp	r1, r0
 80023aa:	d014      	beq.n	80023d6 <__ledf2+0x92>
 80023ac:	2002      	movs	r0, #2
 80023ae:	3901      	subs	r1, #1
 80023b0:	4008      	ands	r0, r1
 80023b2:	3801      	subs	r0, #1
 80023b4:	e000      	b.n	80023b8 <__ledf2+0x74>
 80023b6:	2002      	movs	r0, #2
 80023b8:	bcc0      	pop	{r6, r7}
 80023ba:	46b9      	mov	r9, r7
 80023bc:	46b0      	mov	r8, r6
 80023be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d1f9      	bne.n	80023b8 <__ledf2+0x74>
 80023c4:	2001      	movs	r0, #1
 80023c6:	4240      	negs	r0, r0
 80023c8:	e7f6      	b.n	80023b8 <__ledf2+0x74>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ec      	bne.n	80023a8 <__ledf2+0x64>
 80023ce:	464c      	mov	r4, r9
 80023d0:	4326      	orrs	r6, r4
 80023d2:	d1e9      	bne.n	80023a8 <__ledf2+0x64>
 80023d4:	e7ea      	b.n	80023ac <__ledf2+0x68>
 80023d6:	429a      	cmp	r2, r3
 80023d8:	dd04      	ble.n	80023e4 <__ledf2+0xa0>
 80023da:	4243      	negs	r3, r0
 80023dc:	4158      	adcs	r0, r3
 80023de:	0040      	lsls	r0, r0, #1
 80023e0:	3801      	subs	r0, #1
 80023e2:	e7e9      	b.n	80023b8 <__ledf2+0x74>
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbeb      	blt.n	80023c0 <__ledf2+0x7c>
 80023e8:	454f      	cmp	r7, r9
 80023ea:	d8df      	bhi.n	80023ac <__ledf2+0x68>
 80023ec:	d006      	beq.n	80023fc <__ledf2+0xb8>
 80023ee:	2000      	movs	r0, #0
 80023f0:	454f      	cmp	r7, r9
 80023f2:	d2e1      	bcs.n	80023b8 <__ledf2+0x74>
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d0e5      	beq.n	80023c4 <__ledf2+0x80>
 80023f8:	0008      	movs	r0, r1
 80023fa:	e7dd      	b.n	80023b8 <__ledf2+0x74>
 80023fc:	45c4      	cmp	ip, r8
 80023fe:	d8d5      	bhi.n	80023ac <__ledf2+0x68>
 8002400:	2000      	movs	r0, #0
 8002402:	45c4      	cmp	ip, r8
 8002404:	d2d8      	bcs.n	80023b8 <__ledf2+0x74>
 8002406:	e7f5      	b.n	80023f4 <__ledf2+0xb0>
 8002408:	000007ff 	.word	0x000007ff

0800240c <__aeabi_dmul>:
 800240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240e:	4657      	mov	r7, sl
 8002410:	464e      	mov	r6, r9
 8002412:	4645      	mov	r5, r8
 8002414:	46de      	mov	lr, fp
 8002416:	b5e0      	push	{r5, r6, r7, lr}
 8002418:	4698      	mov	r8, r3
 800241a:	030c      	lsls	r4, r1, #12
 800241c:	004b      	lsls	r3, r1, #1
 800241e:	0006      	movs	r6, r0
 8002420:	4692      	mov	sl, r2
 8002422:	b087      	sub	sp, #28
 8002424:	0b24      	lsrs	r4, r4, #12
 8002426:	0d5b      	lsrs	r3, r3, #21
 8002428:	0fcf      	lsrs	r7, r1, #31
 800242a:	2b00      	cmp	r3, #0
 800242c:	d100      	bne.n	8002430 <__aeabi_dmul+0x24>
 800242e:	e15c      	b.n	80026ea <__aeabi_dmul+0x2de>
 8002430:	4ad9      	ldr	r2, [pc, #868]	; (8002798 <__aeabi_dmul+0x38c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d100      	bne.n	8002438 <__aeabi_dmul+0x2c>
 8002436:	e175      	b.n	8002724 <__aeabi_dmul+0x318>
 8002438:	0f42      	lsrs	r2, r0, #29
 800243a:	00e4      	lsls	r4, r4, #3
 800243c:	4314      	orrs	r4, r2
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	0412      	lsls	r2, r2, #16
 8002442:	4314      	orrs	r4, r2
 8002444:	4ad5      	ldr	r2, [pc, #852]	; (800279c <__aeabi_dmul+0x390>)
 8002446:	00c5      	lsls	r5, r0, #3
 8002448:	4694      	mov	ip, r2
 800244a:	4463      	add	r3, ip
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2300      	movs	r3, #0
 8002450:	4699      	mov	r9, r3
 8002452:	469b      	mov	fp, r3
 8002454:	4643      	mov	r3, r8
 8002456:	4642      	mov	r2, r8
 8002458:	031e      	lsls	r6, r3, #12
 800245a:	0fd2      	lsrs	r2, r2, #31
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4650      	mov	r0, sl
 8002460:	4690      	mov	r8, r2
 8002462:	0b36      	lsrs	r6, r6, #12
 8002464:	0d5b      	lsrs	r3, r3, #21
 8002466:	d100      	bne.n	800246a <__aeabi_dmul+0x5e>
 8002468:	e120      	b.n	80026ac <__aeabi_dmul+0x2a0>
 800246a:	4acb      	ldr	r2, [pc, #812]	; (8002798 <__aeabi_dmul+0x38c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d100      	bne.n	8002472 <__aeabi_dmul+0x66>
 8002470:	e162      	b.n	8002738 <__aeabi_dmul+0x32c>
 8002472:	49ca      	ldr	r1, [pc, #808]	; (800279c <__aeabi_dmul+0x390>)
 8002474:	0f42      	lsrs	r2, r0, #29
 8002476:	468c      	mov	ip, r1
 8002478:	9900      	ldr	r1, [sp, #0]
 800247a:	4463      	add	r3, ip
 800247c:	00f6      	lsls	r6, r6, #3
 800247e:	468c      	mov	ip, r1
 8002480:	4316      	orrs	r6, r2
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	449c      	add	ip, r3
 8002486:	0412      	lsls	r2, r2, #16
 8002488:	4663      	mov	r3, ip
 800248a:	4316      	orrs	r6, r2
 800248c:	00c2      	lsls	r2, r0, #3
 800248e:	2000      	movs	r0, #0
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	9900      	ldr	r1, [sp, #0]
 8002494:	4643      	mov	r3, r8
 8002496:	3101      	adds	r1, #1
 8002498:	468c      	mov	ip, r1
 800249a:	4649      	mov	r1, r9
 800249c:	407b      	eors	r3, r7
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	290f      	cmp	r1, #15
 80024a2:	d826      	bhi.n	80024f2 <__aeabi_dmul+0xe6>
 80024a4:	4bbe      	ldr	r3, [pc, #760]	; (80027a0 <__aeabi_dmul+0x394>)
 80024a6:	0089      	lsls	r1, r1, #2
 80024a8:	5859      	ldr	r1, [r3, r1]
 80024aa:	468f      	mov	pc, r1
 80024ac:	4643      	mov	r3, r8
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	0034      	movs	r4, r6
 80024b2:	0015      	movs	r5, r2
 80024b4:	4683      	mov	fp, r0
 80024b6:	465b      	mov	r3, fp
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d016      	beq.n	80024ea <__aeabi_dmul+0xde>
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d100      	bne.n	80024c2 <__aeabi_dmul+0xb6>
 80024c0:	e203      	b.n	80028ca <__aeabi_dmul+0x4be>
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d000      	beq.n	80024c8 <__aeabi_dmul+0xbc>
 80024c6:	e0cd      	b.n	8002664 <__aeabi_dmul+0x258>
 80024c8:	2200      	movs	r2, #0
 80024ca:	2400      	movs	r4, #0
 80024cc:	2500      	movs	r5, #0
 80024ce:	9b01      	ldr	r3, [sp, #4]
 80024d0:	0512      	lsls	r2, r2, #20
 80024d2:	4322      	orrs	r2, r4
 80024d4:	07db      	lsls	r3, r3, #31
 80024d6:	431a      	orrs	r2, r3
 80024d8:	0028      	movs	r0, r5
 80024da:	0011      	movs	r1, r2
 80024dc:	b007      	add	sp, #28
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	2400      	movs	r4, #0
 80024ec:	2500      	movs	r5, #0
 80024ee:	4aaa      	ldr	r2, [pc, #680]	; (8002798 <__aeabi_dmul+0x38c>)
 80024f0:	e7ed      	b.n	80024ce <__aeabi_dmul+0xc2>
 80024f2:	0c28      	lsrs	r0, r5, #16
 80024f4:	042d      	lsls	r5, r5, #16
 80024f6:	0c2d      	lsrs	r5, r5, #16
 80024f8:	002b      	movs	r3, r5
 80024fa:	0c11      	lsrs	r1, r2, #16
 80024fc:	0412      	lsls	r2, r2, #16
 80024fe:	0c12      	lsrs	r2, r2, #16
 8002500:	4353      	muls	r3, r2
 8002502:	4698      	mov	r8, r3
 8002504:	0013      	movs	r3, r2
 8002506:	002f      	movs	r7, r5
 8002508:	4343      	muls	r3, r0
 800250a:	4699      	mov	r9, r3
 800250c:	434f      	muls	r7, r1
 800250e:	444f      	add	r7, r9
 8002510:	46bb      	mov	fp, r7
 8002512:	4647      	mov	r7, r8
 8002514:	000b      	movs	r3, r1
 8002516:	0c3f      	lsrs	r7, r7, #16
 8002518:	46ba      	mov	sl, r7
 800251a:	4343      	muls	r3, r0
 800251c:	44da      	add	sl, fp
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	45d1      	cmp	r9, sl
 8002522:	d904      	bls.n	800252e <__aeabi_dmul+0x122>
 8002524:	2780      	movs	r7, #128	; 0x80
 8002526:	027f      	lsls	r7, r7, #9
 8002528:	46b9      	mov	r9, r7
 800252a:	444b      	add	r3, r9
 800252c:	9302      	str	r3, [sp, #8]
 800252e:	4653      	mov	r3, sl
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	469b      	mov	fp, r3
 8002534:	4653      	mov	r3, sl
 8002536:	041f      	lsls	r7, r3, #16
 8002538:	4643      	mov	r3, r8
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	4698      	mov	r8, r3
 8002540:	003b      	movs	r3, r7
 8002542:	4443      	add	r3, r8
 8002544:	9304      	str	r3, [sp, #16]
 8002546:	0c33      	lsrs	r3, r6, #16
 8002548:	0436      	lsls	r6, r6, #16
 800254a:	0c36      	lsrs	r6, r6, #16
 800254c:	4698      	mov	r8, r3
 800254e:	0033      	movs	r3, r6
 8002550:	4343      	muls	r3, r0
 8002552:	4699      	mov	r9, r3
 8002554:	4643      	mov	r3, r8
 8002556:	4343      	muls	r3, r0
 8002558:	002f      	movs	r7, r5
 800255a:	469a      	mov	sl, r3
 800255c:	4643      	mov	r3, r8
 800255e:	4377      	muls	r7, r6
 8002560:	435d      	muls	r5, r3
 8002562:	0c38      	lsrs	r0, r7, #16
 8002564:	444d      	add	r5, r9
 8002566:	1945      	adds	r5, r0, r5
 8002568:	45a9      	cmp	r9, r5
 800256a:	d903      	bls.n	8002574 <__aeabi_dmul+0x168>
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	025b      	lsls	r3, r3, #9
 8002570:	4699      	mov	r9, r3
 8002572:	44ca      	add	sl, r9
 8002574:	043f      	lsls	r7, r7, #16
 8002576:	0c28      	lsrs	r0, r5, #16
 8002578:	0c3f      	lsrs	r7, r7, #16
 800257a:	042d      	lsls	r5, r5, #16
 800257c:	19ed      	adds	r5, r5, r7
 800257e:	0c27      	lsrs	r7, r4, #16
 8002580:	0424      	lsls	r4, r4, #16
 8002582:	0c24      	lsrs	r4, r4, #16
 8002584:	0003      	movs	r3, r0
 8002586:	0020      	movs	r0, r4
 8002588:	4350      	muls	r0, r2
 800258a:	437a      	muls	r2, r7
 800258c:	4691      	mov	r9, r2
 800258e:	003a      	movs	r2, r7
 8002590:	4453      	add	r3, sl
 8002592:	9305      	str	r3, [sp, #20]
 8002594:	0c03      	lsrs	r3, r0, #16
 8002596:	469a      	mov	sl, r3
 8002598:	434a      	muls	r2, r1
 800259a:	4361      	muls	r1, r4
 800259c:	4449      	add	r1, r9
 800259e:	4451      	add	r1, sl
 80025a0:	44ab      	add	fp, r5
 80025a2:	4589      	cmp	r9, r1
 80025a4:	d903      	bls.n	80025ae <__aeabi_dmul+0x1a2>
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	4699      	mov	r9, r3
 80025ac:	444a      	add	r2, r9
 80025ae:	0400      	lsls	r0, r0, #16
 80025b0:	0c0b      	lsrs	r3, r1, #16
 80025b2:	0c00      	lsrs	r0, r0, #16
 80025b4:	0409      	lsls	r1, r1, #16
 80025b6:	1809      	adds	r1, r1, r0
 80025b8:	0020      	movs	r0, r4
 80025ba:	4699      	mov	r9, r3
 80025bc:	4643      	mov	r3, r8
 80025be:	4370      	muls	r0, r6
 80025c0:	435c      	muls	r4, r3
 80025c2:	437e      	muls	r6, r7
 80025c4:	435f      	muls	r7, r3
 80025c6:	0c03      	lsrs	r3, r0, #16
 80025c8:	4698      	mov	r8, r3
 80025ca:	19a4      	adds	r4, r4, r6
 80025cc:	4444      	add	r4, r8
 80025ce:	444a      	add	r2, r9
 80025d0:	9703      	str	r7, [sp, #12]
 80025d2:	42a6      	cmp	r6, r4
 80025d4:	d904      	bls.n	80025e0 <__aeabi_dmul+0x1d4>
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	025b      	lsls	r3, r3, #9
 80025da:	4698      	mov	r8, r3
 80025dc:	4447      	add	r7, r8
 80025de:	9703      	str	r7, [sp, #12]
 80025e0:	0423      	lsls	r3, r4, #16
 80025e2:	9e02      	ldr	r6, [sp, #8]
 80025e4:	469a      	mov	sl, r3
 80025e6:	9b05      	ldr	r3, [sp, #20]
 80025e8:	445e      	add	r6, fp
 80025ea:	4698      	mov	r8, r3
 80025ec:	42ae      	cmp	r6, r5
 80025ee:	41ad      	sbcs	r5, r5
 80025f0:	1876      	adds	r6, r6, r1
 80025f2:	428e      	cmp	r6, r1
 80025f4:	4189      	sbcs	r1, r1
 80025f6:	0400      	lsls	r0, r0, #16
 80025f8:	0c00      	lsrs	r0, r0, #16
 80025fa:	4450      	add	r0, sl
 80025fc:	4440      	add	r0, r8
 80025fe:	426d      	negs	r5, r5
 8002600:	1947      	adds	r7, r0, r5
 8002602:	46b8      	mov	r8, r7
 8002604:	4693      	mov	fp, r2
 8002606:	4249      	negs	r1, r1
 8002608:	4689      	mov	r9, r1
 800260a:	44c3      	add	fp, r8
 800260c:	44d9      	add	r9, fp
 800260e:	4298      	cmp	r0, r3
 8002610:	4180      	sbcs	r0, r0
 8002612:	45a8      	cmp	r8, r5
 8002614:	41ad      	sbcs	r5, r5
 8002616:	4593      	cmp	fp, r2
 8002618:	4192      	sbcs	r2, r2
 800261a:	4589      	cmp	r9, r1
 800261c:	4189      	sbcs	r1, r1
 800261e:	426d      	negs	r5, r5
 8002620:	4240      	negs	r0, r0
 8002622:	4328      	orrs	r0, r5
 8002624:	0c24      	lsrs	r4, r4, #16
 8002626:	4252      	negs	r2, r2
 8002628:	4249      	negs	r1, r1
 800262a:	430a      	orrs	r2, r1
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	1900      	adds	r0, r0, r4
 8002630:	1880      	adds	r0, r0, r2
 8002632:	18c7      	adds	r7, r0, r3
 8002634:	464b      	mov	r3, r9
 8002636:	0ddc      	lsrs	r4, r3, #23
 8002638:	9b04      	ldr	r3, [sp, #16]
 800263a:	0275      	lsls	r5, r6, #9
 800263c:	431d      	orrs	r5, r3
 800263e:	1e6a      	subs	r2, r5, #1
 8002640:	4195      	sbcs	r5, r2
 8002642:	464b      	mov	r3, r9
 8002644:	0df6      	lsrs	r6, r6, #23
 8002646:	027f      	lsls	r7, r7, #9
 8002648:	4335      	orrs	r5, r6
 800264a:	025a      	lsls	r2, r3, #9
 800264c:	433c      	orrs	r4, r7
 800264e:	4315      	orrs	r5, r2
 8002650:	01fb      	lsls	r3, r7, #7
 8002652:	d400      	bmi.n	8002656 <__aeabi_dmul+0x24a>
 8002654:	e11c      	b.n	8002890 <__aeabi_dmul+0x484>
 8002656:	2101      	movs	r1, #1
 8002658:	086a      	lsrs	r2, r5, #1
 800265a:	400d      	ands	r5, r1
 800265c:	4315      	orrs	r5, r2
 800265e:	07e2      	lsls	r2, r4, #31
 8002660:	4315      	orrs	r5, r2
 8002662:	0864      	lsrs	r4, r4, #1
 8002664:	494f      	ldr	r1, [pc, #316]	; (80027a4 <__aeabi_dmul+0x398>)
 8002666:	4461      	add	r1, ip
 8002668:	2900      	cmp	r1, #0
 800266a:	dc00      	bgt.n	800266e <__aeabi_dmul+0x262>
 800266c:	e0b0      	b.n	80027d0 <__aeabi_dmul+0x3c4>
 800266e:	076b      	lsls	r3, r5, #29
 8002670:	d009      	beq.n	8002686 <__aeabi_dmul+0x27a>
 8002672:	220f      	movs	r2, #15
 8002674:	402a      	ands	r2, r5
 8002676:	2a04      	cmp	r2, #4
 8002678:	d005      	beq.n	8002686 <__aeabi_dmul+0x27a>
 800267a:	1d2a      	adds	r2, r5, #4
 800267c:	42aa      	cmp	r2, r5
 800267e:	41ad      	sbcs	r5, r5
 8002680:	426d      	negs	r5, r5
 8002682:	1964      	adds	r4, r4, r5
 8002684:	0015      	movs	r5, r2
 8002686:	01e3      	lsls	r3, r4, #7
 8002688:	d504      	bpl.n	8002694 <__aeabi_dmul+0x288>
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	4a46      	ldr	r2, [pc, #280]	; (80027a8 <__aeabi_dmul+0x39c>)
 800268e:	00c9      	lsls	r1, r1, #3
 8002690:	4014      	ands	r4, r2
 8002692:	4461      	add	r1, ip
 8002694:	4a45      	ldr	r2, [pc, #276]	; (80027ac <__aeabi_dmul+0x3a0>)
 8002696:	4291      	cmp	r1, r2
 8002698:	dd00      	ble.n	800269c <__aeabi_dmul+0x290>
 800269a:	e726      	b.n	80024ea <__aeabi_dmul+0xde>
 800269c:	0762      	lsls	r2, r4, #29
 800269e:	08ed      	lsrs	r5, r5, #3
 80026a0:	0264      	lsls	r4, r4, #9
 80026a2:	0549      	lsls	r1, r1, #21
 80026a4:	4315      	orrs	r5, r2
 80026a6:	0b24      	lsrs	r4, r4, #12
 80026a8:	0d4a      	lsrs	r2, r1, #21
 80026aa:	e710      	b.n	80024ce <__aeabi_dmul+0xc2>
 80026ac:	4652      	mov	r2, sl
 80026ae:	4332      	orrs	r2, r6
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dmul+0x2a8>
 80026b2:	e07f      	b.n	80027b4 <__aeabi_dmul+0x3a8>
 80026b4:	2e00      	cmp	r6, #0
 80026b6:	d100      	bne.n	80026ba <__aeabi_dmul+0x2ae>
 80026b8:	e0dc      	b.n	8002874 <__aeabi_dmul+0x468>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fd96 	bl	80031ec <__clzsi2>
 80026c0:	0002      	movs	r2, r0
 80026c2:	3a0b      	subs	r2, #11
 80026c4:	231d      	movs	r3, #29
 80026c6:	0001      	movs	r1, r0
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	4652      	mov	r2, sl
 80026cc:	3908      	subs	r1, #8
 80026ce:	40da      	lsrs	r2, r3
 80026d0:	408e      	lsls	r6, r1
 80026d2:	4316      	orrs	r6, r2
 80026d4:	4652      	mov	r2, sl
 80026d6:	408a      	lsls	r2, r1
 80026d8:	9b00      	ldr	r3, [sp, #0]
 80026da:	4935      	ldr	r1, [pc, #212]	; (80027b0 <__aeabi_dmul+0x3a4>)
 80026dc:	1a18      	subs	r0, r3, r0
 80026de:	0003      	movs	r3, r0
 80026e0:	468c      	mov	ip, r1
 80026e2:	4463      	add	r3, ip
 80026e4:	2000      	movs	r0, #0
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e6d3      	b.n	8002492 <__aeabi_dmul+0x86>
 80026ea:	0025      	movs	r5, r4
 80026ec:	4305      	orrs	r5, r0
 80026ee:	d04a      	beq.n	8002786 <__aeabi_dmul+0x37a>
 80026f0:	2c00      	cmp	r4, #0
 80026f2:	d100      	bne.n	80026f6 <__aeabi_dmul+0x2ea>
 80026f4:	e0b0      	b.n	8002858 <__aeabi_dmul+0x44c>
 80026f6:	0020      	movs	r0, r4
 80026f8:	f000 fd78 	bl	80031ec <__clzsi2>
 80026fc:	0001      	movs	r1, r0
 80026fe:	0002      	movs	r2, r0
 8002700:	390b      	subs	r1, #11
 8002702:	231d      	movs	r3, #29
 8002704:	0010      	movs	r0, r2
 8002706:	1a5b      	subs	r3, r3, r1
 8002708:	0031      	movs	r1, r6
 800270a:	0035      	movs	r5, r6
 800270c:	3808      	subs	r0, #8
 800270e:	4084      	lsls	r4, r0
 8002710:	40d9      	lsrs	r1, r3
 8002712:	4085      	lsls	r5, r0
 8002714:	430c      	orrs	r4, r1
 8002716:	4826      	ldr	r0, [pc, #152]	; (80027b0 <__aeabi_dmul+0x3a4>)
 8002718:	1a83      	subs	r3, r0, r2
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2300      	movs	r3, #0
 800271e:	4699      	mov	r9, r3
 8002720:	469b      	mov	fp, r3
 8002722:	e697      	b.n	8002454 <__aeabi_dmul+0x48>
 8002724:	0005      	movs	r5, r0
 8002726:	4325      	orrs	r5, r4
 8002728:	d126      	bne.n	8002778 <__aeabi_dmul+0x36c>
 800272a:	2208      	movs	r2, #8
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2302      	movs	r3, #2
 8002730:	2400      	movs	r4, #0
 8002732:	4691      	mov	r9, r2
 8002734:	469b      	mov	fp, r3
 8002736:	e68d      	b.n	8002454 <__aeabi_dmul+0x48>
 8002738:	4652      	mov	r2, sl
 800273a:	9b00      	ldr	r3, [sp, #0]
 800273c:	4332      	orrs	r2, r6
 800273e:	d110      	bne.n	8002762 <__aeabi_dmul+0x356>
 8002740:	4915      	ldr	r1, [pc, #84]	; (8002798 <__aeabi_dmul+0x38c>)
 8002742:	2600      	movs	r6, #0
 8002744:	468c      	mov	ip, r1
 8002746:	4463      	add	r3, ip
 8002748:	4649      	mov	r1, r9
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2302      	movs	r3, #2
 800274e:	4319      	orrs	r1, r3
 8002750:	4689      	mov	r9, r1
 8002752:	2002      	movs	r0, #2
 8002754:	e69d      	b.n	8002492 <__aeabi_dmul+0x86>
 8002756:	465b      	mov	r3, fp
 8002758:	9701      	str	r7, [sp, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d000      	beq.n	8002760 <__aeabi_dmul+0x354>
 800275e:	e6ad      	b.n	80024bc <__aeabi_dmul+0xb0>
 8002760:	e6c3      	b.n	80024ea <__aeabi_dmul+0xde>
 8002762:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <__aeabi_dmul+0x38c>)
 8002764:	2003      	movs	r0, #3
 8002766:	4694      	mov	ip, r2
 8002768:	4463      	add	r3, ip
 800276a:	464a      	mov	r2, r9
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2303      	movs	r3, #3
 8002770:	431a      	orrs	r2, r3
 8002772:	4691      	mov	r9, r2
 8002774:	4652      	mov	r2, sl
 8002776:	e68c      	b.n	8002492 <__aeabi_dmul+0x86>
 8002778:	220c      	movs	r2, #12
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2303      	movs	r3, #3
 800277e:	0005      	movs	r5, r0
 8002780:	4691      	mov	r9, r2
 8002782:	469b      	mov	fp, r3
 8002784:	e666      	b.n	8002454 <__aeabi_dmul+0x48>
 8002786:	2304      	movs	r3, #4
 8002788:	4699      	mov	r9, r3
 800278a:	2300      	movs	r3, #0
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	2400      	movs	r4, #0
 8002792:	469b      	mov	fp, r3
 8002794:	e65e      	b.n	8002454 <__aeabi_dmul+0x48>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	000007ff 	.word	0x000007ff
 800279c:	fffffc01 	.word	0xfffffc01
 80027a0:	0800b538 	.word	0x0800b538
 80027a4:	000003ff 	.word	0x000003ff
 80027a8:	feffffff 	.word	0xfeffffff
 80027ac:	000007fe 	.word	0x000007fe
 80027b0:	fffffc0d 	.word	0xfffffc0d
 80027b4:	4649      	mov	r1, r9
 80027b6:	2301      	movs	r3, #1
 80027b8:	4319      	orrs	r1, r3
 80027ba:	4689      	mov	r9, r1
 80027bc:	2600      	movs	r6, #0
 80027be:	2001      	movs	r0, #1
 80027c0:	e667      	b.n	8002492 <__aeabi_dmul+0x86>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2480      	movs	r4, #128	; 0x80
 80027c6:	2500      	movs	r5, #0
 80027c8:	4a43      	ldr	r2, [pc, #268]	; (80028d8 <__aeabi_dmul+0x4cc>)
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	0324      	lsls	r4, r4, #12
 80027ce:	e67e      	b.n	80024ce <__aeabi_dmul+0xc2>
 80027d0:	2001      	movs	r0, #1
 80027d2:	1a40      	subs	r0, r0, r1
 80027d4:	2838      	cmp	r0, #56	; 0x38
 80027d6:	dd00      	ble.n	80027da <__aeabi_dmul+0x3ce>
 80027d8:	e676      	b.n	80024c8 <__aeabi_dmul+0xbc>
 80027da:	281f      	cmp	r0, #31
 80027dc:	dd5b      	ble.n	8002896 <__aeabi_dmul+0x48a>
 80027de:	221f      	movs	r2, #31
 80027e0:	0023      	movs	r3, r4
 80027e2:	4252      	negs	r2, r2
 80027e4:	1a51      	subs	r1, r2, r1
 80027e6:	40cb      	lsrs	r3, r1
 80027e8:	0019      	movs	r1, r3
 80027ea:	2820      	cmp	r0, #32
 80027ec:	d003      	beq.n	80027f6 <__aeabi_dmul+0x3ea>
 80027ee:	4a3b      	ldr	r2, [pc, #236]	; (80028dc <__aeabi_dmul+0x4d0>)
 80027f0:	4462      	add	r2, ip
 80027f2:	4094      	lsls	r4, r2
 80027f4:	4325      	orrs	r5, r4
 80027f6:	1e6a      	subs	r2, r5, #1
 80027f8:	4195      	sbcs	r5, r2
 80027fa:	002a      	movs	r2, r5
 80027fc:	430a      	orrs	r2, r1
 80027fe:	2107      	movs	r1, #7
 8002800:	000d      	movs	r5, r1
 8002802:	2400      	movs	r4, #0
 8002804:	4015      	ands	r5, r2
 8002806:	4211      	tst	r1, r2
 8002808:	d05b      	beq.n	80028c2 <__aeabi_dmul+0x4b6>
 800280a:	210f      	movs	r1, #15
 800280c:	2400      	movs	r4, #0
 800280e:	4011      	ands	r1, r2
 8002810:	2904      	cmp	r1, #4
 8002812:	d053      	beq.n	80028bc <__aeabi_dmul+0x4b0>
 8002814:	1d11      	adds	r1, r2, #4
 8002816:	4291      	cmp	r1, r2
 8002818:	4192      	sbcs	r2, r2
 800281a:	4252      	negs	r2, r2
 800281c:	18a4      	adds	r4, r4, r2
 800281e:	000a      	movs	r2, r1
 8002820:	0223      	lsls	r3, r4, #8
 8002822:	d54b      	bpl.n	80028bc <__aeabi_dmul+0x4b0>
 8002824:	2201      	movs	r2, #1
 8002826:	2400      	movs	r4, #0
 8002828:	2500      	movs	r5, #0
 800282a:	e650      	b.n	80024ce <__aeabi_dmul+0xc2>
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	031b      	lsls	r3, r3, #12
 8002830:	421c      	tst	r4, r3
 8002832:	d009      	beq.n	8002848 <__aeabi_dmul+0x43c>
 8002834:	421e      	tst	r6, r3
 8002836:	d107      	bne.n	8002848 <__aeabi_dmul+0x43c>
 8002838:	4333      	orrs	r3, r6
 800283a:	031c      	lsls	r4, r3, #12
 800283c:	4643      	mov	r3, r8
 800283e:	0015      	movs	r5, r2
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <__aeabi_dmul+0x4cc>)
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	e642      	b.n	80024ce <__aeabi_dmul+0xc2>
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	0312      	lsls	r2, r2, #12
 800284c:	4314      	orrs	r4, r2
 800284e:	0324      	lsls	r4, r4, #12
 8002850:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <__aeabi_dmul+0x4cc>)
 8002852:	0b24      	lsrs	r4, r4, #12
 8002854:	9701      	str	r7, [sp, #4]
 8002856:	e63a      	b.n	80024ce <__aeabi_dmul+0xc2>
 8002858:	f000 fcc8 	bl	80031ec <__clzsi2>
 800285c:	0001      	movs	r1, r0
 800285e:	0002      	movs	r2, r0
 8002860:	3115      	adds	r1, #21
 8002862:	3220      	adds	r2, #32
 8002864:	291c      	cmp	r1, #28
 8002866:	dc00      	bgt.n	800286a <__aeabi_dmul+0x45e>
 8002868:	e74b      	b.n	8002702 <__aeabi_dmul+0x2f6>
 800286a:	0034      	movs	r4, r6
 800286c:	3808      	subs	r0, #8
 800286e:	2500      	movs	r5, #0
 8002870:	4084      	lsls	r4, r0
 8002872:	e750      	b.n	8002716 <__aeabi_dmul+0x30a>
 8002874:	f000 fcba 	bl	80031ec <__clzsi2>
 8002878:	0003      	movs	r3, r0
 800287a:	001a      	movs	r2, r3
 800287c:	3215      	adds	r2, #21
 800287e:	3020      	adds	r0, #32
 8002880:	2a1c      	cmp	r2, #28
 8002882:	dc00      	bgt.n	8002886 <__aeabi_dmul+0x47a>
 8002884:	e71e      	b.n	80026c4 <__aeabi_dmul+0x2b8>
 8002886:	4656      	mov	r6, sl
 8002888:	3b08      	subs	r3, #8
 800288a:	2200      	movs	r2, #0
 800288c:	409e      	lsls	r6, r3
 800288e:	e723      	b.n	80026d8 <__aeabi_dmul+0x2cc>
 8002890:	9b00      	ldr	r3, [sp, #0]
 8002892:	469c      	mov	ip, r3
 8002894:	e6e6      	b.n	8002664 <__aeabi_dmul+0x258>
 8002896:	4912      	ldr	r1, [pc, #72]	; (80028e0 <__aeabi_dmul+0x4d4>)
 8002898:	0022      	movs	r2, r4
 800289a:	4461      	add	r1, ip
 800289c:	002e      	movs	r6, r5
 800289e:	408d      	lsls	r5, r1
 80028a0:	408a      	lsls	r2, r1
 80028a2:	40c6      	lsrs	r6, r0
 80028a4:	1e69      	subs	r1, r5, #1
 80028a6:	418d      	sbcs	r5, r1
 80028a8:	4332      	orrs	r2, r6
 80028aa:	432a      	orrs	r2, r5
 80028ac:	40c4      	lsrs	r4, r0
 80028ae:	0753      	lsls	r3, r2, #29
 80028b0:	d0b6      	beq.n	8002820 <__aeabi_dmul+0x414>
 80028b2:	210f      	movs	r1, #15
 80028b4:	4011      	ands	r1, r2
 80028b6:	2904      	cmp	r1, #4
 80028b8:	d1ac      	bne.n	8002814 <__aeabi_dmul+0x408>
 80028ba:	e7b1      	b.n	8002820 <__aeabi_dmul+0x414>
 80028bc:	0765      	lsls	r5, r4, #29
 80028be:	0264      	lsls	r4, r4, #9
 80028c0:	0b24      	lsrs	r4, r4, #12
 80028c2:	08d2      	lsrs	r2, r2, #3
 80028c4:	4315      	orrs	r5, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	e601      	b.n	80024ce <__aeabi_dmul+0xc2>
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	0312      	lsls	r2, r2, #12
 80028ce:	4314      	orrs	r4, r2
 80028d0:	0324      	lsls	r4, r4, #12
 80028d2:	4a01      	ldr	r2, [pc, #4]	; (80028d8 <__aeabi_dmul+0x4cc>)
 80028d4:	0b24      	lsrs	r4, r4, #12
 80028d6:	e5fa      	b.n	80024ce <__aeabi_dmul+0xc2>
 80028d8:	000007ff 	.word	0x000007ff
 80028dc:	0000043e 	.word	0x0000043e
 80028e0:	0000041e 	.word	0x0000041e

080028e4 <__aeabi_dsub>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	4657      	mov	r7, sl
 80028e8:	464e      	mov	r6, r9
 80028ea:	4645      	mov	r5, r8
 80028ec:	46de      	mov	lr, fp
 80028ee:	b5e0      	push	{r5, r6, r7, lr}
 80028f0:	001e      	movs	r6, r3
 80028f2:	0017      	movs	r7, r2
 80028f4:	004a      	lsls	r2, r1, #1
 80028f6:	030b      	lsls	r3, r1, #12
 80028f8:	0d52      	lsrs	r2, r2, #21
 80028fa:	0a5b      	lsrs	r3, r3, #9
 80028fc:	4690      	mov	r8, r2
 80028fe:	0f42      	lsrs	r2, r0, #29
 8002900:	431a      	orrs	r2, r3
 8002902:	0fcd      	lsrs	r5, r1, #31
 8002904:	4ccd      	ldr	r4, [pc, #820]	; (8002c3c <__aeabi_dsub+0x358>)
 8002906:	0331      	lsls	r1, r6, #12
 8002908:	00c3      	lsls	r3, r0, #3
 800290a:	4694      	mov	ip, r2
 800290c:	0070      	lsls	r0, r6, #1
 800290e:	0f7a      	lsrs	r2, r7, #29
 8002910:	0a49      	lsrs	r1, r1, #9
 8002912:	00ff      	lsls	r7, r7, #3
 8002914:	469a      	mov	sl, r3
 8002916:	46b9      	mov	r9, r7
 8002918:	0d40      	lsrs	r0, r0, #21
 800291a:	0ff6      	lsrs	r6, r6, #31
 800291c:	4311      	orrs	r1, r2
 800291e:	42a0      	cmp	r0, r4
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x40>
 8002922:	e0b1      	b.n	8002a88 <__aeabi_dsub+0x1a4>
 8002924:	2201      	movs	r2, #1
 8002926:	4056      	eors	r6, r2
 8002928:	46b3      	mov	fp, r6
 800292a:	42b5      	cmp	r5, r6
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x4c>
 800292e:	e088      	b.n	8002a42 <__aeabi_dsub+0x15e>
 8002930:	4642      	mov	r2, r8
 8002932:	1a12      	subs	r2, r2, r0
 8002934:	2a00      	cmp	r2, #0
 8002936:	dc00      	bgt.n	800293a <__aeabi_dsub+0x56>
 8002938:	e0ae      	b.n	8002a98 <__aeabi_dsub+0x1b4>
 800293a:	2800      	cmp	r0, #0
 800293c:	d100      	bne.n	8002940 <__aeabi_dsub+0x5c>
 800293e:	e0c1      	b.n	8002ac4 <__aeabi_dsub+0x1e0>
 8002940:	48be      	ldr	r0, [pc, #760]	; (8002c3c <__aeabi_dsub+0x358>)
 8002942:	4580      	cmp	r8, r0
 8002944:	d100      	bne.n	8002948 <__aeabi_dsub+0x64>
 8002946:	e151      	b.n	8002bec <__aeabi_dsub+0x308>
 8002948:	2080      	movs	r0, #128	; 0x80
 800294a:	0400      	lsls	r0, r0, #16
 800294c:	4301      	orrs	r1, r0
 800294e:	2a38      	cmp	r2, #56	; 0x38
 8002950:	dd00      	ble.n	8002954 <__aeabi_dsub+0x70>
 8002952:	e17b      	b.n	8002c4c <__aeabi_dsub+0x368>
 8002954:	2a1f      	cmp	r2, #31
 8002956:	dd00      	ble.n	800295a <__aeabi_dsub+0x76>
 8002958:	e1ee      	b.n	8002d38 <__aeabi_dsub+0x454>
 800295a:	2020      	movs	r0, #32
 800295c:	003e      	movs	r6, r7
 800295e:	1a80      	subs	r0, r0, r2
 8002960:	000c      	movs	r4, r1
 8002962:	40d6      	lsrs	r6, r2
 8002964:	40d1      	lsrs	r1, r2
 8002966:	4087      	lsls	r7, r0
 8002968:	4662      	mov	r2, ip
 800296a:	4084      	lsls	r4, r0
 800296c:	1a52      	subs	r2, r2, r1
 800296e:	1e78      	subs	r0, r7, #1
 8002970:	4187      	sbcs	r7, r0
 8002972:	4694      	mov	ip, r2
 8002974:	4334      	orrs	r4, r6
 8002976:	4327      	orrs	r7, r4
 8002978:	1bdc      	subs	r4, r3, r7
 800297a:	42a3      	cmp	r3, r4
 800297c:	419b      	sbcs	r3, r3
 800297e:	4662      	mov	r2, ip
 8002980:	425b      	negs	r3, r3
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	4699      	mov	r9, r3
 8002986:	464b      	mov	r3, r9
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	d400      	bmi.n	800298e <__aeabi_dsub+0xaa>
 800298c:	e118      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 800298e:	464b      	mov	r3, r9
 8002990:	0258      	lsls	r0, r3, #9
 8002992:	0a43      	lsrs	r3, r0, #9
 8002994:	4699      	mov	r9, r3
 8002996:	464b      	mov	r3, r9
 8002998:	2b00      	cmp	r3, #0
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0xba>
 800299c:	e137      	b.n	8002c0e <__aeabi_dsub+0x32a>
 800299e:	4648      	mov	r0, r9
 80029a0:	f000 fc24 	bl	80031ec <__clzsi2>
 80029a4:	0001      	movs	r1, r0
 80029a6:	3908      	subs	r1, #8
 80029a8:	2320      	movs	r3, #32
 80029aa:	0022      	movs	r2, r4
 80029ac:	4648      	mov	r0, r9
 80029ae:	1a5b      	subs	r3, r3, r1
 80029b0:	40da      	lsrs	r2, r3
 80029b2:	4088      	lsls	r0, r1
 80029b4:	408c      	lsls	r4, r1
 80029b6:	4643      	mov	r3, r8
 80029b8:	4310      	orrs	r0, r2
 80029ba:	4588      	cmp	r8, r1
 80029bc:	dd00      	ble.n	80029c0 <__aeabi_dsub+0xdc>
 80029be:	e136      	b.n	8002c2e <__aeabi_dsub+0x34a>
 80029c0:	1ac9      	subs	r1, r1, r3
 80029c2:	1c4b      	adds	r3, r1, #1
 80029c4:	2b1f      	cmp	r3, #31
 80029c6:	dd00      	ble.n	80029ca <__aeabi_dsub+0xe6>
 80029c8:	e0ea      	b.n	8002ba0 <__aeabi_dsub+0x2bc>
 80029ca:	2220      	movs	r2, #32
 80029cc:	0026      	movs	r6, r4
 80029ce:	1ad2      	subs	r2, r2, r3
 80029d0:	0001      	movs	r1, r0
 80029d2:	4094      	lsls	r4, r2
 80029d4:	40de      	lsrs	r6, r3
 80029d6:	40d8      	lsrs	r0, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	4091      	lsls	r1, r2
 80029dc:	1e62      	subs	r2, r4, #1
 80029de:	4194      	sbcs	r4, r2
 80029e0:	4681      	mov	r9, r0
 80029e2:	4698      	mov	r8, r3
 80029e4:	4331      	orrs	r1, r6
 80029e6:	430c      	orrs	r4, r1
 80029e8:	0763      	lsls	r3, r4, #29
 80029ea:	d009      	beq.n	8002a00 <__aeabi_dsub+0x11c>
 80029ec:	230f      	movs	r3, #15
 80029ee:	4023      	ands	r3, r4
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d005      	beq.n	8002a00 <__aeabi_dsub+0x11c>
 80029f4:	1d23      	adds	r3, r4, #4
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	41a4      	sbcs	r4, r4
 80029fa:	4264      	negs	r4, r4
 80029fc:	44a1      	add	r9, r4
 80029fe:	001c      	movs	r4, r3
 8002a00:	464b      	mov	r3, r9
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	d400      	bmi.n	8002a08 <__aeabi_dsub+0x124>
 8002a06:	e0de      	b.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002a08:	4641      	mov	r1, r8
 8002a0a:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <__aeabi_dsub+0x358>)
 8002a0c:	3101      	adds	r1, #1
 8002a0e:	4299      	cmp	r1, r3
 8002a10:	d100      	bne.n	8002a14 <__aeabi_dsub+0x130>
 8002a12:	e0e7      	b.n	8002be4 <__aeabi_dsub+0x300>
 8002a14:	464b      	mov	r3, r9
 8002a16:	488a      	ldr	r0, [pc, #552]	; (8002c40 <__aeabi_dsub+0x35c>)
 8002a18:	08e4      	lsrs	r4, r4, #3
 8002a1a:	4003      	ands	r3, r0
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	0549      	lsls	r1, r1, #21
 8002a20:	075b      	lsls	r3, r3, #29
 8002a22:	0240      	lsls	r0, r0, #9
 8002a24:	4323      	orrs	r3, r4
 8002a26:	0d4a      	lsrs	r2, r1, #21
 8002a28:	0b04      	lsrs	r4, r0, #12
 8002a2a:	0512      	lsls	r2, r2, #20
 8002a2c:	07ed      	lsls	r5, r5, #31
 8002a2e:	4322      	orrs	r2, r4
 8002a30:	432a      	orrs	r2, r5
 8002a32:	0018      	movs	r0, r3
 8002a34:	0011      	movs	r1, r2
 8002a36:	bcf0      	pop	{r4, r5, r6, r7}
 8002a38:	46bb      	mov	fp, r7
 8002a3a:	46b2      	mov	sl, r6
 8002a3c:	46a9      	mov	r9, r5
 8002a3e:	46a0      	mov	r8, r4
 8002a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a42:	4642      	mov	r2, r8
 8002a44:	1a12      	subs	r2, r2, r0
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	dd52      	ble.n	8002af0 <__aeabi_dsub+0x20c>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x16c>
 8002a4e:	e09c      	b.n	8002b8a <__aeabi_dsub+0x2a6>
 8002a50:	45a0      	cmp	r8, r4
 8002a52:	d100      	bne.n	8002a56 <__aeabi_dsub+0x172>
 8002a54:	e0ca      	b.n	8002bec <__aeabi_dsub+0x308>
 8002a56:	2080      	movs	r0, #128	; 0x80
 8002a58:	0400      	lsls	r0, r0, #16
 8002a5a:	4301      	orrs	r1, r0
 8002a5c:	2a38      	cmp	r2, #56	; 0x38
 8002a5e:	dd00      	ble.n	8002a62 <__aeabi_dsub+0x17e>
 8002a60:	e149      	b.n	8002cf6 <__aeabi_dsub+0x412>
 8002a62:	2a1f      	cmp	r2, #31
 8002a64:	dc00      	bgt.n	8002a68 <__aeabi_dsub+0x184>
 8002a66:	e197      	b.n	8002d98 <__aeabi_dsub+0x4b4>
 8002a68:	0010      	movs	r0, r2
 8002a6a:	000e      	movs	r6, r1
 8002a6c:	3820      	subs	r0, #32
 8002a6e:	40c6      	lsrs	r6, r0
 8002a70:	2a20      	cmp	r2, #32
 8002a72:	d004      	beq.n	8002a7e <__aeabi_dsub+0x19a>
 8002a74:	2040      	movs	r0, #64	; 0x40
 8002a76:	1a82      	subs	r2, r0, r2
 8002a78:	4091      	lsls	r1, r2
 8002a7a:	430f      	orrs	r7, r1
 8002a7c:	46b9      	mov	r9, r7
 8002a7e:	464c      	mov	r4, r9
 8002a80:	1e62      	subs	r2, r4, #1
 8002a82:	4194      	sbcs	r4, r2
 8002a84:	4334      	orrs	r4, r6
 8002a86:	e13a      	b.n	8002cfe <__aeabi_dsub+0x41a>
 8002a88:	000a      	movs	r2, r1
 8002a8a:	433a      	orrs	r2, r7
 8002a8c:	d028      	beq.n	8002ae0 <__aeabi_dsub+0x1fc>
 8002a8e:	46b3      	mov	fp, r6
 8002a90:	42b5      	cmp	r5, r6
 8002a92:	d02b      	beq.n	8002aec <__aeabi_dsub+0x208>
 8002a94:	4a6b      	ldr	r2, [pc, #428]	; (8002c44 <__aeabi_dsub+0x360>)
 8002a96:	4442      	add	r2, r8
 8002a98:	2a00      	cmp	r2, #0
 8002a9a:	d05d      	beq.n	8002b58 <__aeabi_dsub+0x274>
 8002a9c:	4642      	mov	r2, r8
 8002a9e:	4644      	mov	r4, r8
 8002aa0:	1a82      	subs	r2, r0, r2
 8002aa2:	2c00      	cmp	r4, #0
 8002aa4:	d000      	beq.n	8002aa8 <__aeabi_dsub+0x1c4>
 8002aa6:	e0f5      	b.n	8002c94 <__aeabi_dsub+0x3b0>
 8002aa8:	4665      	mov	r5, ip
 8002aaa:	431d      	orrs	r5, r3
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x1cc>
 8002aae:	e19c      	b.n	8002dea <__aeabi_dsub+0x506>
 8002ab0:	1e55      	subs	r5, r2, #1
 8002ab2:	2a01      	cmp	r2, #1
 8002ab4:	d100      	bne.n	8002ab8 <__aeabi_dsub+0x1d4>
 8002ab6:	e1fb      	b.n	8002eb0 <__aeabi_dsub+0x5cc>
 8002ab8:	4c60      	ldr	r4, [pc, #384]	; (8002c3c <__aeabi_dsub+0x358>)
 8002aba:	42a2      	cmp	r2, r4
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x1dc>
 8002abe:	e1bd      	b.n	8002e3c <__aeabi_dsub+0x558>
 8002ac0:	002a      	movs	r2, r5
 8002ac2:	e0f0      	b.n	8002ca6 <__aeabi_dsub+0x3c2>
 8002ac4:	0008      	movs	r0, r1
 8002ac6:	4338      	orrs	r0, r7
 8002ac8:	d100      	bne.n	8002acc <__aeabi_dsub+0x1e8>
 8002aca:	e0c3      	b.n	8002c54 <__aeabi_dsub+0x370>
 8002acc:	1e50      	subs	r0, r2, #1
 8002ace:	2a01      	cmp	r2, #1
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x1f0>
 8002ad2:	e1a8      	b.n	8002e26 <__aeabi_dsub+0x542>
 8002ad4:	4c59      	ldr	r4, [pc, #356]	; (8002c3c <__aeabi_dsub+0x358>)
 8002ad6:	42a2      	cmp	r2, r4
 8002ad8:	d100      	bne.n	8002adc <__aeabi_dsub+0x1f8>
 8002ada:	e087      	b.n	8002bec <__aeabi_dsub+0x308>
 8002adc:	0002      	movs	r2, r0
 8002ade:	e736      	b.n	800294e <__aeabi_dsub+0x6a>
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4056      	eors	r6, r2
 8002ae4:	46b3      	mov	fp, r6
 8002ae6:	42b5      	cmp	r5, r6
 8002ae8:	d000      	beq.n	8002aec <__aeabi_dsub+0x208>
 8002aea:	e721      	b.n	8002930 <__aeabi_dsub+0x4c>
 8002aec:	4a55      	ldr	r2, [pc, #340]	; (8002c44 <__aeabi_dsub+0x360>)
 8002aee:	4442      	add	r2, r8
 8002af0:	2a00      	cmp	r2, #0
 8002af2:	d100      	bne.n	8002af6 <__aeabi_dsub+0x212>
 8002af4:	e0b5      	b.n	8002c62 <__aeabi_dsub+0x37e>
 8002af6:	4642      	mov	r2, r8
 8002af8:	4644      	mov	r4, r8
 8002afa:	1a82      	subs	r2, r0, r2
 8002afc:	2c00      	cmp	r4, #0
 8002afe:	d100      	bne.n	8002b02 <__aeabi_dsub+0x21e>
 8002b00:	e138      	b.n	8002d74 <__aeabi_dsub+0x490>
 8002b02:	4e4e      	ldr	r6, [pc, #312]	; (8002c3c <__aeabi_dsub+0x358>)
 8002b04:	42b0      	cmp	r0, r6
 8002b06:	d100      	bne.n	8002b0a <__aeabi_dsub+0x226>
 8002b08:	e1de      	b.n	8002ec8 <__aeabi_dsub+0x5e4>
 8002b0a:	2680      	movs	r6, #128	; 0x80
 8002b0c:	4664      	mov	r4, ip
 8002b0e:	0436      	lsls	r6, r6, #16
 8002b10:	4334      	orrs	r4, r6
 8002b12:	46a4      	mov	ip, r4
 8002b14:	2a38      	cmp	r2, #56	; 0x38
 8002b16:	dd00      	ble.n	8002b1a <__aeabi_dsub+0x236>
 8002b18:	e196      	b.n	8002e48 <__aeabi_dsub+0x564>
 8002b1a:	2a1f      	cmp	r2, #31
 8002b1c:	dd00      	ble.n	8002b20 <__aeabi_dsub+0x23c>
 8002b1e:	e224      	b.n	8002f6a <__aeabi_dsub+0x686>
 8002b20:	2620      	movs	r6, #32
 8002b22:	1ab4      	subs	r4, r6, r2
 8002b24:	46a2      	mov	sl, r4
 8002b26:	4664      	mov	r4, ip
 8002b28:	4656      	mov	r6, sl
 8002b2a:	40b4      	lsls	r4, r6
 8002b2c:	46a1      	mov	r9, r4
 8002b2e:	001c      	movs	r4, r3
 8002b30:	464e      	mov	r6, r9
 8002b32:	40d4      	lsrs	r4, r2
 8002b34:	4326      	orrs	r6, r4
 8002b36:	0034      	movs	r4, r6
 8002b38:	4656      	mov	r6, sl
 8002b3a:	40b3      	lsls	r3, r6
 8002b3c:	1e5e      	subs	r6, r3, #1
 8002b3e:	41b3      	sbcs	r3, r6
 8002b40:	431c      	orrs	r4, r3
 8002b42:	4663      	mov	r3, ip
 8002b44:	40d3      	lsrs	r3, r2
 8002b46:	18c9      	adds	r1, r1, r3
 8002b48:	19e4      	adds	r4, r4, r7
 8002b4a:	42bc      	cmp	r4, r7
 8002b4c:	41bf      	sbcs	r7, r7
 8002b4e:	427f      	negs	r7, r7
 8002b50:	46b9      	mov	r9, r7
 8002b52:	4680      	mov	r8, r0
 8002b54:	4489      	add	r9, r1
 8002b56:	e0d8      	b.n	8002d0a <__aeabi_dsub+0x426>
 8002b58:	4640      	mov	r0, r8
 8002b5a:	4c3b      	ldr	r4, [pc, #236]	; (8002c48 <__aeabi_dsub+0x364>)
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	4220      	tst	r0, r4
 8002b60:	d000      	beq.n	8002b64 <__aeabi_dsub+0x280>
 8002b62:	e0b4      	b.n	8002cce <__aeabi_dsub+0x3ea>
 8002b64:	4640      	mov	r0, r8
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d000      	beq.n	8002b6c <__aeabi_dsub+0x288>
 8002b6a:	e144      	b.n	8002df6 <__aeabi_dsub+0x512>
 8002b6c:	4660      	mov	r0, ip
 8002b6e:	4318      	orrs	r0, r3
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x290>
 8002b72:	e190      	b.n	8002e96 <__aeabi_dsub+0x5b2>
 8002b74:	0008      	movs	r0, r1
 8002b76:	4338      	orrs	r0, r7
 8002b78:	d000      	beq.n	8002b7c <__aeabi_dsub+0x298>
 8002b7a:	e1aa      	b.n	8002ed2 <__aeabi_dsub+0x5ee>
 8002b7c:	4661      	mov	r1, ip
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	0749      	lsls	r1, r1, #29
 8002b82:	430b      	orrs	r3, r1
 8002b84:	4661      	mov	r1, ip
 8002b86:	08cc      	lsrs	r4, r1, #3
 8002b88:	e027      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002b8a:	0008      	movs	r0, r1
 8002b8c:	4338      	orrs	r0, r7
 8002b8e:	d061      	beq.n	8002c54 <__aeabi_dsub+0x370>
 8002b90:	1e50      	subs	r0, r2, #1
 8002b92:	2a01      	cmp	r2, #1
 8002b94:	d100      	bne.n	8002b98 <__aeabi_dsub+0x2b4>
 8002b96:	e139      	b.n	8002e0c <__aeabi_dsub+0x528>
 8002b98:	42a2      	cmp	r2, r4
 8002b9a:	d027      	beq.n	8002bec <__aeabi_dsub+0x308>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	e75d      	b.n	8002a5c <__aeabi_dsub+0x178>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	391f      	subs	r1, #31
 8002ba4:	40ca      	lsrs	r2, r1
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d003      	beq.n	8002bb4 <__aeabi_dsub+0x2d0>
 8002bac:	2240      	movs	r2, #64	; 0x40
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4098      	lsls	r0, r3
 8002bb2:	4304      	orrs	r4, r0
 8002bb4:	1e63      	subs	r3, r4, #1
 8002bb6:	419c      	sbcs	r4, r3
 8002bb8:	2300      	movs	r3, #0
 8002bba:	4699      	mov	r9, r3
 8002bbc:	4698      	mov	r8, r3
 8002bbe:	430c      	orrs	r4, r1
 8002bc0:	0763      	lsls	r3, r4, #29
 8002bc2:	d000      	beq.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002bc4:	e712      	b.n	80029ec <__aeabi_dsub+0x108>
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	464a      	mov	r2, r9
 8002bca:	08e4      	lsrs	r4, r4, #3
 8002bcc:	075b      	lsls	r3, r3, #29
 8002bce:	4323      	orrs	r3, r4
 8002bd0:	08d4      	lsrs	r4, r2, #3
 8002bd2:	4642      	mov	r2, r8
 8002bd4:	4919      	ldr	r1, [pc, #100]	; (8002c3c <__aeabi_dsub+0x358>)
 8002bd6:	428a      	cmp	r2, r1
 8002bd8:	d00e      	beq.n	8002bf8 <__aeabi_dsub+0x314>
 8002bda:	0324      	lsls	r4, r4, #12
 8002bdc:	0552      	lsls	r2, r2, #21
 8002bde:	0b24      	lsrs	r4, r4, #12
 8002be0:	0d52      	lsrs	r2, r2, #21
 8002be2:	e722      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002be4:	000a      	movs	r2, r1
 8002be6:	2400      	movs	r4, #0
 8002be8:	2300      	movs	r3, #0
 8002bea:	e71e      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002bec:	08db      	lsrs	r3, r3, #3
 8002bee:	4662      	mov	r2, ip
 8002bf0:	0752      	lsls	r2, r2, #29
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	4662      	mov	r2, ip
 8002bf6:	08d4      	lsrs	r4, r2, #3
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	4322      	orrs	r2, r4
 8002bfc:	d100      	bne.n	8002c00 <__aeabi_dsub+0x31c>
 8002bfe:	e1fc      	b.n	8002ffa <__aeabi_dsub+0x716>
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	0312      	lsls	r2, r2, #12
 8002c04:	4314      	orrs	r4, r2
 8002c06:	0324      	lsls	r4, r4, #12
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <__aeabi_dsub+0x358>)
 8002c0a:	0b24      	lsrs	r4, r4, #12
 8002c0c:	e70d      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002c0e:	0020      	movs	r0, r4
 8002c10:	f000 faec 	bl	80031ec <__clzsi2>
 8002c14:	0001      	movs	r1, r0
 8002c16:	3118      	adds	r1, #24
 8002c18:	291f      	cmp	r1, #31
 8002c1a:	dc00      	bgt.n	8002c1e <__aeabi_dsub+0x33a>
 8002c1c:	e6c4      	b.n	80029a8 <__aeabi_dsub+0xc4>
 8002c1e:	3808      	subs	r0, #8
 8002c20:	4084      	lsls	r4, r0
 8002c22:	4643      	mov	r3, r8
 8002c24:	0020      	movs	r0, r4
 8002c26:	2400      	movs	r4, #0
 8002c28:	4588      	cmp	r8, r1
 8002c2a:	dc00      	bgt.n	8002c2e <__aeabi_dsub+0x34a>
 8002c2c:	e6c8      	b.n	80029c0 <__aeabi_dsub+0xdc>
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <__aeabi_dsub+0x35c>)
 8002c30:	1a5b      	subs	r3, r3, r1
 8002c32:	4010      	ands	r0, r2
 8002c34:	4698      	mov	r8, r3
 8002c36:	4681      	mov	r9, r0
 8002c38:	e6d6      	b.n	80029e8 <__aeabi_dsub+0x104>
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	000007ff 	.word	0x000007ff
 8002c40:	ff7fffff 	.word	0xff7fffff
 8002c44:	fffff801 	.word	0xfffff801
 8002c48:	000007fe 	.word	0x000007fe
 8002c4c:	430f      	orrs	r7, r1
 8002c4e:	1e7a      	subs	r2, r7, #1
 8002c50:	4197      	sbcs	r7, r2
 8002c52:	e691      	b.n	8002978 <__aeabi_dsub+0x94>
 8002c54:	4661      	mov	r1, ip
 8002c56:	08db      	lsrs	r3, r3, #3
 8002c58:	0749      	lsls	r1, r1, #29
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	4661      	mov	r1, ip
 8002c5e:	08cc      	lsrs	r4, r1, #3
 8002c60:	e7b8      	b.n	8002bd4 <__aeabi_dsub+0x2f0>
 8002c62:	4640      	mov	r0, r8
 8002c64:	4cd3      	ldr	r4, [pc, #844]	; (8002fb4 <__aeabi_dsub+0x6d0>)
 8002c66:	3001      	adds	r0, #1
 8002c68:	4220      	tst	r0, r4
 8002c6a:	d000      	beq.n	8002c6e <__aeabi_dsub+0x38a>
 8002c6c:	e0a2      	b.n	8002db4 <__aeabi_dsub+0x4d0>
 8002c6e:	4640      	mov	r0, r8
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d000      	beq.n	8002c76 <__aeabi_dsub+0x392>
 8002c74:	e101      	b.n	8002e7a <__aeabi_dsub+0x596>
 8002c76:	4660      	mov	r0, ip
 8002c78:	4318      	orrs	r0, r3
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x39a>
 8002c7c:	e15e      	b.n	8002f3c <__aeabi_dsub+0x658>
 8002c7e:	0008      	movs	r0, r1
 8002c80:	4338      	orrs	r0, r7
 8002c82:	d000      	beq.n	8002c86 <__aeabi_dsub+0x3a2>
 8002c84:	e15f      	b.n	8002f46 <__aeabi_dsub+0x662>
 8002c86:	4661      	mov	r1, ip
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	0749      	lsls	r1, r1, #29
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	4661      	mov	r1, ip
 8002c90:	08cc      	lsrs	r4, r1, #3
 8002c92:	e7a2      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002c94:	4dc8      	ldr	r5, [pc, #800]	; (8002fb8 <__aeabi_dsub+0x6d4>)
 8002c96:	42a8      	cmp	r0, r5
 8002c98:	d100      	bne.n	8002c9c <__aeabi_dsub+0x3b8>
 8002c9a:	e0cf      	b.n	8002e3c <__aeabi_dsub+0x558>
 8002c9c:	2580      	movs	r5, #128	; 0x80
 8002c9e:	4664      	mov	r4, ip
 8002ca0:	042d      	lsls	r5, r5, #16
 8002ca2:	432c      	orrs	r4, r5
 8002ca4:	46a4      	mov	ip, r4
 8002ca6:	2a38      	cmp	r2, #56	; 0x38
 8002ca8:	dc56      	bgt.n	8002d58 <__aeabi_dsub+0x474>
 8002caa:	2a1f      	cmp	r2, #31
 8002cac:	dd00      	ble.n	8002cb0 <__aeabi_dsub+0x3cc>
 8002cae:	e0d1      	b.n	8002e54 <__aeabi_dsub+0x570>
 8002cb0:	2520      	movs	r5, #32
 8002cb2:	001e      	movs	r6, r3
 8002cb4:	1aad      	subs	r5, r5, r2
 8002cb6:	4664      	mov	r4, ip
 8002cb8:	40ab      	lsls	r3, r5
 8002cba:	40ac      	lsls	r4, r5
 8002cbc:	40d6      	lsrs	r6, r2
 8002cbe:	1e5d      	subs	r5, r3, #1
 8002cc0:	41ab      	sbcs	r3, r5
 8002cc2:	4334      	orrs	r4, r6
 8002cc4:	4323      	orrs	r3, r4
 8002cc6:	4664      	mov	r4, ip
 8002cc8:	40d4      	lsrs	r4, r2
 8002cca:	1b09      	subs	r1, r1, r4
 8002ccc:	e049      	b.n	8002d62 <__aeabi_dsub+0x47e>
 8002cce:	4660      	mov	r0, ip
 8002cd0:	1bdc      	subs	r4, r3, r7
 8002cd2:	1a46      	subs	r6, r0, r1
 8002cd4:	42a3      	cmp	r3, r4
 8002cd6:	4180      	sbcs	r0, r0
 8002cd8:	4240      	negs	r0, r0
 8002cda:	4681      	mov	r9, r0
 8002cdc:	0030      	movs	r0, r6
 8002cde:	464e      	mov	r6, r9
 8002ce0:	1b80      	subs	r0, r0, r6
 8002ce2:	4681      	mov	r9, r0
 8002ce4:	0200      	lsls	r0, r0, #8
 8002ce6:	d476      	bmi.n	8002dd6 <__aeabi_dsub+0x4f2>
 8002ce8:	464b      	mov	r3, r9
 8002cea:	4323      	orrs	r3, r4
 8002cec:	d000      	beq.n	8002cf0 <__aeabi_dsub+0x40c>
 8002cee:	e652      	b.n	8002996 <__aeabi_dsub+0xb2>
 8002cf0:	2400      	movs	r4, #0
 8002cf2:	2500      	movs	r5, #0
 8002cf4:	e771      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002cf6:	4339      	orrs	r1, r7
 8002cf8:	000c      	movs	r4, r1
 8002cfa:	1e62      	subs	r2, r4, #1
 8002cfc:	4194      	sbcs	r4, r2
 8002cfe:	18e4      	adds	r4, r4, r3
 8002d00:	429c      	cmp	r4, r3
 8002d02:	419b      	sbcs	r3, r3
 8002d04:	425b      	negs	r3, r3
 8002d06:	4463      	add	r3, ip
 8002d08:	4699      	mov	r9, r3
 8002d0a:	464b      	mov	r3, r9
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	d400      	bmi.n	8002d12 <__aeabi_dsub+0x42e>
 8002d10:	e756      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002d12:	2301      	movs	r3, #1
 8002d14:	469c      	mov	ip, r3
 8002d16:	4ba8      	ldr	r3, [pc, #672]	; (8002fb8 <__aeabi_dsub+0x6d4>)
 8002d18:	44e0      	add	r8, ip
 8002d1a:	4598      	cmp	r8, r3
 8002d1c:	d038      	beq.n	8002d90 <__aeabi_dsub+0x4ac>
 8002d1e:	464b      	mov	r3, r9
 8002d20:	48a6      	ldr	r0, [pc, #664]	; (8002fbc <__aeabi_dsub+0x6d8>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	4003      	ands	r3, r0
 8002d26:	0018      	movs	r0, r3
 8002d28:	0863      	lsrs	r3, r4, #1
 8002d2a:	4014      	ands	r4, r2
 8002d2c:	431c      	orrs	r4, r3
 8002d2e:	07c3      	lsls	r3, r0, #31
 8002d30:	431c      	orrs	r4, r3
 8002d32:	0843      	lsrs	r3, r0, #1
 8002d34:	4699      	mov	r9, r3
 8002d36:	e657      	b.n	80029e8 <__aeabi_dsub+0x104>
 8002d38:	0010      	movs	r0, r2
 8002d3a:	000e      	movs	r6, r1
 8002d3c:	3820      	subs	r0, #32
 8002d3e:	40c6      	lsrs	r6, r0
 8002d40:	2a20      	cmp	r2, #32
 8002d42:	d004      	beq.n	8002d4e <__aeabi_dsub+0x46a>
 8002d44:	2040      	movs	r0, #64	; 0x40
 8002d46:	1a82      	subs	r2, r0, r2
 8002d48:	4091      	lsls	r1, r2
 8002d4a:	430f      	orrs	r7, r1
 8002d4c:	46b9      	mov	r9, r7
 8002d4e:	464f      	mov	r7, r9
 8002d50:	1e7a      	subs	r2, r7, #1
 8002d52:	4197      	sbcs	r7, r2
 8002d54:	4337      	orrs	r7, r6
 8002d56:	e60f      	b.n	8002978 <__aeabi_dsub+0x94>
 8002d58:	4662      	mov	r2, ip
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	0013      	movs	r3, r2
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	4193      	sbcs	r3, r2
 8002d62:	1afc      	subs	r4, r7, r3
 8002d64:	42a7      	cmp	r7, r4
 8002d66:	41bf      	sbcs	r7, r7
 8002d68:	427f      	negs	r7, r7
 8002d6a:	1bcb      	subs	r3, r1, r7
 8002d6c:	4699      	mov	r9, r3
 8002d6e:	465d      	mov	r5, fp
 8002d70:	4680      	mov	r8, r0
 8002d72:	e608      	b.n	8002986 <__aeabi_dsub+0xa2>
 8002d74:	4666      	mov	r6, ip
 8002d76:	431e      	orrs	r6, r3
 8002d78:	d100      	bne.n	8002d7c <__aeabi_dsub+0x498>
 8002d7a:	e0be      	b.n	8002efa <__aeabi_dsub+0x616>
 8002d7c:	1e56      	subs	r6, r2, #1
 8002d7e:	2a01      	cmp	r2, #1
 8002d80:	d100      	bne.n	8002d84 <__aeabi_dsub+0x4a0>
 8002d82:	e109      	b.n	8002f98 <__aeabi_dsub+0x6b4>
 8002d84:	4c8c      	ldr	r4, [pc, #560]	; (8002fb8 <__aeabi_dsub+0x6d4>)
 8002d86:	42a2      	cmp	r2, r4
 8002d88:	d100      	bne.n	8002d8c <__aeabi_dsub+0x4a8>
 8002d8a:	e119      	b.n	8002fc0 <__aeabi_dsub+0x6dc>
 8002d8c:	0032      	movs	r2, r6
 8002d8e:	e6c1      	b.n	8002b14 <__aeabi_dsub+0x230>
 8002d90:	4642      	mov	r2, r8
 8002d92:	2400      	movs	r4, #0
 8002d94:	2300      	movs	r3, #0
 8002d96:	e648      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002d98:	2020      	movs	r0, #32
 8002d9a:	000c      	movs	r4, r1
 8002d9c:	1a80      	subs	r0, r0, r2
 8002d9e:	003e      	movs	r6, r7
 8002da0:	4087      	lsls	r7, r0
 8002da2:	4084      	lsls	r4, r0
 8002da4:	40d6      	lsrs	r6, r2
 8002da6:	1e78      	subs	r0, r7, #1
 8002da8:	4187      	sbcs	r7, r0
 8002daa:	40d1      	lsrs	r1, r2
 8002dac:	4334      	orrs	r4, r6
 8002dae:	433c      	orrs	r4, r7
 8002db0:	448c      	add	ip, r1
 8002db2:	e7a4      	b.n	8002cfe <__aeabi_dsub+0x41a>
 8002db4:	4a80      	ldr	r2, [pc, #512]	; (8002fb8 <__aeabi_dsub+0x6d4>)
 8002db6:	4290      	cmp	r0, r2
 8002db8:	d100      	bne.n	8002dbc <__aeabi_dsub+0x4d8>
 8002dba:	e0e9      	b.n	8002f90 <__aeabi_dsub+0x6ac>
 8002dbc:	19df      	adds	r7, r3, r7
 8002dbe:	429f      	cmp	r7, r3
 8002dc0:	419b      	sbcs	r3, r3
 8002dc2:	4461      	add	r1, ip
 8002dc4:	425b      	negs	r3, r3
 8002dc6:	18c9      	adds	r1, r1, r3
 8002dc8:	07cc      	lsls	r4, r1, #31
 8002dca:	087f      	lsrs	r7, r7, #1
 8002dcc:	084b      	lsrs	r3, r1, #1
 8002dce:	4699      	mov	r9, r3
 8002dd0:	4680      	mov	r8, r0
 8002dd2:	433c      	orrs	r4, r7
 8002dd4:	e6f4      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002dd6:	1afc      	subs	r4, r7, r3
 8002dd8:	42a7      	cmp	r7, r4
 8002dda:	41bf      	sbcs	r7, r7
 8002ddc:	4663      	mov	r3, ip
 8002dde:	427f      	negs	r7, r7
 8002de0:	1ac9      	subs	r1, r1, r3
 8002de2:	1bcb      	subs	r3, r1, r7
 8002de4:	4699      	mov	r9, r3
 8002de6:	465d      	mov	r5, fp
 8002de8:	e5d5      	b.n	8002996 <__aeabi_dsub+0xb2>
 8002dea:	08ff      	lsrs	r7, r7, #3
 8002dec:	074b      	lsls	r3, r1, #29
 8002dee:	465d      	mov	r5, fp
 8002df0:	433b      	orrs	r3, r7
 8002df2:	08cc      	lsrs	r4, r1, #3
 8002df4:	e6ee      	b.n	8002bd4 <__aeabi_dsub+0x2f0>
 8002df6:	4662      	mov	r2, ip
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	d000      	beq.n	8002dfe <__aeabi_dsub+0x51a>
 8002dfc:	e082      	b.n	8002f04 <__aeabi_dsub+0x620>
 8002dfe:	000b      	movs	r3, r1
 8002e00:	433b      	orrs	r3, r7
 8002e02:	d11b      	bne.n	8002e3c <__aeabi_dsub+0x558>
 8002e04:	2480      	movs	r4, #128	; 0x80
 8002e06:	2500      	movs	r5, #0
 8002e08:	0324      	lsls	r4, r4, #12
 8002e0a:	e6f9      	b.n	8002c00 <__aeabi_dsub+0x31c>
 8002e0c:	19dc      	adds	r4, r3, r7
 8002e0e:	429c      	cmp	r4, r3
 8002e10:	419b      	sbcs	r3, r3
 8002e12:	4461      	add	r1, ip
 8002e14:	4689      	mov	r9, r1
 8002e16:	425b      	negs	r3, r3
 8002e18:	4499      	add	r9, r3
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	d444      	bmi.n	8002eaa <__aeabi_dsub+0x5c6>
 8002e20:	2301      	movs	r3, #1
 8002e22:	4698      	mov	r8, r3
 8002e24:	e6cc      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002e26:	1bdc      	subs	r4, r3, r7
 8002e28:	4662      	mov	r2, ip
 8002e2a:	42a3      	cmp	r3, r4
 8002e2c:	419b      	sbcs	r3, r3
 8002e2e:	1a51      	subs	r1, r2, r1
 8002e30:	425b      	negs	r3, r3
 8002e32:	1acb      	subs	r3, r1, r3
 8002e34:	4699      	mov	r9, r3
 8002e36:	2301      	movs	r3, #1
 8002e38:	4698      	mov	r8, r3
 8002e3a:	e5a4      	b.n	8002986 <__aeabi_dsub+0xa2>
 8002e3c:	08ff      	lsrs	r7, r7, #3
 8002e3e:	074b      	lsls	r3, r1, #29
 8002e40:	465d      	mov	r5, fp
 8002e42:	433b      	orrs	r3, r7
 8002e44:	08cc      	lsrs	r4, r1, #3
 8002e46:	e6d7      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002e48:	4662      	mov	r2, ip
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	0014      	movs	r4, r2
 8002e4e:	1e63      	subs	r3, r4, #1
 8002e50:	419c      	sbcs	r4, r3
 8002e52:	e679      	b.n	8002b48 <__aeabi_dsub+0x264>
 8002e54:	0015      	movs	r5, r2
 8002e56:	4664      	mov	r4, ip
 8002e58:	3d20      	subs	r5, #32
 8002e5a:	40ec      	lsrs	r4, r5
 8002e5c:	46a0      	mov	r8, r4
 8002e5e:	2a20      	cmp	r2, #32
 8002e60:	d005      	beq.n	8002e6e <__aeabi_dsub+0x58a>
 8002e62:	2540      	movs	r5, #64	; 0x40
 8002e64:	4664      	mov	r4, ip
 8002e66:	1aaa      	subs	r2, r5, r2
 8002e68:	4094      	lsls	r4, r2
 8002e6a:	4323      	orrs	r3, r4
 8002e6c:	469a      	mov	sl, r3
 8002e6e:	4654      	mov	r4, sl
 8002e70:	1e63      	subs	r3, r4, #1
 8002e72:	419c      	sbcs	r4, r3
 8002e74:	4643      	mov	r3, r8
 8002e76:	4323      	orrs	r3, r4
 8002e78:	e773      	b.n	8002d62 <__aeabi_dsub+0x47e>
 8002e7a:	4662      	mov	r2, ip
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	d023      	beq.n	8002ec8 <__aeabi_dsub+0x5e4>
 8002e80:	000a      	movs	r2, r1
 8002e82:	433a      	orrs	r2, r7
 8002e84:	d000      	beq.n	8002e88 <__aeabi_dsub+0x5a4>
 8002e86:	e0a0      	b.n	8002fca <__aeabi_dsub+0x6e6>
 8002e88:	4662      	mov	r2, ip
 8002e8a:	08db      	lsrs	r3, r3, #3
 8002e8c:	0752      	lsls	r2, r2, #29
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	4662      	mov	r2, ip
 8002e92:	08d4      	lsrs	r4, r2, #3
 8002e94:	e6b0      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002e96:	000b      	movs	r3, r1
 8002e98:	433b      	orrs	r3, r7
 8002e9a:	d100      	bne.n	8002e9e <__aeabi_dsub+0x5ba>
 8002e9c:	e728      	b.n	8002cf0 <__aeabi_dsub+0x40c>
 8002e9e:	08ff      	lsrs	r7, r7, #3
 8002ea0:	074b      	lsls	r3, r1, #29
 8002ea2:	465d      	mov	r5, fp
 8002ea4:	433b      	orrs	r3, r7
 8002ea6:	08cc      	lsrs	r4, r1, #3
 8002ea8:	e697      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	4698      	mov	r8, r3
 8002eae:	e736      	b.n	8002d1e <__aeabi_dsub+0x43a>
 8002eb0:	1afc      	subs	r4, r7, r3
 8002eb2:	42a7      	cmp	r7, r4
 8002eb4:	41bf      	sbcs	r7, r7
 8002eb6:	4663      	mov	r3, ip
 8002eb8:	427f      	negs	r7, r7
 8002eba:	1ac9      	subs	r1, r1, r3
 8002ebc:	1bcb      	subs	r3, r1, r7
 8002ebe:	4699      	mov	r9, r3
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	465d      	mov	r5, fp
 8002ec4:	4698      	mov	r8, r3
 8002ec6:	e55e      	b.n	8002986 <__aeabi_dsub+0xa2>
 8002ec8:	074b      	lsls	r3, r1, #29
 8002eca:	08ff      	lsrs	r7, r7, #3
 8002ecc:	433b      	orrs	r3, r7
 8002ece:	08cc      	lsrs	r4, r1, #3
 8002ed0:	e692      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002ed2:	1bdc      	subs	r4, r3, r7
 8002ed4:	4660      	mov	r0, ip
 8002ed6:	42a3      	cmp	r3, r4
 8002ed8:	41b6      	sbcs	r6, r6
 8002eda:	1a40      	subs	r0, r0, r1
 8002edc:	4276      	negs	r6, r6
 8002ede:	1b80      	subs	r0, r0, r6
 8002ee0:	4681      	mov	r9, r0
 8002ee2:	0200      	lsls	r0, r0, #8
 8002ee4:	d560      	bpl.n	8002fa8 <__aeabi_dsub+0x6c4>
 8002ee6:	1afc      	subs	r4, r7, r3
 8002ee8:	42a7      	cmp	r7, r4
 8002eea:	41bf      	sbcs	r7, r7
 8002eec:	4663      	mov	r3, ip
 8002eee:	427f      	negs	r7, r7
 8002ef0:	1ac9      	subs	r1, r1, r3
 8002ef2:	1bcb      	subs	r3, r1, r7
 8002ef4:	4699      	mov	r9, r3
 8002ef6:	465d      	mov	r5, fp
 8002ef8:	e576      	b.n	80029e8 <__aeabi_dsub+0x104>
 8002efa:	08ff      	lsrs	r7, r7, #3
 8002efc:	074b      	lsls	r3, r1, #29
 8002efe:	433b      	orrs	r3, r7
 8002f00:	08cc      	lsrs	r4, r1, #3
 8002f02:	e667      	b.n	8002bd4 <__aeabi_dsub+0x2f0>
 8002f04:	000a      	movs	r2, r1
 8002f06:	08db      	lsrs	r3, r3, #3
 8002f08:	433a      	orrs	r2, r7
 8002f0a:	d100      	bne.n	8002f0e <__aeabi_dsub+0x62a>
 8002f0c:	e66f      	b.n	8002bee <__aeabi_dsub+0x30a>
 8002f0e:	4662      	mov	r2, ip
 8002f10:	0752      	lsls	r2, r2, #29
 8002f12:	4313      	orrs	r3, r2
 8002f14:	4662      	mov	r2, ip
 8002f16:	08d4      	lsrs	r4, r2, #3
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	0312      	lsls	r2, r2, #12
 8002f1c:	4214      	tst	r4, r2
 8002f1e:	d007      	beq.n	8002f30 <__aeabi_dsub+0x64c>
 8002f20:	08c8      	lsrs	r0, r1, #3
 8002f22:	4210      	tst	r0, r2
 8002f24:	d104      	bne.n	8002f30 <__aeabi_dsub+0x64c>
 8002f26:	465d      	mov	r5, fp
 8002f28:	0004      	movs	r4, r0
 8002f2a:	08fb      	lsrs	r3, r7, #3
 8002f2c:	0749      	lsls	r1, r1, #29
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	0f5a      	lsrs	r2, r3, #29
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	08db      	lsrs	r3, r3, #3
 8002f36:	0752      	lsls	r2, r2, #29
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	e65d      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002f3c:	074b      	lsls	r3, r1, #29
 8002f3e:	08ff      	lsrs	r7, r7, #3
 8002f40:	433b      	orrs	r3, r7
 8002f42:	08cc      	lsrs	r4, r1, #3
 8002f44:	e649      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002f46:	19dc      	adds	r4, r3, r7
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	419b      	sbcs	r3, r3
 8002f4c:	4461      	add	r1, ip
 8002f4e:	4689      	mov	r9, r1
 8002f50:	425b      	negs	r3, r3
 8002f52:	4499      	add	r9, r3
 8002f54:	464b      	mov	r3, r9
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	d400      	bmi.n	8002f5c <__aeabi_dsub+0x678>
 8002f5a:	e631      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002f5c:	464a      	mov	r2, r9
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <__aeabi_dsub+0x6d8>)
 8002f60:	401a      	ands	r2, r3
 8002f62:	2301      	movs	r3, #1
 8002f64:	4691      	mov	r9, r2
 8002f66:	4698      	mov	r8, r3
 8002f68:	e62a      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002f6a:	0016      	movs	r6, r2
 8002f6c:	4664      	mov	r4, ip
 8002f6e:	3e20      	subs	r6, #32
 8002f70:	40f4      	lsrs	r4, r6
 8002f72:	46a0      	mov	r8, r4
 8002f74:	2a20      	cmp	r2, #32
 8002f76:	d005      	beq.n	8002f84 <__aeabi_dsub+0x6a0>
 8002f78:	2640      	movs	r6, #64	; 0x40
 8002f7a:	4664      	mov	r4, ip
 8002f7c:	1ab2      	subs	r2, r6, r2
 8002f7e:	4094      	lsls	r4, r2
 8002f80:	4323      	orrs	r3, r4
 8002f82:	469a      	mov	sl, r3
 8002f84:	4654      	mov	r4, sl
 8002f86:	1e63      	subs	r3, r4, #1
 8002f88:	419c      	sbcs	r4, r3
 8002f8a:	4643      	mov	r3, r8
 8002f8c:	431c      	orrs	r4, r3
 8002f8e:	e5db      	b.n	8002b48 <__aeabi_dsub+0x264>
 8002f90:	0002      	movs	r2, r0
 8002f92:	2400      	movs	r4, #0
 8002f94:	2300      	movs	r3, #0
 8002f96:	e548      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002f98:	19dc      	adds	r4, r3, r7
 8002f9a:	42bc      	cmp	r4, r7
 8002f9c:	41bf      	sbcs	r7, r7
 8002f9e:	4461      	add	r1, ip
 8002fa0:	4689      	mov	r9, r1
 8002fa2:	427f      	negs	r7, r7
 8002fa4:	44b9      	add	r9, r7
 8002fa6:	e738      	b.n	8002e1a <__aeabi_dsub+0x536>
 8002fa8:	464b      	mov	r3, r9
 8002faa:	4323      	orrs	r3, r4
 8002fac:	d100      	bne.n	8002fb0 <__aeabi_dsub+0x6cc>
 8002fae:	e69f      	b.n	8002cf0 <__aeabi_dsub+0x40c>
 8002fb0:	e606      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	000007fe 	.word	0x000007fe
 8002fb8:	000007ff 	.word	0x000007ff
 8002fbc:	ff7fffff 	.word	0xff7fffff
 8002fc0:	08ff      	lsrs	r7, r7, #3
 8002fc2:	074b      	lsls	r3, r1, #29
 8002fc4:	433b      	orrs	r3, r7
 8002fc6:	08cc      	lsrs	r4, r1, #3
 8002fc8:	e616      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002fca:	4662      	mov	r2, ip
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	0752      	lsls	r2, r2, #29
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	08d4      	lsrs	r4, r2, #3
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	0312      	lsls	r2, r2, #12
 8002fda:	4214      	tst	r4, r2
 8002fdc:	d007      	beq.n	8002fee <__aeabi_dsub+0x70a>
 8002fde:	08c8      	lsrs	r0, r1, #3
 8002fe0:	4210      	tst	r0, r2
 8002fe2:	d104      	bne.n	8002fee <__aeabi_dsub+0x70a>
 8002fe4:	465d      	mov	r5, fp
 8002fe6:	0004      	movs	r4, r0
 8002fe8:	08fb      	lsrs	r3, r7, #3
 8002fea:	0749      	lsls	r1, r1, #29
 8002fec:	430b      	orrs	r3, r1
 8002fee:	0f5a      	lsrs	r2, r3, #29
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	0752      	lsls	r2, r2, #29
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	e5fe      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	4a01      	ldr	r2, [pc, #4]	; (8003004 <__aeabi_dsub+0x720>)
 8002ffe:	001c      	movs	r4, r3
 8003000:	e513      	b.n	8002a2a <__aeabi_dsub+0x146>
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	000007ff 	.word	0x000007ff

08003008 <__aeabi_dcmpun>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	0005      	movs	r5, r0
 800300c:	480c      	ldr	r0, [pc, #48]	; (8003040 <__aeabi_dcmpun+0x38>)
 800300e:	031c      	lsls	r4, r3, #12
 8003010:	0016      	movs	r6, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	030a      	lsls	r2, r1, #12
 8003016:	0049      	lsls	r1, r1, #1
 8003018:	0b12      	lsrs	r2, r2, #12
 800301a:	0d49      	lsrs	r1, r1, #21
 800301c:	0b24      	lsrs	r4, r4, #12
 800301e:	0d5b      	lsrs	r3, r3, #21
 8003020:	4281      	cmp	r1, r0
 8003022:	d008      	beq.n	8003036 <__aeabi_dcmpun+0x2e>
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <__aeabi_dcmpun+0x38>)
 8003026:	2000      	movs	r0, #0
 8003028:	4293      	cmp	r3, r2
 800302a:	d103      	bne.n	8003034 <__aeabi_dcmpun+0x2c>
 800302c:	0020      	movs	r0, r4
 800302e:	4330      	orrs	r0, r6
 8003030:	1e43      	subs	r3, r0, #1
 8003032:	4198      	sbcs	r0, r3
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	2001      	movs	r0, #1
 8003038:	432a      	orrs	r2, r5
 800303a:	d1fb      	bne.n	8003034 <__aeabi_dcmpun+0x2c>
 800303c:	e7f2      	b.n	8003024 <__aeabi_dcmpun+0x1c>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	000007ff 	.word	0x000007ff

08003044 <__aeabi_d2iz>:
 8003044:	000a      	movs	r2, r1
 8003046:	b530      	push	{r4, r5, lr}
 8003048:	4c13      	ldr	r4, [pc, #76]	; (8003098 <__aeabi_d2iz+0x54>)
 800304a:	0053      	lsls	r3, r2, #1
 800304c:	0309      	lsls	r1, r1, #12
 800304e:	0005      	movs	r5, r0
 8003050:	0b09      	lsrs	r1, r1, #12
 8003052:	2000      	movs	r0, #0
 8003054:	0d5b      	lsrs	r3, r3, #21
 8003056:	0fd2      	lsrs	r2, r2, #31
 8003058:	42a3      	cmp	r3, r4
 800305a:	dd04      	ble.n	8003066 <__aeabi_d2iz+0x22>
 800305c:	480f      	ldr	r0, [pc, #60]	; (800309c <__aeabi_d2iz+0x58>)
 800305e:	4283      	cmp	r3, r0
 8003060:	dd02      	ble.n	8003068 <__aeabi_d2iz+0x24>
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <__aeabi_d2iz+0x5c>)
 8003064:	18d0      	adds	r0, r2, r3
 8003066:	bd30      	pop	{r4, r5, pc}
 8003068:	2080      	movs	r0, #128	; 0x80
 800306a:	0340      	lsls	r0, r0, #13
 800306c:	4301      	orrs	r1, r0
 800306e:	480d      	ldr	r0, [pc, #52]	; (80030a4 <__aeabi_d2iz+0x60>)
 8003070:	1ac0      	subs	r0, r0, r3
 8003072:	281f      	cmp	r0, #31
 8003074:	dd08      	ble.n	8003088 <__aeabi_d2iz+0x44>
 8003076:	480c      	ldr	r0, [pc, #48]	; (80030a8 <__aeabi_d2iz+0x64>)
 8003078:	1ac3      	subs	r3, r0, r3
 800307a:	40d9      	lsrs	r1, r3
 800307c:	000b      	movs	r3, r1
 800307e:	4258      	negs	r0, r3
 8003080:	2a00      	cmp	r2, #0
 8003082:	d1f0      	bne.n	8003066 <__aeabi_d2iz+0x22>
 8003084:	0018      	movs	r0, r3
 8003086:	e7ee      	b.n	8003066 <__aeabi_d2iz+0x22>
 8003088:	4c08      	ldr	r4, [pc, #32]	; (80030ac <__aeabi_d2iz+0x68>)
 800308a:	40c5      	lsrs	r5, r0
 800308c:	46a4      	mov	ip, r4
 800308e:	4463      	add	r3, ip
 8003090:	4099      	lsls	r1, r3
 8003092:	000b      	movs	r3, r1
 8003094:	432b      	orrs	r3, r5
 8003096:	e7f2      	b.n	800307e <__aeabi_d2iz+0x3a>
 8003098:	000003fe 	.word	0x000003fe
 800309c:	0000041d 	.word	0x0000041d
 80030a0:	7fffffff 	.word	0x7fffffff
 80030a4:	00000433 	.word	0x00000433
 80030a8:	00000413 	.word	0x00000413
 80030ac:	fffffbed 	.word	0xfffffbed

080030b0 <__aeabi_i2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d016      	beq.n	80030e4 <__aeabi_i2d+0x34>
 80030b6:	17c3      	asrs	r3, r0, #31
 80030b8:	18c5      	adds	r5, r0, r3
 80030ba:	405d      	eors	r5, r3
 80030bc:	0fc4      	lsrs	r4, r0, #31
 80030be:	0028      	movs	r0, r5
 80030c0:	f000 f894 	bl	80031ec <__clzsi2>
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <__aeabi_i2d+0x5c>)
 80030c6:	1a12      	subs	r2, r2, r0
 80030c8:	280a      	cmp	r0, #10
 80030ca:	dc16      	bgt.n	80030fa <__aeabi_i2d+0x4a>
 80030cc:	0003      	movs	r3, r0
 80030ce:	002e      	movs	r6, r5
 80030d0:	3315      	adds	r3, #21
 80030d2:	409e      	lsls	r6, r3
 80030d4:	230b      	movs	r3, #11
 80030d6:	1a18      	subs	r0, r3, r0
 80030d8:	40c5      	lsrs	r5, r0
 80030da:	0552      	lsls	r2, r2, #21
 80030dc:	032d      	lsls	r5, r5, #12
 80030de:	0b2d      	lsrs	r5, r5, #12
 80030e0:	0d53      	lsrs	r3, r2, #21
 80030e2:	e003      	b.n	80030ec <__aeabi_i2d+0x3c>
 80030e4:	2400      	movs	r4, #0
 80030e6:	2300      	movs	r3, #0
 80030e8:	2500      	movs	r5, #0
 80030ea:	2600      	movs	r6, #0
 80030ec:	051b      	lsls	r3, r3, #20
 80030ee:	432b      	orrs	r3, r5
 80030f0:	07e4      	lsls	r4, r4, #31
 80030f2:	4323      	orrs	r3, r4
 80030f4:	0030      	movs	r0, r6
 80030f6:	0019      	movs	r1, r3
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	380b      	subs	r0, #11
 80030fc:	4085      	lsls	r5, r0
 80030fe:	0552      	lsls	r2, r2, #21
 8003100:	032d      	lsls	r5, r5, #12
 8003102:	2600      	movs	r6, #0
 8003104:	0b2d      	lsrs	r5, r5, #12
 8003106:	0d53      	lsrs	r3, r2, #21
 8003108:	e7f0      	b.n	80030ec <__aeabi_i2d+0x3c>
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	0000041e 	.word	0x0000041e

08003110 <__aeabi_ui2d>:
 8003110:	b510      	push	{r4, lr}
 8003112:	1e04      	subs	r4, r0, #0
 8003114:	d010      	beq.n	8003138 <__aeabi_ui2d+0x28>
 8003116:	f000 f869 	bl	80031ec <__clzsi2>
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <__aeabi_ui2d+0x48>)
 800311c:	1a1b      	subs	r3, r3, r0
 800311e:	280a      	cmp	r0, #10
 8003120:	dc11      	bgt.n	8003146 <__aeabi_ui2d+0x36>
 8003122:	220b      	movs	r2, #11
 8003124:	0021      	movs	r1, r4
 8003126:	1a12      	subs	r2, r2, r0
 8003128:	40d1      	lsrs	r1, r2
 800312a:	3015      	adds	r0, #21
 800312c:	030a      	lsls	r2, r1, #12
 800312e:	055b      	lsls	r3, r3, #21
 8003130:	4084      	lsls	r4, r0
 8003132:	0b12      	lsrs	r2, r2, #12
 8003134:	0d5b      	lsrs	r3, r3, #21
 8003136:	e001      	b.n	800313c <__aeabi_ui2d+0x2c>
 8003138:	2300      	movs	r3, #0
 800313a:	2200      	movs	r2, #0
 800313c:	051b      	lsls	r3, r3, #20
 800313e:	4313      	orrs	r3, r2
 8003140:	0020      	movs	r0, r4
 8003142:	0019      	movs	r1, r3
 8003144:	bd10      	pop	{r4, pc}
 8003146:	0022      	movs	r2, r4
 8003148:	380b      	subs	r0, #11
 800314a:	4082      	lsls	r2, r0
 800314c:	055b      	lsls	r3, r3, #21
 800314e:	0312      	lsls	r2, r2, #12
 8003150:	2400      	movs	r4, #0
 8003152:	0b12      	lsrs	r2, r2, #12
 8003154:	0d5b      	lsrs	r3, r3, #21
 8003156:	e7f1      	b.n	800313c <__aeabi_ui2d+0x2c>
 8003158:	0000041e 	.word	0x0000041e

0800315c <__aeabi_f2d>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	0043      	lsls	r3, r0, #1
 8003160:	0246      	lsls	r6, r0, #9
 8003162:	0fc4      	lsrs	r4, r0, #31
 8003164:	20fe      	movs	r0, #254	; 0xfe
 8003166:	0e1b      	lsrs	r3, r3, #24
 8003168:	1c59      	adds	r1, r3, #1
 800316a:	0a75      	lsrs	r5, r6, #9
 800316c:	4208      	tst	r0, r1
 800316e:	d00c      	beq.n	800318a <__aeabi_f2d+0x2e>
 8003170:	22e0      	movs	r2, #224	; 0xe0
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4694      	mov	ip, r2
 8003176:	076d      	lsls	r5, r5, #29
 8003178:	0b36      	lsrs	r6, r6, #12
 800317a:	4463      	add	r3, ip
 800317c:	051b      	lsls	r3, r3, #20
 800317e:	4333      	orrs	r3, r6
 8003180:	07e4      	lsls	r4, r4, #31
 8003182:	4323      	orrs	r3, r4
 8003184:	0028      	movs	r0, r5
 8003186:	0019      	movs	r1, r3
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	2b00      	cmp	r3, #0
 800318c:	d114      	bne.n	80031b8 <__aeabi_f2d+0x5c>
 800318e:	2d00      	cmp	r5, #0
 8003190:	d01b      	beq.n	80031ca <__aeabi_f2d+0x6e>
 8003192:	0028      	movs	r0, r5
 8003194:	f000 f82a 	bl	80031ec <__clzsi2>
 8003198:	280a      	cmp	r0, #10
 800319a:	dc1c      	bgt.n	80031d6 <__aeabi_f2d+0x7a>
 800319c:	230b      	movs	r3, #11
 800319e:	002e      	movs	r6, r5
 80031a0:	1a1b      	subs	r3, r3, r0
 80031a2:	40de      	lsrs	r6, r3
 80031a4:	0003      	movs	r3, r0
 80031a6:	3315      	adds	r3, #21
 80031a8:	409d      	lsls	r5, r3
 80031aa:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <__aeabi_f2d+0x88>)
 80031ac:	0336      	lsls	r6, r6, #12
 80031ae:	1a12      	subs	r2, r2, r0
 80031b0:	0552      	lsls	r2, r2, #21
 80031b2:	0b36      	lsrs	r6, r6, #12
 80031b4:	0d53      	lsrs	r3, r2, #21
 80031b6:	e7e1      	b.n	800317c <__aeabi_f2d+0x20>
 80031b8:	2d00      	cmp	r5, #0
 80031ba:	d009      	beq.n	80031d0 <__aeabi_f2d+0x74>
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	0b36      	lsrs	r6, r6, #12
 80031c0:	0312      	lsls	r2, r2, #12
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <__aeabi_f2d+0x8c>)
 80031c4:	076d      	lsls	r5, r5, #29
 80031c6:	4316      	orrs	r6, r2
 80031c8:	e7d8      	b.n	800317c <__aeabi_f2d+0x20>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2600      	movs	r6, #0
 80031ce:	e7d5      	b.n	800317c <__aeabi_f2d+0x20>
 80031d0:	2600      	movs	r6, #0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <__aeabi_f2d+0x8c>)
 80031d4:	e7d2      	b.n	800317c <__aeabi_f2d+0x20>
 80031d6:	0003      	movs	r3, r0
 80031d8:	3b0b      	subs	r3, #11
 80031da:	409d      	lsls	r5, r3
 80031dc:	002e      	movs	r6, r5
 80031de:	2500      	movs	r5, #0
 80031e0:	e7e3      	b.n	80031aa <__aeabi_f2d+0x4e>
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	00000389 	.word	0x00000389
 80031e8:	000007ff 	.word	0x000007ff

080031ec <__clzsi2>:
 80031ec:	211c      	movs	r1, #28
 80031ee:	2301      	movs	r3, #1
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	4298      	cmp	r0, r3
 80031f4:	d301      	bcc.n	80031fa <__clzsi2+0xe>
 80031f6:	0c00      	lsrs	r0, r0, #16
 80031f8:	3910      	subs	r1, #16
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	4298      	cmp	r0, r3
 80031fe:	d301      	bcc.n	8003204 <__clzsi2+0x18>
 8003200:	0a00      	lsrs	r0, r0, #8
 8003202:	3908      	subs	r1, #8
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	4298      	cmp	r0, r3
 8003208:	d301      	bcc.n	800320e <__clzsi2+0x22>
 800320a:	0900      	lsrs	r0, r0, #4
 800320c:	3904      	subs	r1, #4
 800320e:	a202      	add	r2, pc, #8	; (adr r2, 8003218 <__clzsi2+0x2c>)
 8003210:	5c10      	ldrb	r0, [r2, r0]
 8003212:	1840      	adds	r0, r0, r1
 8003214:	4770      	bx	lr
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	02020304 	.word	0x02020304
 800321c:	01010101 	.word	0x01010101
	...

08003228 <__clzdi2>:
 8003228:	b510      	push	{r4, lr}
 800322a:	2900      	cmp	r1, #0
 800322c:	d103      	bne.n	8003236 <__clzdi2+0xe>
 800322e:	f7ff ffdd 	bl	80031ec <__clzsi2>
 8003232:	3020      	adds	r0, #32
 8003234:	e002      	b.n	800323c <__clzdi2+0x14>
 8003236:	0008      	movs	r0, r1
 8003238:	f7ff ffd8 	bl	80031ec <__clzsi2>
 800323c:	bd10      	pop	{r4, pc}
 800323e:	46c0      	nop			; (mov r8, r8)

08003240 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	0002      	movs	r2, r0
 8003248:	1dbb      	adds	r3, r7, #6
 800324a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800324c:	230f      	movs	r3, #15
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 8003254:	210e      	movs	r1, #14
 8003256:	187b      	adds	r3, r7, r1
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800325c:	187b      	adds	r3, r7, r1
 800325e:	222d      	movs	r2, #45	; 0x2d
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e01a      	b.n	800329a <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8003264:	240e      	movs	r4, #14
 8003266:	193b      	adds	r3, r7, r4
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b299      	uxth	r1, r3
 800326c:	193b      	adds	r3, r7, r4
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	3b2d      	subs	r3, #45	; 0x2d
 8003272:	4a3e      	ldr	r2, [pc, #248]	; (800336c <VL53L1X_SensorInit+0x12c>)
 8003274:	5cd2      	ldrb	r2, [r2, r3]
 8003276:	1dbb      	adds	r3, r7, #6
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	0018      	movs	r0, r3
 800327c:	f001 fb62 	bl	8004944 <VL53L1_WrByte>
 8003280:	0003      	movs	r3, r0
 8003282:	0019      	movs	r1, r3
 8003284:	220f      	movs	r2, #15
 8003286:	18bb      	adds	r3, r7, r2
 8003288:	18ba      	adds	r2, r7, r2
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003290:	193b      	adds	r3, r7, r4
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	193b      	adds	r3, r7, r4
 8003296:	3201      	adds	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	230e      	movs	r3, #14
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b87      	cmp	r3, #135	; 0x87
 80032a2:	d9df      	bls.n	8003264 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 80032a4:	1dbb      	adds	r3, r7, #6
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 f8b3 	bl	8003414 <VL53L1X_StartRanging>
 80032ae:	0003      	movs	r3, r0
 80032b0:	0019      	movs	r1, r3
 80032b2:	220f      	movs	r2, #15
 80032b4:	18bb      	adds	r3, r7, r2
 80032b6:	18ba      	adds	r2, r7, r2
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 80032be:	230d      	movs	r3, #13
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 80032c6:	e00f      	b.n	80032e8 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80032c8:	230d      	movs	r3, #13
 80032ca:	18fa      	adds	r2, r7, r3
 80032cc:	1dbb      	adds	r3, r7, #6
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	0011      	movs	r1, r2
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 f8dc 	bl	8003490 <VL53L1X_CheckForDataReady>
 80032d8:	0003      	movs	r3, r0
 80032da:	0019      	movs	r1, r3
 80032dc:	220f      	movs	r2, #15
 80032de:	18bb      	adds	r3, r7, r2
 80032e0:	18ba      	adds	r2, r7, r2
 80032e2:	7812      	ldrb	r2, [r2, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 80032e8:	230d      	movs	r3, #13
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ea      	beq.n	80032c8 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80032f2:	1dbb      	adds	r3, r7, #6
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f83a 	bl	8003370 <VL53L1X_ClearInterrupt>
 80032fc:	0003      	movs	r3, r0
 80032fe:	0019      	movs	r1, r3
 8003300:	240f      	movs	r4, #15
 8003302:	193b      	adds	r3, r7, r4
 8003304:	193a      	adds	r2, r7, r4
 8003306:	7812      	ldrb	r2, [r2, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 800330c:	1dbb      	adds	r3, r7, #6
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	0018      	movs	r0, r3
 8003312:	f000 f89e 	bl	8003452 <VL53L1X_StopRanging>
 8003316:	0003      	movs	r3, r0
 8003318:	0019      	movs	r1, r3
 800331a:	193b      	adds	r3, r7, r4
 800331c:	193a      	adds	r2, r7, r4
 800331e:	7812      	ldrb	r2, [r2, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8003324:	1dbb      	adds	r3, r7, #6
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	2209      	movs	r2, #9
 800332a:	2108      	movs	r1, #8
 800332c:	0018      	movs	r0, r3
 800332e:	f001 fb09 	bl	8004944 <VL53L1_WrByte>
 8003332:	0003      	movs	r3, r0
 8003334:	0019      	movs	r1, r3
 8003336:	193b      	adds	r3, r7, r4
 8003338:	193a      	adds	r2, r7, r4
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8003340:	1dbb      	adds	r3, r7, #6
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	210b      	movs	r1, #11
 8003348:	0018      	movs	r0, r3
 800334a:	f001 fafb 	bl	8004944 <VL53L1_WrByte>
 800334e:	0003      	movs	r3, r0
 8003350:	0019      	movs	r1, r3
 8003352:	193b      	adds	r3, r7, r4
 8003354:	193a      	adds	r2, r7, r4
 8003356:	7812      	ldrb	r2, [r2, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	701a      	strb	r2, [r3, #0]
	return status;
 800335c:	193b      	adds	r3, r7, r4
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b25b      	sxtb	r3, r3
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b005      	add	sp, #20
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	0800b578 	.word	0x0800b578

08003370 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	0002      	movs	r2, r0
 8003378:	1dbb      	adds	r3, r7, #6
 800337a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800337c:	240f      	movs	r4, #15
 800337e:	193b      	adds	r3, r7, r4
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8003384:	1dbb      	adds	r3, r7, #6
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	2201      	movs	r2, #1
 800338a:	2186      	movs	r1, #134	; 0x86
 800338c:	0018      	movs	r0, r3
 800338e:	f001 fad9 	bl	8004944 <VL53L1_WrByte>
 8003392:	0003      	movs	r3, r0
 8003394:	0019      	movs	r1, r3
 8003396:	193b      	adds	r3, r7, r4
 8003398:	193a      	adds	r2, r7, r4
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	701a      	strb	r2, [r3, #0]
	return status;
 80033a0:	193b      	adds	r3, r7, r4
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	b25b      	sxtb	r3, r3
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b005      	add	sp, #20
 80033ac:	bd90      	pop	{r4, r7, pc}

080033ae <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 80033ae:	b5b0      	push	{r4, r5, r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	0002      	movs	r2, r0
 80033b6:	6039      	str	r1, [r7, #0]
 80033b8:	1dbb      	adds	r3, r7, #6
 80033ba:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80033bc:	240f      	movs	r4, #15
 80033be:	193b      	adds	r3, r7, r4
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80033c4:	250e      	movs	r5, #14
 80033c6:	197a      	adds	r2, r7, r5
 80033c8:	1dbb      	adds	r3, r7, #6
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	2130      	movs	r1, #48	; 0x30
 80033ce:	0018      	movs	r0, r3
 80033d0:	f001 fb7e 	bl	8004ad0 <VL53L1_RdByte>
 80033d4:	0003      	movs	r3, r0
 80033d6:	0019      	movs	r1, r3
 80033d8:	0020      	movs	r0, r4
 80033da:	183b      	adds	r3, r7, r0
 80033dc:	183a      	adds	r2, r7, r0
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 80033e4:	197b      	adds	r3, r7, r5
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2210      	movs	r2, #16
 80033ea:	4013      	ands	r3, r2
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	197b      	adds	r3, r7, r5
 80033f0:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 80033f2:	197b      	adds	r3, r7, r5
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	425a      	negs	r2, r3
 80033fc:	4153      	adcs	r3, r2
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	001a      	movs	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	701a      	strb	r2, [r3, #0]
	return status;
 8003406:	183b      	adds	r3, r7, r0
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b25b      	sxtb	r3, r3
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b004      	add	sp, #16
 8003412:	bdb0      	pop	{r4, r5, r7, pc}

08003414 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	0002      	movs	r2, r0
 800341c:	1dbb      	adds	r3, r7, #6
 800341e:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003420:	240f      	movs	r4, #15
 8003422:	193b      	adds	r3, r7, r4
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8003428:	1dbb      	adds	r3, r7, #6
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	2187      	movs	r1, #135	; 0x87
 8003430:	0018      	movs	r0, r3
 8003432:	f001 fa87 	bl	8004944 <VL53L1_WrByte>
 8003436:	0003      	movs	r3, r0
 8003438:	0019      	movs	r1, r3
 800343a:	193b      	adds	r3, r7, r4
 800343c:	193a      	adds	r2, r7, r4
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	701a      	strb	r2, [r3, #0]
	return status;
 8003444:	193b      	adds	r3, r7, r4
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	b25b      	sxtb	r3, r3
}
 800344a:	0018      	movs	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	b005      	add	sp, #20
 8003450:	bd90      	pop	{r4, r7, pc}

08003452 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8003452:	b590      	push	{r4, r7, lr}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	0002      	movs	r2, r0
 800345a:	1dbb      	adds	r3, r7, #6
 800345c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800345e:	240f      	movs	r4, #15
 8003460:	193b      	adds	r3, r7, r4
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8003466:	1dbb      	adds	r3, r7, #6
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	2187      	movs	r1, #135	; 0x87
 800346e:	0018      	movs	r0, r3
 8003470:	f001 fa68 	bl	8004944 <VL53L1_WrByte>
 8003474:	0003      	movs	r3, r0
 8003476:	0019      	movs	r1, r3
 8003478:	193b      	adds	r3, r7, r4
 800347a:	193a      	adds	r2, r7, r4
 800347c:	7812      	ldrb	r2, [r2, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	701a      	strb	r2, [r3, #0]
	return status;
 8003482:	193b      	adds	r3, r7, r4
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b25b      	sxtb	r3, r3
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b005      	add	sp, #20
 800348e:	bd90      	pop	{r4, r7, pc}

08003490 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	0002      	movs	r2, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	1dbb      	adds	r3, r7, #6
 800349c:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800349e:	240f      	movs	r4, #15
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80034a6:	250d      	movs	r5, #13
 80034a8:	197a      	adds	r2, r7, r5
 80034aa:	1dbb      	adds	r3, r7, #6
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	0011      	movs	r1, r2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff ff7c 	bl	80033ae <VL53L1X_GetInterruptPolarity>
 80034b6:	0003      	movs	r3, r0
 80034b8:	0019      	movs	r1, r3
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	193a      	adds	r2, r7, r4
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80034c4:	260e      	movs	r6, #14
 80034c6:	19ba      	adds	r2, r7, r6
 80034c8:	1dbb      	adds	r3, r7, #6
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	2131      	movs	r1, #49	; 0x31
 80034ce:	0018      	movs	r0, r3
 80034d0:	f001 fafe 	bl	8004ad0 <VL53L1_RdByte>
 80034d4:	0003      	movs	r3, r0
 80034d6:	0019      	movs	r1, r3
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	193a      	adds	r2, r7, r4
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80034e2:	193b      	adds	r3, r7, r4
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10f      	bne.n	800350c <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 80034ec:	19bb      	adds	r3, r7, r6
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	001a      	movs	r2, r3
 80034f2:	2301      	movs	r3, #1
 80034f4:	4013      	ands	r3, r2
 80034f6:	197a      	adds	r2, r7, r5
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d103      	bne.n	8003506 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e002      	b.n	800350c <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800350c:	230f      	movs	r3, #15
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	b25b      	sxtb	r3, r3
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b005      	add	sp, #20
 800351a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800351c <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 800351c:	b5b0      	push	{r4, r5, r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	0002      	movs	r2, r0
 8003524:	1dbb      	adds	r3, r7, #6
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	1c0a      	adds	r2, r1, #0
 800352c:	801a      	strh	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 800352e:	240f      	movs	r4, #15
 8003530:	193b      	adds	r3, r7, r4
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8003536:	250c      	movs	r5, #12
 8003538:	197a      	adds	r2, r7, r5
 800353a:	1dbb      	adds	r3, r7, #6
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	0011      	movs	r1, r2
 8003540:	0018      	movs	r0, r3
 8003542:	f000 faa5 	bl	8003a90 <VL53L1X_GetDistanceMode>
 8003546:	0003      	movs	r3, r0
 8003548:	0019      	movs	r1, r3
 800354a:	193b      	adds	r3, r7, r4
 800354c:	193a      	adds	r2, r7, r4
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	701a      	strb	r2, [r3, #0]
	if (DM == 0)
 8003554:	197b      	adds	r3, r7, r5
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <VL53L1X_SetTimingBudgetInMs+0x44>
		return 1;
 800355c:	2301      	movs	r3, #1
 800355e:	e11a      	b.n	8003796 <VL53L1X_SetTimingBudgetInMs+0x27a>
	else if (DM == 1) {	/* Short DistanceMode */
 8003560:	230c      	movs	r3, #12
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d000      	beq.n	800356c <VL53L1X_SetTimingBudgetInMs+0x50>
 800356a:	e092      	b.n	8003692 <VL53L1X_SetTimingBudgetInMs+0x176>
		switch (TimingBudgetInMs) {
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	22fa      	movs	r2, #250	; 0xfa
 8003572:	0052      	lsls	r2, r2, #1
 8003574:	4293      	cmp	r3, r2
 8003576:	d100      	bne.n	800357a <VL53L1X_SetTimingBudgetInMs+0x5e>
 8003578:	e077      	b.n	800366a <VL53L1X_SetTimingBudgetInMs+0x14e>
 800357a:	22fa      	movs	r2, #250	; 0xfa
 800357c:	0052      	lsls	r2, r2, #1
 800357e:	4293      	cmp	r3, r2
 8003580:	dd00      	ble.n	8003584 <VL53L1X_SetTimingBudgetInMs+0x68>
 8003582:	e081      	b.n	8003688 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8003584:	2bc8      	cmp	r3, #200	; 0xc8
 8003586:	d100      	bne.n	800358a <VL53L1X_SetTimingBudgetInMs+0x6e>
 8003588:	e060      	b.n	800364c <VL53L1X_SetTimingBudgetInMs+0x130>
 800358a:	dd00      	ble.n	800358e <VL53L1X_SetTimingBudgetInMs+0x72>
 800358c:	e07c      	b.n	8003688 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d04c      	beq.n	800362c <VL53L1X_SetTimingBudgetInMs+0x110>
 8003592:	dd00      	ble.n	8003596 <VL53L1X_SetTimingBudgetInMs+0x7a>
 8003594:	e078      	b.n	8003688 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8003596:	2b32      	cmp	r3, #50	; 0x32
 8003598:	d037      	beq.n	800360a <VL53L1X_SetTimingBudgetInMs+0xee>
 800359a:	dd00      	ble.n	800359e <VL53L1X_SetTimingBudgetInMs+0x82>
 800359c:	e074      	b.n	8003688 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800359e:	2b21      	cmp	r3, #33	; 0x21
 80035a0:	d024      	beq.n	80035ec <VL53L1X_SetTimingBudgetInMs+0xd0>
 80035a2:	dd00      	ble.n	80035a6 <VL53L1X_SetTimingBudgetInMs+0x8a>
 80035a4:	e070      	b.n	8003688 <VL53L1X_SetTimingBudgetInMs+0x16c>
 80035a6:	2b0f      	cmp	r3, #15
 80035a8:	d002      	beq.n	80035b0 <VL53L1X_SetTimingBudgetInMs+0x94>
 80035aa:	2b14      	cmp	r3, #20
 80035ac:	d00f      	beq.n	80035ce <VL53L1X_SetTimingBudgetInMs+0xb2>
 80035ae:	e06b      	b.n	8003688 <VL53L1X_SetTimingBudgetInMs+0x16c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80035b0:	1dbb      	adds	r3, r7, #6
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	221d      	movs	r2, #29
 80035b6:	215e      	movs	r1, #94	; 0x5e
 80035b8:	0018      	movs	r0, r3
 80035ba:	f001 f9ff 	bl	80049bc <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80035be:	1dbb      	adds	r3, r7, #6
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	2227      	movs	r2, #39	; 0x27
 80035c4:	2161      	movs	r1, #97	; 0x61
 80035c6:	0018      	movs	r0, r3
 80035c8:	f001 f9f8 	bl	80049bc <VL53L1_WrWord>
					0x0027);
			break;
 80035cc:	e0df      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80035ce:	1dbb      	adds	r3, r7, #6
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	2251      	movs	r2, #81	; 0x51
 80035d4:	215e      	movs	r1, #94	; 0x5e
 80035d6:	0018      	movs	r0, r3
 80035d8:	f001 f9f0 	bl	80049bc <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80035dc:	1dbb      	adds	r3, r7, #6
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	226e      	movs	r2, #110	; 0x6e
 80035e2:	2161      	movs	r1, #97	; 0x61
 80035e4:	0018      	movs	r0, r3
 80035e6:	f001 f9e9 	bl	80049bc <VL53L1_WrWord>
					0x006E);
			break;
 80035ea:	e0d0      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80035ec:	1dbb      	adds	r3, r7, #6
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	22d6      	movs	r2, #214	; 0xd6
 80035f2:	215e      	movs	r1, #94	; 0x5e
 80035f4:	0018      	movs	r0, r3
 80035f6:	f001 f9e1 	bl	80049bc <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80035fa:	1dbb      	adds	r3, r7, #6
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	226e      	movs	r2, #110	; 0x6e
 8003600:	2161      	movs	r1, #97	; 0x61
 8003602:	0018      	movs	r0, r3
 8003604:	f001 f9da 	bl	80049bc <VL53L1_WrWord>
					0x006E);
			break;
 8003608:	e0c1      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800360a:	23d7      	movs	r3, #215	; 0xd7
 800360c:	005a      	lsls	r2, r3, #1
 800360e:	1dbb      	adds	r3, r7, #6
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	215e      	movs	r1, #94	; 0x5e
 8003614:	0018      	movs	r0, r3
 8003616:	f001 f9d1 	bl	80049bc <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800361a:	23f4      	movs	r3, #244	; 0xf4
 800361c:	005a      	lsls	r2, r3, #1
 800361e:	1dbb      	adds	r3, r7, #6
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	2161      	movs	r1, #97	; 0x61
 8003624:	0018      	movs	r0, r3
 8003626:	f001 f9c9 	bl	80049bc <VL53L1_WrWord>
					0x01E8);
			break;
 800362a:	e0b0      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800362c:	4a5c      	ldr	r2, [pc, #368]	; (80037a0 <VL53L1X_SetTimingBudgetInMs+0x284>)
 800362e:	1dbb      	adds	r3, r7, #6
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	215e      	movs	r1, #94	; 0x5e
 8003634:	0018      	movs	r0, r3
 8003636:	f001 f9c1 	bl	80049bc <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800363a:	23e2      	movs	r3, #226	; 0xe2
 800363c:	009a      	lsls	r2, r3, #2
 800363e:	1dbb      	adds	r3, r7, #6
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	2161      	movs	r1, #97	; 0x61
 8003644:	0018      	movs	r0, r3
 8003646:	f001 f9b9 	bl	80049bc <VL53L1_WrWord>
					0x0388);
			break;
 800364a:	e0a0      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800364c:	4a55      	ldr	r2, [pc, #340]	; (80037a4 <VL53L1X_SetTimingBudgetInMs+0x288>)
 800364e:	1dbb      	adds	r3, r7, #6
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	215e      	movs	r1, #94	; 0x5e
 8003654:	0018      	movs	r0, r3
 8003656:	f001 f9b1 	bl	80049bc <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800365a:	4a53      	ldr	r2, [pc, #332]	; (80037a8 <VL53L1X_SetTimingBudgetInMs+0x28c>)
 800365c:	1dbb      	adds	r3, r7, #6
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	2161      	movs	r1, #97	; 0x61
 8003662:	0018      	movs	r0, r3
 8003664:	f001 f9aa 	bl	80049bc <VL53L1_WrWord>
					0x0496);
			break;
 8003668:	e091      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800366a:	4a50      	ldr	r2, [pc, #320]	; (80037ac <VL53L1X_SetTimingBudgetInMs+0x290>)
 800366c:	1dbb      	adds	r3, r7, #6
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	215e      	movs	r1, #94	; 0x5e
 8003672:	0018      	movs	r0, r3
 8003674:	f001 f9a2 	bl	80049bc <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003678:	4a4d      	ldr	r2, [pc, #308]	; (80037b0 <VL53L1X_SetTimingBudgetInMs+0x294>)
 800367a:	1dbb      	adds	r3, r7, #6
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	2161      	movs	r1, #97	; 0x61
 8003680:	0018      	movs	r0, r3
 8003682:	f001 f99b 	bl	80049bc <VL53L1_WrWord>
					0x05C1);
			break;
 8003686:	e082      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8003688:	230f      	movs	r3, #15
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2201      	movs	r2, #1
 800368e:	701a      	strb	r2, [r3, #0]
			break;
 8003690:	e07d      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		}
	} else {
		switch (TimingBudgetInMs) {
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	22fa      	movs	r2, #250	; 0xfa
 8003698:	0052      	lsls	r2, r2, #1
 800369a:	4293      	cmp	r3, r2
 800369c:	d100      	bne.n	80036a0 <VL53L1X_SetTimingBudgetInMs+0x184>
 800369e:	e062      	b.n	8003766 <VL53L1X_SetTimingBudgetInMs+0x24a>
 80036a0:	22fa      	movs	r2, #250	; 0xfa
 80036a2:	0052      	lsls	r2, r2, #1
 80036a4:	4293      	cmp	r3, r2
 80036a6:	dd00      	ble.n	80036aa <VL53L1X_SetTimingBudgetInMs+0x18e>
 80036a8:	e06c      	b.n	8003784 <VL53L1X_SetTimingBudgetInMs+0x268>
 80036aa:	2bc8      	cmp	r3, #200	; 0xc8
 80036ac:	d04b      	beq.n	8003746 <VL53L1X_SetTimingBudgetInMs+0x22a>
 80036ae:	dd00      	ble.n	80036b2 <VL53L1X_SetTimingBudgetInMs+0x196>
 80036b0:	e068      	b.n	8003784 <VL53L1X_SetTimingBudgetInMs+0x268>
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d036      	beq.n	8003724 <VL53L1X_SetTimingBudgetInMs+0x208>
 80036b6:	dd00      	ble.n	80036ba <VL53L1X_SetTimingBudgetInMs+0x19e>
 80036b8:	e064      	b.n	8003784 <VL53L1X_SetTimingBudgetInMs+0x268>
 80036ba:	2b32      	cmp	r3, #50	; 0x32
 80036bc:	d023      	beq.n	8003706 <VL53L1X_SetTimingBudgetInMs+0x1ea>
 80036be:	dc61      	bgt.n	8003784 <VL53L1X_SetTimingBudgetInMs+0x268>
 80036c0:	2b14      	cmp	r3, #20
 80036c2:	d002      	beq.n	80036ca <VL53L1X_SetTimingBudgetInMs+0x1ae>
 80036c4:	2b21      	cmp	r3, #33	; 0x21
 80036c6:	d00f      	beq.n	80036e8 <VL53L1X_SetTimingBudgetInMs+0x1cc>
 80036c8:	e05c      	b.n	8003784 <VL53L1X_SetTimingBudgetInMs+0x268>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	221e      	movs	r2, #30
 80036d0:	215e      	movs	r1, #94	; 0x5e
 80036d2:	0018      	movs	r0, r3
 80036d4:	f001 f972 	bl	80049bc <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	2222      	movs	r2, #34	; 0x22
 80036de:	2161      	movs	r1, #97	; 0x61
 80036e0:	0018      	movs	r0, r3
 80036e2:	f001 f96b 	bl	80049bc <VL53L1_WrWord>
					0x0022);
			break;
 80036e6:	e052      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	2260      	movs	r2, #96	; 0x60
 80036ee:	215e      	movs	r1, #94	; 0x5e
 80036f0:	0018      	movs	r0, r3
 80036f2:	f001 f963 	bl	80049bc <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80036f6:	1dbb      	adds	r3, r7, #6
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	226e      	movs	r2, #110	; 0x6e
 80036fc:	2161      	movs	r1, #97	; 0x61
 80036fe:	0018      	movs	r0, r3
 8003700:	f001 f95c 	bl	80049bc <VL53L1_WrWord>
					0x006E);
			break;
 8003704:	e043      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003706:	1dbb      	adds	r3, r7, #6
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	22ad      	movs	r2, #173	; 0xad
 800370c:	215e      	movs	r1, #94	; 0x5e
 800370e:	0018      	movs	r0, r3
 8003710:	f001 f954 	bl	80049bc <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003714:	1dbb      	adds	r3, r7, #6
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	22c6      	movs	r2, #198	; 0xc6
 800371a:	2161      	movs	r1, #97	; 0x61
 800371c:	0018      	movs	r0, r3
 800371e:	f001 f94d 	bl	80049bc <VL53L1_WrWord>
					0x00C6);
			break;
 8003722:	e034      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003724:	23e6      	movs	r3, #230	; 0xe6
 8003726:	005a      	lsls	r2, r3, #1
 8003728:	1dbb      	adds	r3, r7, #6
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	215e      	movs	r1, #94	; 0x5e
 800372e:	0018      	movs	r0, r3
 8003730:	f001 f944 	bl	80049bc <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003734:	23f5      	movs	r3, #245	; 0xf5
 8003736:	005a      	lsls	r2, r3, #1
 8003738:	1dbb      	adds	r3, r7, #6
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	2161      	movs	r1, #97	; 0x61
 800373e:	0018      	movs	r0, r3
 8003740:	f001 f93c 	bl	80049bc <VL53L1_WrWord>
					0x01EA);
			break;
 8003744:	e023      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003746:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <VL53L1X_SetTimingBudgetInMs+0x298>)
 8003748:	1dbb      	adds	r3, r7, #6
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	215e      	movs	r1, #94	; 0x5e
 800374e:	0018      	movs	r0, r3
 8003750:	f001 f934 	bl	80049bc <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003754:	23be      	movs	r3, #190	; 0xbe
 8003756:	009a      	lsls	r2, r3, #2
 8003758:	1dbb      	adds	r3, r7, #6
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	2161      	movs	r1, #97	; 0x61
 800375e:	0018      	movs	r0, r3
 8003760:	f001 f92c 	bl	80049bc <VL53L1_WrWord>
					0x02F8);
			break;
 8003764:	e013      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <VL53L1X_SetTimingBudgetInMs+0x29c>)
 8003768:	1dbb      	adds	r3, r7, #6
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	215e      	movs	r1, #94	; 0x5e
 800376e:	0018      	movs	r0, r3
 8003770:	f001 f924 	bl	80049bc <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003774:	4a11      	ldr	r2, [pc, #68]	; (80037bc <VL53L1X_SetTimingBudgetInMs+0x2a0>)
 8003776:	1dbb      	adds	r3, r7, #6
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	2161      	movs	r1, #97	; 0x61
 800377c:	0018      	movs	r0, r3
 800377e:	f001 f91d 	bl	80049bc <VL53L1_WrWord>
					0x04A4);
			break;
 8003782:	e004      	b.n	800378e <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8003784:	230f      	movs	r3, #15
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
			break;
 800378c:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 800378e:	230f      	movs	r3, #15
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b25b      	sxtb	r3, r3
}
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bdb0      	pop	{r4, r5, r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	000002e1 	.word	0x000002e1
 80037a4:	000003e1 	.word	0x000003e1
 80037a8:	00000496 	.word	0x00000496
 80037ac:	00000591 	.word	0x00000591
 80037b0:	000005c1 	.word	0x000005c1
 80037b4:	000002d9 	.word	0x000002d9
 80037b8:	0000048f 	.word	0x0000048f
 80037bc:	000004a4 	.word	0x000004a4

080037c0 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	0002      	movs	r2, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	1dbb      	adds	r3, r7, #6
 80037cc:	801a      	strh	r2, [r3, #0]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 80037ce:	240f      	movs	r4, #15
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 80037d6:	250c      	movs	r5, #12
 80037d8:	197a      	adds	r2, r7, r5
 80037da:	1dbb      	adds	r3, r7, #6
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	215e      	movs	r1, #94	; 0x5e
 80037e0:	0018      	movs	r0, r3
 80037e2:	f001 f9bb 	bl	8004b5c <VL53L1_RdWord>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0019      	movs	r1, r3
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	193a      	adds	r2, r7, r4
 80037ee:	7812      	ldrb	r2, [r2, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	701a      	strb	r2, [r3, #0]
	switch (Temp) {
 80037f4:	197b      	adds	r3, r7, r5
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	4a37      	ldr	r2, [pc, #220]	; (80038d8 <VL53L1X_GetTimingBudgetInMs+0x118>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d100      	bne.n	8003800 <VL53L1X_GetTimingBudgetInMs+0x40>
 80037fe:	e057      	b.n	80038b0 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8003800:	4a35      	ldr	r2, [pc, #212]	; (80038d8 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8003802:	4293      	cmp	r3, r2
 8003804:	dd00      	ble.n	8003808 <VL53L1X_GetTimingBudgetInMs+0x48>
 8003806:	e058      	b.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003808:	4a34      	ldr	r2, [pc, #208]	; (80038dc <VL53L1X_GetTimingBudgetInMs+0x11c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d100      	bne.n	8003810 <VL53L1X_GetTimingBudgetInMs+0x50>
 800380e:	e04f      	b.n	80038b0 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8003810:	2292      	movs	r2, #146	; 0x92
 8003812:	00d2      	lsls	r2, r2, #3
 8003814:	4293      	cmp	r3, r2
 8003816:	db00      	blt.n	800381a <VL53L1X_GetTimingBudgetInMs+0x5a>
 8003818:	e04f      	b.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 800381a:	4a31      	ldr	r2, [pc, #196]	; (80038e0 <VL53L1X_GetTimingBudgetInMs+0x120>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d043      	beq.n	80038a8 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8003820:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <VL53L1X_GetTimingBudgetInMs+0x120>)
 8003822:	4293      	cmp	r3, r2
 8003824:	dc49      	bgt.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003826:	4a2f      	ldr	r2, [pc, #188]	; (80038e4 <VL53L1X_GetTimingBudgetInMs+0x124>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d039      	beq.n	80038a0 <VL53L1X_GetTimingBudgetInMs+0xe0>
 800382c:	4a2d      	ldr	r2, [pc, #180]	; (80038e4 <VL53L1X_GetTimingBudgetInMs+0x124>)
 800382e:	4293      	cmp	r3, r2
 8003830:	dc43      	bgt.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003832:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <VL53L1X_GetTimingBudgetInMs+0x128>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d037      	beq.n	80038a8 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8003838:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <VL53L1X_GetTimingBudgetInMs+0x128>)
 800383a:	4293      	cmp	r3, r2
 800383c:	dc3d      	bgt.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 800383e:	22e6      	movs	r2, #230	; 0xe6
 8003840:	0052      	lsls	r2, r2, #1
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8003846:	22e6      	movs	r2, #230	; 0xe6
 8003848:	0052      	lsls	r2, r2, #1
 800384a:	4293      	cmp	r3, r2
 800384c:	dc35      	bgt.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 800384e:	22d7      	movs	r2, #215	; 0xd7
 8003850:	0052      	lsls	r2, r2, #1
 8003852:	4293      	cmp	r3, r2
 8003854:	d020      	beq.n	8003898 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8003856:	22d7      	movs	r2, #215	; 0xd7
 8003858:	0052      	lsls	r2, r2, #1
 800385a:	4293      	cmp	r3, r2
 800385c:	dc2d      	bgt.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 800385e:	2bd6      	cmp	r3, #214	; 0xd6
 8003860:	d016      	beq.n	8003890 <VL53L1X_GetTimingBudgetInMs+0xd0>
 8003862:	dc2a      	bgt.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003864:	2bad      	cmp	r3, #173	; 0xad
 8003866:	d017      	beq.n	8003898 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8003868:	dc27      	bgt.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 800386a:	2b60      	cmp	r3, #96	; 0x60
 800386c:	d010      	beq.n	8003890 <VL53L1X_GetTimingBudgetInMs+0xd0>
 800386e:	dc24      	bgt.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003870:	2b51      	cmp	r3, #81	; 0x51
 8003872:	d009      	beq.n	8003888 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8003874:	dc21      	bgt.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003876:	2b1d      	cmp	r3, #29
 8003878:	d002      	beq.n	8003880 <VL53L1X_GetTimingBudgetInMs+0xc0>
 800387a:	2b1e      	cmp	r3, #30
 800387c:	d004      	beq.n	8003888 <VL53L1X_GetTimingBudgetInMs+0xc8>
 800387e:	e01c      	b.n	80038ba <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x001D :
			*pTimingBudget = 15;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	220f      	movs	r2, #15
 8003884:	801a      	strh	r2, [r3, #0]
			break;
 8003886:	e01f      	b.n	80038c8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2214      	movs	r2, #20
 800388c:	801a      	strh	r2, [r3, #0]
			break;
 800388e:	e01b      	b.n	80038c8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2221      	movs	r2, #33	; 0x21
 8003894:	801a      	strh	r2, [r3, #0]
			break;
 8003896:	e017      	b.n	80038c8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2232      	movs	r2, #50	; 0x32
 800389c:	801a      	strh	r2, [r3, #0]
			break;
 800389e:	e013      	b.n	80038c8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2264      	movs	r2, #100	; 0x64
 80038a4:	801a      	strh	r2, [r3, #0]
			break;
 80038a6:	e00f      	b.n	80038c8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	22c8      	movs	r2, #200	; 0xc8
 80038ac:	801a      	strh	r2, [r3, #0]
			break;
 80038ae:	e00b      	b.n	80038c8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	22fa      	movs	r2, #250	; 0xfa
 80038b4:	0052      	lsls	r2, r2, #1
 80038b6:	801a      	strh	r2, [r3, #0]
			break;
 80038b8:	e006      	b.n	80038c8 <VL53L1X_GetTimingBudgetInMs+0x108>
		default:
			status = 1;
 80038ba:	230f      	movs	r3, #15
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
			*pTimingBudget = 0;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2200      	movs	r2, #0
 80038c6:	801a      	strh	r2, [r3, #0]
	}
	return status;
 80038c8:	230f      	movs	r3, #15
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b25b      	sxtb	r3, r3
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b004      	add	sp, #16
 80038d6:	bdb0      	pop	{r4, r5, r7, pc}
 80038d8:	00000591 	.word	0x00000591
 80038dc:	0000048f 	.word	0x0000048f
 80038e0:	000003e1 	.word	0x000003e1
 80038e4:	000002e1 	.word	0x000002e1
 80038e8:	000002d9 	.word	0x000002d9

080038ec <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 80038ec:	b5b0      	push	{r4, r5, r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	0002      	movs	r2, r0
 80038f4:	1dbb      	adds	r3, r7, #6
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	1c0a      	adds	r2, r1, #0
 80038fc:	801a      	strh	r2, [r3, #0]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 80038fe:	240f      	movs	r4, #15
 8003900:	193b      	adds	r3, r7, r4
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8003906:	230c      	movs	r3, #12
 8003908:	18fa      	adds	r2, r7, r3
 800390a:	1dbb      	adds	r3, r7, #6
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	0011      	movs	r1, r2
 8003910:	0018      	movs	r0, r3
 8003912:	f7ff ff55 	bl	80037c0 <VL53L1X_GetTimingBudgetInMs>
 8003916:	0003      	movs	r3, r0
 8003918:	0019      	movs	r1, r3
 800391a:	193b      	adds	r3, r7, r4
 800391c:	193a      	adds	r2, r7, r4
 800391e:	7812      	ldrb	r2, [r2, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	701a      	strb	r2, [r3, #0]
	if (status != 0)
 8003924:	193b      	adds	r3, r7, r4
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b25b      	sxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <VL53L1X_SetDistanceMode+0x46>
		return 1;
 800392e:	2301      	movs	r3, #1
 8003930:	e0a1      	b.n	8003a76 <VL53L1X_SetDistanceMode+0x18a>
	switch (DM) {
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d002      	beq.n	8003940 <VL53L1X_SetDistanceMode+0x54>
 800393a:	2b02      	cmp	r3, #2
 800393c:	d03e      	beq.n	80039bc <VL53L1X_SetDistanceMode+0xd0>
 800393e:	e07b      	b.n	8003a38 <VL53L1X_SetDistanceMode+0x14c>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8003940:	250f      	movs	r5, #15
 8003942:	197c      	adds	r4, r7, r5
 8003944:	1dbb      	adds	r3, r7, #6
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	2214      	movs	r2, #20
 800394a:	214b      	movs	r1, #75	; 0x4b
 800394c:	0018      	movs	r0, r3
 800394e:	f000 fff9 	bl	8004944 <VL53L1_WrByte>
 8003952:	0003      	movs	r3, r0
 8003954:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8003956:	197c      	adds	r4, r7, r5
 8003958:	1dbb      	adds	r3, r7, #6
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	2207      	movs	r2, #7
 800395e:	2160      	movs	r1, #96	; 0x60
 8003960:	0018      	movs	r0, r3
 8003962:	f000 ffef 	bl	8004944 <VL53L1_WrByte>
 8003966:	0003      	movs	r3, r0
 8003968:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 800396a:	197c      	adds	r4, r7, r5
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	2205      	movs	r2, #5
 8003972:	2163      	movs	r1, #99	; 0x63
 8003974:	0018      	movs	r0, r3
 8003976:	f000 ffe5 	bl	8004944 <VL53L1_WrByte>
 800397a:	0003      	movs	r3, r0
 800397c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 800397e:	197c      	adds	r4, r7, r5
 8003980:	1dbb      	adds	r3, r7, #6
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	2238      	movs	r2, #56	; 0x38
 8003986:	2169      	movs	r1, #105	; 0x69
 8003988:	0018      	movs	r0, r3
 800398a:	f000 ffdb 	bl	8004944 <VL53L1_WrByte>
 800398e:	0003      	movs	r3, r0
 8003990:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8003992:	197c      	adds	r4, r7, r5
 8003994:	4a3a      	ldr	r2, [pc, #232]	; (8003a80 <VL53L1X_SetDistanceMode+0x194>)
 8003996:	1dbb      	adds	r3, r7, #6
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	2178      	movs	r1, #120	; 0x78
 800399c:	0018      	movs	r0, r3
 800399e:	f001 f80d 	bl	80049bc <VL53L1_WrWord>
 80039a2:	0003      	movs	r3, r0
 80039a4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 80039a6:	197c      	adds	r4, r7, r5
 80039a8:	4a36      	ldr	r2, [pc, #216]	; (8003a84 <VL53L1X_SetDistanceMode+0x198>)
 80039aa:	1dbb      	adds	r3, r7, #6
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	217a      	movs	r1, #122	; 0x7a
 80039b0:	0018      	movs	r0, r3
 80039b2:	f001 f803 	bl	80049bc <VL53L1_WrWord>
 80039b6:	0003      	movs	r3, r0
 80039b8:	7023      	strb	r3, [r4, #0]
		break;
 80039ba:	e042      	b.n	8003a42 <VL53L1X_SetDistanceMode+0x156>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 80039bc:	250f      	movs	r5, #15
 80039be:	197c      	adds	r4, r7, r5
 80039c0:	1dbb      	adds	r3, r7, #6
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	220a      	movs	r2, #10
 80039c6:	214b      	movs	r1, #75	; 0x4b
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 ffbb 	bl	8004944 <VL53L1_WrByte>
 80039ce:	0003      	movs	r3, r0
 80039d0:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 80039d2:	197c      	adds	r4, r7, r5
 80039d4:	1dbb      	adds	r3, r7, #6
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	220f      	movs	r2, #15
 80039da:	2160      	movs	r1, #96	; 0x60
 80039dc:	0018      	movs	r0, r3
 80039de:	f000 ffb1 	bl	8004944 <VL53L1_WrByte>
 80039e2:	0003      	movs	r3, r0
 80039e4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 80039e6:	197c      	adds	r4, r7, r5
 80039e8:	1dbb      	adds	r3, r7, #6
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	220d      	movs	r2, #13
 80039ee:	2163      	movs	r1, #99	; 0x63
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 ffa7 	bl	8004944 <VL53L1_WrByte>
 80039f6:	0003      	movs	r3, r0
 80039f8:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 80039fa:	197c      	adds	r4, r7, r5
 80039fc:	1dbb      	adds	r3, r7, #6
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	22b8      	movs	r2, #184	; 0xb8
 8003a02:	2169      	movs	r1, #105	; 0x69
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 ff9d 	bl	8004944 <VL53L1_WrByte>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8003a0e:	197c      	adds	r4, r7, r5
 8003a10:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <VL53L1X_SetDistanceMode+0x19c>)
 8003a12:	1dbb      	adds	r3, r7, #6
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	2178      	movs	r1, #120	; 0x78
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 ffcf 	bl	80049bc <VL53L1_WrWord>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8003a22:	197c      	adds	r4, r7, r5
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <VL53L1X_SetDistanceMode+0x1a0>)
 8003a26:	1dbb      	adds	r3, r7, #6
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	217a      	movs	r1, #122	; 0x7a
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 ffc5 	bl	80049bc <VL53L1_WrWord>
 8003a32:	0003      	movs	r3, r0
 8003a34:	7023      	strb	r3, [r4, #0]
		break;
 8003a36:	e004      	b.n	8003a42 <VL53L1X_SetDistanceMode+0x156>
	default:
		status = 1;
 8003a38:	230f      	movs	r3, #15
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
		break;
 8003a40:	46c0      	nop			; (mov r8, r8)
	}

	if (status == 0)
 8003a42:	240f      	movs	r4, #15
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <VL53L1X_SetDistanceMode+0x182>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 8003a4e:	230c      	movs	r3, #12
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	881a      	ldrh	r2, [r3, #0]
 8003a54:	1dbb      	adds	r3, r7, #6
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	0011      	movs	r1, r2
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff fd5e 	bl	800351c <VL53L1X_SetTimingBudgetInMs>
 8003a60:	0003      	movs	r3, r0
 8003a62:	0019      	movs	r1, r3
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	193a      	adds	r2, r7, r4
 8003a68:	7812      	ldrb	r2, [r2, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	701a      	strb	r2, [r3, #0]
	return status;
 8003a6e:	230f      	movs	r3, #15
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b25b      	sxtb	r3, r3
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	00000705 	.word	0x00000705
 8003a84:	00000606 	.word	0x00000606
 8003a88:	00000f0d 	.word	0x00000f0d
 8003a8c:	00000e0e 	.word	0x00000e0e

08003a90 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	0002      	movs	r2, r0
 8003a98:	6039      	str	r1, [r7, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	801a      	strh	r2, [r3, #0]
	uint8_t TempDM, status=0;
 8003a9e:	240f      	movs	r4, #15
 8003aa0:	193b      	adds	r3, r7, r4
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8003aa6:	250e      	movs	r5, #14
 8003aa8:	197a      	adds	r2, r7, r5
 8003aaa:	1dbb      	adds	r3, r7, #6
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	214b      	movs	r1, #75	; 0x4b
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f001 f80d 	bl	8004ad0 <VL53L1_RdByte>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	001a      	movs	r2, r3
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	b25b      	sxtb	r3, r3
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	b25a      	sxtb	r2, r3
 8003ac4:	193b      	adds	r3, r7, r4
 8003ac6:	701a      	strb	r2, [r3, #0]
	if (TempDM == 0x14)
 8003ac8:	197b      	adds	r3, r7, r5
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b14      	cmp	r3, #20
 8003ace:	d102      	bne.n	8003ad6 <VL53L1X_GetDistanceMode+0x46>
		*DM=1;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8003ad6:	230e      	movs	r3, #14
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b0a      	cmp	r3, #10
 8003ade:	d102      	bne.n	8003ae6 <VL53L1X_GetDistanceMode+0x56>
		*DM=2;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	801a      	strh	r2, [r3, #0]
	return status;
 8003ae6:	230f      	movs	r3, #15
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b25b      	sxtb	r3, r3
}
 8003aee:	0018      	movs	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b004      	add	sp, #16
 8003af4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003af8 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8003af8:	b5b0      	push	{r4, r5, r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	0002      	movs	r2, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	1dbb      	adds	r3, r7, #6
 8003b04:	801a      	strh	r2, [r3, #0]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8003b06:	240f      	movs	r4, #15
 8003b08:	193b      	adds	r3, r7, r4
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8003b0e:	250c      	movs	r5, #12
 8003b10:	197a      	adds	r2, r7, r5
 8003b12:	1dbb      	adds	r3, r7, #6
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	21de      	movs	r1, #222	; 0xde
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f001 f81f 	bl	8004b5c <VL53L1_RdWord>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	0019      	movs	r1, r3
 8003b22:	193b      	adds	r3, r7, r4
 8003b24:	193a      	adds	r2, r7, r4
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	701a      	strb	r2, [r3, #0]
	ClockPLL = ClockPLL&0x3FF;
 8003b2c:	197b      	adds	r3, r7, r5
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	059b      	lsls	r3, r3, #22
 8003b32:	0d9b      	lsrs	r3, r3, #22
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	197b      	adds	r3, r7, r5
 8003b38:	801a      	strh	r2, [r3, #0]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8003b3a:	197b      	adds	r3, r7, r5
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	001a      	movs	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4353      	muls	r3, r2
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7ff fae3 	bl	8003110 <__aeabi_ui2d>
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <VL53L1X_SetInterMeasurementInMs+0x84>)
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <VL53L1X_SetInterMeasurementInMs+0x88>)
 8003b4e:	f7fe fc5d 	bl	800240c <__aeabi_dmul>
 8003b52:	0002      	movs	r2, r0
 8003b54:	000b      	movs	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8003b56:	0010      	movs	r0, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	f7fc fd45 	bl	80005e8 <__aeabi_d2uiz>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	1dbb      	adds	r3, r7, #6
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	216c      	movs	r1, #108	; 0x6c
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 ff6c 	bl	8004a44 <VL53L1_WrDWord>
	return status;
 8003b6c:	193b      	adds	r3, r7, r4
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b25b      	sxtb	r3, r3

}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bdb0      	pop	{r4, r5, r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	33333333 	.word	0x33333333
 8003b80:	3ff13333 	.word	0x3ff13333

08003b84 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8003b84:	b5b0      	push	{r4, r5, r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	1dbb      	adds	r3, r7, #6
 8003b90:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003b92:	240f      	movs	r4, #15
 8003b94:	193b      	adds	r3, r7, r4
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 8003b9a:	250e      	movs	r5, #14
 8003b9c:	197b      	adds	r3, r7, r5
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8003ba2:	197a      	adds	r2, r7, r5
 8003ba4:	1dbb      	adds	r3, r7, #6
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	21e5      	movs	r1, #229	; 0xe5
 8003baa:	0018      	movs	r0, r3
 8003bac:	f000 ff90 	bl	8004ad0 <VL53L1_RdByte>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	193a      	adds	r2, r7, r4
 8003bb8:	7812      	ldrb	r2, [r2, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	701a      	strb	r2, [r3, #0]
	*state = tmp;
 8003bbe:	197b      	adds	r3, r7, r5
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	701a      	strb	r2, [r3, #0]
	return status;
 8003bc6:	193b      	adds	r3, r7, r4
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	b25b      	sxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b004      	add	sp, #16
 8003bd2:	bdb0      	pop	{r4, r5, r7, pc}

08003bd4 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8003bd4:	b5b0      	push	{r4, r5, r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	0002      	movs	r2, r0
 8003bdc:	6039      	str	r1, [r7, #0]
 8003bde:	1dbb      	adds	r3, r7, #6
 8003be0:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003be2:	240f      	movs	r4, #15
 8003be4:	193b      	adds	r3, r7, r4
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8003bea:	250c      	movs	r5, #12
 8003bec:	197a      	adds	r2, r7, r5
 8003bee:	1dbb      	adds	r3, r7, #6
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	2196      	movs	r1, #150	; 0x96
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 ffb1 	bl	8004b5c <VL53L1_RdWord>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	0020      	movs	r0, r4
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	183a      	adds	r2, r7, r0
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8003c0a:	197b      	adds	r3, r7, r5
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	801a      	strh	r2, [r3, #0]
	return status;
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	b25b      	sxtb	r3, r3
}
 8003c18:	0018      	movs	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b004      	add	sp, #16
 8003c1e:	bdb0      	pop	{r4, r5, r7, pc}

08003c20 <IR_Init>:
#define dev 0x52  // address of IR distance sensor



void IR_Init()
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
	uint8_t sensorState=0;
 8003c26:	1dfb      	adds	r3, r7, #7
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
	 while(sensorState==0){
 8003c2c:	e007      	b.n	8003c3e <IR_Init+0x1e>
			VL53L1X_BootState(dev, &sensorState);
 8003c2e:	1dfb      	adds	r3, r7, #7
 8003c30:	0019      	movs	r1, r3
 8003c32:	2052      	movs	r0, #82	; 0x52
 8003c34:	f7ff ffa6 	bl	8003b84 <VL53L1X_BootState>
		HAL_Delay(2);
 8003c38:	2002      	movs	r0, #2
 8003c3a:	f001 f87b 	bl	8004d34 <HAL_Delay>
	 while(sensorState==0){
 8003c3e:	1dfb      	adds	r3, r7, #7
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f3      	beq.n	8003c2e <IR_Init+0xe>
	  }


	  /* This function must to be called to initialize the sensor with the default setting  */
	  VL53L1X_SensorInit(dev);
 8003c46:	2052      	movs	r0, #82	; 0x52
 8003c48:	f7ff fafa 	bl	8003240 <VL53L1X_SensorInit>
	  /* Optional functions to be used to change the main ranging parameters according the application requirements to get the best ranging performances */
	  VL53L1X_SetDistanceMode(dev, 1); /* 1=short, 2=long */
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	2052      	movs	r0, #82	; 0x52
 8003c50:	f7ff fe4c 	bl	80038ec <VL53L1X_SetDistanceMode>
	  VL53L1X_SetTimingBudgetInMs(dev, 100); /* in ms possible values [20, 50, 100, 200, 500] */
 8003c54:	2164      	movs	r1, #100	; 0x64
 8003c56:	2052      	movs	r0, #82	; 0x52
 8003c58:	f7ff fc60 	bl	800351c <VL53L1X_SetTimingBudgetInMs>
	  VL53L1X_SetInterMeasurementInMs(dev, 100); /* in ms, IM must be > = TB */
 8003c5c:	2164      	movs	r1, #100	; 0x64
 8003c5e:	2052      	movs	r0, #82	; 0x52
 8003c60:	f7ff ff4a 	bl	8003af8 <VL53L1X_SetInterMeasurementInMs>
	//  status = VL53L1X_SetOffset(dev,20); /* offset compensation in mm */
	//  status = VL53L1X_SetROI(dev, 16, 16); /* minimum ROI 4,4 */
	//	status = VL53L1X_CalibrateOffset(dev, 140, &offset); /* may take few second to perform the offset cal*/
	//	status = VL53L1X_CalibrateXtalk(dev, 1000, &xtalk); /* may take few second to perform the xtalk cal */
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <IR_Get_Distance>:


uint16_t IR_Get_Distance()
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
	uint8_t sensorState=0;
 8003c72:	1dfb      	adds	r3, r7, #7
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
//	if(VL53L1X_BootState(dev, &sensorState)==0)
//	{
//		return 1;
//	}

	VL53L1X_StartRanging(dev);
 8003c78:	2052      	movs	r0, #82	; 0x52
 8003c7a:	f7ff fbcb 	bl	8003414 <VL53L1X_StartRanging>

	while (dataReady == 0){
 8003c7e:	e007      	b.n	8003c90 <IR_Get_Distance+0x24>
			  VL53L1X_CheckForDataReady(dev, &dataReady);
 8003c80:	1cfb      	adds	r3, r7, #3
 8003c82:	0019      	movs	r1, r3
 8003c84:	2052      	movs	r0, #82	; 0x52
 8003c86:	f7ff fc03 	bl	8003490 <VL53L1X_CheckForDataReady>
			  HAL_Delay(2);
 8003c8a:	2002      	movs	r0, #2
 8003c8c:	f001 f852 	bl	8004d34 <HAL_Delay>
	while (dataReady == 0){
 8003c90:	1cfb      	adds	r3, r7, #3
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f3      	beq.n	8003c80 <IR_Get_Distance+0x14>
		  }
		  dataReady = 0;
 8003c98:	1cfb      	adds	r3, r7, #3
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
		  VL53L1X_GetDistance(dev, &Distance);
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	2052      	movs	r0, #82	; 0x52
 8003ca4:	f7ff ff96 	bl	8003bd4 <VL53L1X_GetDistance>

		  VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt*/
 8003ca8:	2052      	movs	r0, #82	; 0x52
 8003caa:	f7ff fb61 	bl	8003370 <VL53L1X_ClearInterrupt>
		  VL53L1X_StopRanging(dev);
 8003cae:	2052      	movs	r0, #82	; 0x52
 8003cb0:	f7ff fbcf 	bl	8003452 <VL53L1X_StopRanging>
		  return Distance;
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	881b      	ldrh	r3, [r3, #0]
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b089      	sub	sp, #36	; 0x24
 8003cc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc6:	240c      	movs	r4, #12
 8003cc8:	193b      	adds	r3, r7, r4
 8003cca:	0018      	movs	r0, r3
 8003ccc:	2314      	movs	r3, #20
 8003cce:	001a      	movs	r2, r3
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	f004 fbf6 	bl	80084c2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003cdc:	2104      	movs	r1, #4
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cfa:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	2280      	movs	r2, #128	; 0x80
 8003d00:	4013      	ands	r3, r2
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	2201      	movs	r2, #1
 8003d18:	4013      	ands	r3, r2
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003d1e:	23a0      	movs	r3, #160	; 0xa0
 8003d20:	05db      	lsls	r3, r3, #23
 8003d22:	2200      	movs	r2, #0
 8003d24:	2120      	movs	r1, #32
 8003d26:	0018      	movs	r0, r3
 8003d28:	f001 fa84 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d2c:	193b      	adds	r3, r7, r4
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	0192      	lsls	r2, r2, #6
 8003d32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d34:	193b      	adds	r3, r7, r4
 8003d36:	2284      	movs	r2, #132	; 0x84
 8003d38:	0392      	lsls	r2, r2, #14
 8003d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	193b      	adds	r3, r7, r4
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d42:	193b      	adds	r3, r7, r4
 8003d44:	4a0f      	ldr	r2, [pc, #60]	; (8003d84 <MX_GPIO_Init+0xc4>)
 8003d46:	0019      	movs	r1, r3
 8003d48:	0010      	movs	r0, r2
 8003d4a:	f001 f8f5 	bl	8004f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003d4e:	0021      	movs	r1, r4
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	2220      	movs	r2, #32
 8003d54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	2201      	movs	r2, #1
 8003d5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d62:	187b      	adds	r3, r7, r1
 8003d64:	2200      	movs	r2, #0
 8003d66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003d68:	187a      	adds	r2, r7, r1
 8003d6a:	23a0      	movs	r3, #160	; 0xa0
 8003d6c:	05db      	lsls	r3, r3, #23
 8003d6e:	0011      	movs	r1, r2
 8003d70:	0018      	movs	r0, r3
 8003d72:	f001 f8e1 	bl	8004f38 <HAL_GPIO_Init>

}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b009      	add	sp, #36	; 0x24
 8003d7c:	bd90      	pop	{r4, r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	40021000 	.word	0x40021000
 8003d84:	50000800 	.word	0x50000800

08003d88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <MX_I2C1_Init+0x78>)
 8003d90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <MX_I2C1_Init+0x7c>)
 8003d96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d9e:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003db0:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f001 fa53 	bl	8005270 <HAL_I2C_Init>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003dce:	f000 fa61 	bl	8004294 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f001 fee8 	bl	8005bac <HAL_I2CEx_ConfigAnalogFilter>
 8003ddc:	1e03      	subs	r3, r0, #0
 8003dde:	d001      	beq.n	8003de4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003de0:	f000 fa58 	bl	8004294 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <MX_I2C1_Init+0x74>)
 8003de6:	2100      	movs	r1, #0
 8003de8:	0018      	movs	r0, r3
 8003dea:	f001 ff2b 	bl	8005c44 <HAL_I2CEx_ConfigDigitalFilter>
 8003dee:	1e03      	subs	r3, r0, #0
 8003df0:	d001      	beq.n	8003df6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003df2:	f000 fa4f 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000200 	.word	0x20000200
 8003e00:	40005400 	.word	0x40005400
 8003e04:	00707cbb 	.word	0x00707cbb

08003e08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	240c      	movs	r4, #12
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	0018      	movs	r0, r3
 8003e16:	2314      	movs	r3, #20
 8003e18:	001a      	movs	r2, r3
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f004 fb51 	bl	80084c2 <memset>
  if(i2cHandle->Instance==I2C1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_I2C_MspInit+0x80>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d12a      	bne.n	8003e80 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <HAL_I2C_MspInit+0x84>)
 8003e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <HAL_I2C_MspInit+0x84>)
 8003e30:	2101      	movs	r1, #1
 8003e32:	430a      	orrs	r2, r1
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_I2C_MspInit+0x84>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	22c0      	movs	r2, #192	; 0xc0
 8003e46:	00d2      	lsls	r2, r2, #3
 8003e48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e4a:	0021      	movs	r1, r4
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	2212      	movs	r2, #18
 8003e50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	2201      	movs	r2, #1
 8003e56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	2206      	movs	r2, #6
 8003e62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e64:	187a      	adds	r2, r7, r1
 8003e66:	23a0      	movs	r3, #160	; 0xa0
 8003e68:	05db      	lsls	r3, r3, #23
 8003e6a:	0011      	movs	r1, r2
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f001 f863 	bl	8004f38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_I2C_MspInit+0x84>)
 8003e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_I2C_MspInit+0x84>)
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	0389      	lsls	r1, r1, #14
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b009      	add	sp, #36	; 0x24
 8003e86:	bd90      	pop	{r4, r7, pc}
 8003e88:	40005400 	.word	0x40005400
 8003e8c:	40021000 	.word	0x40021000

08003e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e96:	f000 fedd 	bl	8004c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e9a:	f000 f877 	bl	8003f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e9e:	f7ff ff0f 	bl	8003cc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003ea2:	f7ff ff71 	bl	8003d88 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003ea6:	f000 fc93 	bl	80047d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003eaa:	f000 fb23 	bl	80044f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003eae:	f000 fb9d 	bl	80045ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003eb2:	4b2d      	ldr	r3, [pc, #180]	; (8003f68 <main+0xd8>)
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f002 ff4c 	bl	8006d54 <HAL_TIM_PWM_Start>
  set_ang(1490);
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <main+0xdc>)
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f000 f9ee 	bl	80042a0 <set_ang>

  //bma_init();
  IR_Init();
 8003ec4:	f7ff feac 	bl	8003c20 <IR_Init>

  //PID VARIABLES INIT
  PID.Kd =1000.0; // 800
 8003ec8:	4b29      	ldr	r3, [pc, #164]	; (8003f70 <main+0xe0>)
 8003eca:	4a2a      	ldr	r2, [pc, #168]	; (8003f74 <main+0xe4>)
 8003ecc:	609a      	str	r2, [r3, #8]
  PID.Ki = 0.0;
 8003ece:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <main+0xe0>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	60da      	str	r2, [r3, #12]
  PID.Kp = 2; // 1.5 ustawione bylo
 8003ed4:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <main+0xe0>)
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	05d2      	lsls	r2, r2, #23
 8003eda:	605a      	str	r2, [r3, #4]
  PID.time_old = HAL_GetTick();
 8003edc:	f000 ff20 	bl	8004d20 <HAL_GetTick>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <main+0xe0>)
 8003ee4:	611a      	str	r2, [r3, #16]
  PID.set_point = 170;
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <main+0xe0>)
 8003ee8:	22aa      	movs	r2, #170	; 0xaa
 8003eea:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 data_recdist = IR_Get_Distance();
 8003eec:	f7ff febe 	bl	8003c6c <IR_Get_Distance>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <main+0xe8>)
 8003ef6:	801a      	strh	r2, [r3, #0]
	// dist_sample = (float) IR_Get_Distance();

	// dist_avg_new = ((n-1)/n) * dist_avg_old + ((1/n) * dist_sample);

	// dist_avg_old = dist_avg_new;
	 PIDRegulator(data_recdist, &PID);
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <main+0xe8>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <main+0xe0>)
 8003efe:	0011      	movs	r1, r2
 8003f00:	0018      	movs	r0, r3
 8003f02:	f000 f8b9 	bl	8004078 <PIDRegulator>

	 //
	 // uart test
	// uint16_t temp;
	 //temp = CalculateAngle(PID.PID_total);
	 sprintf((char*)msg," PID_total %f  , Dist %d, Dist avg %f\n ",  PID.PID_total,  data_recdist, dist_avg_new);
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <main+0xe0>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	1c18      	adds	r0, r3, #0
 8003f0c:	f7ff f926 	bl	800315c <__aeabi_f2d>
 8003f10:	0004      	movs	r4, r0
 8003f12:	000d      	movs	r5, r1
 8003f14:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <main+0xe8>)
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	001e      	movs	r6, r3
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <main+0xec>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1c18      	adds	r0, r3, #0
 8003f20:	f7ff f91c 	bl	800315c <__aeabi_f2d>
 8003f24:	0002      	movs	r2, r0
 8003f26:	000b      	movs	r3, r1
 8003f28:	4915      	ldr	r1, [pc, #84]	; (8003f80 <main+0xf0>)
 8003f2a:	4816      	ldr	r0, [pc, #88]	; (8003f84 <main+0xf4>)
 8003f2c:	9202      	str	r2, [sp, #8]
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	9600      	str	r6, [sp, #0]
 8003f32:	0022      	movs	r2, r4
 8003f34:	002b      	movs	r3, r5
 8003f36:	f004 ff3b 	bl	8008db0 <siprintf>


	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),1000);
 8003f3a:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <main+0xf4>)
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7fc f8e3 	bl	8000108 <strlen>
 8003f42:	0003      	movs	r3, r0
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	23fa      	movs	r3, #250	; 0xfa
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	490e      	ldr	r1, [pc, #56]	; (8003f84 <main+0xf4>)
 8003f4c:	480e      	ldr	r0, [pc, #56]	; (8003f88 <main+0xf8>)
 8003f4e:	f003 fd7d 	bl	8007a4c <HAL_UART_Transmit>

	 //uarttest
	 set_ang(CalculateAngle(PID.PID_total));
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <main+0xe0>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	1c18      	adds	r0, r3, #0
 8003f58:	f000 f938 	bl	80041cc <CalculateAngle>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 f99e 	bl	80042a0 <set_ang>
	 data_recdist = IR_Get_Distance();
 8003f64:	e7c2      	b.n	8003eec <main+0x5c>
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	20000308 	.word	0x20000308
 8003f6c:	000005d2 	.word	0x000005d2
 8003f70:	20000250 	.word	0x20000250
 8003f74:	447a0000 	.word	0x447a0000
 8003f78:	2000024c 	.word	0x2000024c
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	0800b410 	.word	0x0800b410
 8003f84:	20000284 	.word	0x20000284
 8003f88:	20000348 	.word	0x20000348

08003f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f8c:	b590      	push	{r4, r7, lr}
 8003f8e:	b09f      	sub	sp, #124	; 0x7c
 8003f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f92:	2440      	movs	r4, #64	; 0x40
 8003f94:	193b      	adds	r3, r7, r4
 8003f96:	0018      	movs	r0, r3
 8003f98:	2338      	movs	r3, #56	; 0x38
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	f004 fa90 	bl	80084c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fa2:	232c      	movs	r3, #44	; 0x2c
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	2314      	movs	r3, #20
 8003faa:	001a      	movs	r2, r3
 8003fac:	2100      	movs	r1, #0
 8003fae:	f004 fa88 	bl	80084c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	2328      	movs	r3, #40	; 0x28
 8003fb8:	001a      	movs	r2, r3
 8003fba:	2100      	movs	r1, #0
 8003fbc:	f004 fa81 	bl	80084c2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <SystemClock_Config+0xe4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2b      	ldr	r2, [pc, #172]	; (8004074 <SystemClock_Config+0xe8>)
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	4b29      	ldr	r3, [pc, #164]	; (8004070 <SystemClock_Config+0xe4>)
 8003fca:	2180      	movs	r1, #128	; 0x80
 8003fcc:	0109      	lsls	r1, r1, #4
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fd2:	0021      	movs	r1, r4
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2201      	movs	r2, #1
 8003fde:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	2210      	movs	r2, #16
 8003fe4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	2202      	movs	r2, #2
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	2200      	movs	r2, #0
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	02d2      	lsls	r2, r2, #11
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2280      	movs	r2, #128	; 0x80
 8003ffe:	03d2      	lsls	r2, r2, #15
 8004000:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004002:	187b      	adds	r3, r7, r1
 8004004:	0018      	movs	r0, r3
 8004006:	f001 fe69 	bl	8005cdc <HAL_RCC_OscConfig>
 800400a:	1e03      	subs	r3, r0, #0
 800400c:	d001      	beq.n	8004012 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800400e:	f000 f941 	bl	8004294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004012:	212c      	movs	r1, #44	; 0x2c
 8004014:	187b      	adds	r3, r7, r1
 8004016:	220f      	movs	r2, #15
 8004018:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800401a:	187b      	adds	r3, r7, r1
 800401c:	2203      	movs	r2, #3
 800401e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004020:	187b      	adds	r3, r7, r1
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004026:	187b      	adds	r3, r7, r1
 8004028:	2200      	movs	r2, #0
 800402a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800402c:	187b      	adds	r3, r7, r1
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004032:	187b      	adds	r3, r7, r1
 8004034:	2101      	movs	r1, #1
 8004036:	0018      	movs	r0, r3
 8004038:	f002 fa24 	bl	8006484 <HAL_RCC_ClockConfig>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d001      	beq.n	8004044 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8004040:	f000 f928 	bl	8004294 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	220a      	movs	r2, #10
 8004048:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	0018      	movs	r0, r3
 800405a:	f002 fc37 	bl	80068cc <HAL_RCCEx_PeriphCLKConfig>
 800405e:	1e03      	subs	r3, r0, #0
 8004060:	d001      	beq.n	8004066 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8004062:	f000 f917 	bl	8004294 <Error_Handler>
  }
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b01f      	add	sp, #124	; 0x7c
 800406c:	bd90      	pop	{r4, r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	40007000 	.word	0x40007000
 8004074:	ffffe7ff 	.word	0xffffe7ff

08004078 <PIDRegulator>:

/* USER CODE BEGIN 4 */
void PIDRegulator( uint16_t distance,  PIDStruct *PID)
{
 8004078:	b5b0      	push	{r4, r5, r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	0002      	movs	r2, r0
 8004080:	6039      	str	r1, [r7, #0]
 8004082:	1dbb      	adds	r3, r7, #6
 8004084:	801a      	strh	r2, [r3, #0]
	PID->time_new = HAL_GetTick();
 8004086:	f000 fe4b 	bl	8004d20 <HAL_GetTick>
 800408a:	0002      	movs	r2, r0
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	615a      	str	r2, [r3, #20]
	PID->period = PID->time_new - PID->time_old;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	1ad2      	subs	r2, r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	619a      	str	r2, [r3, #24]
	PID->time_old = PID->time_new;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	611a      	str	r2, [r3, #16]

	PID->distance_error = PID->set_point - distance;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	881a      	ldrh	r2, [r3, #0]
 80040aa:	1dbb      	adds	r3, r7, #6
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	839a      	strh	r2, [r3, #28]

	PID->PID_p = PID->Kp * PID->distance_error;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685c      	ldr	r4, [r3, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	221c      	movs	r2, #28
 80040c0:	5e9b      	ldrsh	r3, [r3, r2]
 80040c2:	0018      	movs	r0, r3
 80040c4:	f7fd f9d4 	bl	8001470 <__aeabi_i2f>
 80040c8:	1c03      	adds	r3, r0, #0
 80040ca:	1c19      	adds	r1, r3, #0
 80040cc:	1c20      	adds	r0, r4, #0
 80040ce:	f7fc fedb 	bl	8000e88 <__aeabi_fmul>
 80040d2:	1c03      	adds	r3, r0, #0
 80040d4:	1c1a      	adds	r2, r3, #0
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

	PID->dist_diference = PID->distance_error - PID->distance_previous_error;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	221c      	movs	r2, #28
 80040de:	5e9b      	ldrsh	r3, [r3, r2]
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	211e      	movs	r1, #30
 80040e6:	5e5b      	ldrsh	r3, [r3, r1]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	b21a      	sxth	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	841a      	strh	r2, [r3, #32]

	PID->PID_d = PID->Kd*(((float)PID->distance_error - (float)PID->distance_previous_error)/(float)PID->period);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689c      	ldr	r4, [r3, #8]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	221c      	movs	r2, #28
 80040fc:	5e9b      	ldrsh	r3, [r3, r2]
 80040fe:	0018      	movs	r0, r3
 8004100:	f7fd f9b6 	bl	8001470 <__aeabi_i2f>
 8004104:	1c05      	adds	r5, r0, #0
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	221e      	movs	r2, #30
 800410a:	5e9b      	ldrsh	r3, [r3, r2]
 800410c:	0018      	movs	r0, r3
 800410e:	f7fd f9af 	bl	8001470 <__aeabi_i2f>
 8004112:	1c03      	adds	r3, r0, #0
 8004114:	1c19      	adds	r1, r3, #0
 8004116:	1c28      	adds	r0, r5, #0
 8004118:	f7fc ffdc 	bl	80010d4 <__aeabi_fsub>
 800411c:	1c03      	adds	r3, r0, #0
 800411e:	1c1d      	adds	r5, r3, #0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	0018      	movs	r0, r3
 8004126:	f7fd f9f1 	bl	800150c <__aeabi_ui2f>
 800412a:	1c03      	adds	r3, r0, #0
 800412c:	1c19      	adds	r1, r3, #0
 800412e:	1c28      	adds	r0, r5, #0
 8004130:	f7fc fce2 	bl	8000af8 <__aeabi_fdiv>
 8004134:	1c03      	adds	r3, r0, #0
 8004136:	1c19      	adds	r1, r3, #0
 8004138:	1c20      	adds	r0, r4, #0
 800413a:	f7fc fea5 	bl	8000e88 <__aeabi_fmul>
 800413e:	1c03      	adds	r3, r0, #0
 8004140:	1c1a      	adds	r2, r3, #0
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	62da      	str	r2, [r3, #44]	; 0x2c

	if(-5 < PID->distance_error && PID->distance_error < 5)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	221c      	movs	r2, #28
 800414a:	5e9b      	ldrsh	r3, [r3, r2]
 800414c:	3304      	adds	r3, #4
 800414e:	db1d      	blt.n	800418c <PIDRegulator+0x114>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	221c      	movs	r2, #28
 8004154:	5e9b      	ldrsh	r3, [r3, r2]
 8004156:	2b04      	cmp	r3, #4
 8004158:	dc18      	bgt.n	800418c <PIDRegulator+0x114>
	    {
			PID->PID_i = PID->PID_i + (PID->Ki * PID->distance_error);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68dd      	ldr	r5, [r3, #12]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	221c      	movs	r2, #28
 8004166:	5e9b      	ldrsh	r3, [r3, r2]
 8004168:	0018      	movs	r0, r3
 800416a:	f7fd f981 	bl	8001470 <__aeabi_i2f>
 800416e:	1c03      	adds	r3, r0, #0
 8004170:	1c19      	adds	r1, r3, #0
 8004172:	1c28      	adds	r0, r5, #0
 8004174:	f7fc fe88 	bl	8000e88 <__aeabi_fmul>
 8004178:	1c03      	adds	r3, r0, #0
 800417a:	1c19      	adds	r1, r3, #0
 800417c:	1c20      	adds	r0, r4, #0
 800417e:	f7fc fb1d 	bl	80007bc <__aeabi_fadd>
 8004182:	1c03      	adds	r3, r0, #0
 8004184:	1c1a      	adds	r2, r3, #0
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	629a      	str	r2, [r3, #40]	; 0x28
 800418a:	e002      	b.n	8004192 <PIDRegulator+0x11a>
	    }
	else
	    {
	    	PID->PID_i = 0;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
	    }
	PID->PID_total = PID->PID_p + PID->PID_i + PID->PID_d;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	1c19      	adds	r1, r3, #0
 800419c:	1c10      	adds	r0, r2, #0
 800419e:	f7fc fb0d 	bl	80007bc <__aeabi_fadd>
 80041a2:	1c03      	adds	r3, r0, #0
 80041a4:	1c1a      	adds	r2, r3, #0
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	1c19      	adds	r1, r3, #0
 80041ac:	1c10      	adds	r0, r2, #0
 80041ae:	f7fc fb05 	bl	80007bc <__aeabi_fadd>
 80041b2:	1c03      	adds	r3, r0, #0
 80041b4:	1c1a      	adds	r2, r3, #0
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30
	PID->distance_previous_error =  PID->distance_error;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	221c      	movs	r2, #28
 80041be:	5e9a      	ldrsh	r2, [r3, r2]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	83da      	strh	r2, [r3, #30]
	return;
 80041c4:	46c0      	nop			; (mov r8, r8)
}
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bdb0      	pop	{r4, r5, r7, pc}

080041cc <CalculateAngle>:

uint16_t CalculateAngle(float PID_value)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]


	if(PID_value < 0 && PID_value >-320){
 80041d4:	2100      	movs	r1, #0
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fc f978 	bl	80004cc <__aeabi_fcmplt>
 80041dc:	1e03      	subs	r3, r0, #0
 80041de:	d012      	beq.n	8004206 <CalculateAngle+0x3a>
 80041e0:	4922      	ldr	r1, [pc, #136]	; (800426c <CalculateAngle+0xa0>)
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc f986 	bl	80004f4 <__aeabi_fcmpgt>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d00c      	beq.n	8004206 <CalculateAngle+0x3a>
		servo_angle = ANGLE_MID + PID_value;
 80041ec:	4920      	ldr	r1, [pc, #128]	; (8004270 <CalculateAngle+0xa4>)
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc fae4 	bl	80007bc <__aeabi_fadd>
 80041f4:	1c03      	adds	r3, r0, #0
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc f9de 	bl	80005b8 <__aeabi_f2uiz>
 80041fc:	0003      	movs	r3, r0
 80041fe:	b29a      	uxth	r2, r3
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <CalculateAngle+0xa8>)
 8004202:	801a      	strh	r2, [r3, #0]
 8004204:	e02b      	b.n	800425e <CalculateAngle+0x92>
	}
	else if(PID_value > 0 && PID_value < 320){
 8004206:	2100      	movs	r1, #0
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fc f973 	bl	80004f4 <__aeabi_fcmpgt>
 800420e:	1e03      	subs	r3, r0, #0
 8004210:	d012      	beq.n	8004238 <CalculateAngle+0x6c>
 8004212:	4919      	ldr	r1, [pc, #100]	; (8004278 <CalculateAngle+0xac>)
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fc f959 	bl	80004cc <__aeabi_fcmplt>
 800421a:	1e03      	subs	r3, r0, #0
 800421c:	d00c      	beq.n	8004238 <CalculateAngle+0x6c>
		servo_angle =  ANGLE_MID + PID_value;
 800421e:	4914      	ldr	r1, [pc, #80]	; (8004270 <CalculateAngle+0xa4>)
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7fc facb 	bl	80007bc <__aeabi_fadd>
 8004226:	1c03      	adds	r3, r0, #0
 8004228:	1c18      	adds	r0, r3, #0
 800422a:	f7fc f9c5 	bl	80005b8 <__aeabi_f2uiz>
 800422e:	0003      	movs	r3, r0
 8004230:	b29a      	uxth	r2, r3
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <CalculateAngle+0xa8>)
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	e012      	b.n	800425e <CalculateAngle+0x92>
	}
	else if (PID_value > 320 ) {
 8004238:	490f      	ldr	r1, [pc, #60]	; (8004278 <CalculateAngle+0xac>)
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fc f95a 	bl	80004f4 <__aeabi_fcmpgt>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d003      	beq.n	800424c <CalculateAngle+0x80>
		servo_angle =  ANGLE_MID + 320;
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <CalculateAngle+0xa8>)
 8004246:	4a0d      	ldr	r2, [pc, #52]	; (800427c <CalculateAngle+0xb0>)
 8004248:	801a      	strh	r2, [r3, #0]
 800424a:	e008      	b.n	800425e <CalculateAngle+0x92>
	}
	else if (PID_value < -320 ) {
 800424c:	4907      	ldr	r1, [pc, #28]	; (800426c <CalculateAngle+0xa0>)
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fc f93c 	bl	80004cc <__aeabi_fcmplt>
 8004254:	1e03      	subs	r3, r0, #0
 8004256:	d002      	beq.n	800425e <CalculateAngle+0x92>
			servo_angle =  ANGLE_MID - 320;
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <CalculateAngle+0xa8>)
 800425a:	4a09      	ldr	r2, [pc, #36]	; (8004280 <CalculateAngle+0xb4>)
 800425c:	801a      	strh	r2, [r3, #0]
		}

	return servo_angle;
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <CalculateAngle+0xa8>)
 8004260:	881b      	ldrh	r3, [r3, #0]
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b002      	add	sp, #8
 8004268:	bd80      	pop	{r7, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	c3a00000 	.word	0xc3a00000
 8004270:	44ba4000 	.word	0x44ba4000
 8004274:	20000004 	.word	0x20000004
 8004278:	43a00000 	.word	0x43a00000
 800427c:	00000712 	.word	0x00000712
 8004280:	00000492 	.word	0x00000492

08004284 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2)
	{
		//set_ang(CalculateAngle(PID.PID_total));
	}

}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b002      	add	sp, #8
 8004292:	bd80      	pop	{r7, pc}

08004294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004298:	b672      	cpsid	i
}
 800429a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800429c:	e7fe      	b.n	800429c <Error_Handler+0x8>
	...

080042a0 <set_ang>:
/*
 * ang - kat obrotu walu serwomechanizmu
 * mode - tryb obrotu zgodnie/przeciwnie do wskazowek zegara
 */
void set_ang(uint16_t ang)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	0002      	movs	r2, r0
 80042a8:	1dbb      	adds	r3, r7, #6
 80042aa:	801a      	strh	r2, [r3, #0]
	uint16_t val;

	if(ang > ANGLE_MAX)
 80042ac:	1dbb      	adds	r3, r7, #6
 80042ae:	881a      	ldrh	r2, [r3, #0]
 80042b0:	23e1      	movs	r3, #225	; 0xe1
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d903      	bls.n	80042c0 <set_ang+0x20>
	{
		ang = ANGLE_MAX;
 80042b8:	1dbb      	adds	r3, r7, #6
 80042ba:	22e1      	movs	r2, #225	; 0xe1
 80042bc:	00d2      	lsls	r2, r2, #3
 80042be:	801a      	strh	r2, [r3, #0]
	}
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}
	val = PWM_MIN + (ang * STEP) / 1000;
 80042c0:	1dbb      	adds	r3, r7, #6
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	4a0b      	ldr	r2, [pc, #44]	; (80042f4 <set_ang+0x54>)
 80042c6:	4353      	muls	r3, r2
 80042c8:	22fa      	movs	r2, #250	; 0xfa
 80042ca:	0091      	lsls	r1, r2, #2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7fb ffc1 	bl	8000254 <__divsi3>
 80042d2:	0003      	movs	r3, r0
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	210e      	movs	r1, #14
 80042d8:	187b      	adds	r3, r7, r1
 80042da:	32f5      	adds	r2, #245	; 0xf5
 80042dc:	32ff      	adds	r2, #255	; 0xff
 80042de:	801a      	strh	r2, [r3, #0]


	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <set_ang+0x58>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	187a      	adds	r2, r7, r1
 80042e6:	8812      	ldrh	r2, [r2, #0]
 80042e8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b004      	add	sp, #16
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	00000457 	.word	0x00000457
 80042f8:	20000308 	.word	0x20000308

080042fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <HAL_MspInit+0x24>)
 8004302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_MspInit+0x24>)
 8004306:	2101      	movs	r1, #1
 8004308:	430a      	orrs	r2, r1
 800430a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <HAL_MspInit+0x24>)
 800430e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_MspInit+0x24>)
 8004312:	2180      	movs	r1, #128	; 0x80
 8004314:	0549      	lsls	r1, r1, #21
 8004316:	430a      	orrs	r2, r1
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000

08004324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004328:	e7fe      	b.n	8004328 <NMI_Handler+0x4>

0800432a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800432e:	e7fe      	b.n	800432e <HardFault_Handler+0x4>

08004330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004348:	f000 fcd8 	bl	8004cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <TIM2_IRQHandler+0x14>)
 800435a:	0018      	movs	r0, r3
 800435c:	f002 fd8c 	bl	8006e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	200002c8 	.word	0x200002c8

0800436c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
	return 1;
 8004370:	2301      	movs	r3, #1
}
 8004372:	0018      	movs	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_kill>:

int _kill(int pid, int sig)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004382:	f004 f86b 	bl	800845c <__errno>
 8004386:	0003      	movs	r3, r0
 8004388:	2216      	movs	r2, #22
 800438a:	601a      	str	r2, [r3, #0]
	return -1;
 800438c:	2301      	movs	r3, #1
 800438e:	425b      	negs	r3, r3
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}

08004398 <_exit>:

void _exit (int status)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043a0:	2301      	movs	r3, #1
 80043a2:	425a      	negs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	0011      	movs	r1, r2
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7ff ffe5 	bl	8004378 <_kill>
	while (1) {}		/* Make sure we hang here */
 80043ae:	e7fe      	b.n	80043ae <_exit+0x16>

080043b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e00a      	b.n	80043d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043c2:	e000      	b.n	80043c6 <_read+0x16>
 80043c4:	bf00      	nop
 80043c6:	0001      	movs	r1, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	60ba      	str	r2, [r7, #8]
 80043ce:	b2ca      	uxtb	r2, r1
 80043d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	3301      	adds	r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	dbf0      	blt.n	80043c2 <_read+0x12>
	}

return len;
 80043e0:	687b      	ldr	r3, [r7, #4]
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b006      	add	sp, #24
 80043e8:	bd80      	pop	{r7, pc}

080043ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	e009      	b.n	8004410 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	60ba      	str	r2, [r7, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	0018      	movs	r0, r3
 8004406:	e000      	b.n	800440a <_write+0x20>
 8004408:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	3301      	adds	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	dbf1      	blt.n	80043fc <_write+0x12>
	}
	return len;
 8004418:	687b      	ldr	r3, [r7, #4]
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b006      	add	sp, #24
 8004420:	bd80      	pop	{r7, pc}

08004422 <_close>:

int _close(int file)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
	return -1;
 800442a:	2301      	movs	r3, #1
 800442c:	425b      	negs	r3, r3
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b002      	add	sp, #8
 8004434:	bd80      	pop	{r7, pc}

08004436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2280      	movs	r2, #128	; 0x80
 8004444:	0192      	lsls	r2, r2, #6
 8004446:	605a      	str	r2, [r3, #4]
	return 0;
 8004448:	2300      	movs	r3, #0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b002      	add	sp, #8
 8004450:	bd80      	pop	{r7, pc}

08004452 <_isatty>:

int _isatty(int file)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
	return 1;
 800445a:	2301      	movs	r3, #1
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}

08004464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
	return 0;
 8004470:	2300      	movs	r3, #0
}
 8004472:	0018      	movs	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	b004      	add	sp, #16
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <_sbrk+0x5c>)
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <_sbrk+0x60>)
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <_sbrk+0x64>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <_sbrk+0x64>)
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <_sbrk+0x68>)
 800449c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <_sbrk+0x64>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	18d3      	adds	r3, r2, r3
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d207      	bcs.n	80044bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044ac:	f003 ffd6 	bl	800845c <__errno>
 80044b0:	0003      	movs	r3, r0
 80044b2:	220c      	movs	r2, #12
 80044b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	425b      	negs	r3, r3
 80044ba:	e009      	b.n	80044d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <_sbrk+0x64>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <_sbrk+0x64>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	18d2      	adds	r2, r2, r3
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <_sbrk+0x64>)
 80044cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80044ce:	68fb      	ldr	r3, [r7, #12]
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b006      	add	sp, #24
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20005000 	.word	0x20005000
 80044dc:	00000400 	.word	0x00000400
 80044e0:	200002c4 	.word	0x200002c4
 80044e4:	200004e0 	.word	0x200004e0

080044e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044fa:	2318      	movs	r3, #24
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	0018      	movs	r0, r3
 8004500:	2310      	movs	r3, #16
 8004502:	001a      	movs	r2, r3
 8004504:	2100      	movs	r1, #0
 8004506:	f003 ffdc 	bl	80084c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800450a:	2310      	movs	r3, #16
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	0018      	movs	r0, r3
 8004510:	2308      	movs	r3, #8
 8004512:	001a      	movs	r2, r3
 8004514:	2100      	movs	r1, #0
 8004516:	f003 ffd4 	bl	80084c2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800451a:	003b      	movs	r3, r7
 800451c:	0018      	movs	r0, r3
 800451e:	2310      	movs	r3, #16
 8004520:	001a      	movs	r2, r3
 8004522:	2100      	movs	r1, #0
 8004524:	f003 ffcd 	bl	80084c2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004528:	4b2e      	ldr	r3, [pc, #184]	; (80045e4 <MX_TIM2_Init+0xf0>)
 800452a:	2280      	movs	r2, #128	; 0x80
 800452c:	05d2      	lsls	r2, r2, #23
 800452e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <MX_TIM2_Init+0xf0>)
 8004532:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <MX_TIM2_Init+0xf4>)
 8004534:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004536:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <MX_TIM2_Init+0xf0>)
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800453c:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <MX_TIM2_Init+0xf0>)
 800453e:	2263      	movs	r2, #99	; 0x63
 8004540:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004542:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <MX_TIM2_Init+0xf0>)
 8004544:	2200      	movs	r2, #0
 8004546:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004548:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <MX_TIM2_Init+0xf0>)
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800454e:	4b25      	ldr	r3, [pc, #148]	; (80045e4 <MX_TIM2_Init+0xf0>)
 8004550:	0018      	movs	r0, r3
 8004552:	f002 fb2f 	bl	8006bb4 <HAL_TIM_Base_Init>
 8004556:	1e03      	subs	r3, r0, #0
 8004558:	d001      	beq.n	800455e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800455a:	f7ff fe9b 	bl	8004294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800455e:	2118      	movs	r1, #24
 8004560:	187b      	adds	r3, r7, r1
 8004562:	2280      	movs	r2, #128	; 0x80
 8004564:	0152      	lsls	r2, r2, #5
 8004566:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004568:	187a      	adds	r2, r7, r1
 800456a:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <MX_TIM2_Init+0xf0>)
 800456c:	0011      	movs	r1, r2
 800456e:	0018      	movs	r0, r3
 8004570:	f002 fe88 	bl	8007284 <HAL_TIM_ConfigClockSource>
 8004574:	1e03      	subs	r3, r0, #0
 8004576:	d001      	beq.n	800457c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8004578:	f7ff fe8c 	bl	8004294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <MX_TIM2_Init+0xf0>)
 800457e:	0018      	movs	r0, r3
 8004580:	f002 fb58 	bl	8006c34 <HAL_TIM_OC_Init>
 8004584:	1e03      	subs	r3, r0, #0
 8004586:	d001      	beq.n	800458c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8004588:	f7ff fe84 	bl	8004294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800458c:	2110      	movs	r1, #16
 800458e:	187b      	adds	r3, r7, r1
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004594:	187b      	adds	r3, r7, r1
 8004596:	2200      	movs	r2, #0
 8004598:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800459a:	187a      	adds	r2, r7, r1
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <MX_TIM2_Init+0xf0>)
 800459e:	0011      	movs	r1, r2
 80045a0:	0018      	movs	r0, r3
 80045a2:	f003 f983 	bl	80078ac <HAL_TIMEx_MasterConfigSynchronization>
 80045a6:	1e03      	subs	r3, r0, #0
 80045a8:	d001      	beq.n	80045ae <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80045aa:	f7ff fe73 	bl	8004294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80045ae:	003b      	movs	r3, r7
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80045b4:	003b      	movs	r3, r7
 80045b6:	2200      	movs	r2, #0
 80045b8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045ba:	003b      	movs	r3, r7
 80045bc:	2200      	movs	r2, #0
 80045be:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045c0:	003b      	movs	r3, r7
 80045c2:	2200      	movs	r2, #0
 80045c4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045c6:	0039      	movs	r1, r7
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <MX_TIM2_Init+0xf0>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	0018      	movs	r0, r3
 80045ce:	f002 fd3b 	bl	8007048 <HAL_TIM_OC_ConfigChannel>
 80045d2:	1e03      	subs	r3, r0, #0
 80045d4:	d001      	beq.n	80045da <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80045d6:	f7ff fe5d 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b00a      	add	sp, #40	; 0x28
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	200002c8 	.word	0x200002c8
 80045e8:	00007cff 	.word	0x00007cff

080045ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045f2:	2318      	movs	r3, #24
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	0018      	movs	r0, r3
 80045f8:	2310      	movs	r3, #16
 80045fa:	001a      	movs	r2, r3
 80045fc:	2100      	movs	r1, #0
 80045fe:	f003 ff60 	bl	80084c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004602:	2310      	movs	r3, #16
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	0018      	movs	r0, r3
 8004608:	2308      	movs	r3, #8
 800460a:	001a      	movs	r2, r3
 800460c:	2100      	movs	r1, #0
 800460e:	f003 ff58 	bl	80084c2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004612:	003b      	movs	r3, r7
 8004614:	0018      	movs	r0, r3
 8004616:	2310      	movs	r3, #16
 8004618:	001a      	movs	r2, r3
 800461a:	2100      	movs	r1, #0
 800461c:	f003 ff51 	bl	80084c2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004620:	4b34      	ldr	r3, [pc, #208]	; (80046f4 <MX_TIM3_Init+0x108>)
 8004622:	4a35      	ldr	r2, [pc, #212]	; (80046f8 <MX_TIM3_Init+0x10c>)
 8004624:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8004626:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <MX_TIM3_Init+0x108>)
 8004628:	221f      	movs	r2, #31
 800462a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800462c:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <MX_TIM3_Init+0x108>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8004632:	4b30      	ldr	r3, [pc, #192]	; (80046f4 <MX_TIM3_Init+0x108>)
 8004634:	4a31      	ldr	r2, [pc, #196]	; (80046fc <MX_TIM3_Init+0x110>)
 8004636:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004638:	4b2e      	ldr	r3, [pc, #184]	; (80046f4 <MX_TIM3_Init+0x108>)
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800463e:	4b2d      	ldr	r3, [pc, #180]	; (80046f4 <MX_TIM3_Init+0x108>)
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004644:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <MX_TIM3_Init+0x108>)
 8004646:	0018      	movs	r0, r3
 8004648:	f002 fab4 	bl	8006bb4 <HAL_TIM_Base_Init>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d001      	beq.n	8004654 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004650:	f7ff fe20 	bl	8004294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004654:	2118      	movs	r1, #24
 8004656:	187b      	adds	r3, r7, r1
 8004658:	2280      	movs	r2, #128	; 0x80
 800465a:	0152      	lsls	r2, r2, #5
 800465c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800465e:	187a      	adds	r2, r7, r1
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <MX_TIM3_Init+0x108>)
 8004662:	0011      	movs	r1, r2
 8004664:	0018      	movs	r0, r3
 8004666:	f002 fe0d 	bl	8007284 <HAL_TIM_ConfigClockSource>
 800466a:	1e03      	subs	r3, r0, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800466e:	f7ff fe11 	bl	8004294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <MX_TIM3_Init+0x108>)
 8004674:	0018      	movs	r0, r3
 8004676:	f002 fb25 	bl	8006cc4 <HAL_TIM_PWM_Init>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d001      	beq.n	8004682 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800467e:	f7ff fe09 	bl	8004294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004682:	2110      	movs	r1, #16
 8004684:	187b      	adds	r3, r7, r1
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800468a:	187b      	adds	r3, r7, r1
 800468c:	2200      	movs	r2, #0
 800468e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004690:	187a      	adds	r2, r7, r1
 8004692:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <MX_TIM3_Init+0x108>)
 8004694:	0011      	movs	r1, r2
 8004696:	0018      	movs	r0, r3
 8004698:	f003 f908 	bl	80078ac <HAL_TIMEx_MasterConfigSynchronization>
 800469c:	1e03      	subs	r3, r0, #0
 800469e:	d001      	beq.n	80046a4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80046a0:	f7ff fdf8 	bl	8004294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046a4:	003b      	movs	r3, r7
 80046a6:	2260      	movs	r2, #96	; 0x60
 80046a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80046aa:	003b      	movs	r3, r7
 80046ac:	2200      	movs	r2, #0
 80046ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046b0:	003b      	movs	r3, r7
 80046b2:	2200      	movs	r2, #0
 80046b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046b6:	003b      	movs	r3, r7
 80046b8:	2200      	movs	r2, #0
 80046ba:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046bc:	0039      	movs	r1, r7
 80046be:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <MX_TIM3_Init+0x108>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	0018      	movs	r0, r3
 80046c4:	f002 fd18 	bl	80070f8 <HAL_TIM_PWM_ConfigChannel>
 80046c8:	1e03      	subs	r3, r0, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80046cc:	f7ff fde2 	bl	8004294 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <MX_TIM3_Init+0x108>)
 80046d2:	2104      	movs	r1, #4
 80046d4:	0018      	movs	r0, r3
 80046d6:	f003 f947 	bl	8007968 <HAL_TIMEx_RemapConfig>
 80046da:	1e03      	subs	r3, r0, #0
 80046dc:	d001      	beq.n	80046e2 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80046de:	f7ff fdd9 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <MX_TIM3_Init+0x108>)
 80046e4:	0018      	movs	r0, r3
 80046e6:	f000 f837 	bl	8004758 <HAL_TIM_MspPostInit>

}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b00a      	add	sp, #40	; 0x28
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	20000308 	.word	0x20000308
 80046f8:	40000400 	.word	0x40000400
 80046fc:	00004e1f 	.word	0x00004e1f

08004700 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	05db      	lsls	r3, r3, #23
 8004710:	429a      	cmp	r2, r3
 8004712:	d10e      	bne.n	8004732 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004714:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <HAL_TIM_Base_MspInit+0x50>)
 8004716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004718:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <HAL_TIM_Base_MspInit+0x50>)
 800471a:	2101      	movs	r1, #1
 800471c:	430a      	orrs	r2, r1
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004720:	2200      	movs	r2, #0
 8004722:	2100      	movs	r1, #0
 8004724:	200f      	movs	r0, #15
 8004726:	f000 fbd5 	bl	8004ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800472a:	200f      	movs	r0, #15
 800472c:	f000 fbe7 	bl	8004efe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004730:	e00a      	b.n	8004748 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM3)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a07      	ldr	r2, [pc, #28]	; (8004754 <HAL_TIM_Base_MspInit+0x54>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d105      	bne.n	8004748 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <HAL_TIM_Base_MspInit+0x50>)
 800473e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004740:	4b03      	ldr	r3, [pc, #12]	; (8004750 <HAL_TIM_Base_MspInit+0x50>)
 8004742:	2102      	movs	r1, #2
 8004744:	430a      	orrs	r2, r1
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b002      	add	sp, #8
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000
 8004754:	40000400 	.word	0x40000400

08004758 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b089      	sub	sp, #36	; 0x24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004760:	240c      	movs	r4, #12
 8004762:	193b      	adds	r3, r7, r4
 8004764:	0018      	movs	r0, r3
 8004766:	2314      	movs	r3, #20
 8004768:	001a      	movs	r2, r3
 800476a:	2100      	movs	r1, #0
 800476c:	f003 fea9 	bl	80084c2 <memset>
  if(timHandle->Instance==TIM3)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <HAL_TIM_MspPostInit+0x70>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d122      	bne.n	80047c0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <HAL_TIM_MspPostInit+0x74>)
 800477c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_TIM_MspPostInit+0x74>)
 8004780:	2101      	movs	r1, #1
 8004782:	430a      	orrs	r2, r1
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_TIM_MspPostInit+0x74>)
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	2201      	movs	r2, #1
 800478c:	4013      	ands	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004792:	0021      	movs	r1, r4
 8004794:	187b      	adds	r3, r7, r1
 8004796:	2240      	movs	r2, #64	; 0x40
 8004798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	187b      	adds	r3, r7, r1
 800479c:	2202      	movs	r2, #2
 800479e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	187b      	adds	r3, r7, r1
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	2200      	movs	r2, #0
 80047aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	2202      	movs	r2, #2
 80047b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b2:	187a      	adds	r2, r7, r1
 80047b4:	23a0      	movs	r3, #160	; 0xa0
 80047b6:	05db      	lsls	r3, r3, #23
 80047b8:	0011      	movs	r1, r2
 80047ba:	0018      	movs	r0, r3
 80047bc:	f000 fbbc 	bl	8004f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b009      	add	sp, #36	; 0x24
 80047c6:	bd90      	pop	{r4, r7, pc}
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40021000 	.word	0x40021000

080047d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <MX_USART2_UART_Init+0x58>)
 80047d6:	4a15      	ldr	r2, [pc, #84]	; (800482c <MX_USART2_UART_Init+0x5c>)
 80047d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <MX_USART2_UART_Init+0x58>)
 80047dc:	22e1      	movs	r2, #225	; 0xe1
 80047de:	0252      	lsls	r2, r2, #9
 80047e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047e2:	4b11      	ldr	r3, [pc, #68]	; (8004828 <MX_USART2_UART_Init+0x58>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <MX_USART2_UART_Init+0x58>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047ee:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <MX_USART2_UART_Init+0x58>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <MX_USART2_UART_Init+0x58>)
 80047f6:	220c      	movs	r2, #12
 80047f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <MX_USART2_UART_Init+0x58>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004800:	4b09      	ldr	r3, [pc, #36]	; (8004828 <MX_USART2_UART_Init+0x58>)
 8004802:	2200      	movs	r2, #0
 8004804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <MX_USART2_UART_Init+0x58>)
 8004808:	2200      	movs	r2, #0
 800480a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <MX_USART2_UART_Init+0x58>)
 800480e:	2200      	movs	r2, #0
 8004810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <MX_USART2_UART_Init+0x58>)
 8004814:	0018      	movs	r0, r3
 8004816:	f003 f8c5 	bl	80079a4 <HAL_UART_Init>
 800481a:	1e03      	subs	r3, r0, #0
 800481c:	d001      	beq.n	8004822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800481e:	f7ff fd39 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000348 	.word	0x20000348
 800482c:	40004400 	.word	0x40004400

08004830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004838:	240c      	movs	r4, #12
 800483a:	193b      	adds	r3, r7, r4
 800483c:	0018      	movs	r0, r3
 800483e:	2314      	movs	r3, #20
 8004840:	001a      	movs	r2, r3
 8004842:	2100      	movs	r1, #0
 8004844:	f003 fe3d 	bl	80084c2 <memset>
  if(uartHandle->Instance==USART2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <HAL_UART_MspInit+0x80>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d129      	bne.n	80048a6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004852:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <HAL_UART_MspInit+0x84>)
 8004854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004856:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <HAL_UART_MspInit+0x84>)
 8004858:	2180      	movs	r1, #128	; 0x80
 800485a:	0289      	lsls	r1, r1, #10
 800485c:	430a      	orrs	r2, r1
 800485e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004860:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <HAL_UART_MspInit+0x84>)
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <HAL_UART_MspInit+0x84>)
 8004866:	2101      	movs	r1, #1
 8004868:	430a      	orrs	r2, r1
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <HAL_UART_MspInit+0x84>)
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	2201      	movs	r2, #1
 8004872:	4013      	ands	r3, r2
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004878:	0021      	movs	r1, r4
 800487a:	187b      	adds	r3, r7, r1
 800487c:	220c      	movs	r2, #12
 800487e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004880:	187b      	adds	r3, r7, r1
 8004882:	2202      	movs	r2, #2
 8004884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	187b      	adds	r3, r7, r1
 8004888:	2200      	movs	r2, #0
 800488a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800488c:	187b      	adds	r3, r7, r1
 800488e:	2203      	movs	r2, #3
 8004890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004892:	187b      	adds	r3, r7, r1
 8004894:	2204      	movs	r2, #4
 8004896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004898:	187a      	adds	r2, r7, r1
 800489a:	23a0      	movs	r3, #160	; 0xa0
 800489c:	05db      	lsls	r3, r3, #23
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 fb49 	bl	8004f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b009      	add	sp, #36	; 0x24
 80048ac:	bd90      	pop	{r4, r7, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	40004400 	.word	0x40004400
 80048b4:	40021000 	.word	0x40021000

080048b8 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 80048b8:	b5b0      	push	{r4, r5, r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	210e      	movs	r1, #14
 80048c4:	187b      	adds	r3, r7, r1
 80048c6:	1c02      	adds	r2, r0, #0
 80048c8:	801a      	strh	r2, [r3, #0]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	330a      	adds	r3, #10
 80048ce:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	b29d      	uxth	r5, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	68bc      	ldr	r4, [r7, #8]
 80048d8:	187a      	adds	r2, r7, r1
 80048da:	8811      	ldrh	r1, [r2, #0]
 80048dc:	4806      	ldr	r0, [pc, #24]	; (80048f8 <_I2CWrite+0x40>)
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	002b      	movs	r3, r5
 80048e2:	0022      	movs	r2, r4
 80048e4:	f000 fd5a 	bl	800539c <HAL_I2C_Master_Transmit>
 80048e8:	0003      	movs	r3, r0
 80048ea:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80048ec:	693b      	ldr	r3, [r7, #16]
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b006      	add	sp, #24
 80048f4:	bdb0      	pop	{r4, r5, r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	20000200 	.word	0x20000200

080048fc <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b089      	sub	sp, #36	; 0x24
 8004900:	af02      	add	r7, sp, #8
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	210e      	movs	r1, #14
 8004908:	187b      	adds	r3, r7, r1
 800490a:	1c02      	adds	r2, r0, #0
 800490c:	801a      	strh	r2, [r3, #0]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	330a      	adds	r3, #10
 8004912:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 8004914:	187b      	adds	r3, r7, r1
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	2201      	movs	r2, #1
 800491a:	4313      	orrs	r3, r2
 800491c:	b299      	uxth	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	b29c      	uxth	r4, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	4806      	ldr	r0, [pc, #24]	; (8004940 <_I2CRead+0x44>)
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	0023      	movs	r3, r4
 800492c:	f000 fe3e 	bl	80055ac <HAL_I2C_Master_Receive>
 8004930:	0003      	movs	r3, r0
 8004932:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8004934:	693b      	ldr	r3, [r7, #16]
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b007      	add	sp, #28
 800493c:	bd90      	pop	{r4, r7, pc}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	20000200 	.word	0x20000200

08004944 <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	0004      	movs	r4, r0
 800494c:	0008      	movs	r0, r1
 800494e:	0011      	movs	r1, r2
 8004950:	1dbb      	adds	r3, r7, #6
 8004952:	1c22      	adds	r2, r4, #0
 8004954:	801a      	strh	r2, [r3, #0]
 8004956:	1d3b      	adds	r3, r7, #4
 8004958:	1c02      	adds	r2, r0, #0
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	1cfb      	adds	r3, r7, #3
 800495e:	1c0a      	adds	r2, r1, #0
 8004960:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004962:	240f      	movs	r4, #15
 8004964:	193b      	adds	r3, r7, r4
 8004966:	2200      	movs	r2, #0
 8004968:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b29b      	uxth	r3, r3
 8004972:	b2da      	uxtb	r2, r3
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <VL53L1_WrByte+0x74>)
 8004976:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <VL53L1_WrByte+0x74>)
 8004980:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8004982:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <VL53L1_WrByte+0x74>)
 8004984:	1cfa      	adds	r2, r7, #3
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	709a      	strb	r2, [r3, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800498a:	490b      	ldr	r1, [pc, #44]	; (80049b8 <VL53L1_WrByte+0x74>)
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	2203      	movs	r2, #3
 8004992:	0018      	movs	r0, r3
 8004994:	f7ff ff90 	bl	80048b8 <_I2CWrite>
 8004998:	0003      	movs	r3, r0
 800499a:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <VL53L1_WrByte+0x64>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80049a2:	193b      	adds	r3, r7, r4
 80049a4:	22f3      	movs	r2, #243	; 0xf3
 80049a6:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 80049a8:	230f      	movs	r3, #15
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	b25b      	sxtb	r3, r3
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b005      	add	sp, #20
 80049b6:	bd90      	pop	{r4, r7, pc}
 80049b8:	200003cc 	.word	0x200003cc

080049bc <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data) {
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	0004      	movs	r4, r0
 80049c4:	0008      	movs	r0, r1
 80049c6:	0011      	movs	r1, r2
 80049c8:	1dbb      	adds	r3, r7, #6
 80049ca:	1c22      	adds	r2, r4, #0
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	1c02      	adds	r2, r0, #0
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	1cbb      	adds	r3, r7, #2
 80049d6:	1c0a      	adds	r2, r1, #0
 80049d8:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80049da:	240f      	movs	r4, #15
 80049dc:	193b      	adds	r3, r7, r4
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <VL53L1_WrWord+0x84>)
 80049ee:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80049f0:	1d3b      	adds	r3, r7, #4
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <VL53L1_WrWord+0x84>)
 80049f8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80049fa:	1cbb      	adds	r3, r7, #2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <VL53L1_WrWord+0x84>)
 8004a06:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8004a08:	1cbb      	adds	r3, r7, #2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <VL53L1_WrWord+0x84>)
 8004a10:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8004a12:	490b      	ldr	r1, [pc, #44]	; (8004a40 <VL53L1_WrWord+0x84>)
 8004a14:	1dbb      	adds	r3, r7, #6
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	2204      	movs	r2, #4
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f7ff ff4c 	bl	80048b8 <_I2CWrite>
 8004a20:	0003      	movs	r3, r0
 8004a22:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <VL53L1_WrWord+0x74>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004a2a:	193b      	adds	r3, r7, r4
 8004a2c:	22f3      	movs	r2, #243	; 0xf3
 8004a2e:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 8004a30:	230f      	movs	r3, #15
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	b25b      	sxtb	r3, r3
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b005      	add	sp, #20
 8004a3e:	bd90      	pop	{r4, r7, pc}
 8004a40:	200003cc 	.word	0x200003cc

08004a44 <VL53L1_WrDWord>:

VL53L1_Error VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data) {
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	603a      	str	r2, [r7, #0]
 8004a4c:	1dbb      	adds	r3, r7, #6
 8004a4e:	1c02      	adds	r2, r0, #0
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	1d3b      	adds	r3, r7, #4
 8004a54:	1c0a      	adds	r2, r1, #0
 8004a56:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a58:	240f      	movs	r4, #15
 8004a5a:	193b      	adds	r3, r7, r4
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	0a1b      	lsrs	r3, r3, #8
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <VL53L1_WrDWord+0x88>)
 8004a6c:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	4b15      	ldr	r3, [pc, #84]	; (8004acc <VL53L1_WrDWord+0x88>)
 8004a76:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	0e1b      	lsrs	r3, r3, #24
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <VL53L1_WrDWord+0x88>)
 8004a80:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	0c1b      	lsrs	r3, r3, #16
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <VL53L1_WrDWord+0x88>)
 8004a8a:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <VL53L1_WrDWord+0x88>)
 8004a94:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <VL53L1_WrDWord+0x88>)
 8004a9c:	715a      	strb	r2, [r3, #5]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 8004a9e:	490b      	ldr	r1, [pc, #44]	; (8004acc <VL53L1_WrDWord+0x88>)
 8004aa0:	1dbb      	adds	r3, r7, #6
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	2206      	movs	r2, #6
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7ff ff06 	bl	80048b8 <_I2CWrite>
 8004aac:	0003      	movs	r3, r0
 8004aae:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <VL53L1_WrDWord+0x78>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004ab6:	193b      	adds	r3, r7, r4
 8004ab8:	22f3      	movs	r2, #243	; 0xf3
 8004aba:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 8004abc:	230f      	movs	r3, #15
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b25b      	sxtb	r3, r3
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b005      	add	sp, #20
 8004aca:	bd90      	pop	{r4, r7, pc}
 8004acc:	200003cc 	.word	0x200003cc

08004ad0 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8004ad0:	b590      	push	{r4, r7, lr}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	603a      	str	r2, [r7, #0]
 8004ad8:	1dbb      	adds	r3, r7, #6
 8004ada:	1c02      	adds	r2, r0, #0
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	1c0a      	adds	r2, r1, #0
 8004ae2:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004ae4:	240f      	movs	r4, #15
 8004ae6:	193b      	adds	r3, r7, r4
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <VL53L1_RdByte+0x88>)
 8004af8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <VL53L1_RdByte+0x88>)
 8004b02:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004b04:	4914      	ldr	r1, [pc, #80]	; (8004b58 <VL53L1_RdByte+0x88>)
 8004b06:	1dbb      	adds	r3, r7, #6
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7ff fed3 	bl	80048b8 <_I2CWrite>
 8004b12:	0003      	movs	r3, r0
 8004b14:	60bb      	str	r3, [r7, #8]
    if( status_int ){
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004b1c:	193b      	adds	r3, r7, r4
 8004b1e:	22f3      	movs	r2, #243	; 0xf3
 8004b20:	701a      	strb	r2, [r3, #0]
        goto done;
 8004b22:	e011      	b.n	8004b48 <VL53L1_RdByte+0x78>
    }
    status_int = _I2CRead(Dev, data, 1);
 8004b24:	6839      	ldr	r1, [r7, #0]
 8004b26:	1dbb      	adds	r3, r7, #6
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff fee5 	bl	80048fc <_I2CRead>
 8004b32:	0003      	movs	r3, r0
 8004b34:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <VL53L1_RdByte+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004b3c:	230f      	movs	r3, #15
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	22f3      	movs	r2, #243	; 0xf3
 8004b42:	701a      	strb	r2, [r3, #0]
 8004b44:	e000      	b.n	8004b48 <VL53L1_RdByte+0x78>
    }
done:
 8004b46:	46c0      	nop			; (mov r8, r8)
    VL53L1_PutI2cBus();
    return Status;
 8004b48:	230f      	movs	r3, #15
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b25b      	sxtb	r3, r3
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b005      	add	sp, #20
 8004b56:	bd90      	pop	{r4, r7, pc}
 8004b58:	200003cc 	.word	0x200003cc

08004b5c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	603a      	str	r2, [r7, #0]
 8004b64:	1dbb      	adds	r3, r7, #6
 8004b66:	1c02      	adds	r2, r0, #0
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	1c0a      	adds	r2, r1, #0
 8004b6e:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004b70:	240f      	movs	r4, #15
 8004b72:	193b      	adds	r3, r7, r4
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <VL53L1_RdWord+0xa0>)
 8004b84:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <VL53L1_RdWord+0xa0>)
 8004b8e:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004b90:	491a      	ldr	r1, [pc, #104]	; (8004bfc <VL53L1_RdWord+0xa0>)
 8004b92:	1dbb      	adds	r3, r7, #6
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	2202      	movs	r2, #2
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f7ff fe8d 	bl	80048b8 <_I2CWrite>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	60bb      	str	r3, [r7, #8]

    if( status_int ){
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <VL53L1_RdWord+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004ba8:	193b      	adds	r3, r7, r4
 8004baa:	22f3      	movs	r2, #243	; 0xf3
 8004bac:	701a      	strb	r2, [r3, #0]
        goto done;
 8004bae:	e01c      	b.n	8004bea <VL53L1_RdWord+0x8e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004bb0:	4912      	ldr	r1, [pc, #72]	; (8004bfc <VL53L1_RdWord+0xa0>)
 8004bb2:	1dbb      	adds	r3, r7, #6
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7ff fe9f 	bl	80048fc <_I2CRead>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <VL53L1_RdWord+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	22f3      	movs	r2, #243	; 0xf3
 8004bce:	701a      	strb	r2, [r3, #0]
        goto done;
 8004bd0:	e00b      	b.n	8004bea <VL53L1_RdWord+0x8e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <VL53L1_RdWord+0xa0>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <VL53L1_RdWord+0xa0>)
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	18d3      	adds	r3, r2, r3
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8004bea:	230f      	movs	r3, #15
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	b25b      	sxtb	r3, r3
 }
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b005      	add	sp, #20
 8004bf8:	bd90      	pop	{r4, r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	200003cc 	.word	0x200003cc

08004c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
      ldr   r0, =_estack
 8004c00:	480d      	ldr	r0, [pc, #52]	; (8004c38 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004c02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c04:	480d      	ldr	r0, [pc, #52]	; (8004c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8004c06:	490e      	ldr	r1, [pc, #56]	; (8004c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c08:	4a0e      	ldr	r2, [pc, #56]	; (8004c44 <LoopForever+0xe>)
  movs r3, #0
 8004c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c0c:	e002      	b.n	8004c14 <LoopCopyDataInit>

08004c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c12:	3304      	adds	r3, #4

08004c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c18:	d3f9      	bcc.n	8004c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c1a:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c1c:	4c0b      	ldr	r4, [pc, #44]	; (8004c4c <LoopForever+0x16>)
  movs r3, #0
 8004c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c20:	e001      	b.n	8004c26 <LoopFillZerobss>

08004c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c24:	3204      	adds	r2, #4

08004c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c28:	d3fb      	bcc.n	8004c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004c2a:	f7ff fc5d 	bl	80044e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c2e:	f003 fc1b 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c32:	f7ff f92d 	bl	8003e90 <main>

08004c36 <LoopForever>:

LoopForever:
    b LoopForever
 8004c36:	e7fe      	b.n	8004c36 <LoopForever>
      ldr   r0, =_estack
 8004c38:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c40:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004c44:	0800ba2c 	.word	0x0800ba2c
  ldr r2, =_sbss
 8004c48:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004c4c:	200004e0 	.word	0x200004e0

08004c50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c50:	e7fe      	b.n	8004c50 <ADC1_COMP_IRQHandler>
	...

08004c54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c5a:	1dfb      	adds	r3, r7, #7
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_Init+0x3c>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <HAL_Init+0x3c>)
 8004c66:	2140      	movs	r1, #64	; 0x40
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f000 f811 	bl	8004c94 <HAL_InitTick>
 8004c72:	1e03      	subs	r3, r0, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	2201      	movs	r2, #1
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	e001      	b.n	8004c82 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c7e:	f7ff fb3d 	bl	80042fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c82:	1dfb      	adds	r3, r7, #7
 8004c84:	781b      	ldrb	r3, [r3, #0]
}
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b002      	add	sp, #8
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	40022000 	.word	0x40022000

08004c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c9c:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <HAL_InitTick+0x5c>)
 8004c9e:	681c      	ldr	r4, [r3, #0]
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <HAL_InitTick+0x60>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	23fa      	movs	r3, #250	; 0xfa
 8004ca8:	0098      	lsls	r0, r3, #2
 8004caa:	f7fb fa49 	bl	8000140 <__udivsi3>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	0020      	movs	r0, r4
 8004cb4:	f7fb fa44 	bl	8000140 <__udivsi3>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f000 f92f 	bl	8004f1e <HAL_SYSTICK_Config>
 8004cc0:	1e03      	subs	r3, r0, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e00f      	b.n	8004ce8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d80b      	bhi.n	8004ce6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 f8fc 	bl	8004ed4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <HAL_InitTick+0x64>)
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e000      	b.n	8004ce8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b003      	add	sp, #12
 8004cee:	bd90      	pop	{r4, r7, pc}
 8004cf0:	20000008 	.word	0x20000008
 8004cf4:	20000010 	.word	0x20000010
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_IncTick+0x1c>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	001a      	movs	r2, r3
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_IncTick+0x20>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	18d2      	adds	r2, r2, r3
 8004d0c:	4b03      	ldr	r3, [pc, #12]	; (8004d1c <HAL_IncTick+0x20>)
 8004d0e:	601a      	str	r2, [r3, #0]
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	20000010 	.word	0x20000010
 8004d1c:	200004cc 	.word	0x200004cc

08004d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  return uwTick;
 8004d24:	4b02      	ldr	r3, [pc, #8]	; (8004d30 <HAL_GetTick+0x10>)
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	0018      	movs	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	200004cc 	.word	0x200004cc

08004d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d3c:	f7ff fff0 	bl	8004d20 <HAL_GetTick>
 8004d40:	0003      	movs	r3, r0
 8004d42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	d005      	beq.n	8004d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_Delay+0x44>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	001a      	movs	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	f7ff ffe0 	bl	8004d20 <HAL_GetTick>
 8004d60:	0002      	movs	r2, r0
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d8f7      	bhi.n	8004d5c <HAL_Delay+0x28>
  {
  }
}
 8004d6c:	46c0      	nop			; (mov r8, r8)
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b004      	add	sp, #16
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	20000010 	.word	0x20000010

08004d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	0002      	movs	r2, r0
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d8e:	d809      	bhi.n	8004da4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d90:	1dfb      	adds	r3, r7, #7
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	001a      	movs	r2, r3
 8004d96:	231f      	movs	r3, #31
 8004d98:	401a      	ands	r2, r3
 8004d9a:	4b04      	ldr	r3, [pc, #16]	; (8004dac <__NVIC_EnableIRQ+0x30>)
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	4091      	lsls	r1, r2
 8004da0:	000a      	movs	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]
  }
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	e000e100 	.word	0xe000e100

08004db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004db0:	b590      	push	{r4, r7, lr}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	0002      	movs	r2, r0
 8004db8:	6039      	str	r1, [r7, #0]
 8004dba:	1dfb      	adds	r3, r7, #7
 8004dbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dbe:	1dfb      	adds	r3, r7, #7
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc4:	d828      	bhi.n	8004e18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dc6:	4a2f      	ldr	r2, [pc, #188]	; (8004e84 <__NVIC_SetPriority+0xd4>)
 8004dc8:	1dfb      	adds	r3, r7, #7
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	b25b      	sxtb	r3, r3
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	33c0      	adds	r3, #192	; 0xc0
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	589b      	ldr	r3, [r3, r2]
 8004dd6:	1dfa      	adds	r2, r7, #7
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	0011      	movs	r1, r2
 8004ddc:	2203      	movs	r2, #3
 8004dde:	400a      	ands	r2, r1
 8004de0:	00d2      	lsls	r2, r2, #3
 8004de2:	21ff      	movs	r1, #255	; 0xff
 8004de4:	4091      	lsls	r1, r2
 8004de6:	000a      	movs	r2, r1
 8004de8:	43d2      	mvns	r2, r2
 8004dea:	401a      	ands	r2, r3
 8004dec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	22ff      	movs	r2, #255	; 0xff
 8004df4:	401a      	ands	r2, r3
 8004df6:	1dfb      	adds	r3, r7, #7
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	4003      	ands	r3, r0
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e04:	481f      	ldr	r0, [pc, #124]	; (8004e84 <__NVIC_SetPriority+0xd4>)
 8004e06:	1dfb      	adds	r3, r7, #7
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	33c0      	adds	r3, #192	; 0xc0
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e16:	e031      	b.n	8004e7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e18:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <__NVIC_SetPriority+0xd8>)
 8004e1a:	1dfb      	adds	r3, r7, #7
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	0019      	movs	r1, r3
 8004e20:	230f      	movs	r3, #15
 8004e22:	400b      	ands	r3, r1
 8004e24:	3b08      	subs	r3, #8
 8004e26:	089b      	lsrs	r3, r3, #2
 8004e28:	3306      	adds	r3, #6
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	18d3      	adds	r3, r2, r3
 8004e2e:	3304      	adds	r3, #4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	1dfa      	adds	r2, r7, #7
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	0011      	movs	r1, r2
 8004e38:	2203      	movs	r2, #3
 8004e3a:	400a      	ands	r2, r1
 8004e3c:	00d2      	lsls	r2, r2, #3
 8004e3e:	21ff      	movs	r1, #255	; 0xff
 8004e40:	4091      	lsls	r1, r2
 8004e42:	000a      	movs	r2, r1
 8004e44:	43d2      	mvns	r2, r2
 8004e46:	401a      	ands	r2, r3
 8004e48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	22ff      	movs	r2, #255	; 0xff
 8004e50:	401a      	ands	r2, r3
 8004e52:	1dfb      	adds	r3, r7, #7
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	0018      	movs	r0, r3
 8004e58:	2303      	movs	r3, #3
 8004e5a:	4003      	ands	r3, r0
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e60:	4809      	ldr	r0, [pc, #36]	; (8004e88 <__NVIC_SetPriority+0xd8>)
 8004e62:	1dfb      	adds	r3, r7, #7
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	001c      	movs	r4, r3
 8004e68:	230f      	movs	r3, #15
 8004e6a:	4023      	ands	r3, r4
 8004e6c:	3b08      	subs	r3, #8
 8004e6e:	089b      	lsrs	r3, r3, #2
 8004e70:	430a      	orrs	r2, r1
 8004e72:	3306      	adds	r3, #6
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	18c3      	adds	r3, r0, r3
 8004e78:	3304      	adds	r3, #4
 8004e7a:	601a      	str	r2, [r3, #0]
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b003      	add	sp, #12
 8004e82:	bd90      	pop	{r4, r7, pc}
 8004e84:	e000e100 	.word	0xe000e100
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	1e5a      	subs	r2, r3, #1
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	045b      	lsls	r3, r3, #17
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d301      	bcc.n	8004ea4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e010      	b.n	8004ec6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <SysTick_Config+0x44>)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eac:	2301      	movs	r3, #1
 8004eae:	425b      	negs	r3, r3
 8004eb0:	2103      	movs	r1, #3
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f7ff ff7c 	bl	8004db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <SysTick_Config+0x44>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <SysTick_Config+0x44>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b002      	add	sp, #8
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	e000e010 	.word	0xe000e010

08004ed4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	210f      	movs	r1, #15
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	1c02      	adds	r2, r0, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	b25b      	sxtb	r3, r3
 8004eee:	0011      	movs	r1, r2
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f7ff ff5d 	bl	8004db0 <__NVIC_SetPriority>
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b004      	add	sp, #16
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	0002      	movs	r2, r0
 8004f06:	1dfb      	adds	r3, r7, #7
 8004f08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f0a:	1dfb      	adds	r3, r7, #7
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	0018      	movs	r0, r3
 8004f12:	f7ff ff33 	bl	8004d7c <__NVIC_EnableIRQ>
}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b002      	add	sp, #8
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f7ff ffaf 	bl	8004e8c <SysTick_Config>
 8004f2e:	0003      	movs	r3, r0
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f4e:	e155      	b.n	80051fc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2101      	movs	r1, #1
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4091      	lsls	r1, r2
 8004f5a:	000a      	movs	r2, r1
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d100      	bne.n	8004f68 <HAL_GPIO_Init+0x30>
 8004f66:	e146      	b.n	80051f6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d005      	beq.n	8004f80 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2203      	movs	r2, #3
 8004f7a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d130      	bne.n	8004fe2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	0013      	movs	r3, r2
 8004f90:	43da      	mvns	r2, r3
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	0013      	movs	r3, r2
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	0013      	movs	r3, r2
 8004fbe:	43da      	mvns	r2, r3
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	2201      	movs	r2, #1
 8004fce:	401a      	ands	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	0013      	movs	r3, r2
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d017      	beq.n	800501e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	0013      	movs	r3, r2
 8004ffe:	43da      	mvns	r2, r3
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4013      	ands	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	409a      	lsls	r2, r3
 8005010:	0013      	movs	r3, r2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2203      	movs	r2, #3
 8005024:	4013      	ands	r3, r2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d123      	bne.n	8005072 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	08da      	lsrs	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3208      	adds	r2, #8
 8005032:	0092      	lsls	r2, r2, #2
 8005034:	58d3      	ldr	r3, [r2, r3]
 8005036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2207      	movs	r2, #7
 800503c:	4013      	ands	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	220f      	movs	r2, #15
 8005042:	409a      	lsls	r2, r3
 8005044:	0013      	movs	r3, r2
 8005046:	43da      	mvns	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4013      	ands	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2107      	movs	r1, #7
 8005056:	400b      	ands	r3, r1
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	409a      	lsls	r2, r3
 800505c:	0013      	movs	r3, r2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	08da      	lsrs	r2, r3, #3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3208      	adds	r2, #8
 800506c:	0092      	lsls	r2, r2, #2
 800506e:	6939      	ldr	r1, [r7, #16]
 8005070:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	2203      	movs	r2, #3
 800507e:	409a      	lsls	r2, r3
 8005080:	0013      	movs	r3, r2
 8005082:	43da      	mvns	r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4013      	ands	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2203      	movs	r2, #3
 8005090:	401a      	ands	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	409a      	lsls	r2, r3
 8005098:	0013      	movs	r3, r2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	23c0      	movs	r3, #192	; 0xc0
 80050ac:	029b      	lsls	r3, r3, #10
 80050ae:	4013      	ands	r3, r2
 80050b0:	d100      	bne.n	80050b4 <HAL_GPIO_Init+0x17c>
 80050b2:	e0a0      	b.n	80051f6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b4:	4b57      	ldr	r3, [pc, #348]	; (8005214 <HAL_GPIO_Init+0x2dc>)
 80050b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b8:	4b56      	ldr	r3, [pc, #344]	; (8005214 <HAL_GPIO_Init+0x2dc>)
 80050ba:	2101      	movs	r1, #1
 80050bc:	430a      	orrs	r2, r1
 80050be:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80050c0:	4a55      	ldr	r2, [pc, #340]	; (8005218 <HAL_GPIO_Init+0x2e0>)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	3302      	adds	r3, #2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	589b      	ldr	r3, [r3, r2]
 80050cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2203      	movs	r2, #3
 80050d2:	4013      	ands	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	220f      	movs	r2, #15
 80050d8:	409a      	lsls	r2, r3
 80050da:	0013      	movs	r3, r2
 80050dc:	43da      	mvns	r2, r3
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4013      	ands	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	23a0      	movs	r3, #160	; 0xa0
 80050e8:	05db      	lsls	r3, r3, #23
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d01f      	beq.n	800512e <HAL_GPIO_Init+0x1f6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a4a      	ldr	r2, [pc, #296]	; (800521c <HAL_GPIO_Init+0x2e4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d019      	beq.n	800512a <HAL_GPIO_Init+0x1f2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a49      	ldr	r2, [pc, #292]	; (8005220 <HAL_GPIO_Init+0x2e8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <HAL_GPIO_Init+0x1ee>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a48      	ldr	r2, [pc, #288]	; (8005224 <HAL_GPIO_Init+0x2ec>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00d      	beq.n	8005122 <HAL_GPIO_Init+0x1ea>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a47      	ldr	r2, [pc, #284]	; (8005228 <HAL_GPIO_Init+0x2f0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <HAL_GPIO_Init+0x1e6>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a46      	ldr	r2, [pc, #280]	; (800522c <HAL_GPIO_Init+0x2f4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d101      	bne.n	800511a <HAL_GPIO_Init+0x1e2>
 8005116:	2305      	movs	r3, #5
 8005118:	e00a      	b.n	8005130 <HAL_GPIO_Init+0x1f8>
 800511a:	2306      	movs	r3, #6
 800511c:	e008      	b.n	8005130 <HAL_GPIO_Init+0x1f8>
 800511e:	2304      	movs	r3, #4
 8005120:	e006      	b.n	8005130 <HAL_GPIO_Init+0x1f8>
 8005122:	2303      	movs	r3, #3
 8005124:	e004      	b.n	8005130 <HAL_GPIO_Init+0x1f8>
 8005126:	2302      	movs	r3, #2
 8005128:	e002      	b.n	8005130 <HAL_GPIO_Init+0x1f8>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <HAL_GPIO_Init+0x1f8>
 800512e:	2300      	movs	r3, #0
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	2103      	movs	r1, #3
 8005134:	400a      	ands	r2, r1
 8005136:	0092      	lsls	r2, r2, #2
 8005138:	4093      	lsls	r3, r2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005140:	4935      	ldr	r1, [pc, #212]	; (8005218 <HAL_GPIO_Init+0x2e0>)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	089b      	lsrs	r3, r3, #2
 8005146:	3302      	adds	r3, #2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800514e:	4b38      	ldr	r3, [pc, #224]	; (8005230 <HAL_GPIO_Init+0x2f8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	43da      	mvns	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	025b      	lsls	r3, r3, #9
 8005166:	4013      	ands	r3, r2
 8005168:	d003      	beq.n	8005172 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005172:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <HAL_GPIO_Init+0x2f8>)
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005178:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <HAL_GPIO_Init+0x2f8>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	43da      	mvns	r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4013      	ands	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	029b      	lsls	r3, r3, #10
 8005190:	4013      	ands	r3, r2
 8005192:	d003      	beq.n	800519c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800519c:	4b24      	ldr	r3, [pc, #144]	; (8005230 <HAL_GPIO_Init+0x2f8>)
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051a2:	4b23      	ldr	r3, [pc, #140]	; (8005230 <HAL_GPIO_Init+0x2f8>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	43da      	mvns	r2, r3
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4013      	ands	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	2380      	movs	r3, #128	; 0x80
 80051b8:	035b      	lsls	r3, r3, #13
 80051ba:	4013      	ands	r3, r2
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <HAL_GPIO_Init+0x2f8>)
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80051cc:	4b18      	ldr	r3, [pc, #96]	; (8005230 <HAL_GPIO_Init+0x2f8>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	43da      	mvns	r2, r3
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4013      	ands	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	039b      	lsls	r3, r3, #14
 80051e4:	4013      	ands	r3, r2
 80051e6:	d003      	beq.n	80051f0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <HAL_GPIO_Init+0x2f8>)
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3301      	adds	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	40da      	lsrs	r2, r3
 8005204:	1e13      	subs	r3, r2, #0
 8005206:	d000      	beq.n	800520a <HAL_GPIO_Init+0x2d2>
 8005208:	e6a2      	b.n	8004f50 <HAL_GPIO_Init+0x18>
  }
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	b006      	add	sp, #24
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000
 8005218:	40010000 	.word	0x40010000
 800521c:	50000400 	.word	0x50000400
 8005220:	50000800 	.word	0x50000800
 8005224:	50000c00 	.word	0x50000c00
 8005228:	50001000 	.word	0x50001000
 800522c:	50001c00 	.word	0x50001c00
 8005230:	40010400 	.word	0x40010400

08005234 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	0008      	movs	r0, r1
 800523e:	0011      	movs	r1, r2
 8005240:	1cbb      	adds	r3, r7, #2
 8005242:	1c02      	adds	r2, r0, #0
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	1c7b      	adds	r3, r7, #1
 8005248:	1c0a      	adds	r2, r1, #0
 800524a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800524c:	1c7b      	adds	r3, r7, #1
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d004      	beq.n	800525e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005254:	1cbb      	adds	r3, r7, #2
 8005256:	881a      	ldrh	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800525c:	e003      	b.n	8005266 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800525e:	1cbb      	adds	r3, r7, #2
 8005260:	881a      	ldrh	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	46bd      	mov	sp, r7
 800526a:	b002      	add	sp, #8
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e082      	b.n	8005388 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2241      	movs	r2, #65	; 0x41
 8005286:	5c9b      	ldrb	r3, [r3, r2]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d107      	bne.n	800529e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2240      	movs	r2, #64	; 0x40
 8005292:	2100      	movs	r1, #0
 8005294:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	0018      	movs	r0, r3
 800529a:	f7fe fdb5 	bl	8003e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2241      	movs	r2, #65	; 0x41
 80052a2:	2124      	movs	r1, #36	; 0x24
 80052a4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2101      	movs	r1, #1
 80052b2:	438a      	bics	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4934      	ldr	r1, [pc, #208]	; (8005390 <HAL_I2C_Init+0x120>)
 80052c0:	400a      	ands	r2, r1
 80052c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4931      	ldr	r1, [pc, #196]	; (8005394 <HAL_I2C_Init+0x124>)
 80052d0:	400a      	ands	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d108      	bne.n	80052ee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2180      	movs	r1, #128	; 0x80
 80052e6:	0209      	lsls	r1, r1, #8
 80052e8:	430a      	orrs	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	e007      	b.n	80052fe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2184      	movs	r1, #132	; 0x84
 80052f8:	0209      	lsls	r1, r1, #8
 80052fa:	430a      	orrs	r2, r1
 80052fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d104      	bne.n	8005310 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	0112      	lsls	r2, r2, #4
 800530e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	491f      	ldr	r1, [pc, #124]	; (8005398 <HAL_I2C_Init+0x128>)
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	491a      	ldr	r1, [pc, #104]	; (8005394 <HAL_I2C_Init+0x124>)
 800532c:	400a      	ands	r2, r1
 800532e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	431a      	orrs	r2, r3
 800533a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69d9      	ldr	r1, [r3, #28]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1a      	ldr	r2, [r3, #32]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2101      	movs	r1, #1
 8005366:	430a      	orrs	r2, r1
 8005368:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2241      	movs	r2, #65	; 0x41
 8005374:	2120      	movs	r1, #32
 8005376:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2242      	movs	r2, #66	; 0x42
 8005382:	2100      	movs	r1, #0
 8005384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b002      	add	sp, #8
 800538e:	bd80      	pop	{r7, pc}
 8005390:	f0ffffff 	.word	0xf0ffffff
 8005394:	ffff7fff 	.word	0xffff7fff
 8005398:	02008000 	.word	0x02008000

0800539c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b089      	sub	sp, #36	; 0x24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	0008      	movs	r0, r1
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	0019      	movs	r1, r3
 80053aa:	230a      	movs	r3, #10
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	1c02      	adds	r2, r0, #0
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	2308      	movs	r3, #8
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	1c0a      	adds	r2, r1, #0
 80053b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2241      	movs	r2, #65	; 0x41
 80053be:	5c9b      	ldrb	r3, [r3, r2]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d000      	beq.n	80053c8 <HAL_I2C_Master_Transmit+0x2c>
 80053c6:	e0e7      	b.n	8005598 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2240      	movs	r2, #64	; 0x40
 80053cc:	5c9b      	ldrb	r3, [r3, r2]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_I2C_Master_Transmit+0x3a>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0e1      	b.n	800559a <HAL_I2C_Master_Transmit+0x1fe>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2240      	movs	r2, #64	; 0x40
 80053da:	2101      	movs	r1, #1
 80053dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053de:	f7ff fc9f 	bl	8004d20 <HAL_GetTick>
 80053e2:	0003      	movs	r3, r0
 80053e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	0219      	lsls	r1, r3, #8
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	2319      	movs	r3, #25
 80053f2:	2201      	movs	r2, #1
 80053f4:	f000 fa04 	bl	8005800 <I2C_WaitOnFlagUntilTimeout>
 80053f8:	1e03      	subs	r3, r0, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0cc      	b.n	800559a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2241      	movs	r2, #65	; 0x41
 8005404:	2121      	movs	r1, #33	; 0x21
 8005406:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2242      	movs	r2, #66	; 0x42
 800540c:	2110      	movs	r1, #16
 800540e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2208      	movs	r2, #8
 8005420:	18ba      	adds	r2, r7, r2
 8005422:	8812      	ldrh	r2, [r2, #0]
 8005424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2bff      	cmp	r3, #255	; 0xff
 8005434:	d911      	bls.n	800545a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	22ff      	movs	r2, #255	; 0xff
 800543a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	b2da      	uxtb	r2, r3
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	045c      	lsls	r4, r3, #17
 8005446:	230a      	movs	r3, #10
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	8819      	ldrh	r1, [r3, #0]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	4b55      	ldr	r3, [pc, #340]	; (80055a4 <HAL_I2C_Master_Transmit+0x208>)
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	0023      	movs	r3, r4
 8005454:	f000 fb74 	bl	8005b40 <I2C_TransferConfig>
 8005458:	e075      	b.n	8005546 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005468:	b2da      	uxtb	r2, r3
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	049c      	lsls	r4, r3, #18
 800546e:	230a      	movs	r3, #10
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	8819      	ldrh	r1, [r3, #0]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	4b4b      	ldr	r3, [pc, #300]	; (80055a4 <HAL_I2C_Master_Transmit+0x208>)
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	0023      	movs	r3, r4
 800547c:	f000 fb60 	bl	8005b40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005480:	e061      	b.n	8005546 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	0018      	movs	r0, r3
 800548a:	f000 f9f8 	bl	800587e <I2C_WaitOnTXISFlagUntilTimeout>
 800548e:	1e03      	subs	r3, r0, #0
 8005490:	d001      	beq.n	8005496 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e081      	b.n	800559a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d03a      	beq.n	8005546 <HAL_I2C_Master_Transmit+0x1aa>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d136      	bne.n	8005546 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	0013      	movs	r3, r2
 80054e2:	2200      	movs	r2, #0
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	f000 f98b 	bl	8005800 <I2C_WaitOnFlagUntilTimeout>
 80054ea:	1e03      	subs	r3, r0, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e053      	b.n	800559a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2bff      	cmp	r3, #255	; 0xff
 80054fa:	d911      	bls.n	8005520 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	22ff      	movs	r2, #255	; 0xff
 8005500:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005506:	b2da      	uxtb	r2, r3
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	045c      	lsls	r4, r3, #17
 800550c:	230a      	movs	r3, #10
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	8819      	ldrh	r1, [r3, #0]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	2300      	movs	r3, #0
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	0023      	movs	r3, r4
 800551a:	f000 fb11 	bl	8005b40 <I2C_TransferConfig>
 800551e:	e012      	b.n	8005546 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552e:	b2da      	uxtb	r2, r3
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	049c      	lsls	r4, r3, #18
 8005534:	230a      	movs	r3, #10
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	8819      	ldrh	r1, [r3, #0]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	2300      	movs	r3, #0
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	0023      	movs	r3, r4
 8005542:	f000 fafd 	bl	8005b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d198      	bne.n	8005482 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	0018      	movs	r0, r3
 8005558:	f000 f9d0 	bl	80058fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800555c:	1e03      	subs	r3, r0, #0
 800555e:	d001      	beq.n	8005564 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e01a      	b.n	800559a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2220      	movs	r2, #32
 800556a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	490c      	ldr	r1, [pc, #48]	; (80055a8 <HAL_I2C_Master_Transmit+0x20c>)
 8005578:	400a      	ands	r2, r1
 800557a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2241      	movs	r2, #65	; 0x41
 8005580:	2120      	movs	r1, #32
 8005582:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2242      	movs	r2, #66	; 0x42
 8005588:	2100      	movs	r1, #0
 800558a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2240      	movs	r2, #64	; 0x40
 8005590:	2100      	movs	r1, #0
 8005592:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b007      	add	sp, #28
 80055a0:	bd90      	pop	{r4, r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	80002000 	.word	0x80002000
 80055a8:	fe00e800 	.word	0xfe00e800

080055ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b089      	sub	sp, #36	; 0x24
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	0008      	movs	r0, r1
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	0019      	movs	r1, r3
 80055ba:	230a      	movs	r3, #10
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	1c02      	adds	r2, r0, #0
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	2308      	movs	r3, #8
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	1c0a      	adds	r2, r1, #0
 80055c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2241      	movs	r2, #65	; 0x41
 80055ce:	5c9b      	ldrb	r3, [r3, r2]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d000      	beq.n	80055d8 <HAL_I2C_Master_Receive+0x2c>
 80055d6:	e0e8      	b.n	80057aa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2240      	movs	r2, #64	; 0x40
 80055dc:	5c9b      	ldrb	r3, [r3, r2]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_I2C_Master_Receive+0x3a>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e0e2      	b.n	80057ac <HAL_I2C_Master_Receive+0x200>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2240      	movs	r2, #64	; 0x40
 80055ea:	2101      	movs	r1, #1
 80055ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055ee:	f7ff fb97 	bl	8004d20 <HAL_GetTick>
 80055f2:	0003      	movs	r3, r0
 80055f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	0219      	lsls	r1, r3, #8
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2319      	movs	r3, #25
 8005602:	2201      	movs	r2, #1
 8005604:	f000 f8fc 	bl	8005800 <I2C_WaitOnFlagUntilTimeout>
 8005608:	1e03      	subs	r3, r0, #0
 800560a:	d001      	beq.n	8005610 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0cd      	b.n	80057ac <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2241      	movs	r2, #65	; 0x41
 8005614:	2122      	movs	r1, #34	; 0x22
 8005616:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2242      	movs	r2, #66	; 0x42
 800561c:	2110      	movs	r1, #16
 800561e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2208      	movs	r2, #8
 8005630:	18ba      	adds	r2, r7, r2
 8005632:	8812      	ldrh	r2, [r2, #0]
 8005634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	2bff      	cmp	r3, #255	; 0xff
 8005644:	d911      	bls.n	800566a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	22ff      	movs	r2, #255	; 0xff
 800564a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	b2da      	uxtb	r2, r3
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	045c      	lsls	r4, r3, #17
 8005656:	230a      	movs	r3, #10
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	8819      	ldrh	r1, [r3, #0]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	4b55      	ldr	r3, [pc, #340]	; (80057b4 <HAL_I2C_Master_Receive+0x208>)
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	0023      	movs	r3, r4
 8005664:	f000 fa6c 	bl	8005b40 <I2C_TransferConfig>
 8005668:	e076      	b.n	8005758 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005678:	b2da      	uxtb	r2, r3
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	049c      	lsls	r4, r3, #18
 800567e:	230a      	movs	r3, #10
 8005680:	18fb      	adds	r3, r7, r3
 8005682:	8819      	ldrh	r1, [r3, #0]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	4b4b      	ldr	r3, [pc, #300]	; (80057b4 <HAL_I2C_Master_Receive+0x208>)
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	0023      	movs	r3, r4
 800568c:	f000 fa58 	bl	8005b40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005690:	e062      	b.n	8005758 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	0018      	movs	r0, r3
 800569a:	f000 f96b 	bl	8005974 <I2C_WaitOnRXNEFlagUntilTimeout>
 800569e:	1e03      	subs	r3, r0, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e082      	b.n	80057ac <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d03a      	beq.n	8005758 <HAL_I2C_Master_Receive+0x1ac>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d136      	bne.n	8005758 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	0013      	movs	r3, r2
 80056f4:	2200      	movs	r2, #0
 80056f6:	2180      	movs	r1, #128	; 0x80
 80056f8:	f000 f882 	bl	8005800 <I2C_WaitOnFlagUntilTimeout>
 80056fc:	1e03      	subs	r3, r0, #0
 80056fe:	d001      	beq.n	8005704 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e053      	b.n	80057ac <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	2bff      	cmp	r3, #255	; 0xff
 800570c:	d911      	bls.n	8005732 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	22ff      	movs	r2, #255	; 0xff
 8005712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005718:	b2da      	uxtb	r2, r3
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	045c      	lsls	r4, r3, #17
 800571e:	230a      	movs	r3, #10
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	8819      	ldrh	r1, [r3, #0]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	2300      	movs	r3, #0
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	0023      	movs	r3, r4
 800572c:	f000 fa08 	bl	8005b40 <I2C_TransferConfig>
 8005730:	e012      	b.n	8005758 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	b2da      	uxtb	r2, r3
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	049c      	lsls	r4, r3, #18
 8005746:	230a      	movs	r3, #10
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	8819      	ldrh	r1, [r3, #0]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	2300      	movs	r3, #0
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	0023      	movs	r3, r4
 8005754:	f000 f9f4 	bl	8005b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d197      	bne.n	8005692 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	0018      	movs	r0, r3
 800576a:	f000 f8c7 	bl	80058fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800576e:	1e03      	subs	r3, r0, #0
 8005770:	d001      	beq.n	8005776 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e01a      	b.n	80057ac <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2220      	movs	r2, #32
 800577c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	490b      	ldr	r1, [pc, #44]	; (80057b8 <HAL_I2C_Master_Receive+0x20c>)
 800578a:	400a      	ands	r2, r1
 800578c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2241      	movs	r2, #65	; 0x41
 8005792:	2120      	movs	r1, #32
 8005794:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2242      	movs	r2, #66	; 0x42
 800579a:	2100      	movs	r1, #0
 800579c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2240      	movs	r2, #64	; 0x40
 80057a2:	2100      	movs	r1, #0
 80057a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e000      	b.n	80057ac <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80057aa:	2302      	movs	r3, #2
  }
}
 80057ac:	0018      	movs	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b007      	add	sp, #28
 80057b2:	bd90      	pop	{r4, r7, pc}
 80057b4:	80002400 	.word	0x80002400
 80057b8:	fe00e800 	.word	0xfe00e800

080057bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2202      	movs	r2, #2
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d103      	bne.n	80057da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	2201      	movs	r2, #1
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d007      	beq.n	80057f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2101      	movs	r1, #1
 80057f4:	430a      	orrs	r2, r1
 80057f6:	619a      	str	r2, [r3, #24]
  }
}
 80057f8:	46c0      	nop			; (mov r8, r8)
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b002      	add	sp, #8
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	1dfb      	adds	r3, r7, #7
 800580e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005810:	e021      	b.n	8005856 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	3301      	adds	r3, #1
 8005816:	d01e      	beq.n	8005856 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005818:	f7ff fa82 	bl	8004d20 <HAL_GetTick>
 800581c:	0002      	movs	r2, r0
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d113      	bne.n	8005856 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	2220      	movs	r2, #32
 8005834:	431a      	orrs	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2241      	movs	r2, #65	; 0x41
 800583e:	2120      	movs	r1, #32
 8005840:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2242      	movs	r2, #66	; 0x42
 8005846:	2100      	movs	r1, #0
 8005848:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2240      	movs	r2, #64	; 0x40
 800584e:	2100      	movs	r1, #0
 8005850:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e00f      	b.n	8005876 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	4013      	ands	r3, r2
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	425a      	negs	r2, r3
 8005866:	4153      	adcs	r3, r2
 8005868:	b2db      	uxtb	r3, r3
 800586a:	001a      	movs	r2, r3
 800586c:	1dfb      	adds	r3, r7, #7
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d0ce      	beq.n	8005812 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	0018      	movs	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	b004      	add	sp, #16
 800587c:	bd80      	pop	{r7, pc}

0800587e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800588a:	e02b      	b.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	0018      	movs	r0, r3
 8005894:	f000 f8da 	bl	8005a4c <I2C_IsAcknowledgeFailed>
 8005898:	1e03      	subs	r3, r0, #0
 800589a:	d001      	beq.n	80058a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e029      	b.n	80058f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	3301      	adds	r3, #1
 80058a4:	d01e      	beq.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a6:	f7ff fa3b 	bl	8004d20 <HAL_GetTick>
 80058aa:	0002      	movs	r2, r0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d113      	bne.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c0:	2220      	movs	r2, #32
 80058c2:	431a      	orrs	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2241      	movs	r2, #65	; 0x41
 80058cc:	2120      	movs	r1, #32
 80058ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2242      	movs	r2, #66	; 0x42
 80058d4:	2100      	movs	r1, #0
 80058d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2240      	movs	r2, #64	; 0x40
 80058dc:	2100      	movs	r1, #0
 80058de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e007      	b.n	80058f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	2202      	movs	r2, #2
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d1cc      	bne.n	800588c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b004      	add	sp, #16
 80058fa:	bd80      	pop	{r7, pc}

080058fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005908:	e028      	b.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	0018      	movs	r0, r3
 8005912:	f000 f89b 	bl	8005a4c <I2C_IsAcknowledgeFailed>
 8005916:	1e03      	subs	r3, r0, #0
 8005918:	d001      	beq.n	800591e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e026      	b.n	800596c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7ff f9ff 	bl	8004d20 <HAL_GetTick>
 8005922:	0002      	movs	r2, r0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d113      	bne.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005938:	2220      	movs	r2, #32
 800593a:	431a      	orrs	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2241      	movs	r2, #65	; 0x41
 8005944:	2120      	movs	r1, #32
 8005946:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2242      	movs	r2, #66	; 0x42
 800594c:	2100      	movs	r1, #0
 800594e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2240      	movs	r2, #64	; 0x40
 8005954:	2100      	movs	r1, #0
 8005956:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e007      	b.n	800596c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2220      	movs	r2, #32
 8005964:	4013      	ands	r3, r2
 8005966:	2b20      	cmp	r3, #32
 8005968:	d1cf      	bne.n	800590a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	0018      	movs	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	b004      	add	sp, #16
 8005972:	bd80      	pop	{r7, pc}

08005974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005980:	e055      	b.n	8005a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	0018      	movs	r0, r3
 800598a:	f000 f85f 	bl	8005a4c <I2C_IsAcknowledgeFailed>
 800598e:	1e03      	subs	r3, r0, #0
 8005990:	d001      	beq.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e053      	b.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	2220      	movs	r2, #32
 800599e:	4013      	ands	r3, r2
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d129      	bne.n	80059f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2204      	movs	r2, #4
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d105      	bne.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e03f      	b.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2220      	movs	r2, #32
 80059c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	491d      	ldr	r1, [pc, #116]	; (8005a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80059d2:	400a      	ands	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2241      	movs	r2, #65	; 0x41
 80059e0:	2120      	movs	r1, #32
 80059e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2242      	movs	r2, #66	; 0x42
 80059e8:	2100      	movs	r1, #0
 80059ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2240      	movs	r2, #64	; 0x40
 80059f0:	2100      	movs	r1, #0
 80059f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e022      	b.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f8:	f7ff f992 	bl	8004d20 <HAL_GetTick>
 80059fc:	0002      	movs	r2, r0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d302      	bcc.n	8005a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10f      	bne.n	8005a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	2220      	movs	r2, #32
 8005a14:	431a      	orrs	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2241      	movs	r2, #65	; 0x41
 8005a1e:	2120      	movs	r1, #32
 8005a20:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2240      	movs	r2, #64	; 0x40
 8005a26:	2100      	movs	r1, #0
 8005a28:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e007      	b.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2204      	movs	r2, #4
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d1a2      	bne.n	8005982 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	0018      	movs	r0, r3
 8005a40:	46bd      	mov	sp, r7
 8005a42:	b004      	add	sp, #16
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	fe00e800 	.word	0xfe00e800

08005a4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d164      	bne.n	8005b30 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	049b      	lsls	r3, r3, #18
 8005a70:	401a      	ands	r2, r3
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	049b      	lsls	r3, r3, #18
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d02b      	beq.n	8005ad2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2180      	movs	r1, #128	; 0x80
 8005a86:	01c9      	lsls	r1, r1, #7
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a8c:	e021      	b.n	8005ad2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3301      	adds	r3, #1
 8005a92:	d01e      	beq.n	8005ad2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a94:	f7ff f944 	bl	8004d20 <HAL_GetTick>
 8005a98:	0002      	movs	r2, r0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d302      	bcc.n	8005aaa <I2C_IsAcknowledgeFailed+0x5e>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d113      	bne.n	8005ad2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	2220      	movs	r2, #32
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2241      	movs	r2, #65	; 0x41
 8005aba:	2120      	movs	r1, #32
 8005abc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2242      	movs	r2, #66	; 0x42
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2240      	movs	r2, #64	; 0x40
 8005aca:	2100      	movs	r1, #0
 8005acc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e02f      	b.n	8005b32 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d1d6      	bne.n	8005a8e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2220      	movs	r2, #32
 8005aee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	0018      	movs	r0, r3
 8005af4:	f7ff fe62 	bl	80057bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	490e      	ldr	r1, [pc, #56]	; (8005b3c <I2C_IsAcknowledgeFailed+0xf0>)
 8005b04:	400a      	ands	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2241      	movs	r2, #65	; 0x41
 8005b18:	2120      	movs	r1, #32
 8005b1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2242      	movs	r2, #66	; 0x42
 8005b20:	2100      	movs	r1, #0
 8005b22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2240      	movs	r2, #64	; 0x40
 8005b28:	2100      	movs	r1, #0
 8005b2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	0018      	movs	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b004      	add	sp, #16
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	fe00e800 	.word	0xfe00e800

08005b40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	0008      	movs	r0, r1
 8005b4a:	0011      	movs	r1, r2
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	240a      	movs	r4, #10
 8005b50:	193b      	adds	r3, r7, r4
 8005b52:	1c02      	adds	r2, r0, #0
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	2009      	movs	r0, #9
 8005b58:	183b      	adds	r3, r7, r0
 8005b5a:	1c0a      	adds	r2, r1, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	6a3a      	ldr	r2, [r7, #32]
 8005b66:	0d51      	lsrs	r1, r2, #21
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	00d2      	lsls	r2, r2, #3
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	490e      	ldr	r1, [pc, #56]	; (8005ba8 <I2C_TransferConfig+0x68>)
 8005b70:	430a      	orrs	r2, r1
 8005b72:	43d2      	mvns	r2, r2
 8005b74:	401a      	ands	r2, r3
 8005b76:	0011      	movs	r1, r2
 8005b78:	193b      	adds	r3, r7, r4
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	059b      	lsls	r3, r3, #22
 8005b7e:	0d9a      	lsrs	r2, r3, #22
 8005b80:	183b      	adds	r3, r7, r0
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	0418      	lsls	r0, r3, #16
 8005b86:	23ff      	movs	r3, #255	; 0xff
 8005b88:	041b      	lsls	r3, r3, #16
 8005b8a:	4003      	ands	r3, r0
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b005      	add	sp, #20
 8005ba4:	bd90      	pop	{r4, r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	03ff63ff 	.word	0x03ff63ff

08005bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2241      	movs	r2, #65	; 0x41
 8005bba:	5c9b      	ldrb	r3, [r3, r2]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d138      	bne.n	8005c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2240      	movs	r2, #64	; 0x40
 8005bc6:	5c9b      	ldrb	r3, [r3, r2]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e032      	b.n	8005c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2240      	movs	r2, #64	; 0x40
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2241      	movs	r2, #65	; 0x41
 8005bdc:	2124      	movs	r1, #36	; 0x24
 8005bde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2101      	movs	r1, #1
 8005bec:	438a      	bics	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4911      	ldr	r1, [pc, #68]	; (8005c40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005bfc:	400a      	ands	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6819      	ldr	r1, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2241      	movs	r2, #65	; 0x41
 8005c24:	2120      	movs	r1, #32
 8005c26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2240      	movs	r2, #64	; 0x40
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e000      	b.n	8005c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c34:	2302      	movs	r3, #2
  }
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b002      	add	sp, #8
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	ffffefff 	.word	0xffffefff

08005c44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2241      	movs	r2, #65	; 0x41
 8005c52:	5c9b      	ldrb	r3, [r3, r2]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d139      	bne.n	8005cce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2240      	movs	r2, #64	; 0x40
 8005c5e:	5c9b      	ldrb	r3, [r3, r2]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e033      	b.n	8005cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2240      	movs	r2, #64	; 0x40
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2241      	movs	r2, #65	; 0x41
 8005c74:	2124      	movs	r1, #36	; 0x24
 8005c76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2101      	movs	r1, #1
 8005c84:	438a      	bics	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a11      	ldr	r2, [pc, #68]	; (8005cd8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2241      	movs	r2, #65	; 0x41
 8005cbe:	2120      	movs	r1, #32
 8005cc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2240      	movs	r2, #64	; 0x40
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e000      	b.n	8005cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cce:	2302      	movs	r3, #2
  }
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b004      	add	sp, #16
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	fffff0ff 	.word	0xfffff0ff

08005cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cdc:	b5b0      	push	{r4, r5, r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f000 fbbf 	bl	800646e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cf0:	4bc9      	ldr	r3, [pc, #804]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	220c      	movs	r2, #12
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cfa:	4bc7      	ldr	r3, [pc, #796]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	025b      	lsls	r3, r3, #9
 8005d02:	4013      	ands	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d100      	bne.n	8005d12 <HAL_RCC_OscConfig+0x36>
 8005d10:	e07e      	b.n	8005e10 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d007      	beq.n	8005d28 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b0c      	cmp	r3, #12
 8005d1c:	d112      	bne.n	8005d44 <HAL_RCC_OscConfig+0x68>
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	2380      	movs	r3, #128	; 0x80
 8005d22:	025b      	lsls	r3, r3, #9
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d10d      	bne.n	8005d44 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d28:	4bbb      	ldr	r3, [pc, #748]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	029b      	lsls	r3, r3, #10
 8005d30:	4013      	ands	r3, r2
 8005d32:	d100      	bne.n	8005d36 <HAL_RCC_OscConfig+0x5a>
 8005d34:	e06b      	b.n	8005e0e <HAL_RCC_OscConfig+0x132>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d167      	bne.n	8005e0e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f000 fb95 	bl	800646e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	025b      	lsls	r3, r3, #9
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d107      	bne.n	8005d60 <HAL_RCC_OscConfig+0x84>
 8005d50:	4bb1      	ldr	r3, [pc, #708]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4bb0      	ldr	r3, [pc, #704]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	0249      	lsls	r1, r1, #9
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e027      	b.n	8005db0 <HAL_RCC_OscConfig+0xd4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	23a0      	movs	r3, #160	; 0xa0
 8005d66:	02db      	lsls	r3, r3, #11
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d10e      	bne.n	8005d8a <HAL_RCC_OscConfig+0xae>
 8005d6c:	4baa      	ldr	r3, [pc, #680]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4ba9      	ldr	r3, [pc, #676]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d72:	2180      	movs	r1, #128	; 0x80
 8005d74:	02c9      	lsls	r1, r1, #11
 8005d76:	430a      	orrs	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	4ba7      	ldr	r3, [pc, #668]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4ba6      	ldr	r3, [pc, #664]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d80:	2180      	movs	r1, #128	; 0x80
 8005d82:	0249      	lsls	r1, r1, #9
 8005d84:	430a      	orrs	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e012      	b.n	8005db0 <HAL_RCC_OscConfig+0xd4>
 8005d8a:	4ba3      	ldr	r3, [pc, #652]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4ba2      	ldr	r3, [pc, #648]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d90:	49a2      	ldr	r1, [pc, #648]	; (800601c <HAL_RCC_OscConfig+0x340>)
 8005d92:	400a      	ands	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	4ba0      	ldr	r3, [pc, #640]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	2380      	movs	r3, #128	; 0x80
 8005d9c:	025b      	lsls	r3, r3, #9
 8005d9e:	4013      	ands	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4b9c      	ldr	r3, [pc, #624]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b9b      	ldr	r3, [pc, #620]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005daa:	499d      	ldr	r1, [pc, #628]	; (8006020 <HAL_RCC_OscConfig+0x344>)
 8005dac:	400a      	ands	r2, r1
 8005dae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d015      	beq.n	8005de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db8:	f7fe ffb2 	bl	8004d20 <HAL_GetTick>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dc0:	e009      	b.n	8005dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc2:	f7fe ffad 	bl	8004d20 <HAL_GetTick>
 8005dc6:	0002      	movs	r2, r0
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b64      	cmp	r3, #100	; 0x64
 8005dce:	d902      	bls.n	8005dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	f000 fb4c 	bl	800646e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dd6:	4b90      	ldr	r3, [pc, #576]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	4013      	ands	r3, r2
 8005de0:	d0ef      	beq.n	8005dc2 <HAL_RCC_OscConfig+0xe6>
 8005de2:	e015      	b.n	8005e10 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de4:	f7fe ff9c 	bl	8004d20 <HAL_GetTick>
 8005de8:	0003      	movs	r3, r0
 8005dea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dee:	f7fe ff97 	bl	8004d20 <HAL_GetTick>
 8005df2:	0002      	movs	r2, r0
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b64      	cmp	r3, #100	; 0x64
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e336      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e00:	4b85      	ldr	r3, [pc, #532]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d1f0      	bne.n	8005dee <HAL_RCC_OscConfig+0x112>
 8005e0c:	e000      	b.n	8005e10 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e0e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2202      	movs	r2, #2
 8005e16:	4013      	ands	r3, r2
 8005e18:	d100      	bne.n	8005e1c <HAL_RCC_OscConfig+0x140>
 8005e1a:	e099      	b.n	8005f50 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2220      	movs	r2, #32
 8005e26:	4013      	ands	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005e2a:	4b7b      	ldr	r3, [pc, #492]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4b7a      	ldr	r3, [pc, #488]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005e30:	2120      	movs	r1, #32
 8005e32:	430a      	orrs	r2, r1
 8005e34:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	2220      	movs	r2, #32
 8005e3a:	4393      	bics	r3, r2
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d005      	beq.n	8005e50 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b0c      	cmp	r3, #12
 8005e48:	d13e      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x1ec>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d13b      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005e50:	4b71      	ldr	r3, [pc, #452]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2204      	movs	r2, #4
 8005e56:	4013      	ands	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_RCC_OscConfig+0x188>
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e304      	b.n	800646e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e64:	4b6c      	ldr	r3, [pc, #432]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	4a6e      	ldr	r2, [pc, #440]	; (8006024 <HAL_RCC_OscConfig+0x348>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	0019      	movs	r1, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	4b68      	ldr	r3, [pc, #416]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005e7a:	4b67      	ldr	r3, [pc, #412]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2209      	movs	r2, #9
 8005e80:	4393      	bics	r3, r2
 8005e82:	0019      	movs	r1, r3
 8005e84:	4b64      	ldr	r3, [pc, #400]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e8c:	f000 fc42 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 8005e90:	0001      	movs	r1, r0
 8005e92:	4b61      	ldr	r3, [pc, #388]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	220f      	movs	r2, #15
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	4a62      	ldr	r2, [pc, #392]	; (8006028 <HAL_RCC_OscConfig+0x34c>)
 8005e9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ea0:	000a      	movs	r2, r1
 8005ea2:	40da      	lsrs	r2, r3
 8005ea4:	4b61      	ldr	r3, [pc, #388]	; (800602c <HAL_RCC_OscConfig+0x350>)
 8005ea6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005ea8:	4b61      	ldr	r3, [pc, #388]	; (8006030 <HAL_RCC_OscConfig+0x354>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2513      	movs	r5, #19
 8005eae:	197c      	adds	r4, r7, r5
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f7fe feef 	bl	8004c94 <HAL_InitTick>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005eba:	197b      	adds	r3, r7, r5
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d046      	beq.n	8005f50 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005ec2:	197b      	adds	r3, r7, r5
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	e2d2      	b.n	800646e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d027      	beq.n	8005f1e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005ece:	4b52      	ldr	r3, [pc, #328]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2209      	movs	r2, #9
 8005ed4:	4393      	bics	r3, r2
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	4b4f      	ldr	r3, [pc, #316]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fe ff1e 	bl	8004d20 <HAL_GetTick>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eea:	f7fe ff19 	bl	8004d20 <HAL_GetTick>
 8005eee:	0002      	movs	r2, r0
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e2b8      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005efc:	4b46      	ldr	r3, [pc, #280]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2204      	movs	r2, #4
 8005f02:	4013      	ands	r3, r2
 8005f04:	d0f1      	beq.n	8005eea <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	4b44      	ldr	r3, [pc, #272]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4a46      	ldr	r2, [pc, #280]	; (8006024 <HAL_RCC_OscConfig+0x348>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	0019      	movs	r1, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	021a      	lsls	r2, r3, #8
 8005f16:	4b40      	ldr	r3, [pc, #256]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
 8005f1c:	e018      	b.n	8005f50 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1e:	4b3e      	ldr	r3, [pc, #248]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b3d      	ldr	r3, [pc, #244]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f24:	2101      	movs	r1, #1
 8005f26:	438a      	bics	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2a:	f7fe fef9 	bl	8004d20 <HAL_GetTick>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f34:	f7fe fef4 	bl	8004d20 <HAL_GetTick>
 8005f38:	0002      	movs	r2, r0
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e293      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f46:	4b34      	ldr	r3, [pc, #208]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d1f1      	bne.n	8005f34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2210      	movs	r2, #16
 8005f56:	4013      	ands	r3, r2
 8005f58:	d100      	bne.n	8005f5c <HAL_RCC_OscConfig+0x280>
 8005f5a:	e0a2      	b.n	80060a2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d140      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f62:	4b2d      	ldr	r3, [pc, #180]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d005      	beq.n	8005f7a <HAL_RCC_OscConfig+0x29e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e279      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f7a:	4b27      	ldr	r3, [pc, #156]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4a2d      	ldr	r2, [pc, #180]	; (8006034 <HAL_RCC_OscConfig+0x358>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	0019      	movs	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f88:	4b23      	ldr	r3, [pc, #140]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f8e:	4b22      	ldr	r3, [pc, #136]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	0a19      	lsrs	r1, r3, #8
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	061a      	lsls	r2, r3, #24
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	0b5b      	lsrs	r3, r3, #13
 8005fa8:	3301      	adds	r3, #1
 8005faa:	2280      	movs	r2, #128	; 0x80
 8005fac:	0212      	lsls	r2, r2, #8
 8005fae:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005fb0:	4b19      	ldr	r3, [pc, #100]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	091b      	lsrs	r3, r3, #4
 8005fb6:	210f      	movs	r1, #15
 8005fb8:	400b      	ands	r3, r1
 8005fba:	491b      	ldr	r1, [pc, #108]	; (8006028 <HAL_RCC_OscConfig+0x34c>)
 8005fbc:	5ccb      	ldrb	r3, [r1, r3]
 8005fbe:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005fc0:	4b1a      	ldr	r3, [pc, #104]	; (800602c <HAL_RCC_OscConfig+0x350>)
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005fc4:	4b1a      	ldr	r3, [pc, #104]	; (8006030 <HAL_RCC_OscConfig+0x354>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2513      	movs	r5, #19
 8005fca:	197c      	adds	r4, r7, r5
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f7fe fe61 	bl	8004c94 <HAL_InitTick>
 8005fd2:	0003      	movs	r3, r0
 8005fd4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005fd6:	197b      	adds	r3, r7, r5
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d061      	beq.n	80060a2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005fde:	197b      	adds	r3, r7, r5
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	e244      	b.n	800646e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d040      	beq.n	800606e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <HAL_RCC_OscConfig+0x33c>)
 8005ff2:	2180      	movs	r1, #128	; 0x80
 8005ff4:	0049      	lsls	r1, r1, #1
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffa:	f7fe fe91 	bl	8004d20 <HAL_GetTick>
 8005ffe:	0003      	movs	r3, r0
 8006000:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006002:	e019      	b.n	8006038 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006004:	f7fe fe8c 	bl	8004d20 <HAL_GetTick>
 8006008:	0002      	movs	r2, r0
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d912      	bls.n	8006038 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e22b      	b.n	800646e <HAL_RCC_OscConfig+0x792>
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	40021000 	.word	0x40021000
 800601c:	fffeffff 	.word	0xfffeffff
 8006020:	fffbffff 	.word	0xfffbffff
 8006024:	ffffe0ff 	.word	0xffffe0ff
 8006028:	0800b5d4 	.word	0x0800b5d4
 800602c:	20000008 	.word	0x20000008
 8006030:	2000000c 	.word	0x2000000c
 8006034:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006038:	4bca      	ldr	r3, [pc, #808]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4013      	ands	r3, r2
 8006042:	d0df      	beq.n	8006004 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006044:	4bc7      	ldr	r3, [pc, #796]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	4ac7      	ldr	r2, [pc, #796]	; (8006368 <HAL_RCC_OscConfig+0x68c>)
 800604a:	4013      	ands	r3, r2
 800604c:	0019      	movs	r1, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006052:	4bc4      	ldr	r3, [pc, #784]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006054:	430a      	orrs	r2, r1
 8006056:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006058:	4bc2      	ldr	r3, [pc, #776]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	0a19      	lsrs	r1, r3, #8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	061a      	lsls	r2, r3, #24
 8006066:	4bbf      	ldr	r3, [pc, #764]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006068:	430a      	orrs	r2, r1
 800606a:	605a      	str	r2, [r3, #4]
 800606c:	e019      	b.n	80060a2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800606e:	4bbd      	ldr	r3, [pc, #756]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4bbc      	ldr	r3, [pc, #752]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006074:	49bd      	ldr	r1, [pc, #756]	; (800636c <HAL_RCC_OscConfig+0x690>)
 8006076:	400a      	ands	r2, r1
 8006078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800607a:	f7fe fe51 	bl	8004d20 <HAL_GetTick>
 800607e:	0003      	movs	r3, r0
 8006080:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006084:	f7fe fe4c 	bl	8004d20 <HAL_GetTick>
 8006088:	0002      	movs	r2, r0
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e1eb      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006096:	4bb3      	ldr	r3, [pc, #716]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4013      	ands	r3, r2
 80060a0:	d1f0      	bne.n	8006084 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2208      	movs	r2, #8
 80060a8:	4013      	ands	r3, r2
 80060aa:	d036      	beq.n	800611a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d019      	beq.n	80060e8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060b4:	4bab      	ldr	r3, [pc, #684]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80060b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060b8:	4baa      	ldr	r3, [pc, #680]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80060ba:	2101      	movs	r1, #1
 80060bc:	430a      	orrs	r2, r1
 80060be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c0:	f7fe fe2e 	bl	8004d20 <HAL_GetTick>
 80060c4:	0003      	movs	r3, r0
 80060c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060ca:	f7fe fe29 	bl	8004d20 <HAL_GetTick>
 80060ce:	0002      	movs	r2, r0
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e1c8      	b.n	800646e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060dc:	4ba1      	ldr	r3, [pc, #644]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80060de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e0:	2202      	movs	r2, #2
 80060e2:	4013      	ands	r3, r2
 80060e4:	d0f1      	beq.n	80060ca <HAL_RCC_OscConfig+0x3ee>
 80060e6:	e018      	b.n	800611a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e8:	4b9e      	ldr	r3, [pc, #632]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80060ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060ec:	4b9d      	ldr	r3, [pc, #628]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80060ee:	2101      	movs	r1, #1
 80060f0:	438a      	bics	r2, r1
 80060f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060f4:	f7fe fe14 	bl	8004d20 <HAL_GetTick>
 80060f8:	0003      	movs	r3, r0
 80060fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060fe:	f7fe fe0f 	bl	8004d20 <HAL_GetTick>
 8006102:	0002      	movs	r2, r0
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e1ae      	b.n	800646e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006110:	4b94      	ldr	r3, [pc, #592]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006114:	2202      	movs	r2, #2
 8006116:	4013      	ands	r3, r2
 8006118:	d1f1      	bne.n	80060fe <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2204      	movs	r2, #4
 8006120:	4013      	ands	r3, r2
 8006122:	d100      	bne.n	8006126 <HAL_RCC_OscConfig+0x44a>
 8006124:	e0ae      	b.n	8006284 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006126:	2023      	movs	r0, #35	; 0x23
 8006128:	183b      	adds	r3, r7, r0
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800612e:	4b8d      	ldr	r3, [pc, #564]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	055b      	lsls	r3, r3, #21
 8006136:	4013      	ands	r3, r2
 8006138:	d109      	bne.n	800614e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800613a:	4b8a      	ldr	r3, [pc, #552]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800613c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800613e:	4b89      	ldr	r3, [pc, #548]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	0549      	lsls	r1, r1, #21
 8006144:	430a      	orrs	r2, r1
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006148:	183b      	adds	r3, r7, r0
 800614a:	2201      	movs	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614e:	4b88      	ldr	r3, [pc, #544]	; (8006370 <HAL_RCC_OscConfig+0x694>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	4013      	ands	r3, r2
 8006158:	d11a      	bne.n	8006190 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800615a:	4b85      	ldr	r3, [pc, #532]	; (8006370 <HAL_RCC_OscConfig+0x694>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b84      	ldr	r3, [pc, #528]	; (8006370 <HAL_RCC_OscConfig+0x694>)
 8006160:	2180      	movs	r1, #128	; 0x80
 8006162:	0049      	lsls	r1, r1, #1
 8006164:	430a      	orrs	r2, r1
 8006166:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006168:	f7fe fdda 	bl	8004d20 <HAL_GetTick>
 800616c:	0003      	movs	r3, r0
 800616e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006172:	f7fe fdd5 	bl	8004d20 <HAL_GetTick>
 8006176:	0002      	movs	r2, r0
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b64      	cmp	r3, #100	; 0x64
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e174      	b.n	800646e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006184:	4b7a      	ldr	r3, [pc, #488]	; (8006370 <HAL_RCC_OscConfig+0x694>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	2380      	movs	r3, #128	; 0x80
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	4013      	ands	r3, r2
 800618e:	d0f0      	beq.n	8006172 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	2380      	movs	r3, #128	; 0x80
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	429a      	cmp	r2, r3
 800619a:	d107      	bne.n	80061ac <HAL_RCC_OscConfig+0x4d0>
 800619c:	4b71      	ldr	r3, [pc, #452]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800619e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061a0:	4b70      	ldr	r3, [pc, #448]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	0049      	lsls	r1, r1, #1
 80061a6:	430a      	orrs	r2, r1
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50
 80061aa:	e031      	b.n	8006210 <HAL_RCC_OscConfig+0x534>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10c      	bne.n	80061ce <HAL_RCC_OscConfig+0x4f2>
 80061b4:	4b6b      	ldr	r3, [pc, #428]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061b8:	4b6a      	ldr	r3, [pc, #424]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061ba:	496c      	ldr	r1, [pc, #432]	; (800636c <HAL_RCC_OscConfig+0x690>)
 80061bc:	400a      	ands	r2, r1
 80061be:	651a      	str	r2, [r3, #80]	; 0x50
 80061c0:	4b68      	ldr	r3, [pc, #416]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061c4:	4b67      	ldr	r3, [pc, #412]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061c6:	496b      	ldr	r1, [pc, #428]	; (8006374 <HAL_RCC_OscConfig+0x698>)
 80061c8:	400a      	ands	r2, r1
 80061ca:	651a      	str	r2, [r3, #80]	; 0x50
 80061cc:	e020      	b.n	8006210 <HAL_RCC_OscConfig+0x534>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	23a0      	movs	r3, #160	; 0xa0
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d10e      	bne.n	80061f8 <HAL_RCC_OscConfig+0x51c>
 80061da:	4b62      	ldr	r3, [pc, #392]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061de:	4b61      	ldr	r3, [pc, #388]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061e0:	2180      	movs	r1, #128	; 0x80
 80061e2:	00c9      	lsls	r1, r1, #3
 80061e4:	430a      	orrs	r2, r1
 80061e6:	651a      	str	r2, [r3, #80]	; 0x50
 80061e8:	4b5e      	ldr	r3, [pc, #376]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061ec:	4b5d      	ldr	r3, [pc, #372]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061ee:	2180      	movs	r1, #128	; 0x80
 80061f0:	0049      	lsls	r1, r1, #1
 80061f2:	430a      	orrs	r2, r1
 80061f4:	651a      	str	r2, [r3, #80]	; 0x50
 80061f6:	e00b      	b.n	8006210 <HAL_RCC_OscConfig+0x534>
 80061f8:	4b5a      	ldr	r3, [pc, #360]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061fc:	4b59      	ldr	r3, [pc, #356]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80061fe:	495b      	ldr	r1, [pc, #364]	; (800636c <HAL_RCC_OscConfig+0x690>)
 8006200:	400a      	ands	r2, r1
 8006202:	651a      	str	r2, [r3, #80]	; 0x50
 8006204:	4b57      	ldr	r3, [pc, #348]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006208:	4b56      	ldr	r3, [pc, #344]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800620a:	495a      	ldr	r1, [pc, #360]	; (8006374 <HAL_RCC_OscConfig+0x698>)
 800620c:	400a      	ands	r2, r1
 800620e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d015      	beq.n	8006244 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006218:	f7fe fd82 	bl	8004d20 <HAL_GetTick>
 800621c:	0003      	movs	r3, r0
 800621e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006220:	e009      	b.n	8006236 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006222:	f7fe fd7d 	bl	8004d20 <HAL_GetTick>
 8006226:	0002      	movs	r2, r0
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	4a52      	ldr	r2, [pc, #328]	; (8006378 <HAL_RCC_OscConfig+0x69c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e11b      	b.n	800646e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006236:	4b4b      	ldr	r3, [pc, #300]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800623a:	2380      	movs	r3, #128	; 0x80
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4013      	ands	r3, r2
 8006240:	d0ef      	beq.n	8006222 <HAL_RCC_OscConfig+0x546>
 8006242:	e014      	b.n	800626e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006244:	f7fe fd6c 	bl	8004d20 <HAL_GetTick>
 8006248:	0003      	movs	r3, r0
 800624a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800624c:	e009      	b.n	8006262 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800624e:	f7fe fd67 	bl	8004d20 <HAL_GetTick>
 8006252:	0002      	movs	r2, r0
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	4a47      	ldr	r2, [pc, #284]	; (8006378 <HAL_RCC_OscConfig+0x69c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e105      	b.n	800646e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006262:	4b40      	ldr	r3, [pc, #256]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006266:	2380      	movs	r3, #128	; 0x80
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4013      	ands	r3, r2
 800626c:	d1ef      	bne.n	800624e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800626e:	2323      	movs	r3, #35	; 0x23
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d105      	bne.n	8006284 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006278:	4b3a      	ldr	r3, [pc, #232]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800627a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627c:	4b39      	ldr	r3, [pc, #228]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800627e:	493f      	ldr	r1, [pc, #252]	; (800637c <HAL_RCC_OscConfig+0x6a0>)
 8006280:	400a      	ands	r2, r1
 8006282:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2220      	movs	r2, #32
 800628a:	4013      	ands	r3, r2
 800628c:	d049      	beq.n	8006322 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d026      	beq.n	80062e4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006296:	4b33      	ldr	r3, [pc, #204]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	4b32      	ldr	r3, [pc, #200]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800629c:	2101      	movs	r1, #1
 800629e:	430a      	orrs	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]
 80062a2:	4b30      	ldr	r3, [pc, #192]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80062a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a6:	4b2f      	ldr	r3, [pc, #188]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80062a8:	2101      	movs	r1, #1
 80062aa:	430a      	orrs	r2, r1
 80062ac:	635a      	str	r2, [r3, #52]	; 0x34
 80062ae:	4b34      	ldr	r3, [pc, #208]	; (8006380 <HAL_RCC_OscConfig+0x6a4>)
 80062b0:	6a1a      	ldr	r2, [r3, #32]
 80062b2:	4b33      	ldr	r3, [pc, #204]	; (8006380 <HAL_RCC_OscConfig+0x6a4>)
 80062b4:	2180      	movs	r1, #128	; 0x80
 80062b6:	0189      	lsls	r1, r1, #6
 80062b8:	430a      	orrs	r2, r1
 80062ba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fe fd30 	bl	8004d20 <HAL_GetTick>
 80062c0:	0003      	movs	r3, r0
 80062c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062c6:	f7fe fd2b 	bl	8004d20 <HAL_GetTick>
 80062ca:	0002      	movs	r2, r0
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0ca      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062d8:	4b22      	ldr	r3, [pc, #136]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2202      	movs	r2, #2
 80062de:	4013      	ands	r3, r2
 80062e0:	d0f1      	beq.n	80062c6 <HAL_RCC_OscConfig+0x5ea>
 80062e2:	e01e      	b.n	8006322 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80062e4:	4b1f      	ldr	r3, [pc, #124]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	4b1e      	ldr	r3, [pc, #120]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 80062ea:	2101      	movs	r1, #1
 80062ec:	438a      	bics	r2, r1
 80062ee:	609a      	str	r2, [r3, #8]
 80062f0:	4b23      	ldr	r3, [pc, #140]	; (8006380 <HAL_RCC_OscConfig+0x6a4>)
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	4b22      	ldr	r3, [pc, #136]	; (8006380 <HAL_RCC_OscConfig+0x6a4>)
 80062f6:	4923      	ldr	r1, [pc, #140]	; (8006384 <HAL_RCC_OscConfig+0x6a8>)
 80062f8:	400a      	ands	r2, r1
 80062fa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fc:	f7fe fd10 	bl	8004d20 <HAL_GetTick>
 8006300:	0003      	movs	r3, r0
 8006302:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006306:	f7fe fd0b 	bl	8004d20 <HAL_GetTick>
 800630a:	0002      	movs	r2, r0
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e0aa      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006318:	4b12      	ldr	r3, [pc, #72]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2202      	movs	r2, #2
 800631e:	4013      	ands	r3, r2
 8006320:	d1f1      	bne.n	8006306 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	d100      	bne.n	800632c <HAL_RCC_OscConfig+0x650>
 800632a:	e09f      	b.n	800646c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b0c      	cmp	r3, #12
 8006330:	d100      	bne.n	8006334 <HAL_RCC_OscConfig+0x658>
 8006332:	e078      	b.n	8006426 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	2b02      	cmp	r3, #2
 800633a:	d159      	bne.n	80063f0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b08      	ldr	r3, [pc, #32]	; (8006364 <HAL_RCC_OscConfig+0x688>)
 8006342:	4911      	ldr	r1, [pc, #68]	; (8006388 <HAL_RCC_OscConfig+0x6ac>)
 8006344:	400a      	ands	r2, r1
 8006346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fe fcea 	bl	8004d20 <HAL_GetTick>
 800634c:	0003      	movs	r3, r0
 800634e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006350:	e01c      	b.n	800638c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006352:	f7fe fce5 	bl	8004d20 <HAL_GetTick>
 8006356:	0002      	movs	r2, r0
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d915      	bls.n	800638c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e084      	b.n	800646e <HAL_RCC_OscConfig+0x792>
 8006364:	40021000 	.word	0x40021000
 8006368:	ffff1fff 	.word	0xffff1fff
 800636c:	fffffeff 	.word	0xfffffeff
 8006370:	40007000 	.word	0x40007000
 8006374:	fffffbff 	.word	0xfffffbff
 8006378:	00001388 	.word	0x00001388
 800637c:	efffffff 	.word	0xefffffff
 8006380:	40010000 	.word	0x40010000
 8006384:	ffffdfff 	.word	0xffffdfff
 8006388:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800638c:	4b3a      	ldr	r3, [pc, #232]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	049b      	lsls	r3, r3, #18
 8006394:	4013      	ands	r3, r2
 8006396:	d1dc      	bne.n	8006352 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006398:	4b37      	ldr	r3, [pc, #220]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	4a37      	ldr	r2, [pc, #220]	; (800647c <HAL_RCC_OscConfig+0x7a0>)
 800639e:	4013      	ands	r3, r2
 80063a0:	0019      	movs	r1, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	431a      	orrs	r2, r3
 80063b2:	4b31      	ldr	r3, [pc, #196]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 80063b4:	430a      	orrs	r2, r1
 80063b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063b8:	4b2f      	ldr	r3, [pc, #188]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	4b2e      	ldr	r3, [pc, #184]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 80063be:	2180      	movs	r1, #128	; 0x80
 80063c0:	0449      	lsls	r1, r1, #17
 80063c2:	430a      	orrs	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c6:	f7fe fcab 	bl	8004d20 <HAL_GetTick>
 80063ca:	0003      	movs	r3, r0
 80063cc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d0:	f7fe fca6 	bl	8004d20 <HAL_GetTick>
 80063d4:	0002      	movs	r2, r0
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e045      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80063e2:	4b25      	ldr	r3, [pc, #148]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	049b      	lsls	r3, r3, #18
 80063ea:	4013      	ands	r3, r2
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0x6f4>
 80063ee:	e03d      	b.n	800646c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f0:	4b21      	ldr	r3, [pc, #132]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b20      	ldr	r3, [pc, #128]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 80063f6:	4922      	ldr	r1, [pc, #136]	; (8006480 <HAL_RCC_OscConfig+0x7a4>)
 80063f8:	400a      	ands	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063fc:	f7fe fc90 	bl	8004d20 <HAL_GetTick>
 8006400:	0003      	movs	r3, r0
 8006402:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006404:	e008      	b.n	8006418 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006406:	f7fe fc8b 	bl	8004d20 <HAL_GetTick>
 800640a:	0002      	movs	r2, r0
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e02a      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006418:	4b17      	ldr	r3, [pc, #92]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	049b      	lsls	r3, r3, #18
 8006420:	4013      	ands	r3, r2
 8006422:	d1f0      	bne.n	8006406 <HAL_RCC_OscConfig+0x72a>
 8006424:	e022      	b.n	800646c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e01d      	b.n	800646e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <HAL_RCC_OscConfig+0x79c>)
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	025b      	lsls	r3, r3, #9
 800643e:	401a      	ands	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	429a      	cmp	r2, r3
 8006446:	d10f      	bne.n	8006468 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	23f0      	movs	r3, #240	; 0xf0
 800644c:	039b      	lsls	r3, r3, #14
 800644e:	401a      	ands	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006454:	429a      	cmp	r2, r3
 8006456:	d107      	bne.n	8006468 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	23c0      	movs	r3, #192	; 0xc0
 800645c:	041b      	lsls	r3, r3, #16
 800645e:	401a      	ands	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006464:	429a      	cmp	r2, r3
 8006466:	d001      	beq.n	800646c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	0018      	movs	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	b00a      	add	sp, #40	; 0x28
 8006474:	bdb0      	pop	{r4, r5, r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	40021000 	.word	0x40021000
 800647c:	ff02ffff 	.word	0xff02ffff
 8006480:	feffffff 	.word	0xfeffffff

08006484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006484:	b5b0      	push	{r4, r5, r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e128      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006498:	4b96      	ldr	r3, [pc, #600]	; (80066f4 <HAL_RCC_ClockConfig+0x270>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	4013      	ands	r3, r2
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d91e      	bls.n	80064e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a6:	4b93      	ldr	r3, [pc, #588]	; (80066f4 <HAL_RCC_ClockConfig+0x270>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2201      	movs	r2, #1
 80064ac:	4393      	bics	r3, r2
 80064ae:	0019      	movs	r1, r3
 80064b0:	4b90      	ldr	r3, [pc, #576]	; (80066f4 <HAL_RCC_ClockConfig+0x270>)
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064b8:	f7fe fc32 	bl	8004d20 <HAL_GetTick>
 80064bc:	0003      	movs	r3, r0
 80064be:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c0:	e009      	b.n	80064d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064c2:	f7fe fc2d 	bl	8004d20 <HAL_GetTick>
 80064c6:	0002      	movs	r2, r0
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	4a8a      	ldr	r2, [pc, #552]	; (80066f8 <HAL_RCC_ClockConfig+0x274>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e109      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d6:	4b87      	ldr	r3, [pc, #540]	; (80066f4 <HAL_RCC_ClockConfig+0x270>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2201      	movs	r2, #1
 80064dc:	4013      	ands	r3, r2
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d1ee      	bne.n	80064c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2202      	movs	r2, #2
 80064ea:	4013      	ands	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ee:	4b83      	ldr	r3, [pc, #524]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	22f0      	movs	r2, #240	; 0xf0
 80064f4:	4393      	bics	r3, r2
 80064f6:	0019      	movs	r1, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	4b7f      	ldr	r3, [pc, #508]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 80064fe:	430a      	orrs	r2, r1
 8006500:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2201      	movs	r2, #1
 8006508:	4013      	ands	r3, r2
 800650a:	d100      	bne.n	800650e <HAL_RCC_ClockConfig+0x8a>
 800650c:	e089      	b.n	8006622 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d107      	bne.n	8006526 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006516:	4b79      	ldr	r3, [pc, #484]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	029b      	lsls	r3, r3, #10
 800651e:	4013      	ands	r3, r2
 8006520:	d120      	bne.n	8006564 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e0e1      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b03      	cmp	r3, #3
 800652c:	d107      	bne.n	800653e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800652e:	4b73      	ldr	r3, [pc, #460]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	049b      	lsls	r3, r3, #18
 8006536:	4013      	ands	r3, r2
 8006538:	d114      	bne.n	8006564 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e0d5      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d106      	bne.n	8006554 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006546:	4b6d      	ldr	r3, [pc, #436]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2204      	movs	r2, #4
 800654c:	4013      	ands	r3, r2
 800654e:	d109      	bne.n	8006564 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0ca      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006554:	4b69      	ldr	r3, [pc, #420]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4013      	ands	r3, r2
 800655e:	d101      	bne.n	8006564 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e0c2      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006564:	4b65      	ldr	r3, [pc, #404]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	2203      	movs	r2, #3
 800656a:	4393      	bics	r3, r2
 800656c:	0019      	movs	r1, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	4b62      	ldr	r3, [pc, #392]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 8006574:	430a      	orrs	r2, r1
 8006576:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006578:	f7fe fbd2 	bl	8004d20 <HAL_GetTick>
 800657c:	0003      	movs	r3, r0
 800657e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d111      	bne.n	80065ac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006588:	e009      	b.n	800659e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800658a:	f7fe fbc9 	bl	8004d20 <HAL_GetTick>
 800658e:	0002      	movs	r2, r0
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	4a58      	ldr	r2, [pc, #352]	; (80066f8 <HAL_RCC_ClockConfig+0x274>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d901      	bls.n	800659e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e0a5      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800659e:	4b57      	ldr	r3, [pc, #348]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	220c      	movs	r2, #12
 80065a4:	4013      	ands	r3, r2
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d1ef      	bne.n	800658a <HAL_RCC_ClockConfig+0x106>
 80065aa:	e03a      	b.n	8006622 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d111      	bne.n	80065d8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b4:	e009      	b.n	80065ca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065b6:	f7fe fbb3 	bl	8004d20 <HAL_GetTick>
 80065ba:	0002      	movs	r2, r0
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	4a4d      	ldr	r2, [pc, #308]	; (80066f8 <HAL_RCC_ClockConfig+0x274>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e08f      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065ca:	4b4c      	ldr	r3, [pc, #304]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	220c      	movs	r2, #12
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b0c      	cmp	r3, #12
 80065d4:	d1ef      	bne.n	80065b6 <HAL_RCC_ClockConfig+0x132>
 80065d6:	e024      	b.n	8006622 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d11b      	bne.n	8006618 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80065e0:	e009      	b.n	80065f6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e2:	f7fe fb9d 	bl	8004d20 <HAL_GetTick>
 80065e6:	0002      	movs	r2, r0
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	4a42      	ldr	r2, [pc, #264]	; (80066f8 <HAL_RCC_ClockConfig+0x274>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e079      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80065f6:	4b41      	ldr	r3, [pc, #260]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	220c      	movs	r2, #12
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d1ef      	bne.n	80065e2 <HAL_RCC_ClockConfig+0x15e>
 8006602:	e00e      	b.n	8006622 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006604:	f7fe fb8c 	bl	8004d20 <HAL_GetTick>
 8006608:	0002      	movs	r2, r0
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	4a3a      	ldr	r2, [pc, #232]	; (80066f8 <HAL_RCC_ClockConfig+0x274>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e068      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006618:	4b38      	ldr	r3, [pc, #224]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	220c      	movs	r2, #12
 800661e:	4013      	ands	r3, r2
 8006620:	d1f0      	bne.n	8006604 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006622:	4b34      	ldr	r3, [pc, #208]	; (80066f4 <HAL_RCC_ClockConfig+0x270>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2201      	movs	r2, #1
 8006628:	4013      	ands	r3, r2
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d21e      	bcs.n	800666e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006630:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <HAL_RCC_ClockConfig+0x270>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2201      	movs	r2, #1
 8006636:	4393      	bics	r3, r2
 8006638:	0019      	movs	r1, r3
 800663a:	4b2e      	ldr	r3, [pc, #184]	; (80066f4 <HAL_RCC_ClockConfig+0x270>)
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006642:	f7fe fb6d 	bl	8004d20 <HAL_GetTick>
 8006646:	0003      	movs	r3, r0
 8006648:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664a:	e009      	b.n	8006660 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800664c:	f7fe fb68 	bl	8004d20 <HAL_GetTick>
 8006650:	0002      	movs	r2, r0
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	4a28      	ldr	r2, [pc, #160]	; (80066f8 <HAL_RCC_ClockConfig+0x274>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e044      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006660:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <HAL_RCC_ClockConfig+0x270>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2201      	movs	r2, #1
 8006666:	4013      	ands	r3, r2
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d1ee      	bne.n	800664c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2204      	movs	r2, #4
 8006674:	4013      	ands	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006678:	4b20      	ldr	r3, [pc, #128]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	4a20      	ldr	r2, [pc, #128]	; (8006700 <HAL_RCC_ClockConfig+0x27c>)
 800667e:	4013      	ands	r3, r2
 8006680:	0019      	movs	r1, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 8006688:	430a      	orrs	r2, r1
 800668a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2208      	movs	r2, #8
 8006692:	4013      	ands	r3, r2
 8006694:	d00a      	beq.n	80066ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006696:	4b19      	ldr	r3, [pc, #100]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	4a1a      	ldr	r2, [pc, #104]	; (8006704 <HAL_RCC_ClockConfig+0x280>)
 800669c:	4013      	ands	r3, r2
 800669e:	0019      	movs	r1, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	00da      	lsls	r2, r3, #3
 80066a6:	4b15      	ldr	r3, [pc, #84]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 80066a8:	430a      	orrs	r2, r1
 80066aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066ac:	f000 f832 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 80066b0:	0001      	movs	r1, r0
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <HAL_RCC_ClockConfig+0x278>)
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	091b      	lsrs	r3, r3, #4
 80066b8:	220f      	movs	r2, #15
 80066ba:	4013      	ands	r3, r2
 80066bc:	4a12      	ldr	r2, [pc, #72]	; (8006708 <HAL_RCC_ClockConfig+0x284>)
 80066be:	5cd3      	ldrb	r3, [r2, r3]
 80066c0:	000a      	movs	r2, r1
 80066c2:	40da      	lsrs	r2, r3
 80066c4:	4b11      	ldr	r3, [pc, #68]	; (800670c <HAL_RCC_ClockConfig+0x288>)
 80066c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80066c8:	4b11      	ldr	r3, [pc, #68]	; (8006710 <HAL_RCC_ClockConfig+0x28c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	250b      	movs	r5, #11
 80066ce:	197c      	adds	r4, r7, r5
 80066d0:	0018      	movs	r0, r3
 80066d2:	f7fe fadf 	bl	8004c94 <HAL_InitTick>
 80066d6:	0003      	movs	r3, r0
 80066d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80066da:	197b      	adds	r3, r7, r5
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80066e2:	197b      	adds	r3, r7, r5
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	e000      	b.n	80066ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b004      	add	sp, #16
 80066f0:	bdb0      	pop	{r4, r5, r7, pc}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	40022000 	.word	0x40022000
 80066f8:	00001388 	.word	0x00001388
 80066fc:	40021000 	.word	0x40021000
 8006700:	fffff8ff 	.word	0xfffff8ff
 8006704:	ffffc7ff 	.word	0xffffc7ff
 8006708:	0800b5d4 	.word	0x0800b5d4
 800670c:	20000008 	.word	0x20000008
 8006710:	2000000c 	.word	0x2000000c

08006714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006714:	b5b0      	push	{r4, r5, r7, lr}
 8006716:	b08e      	sub	sp, #56	; 0x38
 8006718:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800671a:	4b4c      	ldr	r3, [pc, #304]	; (800684c <HAL_RCC_GetSysClockFreq+0x138>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006722:	230c      	movs	r3, #12
 8006724:	4013      	ands	r3, r2
 8006726:	2b0c      	cmp	r3, #12
 8006728:	d014      	beq.n	8006754 <HAL_RCC_GetSysClockFreq+0x40>
 800672a:	d900      	bls.n	800672e <HAL_RCC_GetSysClockFreq+0x1a>
 800672c:	e07b      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x112>
 800672e:	2b04      	cmp	r3, #4
 8006730:	d002      	beq.n	8006738 <HAL_RCC_GetSysClockFreq+0x24>
 8006732:	2b08      	cmp	r3, #8
 8006734:	d00b      	beq.n	800674e <HAL_RCC_GetSysClockFreq+0x3a>
 8006736:	e076      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006738:	4b44      	ldr	r3, [pc, #272]	; (800684c <HAL_RCC_GetSysClockFreq+0x138>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2210      	movs	r2, #16
 800673e:	4013      	ands	r3, r2
 8006740:	d002      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006742:	4b43      	ldr	r3, [pc, #268]	; (8006850 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006744:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006746:	e07c      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006748:	4b42      	ldr	r3, [pc, #264]	; (8006854 <HAL_RCC_GetSysClockFreq+0x140>)
 800674a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800674c:	e079      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800674e:	4b42      	ldr	r3, [pc, #264]	; (8006858 <HAL_RCC_GetSysClockFreq+0x144>)
 8006750:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006752:	e076      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	0c9a      	lsrs	r2, r3, #18
 8006758:	230f      	movs	r3, #15
 800675a:	401a      	ands	r2, r3
 800675c:	4b3f      	ldr	r3, [pc, #252]	; (800685c <HAL_RCC_GetSysClockFreq+0x148>)
 800675e:	5c9b      	ldrb	r3, [r3, r2]
 8006760:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	0d9a      	lsrs	r2, r3, #22
 8006766:	2303      	movs	r3, #3
 8006768:	4013      	ands	r3, r2
 800676a:	3301      	adds	r3, #1
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800676e:	4b37      	ldr	r3, [pc, #220]	; (800684c <HAL_RCC_GetSysClockFreq+0x138>)
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	2380      	movs	r3, #128	; 0x80
 8006774:	025b      	lsls	r3, r3, #9
 8006776:	4013      	ands	r3, r2
 8006778:	d01a      	beq.n	80067b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	4a35      	ldr	r2, [pc, #212]	; (8006858 <HAL_RCC_GetSysClockFreq+0x144>)
 8006784:	2300      	movs	r3, #0
 8006786:	69b8      	ldr	r0, [r7, #24]
 8006788:	69f9      	ldr	r1, [r7, #28]
 800678a:	f7f9 fee7 	bl	800055c <__aeabi_lmul>
 800678e:	0002      	movs	r2, r0
 8006790:	000b      	movs	r3, r1
 8006792:	0010      	movs	r0, r2
 8006794:	0019      	movs	r1, r3
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f7f9 febb 	bl	800051c <__aeabi_uldivmod>
 80067a6:	0002      	movs	r2, r0
 80067a8:	000b      	movs	r3, r1
 80067aa:	0013      	movs	r3, r2
 80067ac:	637b      	str	r3, [r7, #52]	; 0x34
 80067ae:	e037      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80067b0:	4b26      	ldr	r3, [pc, #152]	; (800684c <HAL_RCC_GetSysClockFreq+0x138>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2210      	movs	r2, #16
 80067b6:	4013      	ands	r3, r2
 80067b8:	d01a      	beq.n	80067f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	4a23      	ldr	r2, [pc, #140]	; (8006850 <HAL_RCC_GetSysClockFreq+0x13c>)
 80067c4:	2300      	movs	r3, #0
 80067c6:	68b8      	ldr	r0, [r7, #8]
 80067c8:	68f9      	ldr	r1, [r7, #12]
 80067ca:	f7f9 fec7 	bl	800055c <__aeabi_lmul>
 80067ce:	0002      	movs	r2, r0
 80067d0:	000b      	movs	r3, r1
 80067d2:	0010      	movs	r0, r2
 80067d4:	0019      	movs	r1, r3
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	603b      	str	r3, [r7, #0]
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f7f9 fe9b 	bl	800051c <__aeabi_uldivmod>
 80067e6:	0002      	movs	r2, r0
 80067e8:	000b      	movs	r3, r1
 80067ea:	0013      	movs	r3, r2
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
 80067ee:	e017      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	0018      	movs	r0, r3
 80067f4:	2300      	movs	r3, #0
 80067f6:	0019      	movs	r1, r3
 80067f8:	4a16      	ldr	r2, [pc, #88]	; (8006854 <HAL_RCC_GetSysClockFreq+0x140>)
 80067fa:	2300      	movs	r3, #0
 80067fc:	f7f9 feae 	bl	800055c <__aeabi_lmul>
 8006800:	0002      	movs	r2, r0
 8006802:	000b      	movs	r3, r1
 8006804:	0010      	movs	r0, r2
 8006806:	0019      	movs	r1, r3
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	001c      	movs	r4, r3
 800680c:	2300      	movs	r3, #0
 800680e:	001d      	movs	r5, r3
 8006810:	0022      	movs	r2, r4
 8006812:	002b      	movs	r3, r5
 8006814:	f7f9 fe82 	bl	800051c <__aeabi_uldivmod>
 8006818:	0002      	movs	r2, r0
 800681a:	000b      	movs	r3, r1
 800681c:	0013      	movs	r3, r2
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006822:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006824:	e00d      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006826:	4b09      	ldr	r3, [pc, #36]	; (800684c <HAL_RCC_GetSysClockFreq+0x138>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	0b5b      	lsrs	r3, r3, #13
 800682c:	2207      	movs	r2, #7
 800682e:	4013      	ands	r3, r2
 8006830:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	3301      	adds	r3, #1
 8006836:	2280      	movs	r2, #128	; 0x80
 8006838:	0212      	lsls	r2, r2, #8
 800683a:	409a      	lsls	r2, r3
 800683c:	0013      	movs	r3, r2
 800683e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006840:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006844:	0018      	movs	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	b00e      	add	sp, #56	; 0x38
 800684a:	bdb0      	pop	{r4, r5, r7, pc}
 800684c:	40021000 	.word	0x40021000
 8006850:	003d0900 	.word	0x003d0900
 8006854:	00f42400 	.word	0x00f42400
 8006858:	007a1200 	.word	0x007a1200
 800685c:	0800b5ec 	.word	0x0800b5ec

08006860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006864:	4b02      	ldr	r3, [pc, #8]	; (8006870 <HAL_RCC_GetHCLKFreq+0x10>)
 8006866:	681b      	ldr	r3, [r3, #0]
}
 8006868:	0018      	movs	r0, r3
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	20000008 	.word	0x20000008

08006874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006878:	f7ff fff2 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 800687c:	0001      	movs	r1, r0
 800687e:	4b06      	ldr	r3, [pc, #24]	; (8006898 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	0a1b      	lsrs	r3, r3, #8
 8006884:	2207      	movs	r2, #7
 8006886:	4013      	ands	r3, r2
 8006888:	4a04      	ldr	r2, [pc, #16]	; (800689c <HAL_RCC_GetPCLK1Freq+0x28>)
 800688a:	5cd3      	ldrb	r3, [r2, r3]
 800688c:	40d9      	lsrs	r1, r3
 800688e:	000b      	movs	r3, r1
}
 8006890:	0018      	movs	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	40021000 	.word	0x40021000
 800689c:	0800b5e4 	.word	0x0800b5e4

080068a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068a4:	f7ff ffdc 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 80068a8:	0001      	movs	r1, r0
 80068aa:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	0adb      	lsrs	r3, r3, #11
 80068b0:	2207      	movs	r2, #7
 80068b2:	4013      	ands	r3, r2
 80068b4:	4a04      	ldr	r2, [pc, #16]	; (80068c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068b6:	5cd3      	ldrb	r3, [r2, r3]
 80068b8:	40d9      	lsrs	r1, r3
 80068ba:	000b      	movs	r3, r1
}
 80068bc:	0018      	movs	r0, r3
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	40021000 	.word	0x40021000
 80068c8:	0800b5e4 	.word	0x0800b5e4

080068cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80068d4:	2317      	movs	r3, #23
 80068d6:	18fb      	adds	r3, r7, r3
 80068d8:	2200      	movs	r2, #0
 80068da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2220      	movs	r2, #32
 80068e2:	4013      	ands	r3, r2
 80068e4:	d106      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	2380      	movs	r3, #128	; 0x80
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	4013      	ands	r3, r2
 80068f0:	d100      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80068f2:	e0d9      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068f4:	4ba4      	ldr	r3, [pc, #656]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	055b      	lsls	r3, r3, #21
 80068fc:	4013      	ands	r3, r2
 80068fe:	d10a      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006900:	4ba1      	ldr	r3, [pc, #644]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006904:	4ba0      	ldr	r3, [pc, #640]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	0549      	lsls	r1, r1, #21
 800690a:	430a      	orrs	r2, r1
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800690e:	2317      	movs	r3, #23
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	2201      	movs	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006916:	4b9d      	ldr	r3, [pc, #628]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	2380      	movs	r3, #128	; 0x80
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	4013      	ands	r3, r2
 8006920:	d11a      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006922:	4b9a      	ldr	r3, [pc, #616]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b99      	ldr	r3, [pc, #612]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006928:	2180      	movs	r1, #128	; 0x80
 800692a:	0049      	lsls	r1, r1, #1
 800692c:	430a      	orrs	r2, r1
 800692e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006930:	f7fe f9f6 	bl	8004d20 <HAL_GetTick>
 8006934:	0003      	movs	r3, r0
 8006936:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006938:	e008      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800693a:	f7fe f9f1 	bl	8004d20 <HAL_GetTick>
 800693e:	0002      	movs	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b64      	cmp	r3, #100	; 0x64
 8006946:	d901      	bls.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e118      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800694c:	4b8f      	ldr	r3, [pc, #572]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	2380      	movs	r3, #128	; 0x80
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	4013      	ands	r3, r2
 8006956:	d0f0      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006958:	4b8b      	ldr	r3, [pc, #556]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	23c0      	movs	r3, #192	; 0xc0
 800695e:	039b      	lsls	r3, r3, #14
 8006960:	4013      	ands	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	23c0      	movs	r3, #192	; 0xc0
 800696a:	039b      	lsls	r3, r3, #14
 800696c:	4013      	ands	r3, r2
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	429a      	cmp	r2, r3
 8006972:	d107      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	23c0      	movs	r3, #192	; 0xc0
 800697a:	039b      	lsls	r3, r3, #14
 800697c:	4013      	ands	r3, r2
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	429a      	cmp	r2, r3
 8006982:	d013      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	23c0      	movs	r3, #192	; 0xc0
 800698a:	029b      	lsls	r3, r3, #10
 800698c:	401a      	ands	r2, r3
 800698e:	23c0      	movs	r3, #192	; 0xc0
 8006990:	029b      	lsls	r3, r3, #10
 8006992:	429a      	cmp	r2, r3
 8006994:	d10a      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006996:	4b7c      	ldr	r3, [pc, #496]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	2380      	movs	r3, #128	; 0x80
 800699c:	029b      	lsls	r3, r3, #10
 800699e:	401a      	ands	r2, r3
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	029b      	lsls	r3, r3, #10
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d101      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0e8      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80069ac:	4b76      	ldr	r3, [pc, #472]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069b0:	23c0      	movs	r3, #192	; 0xc0
 80069b2:	029b      	lsls	r3, r3, #10
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d049      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	23c0      	movs	r3, #192	; 0xc0
 80069c4:	029b      	lsls	r3, r3, #10
 80069c6:	4013      	ands	r3, r2
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d004      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2220      	movs	r2, #32
 80069d4:	4013      	ands	r3, r2
 80069d6:	d10d      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	23c0      	movs	r3, #192	; 0xc0
 80069de:	029b      	lsls	r3, r3, #10
 80069e0:	4013      	ands	r3, r2
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d034      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	2380      	movs	r3, #128	; 0x80
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	4013      	ands	r3, r2
 80069f2:	d02e      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80069f4:	4b64      	ldr	r3, [pc, #400]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f8:	4a65      	ldr	r2, [pc, #404]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069fe:	4b62      	ldr	r3, [pc, #392]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a02:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a04:	2180      	movs	r1, #128	; 0x80
 8006a06:	0309      	lsls	r1, r1, #12
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a0c:	4b5e      	ldr	r3, [pc, #376]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a10:	4b5d      	ldr	r3, [pc, #372]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a12:	4960      	ldr	r1, [pc, #384]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006a14:	400a      	ands	r2, r1
 8006a16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006a18:	4b5b      	ldr	r3, [pc, #364]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	2380      	movs	r3, #128	; 0x80
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	4013      	ands	r3, r2
 8006a26:	d014      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a28:	f7fe f97a 	bl	8004d20 <HAL_GetTick>
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a30:	e009      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a32:	f7fe f975 	bl	8004d20 <HAL_GetTick>
 8006a36:	0002      	movs	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	4a56      	ldr	r2, [pc, #344]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e09b      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a46:	4b50      	ldr	r3, [pc, #320]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a4a:	2380      	movs	r3, #128	; 0x80
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d0ef      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	23c0      	movs	r3, #192	; 0xc0
 8006a58:	029b      	lsls	r3, r3, #10
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	23c0      	movs	r3, #192	; 0xc0
 8006a5e:	029b      	lsls	r3, r3, #10
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d10c      	bne.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006a64:	4b48      	ldr	r3, [pc, #288]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a4c      	ldr	r2, [pc, #304]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	0019      	movs	r1, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	23c0      	movs	r3, #192	; 0xc0
 8006a74:	039b      	lsls	r3, r3, #14
 8006a76:	401a      	ands	r2, r3
 8006a78:	4b43      	ldr	r3, [pc, #268]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	4b42      	ldr	r3, [pc, #264]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	23c0      	movs	r3, #192	; 0xc0
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	401a      	ands	r2, r3
 8006a8c:	4b3e      	ldr	r3, [pc, #248]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a92:	2317      	movs	r3, #23
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d105      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a9c:	4b3a      	ldr	r3, [pc, #232]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa0:	4b39      	ldr	r3, [pc, #228]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006aa2:	493f      	ldr	r1, [pc, #252]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006aa4:	400a      	ands	r2, r1
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2201      	movs	r2, #1
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ab2:	4b35      	ldr	r3, [pc, #212]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	4393      	bics	r3, r2
 8006aba:	0019      	movs	r1, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	4b31      	ldr	r3, [pc, #196]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2202      	movs	r2, #2
 8006acc:	4013      	ands	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ad0:	4b2d      	ldr	r3, [pc, #180]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad4:	220c      	movs	r2, #12
 8006ad6:	4393      	bics	r3, r2
 8006ad8:	0019      	movs	r1, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	4b2a      	ldr	r3, [pc, #168]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2204      	movs	r2, #4
 8006aea:	4013      	ands	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006aee:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af2:	4a2c      	ldr	r2, [pc, #176]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	0019      	movs	r1, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	695a      	ldr	r2, [r3, #20]
 8006afc:	4b22      	ldr	r3, [pc, #136]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006afe:	430a      	orrs	r2, r1
 8006b00:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2208      	movs	r2, #8
 8006b08:	4013      	ands	r3, r2
 8006b0a:	d009      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b0c:	4b1e      	ldr	r3, [pc, #120]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b10:	4a25      	ldr	r2, [pc, #148]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	0019      	movs	r1, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	2380      	movs	r3, #128	; 0x80
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4013      	ands	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b2c:	4b16      	ldr	r3, [pc, #88]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b30:	4a17      	ldr	r2, [pc, #92]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	0019      	movs	r1, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69da      	ldr	r2, [r3, #28]
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2240      	movs	r2, #64	; 0x40
 8006b46:	4013      	ands	r3, r2
 8006b48:	d009      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4e:	4a17      	ldr	r2, [pc, #92]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	0019      	movs	r1, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2280      	movs	r2, #128	; 0x80
 8006b64:	4013      	ands	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006b68:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6c:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	0019      	movs	r1, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1a      	ldr	r2, [r3, #32]
 8006b76:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	0018      	movs	r0, r3
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b006      	add	sp, #24
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40007000 	.word	0x40007000
 8006b90:	fffcffff 	.word	0xfffcffff
 8006b94:	fff7ffff 	.word	0xfff7ffff
 8006b98:	00001388 	.word	0x00001388
 8006b9c:	ffcfffff 	.word	0xffcfffff
 8006ba0:	efffffff 	.word	0xefffffff
 8006ba4:	fffff3ff 	.word	0xfffff3ff
 8006ba8:	ffffcfff 	.word	0xffffcfff
 8006bac:	fbffffff 	.word	0xfbffffff
 8006bb0:	fff3ffff 	.word	0xfff3ffff

08006bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e032      	b.n	8006c2c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2239      	movs	r2, #57	; 0x39
 8006bca:	5c9b      	ldrb	r3, [r3, r2]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2238      	movs	r2, #56	; 0x38
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f7fd fd8f 	bl	8004700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2239      	movs	r2, #57	; 0x39
 8006be6:	2102      	movs	r1, #2
 8006be8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	0019      	movs	r1, r3
 8006bf4:	0010      	movs	r0, r2
 8006bf6:	f000 fc39 	bl	800746c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	223e      	movs	r2, #62	; 0x3e
 8006bfe:	2101      	movs	r1, #1
 8006c00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	223a      	movs	r2, #58	; 0x3a
 8006c06:	2101      	movs	r1, #1
 8006c08:	5499      	strb	r1, [r3, r2]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	223b      	movs	r2, #59	; 0x3b
 8006c0e:	2101      	movs	r1, #1
 8006c10:	5499      	strb	r1, [r3, r2]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	223c      	movs	r2, #60	; 0x3c
 8006c16:	2101      	movs	r1, #1
 8006c18:	5499      	strb	r1, [r3, r2]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	223d      	movs	r2, #61	; 0x3d
 8006c1e:	2101      	movs	r1, #1
 8006c20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2239      	movs	r2, #57	; 0x39
 8006c26:	2101      	movs	r1, #1
 8006c28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b002      	add	sp, #8
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e032      	b.n	8006cac <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2239      	movs	r2, #57	; 0x39
 8006c4a:	5c9b      	ldrb	r3, [r3, r2]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d107      	bne.n	8006c62 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2238      	movs	r2, #56	; 0x38
 8006c56:	2100      	movs	r1, #0
 8006c58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f000 f829 	bl	8006cb4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2239      	movs	r2, #57	; 0x39
 8006c66:	2102      	movs	r1, #2
 8006c68:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3304      	adds	r3, #4
 8006c72:	0019      	movs	r1, r3
 8006c74:	0010      	movs	r0, r2
 8006c76:	f000 fbf9 	bl	800746c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	223e      	movs	r2, #62	; 0x3e
 8006c7e:	2101      	movs	r1, #1
 8006c80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	223a      	movs	r2, #58	; 0x3a
 8006c86:	2101      	movs	r1, #1
 8006c88:	5499      	strb	r1, [r3, r2]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	223b      	movs	r2, #59	; 0x3b
 8006c8e:	2101      	movs	r1, #1
 8006c90:	5499      	strb	r1, [r3, r2]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	223c      	movs	r2, #60	; 0x3c
 8006c96:	2101      	movs	r1, #1
 8006c98:	5499      	strb	r1, [r3, r2]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	223d      	movs	r2, #61	; 0x3d
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2239      	movs	r2, #57	; 0x39
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e032      	b.n	8006d3c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2239      	movs	r2, #57	; 0x39
 8006cda:	5c9b      	ldrb	r3, [r3, r2]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d107      	bne.n	8006cf2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2238      	movs	r2, #56	; 0x38
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	0018      	movs	r0, r3
 8006cee:	f000 f829 	bl	8006d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2239      	movs	r2, #57	; 0x39
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3304      	adds	r3, #4
 8006d02:	0019      	movs	r1, r3
 8006d04:	0010      	movs	r0, r2
 8006d06:	f000 fbb1 	bl	800746c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	223e      	movs	r2, #62	; 0x3e
 8006d0e:	2101      	movs	r1, #1
 8006d10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	223a      	movs	r2, #58	; 0x3a
 8006d16:	2101      	movs	r1, #1
 8006d18:	5499      	strb	r1, [r3, r2]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	223b      	movs	r2, #59	; 0x3b
 8006d1e:	2101      	movs	r1, #1
 8006d20:	5499      	strb	r1, [r3, r2]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	223c      	movs	r2, #60	; 0x3c
 8006d26:	2101      	movs	r1, #1
 8006d28:	5499      	strb	r1, [r3, r2]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	223d      	movs	r2, #61	; 0x3d
 8006d2e:	2101      	movs	r1, #1
 8006d30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2239      	movs	r2, #57	; 0x39
 8006d36:	2101      	movs	r1, #1
 8006d38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b002      	add	sp, #8
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d4c:	46c0      	nop			; (mov r8, r8)
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b002      	add	sp, #8
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d108      	bne.n	8006d76 <HAL_TIM_PWM_Start+0x22>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	223a      	movs	r2, #58	; 0x3a
 8006d68:	5c9b      	ldrb	r3, [r3, r2]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	1e5a      	subs	r2, r3, #1
 8006d70:	4193      	sbcs	r3, r2
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	e01f      	b.n	8006db6 <HAL_TIM_PWM_Start+0x62>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d108      	bne.n	8006d8e <HAL_TIM_PWM_Start+0x3a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	223b      	movs	r2, #59	; 0x3b
 8006d80:	5c9b      	ldrb	r3, [r3, r2]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	1e5a      	subs	r2, r3, #1
 8006d88:	4193      	sbcs	r3, r2
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	e013      	b.n	8006db6 <HAL_TIM_PWM_Start+0x62>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d108      	bne.n	8006da6 <HAL_TIM_PWM_Start+0x52>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	223c      	movs	r2, #60	; 0x3c
 8006d98:	5c9b      	ldrb	r3, [r3, r2]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	1e5a      	subs	r2, r3, #1
 8006da0:	4193      	sbcs	r3, r2
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	e007      	b.n	8006db6 <HAL_TIM_PWM_Start+0x62>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	223d      	movs	r2, #61	; 0x3d
 8006daa:	5c9b      	ldrb	r3, [r3, r2]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	1e5a      	subs	r2, r3, #1
 8006db2:	4193      	sbcs	r3, r2
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e052      	b.n	8006e64 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <HAL_TIM_PWM_Start+0x7a>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	223a      	movs	r2, #58	; 0x3a
 8006dc8:	2102      	movs	r1, #2
 8006dca:	5499      	strb	r1, [r3, r2]
 8006dcc:	e013      	b.n	8006df6 <HAL_TIM_PWM_Start+0xa2>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d104      	bne.n	8006dde <HAL_TIM_PWM_Start+0x8a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	223b      	movs	r2, #59	; 0x3b
 8006dd8:	2102      	movs	r1, #2
 8006dda:	5499      	strb	r1, [r3, r2]
 8006ddc:	e00b      	b.n	8006df6 <HAL_TIM_PWM_Start+0xa2>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d104      	bne.n	8006dee <HAL_TIM_PWM_Start+0x9a>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	223c      	movs	r2, #60	; 0x3c
 8006de8:	2102      	movs	r1, #2
 8006dea:	5499      	strb	r1, [r3, r2]
 8006dec:	e003      	b.n	8006df6 <HAL_TIM_PWM_Start+0xa2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	223d      	movs	r2, #61	; 0x3d
 8006df2:	2102      	movs	r1, #2
 8006df4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f000 fd30 	bl	8007864 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	2380      	movs	r3, #128	; 0x80
 8006e0a:	05db      	lsls	r3, r3, #23
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d00e      	beq.n	8006e2e <HAL_TIM_PWM_Start+0xda>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <HAL_TIM_PWM_Start+0x118>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d009      	beq.n	8006e2e <HAL_TIM_PWM_Start+0xda>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a14      	ldr	r2, [pc, #80]	; (8006e70 <HAL_TIM_PWM_Start+0x11c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d004      	beq.n	8006e2e <HAL_TIM_PWM_Start+0xda>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <HAL_TIM_PWM_Start+0x120>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d111      	bne.n	8006e52 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2207      	movs	r2, #7
 8006e36:	4013      	ands	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b06      	cmp	r3, #6
 8006e3e:	d010      	beq.n	8006e62 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e50:	e007      	b.n	8006e62 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	0018      	movs	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b004      	add	sp, #16
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40010800 	.word	0x40010800
 8006e74:	40011400 	.word	0x40011400

08006e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2202      	movs	r2, #2
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d124      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	2202      	movs	r2, #2
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d11d      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2203      	movs	r2, #3
 8006ea2:	4252      	negs	r2, r2
 8006ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	2203      	movs	r2, #3
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f000 fabe 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e007      	b.n	8006ed2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f000 fab1 	bl	800742c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	0018      	movs	r0, r3
 8006ece:	f000 fabd 	bl	800744c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d125      	bne.n	8006f32 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2204      	movs	r2, #4
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d11e      	bne.n	8006f32 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2205      	movs	r2, #5
 8006efa:	4252      	negs	r2, r2
 8006efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2202      	movs	r2, #2
 8006f02:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699a      	ldr	r2, [r3, #24]
 8006f0a:	23c0      	movs	r3, #192	; 0xc0
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	0018      	movs	r0, r3
 8006f16:	f000 fa91 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006f1a:	e007      	b.n	8006f2c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f000 fa84 	bl	800742c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	0018      	movs	r0, r3
 8006f28:	f000 fa90 	bl	800744c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d124      	bne.n	8006f8a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2208      	movs	r2, #8
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d11d      	bne.n	8006f8a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2209      	movs	r2, #9
 8006f54:	4252      	negs	r2, r2
 8006f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2204      	movs	r2, #4
 8006f5c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	2203      	movs	r2, #3
 8006f66:	4013      	ands	r3, r2
 8006f68:	d004      	beq.n	8006f74 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f000 fa65 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006f72:	e007      	b.n	8006f84 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	0018      	movs	r0, r3
 8006f78:	f000 fa58 	bl	800742c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f000 fa64 	bl	800744c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	2210      	movs	r2, #16
 8006f92:	4013      	ands	r3, r2
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	d125      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d11e      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2211      	movs	r2, #17
 8006fac:	4252      	negs	r2, r2
 8006fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2208      	movs	r2, #8
 8006fb4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	23c0      	movs	r3, #192	; 0xc0
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d004      	beq.n	8006fce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f000 fa38 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e007      	b.n	8006fde <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f000 fa2b 	bl	800742c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f000 fa37 	bl	800744c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2201      	movs	r2, #1
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d10f      	bne.n	8007012 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d108      	bne.n	8007012 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2202      	movs	r2, #2
 8007006:	4252      	negs	r2, r2
 8007008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	0018      	movs	r0, r3
 800700e:	f7fd f939 	bl	8004284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2240      	movs	r2, #64	; 0x40
 800701a:	4013      	ands	r3, r2
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d10f      	bne.n	8007040 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2240      	movs	r2, #64	; 0x40
 8007028:	4013      	ands	r3, r2
 800702a:	2b40      	cmp	r3, #64	; 0x40
 800702c:	d108      	bne.n	8007040 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2241      	movs	r2, #65	; 0x41
 8007034:	4252      	negs	r2, r2
 8007036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	0018      	movs	r0, r3
 800703c:	f000 fa0e 	bl	800745c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007040:	46c0      	nop			; (mov r8, r8)
 8007042:	46bd      	mov	sp, r7
 8007044:	b002      	add	sp, #8
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007054:	2317      	movs	r3, #23
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2238      	movs	r2, #56	; 0x38
 8007060:	5c9b      	ldrb	r3, [r3, r2]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d101      	bne.n	800706a <HAL_TIM_OC_ConfigChannel+0x22>
 8007066:	2302      	movs	r3, #2
 8007068:	e042      	b.n	80070f0 <HAL_TIM_OC_ConfigChannel+0xa8>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2238      	movs	r2, #56	; 0x38
 800706e:	2101      	movs	r1, #1
 8007070:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b0c      	cmp	r3, #12
 8007076:	d027      	beq.n	80070c8 <HAL_TIM_OC_ConfigChannel+0x80>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b0c      	cmp	r3, #12
 800707c:	d82c      	bhi.n	80070d8 <HAL_TIM_OC_ConfigChannel+0x90>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b08      	cmp	r3, #8
 8007082:	d019      	beq.n	80070b8 <HAL_TIM_OC_ConfigChannel+0x70>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b08      	cmp	r3, #8
 8007088:	d826      	bhi.n	80070d8 <HAL_TIM_OC_ConfigChannel+0x90>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <HAL_TIM_OC_ConfigChannel+0x50>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b04      	cmp	r3, #4
 8007094:	d008      	beq.n	80070a8 <HAL_TIM_OC_ConfigChannel+0x60>
 8007096:	e01f      	b.n	80070d8 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	0011      	movs	r1, r2
 80070a0:	0018      	movs	r0, r3
 80070a2:	f000 fa41 	bl	8007528 <TIM_OC1_SetConfig>
      break;
 80070a6:	e01c      	b.n	80070e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	0011      	movs	r1, r2
 80070b0:	0018      	movs	r0, r3
 80070b2:	f000 fa75 	bl	80075a0 <TIM_OC2_SetConfig>
      break;
 80070b6:	e014      	b.n	80070e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	0011      	movs	r1, r2
 80070c0:	0018      	movs	r0, r3
 80070c2:	f000 faaf 	bl	8007624 <TIM_OC3_SetConfig>
      break;
 80070c6:	e00c      	b.n	80070e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	0011      	movs	r1, r2
 80070d0:	0018      	movs	r0, r3
 80070d2:	f000 fae7 	bl	80076a4 <TIM_OC4_SetConfig>
      break;
 80070d6:	e004      	b.n	80070e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80070d8:	2317      	movs	r3, #23
 80070da:	18fb      	adds	r3, r7, r3
 80070dc:	2201      	movs	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]
      break;
 80070e0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2238      	movs	r2, #56	; 0x38
 80070e6:	2100      	movs	r1, #0
 80070e8:	5499      	strb	r1, [r3, r2]

  return status;
 80070ea:	2317      	movs	r3, #23
 80070ec:	18fb      	adds	r3, r7, r3
 80070ee:	781b      	ldrb	r3, [r3, #0]
}
 80070f0:	0018      	movs	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b006      	add	sp, #24
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007104:	2317      	movs	r3, #23
 8007106:	18fb      	adds	r3, r7, r3
 8007108:	2200      	movs	r2, #0
 800710a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2238      	movs	r2, #56	; 0x38
 8007110:	5c9b      	ldrb	r3, [r3, r2]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007116:	2302      	movs	r3, #2
 8007118:	e0ad      	b.n	8007276 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2238      	movs	r2, #56	; 0x38
 800711e:	2101      	movs	r1, #1
 8007120:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d100      	bne.n	800712a <HAL_TIM_PWM_ConfigChannel+0x32>
 8007128:	e076      	b.n	8007218 <HAL_TIM_PWM_ConfigChannel+0x120>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b0c      	cmp	r3, #12
 800712e:	d900      	bls.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007130:	e095      	b.n	800725e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d04e      	beq.n	80071d6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b08      	cmp	r3, #8
 800713c:	d900      	bls.n	8007140 <HAL_TIM_PWM_ConfigChannel+0x48>
 800713e:	e08e      	b.n	800725e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_TIM_PWM_ConfigChannel+0x56>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b04      	cmp	r3, #4
 800714a:	d021      	beq.n	8007190 <HAL_TIM_PWM_ConfigChannel+0x98>
 800714c:	e087      	b.n	800725e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	0011      	movs	r1, r2
 8007156:	0018      	movs	r0, r3
 8007158:	f000 f9e6 	bl	8007528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2108      	movs	r1, #8
 8007168:	430a      	orrs	r2, r1
 800716a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2104      	movs	r1, #4
 8007178:	438a      	bics	r2, r1
 800717a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6999      	ldr	r1, [r3, #24]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	619a      	str	r2, [r3, #24]
      break;
 800718e:	e06b      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	0011      	movs	r1, r2
 8007198:	0018      	movs	r0, r3
 800719a:	f000 fa01 	bl	80075a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2180      	movs	r1, #128	; 0x80
 80071aa:	0109      	lsls	r1, r1, #4
 80071ac:	430a      	orrs	r2, r1
 80071ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4931      	ldr	r1, [pc, #196]	; (8007280 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80071bc:	400a      	ands	r2, r1
 80071be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6999      	ldr	r1, [r3, #24]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	021a      	lsls	r2, r3, #8
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	619a      	str	r2, [r3, #24]
      break;
 80071d4:	e048      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	0011      	movs	r1, r2
 80071de:	0018      	movs	r0, r3
 80071e0:	f000 fa20 	bl	8007624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69da      	ldr	r2, [r3, #28]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2108      	movs	r1, #8
 80071f0:	430a      	orrs	r2, r1
 80071f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69da      	ldr	r2, [r3, #28]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2104      	movs	r1, #4
 8007200:	438a      	bics	r2, r1
 8007202:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69d9      	ldr	r1, [r3, #28]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	61da      	str	r2, [r3, #28]
      break;
 8007216:	e027      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	0011      	movs	r1, r2
 8007220:	0018      	movs	r0, r3
 8007222:	f000 fa3f 	bl	80076a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69da      	ldr	r2, [r3, #28]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2180      	movs	r1, #128	; 0x80
 8007232:	0109      	lsls	r1, r1, #4
 8007234:	430a      	orrs	r2, r1
 8007236:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69da      	ldr	r2, [r3, #28]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	490f      	ldr	r1, [pc, #60]	; (8007280 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007244:	400a      	ands	r2, r1
 8007246:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69d9      	ldr	r1, [r3, #28]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	021a      	lsls	r2, r3, #8
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	61da      	str	r2, [r3, #28]
      break;
 800725c:	e004      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800725e:	2317      	movs	r3, #23
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	2201      	movs	r2, #1
 8007264:	701a      	strb	r2, [r3, #0]
      break;
 8007266:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2238      	movs	r2, #56	; 0x38
 800726c:	2100      	movs	r1, #0
 800726e:	5499      	strb	r1, [r3, r2]

  return status;
 8007270:	2317      	movs	r3, #23
 8007272:	18fb      	adds	r3, r7, r3
 8007274:	781b      	ldrb	r3, [r3, #0]
}
 8007276:	0018      	movs	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	b006      	add	sp, #24
 800727c:	bd80      	pop	{r7, pc}
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	fffffbff 	.word	0xfffffbff

08007284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800728e:	230f      	movs	r3, #15
 8007290:	18fb      	adds	r3, r7, r3
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2238      	movs	r2, #56	; 0x38
 800729a:	5c9b      	ldrb	r3, [r3, r2]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIM_ConfigClockSource+0x20>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e0bc      	b.n	800741e <HAL_TIM_ConfigClockSource+0x19a>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2238      	movs	r2, #56	; 0x38
 80072a8:	2101      	movs	r1, #1
 80072aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2239      	movs	r2, #57	; 0x39
 80072b0:	2102      	movs	r1, #2
 80072b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2277      	movs	r2, #119	; 0x77
 80072c0:	4393      	bics	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4a58      	ldr	r2, [pc, #352]	; (8007428 <HAL_TIM_ConfigClockSource+0x1a4>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2280      	movs	r2, #128	; 0x80
 80072da:	0192      	lsls	r2, r2, #6
 80072dc:	4293      	cmp	r3, r2
 80072de:	d040      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0xde>
 80072e0:	2280      	movs	r2, #128	; 0x80
 80072e2:	0192      	lsls	r2, r2, #6
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d900      	bls.n	80072ea <HAL_TIM_ConfigClockSource+0x66>
 80072e8:	e088      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
 80072ea:	2280      	movs	r2, #128	; 0x80
 80072ec:	0152      	lsls	r2, r2, #5
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d100      	bne.n	80072f4 <HAL_TIM_ConfigClockSource+0x70>
 80072f2:	e088      	b.n	8007406 <HAL_TIM_ConfigClockSource+0x182>
 80072f4:	2280      	movs	r2, #128	; 0x80
 80072f6:	0152      	lsls	r2, r2, #5
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d900      	bls.n	80072fe <HAL_TIM_ConfigClockSource+0x7a>
 80072fc:	e07e      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
 80072fe:	2b70      	cmp	r3, #112	; 0x70
 8007300:	d018      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0xb0>
 8007302:	d900      	bls.n	8007306 <HAL_TIM_ConfigClockSource+0x82>
 8007304:	e07a      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
 8007306:	2b60      	cmp	r3, #96	; 0x60
 8007308:	d04f      	beq.n	80073aa <HAL_TIM_ConfigClockSource+0x126>
 800730a:	d900      	bls.n	800730e <HAL_TIM_ConfigClockSource+0x8a>
 800730c:	e076      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
 800730e:	2b50      	cmp	r3, #80	; 0x50
 8007310:	d03b      	beq.n	800738a <HAL_TIM_ConfigClockSource+0x106>
 8007312:	d900      	bls.n	8007316 <HAL_TIM_ConfigClockSource+0x92>
 8007314:	e072      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
 8007316:	2b40      	cmp	r3, #64	; 0x40
 8007318:	d057      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0x146>
 800731a:	d900      	bls.n	800731e <HAL_TIM_ConfigClockSource+0x9a>
 800731c:	e06e      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
 800731e:	2b30      	cmp	r3, #48	; 0x30
 8007320:	d063      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x166>
 8007322:	d86b      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
 8007324:	2b20      	cmp	r3, #32
 8007326:	d060      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x166>
 8007328:	d868      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d05d      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x166>
 800732e:	2b10      	cmp	r3, #16
 8007330:	d05b      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x166>
 8007332:	e063      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	6899      	ldr	r1, [r3, #8]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f000 fa6e 	bl	8007824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2277      	movs	r2, #119	; 0x77
 8007354:	4313      	orrs	r3, r2
 8007356:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	609a      	str	r2, [r3, #8]
      break;
 8007360:	e052      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	6899      	ldr	r1, [r3, #8]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f000 fa57 	bl	8007824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2180      	movs	r1, #128	; 0x80
 8007382:	01c9      	lsls	r1, r1, #7
 8007384:	430a      	orrs	r2, r1
 8007386:	609a      	str	r2, [r3, #8]
      break;
 8007388:	e03e      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	6859      	ldr	r1, [r3, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	001a      	movs	r2, r3
 8007398:	f000 f9ca 	bl	8007730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2150      	movs	r1, #80	; 0x50
 80073a2:	0018      	movs	r0, r3
 80073a4:	f000 fa24 	bl	80077f0 <TIM_ITRx_SetConfig>
      break;
 80073a8:	e02e      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6859      	ldr	r1, [r3, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	001a      	movs	r2, r3
 80073b8:	f000 f9e8 	bl	800778c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2160      	movs	r1, #96	; 0x60
 80073c2:	0018      	movs	r0, r3
 80073c4:	f000 fa14 	bl	80077f0 <TIM_ITRx_SetConfig>
      break;
 80073c8:	e01e      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6859      	ldr	r1, [r3, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	001a      	movs	r2, r3
 80073d8:	f000 f9aa 	bl	8007730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2140      	movs	r1, #64	; 0x40
 80073e2:	0018      	movs	r0, r3
 80073e4:	f000 fa04 	bl	80077f0 <TIM_ITRx_SetConfig>
      break;
 80073e8:	e00e      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	0019      	movs	r1, r3
 80073f4:	0010      	movs	r0, r2
 80073f6:	f000 f9fb 	bl	80077f0 <TIM_ITRx_SetConfig>
      break;
 80073fa:	e005      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80073fc:	230f      	movs	r3, #15
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	2201      	movs	r2, #1
 8007402:	701a      	strb	r2, [r3, #0]
      break;
 8007404:	e000      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007406:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2239      	movs	r2, #57	; 0x39
 800740c:	2101      	movs	r1, #1
 800740e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2238      	movs	r2, #56	; 0x38
 8007414:	2100      	movs	r1, #0
 8007416:	5499      	strb	r1, [r3, r2]

  return status;
 8007418:	230f      	movs	r3, #15
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	781b      	ldrb	r3, [r3, #0]
}
 800741e:	0018      	movs	r0, r3
 8007420:	46bd      	mov	sp, r7
 8007422:	b004      	add	sp, #16
 8007424:	bd80      	pop	{r7, pc}
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	ffff00ff 	.word	0xffff00ff

0800742c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007434:	46c0      	nop			; (mov r8, r8)
 8007436:	46bd      	mov	sp, r7
 8007438:	b002      	add	sp, #8
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007444:	46c0      	nop			; (mov r8, r8)
 8007446:	46bd      	mov	sp, r7
 8007448:	b002      	add	sp, #8
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007454:	46c0      	nop			; (mov r8, r8)
 8007456:	46bd      	mov	sp, r7
 8007458:	b002      	add	sp, #8
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007464:	46c0      	nop			; (mov r8, r8)
 8007466:	46bd      	mov	sp, r7
 8007468:	b002      	add	sp, #8
 800746a:	bd80      	pop	{r7, pc}

0800746c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	2380      	movs	r3, #128	; 0x80
 8007480:	05db      	lsls	r3, r3, #23
 8007482:	429a      	cmp	r2, r3
 8007484:	d00b      	beq.n	800749e <TIM_Base_SetConfig+0x32>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a23      	ldr	r2, [pc, #140]	; (8007518 <TIM_Base_SetConfig+0xac>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d007      	beq.n	800749e <TIM_Base_SetConfig+0x32>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a22      	ldr	r2, [pc, #136]	; (800751c <TIM_Base_SetConfig+0xb0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d003      	beq.n	800749e <TIM_Base_SetConfig+0x32>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a21      	ldr	r2, [pc, #132]	; (8007520 <TIM_Base_SetConfig+0xb4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d108      	bne.n	80074b0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2270      	movs	r2, #112	; 0x70
 80074a2:	4393      	bics	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	2380      	movs	r3, #128	; 0x80
 80074b4:	05db      	lsls	r3, r3, #23
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d00b      	beq.n	80074d2 <TIM_Base_SetConfig+0x66>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a16      	ldr	r2, [pc, #88]	; (8007518 <TIM_Base_SetConfig+0xac>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <TIM_Base_SetConfig+0x66>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a15      	ldr	r2, [pc, #84]	; (800751c <TIM_Base_SetConfig+0xb0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d003      	beq.n	80074d2 <TIM_Base_SetConfig+0x66>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a14      	ldr	r2, [pc, #80]	; (8007520 <TIM_Base_SetConfig+0xb4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d108      	bne.n	80074e4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4a13      	ldr	r2, [pc, #76]	; (8007524 <TIM_Base_SetConfig+0xb8>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2280      	movs	r2, #128	; 0x80
 80074e8:	4393      	bics	r3, r2
 80074ea:	001a      	movs	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	615a      	str	r2, [r3, #20]
}
 8007510:	46c0      	nop			; (mov r8, r8)
 8007512:	46bd      	mov	sp, r7
 8007514:	b004      	add	sp, #16
 8007516:	bd80      	pop	{r7, pc}
 8007518:	40000400 	.word	0x40000400
 800751c:	40010800 	.word	0x40010800
 8007520:	40011400 	.word	0x40011400
 8007524:	fffffcff 	.word	0xfffffcff

08007528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	2201      	movs	r2, #1
 8007538:	4393      	bics	r3, r2
 800753a:	001a      	movs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2270      	movs	r2, #112	; 0x70
 8007556:	4393      	bics	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2203      	movs	r2, #3
 800755e:	4393      	bics	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2202      	movs	r2, #2
 8007570:	4393      	bics	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	621a      	str	r2, [r3, #32]
}
 8007598:	46c0      	nop			; (mov r8, r8)
 800759a:	46bd      	mov	sp, r7
 800759c:	b006      	add	sp, #24
 800759e:	bd80      	pop	{r7, pc}

080075a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	2210      	movs	r2, #16
 80075b0:	4393      	bics	r3, r2
 80075b2:	001a      	movs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4a13      	ldr	r2, [pc, #76]	; (800761c <TIM_OC2_SetConfig+0x7c>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4a12      	ldr	r2, [pc, #72]	; (8007620 <TIM_OC2_SetConfig+0x80>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2220      	movs	r2, #32
 80075ea:	4393      	bics	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	621a      	str	r2, [r3, #32]
}
 8007614:	46c0      	nop			; (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	b006      	add	sp, #24
 800761a:	bd80      	pop	{r7, pc}
 800761c:	ffff8fff 	.word	0xffff8fff
 8007620:	fffffcff 	.word	0xfffffcff

08007624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	4a1a      	ldr	r2, [pc, #104]	; (800769c <TIM_OC3_SetConfig+0x78>)
 8007634:	401a      	ands	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2270      	movs	r2, #112	; 0x70
 8007650:	4393      	bics	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2203      	movs	r2, #3
 8007658:	4393      	bics	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	4a0d      	ldr	r2, [pc, #52]	; (80076a0 <TIM_OC3_SetConfig+0x7c>)
 800766a:	4013      	ands	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	621a      	str	r2, [r3, #32]
}
 8007694:	46c0      	nop			; (mov r8, r8)
 8007696:	46bd      	mov	sp, r7
 8007698:	b006      	add	sp, #24
 800769a:	bd80      	pop	{r7, pc}
 800769c:	fffffeff 	.word	0xfffffeff
 80076a0:	fffffdff 	.word	0xfffffdff

080076a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <TIM_OC4_SetConfig+0x7c>)
 80076b4:	401a      	ands	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4a15      	ldr	r2, [pc, #84]	; (8007724 <TIM_OC4_SetConfig+0x80>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4a14      	ldr	r2, [pc, #80]	; (8007728 <TIM_OC4_SetConfig+0x84>)
 80076d8:	4013      	ands	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	4a10      	ldr	r2, [pc, #64]	; (800772c <TIM_OC4_SetConfig+0x88>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	031b      	lsls	r3, r3, #12
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	621a      	str	r2, [r3, #32]
}
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	46bd      	mov	sp, r7
 800771a:	b006      	add	sp, #24
 800771c:	bd80      	pop	{r7, pc}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	ffffefff 	.word	0xffffefff
 8007724:	ffff8fff 	.word	0xffff8fff
 8007728:	fffffcff 	.word	0xfffffcff
 800772c:	ffffdfff 	.word	0xffffdfff

08007730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	2201      	movs	r2, #1
 8007748:	4393      	bics	r3, r2
 800774a:	001a      	movs	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	22f0      	movs	r2, #240	; 0xf0
 800775a:	4393      	bics	r3, r2
 800775c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	220a      	movs	r2, #10
 800776c:	4393      	bics	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	621a      	str	r2, [r3, #32]
}
 8007784:	46c0      	nop			; (mov r8, r8)
 8007786:	46bd      	mov	sp, r7
 8007788:	b006      	add	sp, #24
 800778a:	bd80      	pop	{r7, pc}

0800778c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	2210      	movs	r2, #16
 800779e:	4393      	bics	r3, r2
 80077a0:	001a      	movs	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	4a0d      	ldr	r2, [pc, #52]	; (80077ec <TIM_TI2_ConfigInputStage+0x60>)
 80077b6:	4013      	ands	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	031b      	lsls	r3, r3, #12
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	22a0      	movs	r2, #160	; 0xa0
 80077c8:	4393      	bics	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	621a      	str	r2, [r3, #32]
}
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	46bd      	mov	sp, r7
 80077e6:	b006      	add	sp, #24
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	ffff0fff 	.word	0xffff0fff

080077f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2270      	movs	r2, #112	; 0x70
 8007804:	4393      	bics	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	2207      	movs	r2, #7
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	609a      	str	r2, [r3, #8]
}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	46bd      	mov	sp, r7
 800781e:	b004      	add	sp, #16
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <TIM_ETR_SetConfig+0x3c>)
 800783c:	4013      	ands	r3, r2
 800783e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	021a      	lsls	r2, r3, #8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	431a      	orrs	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4313      	orrs	r3, r2
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	609a      	str	r2, [r3, #8]
}
 8007858:	46c0      	nop			; (mov r8, r8)
 800785a:	46bd      	mov	sp, r7
 800785c:	b006      	add	sp, #24
 800785e:	bd80      	pop	{r7, pc}
 8007860:	ffff00ff 	.word	0xffff00ff

08007864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	221f      	movs	r2, #31
 8007874:	4013      	ands	r3, r2
 8007876:	2201      	movs	r2, #1
 8007878:	409a      	lsls	r2, r3
 800787a:	0013      	movs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	43d2      	mvns	r2, r2
 8007886:	401a      	ands	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a1a      	ldr	r2, [r3, #32]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	211f      	movs	r1, #31
 8007894:	400b      	ands	r3, r1
 8007896:	6879      	ldr	r1, [r7, #4]
 8007898:	4099      	lsls	r1, r3
 800789a:	000b      	movs	r3, r1
 800789c:	431a      	orrs	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	621a      	str	r2, [r3, #32]
}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b006      	add	sp, #24
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2238      	movs	r2, #56	; 0x38
 80078ba:	5c9b      	ldrb	r3, [r3, r2]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e047      	b.n	8007954 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2238      	movs	r2, #56	; 0x38
 80078c8:	2101      	movs	r1, #1
 80078ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2239      	movs	r2, #57	; 0x39
 80078d0:	2102      	movs	r1, #2
 80078d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2270      	movs	r2, #112	; 0x70
 80078e8:	4393      	bics	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	2380      	movs	r3, #128	; 0x80
 8007904:	05db      	lsls	r3, r3, #23
 8007906:	429a      	cmp	r2, r3
 8007908:	d00e      	beq.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a13      	ldr	r2, [pc, #76]	; (800795c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a11      	ldr	r2, [pc, #68]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a10      	ldr	r2, [pc, #64]	; (8007964 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d10c      	bne.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2280      	movs	r2, #128	; 0x80
 800792c:	4393      	bics	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	4313      	orrs	r3, r2
 8007938:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2239      	movs	r2, #57	; 0x39
 8007946:	2101      	movs	r1, #1
 8007948:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2238      	movs	r2, #56	; 0x38
 800794e:	2100      	movs	r1, #0
 8007950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	0018      	movs	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	b004      	add	sp, #16
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40000400 	.word	0x40000400
 8007960:	40010800 	.word	0x40010800
 8007964:	40011400 	.word	0x40011400

08007968 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2238      	movs	r2, #56	; 0x38
 8007976:	5c9b      	ldrb	r3, [r3, r2]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d101      	bne.n	8007980 <HAL_TIMEx_RemapConfig+0x18>
 800797c:	2302      	movs	r3, #2
 800797e:	e00c      	b.n	800799a <HAL_TIMEx_RemapConfig+0x32>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2238      	movs	r2, #56	; 0x38
 8007984:	2101      	movs	r1, #1
 8007986:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2238      	movs	r2, #56	; 0x38
 8007994:	2100      	movs	r1, #0
 8007996:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	0018      	movs	r0, r3
 800799c:	46bd      	mov	sp, r7
 800799e:	b002      	add	sp, #8
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e044      	b.n	8007a40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d107      	bne.n	80079ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2274      	movs	r2, #116	; 0x74
 80079c2:	2100      	movs	r1, #0
 80079c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	0018      	movs	r0, r3
 80079ca:	f7fc ff31 	bl	8004830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2224      	movs	r2, #36	; 0x24
 80079d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2101      	movs	r1, #1
 80079e0:	438a      	bics	r2, r1
 80079e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	0018      	movs	r0, r3
 80079e8:	f000 f8d8 	bl	8007b9c <UART_SetConfig>
 80079ec:	0003      	movs	r3, r0
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e024      	b.n	8007a40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	0018      	movs	r0, r3
 8007a02:	f000 fb6b 	bl	80080dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	490d      	ldr	r1, [pc, #52]	; (8007a48 <HAL_UART_Init+0xa4>)
 8007a12:	400a      	ands	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	212a      	movs	r1, #42	; 0x2a
 8007a22:	438a      	bics	r2, r1
 8007a24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2101      	movs	r1, #1
 8007a32:	430a      	orrs	r2, r1
 8007a34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	0018      	movs	r0, r3
 8007a3a:	f000 fc03 	bl	8008244 <UART_CheckIdleState>
 8007a3e:	0003      	movs	r3, r0
}
 8007a40:	0018      	movs	r0, r3
 8007a42:	46bd      	mov	sp, r7
 8007a44:	b002      	add	sp, #8
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	ffffb7ff 	.word	0xffffb7ff

08007a4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	; 0x28
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	1dbb      	adds	r3, r7, #6
 8007a5a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	d000      	beq.n	8007a66 <HAL_UART_Transmit+0x1a>
 8007a64:	e095      	b.n	8007b92 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_UART_Transmit+0x28>
 8007a6c:	1dbb      	adds	r3, r7, #6
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e08d      	b.n	8007b94 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	2380      	movs	r3, #128	; 0x80
 8007a7e:	015b      	lsls	r3, r3, #5
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d109      	bne.n	8007a98 <HAL_UART_Transmit+0x4c>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d105      	bne.n	8007a98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	4013      	ands	r3, r2
 8007a92:	d001      	beq.n	8007a98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e07d      	b.n	8007b94 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2274      	movs	r2, #116	; 0x74
 8007a9c:	5c9b      	ldrb	r3, [r3, r2]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_UART_Transmit+0x5a>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e076      	b.n	8007b94 <HAL_UART_Transmit+0x148>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2274      	movs	r2, #116	; 0x74
 8007aaa:	2101      	movs	r1, #1
 8007aac:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2280      	movs	r2, #128	; 0x80
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2221      	movs	r2, #33	; 0x21
 8007aba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007abc:	f7fd f930 	bl	8004d20 <HAL_GetTick>
 8007ac0:	0003      	movs	r3, r0
 8007ac2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	1dba      	adds	r2, r7, #6
 8007ac8:	2150      	movs	r1, #80	; 0x50
 8007aca:	8812      	ldrh	r2, [r2, #0]
 8007acc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1dba      	adds	r2, r7, #6
 8007ad2:	2152      	movs	r1, #82	; 0x52
 8007ad4:	8812      	ldrh	r2, [r2, #0]
 8007ad6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	2380      	movs	r3, #128	; 0x80
 8007ade:	015b      	lsls	r3, r3, #5
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d108      	bne.n	8007af6 <HAL_UART_Transmit+0xaa>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	61bb      	str	r3, [r7, #24]
 8007af4:	e003      	b.n	8007afe <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2274      	movs	r2, #116	; 0x74
 8007b02:	2100      	movs	r1, #0
 8007b04:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007b06:	e02c      	b.n	8007b62 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	0013      	movs	r3, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	2180      	movs	r1, #128	; 0x80
 8007b16:	f000 fbdd 	bl	80082d4 <UART_WaitOnFlagUntilTimeout>
 8007b1a:	1e03      	subs	r3, r0, #0
 8007b1c:	d001      	beq.n	8007b22 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e038      	b.n	8007b94 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10b      	bne.n	8007b40 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	001a      	movs	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	05d2      	lsls	r2, r2, #23
 8007b34:	0dd2      	lsrs	r2, r2, #23
 8007b36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	3302      	adds	r3, #2
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	e007      	b.n	8007b50 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2252      	movs	r2, #82	; 0x52
 8007b54:	5a9b      	ldrh	r3, [r3, r2]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	b299      	uxth	r1, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2252      	movs	r2, #82	; 0x52
 8007b60:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2252      	movs	r2, #82	; 0x52
 8007b66:	5a9b      	ldrh	r3, [r3, r2]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1cc      	bne.n	8007b08 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	0013      	movs	r3, r2
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2140      	movs	r1, #64	; 0x40
 8007b7c:	f000 fbaa 	bl	80082d4 <UART_WaitOnFlagUntilTimeout>
 8007b80:	1e03      	subs	r3, r0, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e005      	b.n	8007b94 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e000      	b.n	8007b94 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8007b92:	2302      	movs	r3, #2
  }
}
 8007b94:	0018      	movs	r0, r3
 8007b96:	46bd      	mov	sp, r7
 8007b98:	b008      	add	sp, #32
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b9c:	b5b0      	push	{r4, r5, r7, lr}
 8007b9e:	b08e      	sub	sp, #56	; 0x38
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba4:	231a      	movs	r3, #26
 8007ba6:	2218      	movs	r2, #24
 8007ba8:	189b      	adds	r3, r3, r2
 8007baa:	19db      	adds	r3, r3, r7
 8007bac:	2200      	movs	r2, #0
 8007bae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4ac3      	ldr	r2, [pc, #780]	; (8007edc <UART_SetConfig+0x340>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	0019      	movs	r1, r3
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4abe      	ldr	r2, [pc, #760]	; (8007ee0 <UART_SetConfig+0x344>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	0019      	movs	r1, r3
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4ab8      	ldr	r2, [pc, #736]	; (8007ee4 <UART_SetConfig+0x348>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d004      	beq.n	8007c10 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	4ab4      	ldr	r2, [pc, #720]	; (8007ee8 <UART_SetConfig+0x34c>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	0019      	movs	r1, r3
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4ab0      	ldr	r2, [pc, #704]	; (8007eec <UART_SetConfig+0x350>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d131      	bne.n	8007c94 <UART_SetConfig+0xf8>
 8007c30:	4baf      	ldr	r3, [pc, #700]	; (8007ef0 <UART_SetConfig+0x354>)
 8007c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c34:	2203      	movs	r2, #3
 8007c36:	4013      	ands	r3, r2
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d01d      	beq.n	8007c78 <UART_SetConfig+0xdc>
 8007c3c:	d823      	bhi.n	8007c86 <UART_SetConfig+0xea>
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d00c      	beq.n	8007c5c <UART_SetConfig+0xc0>
 8007c42:	d820      	bhi.n	8007c86 <UART_SetConfig+0xea>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <UART_SetConfig+0xb2>
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d00e      	beq.n	8007c6a <UART_SetConfig+0xce>
 8007c4c:	e01b      	b.n	8007c86 <UART_SetConfig+0xea>
 8007c4e:	231b      	movs	r3, #27
 8007c50:	2218      	movs	r2, #24
 8007c52:	189b      	adds	r3, r3, r2
 8007c54:	19db      	adds	r3, r3, r7
 8007c56:	2201      	movs	r2, #1
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	e0b4      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007c5c:	231b      	movs	r3, #27
 8007c5e:	2218      	movs	r2, #24
 8007c60:	189b      	adds	r3, r3, r2
 8007c62:	19db      	adds	r3, r3, r7
 8007c64:	2202      	movs	r2, #2
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e0ad      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007c6a:	231b      	movs	r3, #27
 8007c6c:	2218      	movs	r2, #24
 8007c6e:	189b      	adds	r3, r3, r2
 8007c70:	19db      	adds	r3, r3, r7
 8007c72:	2204      	movs	r2, #4
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	e0a6      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007c78:	231b      	movs	r3, #27
 8007c7a:	2218      	movs	r2, #24
 8007c7c:	189b      	adds	r3, r3, r2
 8007c7e:	19db      	adds	r3, r3, r7
 8007c80:	2208      	movs	r2, #8
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	e09f      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007c86:	231b      	movs	r3, #27
 8007c88:	2218      	movs	r2, #24
 8007c8a:	189b      	adds	r3, r3, r2
 8007c8c:	19db      	adds	r3, r3, r7
 8007c8e:	2210      	movs	r2, #16
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	e098      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a96      	ldr	r2, [pc, #600]	; (8007ef4 <UART_SetConfig+0x358>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d131      	bne.n	8007d02 <UART_SetConfig+0x166>
 8007c9e:	4b94      	ldr	r3, [pc, #592]	; (8007ef0 <UART_SetConfig+0x354>)
 8007ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca2:	220c      	movs	r2, #12
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2b0c      	cmp	r3, #12
 8007ca8:	d01d      	beq.n	8007ce6 <UART_SetConfig+0x14a>
 8007caa:	d823      	bhi.n	8007cf4 <UART_SetConfig+0x158>
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d00c      	beq.n	8007cca <UART_SetConfig+0x12e>
 8007cb0:	d820      	bhi.n	8007cf4 <UART_SetConfig+0x158>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <UART_SetConfig+0x120>
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d00e      	beq.n	8007cd8 <UART_SetConfig+0x13c>
 8007cba:	e01b      	b.n	8007cf4 <UART_SetConfig+0x158>
 8007cbc:	231b      	movs	r3, #27
 8007cbe:	2218      	movs	r2, #24
 8007cc0:	189b      	adds	r3, r3, r2
 8007cc2:	19db      	adds	r3, r3, r7
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	e07d      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007cca:	231b      	movs	r3, #27
 8007ccc:	2218      	movs	r2, #24
 8007cce:	189b      	adds	r3, r3, r2
 8007cd0:	19db      	adds	r3, r3, r7
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	e076      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007cd8:	231b      	movs	r3, #27
 8007cda:	2218      	movs	r2, #24
 8007cdc:	189b      	adds	r3, r3, r2
 8007cde:	19db      	adds	r3, r3, r7
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	e06f      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007ce6:	231b      	movs	r3, #27
 8007ce8:	2218      	movs	r2, #24
 8007cea:	189b      	adds	r3, r3, r2
 8007cec:	19db      	adds	r3, r3, r7
 8007cee:	2208      	movs	r2, #8
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	e068      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007cf4:	231b      	movs	r3, #27
 8007cf6:	2218      	movs	r2, #24
 8007cf8:	189b      	adds	r3, r3, r2
 8007cfa:	19db      	adds	r3, r3, r7
 8007cfc:	2210      	movs	r2, #16
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	e061      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a7c      	ldr	r2, [pc, #496]	; (8007ef8 <UART_SetConfig+0x35c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d106      	bne.n	8007d1a <UART_SetConfig+0x17e>
 8007d0c:	231b      	movs	r3, #27
 8007d0e:	2218      	movs	r2, #24
 8007d10:	189b      	adds	r3, r3, r2
 8007d12:	19db      	adds	r3, r3, r7
 8007d14:	2200      	movs	r2, #0
 8007d16:	701a      	strb	r2, [r3, #0]
 8007d18:	e055      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a77      	ldr	r2, [pc, #476]	; (8007efc <UART_SetConfig+0x360>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d106      	bne.n	8007d32 <UART_SetConfig+0x196>
 8007d24:	231b      	movs	r3, #27
 8007d26:	2218      	movs	r2, #24
 8007d28:	189b      	adds	r3, r3, r2
 8007d2a:	19db      	adds	r3, r3, r7
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e049      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a6b      	ldr	r2, [pc, #428]	; (8007ee4 <UART_SetConfig+0x348>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d13e      	bne.n	8007dba <UART_SetConfig+0x21e>
 8007d3c:	4b6c      	ldr	r3, [pc, #432]	; (8007ef0 <UART_SetConfig+0x354>)
 8007d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d40:	23c0      	movs	r3, #192	; 0xc0
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	4013      	ands	r3, r2
 8007d46:	22c0      	movs	r2, #192	; 0xc0
 8007d48:	0112      	lsls	r2, r2, #4
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d027      	beq.n	8007d9e <UART_SetConfig+0x202>
 8007d4e:	22c0      	movs	r2, #192	; 0xc0
 8007d50:	0112      	lsls	r2, r2, #4
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d82a      	bhi.n	8007dac <UART_SetConfig+0x210>
 8007d56:	2280      	movs	r2, #128	; 0x80
 8007d58:	0112      	lsls	r2, r2, #4
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d011      	beq.n	8007d82 <UART_SetConfig+0x1e6>
 8007d5e:	2280      	movs	r2, #128	; 0x80
 8007d60:	0112      	lsls	r2, r2, #4
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d822      	bhi.n	8007dac <UART_SetConfig+0x210>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <UART_SetConfig+0x1d8>
 8007d6a:	2280      	movs	r2, #128	; 0x80
 8007d6c:	00d2      	lsls	r2, r2, #3
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00e      	beq.n	8007d90 <UART_SetConfig+0x1f4>
 8007d72:	e01b      	b.n	8007dac <UART_SetConfig+0x210>
 8007d74:	231b      	movs	r3, #27
 8007d76:	2218      	movs	r2, #24
 8007d78:	189b      	adds	r3, r3, r2
 8007d7a:	19db      	adds	r3, r3, r7
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	e021      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007d82:	231b      	movs	r3, #27
 8007d84:	2218      	movs	r2, #24
 8007d86:	189b      	adds	r3, r3, r2
 8007d88:	19db      	adds	r3, r3, r7
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e01a      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007d90:	231b      	movs	r3, #27
 8007d92:	2218      	movs	r2, #24
 8007d94:	189b      	adds	r3, r3, r2
 8007d96:	19db      	adds	r3, r3, r7
 8007d98:	2204      	movs	r2, #4
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	e013      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007d9e:	231b      	movs	r3, #27
 8007da0:	2218      	movs	r2, #24
 8007da2:	189b      	adds	r3, r3, r2
 8007da4:	19db      	adds	r3, r3, r7
 8007da6:	2208      	movs	r2, #8
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	e00c      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007dac:	231b      	movs	r3, #27
 8007dae:	2218      	movs	r2, #24
 8007db0:	189b      	adds	r3, r3, r2
 8007db2:	19db      	adds	r3, r3, r7
 8007db4:	2210      	movs	r2, #16
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e005      	b.n	8007dc6 <UART_SetConfig+0x22a>
 8007dba:	231b      	movs	r3, #27
 8007dbc:	2218      	movs	r2, #24
 8007dbe:	189b      	adds	r3, r3, r2
 8007dc0:	19db      	adds	r3, r3, r7
 8007dc2:	2210      	movs	r2, #16
 8007dc4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a46      	ldr	r2, [pc, #280]	; (8007ee4 <UART_SetConfig+0x348>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d000      	beq.n	8007dd2 <UART_SetConfig+0x236>
 8007dd0:	e09a      	b.n	8007f08 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dd2:	231b      	movs	r3, #27
 8007dd4:	2218      	movs	r2, #24
 8007dd6:	189b      	adds	r3, r3, r2
 8007dd8:	19db      	adds	r3, r3, r7
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d01d      	beq.n	8007e1c <UART_SetConfig+0x280>
 8007de0:	dc20      	bgt.n	8007e24 <UART_SetConfig+0x288>
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d015      	beq.n	8007e12 <UART_SetConfig+0x276>
 8007de6:	dc1d      	bgt.n	8007e24 <UART_SetConfig+0x288>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <UART_SetConfig+0x256>
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d005      	beq.n	8007dfc <UART_SetConfig+0x260>
 8007df0:	e018      	b.n	8007e24 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007df2:	f7fe fd3f 	bl	8006874 <HAL_RCC_GetPCLK1Freq>
 8007df6:	0003      	movs	r3, r0
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007dfa:	e01c      	b.n	8007e36 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dfc:	4b3c      	ldr	r3, [pc, #240]	; (8007ef0 <UART_SetConfig+0x354>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2210      	movs	r2, #16
 8007e02:	4013      	ands	r3, r2
 8007e04:	d002      	beq.n	8007e0c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007e06:	4b3e      	ldr	r3, [pc, #248]	; (8007f00 <UART_SetConfig+0x364>)
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e0a:	e014      	b.n	8007e36 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007e0c:	4b3d      	ldr	r3, [pc, #244]	; (8007f04 <UART_SetConfig+0x368>)
 8007e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e10:	e011      	b.n	8007e36 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e12:	f7fe fc7f 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 8007e16:	0003      	movs	r3, r0
 8007e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e1a:	e00c      	b.n	8007e36 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1c:	2380      	movs	r3, #128	; 0x80
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e22:	e008      	b.n	8007e36 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007e28:	231a      	movs	r3, #26
 8007e2a:	2218      	movs	r2, #24
 8007e2c:	189b      	adds	r3, r3, r2
 8007e2e:	19db      	adds	r3, r3, r7
 8007e30:	2201      	movs	r2, #1
 8007e32:	701a      	strb	r2, [r3, #0]
        break;
 8007e34:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d100      	bne.n	8007e3e <UART_SetConfig+0x2a2>
 8007e3c:	e134      	b.n	80080a8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	0013      	movs	r3, r2
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	189b      	adds	r3, r3, r2
 8007e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d305      	bcc.n	8007e5a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d906      	bls.n	8007e68 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007e5a:	231a      	movs	r3, #26
 8007e5c:	2218      	movs	r2, #24
 8007e5e:	189b      	adds	r3, r3, r2
 8007e60:	19db      	adds	r3, r3, r7
 8007e62:	2201      	movs	r2, #1
 8007e64:	701a      	strb	r2, [r3, #0]
 8007e66:	e11f      	b.n	80080a8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	6939      	ldr	r1, [r7, #16]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	000b      	movs	r3, r1
 8007e76:	0e1b      	lsrs	r3, r3, #24
 8007e78:	0010      	movs	r0, r2
 8007e7a:	0205      	lsls	r5, r0, #8
 8007e7c:	431d      	orrs	r5, r3
 8007e7e:	000b      	movs	r3, r1
 8007e80:	021c      	lsls	r4, r3, #8
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	085b      	lsrs	r3, r3, #1
 8007e88:	60bb      	str	r3, [r7, #8]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	68b8      	ldr	r0, [r7, #8]
 8007e90:	68f9      	ldr	r1, [r7, #12]
 8007e92:	1900      	adds	r0, r0, r4
 8007e94:	4169      	adcs	r1, r5
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	607b      	str	r3, [r7, #4]
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f7f8 fb3a 	bl	800051c <__aeabi_uldivmod>
 8007ea8:	0002      	movs	r2, r0
 8007eaa:	000b      	movs	r3, r1
 8007eac:	0013      	movs	r3, r2
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eb2:	23c0      	movs	r3, #192	; 0xc0
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d309      	bcc.n	8007ece <UART_SetConfig+0x332>
 8007eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ebc:	2380      	movs	r3, #128	; 0x80
 8007ebe:	035b      	lsls	r3, r3, #13
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d204      	bcs.n	8007ece <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eca:	60da      	str	r2, [r3, #12]
 8007ecc:	e0ec      	b.n	80080a8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8007ece:	231a      	movs	r3, #26
 8007ed0:	2218      	movs	r2, #24
 8007ed2:	189b      	adds	r3, r3, r2
 8007ed4:	19db      	adds	r3, r3, r7
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	e0e5      	b.n	80080a8 <UART_SetConfig+0x50c>
 8007edc:	efff69f3 	.word	0xefff69f3
 8007ee0:	ffffcfff 	.word	0xffffcfff
 8007ee4:	40004800 	.word	0x40004800
 8007ee8:	fffff4ff 	.word	0xfffff4ff
 8007eec:	40013800 	.word	0x40013800
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	40004400 	.word	0x40004400
 8007ef8:	40004c00 	.word	0x40004c00
 8007efc:	40005000 	.word	0x40005000
 8007f00:	003d0900 	.word	0x003d0900
 8007f04:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	2380      	movs	r3, #128	; 0x80
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d000      	beq.n	8007f16 <UART_SetConfig+0x37a>
 8007f14:	e071      	b.n	8007ffa <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007f16:	231b      	movs	r3, #27
 8007f18:	2218      	movs	r2, #24
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	19db      	adds	r3, r3, r7
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d822      	bhi.n	8007f6a <UART_SetConfig+0x3ce>
 8007f24:	009a      	lsls	r2, r3, #2
 8007f26:	4b68      	ldr	r3, [pc, #416]	; (80080c8 <UART_SetConfig+0x52c>)
 8007f28:	18d3      	adds	r3, r2, r3
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f2e:	f7fe fca1 	bl	8006874 <HAL_RCC_GetPCLK1Freq>
 8007f32:	0003      	movs	r3, r0
 8007f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f36:	e021      	b.n	8007f7c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f38:	f7fe fcb2 	bl	80068a0 <HAL_RCC_GetPCLK2Freq>
 8007f3c:	0003      	movs	r3, r0
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f40:	e01c      	b.n	8007f7c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f42:	4b62      	ldr	r3, [pc, #392]	; (80080cc <UART_SetConfig+0x530>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2210      	movs	r2, #16
 8007f48:	4013      	ands	r3, r2
 8007f4a:	d002      	beq.n	8007f52 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007f4c:	4b60      	ldr	r3, [pc, #384]	; (80080d0 <UART_SetConfig+0x534>)
 8007f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f50:	e014      	b.n	8007f7c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007f52:	4b60      	ldr	r3, [pc, #384]	; (80080d4 <UART_SetConfig+0x538>)
 8007f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f56:	e011      	b.n	8007f7c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f58:	f7fe fbdc 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 8007f5c:	0003      	movs	r3, r0
 8007f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f60:	e00c      	b.n	8007f7c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f62:	2380      	movs	r3, #128	; 0x80
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f68:	e008      	b.n	8007f7c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007f6e:	231a      	movs	r3, #26
 8007f70:	2218      	movs	r2, #24
 8007f72:	189b      	adds	r3, r3, r2
 8007f74:	19db      	adds	r3, r3, r7
 8007f76:	2201      	movs	r2, #1
 8007f78:	701a      	strb	r2, [r3, #0]
        break;
 8007f7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d100      	bne.n	8007f84 <UART_SetConfig+0x3e8>
 8007f82:	e091      	b.n	80080a8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	005a      	lsls	r2, r3, #1
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	085b      	lsrs	r3, r3, #1
 8007f8e:	18d2      	adds	r2, r2, r3
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	0019      	movs	r1, r3
 8007f96:	0010      	movs	r0, r2
 8007f98:	f7f8 f8d2 	bl	8000140 <__udivsi3>
 8007f9c:	0003      	movs	r3, r0
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	2b0f      	cmp	r3, #15
 8007fa6:	d921      	bls.n	8007fec <UART_SetConfig+0x450>
 8007fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007faa:	2380      	movs	r3, #128	; 0x80
 8007fac:	025b      	lsls	r3, r3, #9
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d21c      	bcs.n	8007fec <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	200e      	movs	r0, #14
 8007fb8:	2418      	movs	r4, #24
 8007fba:	1903      	adds	r3, r0, r4
 8007fbc:	19db      	adds	r3, r3, r7
 8007fbe:	210f      	movs	r1, #15
 8007fc0:	438a      	bics	r2, r1
 8007fc2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2207      	movs	r2, #7
 8007fcc:	4013      	ands	r3, r2
 8007fce:	b299      	uxth	r1, r3
 8007fd0:	1903      	adds	r3, r0, r4
 8007fd2:	19db      	adds	r3, r3, r7
 8007fd4:	1902      	adds	r2, r0, r4
 8007fd6:	19d2      	adds	r2, r2, r7
 8007fd8:	8812      	ldrh	r2, [r2, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	1902      	adds	r2, r0, r4
 8007fe4:	19d2      	adds	r2, r2, r7
 8007fe6:	8812      	ldrh	r2, [r2, #0]
 8007fe8:	60da      	str	r2, [r3, #12]
 8007fea:	e05d      	b.n	80080a8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fec:	231a      	movs	r3, #26
 8007fee:	2218      	movs	r2, #24
 8007ff0:	189b      	adds	r3, r3, r2
 8007ff2:	19db      	adds	r3, r3, r7
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	e056      	b.n	80080a8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ffa:	231b      	movs	r3, #27
 8007ffc:	2218      	movs	r2, #24
 8007ffe:	189b      	adds	r3, r3, r2
 8008000:	19db      	adds	r3, r3, r7
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b08      	cmp	r3, #8
 8008006:	d822      	bhi.n	800804e <UART_SetConfig+0x4b2>
 8008008:	009a      	lsls	r2, r3, #2
 800800a:	4b33      	ldr	r3, [pc, #204]	; (80080d8 <UART_SetConfig+0x53c>)
 800800c:	18d3      	adds	r3, r2, r3
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008012:	f7fe fc2f 	bl	8006874 <HAL_RCC_GetPCLK1Freq>
 8008016:	0003      	movs	r3, r0
 8008018:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800801a:	e021      	b.n	8008060 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800801c:	f7fe fc40 	bl	80068a0 <HAL_RCC_GetPCLK2Freq>
 8008020:	0003      	movs	r3, r0
 8008022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008024:	e01c      	b.n	8008060 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008026:	4b29      	ldr	r3, [pc, #164]	; (80080cc <UART_SetConfig+0x530>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2210      	movs	r2, #16
 800802c:	4013      	ands	r3, r2
 800802e:	d002      	beq.n	8008036 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008030:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <UART_SetConfig+0x534>)
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008034:	e014      	b.n	8008060 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8008036:	4b27      	ldr	r3, [pc, #156]	; (80080d4 <UART_SetConfig+0x538>)
 8008038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800803a:	e011      	b.n	8008060 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800803c:	f7fe fb6a 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 8008040:	0003      	movs	r3, r0
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008044:	e00c      	b.n	8008060 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008046:	2380      	movs	r3, #128	; 0x80
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800804c:	e008      	b.n	8008060 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008052:	231a      	movs	r3, #26
 8008054:	2218      	movs	r2, #24
 8008056:	189b      	adds	r3, r3, r2
 8008058:	19db      	adds	r3, r3, r7
 800805a:	2201      	movs	r2, #1
 800805c:	701a      	strb	r2, [r3, #0]
        break;
 800805e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d020      	beq.n	80080a8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	085a      	lsrs	r2, r3, #1
 800806c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806e:	18d2      	adds	r2, r2, r3
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	0019      	movs	r1, r3
 8008076:	0010      	movs	r0, r2
 8008078:	f7f8 f862 	bl	8000140 <__udivsi3>
 800807c:	0003      	movs	r3, r0
 800807e:	b29b      	uxth	r3, r3
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	2b0f      	cmp	r3, #15
 8008086:	d909      	bls.n	800809c <UART_SetConfig+0x500>
 8008088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800808a:	2380      	movs	r3, #128	; 0x80
 800808c:	025b      	lsls	r3, r3, #9
 800808e:	429a      	cmp	r2, r3
 8008090:	d204      	bcs.n	800809c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	e005      	b.n	80080a8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800809c:	231a      	movs	r3, #26
 800809e:	2218      	movs	r2, #24
 80080a0:	189b      	adds	r3, r3, r2
 80080a2:	19db      	adds	r3, r3, r7
 80080a4:	2201      	movs	r2, #1
 80080a6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	2200      	movs	r2, #0
 80080ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	2200      	movs	r2, #0
 80080b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80080b4:	231a      	movs	r3, #26
 80080b6:	2218      	movs	r2, #24
 80080b8:	189b      	adds	r3, r3, r2
 80080ba:	19db      	adds	r3, r3, r7
 80080bc:	781b      	ldrb	r3, [r3, #0]
}
 80080be:	0018      	movs	r0, r3
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b00e      	add	sp, #56	; 0x38
 80080c4:	bdb0      	pop	{r4, r5, r7, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	0800b5f8 	.word	0x0800b5f8
 80080cc:	40021000 	.word	0x40021000
 80080d0:	003d0900 	.word	0x003d0900
 80080d4:	00f42400 	.word	0x00f42400
 80080d8:	0800b61c 	.word	0x0800b61c

080080dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2201      	movs	r2, #1
 80080ea:	4013      	ands	r3, r2
 80080ec:	d00b      	beq.n	8008106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	4a4a      	ldr	r2, [pc, #296]	; (8008220 <UART_AdvFeatureConfig+0x144>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	0019      	movs	r1, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	2202      	movs	r2, #2
 800810c:	4013      	ands	r3, r2
 800810e:	d00b      	beq.n	8008128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	4a43      	ldr	r2, [pc, #268]	; (8008224 <UART_AdvFeatureConfig+0x148>)
 8008118:	4013      	ands	r3, r2
 800811a:	0019      	movs	r1, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	2204      	movs	r2, #4
 800812e:	4013      	ands	r3, r2
 8008130:	d00b      	beq.n	800814a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	4a3b      	ldr	r2, [pc, #236]	; (8008228 <UART_AdvFeatureConfig+0x14c>)
 800813a:	4013      	ands	r3, r2
 800813c:	0019      	movs	r1, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	2208      	movs	r2, #8
 8008150:	4013      	ands	r3, r2
 8008152:	d00b      	beq.n	800816c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	4a34      	ldr	r2, [pc, #208]	; (800822c <UART_AdvFeatureConfig+0x150>)
 800815c:	4013      	ands	r3, r2
 800815e:	0019      	movs	r1, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	2210      	movs	r2, #16
 8008172:	4013      	ands	r3, r2
 8008174:	d00b      	beq.n	800818e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	4a2c      	ldr	r2, [pc, #176]	; (8008230 <UART_AdvFeatureConfig+0x154>)
 800817e:	4013      	ands	r3, r2
 8008180:	0019      	movs	r1, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2220      	movs	r2, #32
 8008194:	4013      	ands	r3, r2
 8008196:	d00b      	beq.n	80081b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	4a25      	ldr	r2, [pc, #148]	; (8008234 <UART_AdvFeatureConfig+0x158>)
 80081a0:	4013      	ands	r3, r2
 80081a2:	0019      	movs	r1, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	2240      	movs	r2, #64	; 0x40
 80081b6:	4013      	ands	r3, r2
 80081b8:	d01d      	beq.n	80081f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4a1d      	ldr	r2, [pc, #116]	; (8008238 <UART_AdvFeatureConfig+0x15c>)
 80081c2:	4013      	ands	r3, r2
 80081c4:	0019      	movs	r1, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081d6:	2380      	movs	r3, #128	; 0x80
 80081d8:	035b      	lsls	r3, r3, #13
 80081da:	429a      	cmp	r2, r3
 80081dc:	d10b      	bne.n	80081f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	4a15      	ldr	r2, [pc, #84]	; (800823c <UART_AdvFeatureConfig+0x160>)
 80081e6:	4013      	ands	r3, r2
 80081e8:	0019      	movs	r1, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2280      	movs	r2, #128	; 0x80
 80081fc:	4013      	ands	r3, r2
 80081fe:	d00b      	beq.n	8008218 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4a0e      	ldr	r2, [pc, #56]	; (8008240 <UART_AdvFeatureConfig+0x164>)
 8008208:	4013      	ands	r3, r2
 800820a:	0019      	movs	r1, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	605a      	str	r2, [r3, #4]
  }
}
 8008218:	46c0      	nop			; (mov r8, r8)
 800821a:	46bd      	mov	sp, r7
 800821c:	b002      	add	sp, #8
 800821e:	bd80      	pop	{r7, pc}
 8008220:	fffdffff 	.word	0xfffdffff
 8008224:	fffeffff 	.word	0xfffeffff
 8008228:	fffbffff 	.word	0xfffbffff
 800822c:	ffff7fff 	.word	0xffff7fff
 8008230:	ffffefff 	.word	0xffffefff
 8008234:	ffffdfff 	.word	0xffffdfff
 8008238:	ffefffff 	.word	0xffefffff
 800823c:	ff9fffff 	.word	0xff9fffff
 8008240:	fff7ffff 	.word	0xfff7ffff

08008244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af02      	add	r7, sp, #8
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2280      	movs	r2, #128	; 0x80
 8008250:	2100      	movs	r1, #0
 8008252:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008254:	f7fc fd64 	bl	8004d20 <HAL_GetTick>
 8008258:	0003      	movs	r3, r0
 800825a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2208      	movs	r2, #8
 8008264:	4013      	ands	r3, r2
 8008266:	2b08      	cmp	r3, #8
 8008268:	d10c      	bne.n	8008284 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2280      	movs	r2, #128	; 0x80
 800826e:	0391      	lsls	r1, r2, #14
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	4a17      	ldr	r2, [pc, #92]	; (80082d0 <UART_CheckIdleState+0x8c>)
 8008274:	9200      	str	r2, [sp, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	f000 f82c 	bl	80082d4 <UART_WaitOnFlagUntilTimeout>
 800827c:	1e03      	subs	r3, r0, #0
 800827e:	d001      	beq.n	8008284 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e021      	b.n	80082c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2204      	movs	r2, #4
 800828c:	4013      	ands	r3, r2
 800828e:	2b04      	cmp	r3, #4
 8008290:	d10c      	bne.n	80082ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2280      	movs	r2, #128	; 0x80
 8008296:	03d1      	lsls	r1, r2, #15
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4a0d      	ldr	r2, [pc, #52]	; (80082d0 <UART_CheckIdleState+0x8c>)
 800829c:	9200      	str	r2, [sp, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	f000 f818 	bl	80082d4 <UART_WaitOnFlagUntilTimeout>
 80082a4:	1e03      	subs	r3, r0, #0
 80082a6:	d001      	beq.n	80082ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e00d      	b.n	80082c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2274      	movs	r2, #116	; 0x74
 80082c2:	2100      	movs	r1, #0
 80082c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	0018      	movs	r0, r3
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b004      	add	sp, #16
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	01ffffff 	.word	0x01ffffff

080082d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b094      	sub	sp, #80	; 0x50
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	1dfb      	adds	r3, r7, #7
 80082e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e4:	e0a3      	b.n	800842e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082e8:	3301      	adds	r3, #1
 80082ea:	d100      	bne.n	80082ee <UART_WaitOnFlagUntilTimeout+0x1a>
 80082ec:	e09f      	b.n	800842e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ee:	f7fc fd17 	bl	8004d20 <HAL_GetTick>
 80082f2:	0002      	movs	r2, r0
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d302      	bcc.n	8008304 <UART_WaitOnFlagUntilTimeout+0x30>
 80082fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008300:	2b00      	cmp	r3, #0
 8008302:	d13d      	bne.n	8008380 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008304:	f3ef 8310 	mrs	r3, PRIMASK
 8008308:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800830c:	647b      	str	r3, [r7, #68]	; 0x44
 800830e:	2301      	movs	r3, #1
 8008310:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	f383 8810 	msr	PRIMASK, r3
}
 8008318:	46c0      	nop			; (mov r8, r8)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	494c      	ldr	r1, [pc, #304]	; (8008458 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008326:	400a      	ands	r2, r1
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800832c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	f383 8810 	msr	PRIMASK, r3
}
 8008334:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008336:	f3ef 8310 	mrs	r3, PRIMASK
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800833c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833e:	643b      	str	r3, [r7, #64]	; 0x40
 8008340:	2301      	movs	r3, #1
 8008342:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	f383 8810 	msr	PRIMASK, r3
}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2101      	movs	r1, #1
 8008358:	438a      	bics	r2, r1
 800835a:	609a      	str	r2, [r3, #8]
 800835c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800835e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008362:	f383 8810 	msr	PRIMASK, r3
}
 8008366:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2220      	movs	r2, #32
 800836c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2274      	movs	r2, #116	; 0x74
 8008378:	2100      	movs	r1, #0
 800837a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e067      	b.n	8008450 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2204      	movs	r2, #4
 8008388:	4013      	ands	r3, r2
 800838a:	d050      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69da      	ldr	r2, [r3, #28]
 8008392:	2380      	movs	r3, #128	; 0x80
 8008394:	011b      	lsls	r3, r3, #4
 8008396:	401a      	ands	r2, r3
 8008398:	2380      	movs	r3, #128	; 0x80
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	429a      	cmp	r2, r3
 800839e:	d146      	bne.n	800842e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2280      	movs	r2, #128	; 0x80
 80083a6:	0112      	lsls	r2, r2, #4
 80083a8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083aa:	f3ef 8310 	mrs	r3, PRIMASK
 80083ae:	613b      	str	r3, [r7, #16]
  return(result);
 80083b0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083b4:	2301      	movs	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f383 8810 	msr	PRIMASK, r3
}
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4923      	ldr	r1, [pc, #140]	; (8008458 <UART_WaitOnFlagUntilTimeout+0x184>)
 80083cc:	400a      	ands	r2, r1
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	f383 8810 	msr	PRIMASK, r3
}
 80083da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083dc:	f3ef 8310 	mrs	r3, PRIMASK
 80083e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80083e2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80083e6:	2301      	movs	r3, #1
 80083e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	f383 8810 	msr	PRIMASK, r3
}
 80083f0:	46c0      	nop			; (mov r8, r8)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2101      	movs	r1, #1
 80083fe:	438a      	bics	r2, r1
 8008400:	609a      	str	r2, [r3, #8]
 8008402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	f383 8810 	msr	PRIMASK, r3
}
 800840c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2220      	movs	r2, #32
 8008412:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2280      	movs	r2, #128	; 0x80
 800841e:	2120      	movs	r1, #32
 8008420:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2274      	movs	r2, #116	; 0x74
 8008426:	2100      	movs	r1, #0
 8008428:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e010      	b.n	8008450 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	4013      	ands	r3, r2
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	425a      	negs	r2, r3
 800843e:	4153      	adcs	r3, r2
 8008440:	b2db      	uxtb	r3, r3
 8008442:	001a      	movs	r2, r3
 8008444:	1dfb      	adds	r3, r7, #7
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d100      	bne.n	800844e <UART_WaitOnFlagUntilTimeout+0x17a>
 800844c:	e74b      	b.n	80082e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	0018      	movs	r0, r3
 8008452:	46bd      	mov	sp, r7
 8008454:	b014      	add	sp, #80	; 0x50
 8008456:	bd80      	pop	{r7, pc}
 8008458:	fffffe5f 	.word	0xfffffe5f

0800845c <__errno>:
 800845c:	4b01      	ldr	r3, [pc, #4]	; (8008464 <__errno+0x8>)
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	4770      	bx	lr
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	20000014 	.word	0x20000014

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	2600      	movs	r6, #0
 800846c:	4d0c      	ldr	r5, [pc, #48]	; (80084a0 <__libc_init_array+0x38>)
 800846e:	4c0d      	ldr	r4, [pc, #52]	; (80084a4 <__libc_init_array+0x3c>)
 8008470:	1b64      	subs	r4, r4, r5
 8008472:	10a4      	asrs	r4, r4, #2
 8008474:	42a6      	cmp	r6, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	2600      	movs	r6, #0
 800847a:	f002 ffbd 	bl	800b3f8 <_init>
 800847e:	4d0a      	ldr	r5, [pc, #40]	; (80084a8 <__libc_init_array+0x40>)
 8008480:	4c0a      	ldr	r4, [pc, #40]	; (80084ac <__libc_init_array+0x44>)
 8008482:	1b64      	subs	r4, r4, r5
 8008484:	10a4      	asrs	r4, r4, #2
 8008486:	42a6      	cmp	r6, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	00b3      	lsls	r3, r6, #2
 800848e:	58eb      	ldr	r3, [r5, r3]
 8008490:	4798      	blx	r3
 8008492:	3601      	adds	r6, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	00b3      	lsls	r3, r6, #2
 8008498:	58eb      	ldr	r3, [r5, r3]
 800849a:	4798      	blx	r3
 800849c:	3601      	adds	r6, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	0800ba24 	.word	0x0800ba24
 80084a4:	0800ba24 	.word	0x0800ba24
 80084a8:	0800ba24 	.word	0x0800ba24
 80084ac:	0800ba28 	.word	0x0800ba28

080084b0 <memcpy>:
 80084b0:	2300      	movs	r3, #0
 80084b2:	b510      	push	{r4, lr}
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d100      	bne.n	80084ba <memcpy+0xa>
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	5ccc      	ldrb	r4, [r1, r3]
 80084bc:	54c4      	strb	r4, [r0, r3]
 80084be:	3301      	adds	r3, #1
 80084c0:	e7f8      	b.n	80084b4 <memcpy+0x4>

080084c2 <memset>:
 80084c2:	0003      	movs	r3, r0
 80084c4:	1882      	adds	r2, r0, r2
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d100      	bne.n	80084cc <memset+0xa>
 80084ca:	4770      	bx	lr
 80084cc:	7019      	strb	r1, [r3, #0]
 80084ce:	3301      	adds	r3, #1
 80084d0:	e7f9      	b.n	80084c6 <memset+0x4>

080084d2 <__cvt>:
 80084d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084d4:	001e      	movs	r6, r3
 80084d6:	2300      	movs	r3, #0
 80084d8:	0014      	movs	r4, r2
 80084da:	b08b      	sub	sp, #44	; 0x2c
 80084dc:	429e      	cmp	r6, r3
 80084de:	da04      	bge.n	80084ea <__cvt+0x18>
 80084e0:	2180      	movs	r1, #128	; 0x80
 80084e2:	0609      	lsls	r1, r1, #24
 80084e4:	1873      	adds	r3, r6, r1
 80084e6:	001e      	movs	r6, r3
 80084e8:	232d      	movs	r3, #45	; 0x2d
 80084ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084ec:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80084ee:	7013      	strb	r3, [r2, #0]
 80084f0:	2320      	movs	r3, #32
 80084f2:	2203      	movs	r2, #3
 80084f4:	439f      	bics	r7, r3
 80084f6:	2f46      	cmp	r7, #70	; 0x46
 80084f8:	d007      	beq.n	800850a <__cvt+0x38>
 80084fa:	003b      	movs	r3, r7
 80084fc:	3b45      	subs	r3, #69	; 0x45
 80084fe:	4259      	negs	r1, r3
 8008500:	414b      	adcs	r3, r1
 8008502:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008504:	3a01      	subs	r2, #1
 8008506:	18cb      	adds	r3, r1, r3
 8008508:	9310      	str	r3, [sp, #64]	; 0x40
 800850a:	ab09      	add	r3, sp, #36	; 0x24
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	ab08      	add	r3, sp, #32
 8008510:	9303      	str	r3, [sp, #12]
 8008512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008514:	9200      	str	r2, [sp, #0]
 8008516:	9302      	str	r3, [sp, #8]
 8008518:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800851a:	0022      	movs	r2, r4
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	0033      	movs	r3, r6
 8008520:	f000 fcf2 	bl	8008f08 <_dtoa_r>
 8008524:	0005      	movs	r5, r0
 8008526:	2f47      	cmp	r7, #71	; 0x47
 8008528:	d102      	bne.n	8008530 <__cvt+0x5e>
 800852a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800852c:	07db      	lsls	r3, r3, #31
 800852e:	d528      	bpl.n	8008582 <__cvt+0xb0>
 8008530:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008532:	18eb      	adds	r3, r5, r3
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	2f46      	cmp	r7, #70	; 0x46
 8008538:	d114      	bne.n	8008564 <__cvt+0x92>
 800853a:	782b      	ldrb	r3, [r5, #0]
 800853c:	2b30      	cmp	r3, #48	; 0x30
 800853e:	d10c      	bne.n	800855a <__cvt+0x88>
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	0020      	movs	r0, r4
 8008546:	0031      	movs	r1, r6
 8008548:	f7f7 ff80 	bl	800044c <__aeabi_dcmpeq>
 800854c:	2800      	cmp	r0, #0
 800854e:	d104      	bne.n	800855a <__cvt+0x88>
 8008550:	2301      	movs	r3, #1
 8008552:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800855c:	9a07      	ldr	r2, [sp, #28]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	18d3      	adds	r3, r2, r3
 8008562:	9307      	str	r3, [sp, #28]
 8008564:	2200      	movs	r2, #0
 8008566:	2300      	movs	r3, #0
 8008568:	0020      	movs	r0, r4
 800856a:	0031      	movs	r1, r6
 800856c:	f7f7 ff6e 	bl	800044c <__aeabi_dcmpeq>
 8008570:	2800      	cmp	r0, #0
 8008572:	d001      	beq.n	8008578 <__cvt+0xa6>
 8008574:	9b07      	ldr	r3, [sp, #28]
 8008576:	9309      	str	r3, [sp, #36]	; 0x24
 8008578:	2230      	movs	r2, #48	; 0x30
 800857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857c:	9907      	ldr	r1, [sp, #28]
 800857e:	428b      	cmp	r3, r1
 8008580:	d306      	bcc.n	8008590 <__cvt+0xbe>
 8008582:	0028      	movs	r0, r5
 8008584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008586:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008588:	1b5b      	subs	r3, r3, r5
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	b00b      	add	sp, #44	; 0x2c
 800858e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008590:	1c59      	adds	r1, r3, #1
 8008592:	9109      	str	r1, [sp, #36]	; 0x24
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e7f0      	b.n	800857a <__cvt+0xa8>

08008598 <__exponent>:
 8008598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800859a:	1c83      	adds	r3, r0, #2
 800859c:	b087      	sub	sp, #28
 800859e:	9303      	str	r3, [sp, #12]
 80085a0:	0005      	movs	r5, r0
 80085a2:	000c      	movs	r4, r1
 80085a4:	232b      	movs	r3, #43	; 0x2b
 80085a6:	7002      	strb	r2, [r0, #0]
 80085a8:	2900      	cmp	r1, #0
 80085aa:	da01      	bge.n	80085b0 <__exponent+0x18>
 80085ac:	424c      	negs	r4, r1
 80085ae:	3302      	adds	r3, #2
 80085b0:	706b      	strb	r3, [r5, #1]
 80085b2:	2c09      	cmp	r4, #9
 80085b4:	dd31      	ble.n	800861a <__exponent+0x82>
 80085b6:	270a      	movs	r7, #10
 80085b8:	ab04      	add	r3, sp, #16
 80085ba:	1dde      	adds	r6, r3, #7
 80085bc:	0020      	movs	r0, r4
 80085be:	0039      	movs	r1, r7
 80085c0:	9601      	str	r6, [sp, #4]
 80085c2:	f7f7 ff2d 	bl	8000420 <__aeabi_idivmod>
 80085c6:	3e01      	subs	r6, #1
 80085c8:	3130      	adds	r1, #48	; 0x30
 80085ca:	0020      	movs	r0, r4
 80085cc:	7031      	strb	r1, [r6, #0]
 80085ce:	0039      	movs	r1, r7
 80085d0:	9402      	str	r4, [sp, #8]
 80085d2:	f7f7 fe3f 	bl	8000254 <__divsi3>
 80085d6:	9b02      	ldr	r3, [sp, #8]
 80085d8:	0004      	movs	r4, r0
 80085da:	2b63      	cmp	r3, #99	; 0x63
 80085dc:	dcee      	bgt.n	80085bc <__exponent+0x24>
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	3430      	adds	r4, #48	; 0x30
 80085e2:	1e9a      	subs	r2, r3, #2
 80085e4:	0013      	movs	r3, r2
 80085e6:	9903      	ldr	r1, [sp, #12]
 80085e8:	7014      	strb	r4, [r2, #0]
 80085ea:	a804      	add	r0, sp, #16
 80085ec:	3007      	adds	r0, #7
 80085ee:	4298      	cmp	r0, r3
 80085f0:	d80e      	bhi.n	8008610 <__exponent+0x78>
 80085f2:	ab04      	add	r3, sp, #16
 80085f4:	3307      	adds	r3, #7
 80085f6:	2000      	movs	r0, #0
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d804      	bhi.n	8008606 <__exponent+0x6e>
 80085fc:	ab04      	add	r3, sp, #16
 80085fe:	3009      	adds	r0, #9
 8008600:	18c0      	adds	r0, r0, r3
 8008602:	9b01      	ldr	r3, [sp, #4]
 8008604:	1ac0      	subs	r0, r0, r3
 8008606:	9b03      	ldr	r3, [sp, #12]
 8008608:	1818      	adds	r0, r3, r0
 800860a:	1b40      	subs	r0, r0, r5
 800860c:	b007      	add	sp, #28
 800860e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008610:	7818      	ldrb	r0, [r3, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	7008      	strb	r0, [r1, #0]
 8008616:	3101      	adds	r1, #1
 8008618:	e7e7      	b.n	80085ea <__exponent+0x52>
 800861a:	2330      	movs	r3, #48	; 0x30
 800861c:	18e4      	adds	r4, r4, r3
 800861e:	70ab      	strb	r3, [r5, #2]
 8008620:	1d28      	adds	r0, r5, #4
 8008622:	70ec      	strb	r4, [r5, #3]
 8008624:	e7f1      	b.n	800860a <__exponent+0x72>
	...

08008628 <_printf_float>:
 8008628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862a:	b095      	sub	sp, #84	; 0x54
 800862c:	000c      	movs	r4, r1
 800862e:	9209      	str	r2, [sp, #36]	; 0x24
 8008630:	001e      	movs	r6, r3
 8008632:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008634:	0007      	movs	r7, r0
 8008636:	f001 fa81 	bl	8009b3c <_localeconv_r>
 800863a:	6803      	ldr	r3, [r0, #0]
 800863c:	0018      	movs	r0, r3
 800863e:	930c      	str	r3, [sp, #48]	; 0x30
 8008640:	f7f7 fd62 	bl	8000108 <strlen>
 8008644:	2300      	movs	r3, #0
 8008646:	9312      	str	r3, [sp, #72]	; 0x48
 8008648:	7e23      	ldrb	r3, [r4, #24]
 800864a:	2207      	movs	r2, #7
 800864c:	930a      	str	r3, [sp, #40]	; 0x28
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	900e      	str	r0, [sp, #56]	; 0x38
 8008652:	930d      	str	r3, [sp, #52]	; 0x34
 8008654:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008656:	682b      	ldr	r3, [r5, #0]
 8008658:	05c9      	lsls	r1, r1, #23
 800865a:	d547      	bpl.n	80086ec <_printf_float+0xc4>
 800865c:	189b      	adds	r3, r3, r2
 800865e:	4393      	bics	r3, r2
 8008660:	001a      	movs	r2, r3
 8008662:	3208      	adds	r2, #8
 8008664:	602a      	str	r2, [r5, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	64a2      	str	r2, [r4, #72]	; 0x48
 800866c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800866e:	2201      	movs	r2, #1
 8008670:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008672:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008674:	930b      	str	r3, [sp, #44]	; 0x2c
 8008676:	006b      	lsls	r3, r5, #1
 8008678:	085b      	lsrs	r3, r3, #1
 800867a:	930f      	str	r3, [sp, #60]	; 0x3c
 800867c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800867e:	4ba7      	ldr	r3, [pc, #668]	; (800891c <_printf_float+0x2f4>)
 8008680:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008682:	4252      	negs	r2, r2
 8008684:	f7fa fcc0 	bl	8003008 <__aeabi_dcmpun>
 8008688:	2800      	cmp	r0, #0
 800868a:	d131      	bne.n	80086f0 <_printf_float+0xc8>
 800868c:	2201      	movs	r2, #1
 800868e:	4ba3      	ldr	r3, [pc, #652]	; (800891c <_printf_float+0x2f4>)
 8008690:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008692:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008694:	4252      	negs	r2, r2
 8008696:	f7f7 fee9 	bl	800046c <__aeabi_dcmple>
 800869a:	2800      	cmp	r0, #0
 800869c:	d128      	bne.n	80086f0 <_printf_float+0xc8>
 800869e:	2200      	movs	r2, #0
 80086a0:	2300      	movs	r3, #0
 80086a2:	0029      	movs	r1, r5
 80086a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80086a6:	f7f7 fed7 	bl	8000458 <__aeabi_dcmplt>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d003      	beq.n	80086b6 <_printf_float+0x8e>
 80086ae:	0023      	movs	r3, r4
 80086b0:	222d      	movs	r2, #45	; 0x2d
 80086b2:	3343      	adds	r3, #67	; 0x43
 80086b4:	701a      	strb	r2, [r3, #0]
 80086b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b8:	4d99      	ldr	r5, [pc, #612]	; (8008920 <_printf_float+0x2f8>)
 80086ba:	2b47      	cmp	r3, #71	; 0x47
 80086bc:	d900      	bls.n	80086c0 <_printf_float+0x98>
 80086be:	4d99      	ldr	r5, [pc, #612]	; (8008924 <_printf_float+0x2fc>)
 80086c0:	2303      	movs	r3, #3
 80086c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086c4:	6123      	str	r3, [r4, #16]
 80086c6:	3301      	adds	r3, #1
 80086c8:	439a      	bics	r2, r3
 80086ca:	2300      	movs	r3, #0
 80086cc:	6022      	str	r2, [r4, #0]
 80086ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80086d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d2:	0021      	movs	r1, r4
 80086d4:	0038      	movs	r0, r7
 80086d6:	9600      	str	r6, [sp, #0]
 80086d8:	aa13      	add	r2, sp, #76	; 0x4c
 80086da:	f000 f9e7 	bl	8008aac <_printf_common>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	d000      	beq.n	80086e4 <_printf_float+0xbc>
 80086e2:	e0a2      	b.n	800882a <_printf_float+0x202>
 80086e4:	2001      	movs	r0, #1
 80086e6:	4240      	negs	r0, r0
 80086e8:	b015      	add	sp, #84	; 0x54
 80086ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ec:	3307      	adds	r3, #7
 80086ee:	e7b6      	b.n	800865e <_printf_float+0x36>
 80086f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086f2:	002b      	movs	r3, r5
 80086f4:	0010      	movs	r0, r2
 80086f6:	0029      	movs	r1, r5
 80086f8:	f7fa fc86 	bl	8003008 <__aeabi_dcmpun>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d00b      	beq.n	8008718 <_printf_float+0xf0>
 8008700:	2d00      	cmp	r5, #0
 8008702:	da03      	bge.n	800870c <_printf_float+0xe4>
 8008704:	0023      	movs	r3, r4
 8008706:	222d      	movs	r2, #45	; 0x2d
 8008708:	3343      	adds	r3, #67	; 0x43
 800870a:	701a      	strb	r2, [r3, #0]
 800870c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800870e:	4d86      	ldr	r5, [pc, #536]	; (8008928 <_printf_float+0x300>)
 8008710:	2b47      	cmp	r3, #71	; 0x47
 8008712:	d9d5      	bls.n	80086c0 <_printf_float+0x98>
 8008714:	4d85      	ldr	r5, [pc, #532]	; (800892c <_printf_float+0x304>)
 8008716:	e7d3      	b.n	80086c0 <_printf_float+0x98>
 8008718:	2220      	movs	r2, #32
 800871a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800871c:	6863      	ldr	r3, [r4, #4]
 800871e:	4391      	bics	r1, r2
 8008720:	910f      	str	r1, [sp, #60]	; 0x3c
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	d149      	bne.n	80087ba <_printf_float+0x192>
 8008726:	3307      	adds	r3, #7
 8008728:	6063      	str	r3, [r4, #4]
 800872a:	2380      	movs	r3, #128	; 0x80
 800872c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	4313      	orrs	r3, r2
 8008732:	2200      	movs	r2, #0
 8008734:	9206      	str	r2, [sp, #24]
 8008736:	aa12      	add	r2, sp, #72	; 0x48
 8008738:	9205      	str	r2, [sp, #20]
 800873a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800873c:	a908      	add	r1, sp, #32
 800873e:	9204      	str	r2, [sp, #16]
 8008740:	aa11      	add	r2, sp, #68	; 0x44
 8008742:	9203      	str	r2, [sp, #12]
 8008744:	2223      	movs	r2, #35	; 0x23
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	9301      	str	r3, [sp, #4]
 800874a:	6863      	ldr	r3, [r4, #4]
 800874c:	1852      	adds	r2, r2, r1
 800874e:	9202      	str	r2, [sp, #8]
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	0038      	movs	r0, r7
 8008754:	002b      	movs	r3, r5
 8008756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008758:	f7ff febb 	bl	80084d2 <__cvt>
 800875c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800875e:	0005      	movs	r5, r0
 8008760:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008762:	2b47      	cmp	r3, #71	; 0x47
 8008764:	d108      	bne.n	8008778 <_printf_float+0x150>
 8008766:	1ccb      	adds	r3, r1, #3
 8008768:	db02      	blt.n	8008770 <_printf_float+0x148>
 800876a:	6863      	ldr	r3, [r4, #4]
 800876c:	4299      	cmp	r1, r3
 800876e:	dd48      	ble.n	8008802 <_printf_float+0x1da>
 8008770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008772:	3b02      	subs	r3, #2
 8008774:	b2db      	uxtb	r3, r3
 8008776:	930a      	str	r3, [sp, #40]	; 0x28
 8008778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877a:	2b65      	cmp	r3, #101	; 0x65
 800877c:	d824      	bhi.n	80087c8 <_printf_float+0x1a0>
 800877e:	0020      	movs	r0, r4
 8008780:	001a      	movs	r2, r3
 8008782:	3901      	subs	r1, #1
 8008784:	3050      	adds	r0, #80	; 0x50
 8008786:	9111      	str	r1, [sp, #68]	; 0x44
 8008788:	f7ff ff06 	bl	8008598 <__exponent>
 800878c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800878e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008790:	1813      	adds	r3, r2, r0
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	2a01      	cmp	r2, #1
 8008796:	dc02      	bgt.n	800879e <_printf_float+0x176>
 8008798:	6822      	ldr	r2, [r4, #0]
 800879a:	07d2      	lsls	r2, r2, #31
 800879c:	d501      	bpl.n	80087a2 <_printf_float+0x17a>
 800879e:	3301      	adds	r3, #1
 80087a0:	6123      	str	r3, [r4, #16]
 80087a2:	2323      	movs	r3, #35	; 0x23
 80087a4:	aa08      	add	r2, sp, #32
 80087a6:	189b      	adds	r3, r3, r2
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d100      	bne.n	80087b0 <_printf_float+0x188>
 80087ae:	e78f      	b.n	80086d0 <_printf_float+0xa8>
 80087b0:	0023      	movs	r3, r4
 80087b2:	222d      	movs	r2, #45	; 0x2d
 80087b4:	3343      	adds	r3, #67	; 0x43
 80087b6:	701a      	strb	r2, [r3, #0]
 80087b8:	e78a      	b.n	80086d0 <_printf_float+0xa8>
 80087ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087bc:	2a47      	cmp	r2, #71	; 0x47
 80087be:	d1b4      	bne.n	800872a <_printf_float+0x102>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1b2      	bne.n	800872a <_printf_float+0x102>
 80087c4:	3301      	adds	r3, #1
 80087c6:	e7af      	b.n	8008728 <_printf_float+0x100>
 80087c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ca:	2b66      	cmp	r3, #102	; 0x66
 80087cc:	d11b      	bne.n	8008806 <_printf_float+0x1de>
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	2900      	cmp	r1, #0
 80087d2:	dd0d      	ble.n	80087f0 <_printf_float+0x1c8>
 80087d4:	6121      	str	r1, [r4, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <_printf_float+0x1b8>
 80087da:	6822      	ldr	r2, [r4, #0]
 80087dc:	07d2      	lsls	r2, r2, #31
 80087de:	d502      	bpl.n	80087e6 <_printf_float+0x1be>
 80087e0:	3301      	adds	r3, #1
 80087e2:	1859      	adds	r1, r3, r1
 80087e4:	6121      	str	r1, [r4, #16]
 80087e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80087ea:	2300      	movs	r3, #0
 80087ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80087ee:	e7d8      	b.n	80087a2 <_printf_float+0x17a>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d103      	bne.n	80087fc <_printf_float+0x1d4>
 80087f4:	2201      	movs	r2, #1
 80087f6:	6821      	ldr	r1, [r4, #0]
 80087f8:	4211      	tst	r1, r2
 80087fa:	d000      	beq.n	80087fe <_printf_float+0x1d6>
 80087fc:	1c9a      	adds	r2, r3, #2
 80087fe:	6122      	str	r2, [r4, #16]
 8008800:	e7f1      	b.n	80087e6 <_printf_float+0x1be>
 8008802:	2367      	movs	r3, #103	; 0x67
 8008804:	930a      	str	r3, [sp, #40]	; 0x28
 8008806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008808:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800880a:	4293      	cmp	r3, r2
 800880c:	db06      	blt.n	800881c <_printf_float+0x1f4>
 800880e:	6822      	ldr	r2, [r4, #0]
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	07d2      	lsls	r2, r2, #31
 8008814:	d5e7      	bpl.n	80087e6 <_printf_float+0x1be>
 8008816:	3301      	adds	r3, #1
 8008818:	6123      	str	r3, [r4, #16]
 800881a:	e7e4      	b.n	80087e6 <_printf_float+0x1be>
 800881c:	2101      	movs	r1, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	dc01      	bgt.n	8008826 <_printf_float+0x1fe>
 8008822:	1849      	adds	r1, r1, r1
 8008824:	1ac9      	subs	r1, r1, r3
 8008826:	1852      	adds	r2, r2, r1
 8008828:	e7e9      	b.n	80087fe <_printf_float+0x1d6>
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	0553      	lsls	r3, r2, #21
 800882e:	d407      	bmi.n	8008840 <_printf_float+0x218>
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	002a      	movs	r2, r5
 8008834:	0038      	movs	r0, r7
 8008836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008838:	47b0      	blx	r6
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	d128      	bne.n	8008890 <_printf_float+0x268>
 800883e:	e751      	b.n	80086e4 <_printf_float+0xbc>
 8008840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008842:	2b65      	cmp	r3, #101	; 0x65
 8008844:	d800      	bhi.n	8008848 <_printf_float+0x220>
 8008846:	e0e1      	b.n	8008a0c <_printf_float+0x3e4>
 8008848:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800884a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800884c:	2200      	movs	r2, #0
 800884e:	2300      	movs	r3, #0
 8008850:	f7f7 fdfc 	bl	800044c <__aeabi_dcmpeq>
 8008854:	2800      	cmp	r0, #0
 8008856:	d031      	beq.n	80088bc <_printf_float+0x294>
 8008858:	2301      	movs	r3, #1
 800885a:	0038      	movs	r0, r7
 800885c:	4a34      	ldr	r2, [pc, #208]	; (8008930 <_printf_float+0x308>)
 800885e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008860:	47b0      	blx	r6
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	d100      	bne.n	8008868 <_printf_float+0x240>
 8008866:	e73d      	b.n	80086e4 <_printf_float+0xbc>
 8008868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800886a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800886c:	4293      	cmp	r3, r2
 800886e:	db02      	blt.n	8008876 <_printf_float+0x24e>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	07db      	lsls	r3, r3, #31
 8008874:	d50c      	bpl.n	8008890 <_printf_float+0x268>
 8008876:	0038      	movs	r0, r7
 8008878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800887a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800887c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800887e:	47b0      	blx	r6
 8008880:	2500      	movs	r5, #0
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d100      	bne.n	8008888 <_printf_float+0x260>
 8008886:	e72d      	b.n	80086e4 <_printf_float+0xbc>
 8008888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800888a:	3b01      	subs	r3, #1
 800888c:	42ab      	cmp	r3, r5
 800888e:	dc0a      	bgt.n	80088a6 <_printf_float+0x27e>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	079b      	lsls	r3, r3, #30
 8008894:	d500      	bpl.n	8008898 <_printf_float+0x270>
 8008896:	e106      	b.n	8008aa6 <_printf_float+0x47e>
 8008898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800889a:	68e0      	ldr	r0, [r4, #12]
 800889c:	4298      	cmp	r0, r3
 800889e:	db00      	blt.n	80088a2 <_printf_float+0x27a>
 80088a0:	e722      	b.n	80086e8 <_printf_float+0xc0>
 80088a2:	0018      	movs	r0, r3
 80088a4:	e720      	b.n	80086e8 <_printf_float+0xc0>
 80088a6:	0022      	movs	r2, r4
 80088a8:	2301      	movs	r3, #1
 80088aa:	0038      	movs	r0, r7
 80088ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088ae:	321a      	adds	r2, #26
 80088b0:	47b0      	blx	r6
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d100      	bne.n	80088b8 <_printf_float+0x290>
 80088b6:	e715      	b.n	80086e4 <_printf_float+0xbc>
 80088b8:	3501      	adds	r5, #1
 80088ba:	e7e5      	b.n	8008888 <_printf_float+0x260>
 80088bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dc38      	bgt.n	8008934 <_printf_float+0x30c>
 80088c2:	2301      	movs	r3, #1
 80088c4:	0038      	movs	r0, r7
 80088c6:	4a1a      	ldr	r2, [pc, #104]	; (8008930 <_printf_float+0x308>)
 80088c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088ca:	47b0      	blx	r6
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d100      	bne.n	80088d2 <_printf_float+0x2aa>
 80088d0:	e708      	b.n	80086e4 <_printf_float+0xbc>
 80088d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088d6:	4313      	orrs	r3, r2
 80088d8:	d102      	bne.n	80088e0 <_printf_float+0x2b8>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	07db      	lsls	r3, r3, #31
 80088de:	d5d7      	bpl.n	8008890 <_printf_float+0x268>
 80088e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088e2:	0038      	movs	r0, r7
 80088e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088e8:	47b0      	blx	r6
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	d100      	bne.n	80088f0 <_printf_float+0x2c8>
 80088ee:	e6f9      	b.n	80086e4 <_printf_float+0xbc>
 80088f0:	2300      	movs	r3, #0
 80088f2:	930a      	str	r3, [sp, #40]	; 0x28
 80088f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088f8:	425b      	negs	r3, r3
 80088fa:	4293      	cmp	r3, r2
 80088fc:	dc01      	bgt.n	8008902 <_printf_float+0x2da>
 80088fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008900:	e797      	b.n	8008832 <_printf_float+0x20a>
 8008902:	0022      	movs	r2, r4
 8008904:	2301      	movs	r3, #1
 8008906:	0038      	movs	r0, r7
 8008908:	9909      	ldr	r1, [sp, #36]	; 0x24
 800890a:	321a      	adds	r2, #26
 800890c:	47b0      	blx	r6
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	d100      	bne.n	8008914 <_printf_float+0x2ec>
 8008912:	e6e7      	b.n	80086e4 <_printf_float+0xbc>
 8008914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008916:	3301      	adds	r3, #1
 8008918:	e7eb      	b.n	80088f2 <_printf_float+0x2ca>
 800891a:	46c0      	nop			; (mov r8, r8)
 800891c:	7fefffff 	.word	0x7fefffff
 8008920:	0800b644 	.word	0x0800b644
 8008924:	0800b648 	.word	0x0800b648
 8008928:	0800b64c 	.word	0x0800b64c
 800892c:	0800b650 	.word	0x0800b650
 8008930:	0800b654 	.word	0x0800b654
 8008934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008936:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008938:	920a      	str	r2, [sp, #40]	; 0x28
 800893a:	429a      	cmp	r2, r3
 800893c:	dd00      	ble.n	8008940 <_printf_float+0x318>
 800893e:	930a      	str	r3, [sp, #40]	; 0x28
 8008940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	dc3c      	bgt.n	80089c0 <_printf_float+0x398>
 8008946:	2300      	movs	r3, #0
 8008948:	930d      	str	r3, [sp, #52]	; 0x34
 800894a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800894c:	43db      	mvns	r3, r3
 800894e:	17db      	asrs	r3, r3, #31
 8008950:	930f      	str	r3, [sp, #60]	; 0x3c
 8008952:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008954:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008956:	930b      	str	r3, [sp, #44]	; 0x2c
 8008958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800895a:	4013      	ands	r3, r2
 800895c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008962:	4293      	cmp	r3, r2
 8008964:	dc34      	bgt.n	80089d0 <_printf_float+0x3a8>
 8008966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008968:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800896a:	4293      	cmp	r3, r2
 800896c:	db3d      	blt.n	80089ea <_printf_float+0x3c2>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	07db      	lsls	r3, r3, #31
 8008972:	d43a      	bmi.n	80089ea <_printf_float+0x3c2>
 8008974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008978:	9911      	ldr	r1, [sp, #68]	; 0x44
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	1a52      	subs	r2, r2, r1
 800897e:	920a      	str	r2, [sp, #40]	; 0x28
 8008980:	429a      	cmp	r2, r3
 8008982:	dd00      	ble.n	8008986 <_printf_float+0x35e>
 8008984:	930a      	str	r3, [sp, #40]	; 0x28
 8008986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008988:	2b00      	cmp	r3, #0
 800898a:	dc36      	bgt.n	80089fa <_printf_float+0x3d2>
 800898c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898e:	2500      	movs	r5, #0
 8008990:	43db      	mvns	r3, r3
 8008992:	17db      	asrs	r3, r3, #31
 8008994:	930b      	str	r3, [sp, #44]	; 0x2c
 8008996:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008998:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800899a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089a0:	400a      	ands	r2, r1
 80089a2:	1a9b      	subs	r3, r3, r2
 80089a4:	42ab      	cmp	r3, r5
 80089a6:	dc00      	bgt.n	80089aa <_printf_float+0x382>
 80089a8:	e772      	b.n	8008890 <_printf_float+0x268>
 80089aa:	0022      	movs	r2, r4
 80089ac:	2301      	movs	r3, #1
 80089ae:	0038      	movs	r0, r7
 80089b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089b2:	321a      	adds	r2, #26
 80089b4:	47b0      	blx	r6
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	d100      	bne.n	80089bc <_printf_float+0x394>
 80089ba:	e693      	b.n	80086e4 <_printf_float+0xbc>
 80089bc:	3501      	adds	r5, #1
 80089be:	e7ea      	b.n	8008996 <_printf_float+0x36e>
 80089c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c2:	002a      	movs	r2, r5
 80089c4:	0038      	movs	r0, r7
 80089c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089c8:	47b0      	blx	r6
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	d1bb      	bne.n	8008946 <_printf_float+0x31e>
 80089ce:	e689      	b.n	80086e4 <_printf_float+0xbc>
 80089d0:	0022      	movs	r2, r4
 80089d2:	2301      	movs	r3, #1
 80089d4:	0038      	movs	r0, r7
 80089d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089d8:	321a      	adds	r2, #26
 80089da:	47b0      	blx	r6
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d100      	bne.n	80089e2 <_printf_float+0x3ba>
 80089e0:	e680      	b.n	80086e4 <_printf_float+0xbc>
 80089e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089e4:	3301      	adds	r3, #1
 80089e6:	930d      	str	r3, [sp, #52]	; 0x34
 80089e8:	e7b3      	b.n	8008952 <_printf_float+0x32a>
 80089ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ec:	0038      	movs	r0, r7
 80089ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f2:	47b0      	blx	r6
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d1bd      	bne.n	8008974 <_printf_float+0x34c>
 80089f8:	e674      	b.n	80086e4 <_printf_float+0xbc>
 80089fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fc:	0038      	movs	r0, r7
 80089fe:	18ea      	adds	r2, r5, r3
 8008a00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a04:	47b0      	blx	r6
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d1c0      	bne.n	800898c <_printf_float+0x364>
 8008a0a:	e66b      	b.n	80086e4 <_printf_float+0xbc>
 8008a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	dc02      	bgt.n	8008a18 <_printf_float+0x3f0>
 8008a12:	2301      	movs	r3, #1
 8008a14:	421a      	tst	r2, r3
 8008a16:	d034      	beq.n	8008a82 <_printf_float+0x45a>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	002a      	movs	r2, r5
 8008a1c:	0038      	movs	r0, r7
 8008a1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a20:	47b0      	blx	r6
 8008a22:	1c43      	adds	r3, r0, #1
 8008a24:	d100      	bne.n	8008a28 <_printf_float+0x400>
 8008a26:	e65d      	b.n	80086e4 <_printf_float+0xbc>
 8008a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a2a:	0038      	movs	r0, r7
 8008a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a30:	47b0      	blx	r6
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d100      	bne.n	8008a38 <_printf_float+0x410>
 8008a36:	e655      	b.n	80086e4 <_printf_float+0xbc>
 8008a38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008a3a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f7f7 fd04 	bl	800044c <__aeabi_dcmpeq>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d11a      	bne.n	8008a7e <_printf_float+0x456>
 8008a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a4a:	1c6a      	adds	r2, r5, #1
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	0038      	movs	r0, r7
 8008a50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a52:	47b0      	blx	r6
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d10e      	bne.n	8008a76 <_printf_float+0x44e>
 8008a58:	e644      	b.n	80086e4 <_printf_float+0xbc>
 8008a5a:	0022      	movs	r2, r4
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	0038      	movs	r0, r7
 8008a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a62:	321a      	adds	r2, #26
 8008a64:	47b0      	blx	r6
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	d100      	bne.n	8008a6c <_printf_float+0x444>
 8008a6a:	e63b      	b.n	80086e4 <_printf_float+0xbc>
 8008a6c:	3501      	adds	r5, #1
 8008a6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a70:	3b01      	subs	r3, #1
 8008a72:	42ab      	cmp	r3, r5
 8008a74:	dcf1      	bgt.n	8008a5a <_printf_float+0x432>
 8008a76:	0022      	movs	r2, r4
 8008a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7a:	3250      	adds	r2, #80	; 0x50
 8008a7c:	e6da      	b.n	8008834 <_printf_float+0x20c>
 8008a7e:	2500      	movs	r5, #0
 8008a80:	e7f5      	b.n	8008a6e <_printf_float+0x446>
 8008a82:	002a      	movs	r2, r5
 8008a84:	e7e3      	b.n	8008a4e <_printf_float+0x426>
 8008a86:	0022      	movs	r2, r4
 8008a88:	2301      	movs	r3, #1
 8008a8a:	0038      	movs	r0, r7
 8008a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a8e:	3219      	adds	r2, #25
 8008a90:	47b0      	blx	r6
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d100      	bne.n	8008a98 <_printf_float+0x470>
 8008a96:	e625      	b.n	80086e4 <_printf_float+0xbc>
 8008a98:	3501      	adds	r5, #1
 8008a9a:	68e3      	ldr	r3, [r4, #12]
 8008a9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	42ab      	cmp	r3, r5
 8008aa2:	dcf0      	bgt.n	8008a86 <_printf_float+0x45e>
 8008aa4:	e6f8      	b.n	8008898 <_printf_float+0x270>
 8008aa6:	2500      	movs	r5, #0
 8008aa8:	e7f7      	b.n	8008a9a <_printf_float+0x472>
 8008aaa:	46c0      	nop			; (mov r8, r8)

08008aac <_printf_common>:
 8008aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aae:	0015      	movs	r5, r2
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	688a      	ldr	r2, [r1, #8]
 8008ab4:	690b      	ldr	r3, [r1, #16]
 8008ab6:	000c      	movs	r4, r1
 8008ab8:	9000      	str	r0, [sp, #0]
 8008aba:	4293      	cmp	r3, r2
 8008abc:	da00      	bge.n	8008ac0 <_printf_common+0x14>
 8008abe:	0013      	movs	r3, r2
 8008ac0:	0022      	movs	r2, r4
 8008ac2:	602b      	str	r3, [r5, #0]
 8008ac4:	3243      	adds	r2, #67	; 0x43
 8008ac6:	7812      	ldrb	r2, [r2, #0]
 8008ac8:	2a00      	cmp	r2, #0
 8008aca:	d001      	beq.n	8008ad0 <_printf_common+0x24>
 8008acc:	3301      	adds	r3, #1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	069b      	lsls	r3, r3, #26
 8008ad4:	d502      	bpl.n	8008adc <_printf_common+0x30>
 8008ad6:	682b      	ldr	r3, [r5, #0]
 8008ad8:	3302      	adds	r3, #2
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	6822      	ldr	r2, [r4, #0]
 8008ade:	2306      	movs	r3, #6
 8008ae0:	0017      	movs	r7, r2
 8008ae2:	401f      	ands	r7, r3
 8008ae4:	421a      	tst	r2, r3
 8008ae6:	d027      	beq.n	8008b38 <_printf_common+0x8c>
 8008ae8:	0023      	movs	r3, r4
 8008aea:	3343      	adds	r3, #67	; 0x43
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	1e5a      	subs	r2, r3, #1
 8008af0:	4193      	sbcs	r3, r2
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	0692      	lsls	r2, r2, #26
 8008af6:	d430      	bmi.n	8008b5a <_printf_common+0xae>
 8008af8:	0022      	movs	r2, r4
 8008afa:	9901      	ldr	r1, [sp, #4]
 8008afc:	9800      	ldr	r0, [sp, #0]
 8008afe:	9e08      	ldr	r6, [sp, #32]
 8008b00:	3243      	adds	r2, #67	; 0x43
 8008b02:	47b0      	blx	r6
 8008b04:	1c43      	adds	r3, r0, #1
 8008b06:	d025      	beq.n	8008b54 <_printf_common+0xa8>
 8008b08:	2306      	movs	r3, #6
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	682a      	ldr	r2, [r5, #0]
 8008b0e:	68e1      	ldr	r1, [r4, #12]
 8008b10:	2500      	movs	r5, #0
 8008b12:	4003      	ands	r3, r0
 8008b14:	2b04      	cmp	r3, #4
 8008b16:	d103      	bne.n	8008b20 <_printf_common+0x74>
 8008b18:	1a8d      	subs	r5, r1, r2
 8008b1a:	43eb      	mvns	r3, r5
 8008b1c:	17db      	asrs	r3, r3, #31
 8008b1e:	401d      	ands	r5, r3
 8008b20:	68a3      	ldr	r3, [r4, #8]
 8008b22:	6922      	ldr	r2, [r4, #16]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	dd01      	ble.n	8008b2c <_printf_common+0x80>
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	18ed      	adds	r5, r5, r3
 8008b2c:	2700      	movs	r7, #0
 8008b2e:	42bd      	cmp	r5, r7
 8008b30:	d120      	bne.n	8008b74 <_printf_common+0xc8>
 8008b32:	2000      	movs	r0, #0
 8008b34:	e010      	b.n	8008b58 <_printf_common+0xac>
 8008b36:	3701      	adds	r7, #1
 8008b38:	68e3      	ldr	r3, [r4, #12]
 8008b3a:	682a      	ldr	r2, [r5, #0]
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	42bb      	cmp	r3, r7
 8008b40:	ddd2      	ble.n	8008ae8 <_printf_common+0x3c>
 8008b42:	0022      	movs	r2, r4
 8008b44:	2301      	movs	r3, #1
 8008b46:	9901      	ldr	r1, [sp, #4]
 8008b48:	9800      	ldr	r0, [sp, #0]
 8008b4a:	9e08      	ldr	r6, [sp, #32]
 8008b4c:	3219      	adds	r2, #25
 8008b4e:	47b0      	blx	r6
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d1f0      	bne.n	8008b36 <_printf_common+0x8a>
 8008b54:	2001      	movs	r0, #1
 8008b56:	4240      	negs	r0, r0
 8008b58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b5a:	2030      	movs	r0, #48	; 0x30
 8008b5c:	18e1      	adds	r1, r4, r3
 8008b5e:	3143      	adds	r1, #67	; 0x43
 8008b60:	7008      	strb	r0, [r1, #0]
 8008b62:	0021      	movs	r1, r4
 8008b64:	1c5a      	adds	r2, r3, #1
 8008b66:	3145      	adds	r1, #69	; 0x45
 8008b68:	7809      	ldrb	r1, [r1, #0]
 8008b6a:	18a2      	adds	r2, r4, r2
 8008b6c:	3243      	adds	r2, #67	; 0x43
 8008b6e:	3302      	adds	r3, #2
 8008b70:	7011      	strb	r1, [r2, #0]
 8008b72:	e7c1      	b.n	8008af8 <_printf_common+0x4c>
 8008b74:	0022      	movs	r2, r4
 8008b76:	2301      	movs	r3, #1
 8008b78:	9901      	ldr	r1, [sp, #4]
 8008b7a:	9800      	ldr	r0, [sp, #0]
 8008b7c:	9e08      	ldr	r6, [sp, #32]
 8008b7e:	321a      	adds	r2, #26
 8008b80:	47b0      	blx	r6
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	d0e6      	beq.n	8008b54 <_printf_common+0xa8>
 8008b86:	3701      	adds	r7, #1
 8008b88:	e7d1      	b.n	8008b2e <_printf_common+0x82>
	...

08008b8c <_printf_i>:
 8008b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b8e:	b08b      	sub	sp, #44	; 0x2c
 8008b90:	9206      	str	r2, [sp, #24]
 8008b92:	000a      	movs	r2, r1
 8008b94:	3243      	adds	r2, #67	; 0x43
 8008b96:	9307      	str	r3, [sp, #28]
 8008b98:	9005      	str	r0, [sp, #20]
 8008b9a:	9204      	str	r2, [sp, #16]
 8008b9c:	7e0a      	ldrb	r2, [r1, #24]
 8008b9e:	000c      	movs	r4, r1
 8008ba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ba2:	2a78      	cmp	r2, #120	; 0x78
 8008ba4:	d807      	bhi.n	8008bb6 <_printf_i+0x2a>
 8008ba6:	2a62      	cmp	r2, #98	; 0x62
 8008ba8:	d809      	bhi.n	8008bbe <_printf_i+0x32>
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	d100      	bne.n	8008bb0 <_printf_i+0x24>
 8008bae:	e0c1      	b.n	8008d34 <_printf_i+0x1a8>
 8008bb0:	2a58      	cmp	r2, #88	; 0x58
 8008bb2:	d100      	bne.n	8008bb6 <_printf_i+0x2a>
 8008bb4:	e08c      	b.n	8008cd0 <_printf_i+0x144>
 8008bb6:	0026      	movs	r6, r4
 8008bb8:	3642      	adds	r6, #66	; 0x42
 8008bba:	7032      	strb	r2, [r6, #0]
 8008bbc:	e022      	b.n	8008c04 <_printf_i+0x78>
 8008bbe:	0010      	movs	r0, r2
 8008bc0:	3863      	subs	r0, #99	; 0x63
 8008bc2:	2815      	cmp	r0, #21
 8008bc4:	d8f7      	bhi.n	8008bb6 <_printf_i+0x2a>
 8008bc6:	f7f7 fab1 	bl	800012c <__gnu_thumb1_case_shi>
 8008bca:	0016      	.short	0x0016
 8008bcc:	fff6001f 	.word	0xfff6001f
 8008bd0:	fff6fff6 	.word	0xfff6fff6
 8008bd4:	001ffff6 	.word	0x001ffff6
 8008bd8:	fff6fff6 	.word	0xfff6fff6
 8008bdc:	fff6fff6 	.word	0xfff6fff6
 8008be0:	003600a8 	.word	0x003600a8
 8008be4:	fff6009a 	.word	0xfff6009a
 8008be8:	00b9fff6 	.word	0x00b9fff6
 8008bec:	0036fff6 	.word	0x0036fff6
 8008bf0:	fff6fff6 	.word	0xfff6fff6
 8008bf4:	009e      	.short	0x009e
 8008bf6:	0026      	movs	r6, r4
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	3642      	adds	r6, #66	; 0x42
 8008bfc:	1d11      	adds	r1, r2, #4
 8008bfe:	6019      	str	r1, [r3, #0]
 8008c00:	6813      	ldr	r3, [r2, #0]
 8008c02:	7033      	strb	r3, [r6, #0]
 8008c04:	2301      	movs	r3, #1
 8008c06:	e0a7      	b.n	8008d58 <_printf_i+0x1cc>
 8008c08:	6808      	ldr	r0, [r1, #0]
 8008c0a:	6819      	ldr	r1, [r3, #0]
 8008c0c:	1d0a      	adds	r2, r1, #4
 8008c0e:	0605      	lsls	r5, r0, #24
 8008c10:	d50b      	bpl.n	8008c2a <_printf_i+0x9e>
 8008c12:	680d      	ldr	r5, [r1, #0]
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	2d00      	cmp	r5, #0
 8008c18:	da03      	bge.n	8008c22 <_printf_i+0x96>
 8008c1a:	232d      	movs	r3, #45	; 0x2d
 8008c1c:	9a04      	ldr	r2, [sp, #16]
 8008c1e:	426d      	negs	r5, r5
 8008c20:	7013      	strb	r3, [r2, #0]
 8008c22:	4b61      	ldr	r3, [pc, #388]	; (8008da8 <_printf_i+0x21c>)
 8008c24:	270a      	movs	r7, #10
 8008c26:	9303      	str	r3, [sp, #12]
 8008c28:	e01b      	b.n	8008c62 <_printf_i+0xd6>
 8008c2a:	680d      	ldr	r5, [r1, #0]
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	0641      	lsls	r1, r0, #25
 8008c30:	d5f1      	bpl.n	8008c16 <_printf_i+0x8a>
 8008c32:	b22d      	sxth	r5, r5
 8008c34:	e7ef      	b.n	8008c16 <_printf_i+0x8a>
 8008c36:	680d      	ldr	r5, [r1, #0]
 8008c38:	6819      	ldr	r1, [r3, #0]
 8008c3a:	1d08      	adds	r0, r1, #4
 8008c3c:	6018      	str	r0, [r3, #0]
 8008c3e:	062e      	lsls	r6, r5, #24
 8008c40:	d501      	bpl.n	8008c46 <_printf_i+0xba>
 8008c42:	680d      	ldr	r5, [r1, #0]
 8008c44:	e003      	b.n	8008c4e <_printf_i+0xc2>
 8008c46:	066d      	lsls	r5, r5, #25
 8008c48:	d5fb      	bpl.n	8008c42 <_printf_i+0xb6>
 8008c4a:	680d      	ldr	r5, [r1, #0]
 8008c4c:	b2ad      	uxth	r5, r5
 8008c4e:	4b56      	ldr	r3, [pc, #344]	; (8008da8 <_printf_i+0x21c>)
 8008c50:	2708      	movs	r7, #8
 8008c52:	9303      	str	r3, [sp, #12]
 8008c54:	2a6f      	cmp	r2, #111	; 0x6f
 8008c56:	d000      	beq.n	8008c5a <_printf_i+0xce>
 8008c58:	3702      	adds	r7, #2
 8008c5a:	0023      	movs	r3, r4
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	3343      	adds	r3, #67	; 0x43
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	60a3      	str	r3, [r4, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	db03      	blt.n	8008c72 <_printf_i+0xe6>
 8008c6a:	2204      	movs	r2, #4
 8008c6c:	6821      	ldr	r1, [r4, #0]
 8008c6e:	4391      	bics	r1, r2
 8008c70:	6021      	str	r1, [r4, #0]
 8008c72:	2d00      	cmp	r5, #0
 8008c74:	d102      	bne.n	8008c7c <_printf_i+0xf0>
 8008c76:	9e04      	ldr	r6, [sp, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00c      	beq.n	8008c96 <_printf_i+0x10a>
 8008c7c:	9e04      	ldr	r6, [sp, #16]
 8008c7e:	0028      	movs	r0, r5
 8008c80:	0039      	movs	r1, r7
 8008c82:	f7f7 fae3 	bl	800024c <__aeabi_uidivmod>
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	3e01      	subs	r6, #1
 8008c8a:	5c5b      	ldrb	r3, [r3, r1]
 8008c8c:	7033      	strb	r3, [r6, #0]
 8008c8e:	002b      	movs	r3, r5
 8008c90:	0005      	movs	r5, r0
 8008c92:	429f      	cmp	r7, r3
 8008c94:	d9f3      	bls.n	8008c7e <_printf_i+0xf2>
 8008c96:	2f08      	cmp	r7, #8
 8008c98:	d109      	bne.n	8008cae <_printf_i+0x122>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	07db      	lsls	r3, r3, #31
 8008c9e:	d506      	bpl.n	8008cae <_printf_i+0x122>
 8008ca0:	6863      	ldr	r3, [r4, #4]
 8008ca2:	6922      	ldr	r2, [r4, #16]
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	dc02      	bgt.n	8008cae <_printf_i+0x122>
 8008ca8:	2330      	movs	r3, #48	; 0x30
 8008caa:	3e01      	subs	r6, #1
 8008cac:	7033      	strb	r3, [r6, #0]
 8008cae:	9b04      	ldr	r3, [sp, #16]
 8008cb0:	1b9b      	subs	r3, r3, r6
 8008cb2:	6123      	str	r3, [r4, #16]
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	0021      	movs	r1, r4
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	9805      	ldr	r0, [sp, #20]
 8008cbc:	9b06      	ldr	r3, [sp, #24]
 8008cbe:	aa09      	add	r2, sp, #36	; 0x24
 8008cc0:	f7ff fef4 	bl	8008aac <_printf_common>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d14c      	bne.n	8008d62 <_printf_i+0x1d6>
 8008cc8:	2001      	movs	r0, #1
 8008cca:	4240      	negs	r0, r0
 8008ccc:	b00b      	add	sp, #44	; 0x2c
 8008cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd0:	3145      	adds	r1, #69	; 0x45
 8008cd2:	700a      	strb	r2, [r1, #0]
 8008cd4:	4a34      	ldr	r2, [pc, #208]	; (8008da8 <_printf_i+0x21c>)
 8008cd6:	9203      	str	r2, [sp, #12]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	6821      	ldr	r1, [r4, #0]
 8008cdc:	ca20      	ldmia	r2!, {r5}
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	0608      	lsls	r0, r1, #24
 8008ce2:	d516      	bpl.n	8008d12 <_printf_i+0x186>
 8008ce4:	07cb      	lsls	r3, r1, #31
 8008ce6:	d502      	bpl.n	8008cee <_printf_i+0x162>
 8008ce8:	2320      	movs	r3, #32
 8008cea:	4319      	orrs	r1, r3
 8008cec:	6021      	str	r1, [r4, #0]
 8008cee:	2710      	movs	r7, #16
 8008cf0:	2d00      	cmp	r5, #0
 8008cf2:	d1b2      	bne.n	8008c5a <_printf_i+0xce>
 8008cf4:	2320      	movs	r3, #32
 8008cf6:	6822      	ldr	r2, [r4, #0]
 8008cf8:	439a      	bics	r2, r3
 8008cfa:	6022      	str	r2, [r4, #0]
 8008cfc:	e7ad      	b.n	8008c5a <_printf_i+0xce>
 8008cfe:	2220      	movs	r2, #32
 8008d00:	6809      	ldr	r1, [r1, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	6022      	str	r2, [r4, #0]
 8008d06:	0022      	movs	r2, r4
 8008d08:	2178      	movs	r1, #120	; 0x78
 8008d0a:	3245      	adds	r2, #69	; 0x45
 8008d0c:	7011      	strb	r1, [r2, #0]
 8008d0e:	4a27      	ldr	r2, [pc, #156]	; (8008dac <_printf_i+0x220>)
 8008d10:	e7e1      	b.n	8008cd6 <_printf_i+0x14a>
 8008d12:	0648      	lsls	r0, r1, #25
 8008d14:	d5e6      	bpl.n	8008ce4 <_printf_i+0x158>
 8008d16:	b2ad      	uxth	r5, r5
 8008d18:	e7e4      	b.n	8008ce4 <_printf_i+0x158>
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	680d      	ldr	r5, [r1, #0]
 8008d1e:	1d10      	adds	r0, r2, #4
 8008d20:	6949      	ldr	r1, [r1, #20]
 8008d22:	6018      	str	r0, [r3, #0]
 8008d24:	6813      	ldr	r3, [r2, #0]
 8008d26:	062e      	lsls	r6, r5, #24
 8008d28:	d501      	bpl.n	8008d2e <_printf_i+0x1a2>
 8008d2a:	6019      	str	r1, [r3, #0]
 8008d2c:	e002      	b.n	8008d34 <_printf_i+0x1a8>
 8008d2e:	066d      	lsls	r5, r5, #25
 8008d30:	d5fb      	bpl.n	8008d2a <_printf_i+0x19e>
 8008d32:	8019      	strh	r1, [r3, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	9e04      	ldr	r6, [sp, #16]
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	e7bb      	b.n	8008cb4 <_printf_i+0x128>
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	1d11      	adds	r1, r2, #4
 8008d40:	6019      	str	r1, [r3, #0]
 8008d42:	6816      	ldr	r6, [r2, #0]
 8008d44:	2100      	movs	r1, #0
 8008d46:	0030      	movs	r0, r6
 8008d48:	6862      	ldr	r2, [r4, #4]
 8008d4a:	f000 ff05 	bl	8009b58 <memchr>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d001      	beq.n	8008d56 <_printf_i+0x1ca>
 8008d52:	1b80      	subs	r0, r0, r6
 8008d54:	6060      	str	r0, [r4, #4]
 8008d56:	6863      	ldr	r3, [r4, #4]
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9a04      	ldr	r2, [sp, #16]
 8008d5e:	7013      	strb	r3, [r2, #0]
 8008d60:	e7a8      	b.n	8008cb4 <_printf_i+0x128>
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	0032      	movs	r2, r6
 8008d66:	9906      	ldr	r1, [sp, #24]
 8008d68:	9805      	ldr	r0, [sp, #20]
 8008d6a:	9d07      	ldr	r5, [sp, #28]
 8008d6c:	47a8      	blx	r5
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	d0aa      	beq.n	8008cc8 <_printf_i+0x13c>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	079b      	lsls	r3, r3, #30
 8008d76:	d415      	bmi.n	8008da4 <_printf_i+0x218>
 8008d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7a:	68e0      	ldr	r0, [r4, #12]
 8008d7c:	4298      	cmp	r0, r3
 8008d7e:	daa5      	bge.n	8008ccc <_printf_i+0x140>
 8008d80:	0018      	movs	r0, r3
 8008d82:	e7a3      	b.n	8008ccc <_printf_i+0x140>
 8008d84:	0022      	movs	r2, r4
 8008d86:	2301      	movs	r3, #1
 8008d88:	9906      	ldr	r1, [sp, #24]
 8008d8a:	9805      	ldr	r0, [sp, #20]
 8008d8c:	9e07      	ldr	r6, [sp, #28]
 8008d8e:	3219      	adds	r2, #25
 8008d90:	47b0      	blx	r6
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d098      	beq.n	8008cc8 <_printf_i+0x13c>
 8008d96:	3501      	adds	r5, #1
 8008d98:	68e3      	ldr	r3, [r4, #12]
 8008d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	42ab      	cmp	r3, r5
 8008da0:	dcf0      	bgt.n	8008d84 <_printf_i+0x1f8>
 8008da2:	e7e9      	b.n	8008d78 <_printf_i+0x1ec>
 8008da4:	2500      	movs	r5, #0
 8008da6:	e7f7      	b.n	8008d98 <_printf_i+0x20c>
 8008da8:	0800b656 	.word	0x0800b656
 8008dac:	0800b667 	.word	0x0800b667

08008db0 <siprintf>:
 8008db0:	b40e      	push	{r1, r2, r3}
 8008db2:	b500      	push	{lr}
 8008db4:	490b      	ldr	r1, [pc, #44]	; (8008de4 <siprintf+0x34>)
 8008db6:	b09c      	sub	sp, #112	; 0x70
 8008db8:	ab1d      	add	r3, sp, #116	; 0x74
 8008dba:	9002      	str	r0, [sp, #8]
 8008dbc:	9006      	str	r0, [sp, #24]
 8008dbe:	9107      	str	r1, [sp, #28]
 8008dc0:	9104      	str	r1, [sp, #16]
 8008dc2:	4809      	ldr	r0, [pc, #36]	; (8008de8 <siprintf+0x38>)
 8008dc4:	4909      	ldr	r1, [pc, #36]	; (8008dec <siprintf+0x3c>)
 8008dc6:	cb04      	ldmia	r3!, {r2}
 8008dc8:	9105      	str	r1, [sp, #20]
 8008dca:	6800      	ldr	r0, [r0, #0]
 8008dcc:	a902      	add	r1, sp, #8
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	f001 fbda 	bl	800a588 <_svfiprintf_r>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9a02      	ldr	r2, [sp, #8]
 8008dd8:	7013      	strb	r3, [r2, #0]
 8008dda:	b01c      	add	sp, #112	; 0x70
 8008ddc:	bc08      	pop	{r3}
 8008dde:	b003      	add	sp, #12
 8008de0:	4718      	bx	r3
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	7fffffff 	.word	0x7fffffff
 8008de8:	20000014 	.word	0x20000014
 8008dec:	ffff0208 	.word	0xffff0208

08008df0 <quorem>:
 8008df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008df2:	0006      	movs	r6, r0
 8008df4:	690b      	ldr	r3, [r1, #16]
 8008df6:	6932      	ldr	r2, [r6, #16]
 8008df8:	b087      	sub	sp, #28
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	9103      	str	r1, [sp, #12]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	db65      	blt.n	8008ece <quorem+0xde>
 8008e02:	3b01      	subs	r3, #1
 8008e04:	009c      	lsls	r4, r3, #2
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	000b      	movs	r3, r1
 8008e0a:	3314      	adds	r3, #20
 8008e0c:	9305      	str	r3, [sp, #20]
 8008e0e:	191b      	adds	r3, r3, r4
 8008e10:	9304      	str	r3, [sp, #16]
 8008e12:	0033      	movs	r3, r6
 8008e14:	3314      	adds	r3, #20
 8008e16:	9302      	str	r3, [sp, #8]
 8008e18:	191c      	adds	r4, r3, r4
 8008e1a:	9b04      	ldr	r3, [sp, #16]
 8008e1c:	6827      	ldr	r7, [r4, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	0038      	movs	r0, r7
 8008e22:	1c5d      	adds	r5, r3, #1
 8008e24:	0029      	movs	r1, r5
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	f7f7 f98a 	bl	8000140 <__udivsi3>
 8008e2c:	9001      	str	r0, [sp, #4]
 8008e2e:	42af      	cmp	r7, r5
 8008e30:	d324      	bcc.n	8008e7c <quorem+0x8c>
 8008e32:	2500      	movs	r5, #0
 8008e34:	46ac      	mov	ip, r5
 8008e36:	9802      	ldr	r0, [sp, #8]
 8008e38:	9f05      	ldr	r7, [sp, #20]
 8008e3a:	cf08      	ldmia	r7!, {r3}
 8008e3c:	9a01      	ldr	r2, [sp, #4]
 8008e3e:	b299      	uxth	r1, r3
 8008e40:	4351      	muls	r1, r2
 8008e42:	0c1b      	lsrs	r3, r3, #16
 8008e44:	4353      	muls	r3, r2
 8008e46:	1949      	adds	r1, r1, r5
 8008e48:	0c0a      	lsrs	r2, r1, #16
 8008e4a:	189b      	adds	r3, r3, r2
 8008e4c:	6802      	ldr	r2, [r0, #0]
 8008e4e:	b289      	uxth	r1, r1
 8008e50:	b292      	uxth	r2, r2
 8008e52:	4462      	add	r2, ip
 8008e54:	1a52      	subs	r2, r2, r1
 8008e56:	6801      	ldr	r1, [r0, #0]
 8008e58:	0c1d      	lsrs	r5, r3, #16
 8008e5a:	0c09      	lsrs	r1, r1, #16
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	1acb      	subs	r3, r1, r3
 8008e60:	1411      	asrs	r1, r2, #16
 8008e62:	185b      	adds	r3, r3, r1
 8008e64:	1419      	asrs	r1, r3, #16
 8008e66:	b292      	uxth	r2, r2
 8008e68:	041b      	lsls	r3, r3, #16
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	9b04      	ldr	r3, [sp, #16]
 8008e6e:	468c      	mov	ip, r1
 8008e70:	c004      	stmia	r0!, {r2}
 8008e72:	42bb      	cmp	r3, r7
 8008e74:	d2e1      	bcs.n	8008e3a <quorem+0x4a>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d030      	beq.n	8008ede <quorem+0xee>
 8008e7c:	0030      	movs	r0, r6
 8008e7e:	9903      	ldr	r1, [sp, #12]
 8008e80:	f001 f8fa 	bl	800a078 <__mcmp>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	db21      	blt.n	8008ecc <quorem+0xdc>
 8008e88:	0030      	movs	r0, r6
 8008e8a:	2400      	movs	r4, #0
 8008e8c:	9b01      	ldr	r3, [sp, #4]
 8008e8e:	9903      	ldr	r1, [sp, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	3014      	adds	r0, #20
 8008e96:	3114      	adds	r1, #20
 8008e98:	6803      	ldr	r3, [r0, #0]
 8008e9a:	c920      	ldmia	r1!, {r5}
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	1914      	adds	r4, r2, r4
 8008ea0:	b2aa      	uxth	r2, r5
 8008ea2:	1aa2      	subs	r2, r4, r2
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	0c2d      	lsrs	r5, r5, #16
 8008ea8:	1414      	asrs	r4, r2, #16
 8008eaa:	1b5b      	subs	r3, r3, r5
 8008eac:	191b      	adds	r3, r3, r4
 8008eae:	141c      	asrs	r4, r3, #16
 8008eb0:	b292      	uxth	r2, r2
 8008eb2:	041b      	lsls	r3, r3, #16
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	c008      	stmia	r0!, {r3}
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	428b      	cmp	r3, r1
 8008ebc:	d2ec      	bcs.n	8008e98 <quorem+0xa8>
 8008ebe:	9b00      	ldr	r3, [sp, #0]
 8008ec0:	9a02      	ldr	r2, [sp, #8]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	18d3      	adds	r3, r2, r3
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	2a00      	cmp	r2, #0
 8008eca:	d015      	beq.n	8008ef8 <quorem+0x108>
 8008ecc:	9801      	ldr	r0, [sp, #4]
 8008ece:	b007      	add	sp, #28
 8008ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d106      	bne.n	8008ee6 <quorem+0xf6>
 8008ed8:	9b00      	ldr	r3, [sp, #0]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	9b02      	ldr	r3, [sp, #8]
 8008ee0:	3c04      	subs	r4, #4
 8008ee2:	42a3      	cmp	r3, r4
 8008ee4:	d3f5      	bcc.n	8008ed2 <quorem+0xe2>
 8008ee6:	9b00      	ldr	r3, [sp, #0]
 8008ee8:	6133      	str	r3, [r6, #16]
 8008eea:	e7c7      	b.n	8008e7c <quorem+0x8c>
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	d106      	bne.n	8008f00 <quorem+0x110>
 8008ef2:	9a00      	ldr	r2, [sp, #0]
 8008ef4:	3a01      	subs	r2, #1
 8008ef6:	9200      	str	r2, [sp, #0]
 8008ef8:	9a02      	ldr	r2, [sp, #8]
 8008efa:	3b04      	subs	r3, #4
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d3f5      	bcc.n	8008eec <quorem+0xfc>
 8008f00:	9b00      	ldr	r3, [sp, #0]
 8008f02:	6133      	str	r3, [r6, #16]
 8008f04:	e7e2      	b.n	8008ecc <quorem+0xdc>
	...

08008f08 <_dtoa_r>:
 8008f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f0a:	b09d      	sub	sp, #116	; 0x74
 8008f0c:	9202      	str	r2, [sp, #8]
 8008f0e:	9303      	str	r3, [sp, #12]
 8008f10:	9b02      	ldr	r3, [sp, #8]
 8008f12:	9c03      	ldr	r4, [sp, #12]
 8008f14:	9308      	str	r3, [sp, #32]
 8008f16:	9409      	str	r4, [sp, #36]	; 0x24
 8008f18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f1a:	0007      	movs	r7, r0
 8008f1c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008f1e:	2c00      	cmp	r4, #0
 8008f20:	d10e      	bne.n	8008f40 <_dtoa_r+0x38>
 8008f22:	2010      	movs	r0, #16
 8008f24:	f000 fe0e 	bl	8009b44 <malloc>
 8008f28:	1e02      	subs	r2, r0, #0
 8008f2a:	6278      	str	r0, [r7, #36]	; 0x24
 8008f2c:	d104      	bne.n	8008f38 <_dtoa_r+0x30>
 8008f2e:	21ea      	movs	r1, #234	; 0xea
 8008f30:	4bc7      	ldr	r3, [pc, #796]	; (8009250 <_dtoa_r+0x348>)
 8008f32:	48c8      	ldr	r0, [pc, #800]	; (8009254 <_dtoa_r+0x34c>)
 8008f34:	f001 fc3a 	bl	800a7ac <__assert_func>
 8008f38:	6044      	str	r4, [r0, #4]
 8008f3a:	6084      	str	r4, [r0, #8]
 8008f3c:	6004      	str	r4, [r0, #0]
 8008f3e:	60c4      	str	r4, [r0, #12]
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	6819      	ldr	r1, [r3, #0]
 8008f44:	2900      	cmp	r1, #0
 8008f46:	d00a      	beq.n	8008f5e <_dtoa_r+0x56>
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	4093      	lsls	r3, r2
 8008f4e:	604a      	str	r2, [r1, #4]
 8008f50:	608b      	str	r3, [r1, #8]
 8008f52:	0038      	movs	r0, r7
 8008f54:	f000 fe50 	bl	8009bf8 <_Bfree>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	da20      	bge.n	8008fa6 <_dtoa_r+0x9e>
 8008f64:	2301      	movs	r3, #1
 8008f66:	602b      	str	r3, [r5, #0]
 8008f68:	9b03      	ldr	r3, [sp, #12]
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	085b      	lsrs	r3, r3, #1
 8008f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f72:	4bb9      	ldr	r3, [pc, #740]	; (8009258 <_dtoa_r+0x350>)
 8008f74:	4ab8      	ldr	r2, [pc, #736]	; (8009258 <_dtoa_r+0x350>)
 8008f76:	402b      	ands	r3, r5
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d117      	bne.n	8008fac <_dtoa_r+0xa4>
 8008f7c:	4bb7      	ldr	r3, [pc, #732]	; (800925c <_dtoa_r+0x354>)
 8008f7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f80:	0328      	lsls	r0, r5, #12
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	9b02      	ldr	r3, [sp, #8]
 8008f86:	0b00      	lsrs	r0, r0, #12
 8008f88:	4318      	orrs	r0, r3
 8008f8a:	d101      	bne.n	8008f90 <_dtoa_r+0x88>
 8008f8c:	f000 fdbf 	bl	8009b0e <_dtoa_r+0xc06>
 8008f90:	48b3      	ldr	r0, [pc, #716]	; (8009260 <_dtoa_r+0x358>)
 8008f92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f94:	9006      	str	r0, [sp, #24]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <_dtoa_r+0x98>
 8008f9a:	4bb2      	ldr	r3, [pc, #712]	; (8009264 <_dtoa_r+0x35c>)
 8008f9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	9806      	ldr	r0, [sp, #24]
 8008fa2:	b01d      	add	sp, #116	; 0x74
 8008fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	602b      	str	r3, [r5, #0]
 8008faa:	e7e1      	b.n	8008f70 <_dtoa_r+0x68>
 8008fac:	9b08      	ldr	r3, [sp, #32]
 8008fae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008fb0:	9312      	str	r3, [sp, #72]	; 0x48
 8008fb2:	9413      	str	r4, [sp, #76]	; 0x4c
 8008fb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008fb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f7f7 fa46 	bl	800044c <__aeabi_dcmpeq>
 8008fc0:	1e04      	subs	r4, r0, #0
 8008fc2:	d009      	beq.n	8008fd8 <_dtoa_r+0xd0>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	4ba7      	ldr	r3, [pc, #668]	; (8009268 <_dtoa_r+0x360>)
 8008fcc:	9306      	str	r3, [sp, #24]
 8008fce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0e5      	beq.n	8008fa0 <_dtoa_r+0x98>
 8008fd4:	4ba5      	ldr	r3, [pc, #660]	; (800926c <_dtoa_r+0x364>)
 8008fd6:	e7e1      	b.n	8008f9c <_dtoa_r+0x94>
 8008fd8:	ab1a      	add	r3, sp, #104	; 0x68
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	ab1b      	add	r3, sp, #108	; 0x6c
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	0038      	movs	r0, r7
 8008fe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fe6:	f001 f8fb 	bl	800a1e0 <__d2b>
 8008fea:	006e      	lsls	r6, r5, #1
 8008fec:	9005      	str	r0, [sp, #20]
 8008fee:	0d76      	lsrs	r6, r6, #21
 8008ff0:	d100      	bne.n	8008ff4 <_dtoa_r+0xec>
 8008ff2:	e07c      	b.n	80090ee <_dtoa_r+0x1e6>
 8008ff4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ff6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ffa:	4a9d      	ldr	r2, [pc, #628]	; (8009270 <_dtoa_r+0x368>)
 8008ffc:	031b      	lsls	r3, r3, #12
 8008ffe:	0b1b      	lsrs	r3, r3, #12
 8009000:	431a      	orrs	r2, r3
 8009002:	0011      	movs	r1, r2
 8009004:	4b9b      	ldr	r3, [pc, #620]	; (8009274 <_dtoa_r+0x36c>)
 8009006:	9418      	str	r4, [sp, #96]	; 0x60
 8009008:	18f6      	adds	r6, r6, r3
 800900a:	2200      	movs	r2, #0
 800900c:	4b9a      	ldr	r3, [pc, #616]	; (8009278 <_dtoa_r+0x370>)
 800900e:	f7f9 fc69 	bl	80028e4 <__aeabi_dsub>
 8009012:	4a9a      	ldr	r2, [pc, #616]	; (800927c <_dtoa_r+0x374>)
 8009014:	4b9a      	ldr	r3, [pc, #616]	; (8009280 <_dtoa_r+0x378>)
 8009016:	f7f9 f9f9 	bl	800240c <__aeabi_dmul>
 800901a:	4a9a      	ldr	r2, [pc, #616]	; (8009284 <_dtoa_r+0x37c>)
 800901c:	4b9a      	ldr	r3, [pc, #616]	; (8009288 <_dtoa_r+0x380>)
 800901e:	f7f8 fab7 	bl	8001590 <__aeabi_dadd>
 8009022:	0004      	movs	r4, r0
 8009024:	0030      	movs	r0, r6
 8009026:	000d      	movs	r5, r1
 8009028:	f7fa f842 	bl	80030b0 <__aeabi_i2d>
 800902c:	4a97      	ldr	r2, [pc, #604]	; (800928c <_dtoa_r+0x384>)
 800902e:	4b98      	ldr	r3, [pc, #608]	; (8009290 <_dtoa_r+0x388>)
 8009030:	f7f9 f9ec 	bl	800240c <__aeabi_dmul>
 8009034:	0002      	movs	r2, r0
 8009036:	000b      	movs	r3, r1
 8009038:	0020      	movs	r0, r4
 800903a:	0029      	movs	r1, r5
 800903c:	f7f8 faa8 	bl	8001590 <__aeabi_dadd>
 8009040:	0004      	movs	r4, r0
 8009042:	000d      	movs	r5, r1
 8009044:	f7f9 fffe 	bl	8003044 <__aeabi_d2iz>
 8009048:	2200      	movs	r2, #0
 800904a:	9002      	str	r0, [sp, #8]
 800904c:	2300      	movs	r3, #0
 800904e:	0020      	movs	r0, r4
 8009050:	0029      	movs	r1, r5
 8009052:	f7f7 fa01 	bl	8000458 <__aeabi_dcmplt>
 8009056:	2800      	cmp	r0, #0
 8009058:	d00b      	beq.n	8009072 <_dtoa_r+0x16a>
 800905a:	9802      	ldr	r0, [sp, #8]
 800905c:	f7fa f828 	bl	80030b0 <__aeabi_i2d>
 8009060:	002b      	movs	r3, r5
 8009062:	0022      	movs	r2, r4
 8009064:	f7f7 f9f2 	bl	800044c <__aeabi_dcmpeq>
 8009068:	4243      	negs	r3, r0
 800906a:	4158      	adcs	r0, r3
 800906c:	9b02      	ldr	r3, [sp, #8]
 800906e:	1a1b      	subs	r3, r3, r0
 8009070:	9302      	str	r3, [sp, #8]
 8009072:	2301      	movs	r3, #1
 8009074:	9316      	str	r3, [sp, #88]	; 0x58
 8009076:	9b02      	ldr	r3, [sp, #8]
 8009078:	2b16      	cmp	r3, #22
 800907a:	d80f      	bhi.n	800909c <_dtoa_r+0x194>
 800907c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800907e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009080:	00da      	lsls	r2, r3, #3
 8009082:	4b84      	ldr	r3, [pc, #528]	; (8009294 <_dtoa_r+0x38c>)
 8009084:	189b      	adds	r3, r3, r2
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f7f7 f9e5 	bl	8000458 <__aeabi_dcmplt>
 800908e:	2800      	cmp	r0, #0
 8009090:	d049      	beq.n	8009126 <_dtoa_r+0x21e>
 8009092:	9b02      	ldr	r3, [sp, #8]
 8009094:	3b01      	subs	r3, #1
 8009096:	9302      	str	r3, [sp, #8]
 8009098:	2300      	movs	r3, #0
 800909a:	9316      	str	r3, [sp, #88]	; 0x58
 800909c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800909e:	1b9e      	subs	r6, r3, r6
 80090a0:	2300      	movs	r3, #0
 80090a2:	930a      	str	r3, [sp, #40]	; 0x28
 80090a4:	0033      	movs	r3, r6
 80090a6:	3b01      	subs	r3, #1
 80090a8:	930d      	str	r3, [sp, #52]	; 0x34
 80090aa:	d504      	bpl.n	80090b6 <_dtoa_r+0x1ae>
 80090ac:	2301      	movs	r3, #1
 80090ae:	1b9b      	subs	r3, r3, r6
 80090b0:	930a      	str	r3, [sp, #40]	; 0x28
 80090b2:	2300      	movs	r3, #0
 80090b4:	930d      	str	r3, [sp, #52]	; 0x34
 80090b6:	9b02      	ldr	r3, [sp, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	db36      	blt.n	800912a <_dtoa_r+0x222>
 80090bc:	9a02      	ldr	r2, [sp, #8]
 80090be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090c0:	4694      	mov	ip, r2
 80090c2:	4463      	add	r3, ip
 80090c4:	930d      	str	r3, [sp, #52]	; 0x34
 80090c6:	2300      	movs	r3, #0
 80090c8:	9215      	str	r2, [sp, #84]	; 0x54
 80090ca:	930e      	str	r3, [sp, #56]	; 0x38
 80090cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090ce:	2401      	movs	r4, #1
 80090d0:	2b09      	cmp	r3, #9
 80090d2:	d864      	bhi.n	800919e <_dtoa_r+0x296>
 80090d4:	2b05      	cmp	r3, #5
 80090d6:	dd02      	ble.n	80090de <_dtoa_r+0x1d6>
 80090d8:	2400      	movs	r4, #0
 80090da:	3b04      	subs	r3, #4
 80090dc:	9322      	str	r3, [sp, #136]	; 0x88
 80090de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090e0:	1e98      	subs	r0, r3, #2
 80090e2:	2803      	cmp	r0, #3
 80090e4:	d864      	bhi.n	80091b0 <_dtoa_r+0x2a8>
 80090e6:	f7f7 f817 	bl	8000118 <__gnu_thumb1_case_uqi>
 80090ea:	3829      	.short	0x3829
 80090ec:	5836      	.short	0x5836
 80090ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80090f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80090f2:	189e      	adds	r6, r3, r2
 80090f4:	4b68      	ldr	r3, [pc, #416]	; (8009298 <_dtoa_r+0x390>)
 80090f6:	18f2      	adds	r2, r6, r3
 80090f8:	2a20      	cmp	r2, #32
 80090fa:	dd0f      	ble.n	800911c <_dtoa_r+0x214>
 80090fc:	2340      	movs	r3, #64	; 0x40
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	409d      	lsls	r5, r3
 8009102:	4b66      	ldr	r3, [pc, #408]	; (800929c <_dtoa_r+0x394>)
 8009104:	9802      	ldr	r0, [sp, #8]
 8009106:	18f3      	adds	r3, r6, r3
 8009108:	40d8      	lsrs	r0, r3
 800910a:	4328      	orrs	r0, r5
 800910c:	f7fa f800 	bl	8003110 <__aeabi_ui2d>
 8009110:	2301      	movs	r3, #1
 8009112:	4c63      	ldr	r4, [pc, #396]	; (80092a0 <_dtoa_r+0x398>)
 8009114:	3e01      	subs	r6, #1
 8009116:	1909      	adds	r1, r1, r4
 8009118:	9318      	str	r3, [sp, #96]	; 0x60
 800911a:	e776      	b.n	800900a <_dtoa_r+0x102>
 800911c:	2320      	movs	r3, #32
 800911e:	9802      	ldr	r0, [sp, #8]
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	4098      	lsls	r0, r3
 8009124:	e7f2      	b.n	800910c <_dtoa_r+0x204>
 8009126:	9016      	str	r0, [sp, #88]	; 0x58
 8009128:	e7b8      	b.n	800909c <_dtoa_r+0x194>
 800912a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800912c:	9a02      	ldr	r2, [sp, #8]
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	930a      	str	r3, [sp, #40]	; 0x28
 8009132:	4253      	negs	r3, r2
 8009134:	930e      	str	r3, [sp, #56]	; 0x38
 8009136:	2300      	movs	r3, #0
 8009138:	9315      	str	r3, [sp, #84]	; 0x54
 800913a:	e7c7      	b.n	80090cc <_dtoa_r+0x1c4>
 800913c:	2300      	movs	r3, #0
 800913e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009140:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009142:	930c      	str	r3, [sp, #48]	; 0x30
 8009144:	9307      	str	r3, [sp, #28]
 8009146:	2b00      	cmp	r3, #0
 8009148:	dc13      	bgt.n	8009172 <_dtoa_r+0x26a>
 800914a:	2301      	movs	r3, #1
 800914c:	001a      	movs	r2, r3
 800914e:	930c      	str	r3, [sp, #48]	; 0x30
 8009150:	9307      	str	r3, [sp, #28]
 8009152:	9223      	str	r2, [sp, #140]	; 0x8c
 8009154:	e00d      	b.n	8009172 <_dtoa_r+0x26a>
 8009156:	2301      	movs	r3, #1
 8009158:	e7f1      	b.n	800913e <_dtoa_r+0x236>
 800915a:	2300      	movs	r3, #0
 800915c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800915e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009160:	4694      	mov	ip, r2
 8009162:	9b02      	ldr	r3, [sp, #8]
 8009164:	4463      	add	r3, ip
 8009166:	930c      	str	r3, [sp, #48]	; 0x30
 8009168:	3301      	adds	r3, #1
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	2b00      	cmp	r3, #0
 800916e:	dc00      	bgt.n	8009172 <_dtoa_r+0x26a>
 8009170:	2301      	movs	r3, #1
 8009172:	2200      	movs	r2, #0
 8009174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009176:	6042      	str	r2, [r0, #4]
 8009178:	3204      	adds	r2, #4
 800917a:	0015      	movs	r5, r2
 800917c:	3514      	adds	r5, #20
 800917e:	6841      	ldr	r1, [r0, #4]
 8009180:	429d      	cmp	r5, r3
 8009182:	d919      	bls.n	80091b8 <_dtoa_r+0x2b0>
 8009184:	0038      	movs	r0, r7
 8009186:	f000 fcf3 	bl	8009b70 <_Balloc>
 800918a:	9006      	str	r0, [sp, #24]
 800918c:	2800      	cmp	r0, #0
 800918e:	d117      	bne.n	80091c0 <_dtoa_r+0x2b8>
 8009190:	21d5      	movs	r1, #213	; 0xd5
 8009192:	0002      	movs	r2, r0
 8009194:	4b43      	ldr	r3, [pc, #268]	; (80092a4 <_dtoa_r+0x39c>)
 8009196:	0049      	lsls	r1, r1, #1
 8009198:	e6cb      	b.n	8008f32 <_dtoa_r+0x2a>
 800919a:	2301      	movs	r3, #1
 800919c:	e7de      	b.n	800915c <_dtoa_r+0x254>
 800919e:	2300      	movs	r3, #0
 80091a0:	940f      	str	r4, [sp, #60]	; 0x3c
 80091a2:	9322      	str	r3, [sp, #136]	; 0x88
 80091a4:	3b01      	subs	r3, #1
 80091a6:	930c      	str	r3, [sp, #48]	; 0x30
 80091a8:	9307      	str	r3, [sp, #28]
 80091aa:	2200      	movs	r2, #0
 80091ac:	3313      	adds	r3, #19
 80091ae:	e7d0      	b.n	8009152 <_dtoa_r+0x24a>
 80091b0:	2301      	movs	r3, #1
 80091b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80091b4:	3b02      	subs	r3, #2
 80091b6:	e7f6      	b.n	80091a6 <_dtoa_r+0x29e>
 80091b8:	3101      	adds	r1, #1
 80091ba:	6041      	str	r1, [r0, #4]
 80091bc:	0052      	lsls	r2, r2, #1
 80091be:	e7dc      	b.n	800917a <_dtoa_r+0x272>
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	9a06      	ldr	r2, [sp, #24]
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	9b07      	ldr	r3, [sp, #28]
 80091c8:	2b0e      	cmp	r3, #14
 80091ca:	d900      	bls.n	80091ce <_dtoa_r+0x2c6>
 80091cc:	e0eb      	b.n	80093a6 <_dtoa_r+0x49e>
 80091ce:	2c00      	cmp	r4, #0
 80091d0:	d100      	bne.n	80091d4 <_dtoa_r+0x2cc>
 80091d2:	e0e8      	b.n	80093a6 <_dtoa_r+0x49e>
 80091d4:	9b02      	ldr	r3, [sp, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	dd68      	ble.n	80092ac <_dtoa_r+0x3a4>
 80091da:	001a      	movs	r2, r3
 80091dc:	210f      	movs	r1, #15
 80091de:	4b2d      	ldr	r3, [pc, #180]	; (8009294 <_dtoa_r+0x38c>)
 80091e0:	400a      	ands	r2, r1
 80091e2:	00d2      	lsls	r2, r2, #3
 80091e4:	189b      	adds	r3, r3, r2
 80091e6:	681d      	ldr	r5, [r3, #0]
 80091e8:	685e      	ldr	r6, [r3, #4]
 80091ea:	9b02      	ldr	r3, [sp, #8]
 80091ec:	111c      	asrs	r4, r3, #4
 80091ee:	2302      	movs	r3, #2
 80091f0:	9310      	str	r3, [sp, #64]	; 0x40
 80091f2:	9b02      	ldr	r3, [sp, #8]
 80091f4:	05db      	lsls	r3, r3, #23
 80091f6:	d50b      	bpl.n	8009210 <_dtoa_r+0x308>
 80091f8:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <_dtoa_r+0x3a0>)
 80091fa:	400c      	ands	r4, r1
 80091fc:	6a1a      	ldr	r2, [r3, #32]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009202:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009204:	f7f8 fd00 	bl	8001c08 <__aeabi_ddiv>
 8009208:	2303      	movs	r3, #3
 800920a:	9008      	str	r0, [sp, #32]
 800920c:	9109      	str	r1, [sp, #36]	; 0x24
 800920e:	9310      	str	r3, [sp, #64]	; 0x40
 8009210:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <_dtoa_r+0x3a0>)
 8009212:	9314      	str	r3, [sp, #80]	; 0x50
 8009214:	2c00      	cmp	r4, #0
 8009216:	d108      	bne.n	800922a <_dtoa_r+0x322>
 8009218:	9808      	ldr	r0, [sp, #32]
 800921a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800921c:	002a      	movs	r2, r5
 800921e:	0033      	movs	r3, r6
 8009220:	f7f8 fcf2 	bl	8001c08 <__aeabi_ddiv>
 8009224:	9008      	str	r0, [sp, #32]
 8009226:	9109      	str	r1, [sp, #36]	; 0x24
 8009228:	e05c      	b.n	80092e4 <_dtoa_r+0x3dc>
 800922a:	2301      	movs	r3, #1
 800922c:	421c      	tst	r4, r3
 800922e:	d00b      	beq.n	8009248 <_dtoa_r+0x340>
 8009230:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009232:	0028      	movs	r0, r5
 8009234:	3301      	adds	r3, #1
 8009236:	9310      	str	r3, [sp, #64]	; 0x40
 8009238:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800923a:	0031      	movs	r1, r6
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f7f9 f8e4 	bl	800240c <__aeabi_dmul>
 8009244:	0005      	movs	r5, r0
 8009246:	000e      	movs	r6, r1
 8009248:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800924a:	1064      	asrs	r4, r4, #1
 800924c:	3308      	adds	r3, #8
 800924e:	e7e0      	b.n	8009212 <_dtoa_r+0x30a>
 8009250:	0800b685 	.word	0x0800b685
 8009254:	0800b69c 	.word	0x0800b69c
 8009258:	7ff00000 	.word	0x7ff00000
 800925c:	0000270f 	.word	0x0000270f
 8009260:	0800b681 	.word	0x0800b681
 8009264:	0800b684 	.word	0x0800b684
 8009268:	0800b654 	.word	0x0800b654
 800926c:	0800b655 	.word	0x0800b655
 8009270:	3ff00000 	.word	0x3ff00000
 8009274:	fffffc01 	.word	0xfffffc01
 8009278:	3ff80000 	.word	0x3ff80000
 800927c:	636f4361 	.word	0x636f4361
 8009280:	3fd287a7 	.word	0x3fd287a7
 8009284:	8b60c8b3 	.word	0x8b60c8b3
 8009288:	3fc68a28 	.word	0x3fc68a28
 800928c:	509f79fb 	.word	0x509f79fb
 8009290:	3fd34413 	.word	0x3fd34413
 8009294:	0800b790 	.word	0x0800b790
 8009298:	00000432 	.word	0x00000432
 800929c:	00000412 	.word	0x00000412
 80092a0:	fe100000 	.word	0xfe100000
 80092a4:	0800b6f7 	.word	0x0800b6f7
 80092a8:	0800b768 	.word	0x0800b768
 80092ac:	2302      	movs	r3, #2
 80092ae:	9310      	str	r3, [sp, #64]	; 0x40
 80092b0:	9b02      	ldr	r3, [sp, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d016      	beq.n	80092e4 <_dtoa_r+0x3dc>
 80092b6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80092b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80092ba:	425c      	negs	r4, r3
 80092bc:	230f      	movs	r3, #15
 80092be:	4ab6      	ldr	r2, [pc, #728]	; (8009598 <_dtoa_r+0x690>)
 80092c0:	4023      	ands	r3, r4
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	18d3      	adds	r3, r2, r3
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f7f9 f89f 	bl	800240c <__aeabi_dmul>
 80092ce:	2601      	movs	r6, #1
 80092d0:	2300      	movs	r3, #0
 80092d2:	9008      	str	r0, [sp, #32]
 80092d4:	9109      	str	r1, [sp, #36]	; 0x24
 80092d6:	4db1      	ldr	r5, [pc, #708]	; (800959c <_dtoa_r+0x694>)
 80092d8:	1124      	asrs	r4, r4, #4
 80092da:	2c00      	cmp	r4, #0
 80092dc:	d000      	beq.n	80092e0 <_dtoa_r+0x3d8>
 80092de:	e094      	b.n	800940a <_dtoa_r+0x502>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d19f      	bne.n	8009224 <_dtoa_r+0x31c>
 80092e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d100      	bne.n	80092ec <_dtoa_r+0x3e4>
 80092ea:	e09b      	b.n	8009424 <_dtoa_r+0x51c>
 80092ec:	9c08      	ldr	r4, [sp, #32]
 80092ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80092f0:	2200      	movs	r2, #0
 80092f2:	0020      	movs	r0, r4
 80092f4:	0029      	movs	r1, r5
 80092f6:	4baa      	ldr	r3, [pc, #680]	; (80095a0 <_dtoa_r+0x698>)
 80092f8:	f7f7 f8ae 	bl	8000458 <__aeabi_dcmplt>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d100      	bne.n	8009302 <_dtoa_r+0x3fa>
 8009300:	e090      	b.n	8009424 <_dtoa_r+0x51c>
 8009302:	9b07      	ldr	r3, [sp, #28]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d100      	bne.n	800930a <_dtoa_r+0x402>
 8009308:	e08c      	b.n	8009424 <_dtoa_r+0x51c>
 800930a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800930c:	2b00      	cmp	r3, #0
 800930e:	dd46      	ble.n	800939e <_dtoa_r+0x496>
 8009310:	9b02      	ldr	r3, [sp, #8]
 8009312:	2200      	movs	r2, #0
 8009314:	0020      	movs	r0, r4
 8009316:	0029      	movs	r1, r5
 8009318:	1e5e      	subs	r6, r3, #1
 800931a:	4ba2      	ldr	r3, [pc, #648]	; (80095a4 <_dtoa_r+0x69c>)
 800931c:	f7f9 f876 	bl	800240c <__aeabi_dmul>
 8009320:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009322:	9008      	str	r0, [sp, #32]
 8009324:	9109      	str	r1, [sp, #36]	; 0x24
 8009326:	3301      	adds	r3, #1
 8009328:	9310      	str	r3, [sp, #64]	; 0x40
 800932a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800932c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800932e:	9c08      	ldr	r4, [sp, #32]
 8009330:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009332:	9314      	str	r3, [sp, #80]	; 0x50
 8009334:	f7f9 febc 	bl	80030b0 <__aeabi_i2d>
 8009338:	0022      	movs	r2, r4
 800933a:	002b      	movs	r3, r5
 800933c:	f7f9 f866 	bl	800240c <__aeabi_dmul>
 8009340:	2200      	movs	r2, #0
 8009342:	4b99      	ldr	r3, [pc, #612]	; (80095a8 <_dtoa_r+0x6a0>)
 8009344:	f7f8 f924 	bl	8001590 <__aeabi_dadd>
 8009348:	9010      	str	r0, [sp, #64]	; 0x40
 800934a:	9111      	str	r1, [sp, #68]	; 0x44
 800934c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800934e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009350:	9208      	str	r2, [sp, #32]
 8009352:	9309      	str	r3, [sp, #36]	; 0x24
 8009354:	4a95      	ldr	r2, [pc, #596]	; (80095ac <_dtoa_r+0x6a4>)
 8009356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009358:	4694      	mov	ip, r2
 800935a:	4463      	add	r3, ip
 800935c:	9317      	str	r3, [sp, #92]	; 0x5c
 800935e:	9309      	str	r3, [sp, #36]	; 0x24
 8009360:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009362:	2b00      	cmp	r3, #0
 8009364:	d161      	bne.n	800942a <_dtoa_r+0x522>
 8009366:	2200      	movs	r2, #0
 8009368:	0020      	movs	r0, r4
 800936a:	0029      	movs	r1, r5
 800936c:	4b90      	ldr	r3, [pc, #576]	; (80095b0 <_dtoa_r+0x6a8>)
 800936e:	f7f9 fab9 	bl	80028e4 <__aeabi_dsub>
 8009372:	9a08      	ldr	r2, [sp, #32]
 8009374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009376:	0004      	movs	r4, r0
 8009378:	000d      	movs	r5, r1
 800937a:	f7f7 f881 	bl	8000480 <__aeabi_dcmpgt>
 800937e:	2800      	cmp	r0, #0
 8009380:	d000      	beq.n	8009384 <_dtoa_r+0x47c>
 8009382:	e2af      	b.n	80098e4 <_dtoa_r+0x9dc>
 8009384:	488b      	ldr	r0, [pc, #556]	; (80095b4 <_dtoa_r+0x6ac>)
 8009386:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009388:	4684      	mov	ip, r0
 800938a:	4461      	add	r1, ip
 800938c:	000b      	movs	r3, r1
 800938e:	0020      	movs	r0, r4
 8009390:	0029      	movs	r1, r5
 8009392:	9a08      	ldr	r2, [sp, #32]
 8009394:	f7f7 f860 	bl	8000458 <__aeabi_dcmplt>
 8009398:	2800      	cmp	r0, #0
 800939a:	d000      	beq.n	800939e <_dtoa_r+0x496>
 800939c:	e29f      	b.n	80098de <_dtoa_r+0x9d6>
 800939e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80093a2:	9308      	str	r3, [sp, #32]
 80093a4:	9409      	str	r4, [sp, #36]	; 0x24
 80093a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	da00      	bge.n	80093ae <_dtoa_r+0x4a6>
 80093ac:	e172      	b.n	8009694 <_dtoa_r+0x78c>
 80093ae:	9a02      	ldr	r2, [sp, #8]
 80093b0:	2a0e      	cmp	r2, #14
 80093b2:	dd00      	ble.n	80093b6 <_dtoa_r+0x4ae>
 80093b4:	e16e      	b.n	8009694 <_dtoa_r+0x78c>
 80093b6:	4b78      	ldr	r3, [pc, #480]	; (8009598 <_dtoa_r+0x690>)
 80093b8:	00d2      	lsls	r2, r2, #3
 80093ba:	189b      	adds	r3, r3, r2
 80093bc:	685c      	ldr	r4, [r3, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	930a      	str	r3, [sp, #40]	; 0x28
 80093c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80093c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	db00      	blt.n	80093cc <_dtoa_r+0x4c4>
 80093ca:	e0f7      	b.n	80095bc <_dtoa_r+0x6b4>
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	dd00      	ble.n	80093d4 <_dtoa_r+0x4cc>
 80093d2:	e0f3      	b.n	80095bc <_dtoa_r+0x6b4>
 80093d4:	d000      	beq.n	80093d8 <_dtoa_r+0x4d0>
 80093d6:	e282      	b.n	80098de <_dtoa_r+0x9d6>
 80093d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093dc:	2200      	movs	r2, #0
 80093de:	4b74      	ldr	r3, [pc, #464]	; (80095b0 <_dtoa_r+0x6a8>)
 80093e0:	f7f9 f814 	bl	800240c <__aeabi_dmul>
 80093e4:	9a08      	ldr	r2, [sp, #32]
 80093e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e8:	f7f7 f854 	bl	8000494 <__aeabi_dcmpge>
 80093ec:	9e07      	ldr	r6, [sp, #28]
 80093ee:	0035      	movs	r5, r6
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d000      	beq.n	80093f6 <_dtoa_r+0x4ee>
 80093f4:	e259      	b.n	80098aa <_dtoa_r+0x9a2>
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	9a06      	ldr	r2, [sp, #24]
 80093fa:	3301      	adds	r3, #1
 80093fc:	9308      	str	r3, [sp, #32]
 80093fe:	2331      	movs	r3, #49	; 0x31
 8009400:	7013      	strb	r3, [r2, #0]
 8009402:	9b02      	ldr	r3, [sp, #8]
 8009404:	3301      	adds	r3, #1
 8009406:	9302      	str	r3, [sp, #8]
 8009408:	e254      	b.n	80098b4 <_dtoa_r+0x9ac>
 800940a:	4234      	tst	r4, r6
 800940c:	d007      	beq.n	800941e <_dtoa_r+0x516>
 800940e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009410:	3301      	adds	r3, #1
 8009412:	9310      	str	r3, [sp, #64]	; 0x40
 8009414:	682a      	ldr	r2, [r5, #0]
 8009416:	686b      	ldr	r3, [r5, #4]
 8009418:	f7f8 fff8 	bl	800240c <__aeabi_dmul>
 800941c:	0033      	movs	r3, r6
 800941e:	1064      	asrs	r4, r4, #1
 8009420:	3508      	adds	r5, #8
 8009422:	e75a      	b.n	80092da <_dtoa_r+0x3d2>
 8009424:	9e02      	ldr	r6, [sp, #8]
 8009426:	9b07      	ldr	r3, [sp, #28]
 8009428:	e780      	b.n	800932c <_dtoa_r+0x424>
 800942a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800942c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800942e:	1e5a      	subs	r2, r3, #1
 8009430:	4b59      	ldr	r3, [pc, #356]	; (8009598 <_dtoa_r+0x690>)
 8009432:	00d2      	lsls	r2, r2, #3
 8009434:	189b      	adds	r3, r3, r2
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	2900      	cmp	r1, #0
 800943c:	d051      	beq.n	80094e2 <_dtoa_r+0x5da>
 800943e:	2000      	movs	r0, #0
 8009440:	495d      	ldr	r1, [pc, #372]	; (80095b8 <_dtoa_r+0x6b0>)
 8009442:	f7f8 fbe1 	bl	8001c08 <__aeabi_ddiv>
 8009446:	9a08      	ldr	r2, [sp, #32]
 8009448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944a:	f7f9 fa4b 	bl	80028e4 <__aeabi_dsub>
 800944e:	9a06      	ldr	r2, [sp, #24]
 8009450:	9b06      	ldr	r3, [sp, #24]
 8009452:	4694      	mov	ip, r2
 8009454:	9317      	str	r3, [sp, #92]	; 0x5c
 8009456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009458:	9010      	str	r0, [sp, #64]	; 0x40
 800945a:	9111      	str	r1, [sp, #68]	; 0x44
 800945c:	4463      	add	r3, ip
 800945e:	9319      	str	r3, [sp, #100]	; 0x64
 8009460:	0029      	movs	r1, r5
 8009462:	0020      	movs	r0, r4
 8009464:	f7f9 fdee 	bl	8003044 <__aeabi_d2iz>
 8009468:	9014      	str	r0, [sp, #80]	; 0x50
 800946a:	f7f9 fe21 	bl	80030b0 <__aeabi_i2d>
 800946e:	0002      	movs	r2, r0
 8009470:	000b      	movs	r3, r1
 8009472:	0020      	movs	r0, r4
 8009474:	0029      	movs	r1, r5
 8009476:	f7f9 fa35 	bl	80028e4 <__aeabi_dsub>
 800947a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800947c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800947e:	3301      	adds	r3, #1
 8009480:	9308      	str	r3, [sp, #32]
 8009482:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009484:	0004      	movs	r4, r0
 8009486:	3330      	adds	r3, #48	; 0x30
 8009488:	7013      	strb	r3, [r2, #0]
 800948a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800948c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800948e:	000d      	movs	r5, r1
 8009490:	f7f6 ffe2 	bl	8000458 <__aeabi_dcmplt>
 8009494:	2800      	cmp	r0, #0
 8009496:	d175      	bne.n	8009584 <_dtoa_r+0x67c>
 8009498:	0022      	movs	r2, r4
 800949a:	002b      	movs	r3, r5
 800949c:	2000      	movs	r0, #0
 800949e:	4940      	ldr	r1, [pc, #256]	; (80095a0 <_dtoa_r+0x698>)
 80094a0:	f7f9 fa20 	bl	80028e4 <__aeabi_dsub>
 80094a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094a8:	f7f6 ffd6 	bl	8000458 <__aeabi_dcmplt>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d000      	beq.n	80094b2 <_dtoa_r+0x5aa>
 80094b0:	e0d2      	b.n	8009658 <_dtoa_r+0x750>
 80094b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094b4:	9a08      	ldr	r2, [sp, #32]
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d100      	bne.n	80094bc <_dtoa_r+0x5b4>
 80094ba:	e770      	b.n	800939e <_dtoa_r+0x496>
 80094bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80094be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80094c0:	2200      	movs	r2, #0
 80094c2:	4b38      	ldr	r3, [pc, #224]	; (80095a4 <_dtoa_r+0x69c>)
 80094c4:	f7f8 ffa2 	bl	800240c <__aeabi_dmul>
 80094c8:	4b36      	ldr	r3, [pc, #216]	; (80095a4 <_dtoa_r+0x69c>)
 80094ca:	9010      	str	r0, [sp, #64]	; 0x40
 80094cc:	9111      	str	r1, [sp, #68]	; 0x44
 80094ce:	2200      	movs	r2, #0
 80094d0:	0020      	movs	r0, r4
 80094d2:	0029      	movs	r1, r5
 80094d4:	f7f8 ff9a 	bl	800240c <__aeabi_dmul>
 80094d8:	9b08      	ldr	r3, [sp, #32]
 80094da:	0004      	movs	r4, r0
 80094dc:	000d      	movs	r5, r1
 80094de:	9317      	str	r3, [sp, #92]	; 0x5c
 80094e0:	e7be      	b.n	8009460 <_dtoa_r+0x558>
 80094e2:	9808      	ldr	r0, [sp, #32]
 80094e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094e6:	f7f8 ff91 	bl	800240c <__aeabi_dmul>
 80094ea:	9a06      	ldr	r2, [sp, #24]
 80094ec:	9b06      	ldr	r3, [sp, #24]
 80094ee:	4694      	mov	ip, r2
 80094f0:	9308      	str	r3, [sp, #32]
 80094f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094f4:	9010      	str	r0, [sp, #64]	; 0x40
 80094f6:	9111      	str	r1, [sp, #68]	; 0x44
 80094f8:	4463      	add	r3, ip
 80094fa:	9319      	str	r3, [sp, #100]	; 0x64
 80094fc:	0029      	movs	r1, r5
 80094fe:	0020      	movs	r0, r4
 8009500:	f7f9 fda0 	bl	8003044 <__aeabi_d2iz>
 8009504:	9017      	str	r0, [sp, #92]	; 0x5c
 8009506:	f7f9 fdd3 	bl	80030b0 <__aeabi_i2d>
 800950a:	0002      	movs	r2, r0
 800950c:	000b      	movs	r3, r1
 800950e:	0020      	movs	r0, r4
 8009510:	0029      	movs	r1, r5
 8009512:	f7f9 f9e7 	bl	80028e4 <__aeabi_dsub>
 8009516:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009518:	9a08      	ldr	r2, [sp, #32]
 800951a:	3330      	adds	r3, #48	; 0x30
 800951c:	7013      	strb	r3, [r2, #0]
 800951e:	0013      	movs	r3, r2
 8009520:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009522:	3301      	adds	r3, #1
 8009524:	0004      	movs	r4, r0
 8009526:	000d      	movs	r5, r1
 8009528:	9308      	str	r3, [sp, #32]
 800952a:	4293      	cmp	r3, r2
 800952c:	d12c      	bne.n	8009588 <_dtoa_r+0x680>
 800952e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009530:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009532:	9a06      	ldr	r2, [sp, #24]
 8009534:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009536:	4694      	mov	ip, r2
 8009538:	4463      	add	r3, ip
 800953a:	2200      	movs	r2, #0
 800953c:	9308      	str	r3, [sp, #32]
 800953e:	4b1e      	ldr	r3, [pc, #120]	; (80095b8 <_dtoa_r+0x6b0>)
 8009540:	f7f8 f826 	bl	8001590 <__aeabi_dadd>
 8009544:	0002      	movs	r2, r0
 8009546:	000b      	movs	r3, r1
 8009548:	0020      	movs	r0, r4
 800954a:	0029      	movs	r1, r5
 800954c:	f7f6 ff98 	bl	8000480 <__aeabi_dcmpgt>
 8009550:	2800      	cmp	r0, #0
 8009552:	d000      	beq.n	8009556 <_dtoa_r+0x64e>
 8009554:	e080      	b.n	8009658 <_dtoa_r+0x750>
 8009556:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800955a:	2000      	movs	r0, #0
 800955c:	4916      	ldr	r1, [pc, #88]	; (80095b8 <_dtoa_r+0x6b0>)
 800955e:	f7f9 f9c1 	bl	80028e4 <__aeabi_dsub>
 8009562:	0002      	movs	r2, r0
 8009564:	000b      	movs	r3, r1
 8009566:	0020      	movs	r0, r4
 8009568:	0029      	movs	r1, r5
 800956a:	f7f6 ff75 	bl	8000458 <__aeabi_dcmplt>
 800956e:	2800      	cmp	r0, #0
 8009570:	d100      	bne.n	8009574 <_dtoa_r+0x66c>
 8009572:	e714      	b.n	800939e <_dtoa_r+0x496>
 8009574:	9b08      	ldr	r3, [sp, #32]
 8009576:	001a      	movs	r2, r3
 8009578:	3a01      	subs	r2, #1
 800957a:	9208      	str	r2, [sp, #32]
 800957c:	7812      	ldrb	r2, [r2, #0]
 800957e:	2a30      	cmp	r2, #48	; 0x30
 8009580:	d0f8      	beq.n	8009574 <_dtoa_r+0x66c>
 8009582:	9308      	str	r3, [sp, #32]
 8009584:	9602      	str	r6, [sp, #8]
 8009586:	e055      	b.n	8009634 <_dtoa_r+0x72c>
 8009588:	2200      	movs	r2, #0
 800958a:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <_dtoa_r+0x69c>)
 800958c:	f7f8 ff3e 	bl	800240c <__aeabi_dmul>
 8009590:	0004      	movs	r4, r0
 8009592:	000d      	movs	r5, r1
 8009594:	e7b2      	b.n	80094fc <_dtoa_r+0x5f4>
 8009596:	46c0      	nop			; (mov r8, r8)
 8009598:	0800b790 	.word	0x0800b790
 800959c:	0800b768 	.word	0x0800b768
 80095a0:	3ff00000 	.word	0x3ff00000
 80095a4:	40240000 	.word	0x40240000
 80095a8:	401c0000 	.word	0x401c0000
 80095ac:	fcc00000 	.word	0xfcc00000
 80095b0:	40140000 	.word	0x40140000
 80095b4:	7cc00000 	.word	0x7cc00000
 80095b8:	3fe00000 	.word	0x3fe00000
 80095bc:	9b07      	ldr	r3, [sp, #28]
 80095be:	9e06      	ldr	r6, [sp, #24]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	199b      	adds	r3, r3, r6
 80095c4:	930c      	str	r3, [sp, #48]	; 0x30
 80095c6:	9c08      	ldr	r4, [sp, #32]
 80095c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ce:	0020      	movs	r0, r4
 80095d0:	0029      	movs	r1, r5
 80095d2:	f7f8 fb19 	bl	8001c08 <__aeabi_ddiv>
 80095d6:	f7f9 fd35 	bl	8003044 <__aeabi_d2iz>
 80095da:	9007      	str	r0, [sp, #28]
 80095dc:	f7f9 fd68 	bl	80030b0 <__aeabi_i2d>
 80095e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e4:	f7f8 ff12 	bl	800240c <__aeabi_dmul>
 80095e8:	0002      	movs	r2, r0
 80095ea:	000b      	movs	r3, r1
 80095ec:	0020      	movs	r0, r4
 80095ee:	0029      	movs	r1, r5
 80095f0:	f7f9 f978 	bl	80028e4 <__aeabi_dsub>
 80095f4:	0033      	movs	r3, r6
 80095f6:	9a07      	ldr	r2, [sp, #28]
 80095f8:	3601      	adds	r6, #1
 80095fa:	3230      	adds	r2, #48	; 0x30
 80095fc:	701a      	strb	r2, [r3, #0]
 80095fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009600:	9608      	str	r6, [sp, #32]
 8009602:	429a      	cmp	r2, r3
 8009604:	d139      	bne.n	800967a <_dtoa_r+0x772>
 8009606:	0002      	movs	r2, r0
 8009608:	000b      	movs	r3, r1
 800960a:	f7f7 ffc1 	bl	8001590 <__aeabi_dadd>
 800960e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009612:	0004      	movs	r4, r0
 8009614:	000d      	movs	r5, r1
 8009616:	f7f6 ff33 	bl	8000480 <__aeabi_dcmpgt>
 800961a:	2800      	cmp	r0, #0
 800961c:	d11b      	bne.n	8009656 <_dtoa_r+0x74e>
 800961e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009622:	0020      	movs	r0, r4
 8009624:	0029      	movs	r1, r5
 8009626:	f7f6 ff11 	bl	800044c <__aeabi_dcmpeq>
 800962a:	2800      	cmp	r0, #0
 800962c:	d002      	beq.n	8009634 <_dtoa_r+0x72c>
 800962e:	9b07      	ldr	r3, [sp, #28]
 8009630:	07db      	lsls	r3, r3, #31
 8009632:	d410      	bmi.n	8009656 <_dtoa_r+0x74e>
 8009634:	0038      	movs	r0, r7
 8009636:	9905      	ldr	r1, [sp, #20]
 8009638:	f000 fade 	bl	8009bf8 <_Bfree>
 800963c:	2300      	movs	r3, #0
 800963e:	9a08      	ldr	r2, [sp, #32]
 8009640:	9802      	ldr	r0, [sp, #8]
 8009642:	7013      	strb	r3, [r2, #0]
 8009644:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009646:	3001      	adds	r0, #1
 8009648:	6018      	str	r0, [r3, #0]
 800964a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800964c:	2b00      	cmp	r3, #0
 800964e:	d100      	bne.n	8009652 <_dtoa_r+0x74a>
 8009650:	e4a6      	b.n	8008fa0 <_dtoa_r+0x98>
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	e4a4      	b.n	8008fa0 <_dtoa_r+0x98>
 8009656:	9e02      	ldr	r6, [sp, #8]
 8009658:	9b08      	ldr	r3, [sp, #32]
 800965a:	9308      	str	r3, [sp, #32]
 800965c:	3b01      	subs	r3, #1
 800965e:	781a      	ldrb	r2, [r3, #0]
 8009660:	2a39      	cmp	r2, #57	; 0x39
 8009662:	d106      	bne.n	8009672 <_dtoa_r+0x76a>
 8009664:	9a06      	ldr	r2, [sp, #24]
 8009666:	429a      	cmp	r2, r3
 8009668:	d1f7      	bne.n	800965a <_dtoa_r+0x752>
 800966a:	2230      	movs	r2, #48	; 0x30
 800966c:	9906      	ldr	r1, [sp, #24]
 800966e:	3601      	adds	r6, #1
 8009670:	700a      	strb	r2, [r1, #0]
 8009672:	781a      	ldrb	r2, [r3, #0]
 8009674:	3201      	adds	r2, #1
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	e784      	b.n	8009584 <_dtoa_r+0x67c>
 800967a:	2200      	movs	r2, #0
 800967c:	4baa      	ldr	r3, [pc, #680]	; (8009928 <_dtoa_r+0xa20>)
 800967e:	f7f8 fec5 	bl	800240c <__aeabi_dmul>
 8009682:	2200      	movs	r2, #0
 8009684:	2300      	movs	r3, #0
 8009686:	0004      	movs	r4, r0
 8009688:	000d      	movs	r5, r1
 800968a:	f7f6 fedf 	bl	800044c <__aeabi_dcmpeq>
 800968e:	2800      	cmp	r0, #0
 8009690:	d09b      	beq.n	80095ca <_dtoa_r+0x6c2>
 8009692:	e7cf      	b.n	8009634 <_dtoa_r+0x72c>
 8009694:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009696:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009698:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800969a:	2d00      	cmp	r5, #0
 800969c:	d012      	beq.n	80096c4 <_dtoa_r+0x7bc>
 800969e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80096a0:	2a01      	cmp	r2, #1
 80096a2:	dc66      	bgt.n	8009772 <_dtoa_r+0x86a>
 80096a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	d05d      	beq.n	8009766 <_dtoa_r+0x85e>
 80096aa:	4aa0      	ldr	r2, [pc, #640]	; (800992c <_dtoa_r+0xa24>)
 80096ac:	189b      	adds	r3, r3, r2
 80096ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096b0:	2101      	movs	r1, #1
 80096b2:	18d2      	adds	r2, r2, r3
 80096b4:	920a      	str	r2, [sp, #40]	; 0x28
 80096b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096b8:	0038      	movs	r0, r7
 80096ba:	18d3      	adds	r3, r2, r3
 80096bc:	930d      	str	r3, [sp, #52]	; 0x34
 80096be:	f000 fb4b 	bl	8009d58 <__i2b>
 80096c2:	0005      	movs	r5, r0
 80096c4:	2c00      	cmp	r4, #0
 80096c6:	dd0e      	ble.n	80096e6 <_dtoa_r+0x7de>
 80096c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dd0b      	ble.n	80096e6 <_dtoa_r+0x7de>
 80096ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096d0:	0023      	movs	r3, r4
 80096d2:	4294      	cmp	r4, r2
 80096d4:	dd00      	ble.n	80096d8 <_dtoa_r+0x7d0>
 80096d6:	0013      	movs	r3, r2
 80096d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096da:	1ae4      	subs	r4, r4, r3
 80096dc:	1ad2      	subs	r2, r2, r3
 80096de:	920a      	str	r2, [sp, #40]	; 0x28
 80096e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	930d      	str	r3, [sp, #52]	; 0x34
 80096e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01f      	beq.n	800972c <_dtoa_r+0x824>
 80096ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d054      	beq.n	800979c <_dtoa_r+0x894>
 80096f2:	2e00      	cmp	r6, #0
 80096f4:	dd11      	ble.n	800971a <_dtoa_r+0x812>
 80096f6:	0029      	movs	r1, r5
 80096f8:	0032      	movs	r2, r6
 80096fa:	0038      	movs	r0, r7
 80096fc:	f000 fbf2 	bl	8009ee4 <__pow5mult>
 8009700:	9a05      	ldr	r2, [sp, #20]
 8009702:	0001      	movs	r1, r0
 8009704:	0005      	movs	r5, r0
 8009706:	0038      	movs	r0, r7
 8009708:	f000 fb3c 	bl	8009d84 <__multiply>
 800970c:	9905      	ldr	r1, [sp, #20]
 800970e:	9014      	str	r0, [sp, #80]	; 0x50
 8009710:	0038      	movs	r0, r7
 8009712:	f000 fa71 	bl	8009bf8 <_Bfree>
 8009716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800971c:	1b9a      	subs	r2, r3, r6
 800971e:	42b3      	cmp	r3, r6
 8009720:	d004      	beq.n	800972c <_dtoa_r+0x824>
 8009722:	0038      	movs	r0, r7
 8009724:	9905      	ldr	r1, [sp, #20]
 8009726:	f000 fbdd 	bl	8009ee4 <__pow5mult>
 800972a:	9005      	str	r0, [sp, #20]
 800972c:	2101      	movs	r1, #1
 800972e:	0038      	movs	r0, r7
 8009730:	f000 fb12 	bl	8009d58 <__i2b>
 8009734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009736:	0006      	movs	r6, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	dd31      	ble.n	80097a0 <_dtoa_r+0x898>
 800973c:	001a      	movs	r2, r3
 800973e:	0001      	movs	r1, r0
 8009740:	0038      	movs	r0, r7
 8009742:	f000 fbcf 	bl	8009ee4 <__pow5mult>
 8009746:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009748:	0006      	movs	r6, r0
 800974a:	2b01      	cmp	r3, #1
 800974c:	dd2d      	ble.n	80097aa <_dtoa_r+0x8a2>
 800974e:	2300      	movs	r3, #0
 8009750:	930e      	str	r3, [sp, #56]	; 0x38
 8009752:	6933      	ldr	r3, [r6, #16]
 8009754:	3303      	adds	r3, #3
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	18f3      	adds	r3, r6, r3
 800975a:	6858      	ldr	r0, [r3, #4]
 800975c:	f000 fab4 	bl	8009cc8 <__hi0bits>
 8009760:	2320      	movs	r3, #32
 8009762:	1a18      	subs	r0, r3, r0
 8009764:	e039      	b.n	80097da <_dtoa_r+0x8d2>
 8009766:	2336      	movs	r3, #54	; 0x36
 8009768:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800976a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800976c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800976e:	1a9b      	subs	r3, r3, r2
 8009770:	e79d      	b.n	80096ae <_dtoa_r+0x7a6>
 8009772:	9b07      	ldr	r3, [sp, #28]
 8009774:	1e5e      	subs	r6, r3, #1
 8009776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009778:	42b3      	cmp	r3, r6
 800977a:	db07      	blt.n	800978c <_dtoa_r+0x884>
 800977c:	1b9e      	subs	r6, r3, r6
 800977e:	9b07      	ldr	r3, [sp, #28]
 8009780:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009782:	2b00      	cmp	r3, #0
 8009784:	da93      	bge.n	80096ae <_dtoa_r+0x7a6>
 8009786:	1ae4      	subs	r4, r4, r3
 8009788:	2300      	movs	r3, #0
 800978a:	e790      	b.n	80096ae <_dtoa_r+0x7a6>
 800978c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800978e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009790:	1af3      	subs	r3, r6, r3
 8009792:	18d3      	adds	r3, r2, r3
 8009794:	960e      	str	r6, [sp, #56]	; 0x38
 8009796:	9315      	str	r3, [sp, #84]	; 0x54
 8009798:	2600      	movs	r6, #0
 800979a:	e7f0      	b.n	800977e <_dtoa_r+0x876>
 800979c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800979e:	e7c0      	b.n	8009722 <_dtoa_r+0x81a>
 80097a0:	2300      	movs	r3, #0
 80097a2:	930e      	str	r3, [sp, #56]	; 0x38
 80097a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	dc13      	bgt.n	80097d2 <_dtoa_r+0x8ca>
 80097aa:	2300      	movs	r3, #0
 80097ac:	930e      	str	r3, [sp, #56]	; 0x38
 80097ae:	9b08      	ldr	r3, [sp, #32]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10e      	bne.n	80097d2 <_dtoa_r+0x8ca>
 80097b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b6:	031b      	lsls	r3, r3, #12
 80097b8:	d10b      	bne.n	80097d2 <_dtoa_r+0x8ca>
 80097ba:	4b5d      	ldr	r3, [pc, #372]	; (8009930 <_dtoa_r+0xa28>)
 80097bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097be:	4213      	tst	r3, r2
 80097c0:	d007      	beq.n	80097d2 <_dtoa_r+0x8ca>
 80097c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c4:	3301      	adds	r3, #1
 80097c6:	930a      	str	r3, [sp, #40]	; 0x28
 80097c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097ca:	3301      	adds	r3, #1
 80097cc:	930d      	str	r3, [sp, #52]	; 0x34
 80097ce:	2301      	movs	r3, #1
 80097d0:	930e      	str	r3, [sp, #56]	; 0x38
 80097d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097d4:	2001      	movs	r0, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1bb      	bne.n	8009752 <_dtoa_r+0x84a>
 80097da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097dc:	221f      	movs	r2, #31
 80097de:	1818      	adds	r0, r3, r0
 80097e0:	0003      	movs	r3, r0
 80097e2:	4013      	ands	r3, r2
 80097e4:	4210      	tst	r0, r2
 80097e6:	d046      	beq.n	8009876 <_dtoa_r+0x96e>
 80097e8:	3201      	adds	r2, #1
 80097ea:	1ad2      	subs	r2, r2, r3
 80097ec:	2a04      	cmp	r2, #4
 80097ee:	dd3f      	ble.n	8009870 <_dtoa_r+0x968>
 80097f0:	221c      	movs	r2, #28
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097f6:	18e4      	adds	r4, r4, r3
 80097f8:	18d2      	adds	r2, r2, r3
 80097fa:	920a      	str	r2, [sp, #40]	; 0x28
 80097fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097fe:	18d3      	adds	r3, r2, r3
 8009800:	930d      	str	r3, [sp, #52]	; 0x34
 8009802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009804:	2b00      	cmp	r3, #0
 8009806:	dd05      	ble.n	8009814 <_dtoa_r+0x90c>
 8009808:	001a      	movs	r2, r3
 800980a:	0038      	movs	r0, r7
 800980c:	9905      	ldr	r1, [sp, #20]
 800980e:	f000 fbc5 	bl	8009f9c <__lshift>
 8009812:	9005      	str	r0, [sp, #20]
 8009814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009816:	2b00      	cmp	r3, #0
 8009818:	dd05      	ble.n	8009826 <_dtoa_r+0x91e>
 800981a:	0031      	movs	r1, r6
 800981c:	001a      	movs	r2, r3
 800981e:	0038      	movs	r0, r7
 8009820:	f000 fbbc 	bl	8009f9c <__lshift>
 8009824:	0006      	movs	r6, r0
 8009826:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009828:	2b00      	cmp	r3, #0
 800982a:	d026      	beq.n	800987a <_dtoa_r+0x972>
 800982c:	0031      	movs	r1, r6
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	f000 fc22 	bl	800a078 <__mcmp>
 8009834:	2800      	cmp	r0, #0
 8009836:	da20      	bge.n	800987a <_dtoa_r+0x972>
 8009838:	9b02      	ldr	r3, [sp, #8]
 800983a:	220a      	movs	r2, #10
 800983c:	3b01      	subs	r3, #1
 800983e:	9302      	str	r3, [sp, #8]
 8009840:	0038      	movs	r0, r7
 8009842:	2300      	movs	r3, #0
 8009844:	9905      	ldr	r1, [sp, #20]
 8009846:	f000 f9fb 	bl	8009c40 <__multadd>
 800984a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800984c:	9005      	str	r0, [sp, #20]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d100      	bne.n	8009854 <_dtoa_r+0x94c>
 8009852:	e166      	b.n	8009b22 <_dtoa_r+0xc1a>
 8009854:	2300      	movs	r3, #0
 8009856:	0029      	movs	r1, r5
 8009858:	220a      	movs	r2, #10
 800985a:	0038      	movs	r0, r7
 800985c:	f000 f9f0 	bl	8009c40 <__multadd>
 8009860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009862:	0005      	movs	r5, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	dc47      	bgt.n	80098f8 <_dtoa_r+0x9f0>
 8009868:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800986a:	2b02      	cmp	r3, #2
 800986c:	dc0d      	bgt.n	800988a <_dtoa_r+0x982>
 800986e:	e043      	b.n	80098f8 <_dtoa_r+0x9f0>
 8009870:	2a04      	cmp	r2, #4
 8009872:	d0c6      	beq.n	8009802 <_dtoa_r+0x8fa>
 8009874:	0013      	movs	r3, r2
 8009876:	331c      	adds	r3, #28
 8009878:	e7bc      	b.n	80097f4 <_dtoa_r+0x8ec>
 800987a:	9b07      	ldr	r3, [sp, #28]
 800987c:	2b00      	cmp	r3, #0
 800987e:	dc35      	bgt.n	80098ec <_dtoa_r+0x9e4>
 8009880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009882:	2b02      	cmp	r3, #2
 8009884:	dd32      	ble.n	80098ec <_dtoa_r+0x9e4>
 8009886:	9b07      	ldr	r3, [sp, #28]
 8009888:	930c      	str	r3, [sp, #48]	; 0x30
 800988a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10c      	bne.n	80098aa <_dtoa_r+0x9a2>
 8009890:	0031      	movs	r1, r6
 8009892:	2205      	movs	r2, #5
 8009894:	0038      	movs	r0, r7
 8009896:	f000 f9d3 	bl	8009c40 <__multadd>
 800989a:	0006      	movs	r6, r0
 800989c:	0001      	movs	r1, r0
 800989e:	9805      	ldr	r0, [sp, #20]
 80098a0:	f000 fbea 	bl	800a078 <__mcmp>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	dd00      	ble.n	80098aa <_dtoa_r+0x9a2>
 80098a8:	e5a5      	b.n	80093f6 <_dtoa_r+0x4ee>
 80098aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098ac:	43db      	mvns	r3, r3
 80098ae:	9302      	str	r3, [sp, #8]
 80098b0:	9b06      	ldr	r3, [sp, #24]
 80098b2:	9308      	str	r3, [sp, #32]
 80098b4:	2400      	movs	r4, #0
 80098b6:	0031      	movs	r1, r6
 80098b8:	0038      	movs	r0, r7
 80098ba:	f000 f99d 	bl	8009bf8 <_Bfree>
 80098be:	2d00      	cmp	r5, #0
 80098c0:	d100      	bne.n	80098c4 <_dtoa_r+0x9bc>
 80098c2:	e6b7      	b.n	8009634 <_dtoa_r+0x72c>
 80098c4:	2c00      	cmp	r4, #0
 80098c6:	d005      	beq.n	80098d4 <_dtoa_r+0x9cc>
 80098c8:	42ac      	cmp	r4, r5
 80098ca:	d003      	beq.n	80098d4 <_dtoa_r+0x9cc>
 80098cc:	0021      	movs	r1, r4
 80098ce:	0038      	movs	r0, r7
 80098d0:	f000 f992 	bl	8009bf8 <_Bfree>
 80098d4:	0029      	movs	r1, r5
 80098d6:	0038      	movs	r0, r7
 80098d8:	f000 f98e 	bl	8009bf8 <_Bfree>
 80098dc:	e6aa      	b.n	8009634 <_dtoa_r+0x72c>
 80098de:	2600      	movs	r6, #0
 80098e0:	0035      	movs	r5, r6
 80098e2:	e7e2      	b.n	80098aa <_dtoa_r+0x9a2>
 80098e4:	9602      	str	r6, [sp, #8]
 80098e6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80098e8:	0035      	movs	r5, r6
 80098ea:	e584      	b.n	80093f6 <_dtoa_r+0x4ee>
 80098ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d100      	bne.n	80098f4 <_dtoa_r+0x9ec>
 80098f2:	e0ce      	b.n	8009a92 <_dtoa_r+0xb8a>
 80098f4:	9b07      	ldr	r3, [sp, #28]
 80098f6:	930c      	str	r3, [sp, #48]	; 0x30
 80098f8:	2c00      	cmp	r4, #0
 80098fa:	dd05      	ble.n	8009908 <_dtoa_r+0xa00>
 80098fc:	0029      	movs	r1, r5
 80098fe:	0022      	movs	r2, r4
 8009900:	0038      	movs	r0, r7
 8009902:	f000 fb4b 	bl	8009f9c <__lshift>
 8009906:	0005      	movs	r5, r0
 8009908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800990a:	0028      	movs	r0, r5
 800990c:	2b00      	cmp	r3, #0
 800990e:	d022      	beq.n	8009956 <_dtoa_r+0xa4e>
 8009910:	0038      	movs	r0, r7
 8009912:	6869      	ldr	r1, [r5, #4]
 8009914:	f000 f92c 	bl	8009b70 <_Balloc>
 8009918:	1e04      	subs	r4, r0, #0
 800991a:	d10f      	bne.n	800993c <_dtoa_r+0xa34>
 800991c:	0002      	movs	r2, r0
 800991e:	4b05      	ldr	r3, [pc, #20]	; (8009934 <_dtoa_r+0xa2c>)
 8009920:	4905      	ldr	r1, [pc, #20]	; (8009938 <_dtoa_r+0xa30>)
 8009922:	f7ff fb06 	bl	8008f32 <_dtoa_r+0x2a>
 8009926:	46c0      	nop			; (mov r8, r8)
 8009928:	40240000 	.word	0x40240000
 800992c:	00000433 	.word	0x00000433
 8009930:	7ff00000 	.word	0x7ff00000
 8009934:	0800b6f7 	.word	0x0800b6f7
 8009938:	000002ea 	.word	0x000002ea
 800993c:	0029      	movs	r1, r5
 800993e:	692b      	ldr	r3, [r5, #16]
 8009940:	310c      	adds	r1, #12
 8009942:	1c9a      	adds	r2, r3, #2
 8009944:	0092      	lsls	r2, r2, #2
 8009946:	300c      	adds	r0, #12
 8009948:	f7fe fdb2 	bl	80084b0 <memcpy>
 800994c:	2201      	movs	r2, #1
 800994e:	0021      	movs	r1, r4
 8009950:	0038      	movs	r0, r7
 8009952:	f000 fb23 	bl	8009f9c <__lshift>
 8009956:	9b06      	ldr	r3, [sp, #24]
 8009958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800995a:	930a      	str	r3, [sp, #40]	; 0x28
 800995c:	3b01      	subs	r3, #1
 800995e:	189b      	adds	r3, r3, r2
 8009960:	2201      	movs	r2, #1
 8009962:	002c      	movs	r4, r5
 8009964:	0005      	movs	r5, r0
 8009966:	9314      	str	r3, [sp, #80]	; 0x50
 8009968:	9b08      	ldr	r3, [sp, #32]
 800996a:	4013      	ands	r3, r2
 800996c:	930f      	str	r3, [sp, #60]	; 0x3c
 800996e:	0031      	movs	r1, r6
 8009970:	9805      	ldr	r0, [sp, #20]
 8009972:	f7ff fa3d 	bl	8008df0 <quorem>
 8009976:	0003      	movs	r3, r0
 8009978:	0021      	movs	r1, r4
 800997a:	3330      	adds	r3, #48	; 0x30
 800997c:	900d      	str	r0, [sp, #52]	; 0x34
 800997e:	9805      	ldr	r0, [sp, #20]
 8009980:	9307      	str	r3, [sp, #28]
 8009982:	f000 fb79 	bl	800a078 <__mcmp>
 8009986:	002a      	movs	r2, r5
 8009988:	900e      	str	r0, [sp, #56]	; 0x38
 800998a:	0031      	movs	r1, r6
 800998c:	0038      	movs	r0, r7
 800998e:	f000 fb8f 	bl	800a0b0 <__mdiff>
 8009992:	68c3      	ldr	r3, [r0, #12]
 8009994:	9008      	str	r0, [sp, #32]
 8009996:	9310      	str	r3, [sp, #64]	; 0x40
 8009998:	2301      	movs	r3, #1
 800999a:	930c      	str	r3, [sp, #48]	; 0x30
 800999c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d104      	bne.n	80099ac <_dtoa_r+0xaa4>
 80099a2:	0001      	movs	r1, r0
 80099a4:	9805      	ldr	r0, [sp, #20]
 80099a6:	f000 fb67 	bl	800a078 <__mcmp>
 80099aa:	900c      	str	r0, [sp, #48]	; 0x30
 80099ac:	0038      	movs	r0, r7
 80099ae:	9908      	ldr	r1, [sp, #32]
 80099b0:	f000 f922 	bl	8009bf8 <_Bfree>
 80099b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099b8:	3301      	adds	r3, #1
 80099ba:	9308      	str	r3, [sp, #32]
 80099bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099be:	4313      	orrs	r3, r2
 80099c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099c2:	4313      	orrs	r3, r2
 80099c4:	d10c      	bne.n	80099e0 <_dtoa_r+0xad8>
 80099c6:	9b07      	ldr	r3, [sp, #28]
 80099c8:	2b39      	cmp	r3, #57	; 0x39
 80099ca:	d026      	beq.n	8009a1a <_dtoa_r+0xb12>
 80099cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	dd02      	ble.n	80099d8 <_dtoa_r+0xad0>
 80099d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d4:	3331      	adds	r3, #49	; 0x31
 80099d6:	9307      	str	r3, [sp, #28]
 80099d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099da:	9a07      	ldr	r2, [sp, #28]
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	e76a      	b.n	80098b6 <_dtoa_r+0x9ae>
 80099e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	db04      	blt.n	80099f0 <_dtoa_r+0xae8>
 80099e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099e8:	4313      	orrs	r3, r2
 80099ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099ec:	4313      	orrs	r3, r2
 80099ee:	d11f      	bne.n	8009a30 <_dtoa_r+0xb28>
 80099f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	ddf0      	ble.n	80099d8 <_dtoa_r+0xad0>
 80099f6:	9905      	ldr	r1, [sp, #20]
 80099f8:	2201      	movs	r2, #1
 80099fa:	0038      	movs	r0, r7
 80099fc:	f000 face 	bl	8009f9c <__lshift>
 8009a00:	0031      	movs	r1, r6
 8009a02:	9005      	str	r0, [sp, #20]
 8009a04:	f000 fb38 	bl	800a078 <__mcmp>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	dc03      	bgt.n	8009a14 <_dtoa_r+0xb0c>
 8009a0c:	d1e4      	bne.n	80099d8 <_dtoa_r+0xad0>
 8009a0e:	9b07      	ldr	r3, [sp, #28]
 8009a10:	07db      	lsls	r3, r3, #31
 8009a12:	d5e1      	bpl.n	80099d8 <_dtoa_r+0xad0>
 8009a14:	9b07      	ldr	r3, [sp, #28]
 8009a16:	2b39      	cmp	r3, #57	; 0x39
 8009a18:	d1db      	bne.n	80099d2 <_dtoa_r+0xaca>
 8009a1a:	2339      	movs	r3, #57	; 0x39
 8009a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1e:	7013      	strb	r3, [r2, #0]
 8009a20:	9b08      	ldr	r3, [sp, #32]
 8009a22:	9308      	str	r3, [sp, #32]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	781a      	ldrb	r2, [r3, #0]
 8009a28:	2a39      	cmp	r2, #57	; 0x39
 8009a2a:	d068      	beq.n	8009afe <_dtoa_r+0xbf6>
 8009a2c:	3201      	adds	r2, #1
 8009a2e:	e7d5      	b.n	80099dc <_dtoa_r+0xad4>
 8009a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	dd07      	ble.n	8009a46 <_dtoa_r+0xb3e>
 8009a36:	9b07      	ldr	r3, [sp, #28]
 8009a38:	2b39      	cmp	r3, #57	; 0x39
 8009a3a:	d0ee      	beq.n	8009a1a <_dtoa_r+0xb12>
 8009a3c:	9b07      	ldr	r3, [sp, #28]
 8009a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a40:	3301      	adds	r3, #1
 8009a42:	7013      	strb	r3, [r2, #0]
 8009a44:	e737      	b.n	80098b6 <_dtoa_r+0x9ae>
 8009a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a48:	9a07      	ldr	r2, [sp, #28]
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d03e      	beq.n	8009ad2 <_dtoa_r+0xbca>
 8009a54:	2300      	movs	r3, #0
 8009a56:	220a      	movs	r2, #10
 8009a58:	9905      	ldr	r1, [sp, #20]
 8009a5a:	0038      	movs	r0, r7
 8009a5c:	f000 f8f0 	bl	8009c40 <__multadd>
 8009a60:	2300      	movs	r3, #0
 8009a62:	9005      	str	r0, [sp, #20]
 8009a64:	220a      	movs	r2, #10
 8009a66:	0021      	movs	r1, r4
 8009a68:	0038      	movs	r0, r7
 8009a6a:	42ac      	cmp	r4, r5
 8009a6c:	d106      	bne.n	8009a7c <_dtoa_r+0xb74>
 8009a6e:	f000 f8e7 	bl	8009c40 <__multadd>
 8009a72:	0004      	movs	r4, r0
 8009a74:	0005      	movs	r5, r0
 8009a76:	9b08      	ldr	r3, [sp, #32]
 8009a78:	930a      	str	r3, [sp, #40]	; 0x28
 8009a7a:	e778      	b.n	800996e <_dtoa_r+0xa66>
 8009a7c:	f000 f8e0 	bl	8009c40 <__multadd>
 8009a80:	0029      	movs	r1, r5
 8009a82:	0004      	movs	r4, r0
 8009a84:	2300      	movs	r3, #0
 8009a86:	220a      	movs	r2, #10
 8009a88:	0038      	movs	r0, r7
 8009a8a:	f000 f8d9 	bl	8009c40 <__multadd>
 8009a8e:	0005      	movs	r5, r0
 8009a90:	e7f1      	b.n	8009a76 <_dtoa_r+0xb6e>
 8009a92:	9b07      	ldr	r3, [sp, #28]
 8009a94:	930c      	str	r3, [sp, #48]	; 0x30
 8009a96:	2400      	movs	r4, #0
 8009a98:	0031      	movs	r1, r6
 8009a9a:	9805      	ldr	r0, [sp, #20]
 8009a9c:	f7ff f9a8 	bl	8008df0 <quorem>
 8009aa0:	9b06      	ldr	r3, [sp, #24]
 8009aa2:	3030      	adds	r0, #48	; 0x30
 8009aa4:	5518      	strb	r0, [r3, r4]
 8009aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aa8:	3401      	adds	r4, #1
 8009aaa:	9007      	str	r0, [sp, #28]
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	dd07      	ble.n	8009ac0 <_dtoa_r+0xbb8>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	220a      	movs	r2, #10
 8009ab4:	0038      	movs	r0, r7
 8009ab6:	9905      	ldr	r1, [sp, #20]
 8009ab8:	f000 f8c2 	bl	8009c40 <__multadd>
 8009abc:	9005      	str	r0, [sp, #20]
 8009abe:	e7eb      	b.n	8009a98 <_dtoa_r+0xb90>
 8009ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	dd00      	ble.n	8009aca <_dtoa_r+0xbc2>
 8009ac8:	0018      	movs	r0, r3
 8009aca:	2400      	movs	r4, #0
 8009acc:	9b06      	ldr	r3, [sp, #24]
 8009ace:	181b      	adds	r3, r3, r0
 8009ad0:	9308      	str	r3, [sp, #32]
 8009ad2:	9905      	ldr	r1, [sp, #20]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	0038      	movs	r0, r7
 8009ad8:	f000 fa60 	bl	8009f9c <__lshift>
 8009adc:	0031      	movs	r1, r6
 8009ade:	9005      	str	r0, [sp, #20]
 8009ae0:	f000 faca 	bl	800a078 <__mcmp>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	dc9b      	bgt.n	8009a20 <_dtoa_r+0xb18>
 8009ae8:	d102      	bne.n	8009af0 <_dtoa_r+0xbe8>
 8009aea:	9b07      	ldr	r3, [sp, #28]
 8009aec:	07db      	lsls	r3, r3, #31
 8009aee:	d497      	bmi.n	8009a20 <_dtoa_r+0xb18>
 8009af0:	9b08      	ldr	r3, [sp, #32]
 8009af2:	9308      	str	r3, [sp, #32]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	781a      	ldrb	r2, [r3, #0]
 8009af8:	2a30      	cmp	r2, #48	; 0x30
 8009afa:	d0fa      	beq.n	8009af2 <_dtoa_r+0xbea>
 8009afc:	e6db      	b.n	80098b6 <_dtoa_r+0x9ae>
 8009afe:	9a06      	ldr	r2, [sp, #24]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d18e      	bne.n	8009a22 <_dtoa_r+0xb1a>
 8009b04:	9b02      	ldr	r3, [sp, #8]
 8009b06:	3301      	adds	r3, #1
 8009b08:	9302      	str	r3, [sp, #8]
 8009b0a:	2331      	movs	r3, #49	; 0x31
 8009b0c:	e799      	b.n	8009a42 <_dtoa_r+0xb3a>
 8009b0e:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <_dtoa_r+0xc2c>)
 8009b10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b12:	9306      	str	r3, [sp, #24]
 8009b14:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <_dtoa_r+0xc30>)
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	d001      	beq.n	8009b1e <_dtoa_r+0xc16>
 8009b1a:	f7ff fa3f 	bl	8008f9c <_dtoa_r+0x94>
 8009b1e:	f7ff fa3f 	bl	8008fa0 <_dtoa_r+0x98>
 8009b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dcb6      	bgt.n	8009a96 <_dtoa_r+0xb8e>
 8009b28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	dd00      	ble.n	8009b30 <_dtoa_r+0xc28>
 8009b2e:	e6ac      	b.n	800988a <_dtoa_r+0x982>
 8009b30:	e7b1      	b.n	8009a96 <_dtoa_r+0xb8e>
 8009b32:	46c0      	nop			; (mov r8, r8)
 8009b34:	0800b678 	.word	0x0800b678
 8009b38:	0800b680 	.word	0x0800b680

08009b3c <_localeconv_r>:
 8009b3c:	4800      	ldr	r0, [pc, #0]	; (8009b40 <_localeconv_r+0x4>)
 8009b3e:	4770      	bx	lr
 8009b40:	20000168 	.word	0x20000168

08009b44 <malloc>:
 8009b44:	b510      	push	{r4, lr}
 8009b46:	4b03      	ldr	r3, [pc, #12]	; (8009b54 <malloc+0x10>)
 8009b48:	0001      	movs	r1, r0
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	f000 fc44 	bl	800a3d8 <_malloc_r>
 8009b50:	bd10      	pop	{r4, pc}
 8009b52:	46c0      	nop			; (mov r8, r8)
 8009b54:	20000014 	.word	0x20000014

08009b58 <memchr>:
 8009b58:	b2c9      	uxtb	r1, r1
 8009b5a:	1882      	adds	r2, r0, r2
 8009b5c:	4290      	cmp	r0, r2
 8009b5e:	d101      	bne.n	8009b64 <memchr+0xc>
 8009b60:	2000      	movs	r0, #0
 8009b62:	4770      	bx	lr
 8009b64:	7803      	ldrb	r3, [r0, #0]
 8009b66:	428b      	cmp	r3, r1
 8009b68:	d0fb      	beq.n	8009b62 <memchr+0xa>
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	e7f6      	b.n	8009b5c <memchr+0x4>
	...

08009b70 <_Balloc>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b74:	0006      	movs	r6, r0
 8009b76:	000c      	movs	r4, r1
 8009b78:	2d00      	cmp	r5, #0
 8009b7a:	d10e      	bne.n	8009b9a <_Balloc+0x2a>
 8009b7c:	2010      	movs	r0, #16
 8009b7e:	f7ff ffe1 	bl	8009b44 <malloc>
 8009b82:	1e02      	subs	r2, r0, #0
 8009b84:	6270      	str	r0, [r6, #36]	; 0x24
 8009b86:	d104      	bne.n	8009b92 <_Balloc+0x22>
 8009b88:	2166      	movs	r1, #102	; 0x66
 8009b8a:	4b19      	ldr	r3, [pc, #100]	; (8009bf0 <_Balloc+0x80>)
 8009b8c:	4819      	ldr	r0, [pc, #100]	; (8009bf4 <_Balloc+0x84>)
 8009b8e:	f000 fe0d 	bl	800a7ac <__assert_func>
 8009b92:	6045      	str	r5, [r0, #4]
 8009b94:	6085      	str	r5, [r0, #8]
 8009b96:	6005      	str	r5, [r0, #0]
 8009b98:	60c5      	str	r5, [r0, #12]
 8009b9a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009b9c:	68eb      	ldr	r3, [r5, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d013      	beq.n	8009bca <_Balloc+0x5a>
 8009ba2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ba4:	00a2      	lsls	r2, r4, #2
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	189b      	adds	r3, r3, r2
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d118      	bne.n	8009be2 <_Balloc+0x72>
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	000d      	movs	r5, r1
 8009bb4:	40a5      	lsls	r5, r4
 8009bb6:	1d6a      	adds	r2, r5, #5
 8009bb8:	0030      	movs	r0, r6
 8009bba:	0092      	lsls	r2, r2, #2
 8009bbc:	f000 fb74 	bl	800a2a8 <_calloc_r>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d00c      	beq.n	8009bde <_Balloc+0x6e>
 8009bc4:	6044      	str	r4, [r0, #4]
 8009bc6:	6085      	str	r5, [r0, #8]
 8009bc8:	e00d      	b.n	8009be6 <_Balloc+0x76>
 8009bca:	2221      	movs	r2, #33	; 0x21
 8009bcc:	2104      	movs	r1, #4
 8009bce:	0030      	movs	r0, r6
 8009bd0:	f000 fb6a 	bl	800a2a8 <_calloc_r>
 8009bd4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009bd6:	60e8      	str	r0, [r5, #12]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e1      	bne.n	8009ba2 <_Balloc+0x32>
 8009bde:	2000      	movs	r0, #0
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	6802      	ldr	r2, [r0, #0]
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	2300      	movs	r3, #0
 8009be8:	6103      	str	r3, [r0, #16]
 8009bea:	60c3      	str	r3, [r0, #12]
 8009bec:	e7f8      	b.n	8009be0 <_Balloc+0x70>
 8009bee:	46c0      	nop			; (mov r8, r8)
 8009bf0:	0800b685 	.word	0x0800b685
 8009bf4:	0800b708 	.word	0x0800b708

08009bf8 <_Bfree>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bfc:	0005      	movs	r5, r0
 8009bfe:	000c      	movs	r4, r1
 8009c00:	2e00      	cmp	r6, #0
 8009c02:	d10e      	bne.n	8009c22 <_Bfree+0x2a>
 8009c04:	2010      	movs	r0, #16
 8009c06:	f7ff ff9d 	bl	8009b44 <malloc>
 8009c0a:	1e02      	subs	r2, r0, #0
 8009c0c:	6268      	str	r0, [r5, #36]	; 0x24
 8009c0e:	d104      	bne.n	8009c1a <_Bfree+0x22>
 8009c10:	218a      	movs	r1, #138	; 0x8a
 8009c12:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <_Bfree+0x40>)
 8009c14:	4809      	ldr	r0, [pc, #36]	; (8009c3c <_Bfree+0x44>)
 8009c16:	f000 fdc9 	bl	800a7ac <__assert_func>
 8009c1a:	6046      	str	r6, [r0, #4]
 8009c1c:	6086      	str	r6, [r0, #8]
 8009c1e:	6006      	str	r6, [r0, #0]
 8009c20:	60c6      	str	r6, [r0, #12]
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	d007      	beq.n	8009c36 <_Bfree+0x3e>
 8009c26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c28:	6862      	ldr	r2, [r4, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	0092      	lsls	r2, r2, #2
 8009c2e:	189b      	adds	r3, r3, r2
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	6022      	str	r2, [r4, #0]
 8009c34:	601c      	str	r4, [r3, #0]
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	0800b685 	.word	0x0800b685
 8009c3c:	0800b708 	.word	0x0800b708

08009c40 <__multadd>:
 8009c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c42:	000e      	movs	r6, r1
 8009c44:	9001      	str	r0, [sp, #4]
 8009c46:	000c      	movs	r4, r1
 8009c48:	001d      	movs	r5, r3
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	690f      	ldr	r7, [r1, #16]
 8009c4e:	3614      	adds	r6, #20
 8009c50:	6833      	ldr	r3, [r6, #0]
 8009c52:	3001      	adds	r0, #1
 8009c54:	b299      	uxth	r1, r3
 8009c56:	4351      	muls	r1, r2
 8009c58:	0c1b      	lsrs	r3, r3, #16
 8009c5a:	4353      	muls	r3, r2
 8009c5c:	1949      	adds	r1, r1, r5
 8009c5e:	0c0d      	lsrs	r5, r1, #16
 8009c60:	195b      	adds	r3, r3, r5
 8009c62:	0c1d      	lsrs	r5, r3, #16
 8009c64:	b289      	uxth	r1, r1
 8009c66:	041b      	lsls	r3, r3, #16
 8009c68:	185b      	adds	r3, r3, r1
 8009c6a:	c608      	stmia	r6!, {r3}
 8009c6c:	4287      	cmp	r7, r0
 8009c6e:	dcef      	bgt.n	8009c50 <__multadd+0x10>
 8009c70:	2d00      	cmp	r5, #0
 8009c72:	d022      	beq.n	8009cba <__multadd+0x7a>
 8009c74:	68a3      	ldr	r3, [r4, #8]
 8009c76:	42bb      	cmp	r3, r7
 8009c78:	dc19      	bgt.n	8009cae <__multadd+0x6e>
 8009c7a:	6863      	ldr	r3, [r4, #4]
 8009c7c:	9801      	ldr	r0, [sp, #4]
 8009c7e:	1c59      	adds	r1, r3, #1
 8009c80:	f7ff ff76 	bl	8009b70 <_Balloc>
 8009c84:	1e06      	subs	r6, r0, #0
 8009c86:	d105      	bne.n	8009c94 <__multadd+0x54>
 8009c88:	0002      	movs	r2, r0
 8009c8a:	21b5      	movs	r1, #181	; 0xb5
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <__multadd+0x80>)
 8009c8e:	480d      	ldr	r0, [pc, #52]	; (8009cc4 <__multadd+0x84>)
 8009c90:	f000 fd8c 	bl	800a7ac <__assert_func>
 8009c94:	0021      	movs	r1, r4
 8009c96:	6923      	ldr	r3, [r4, #16]
 8009c98:	310c      	adds	r1, #12
 8009c9a:	1c9a      	adds	r2, r3, #2
 8009c9c:	0092      	lsls	r2, r2, #2
 8009c9e:	300c      	adds	r0, #12
 8009ca0:	f7fe fc06 	bl	80084b0 <memcpy>
 8009ca4:	0021      	movs	r1, r4
 8009ca6:	9801      	ldr	r0, [sp, #4]
 8009ca8:	f7ff ffa6 	bl	8009bf8 <_Bfree>
 8009cac:	0034      	movs	r4, r6
 8009cae:	1d3b      	adds	r3, r7, #4
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	18e3      	adds	r3, r4, r3
 8009cb4:	605d      	str	r5, [r3, #4]
 8009cb6:	1c7b      	adds	r3, r7, #1
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	0020      	movs	r0, r4
 8009cbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cbe:	46c0      	nop			; (mov r8, r8)
 8009cc0:	0800b6f7 	.word	0x0800b6f7
 8009cc4:	0800b708 	.word	0x0800b708

08009cc8 <__hi0bits>:
 8009cc8:	0003      	movs	r3, r0
 8009cca:	0c02      	lsrs	r2, r0, #16
 8009ccc:	2000      	movs	r0, #0
 8009cce:	4282      	cmp	r2, r0
 8009cd0:	d101      	bne.n	8009cd6 <__hi0bits+0xe>
 8009cd2:	041b      	lsls	r3, r3, #16
 8009cd4:	3010      	adds	r0, #16
 8009cd6:	0e1a      	lsrs	r2, r3, #24
 8009cd8:	d101      	bne.n	8009cde <__hi0bits+0x16>
 8009cda:	3008      	adds	r0, #8
 8009cdc:	021b      	lsls	r3, r3, #8
 8009cde:	0f1a      	lsrs	r2, r3, #28
 8009ce0:	d101      	bne.n	8009ce6 <__hi0bits+0x1e>
 8009ce2:	3004      	adds	r0, #4
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	0f9a      	lsrs	r2, r3, #30
 8009ce8:	d101      	bne.n	8009cee <__hi0bits+0x26>
 8009cea:	3002      	adds	r0, #2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	db03      	blt.n	8009cfa <__hi0bits+0x32>
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	d400      	bmi.n	8009cfa <__hi0bits+0x32>
 8009cf8:	2020      	movs	r0, #32
 8009cfa:	4770      	bx	lr

08009cfc <__lo0bits>:
 8009cfc:	6803      	ldr	r3, [r0, #0]
 8009cfe:	0002      	movs	r2, r0
 8009d00:	2107      	movs	r1, #7
 8009d02:	0018      	movs	r0, r3
 8009d04:	4008      	ands	r0, r1
 8009d06:	420b      	tst	r3, r1
 8009d08:	d00d      	beq.n	8009d26 <__lo0bits+0x2a>
 8009d0a:	3906      	subs	r1, #6
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	420b      	tst	r3, r1
 8009d10:	d105      	bne.n	8009d1e <__lo0bits+0x22>
 8009d12:	3002      	adds	r0, #2
 8009d14:	4203      	tst	r3, r0
 8009d16:	d003      	beq.n	8009d20 <__lo0bits+0x24>
 8009d18:	40cb      	lsrs	r3, r1
 8009d1a:	0008      	movs	r0, r1
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	4770      	bx	lr
 8009d20:	089b      	lsrs	r3, r3, #2
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	e7fb      	b.n	8009d1e <__lo0bits+0x22>
 8009d26:	b299      	uxth	r1, r3
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	d101      	bne.n	8009d30 <__lo0bits+0x34>
 8009d2c:	2010      	movs	r0, #16
 8009d2e:	0c1b      	lsrs	r3, r3, #16
 8009d30:	b2d9      	uxtb	r1, r3
 8009d32:	2900      	cmp	r1, #0
 8009d34:	d101      	bne.n	8009d3a <__lo0bits+0x3e>
 8009d36:	3008      	adds	r0, #8
 8009d38:	0a1b      	lsrs	r3, r3, #8
 8009d3a:	0719      	lsls	r1, r3, #28
 8009d3c:	d101      	bne.n	8009d42 <__lo0bits+0x46>
 8009d3e:	3004      	adds	r0, #4
 8009d40:	091b      	lsrs	r3, r3, #4
 8009d42:	0799      	lsls	r1, r3, #30
 8009d44:	d101      	bne.n	8009d4a <__lo0bits+0x4e>
 8009d46:	3002      	adds	r0, #2
 8009d48:	089b      	lsrs	r3, r3, #2
 8009d4a:	07d9      	lsls	r1, r3, #31
 8009d4c:	d4e9      	bmi.n	8009d22 <__lo0bits+0x26>
 8009d4e:	3001      	adds	r0, #1
 8009d50:	085b      	lsrs	r3, r3, #1
 8009d52:	d1e6      	bne.n	8009d22 <__lo0bits+0x26>
 8009d54:	2020      	movs	r0, #32
 8009d56:	e7e2      	b.n	8009d1e <__lo0bits+0x22>

08009d58 <__i2b>:
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	000c      	movs	r4, r1
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	f7ff ff07 	bl	8009b70 <_Balloc>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d106      	bne.n	8009d74 <__i2b+0x1c>
 8009d66:	21a0      	movs	r1, #160	; 0xa0
 8009d68:	0002      	movs	r2, r0
 8009d6a:	4b04      	ldr	r3, [pc, #16]	; (8009d7c <__i2b+0x24>)
 8009d6c:	4804      	ldr	r0, [pc, #16]	; (8009d80 <__i2b+0x28>)
 8009d6e:	0049      	lsls	r1, r1, #1
 8009d70:	f000 fd1c 	bl	800a7ac <__assert_func>
 8009d74:	2301      	movs	r3, #1
 8009d76:	6144      	str	r4, [r0, #20]
 8009d78:	6103      	str	r3, [r0, #16]
 8009d7a:	bd10      	pop	{r4, pc}
 8009d7c:	0800b6f7 	.word	0x0800b6f7
 8009d80:	0800b708 	.word	0x0800b708

08009d84 <__multiply>:
 8009d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d86:	690b      	ldr	r3, [r1, #16]
 8009d88:	0014      	movs	r4, r2
 8009d8a:	6912      	ldr	r2, [r2, #16]
 8009d8c:	000d      	movs	r5, r1
 8009d8e:	b089      	sub	sp, #36	; 0x24
 8009d90:	4293      	cmp	r3, r2
 8009d92:	da01      	bge.n	8009d98 <__multiply+0x14>
 8009d94:	0025      	movs	r5, r4
 8009d96:	000c      	movs	r4, r1
 8009d98:	692f      	ldr	r7, [r5, #16]
 8009d9a:	6926      	ldr	r6, [r4, #16]
 8009d9c:	6869      	ldr	r1, [r5, #4]
 8009d9e:	19bb      	adds	r3, r7, r6
 8009da0:	9302      	str	r3, [sp, #8]
 8009da2:	68ab      	ldr	r3, [r5, #8]
 8009da4:	19ba      	adds	r2, r7, r6
 8009da6:	4293      	cmp	r3, r2
 8009da8:	da00      	bge.n	8009dac <__multiply+0x28>
 8009daa:	3101      	adds	r1, #1
 8009dac:	f7ff fee0 	bl	8009b70 <_Balloc>
 8009db0:	9001      	str	r0, [sp, #4]
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d106      	bne.n	8009dc4 <__multiply+0x40>
 8009db6:	215e      	movs	r1, #94	; 0x5e
 8009db8:	0002      	movs	r2, r0
 8009dba:	4b48      	ldr	r3, [pc, #288]	; (8009edc <__multiply+0x158>)
 8009dbc:	4848      	ldr	r0, [pc, #288]	; (8009ee0 <__multiply+0x15c>)
 8009dbe:	31ff      	adds	r1, #255	; 0xff
 8009dc0:	f000 fcf4 	bl	800a7ac <__assert_func>
 8009dc4:	9b01      	ldr	r3, [sp, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	3314      	adds	r3, #20
 8009dca:	469c      	mov	ip, r3
 8009dcc:	19bb      	adds	r3, r7, r6
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4463      	add	r3, ip
 8009dd2:	9303      	str	r3, [sp, #12]
 8009dd4:	4663      	mov	r3, ip
 8009dd6:	9903      	ldr	r1, [sp, #12]
 8009dd8:	428b      	cmp	r3, r1
 8009dda:	d32c      	bcc.n	8009e36 <__multiply+0xb2>
 8009ddc:	002b      	movs	r3, r5
 8009dde:	0022      	movs	r2, r4
 8009de0:	3314      	adds	r3, #20
 8009de2:	00bf      	lsls	r7, r7, #2
 8009de4:	3214      	adds	r2, #20
 8009de6:	9306      	str	r3, [sp, #24]
 8009de8:	00b6      	lsls	r6, r6, #2
 8009dea:	19db      	adds	r3, r3, r7
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	1993      	adds	r3, r2, r6
 8009df0:	9307      	str	r3, [sp, #28]
 8009df2:	2304      	movs	r3, #4
 8009df4:	9305      	str	r3, [sp, #20]
 8009df6:	002b      	movs	r3, r5
 8009df8:	9904      	ldr	r1, [sp, #16]
 8009dfa:	3315      	adds	r3, #21
 8009dfc:	9200      	str	r2, [sp, #0]
 8009dfe:	4299      	cmp	r1, r3
 8009e00:	d305      	bcc.n	8009e0e <__multiply+0x8a>
 8009e02:	1b4b      	subs	r3, r1, r5
 8009e04:	3b15      	subs	r3, #21
 8009e06:	089b      	lsrs	r3, r3, #2
 8009e08:	3301      	adds	r3, #1
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	9b07      	ldr	r3, [sp, #28]
 8009e10:	9a00      	ldr	r2, [sp, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d311      	bcc.n	8009e3a <__multiply+0xb6>
 8009e16:	9b02      	ldr	r3, [sp, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	dd06      	ble.n	8009e2a <__multiply+0xa6>
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	3b04      	subs	r3, #4
 8009e20:	9303      	str	r3, [sp, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d053      	beq.n	8009ed2 <__multiply+0x14e>
 8009e2a:	9b01      	ldr	r3, [sp, #4]
 8009e2c:	9a02      	ldr	r2, [sp, #8]
 8009e2e:	0018      	movs	r0, r3
 8009e30:	611a      	str	r2, [r3, #16]
 8009e32:	b009      	add	sp, #36	; 0x24
 8009e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e36:	c304      	stmia	r3!, {r2}
 8009e38:	e7cd      	b.n	8009dd6 <__multiply+0x52>
 8009e3a:	9b00      	ldr	r3, [sp, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	b298      	uxth	r0, r3
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d01b      	beq.n	8009e7c <__multiply+0xf8>
 8009e44:	4667      	mov	r7, ip
 8009e46:	2400      	movs	r4, #0
 8009e48:	9e06      	ldr	r6, [sp, #24]
 8009e4a:	ce02      	ldmia	r6!, {r1}
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	b28b      	uxth	r3, r1
 8009e50:	4343      	muls	r3, r0
 8009e52:	b292      	uxth	r2, r2
 8009e54:	189b      	adds	r3, r3, r2
 8009e56:	191b      	adds	r3, r3, r4
 8009e58:	0c0c      	lsrs	r4, r1, #16
 8009e5a:	4344      	muls	r4, r0
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	0c11      	lsrs	r1, r2, #16
 8009e60:	1861      	adds	r1, r4, r1
 8009e62:	0c1c      	lsrs	r4, r3, #16
 8009e64:	1909      	adds	r1, r1, r4
 8009e66:	0c0c      	lsrs	r4, r1, #16
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	0409      	lsls	r1, r1, #16
 8009e6c:	430b      	orrs	r3, r1
 8009e6e:	c708      	stmia	r7!, {r3}
 8009e70:	9b04      	ldr	r3, [sp, #16]
 8009e72:	42b3      	cmp	r3, r6
 8009e74:	d8e9      	bhi.n	8009e4a <__multiply+0xc6>
 8009e76:	4663      	mov	r3, ip
 8009e78:	9a05      	ldr	r2, [sp, #20]
 8009e7a:	509c      	str	r4, [r3, r2]
 8009e7c:	9b00      	ldr	r3, [sp, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	0c1e      	lsrs	r6, r3, #16
 8009e82:	d020      	beq.n	8009ec6 <__multiply+0x142>
 8009e84:	4663      	mov	r3, ip
 8009e86:	002c      	movs	r4, r5
 8009e88:	4660      	mov	r0, ip
 8009e8a:	2700      	movs	r7, #0
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3414      	adds	r4, #20
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	b291      	uxth	r1, r2
 8009e96:	4371      	muls	r1, r6
 8009e98:	6802      	ldr	r2, [r0, #0]
 8009e9a:	0c12      	lsrs	r2, r2, #16
 8009e9c:	1889      	adds	r1, r1, r2
 8009e9e:	19cf      	adds	r7, r1, r7
 8009ea0:	0439      	lsls	r1, r7, #16
 8009ea2:	430b      	orrs	r3, r1
 8009ea4:	6003      	str	r3, [r0, #0]
 8009ea6:	cc02      	ldmia	r4!, {r1}
 8009ea8:	6843      	ldr	r3, [r0, #4]
 8009eaa:	0c09      	lsrs	r1, r1, #16
 8009eac:	4371      	muls	r1, r6
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	0c3f      	lsrs	r7, r7, #16
 8009eb2:	18cb      	adds	r3, r1, r3
 8009eb4:	9a04      	ldr	r2, [sp, #16]
 8009eb6:	19db      	adds	r3, r3, r7
 8009eb8:	0c1f      	lsrs	r7, r3, #16
 8009eba:	3004      	adds	r0, #4
 8009ebc:	42a2      	cmp	r2, r4
 8009ebe:	d8e7      	bhi.n	8009e90 <__multiply+0x10c>
 8009ec0:	4662      	mov	r2, ip
 8009ec2:	9905      	ldr	r1, [sp, #20]
 8009ec4:	5053      	str	r3, [r2, r1]
 8009ec6:	9b00      	ldr	r3, [sp, #0]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	2304      	movs	r3, #4
 8009ece:	449c      	add	ip, r3
 8009ed0:	e79d      	b.n	8009e0e <__multiply+0x8a>
 8009ed2:	9b02      	ldr	r3, [sp, #8]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	9302      	str	r3, [sp, #8]
 8009ed8:	e79d      	b.n	8009e16 <__multiply+0x92>
 8009eda:	46c0      	nop			; (mov r8, r8)
 8009edc:	0800b6f7 	.word	0x0800b6f7
 8009ee0:	0800b708 	.word	0x0800b708

08009ee4 <__pow5mult>:
 8009ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	0015      	movs	r5, r2
 8009eea:	0007      	movs	r7, r0
 8009eec:	000e      	movs	r6, r1
 8009eee:	401a      	ands	r2, r3
 8009ef0:	421d      	tst	r5, r3
 8009ef2:	d008      	beq.n	8009f06 <__pow5mult+0x22>
 8009ef4:	4925      	ldr	r1, [pc, #148]	; (8009f8c <__pow5mult+0xa8>)
 8009ef6:	3a01      	subs	r2, #1
 8009ef8:	0092      	lsls	r2, r2, #2
 8009efa:	5852      	ldr	r2, [r2, r1]
 8009efc:	2300      	movs	r3, #0
 8009efe:	0031      	movs	r1, r6
 8009f00:	f7ff fe9e 	bl	8009c40 <__multadd>
 8009f04:	0006      	movs	r6, r0
 8009f06:	10ad      	asrs	r5, r5, #2
 8009f08:	d03d      	beq.n	8009f86 <__pow5mult+0xa2>
 8009f0a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009f0c:	2c00      	cmp	r4, #0
 8009f0e:	d10f      	bne.n	8009f30 <__pow5mult+0x4c>
 8009f10:	2010      	movs	r0, #16
 8009f12:	f7ff fe17 	bl	8009b44 <malloc>
 8009f16:	1e02      	subs	r2, r0, #0
 8009f18:	6278      	str	r0, [r7, #36]	; 0x24
 8009f1a:	d105      	bne.n	8009f28 <__pow5mult+0x44>
 8009f1c:	21d7      	movs	r1, #215	; 0xd7
 8009f1e:	4b1c      	ldr	r3, [pc, #112]	; (8009f90 <__pow5mult+0xac>)
 8009f20:	481c      	ldr	r0, [pc, #112]	; (8009f94 <__pow5mult+0xb0>)
 8009f22:	0049      	lsls	r1, r1, #1
 8009f24:	f000 fc42 	bl	800a7ac <__assert_func>
 8009f28:	6044      	str	r4, [r0, #4]
 8009f2a:	6084      	str	r4, [r0, #8]
 8009f2c:	6004      	str	r4, [r0, #0]
 8009f2e:	60c4      	str	r4, [r0, #12]
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	689c      	ldr	r4, [r3, #8]
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	2c00      	cmp	r4, #0
 8009f38:	d108      	bne.n	8009f4c <__pow5mult+0x68>
 8009f3a:	0038      	movs	r0, r7
 8009f3c:	4916      	ldr	r1, [pc, #88]	; (8009f98 <__pow5mult+0xb4>)
 8009f3e:	f7ff ff0b 	bl	8009d58 <__i2b>
 8009f42:	9b01      	ldr	r3, [sp, #4]
 8009f44:	0004      	movs	r4, r0
 8009f46:	6098      	str	r0, [r3, #8]
 8009f48:	2300      	movs	r3, #0
 8009f4a:	6003      	str	r3, [r0, #0]
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	421d      	tst	r5, r3
 8009f50:	d00a      	beq.n	8009f68 <__pow5mult+0x84>
 8009f52:	0031      	movs	r1, r6
 8009f54:	0022      	movs	r2, r4
 8009f56:	0038      	movs	r0, r7
 8009f58:	f7ff ff14 	bl	8009d84 <__multiply>
 8009f5c:	0031      	movs	r1, r6
 8009f5e:	9001      	str	r0, [sp, #4]
 8009f60:	0038      	movs	r0, r7
 8009f62:	f7ff fe49 	bl	8009bf8 <_Bfree>
 8009f66:	9e01      	ldr	r6, [sp, #4]
 8009f68:	106d      	asrs	r5, r5, #1
 8009f6a:	d00c      	beq.n	8009f86 <__pow5mult+0xa2>
 8009f6c:	6820      	ldr	r0, [r4, #0]
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d107      	bne.n	8009f82 <__pow5mult+0x9e>
 8009f72:	0022      	movs	r2, r4
 8009f74:	0021      	movs	r1, r4
 8009f76:	0038      	movs	r0, r7
 8009f78:	f7ff ff04 	bl	8009d84 <__multiply>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	6020      	str	r0, [r4, #0]
 8009f80:	6003      	str	r3, [r0, #0]
 8009f82:	0004      	movs	r4, r0
 8009f84:	e7e2      	b.n	8009f4c <__pow5mult+0x68>
 8009f86:	0030      	movs	r0, r6
 8009f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f8a:	46c0      	nop			; (mov r8, r8)
 8009f8c:	0800b858 	.word	0x0800b858
 8009f90:	0800b685 	.word	0x0800b685
 8009f94:	0800b708 	.word	0x0800b708
 8009f98:	00000271 	.word	0x00000271

08009f9c <__lshift>:
 8009f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9e:	000c      	movs	r4, r1
 8009fa0:	0017      	movs	r7, r2
 8009fa2:	6923      	ldr	r3, [r4, #16]
 8009fa4:	1155      	asrs	r5, r2, #5
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	18eb      	adds	r3, r5, r3
 8009faa:	9302      	str	r3, [sp, #8]
 8009fac:	3301      	adds	r3, #1
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	6849      	ldr	r1, [r1, #4]
 8009fb2:	68a3      	ldr	r3, [r4, #8]
 8009fb4:	9004      	str	r0, [sp, #16]
 8009fb6:	9a01      	ldr	r2, [sp, #4]
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	db10      	blt.n	8009fde <__lshift+0x42>
 8009fbc:	9804      	ldr	r0, [sp, #16]
 8009fbe:	f7ff fdd7 	bl	8009b70 <_Balloc>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	0002      	movs	r2, r0
 8009fc6:	0006      	movs	r6, r0
 8009fc8:	0019      	movs	r1, r3
 8009fca:	3214      	adds	r2, #20
 8009fcc:	4298      	cmp	r0, r3
 8009fce:	d10c      	bne.n	8009fea <__lshift+0x4e>
 8009fd0:	21da      	movs	r1, #218	; 0xda
 8009fd2:	0002      	movs	r2, r0
 8009fd4:	4b26      	ldr	r3, [pc, #152]	; (800a070 <__lshift+0xd4>)
 8009fd6:	4827      	ldr	r0, [pc, #156]	; (800a074 <__lshift+0xd8>)
 8009fd8:	31ff      	adds	r1, #255	; 0xff
 8009fda:	f000 fbe7 	bl	800a7ac <__assert_func>
 8009fde:	3101      	adds	r1, #1
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	e7e8      	b.n	8009fb6 <__lshift+0x1a>
 8009fe4:	0098      	lsls	r0, r3, #2
 8009fe6:	5011      	str	r1, [r2, r0]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	42ab      	cmp	r3, r5
 8009fec:	dbfa      	blt.n	8009fe4 <__lshift+0x48>
 8009fee:	43eb      	mvns	r3, r5
 8009ff0:	17db      	asrs	r3, r3, #31
 8009ff2:	401d      	ands	r5, r3
 8009ff4:	211f      	movs	r1, #31
 8009ff6:	0023      	movs	r3, r4
 8009ff8:	0038      	movs	r0, r7
 8009ffa:	00ad      	lsls	r5, r5, #2
 8009ffc:	1955      	adds	r5, r2, r5
 8009ffe:	6922      	ldr	r2, [r4, #16]
 800a000:	3314      	adds	r3, #20
 800a002:	0092      	lsls	r2, r2, #2
 800a004:	4008      	ands	r0, r1
 800a006:	4684      	mov	ip, r0
 800a008:	189a      	adds	r2, r3, r2
 800a00a:	420f      	tst	r7, r1
 800a00c:	d02a      	beq.n	800a064 <__lshift+0xc8>
 800a00e:	3101      	adds	r1, #1
 800a010:	1a09      	subs	r1, r1, r0
 800a012:	9105      	str	r1, [sp, #20]
 800a014:	2100      	movs	r1, #0
 800a016:	9503      	str	r5, [sp, #12]
 800a018:	4667      	mov	r7, ip
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	40b8      	lsls	r0, r7
 800a01e:	4301      	orrs	r1, r0
 800a020:	9803      	ldr	r0, [sp, #12]
 800a022:	c002      	stmia	r0!, {r1}
 800a024:	cb02      	ldmia	r3!, {r1}
 800a026:	9003      	str	r0, [sp, #12]
 800a028:	9805      	ldr	r0, [sp, #20]
 800a02a:	40c1      	lsrs	r1, r0
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d8f3      	bhi.n	800a018 <__lshift+0x7c>
 800a030:	0020      	movs	r0, r4
 800a032:	3015      	adds	r0, #21
 800a034:	2304      	movs	r3, #4
 800a036:	4282      	cmp	r2, r0
 800a038:	d304      	bcc.n	800a044 <__lshift+0xa8>
 800a03a:	1b13      	subs	r3, r2, r4
 800a03c:	3b15      	subs	r3, #21
 800a03e:	089b      	lsrs	r3, r3, #2
 800a040:	3301      	adds	r3, #1
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	50e9      	str	r1, [r5, r3]
 800a046:	2900      	cmp	r1, #0
 800a048:	d002      	beq.n	800a050 <__lshift+0xb4>
 800a04a:	9b02      	ldr	r3, [sp, #8]
 800a04c:	3302      	adds	r3, #2
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	9b01      	ldr	r3, [sp, #4]
 800a052:	9804      	ldr	r0, [sp, #16]
 800a054:	3b01      	subs	r3, #1
 800a056:	0021      	movs	r1, r4
 800a058:	6133      	str	r3, [r6, #16]
 800a05a:	f7ff fdcd 	bl	8009bf8 <_Bfree>
 800a05e:	0030      	movs	r0, r6
 800a060:	b007      	add	sp, #28
 800a062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a064:	cb02      	ldmia	r3!, {r1}
 800a066:	c502      	stmia	r5!, {r1}
 800a068:	429a      	cmp	r2, r3
 800a06a:	d8fb      	bhi.n	800a064 <__lshift+0xc8>
 800a06c:	e7f0      	b.n	800a050 <__lshift+0xb4>
 800a06e:	46c0      	nop			; (mov r8, r8)
 800a070:	0800b6f7 	.word	0x0800b6f7
 800a074:	0800b708 	.word	0x0800b708

0800a078 <__mcmp>:
 800a078:	6902      	ldr	r2, [r0, #16]
 800a07a:	690b      	ldr	r3, [r1, #16]
 800a07c:	b530      	push	{r4, r5, lr}
 800a07e:	0004      	movs	r4, r0
 800a080:	1ad0      	subs	r0, r2, r3
 800a082:	429a      	cmp	r2, r3
 800a084:	d10d      	bne.n	800a0a2 <__mcmp+0x2a>
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	3414      	adds	r4, #20
 800a08a:	3114      	adds	r1, #20
 800a08c:	18e2      	adds	r2, r4, r3
 800a08e:	18c9      	adds	r1, r1, r3
 800a090:	3a04      	subs	r2, #4
 800a092:	3904      	subs	r1, #4
 800a094:	6815      	ldr	r5, [r2, #0]
 800a096:	680b      	ldr	r3, [r1, #0]
 800a098:	429d      	cmp	r5, r3
 800a09a:	d003      	beq.n	800a0a4 <__mcmp+0x2c>
 800a09c:	2001      	movs	r0, #1
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	d303      	bcc.n	800a0aa <__mcmp+0x32>
 800a0a2:	bd30      	pop	{r4, r5, pc}
 800a0a4:	4294      	cmp	r4, r2
 800a0a6:	d3f3      	bcc.n	800a090 <__mcmp+0x18>
 800a0a8:	e7fb      	b.n	800a0a2 <__mcmp+0x2a>
 800a0aa:	4240      	negs	r0, r0
 800a0ac:	e7f9      	b.n	800a0a2 <__mcmp+0x2a>
	...

0800a0b0 <__mdiff>:
 800a0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0b2:	000e      	movs	r6, r1
 800a0b4:	0007      	movs	r7, r0
 800a0b6:	0011      	movs	r1, r2
 800a0b8:	0030      	movs	r0, r6
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	0014      	movs	r4, r2
 800a0be:	f7ff ffdb 	bl	800a078 <__mcmp>
 800a0c2:	1e05      	subs	r5, r0, #0
 800a0c4:	d110      	bne.n	800a0e8 <__mdiff+0x38>
 800a0c6:	0001      	movs	r1, r0
 800a0c8:	0038      	movs	r0, r7
 800a0ca:	f7ff fd51 	bl	8009b70 <_Balloc>
 800a0ce:	1e02      	subs	r2, r0, #0
 800a0d0:	d104      	bne.n	800a0dc <__mdiff+0x2c>
 800a0d2:	4b40      	ldr	r3, [pc, #256]	; (800a1d4 <__mdiff+0x124>)
 800a0d4:	4940      	ldr	r1, [pc, #256]	; (800a1d8 <__mdiff+0x128>)
 800a0d6:	4841      	ldr	r0, [pc, #260]	; (800a1dc <__mdiff+0x12c>)
 800a0d8:	f000 fb68 	bl	800a7ac <__assert_func>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	6145      	str	r5, [r0, #20]
 800a0e0:	6103      	str	r3, [r0, #16]
 800a0e2:	0010      	movs	r0, r2
 800a0e4:	b007      	add	sp, #28
 800a0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	db04      	blt.n	800a0fa <__mdiff+0x4a>
 800a0f0:	0023      	movs	r3, r4
 800a0f2:	0034      	movs	r4, r6
 800a0f4:	001e      	movs	r6, r3
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	0038      	movs	r0, r7
 800a0fc:	6861      	ldr	r1, [r4, #4]
 800a0fe:	f7ff fd37 	bl	8009b70 <_Balloc>
 800a102:	1e02      	subs	r2, r0, #0
 800a104:	d103      	bne.n	800a10e <__mdiff+0x5e>
 800a106:	2190      	movs	r1, #144	; 0x90
 800a108:	4b32      	ldr	r3, [pc, #200]	; (800a1d4 <__mdiff+0x124>)
 800a10a:	0089      	lsls	r1, r1, #2
 800a10c:	e7e3      	b.n	800a0d6 <__mdiff+0x26>
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	2700      	movs	r7, #0
 800a112:	60c3      	str	r3, [r0, #12]
 800a114:	6920      	ldr	r0, [r4, #16]
 800a116:	3414      	adds	r4, #20
 800a118:	9401      	str	r4, [sp, #4]
 800a11a:	9b01      	ldr	r3, [sp, #4]
 800a11c:	0084      	lsls	r4, r0, #2
 800a11e:	191b      	adds	r3, r3, r4
 800a120:	0034      	movs	r4, r6
 800a122:	9302      	str	r3, [sp, #8]
 800a124:	6933      	ldr	r3, [r6, #16]
 800a126:	3414      	adds	r4, #20
 800a128:	0099      	lsls	r1, r3, #2
 800a12a:	1863      	adds	r3, r4, r1
 800a12c:	9303      	str	r3, [sp, #12]
 800a12e:	0013      	movs	r3, r2
 800a130:	3314      	adds	r3, #20
 800a132:	469c      	mov	ip, r3
 800a134:	9305      	str	r3, [sp, #20]
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	9304      	str	r3, [sp, #16]
 800a13a:	9b04      	ldr	r3, [sp, #16]
 800a13c:	cc02      	ldmia	r4!, {r1}
 800a13e:	cb20      	ldmia	r3!, {r5}
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	b2ab      	uxth	r3, r5
 800a144:	19df      	adds	r7, r3, r7
 800a146:	b28b      	uxth	r3, r1
 800a148:	1afb      	subs	r3, r7, r3
 800a14a:	0c09      	lsrs	r1, r1, #16
 800a14c:	0c2d      	lsrs	r5, r5, #16
 800a14e:	1a6d      	subs	r5, r5, r1
 800a150:	1419      	asrs	r1, r3, #16
 800a152:	186d      	adds	r5, r5, r1
 800a154:	4661      	mov	r1, ip
 800a156:	142f      	asrs	r7, r5, #16
 800a158:	b29b      	uxth	r3, r3
 800a15a:	042d      	lsls	r5, r5, #16
 800a15c:	432b      	orrs	r3, r5
 800a15e:	c108      	stmia	r1!, {r3}
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	468c      	mov	ip, r1
 800a164:	42a3      	cmp	r3, r4
 800a166:	d8e8      	bhi.n	800a13a <__mdiff+0x8a>
 800a168:	0031      	movs	r1, r6
 800a16a:	9c03      	ldr	r4, [sp, #12]
 800a16c:	3115      	adds	r1, #21
 800a16e:	2304      	movs	r3, #4
 800a170:	428c      	cmp	r4, r1
 800a172:	d304      	bcc.n	800a17e <__mdiff+0xce>
 800a174:	1ba3      	subs	r3, r4, r6
 800a176:	3b15      	subs	r3, #21
 800a178:	089b      	lsrs	r3, r3, #2
 800a17a:	3301      	adds	r3, #1
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	9901      	ldr	r1, [sp, #4]
 800a180:	18cc      	adds	r4, r1, r3
 800a182:	9905      	ldr	r1, [sp, #20]
 800a184:	0026      	movs	r6, r4
 800a186:	18cb      	adds	r3, r1, r3
 800a188:	469c      	mov	ip, r3
 800a18a:	9902      	ldr	r1, [sp, #8]
 800a18c:	428e      	cmp	r6, r1
 800a18e:	d310      	bcc.n	800a1b2 <__mdiff+0x102>
 800a190:	9e02      	ldr	r6, [sp, #8]
 800a192:	1ee1      	subs	r1, r4, #3
 800a194:	2500      	movs	r5, #0
 800a196:	428e      	cmp	r6, r1
 800a198:	d304      	bcc.n	800a1a4 <__mdiff+0xf4>
 800a19a:	0031      	movs	r1, r6
 800a19c:	3103      	adds	r1, #3
 800a19e:	1b0c      	subs	r4, r1, r4
 800a1a0:	08a4      	lsrs	r4, r4, #2
 800a1a2:	00a5      	lsls	r5, r4, #2
 800a1a4:	195b      	adds	r3, r3, r5
 800a1a6:	3b04      	subs	r3, #4
 800a1a8:	6819      	ldr	r1, [r3, #0]
 800a1aa:	2900      	cmp	r1, #0
 800a1ac:	d00f      	beq.n	800a1ce <__mdiff+0x11e>
 800a1ae:	6110      	str	r0, [r2, #16]
 800a1b0:	e797      	b.n	800a0e2 <__mdiff+0x32>
 800a1b2:	ce02      	ldmia	r6!, {r1}
 800a1b4:	b28d      	uxth	r5, r1
 800a1b6:	19ed      	adds	r5, r5, r7
 800a1b8:	0c0f      	lsrs	r7, r1, #16
 800a1ba:	1429      	asrs	r1, r5, #16
 800a1bc:	1879      	adds	r1, r7, r1
 800a1be:	140f      	asrs	r7, r1, #16
 800a1c0:	b2ad      	uxth	r5, r5
 800a1c2:	0409      	lsls	r1, r1, #16
 800a1c4:	430d      	orrs	r5, r1
 800a1c6:	4661      	mov	r1, ip
 800a1c8:	c120      	stmia	r1!, {r5}
 800a1ca:	468c      	mov	ip, r1
 800a1cc:	e7dd      	b.n	800a18a <__mdiff+0xda>
 800a1ce:	3801      	subs	r0, #1
 800a1d0:	e7e9      	b.n	800a1a6 <__mdiff+0xf6>
 800a1d2:	46c0      	nop			; (mov r8, r8)
 800a1d4:	0800b6f7 	.word	0x0800b6f7
 800a1d8:	00000232 	.word	0x00000232
 800a1dc:	0800b708 	.word	0x0800b708

0800a1e0 <__d2b>:
 800a1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	0014      	movs	r4, r2
 800a1e6:	001e      	movs	r6, r3
 800a1e8:	9f08      	ldr	r7, [sp, #32]
 800a1ea:	f7ff fcc1 	bl	8009b70 <_Balloc>
 800a1ee:	1e05      	subs	r5, r0, #0
 800a1f0:	d105      	bne.n	800a1fe <__d2b+0x1e>
 800a1f2:	0002      	movs	r2, r0
 800a1f4:	4b26      	ldr	r3, [pc, #152]	; (800a290 <__d2b+0xb0>)
 800a1f6:	4927      	ldr	r1, [pc, #156]	; (800a294 <__d2b+0xb4>)
 800a1f8:	4827      	ldr	r0, [pc, #156]	; (800a298 <__d2b+0xb8>)
 800a1fa:	f000 fad7 	bl	800a7ac <__assert_func>
 800a1fe:	0333      	lsls	r3, r6, #12
 800a200:	0076      	lsls	r6, r6, #1
 800a202:	0b1b      	lsrs	r3, r3, #12
 800a204:	0d76      	lsrs	r6, r6, #21
 800a206:	d124      	bne.n	800a252 <__d2b+0x72>
 800a208:	9301      	str	r3, [sp, #4]
 800a20a:	2c00      	cmp	r4, #0
 800a20c:	d027      	beq.n	800a25e <__d2b+0x7e>
 800a20e:	4668      	mov	r0, sp
 800a210:	9400      	str	r4, [sp, #0]
 800a212:	f7ff fd73 	bl	8009cfc <__lo0bits>
 800a216:	9c00      	ldr	r4, [sp, #0]
 800a218:	2800      	cmp	r0, #0
 800a21a:	d01e      	beq.n	800a25a <__d2b+0x7a>
 800a21c:	9b01      	ldr	r3, [sp, #4]
 800a21e:	2120      	movs	r1, #32
 800a220:	001a      	movs	r2, r3
 800a222:	1a09      	subs	r1, r1, r0
 800a224:	408a      	lsls	r2, r1
 800a226:	40c3      	lsrs	r3, r0
 800a228:	4322      	orrs	r2, r4
 800a22a:	616a      	str	r2, [r5, #20]
 800a22c:	9301      	str	r3, [sp, #4]
 800a22e:	9c01      	ldr	r4, [sp, #4]
 800a230:	61ac      	str	r4, [r5, #24]
 800a232:	1e63      	subs	r3, r4, #1
 800a234:	419c      	sbcs	r4, r3
 800a236:	3401      	adds	r4, #1
 800a238:	612c      	str	r4, [r5, #16]
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	d018      	beq.n	800a270 <__d2b+0x90>
 800a23e:	4b17      	ldr	r3, [pc, #92]	; (800a29c <__d2b+0xbc>)
 800a240:	18f6      	adds	r6, r6, r3
 800a242:	2335      	movs	r3, #53	; 0x35
 800a244:	1836      	adds	r6, r6, r0
 800a246:	1a18      	subs	r0, r3, r0
 800a248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24a:	603e      	str	r6, [r7, #0]
 800a24c:	6018      	str	r0, [r3, #0]
 800a24e:	0028      	movs	r0, r5
 800a250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a252:	2280      	movs	r2, #128	; 0x80
 800a254:	0352      	lsls	r2, r2, #13
 800a256:	4313      	orrs	r3, r2
 800a258:	e7d6      	b.n	800a208 <__d2b+0x28>
 800a25a:	616c      	str	r4, [r5, #20]
 800a25c:	e7e7      	b.n	800a22e <__d2b+0x4e>
 800a25e:	a801      	add	r0, sp, #4
 800a260:	f7ff fd4c 	bl	8009cfc <__lo0bits>
 800a264:	2401      	movs	r4, #1
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	612c      	str	r4, [r5, #16]
 800a26a:	616b      	str	r3, [r5, #20]
 800a26c:	3020      	adds	r0, #32
 800a26e:	e7e4      	b.n	800a23a <__d2b+0x5a>
 800a270:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <__d2b+0xc0>)
 800a272:	18c0      	adds	r0, r0, r3
 800a274:	4b0b      	ldr	r3, [pc, #44]	; (800a2a4 <__d2b+0xc4>)
 800a276:	6038      	str	r0, [r7, #0]
 800a278:	18e3      	adds	r3, r4, r3
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	18eb      	adds	r3, r5, r3
 800a27e:	6958      	ldr	r0, [r3, #20]
 800a280:	f7ff fd22 	bl	8009cc8 <__hi0bits>
 800a284:	0164      	lsls	r4, r4, #5
 800a286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a288:	1a24      	subs	r4, r4, r0
 800a28a:	601c      	str	r4, [r3, #0]
 800a28c:	e7df      	b.n	800a24e <__d2b+0x6e>
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	0800b6f7 	.word	0x0800b6f7
 800a294:	0000030a 	.word	0x0000030a
 800a298:	0800b708 	.word	0x0800b708
 800a29c:	fffffbcd 	.word	0xfffffbcd
 800a2a0:	fffffbce 	.word	0xfffffbce
 800a2a4:	3fffffff 	.word	0x3fffffff

0800a2a8 <_calloc_r>:
 800a2a8:	b570      	push	{r4, r5, r6, lr}
 800a2aa:	0c13      	lsrs	r3, r2, #16
 800a2ac:	0c0d      	lsrs	r5, r1, #16
 800a2ae:	d11e      	bne.n	800a2ee <_calloc_r+0x46>
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10c      	bne.n	800a2ce <_calloc_r+0x26>
 800a2b4:	b289      	uxth	r1, r1
 800a2b6:	b294      	uxth	r4, r2
 800a2b8:	434c      	muls	r4, r1
 800a2ba:	0021      	movs	r1, r4
 800a2bc:	f000 f88c 	bl	800a3d8 <_malloc_r>
 800a2c0:	1e05      	subs	r5, r0, #0
 800a2c2:	d01b      	beq.n	800a2fc <_calloc_r+0x54>
 800a2c4:	0022      	movs	r2, r4
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	f7fe f8fb 	bl	80084c2 <memset>
 800a2cc:	e016      	b.n	800a2fc <_calloc_r+0x54>
 800a2ce:	1c1d      	adds	r5, r3, #0
 800a2d0:	1c0b      	adds	r3, r1, #0
 800a2d2:	b292      	uxth	r2, r2
 800a2d4:	b289      	uxth	r1, r1
 800a2d6:	b29c      	uxth	r4, r3
 800a2d8:	4351      	muls	r1, r2
 800a2da:	b2ab      	uxth	r3, r5
 800a2dc:	4363      	muls	r3, r4
 800a2de:	0c0c      	lsrs	r4, r1, #16
 800a2e0:	191c      	adds	r4, r3, r4
 800a2e2:	0c22      	lsrs	r2, r4, #16
 800a2e4:	d107      	bne.n	800a2f6 <_calloc_r+0x4e>
 800a2e6:	0424      	lsls	r4, r4, #16
 800a2e8:	b289      	uxth	r1, r1
 800a2ea:	430c      	orrs	r4, r1
 800a2ec:	e7e5      	b.n	800a2ba <_calloc_r+0x12>
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <_calloc_r+0x4e>
 800a2f2:	1c13      	adds	r3, r2, #0
 800a2f4:	e7ed      	b.n	800a2d2 <_calloc_r+0x2a>
 800a2f6:	230c      	movs	r3, #12
 800a2f8:	2500      	movs	r5, #0
 800a2fa:	6003      	str	r3, [r0, #0]
 800a2fc:	0028      	movs	r0, r5
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}

0800a300 <_free_r>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	0005      	movs	r5, r0
 800a304:	2900      	cmp	r1, #0
 800a306:	d010      	beq.n	800a32a <_free_r+0x2a>
 800a308:	1f0c      	subs	r4, r1, #4
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	da00      	bge.n	800a312 <_free_r+0x12>
 800a310:	18e4      	adds	r4, r4, r3
 800a312:	0028      	movs	r0, r5
 800a314:	f000 fa9e 	bl	800a854 <__malloc_lock>
 800a318:	4a1d      	ldr	r2, [pc, #116]	; (800a390 <_free_r+0x90>)
 800a31a:	6813      	ldr	r3, [r2, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d105      	bne.n	800a32c <_free_r+0x2c>
 800a320:	6063      	str	r3, [r4, #4]
 800a322:	6014      	str	r4, [r2, #0]
 800a324:	0028      	movs	r0, r5
 800a326:	f000 fa9d 	bl	800a864 <__malloc_unlock>
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
 800a32c:	42a3      	cmp	r3, r4
 800a32e:	d908      	bls.n	800a342 <_free_r+0x42>
 800a330:	6821      	ldr	r1, [r4, #0]
 800a332:	1860      	adds	r0, r4, r1
 800a334:	4283      	cmp	r3, r0
 800a336:	d1f3      	bne.n	800a320 <_free_r+0x20>
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	1841      	adds	r1, r0, r1
 800a33e:	6021      	str	r1, [r4, #0]
 800a340:	e7ee      	b.n	800a320 <_free_r+0x20>
 800a342:	001a      	movs	r2, r3
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <_free_r+0x4e>
 800a34a:	42a3      	cmp	r3, r4
 800a34c:	d9f9      	bls.n	800a342 <_free_r+0x42>
 800a34e:	6811      	ldr	r1, [r2, #0]
 800a350:	1850      	adds	r0, r2, r1
 800a352:	42a0      	cmp	r0, r4
 800a354:	d10b      	bne.n	800a36e <_free_r+0x6e>
 800a356:	6820      	ldr	r0, [r4, #0]
 800a358:	1809      	adds	r1, r1, r0
 800a35a:	1850      	adds	r0, r2, r1
 800a35c:	6011      	str	r1, [r2, #0]
 800a35e:	4283      	cmp	r3, r0
 800a360:	d1e0      	bne.n	800a324 <_free_r+0x24>
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	1841      	adds	r1, r0, r1
 800a368:	6011      	str	r1, [r2, #0]
 800a36a:	6053      	str	r3, [r2, #4]
 800a36c:	e7da      	b.n	800a324 <_free_r+0x24>
 800a36e:	42a0      	cmp	r0, r4
 800a370:	d902      	bls.n	800a378 <_free_r+0x78>
 800a372:	230c      	movs	r3, #12
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	e7d5      	b.n	800a324 <_free_r+0x24>
 800a378:	6821      	ldr	r1, [r4, #0]
 800a37a:	1860      	adds	r0, r4, r1
 800a37c:	4283      	cmp	r3, r0
 800a37e:	d103      	bne.n	800a388 <_free_r+0x88>
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	1841      	adds	r1, r0, r1
 800a386:	6021      	str	r1, [r4, #0]
 800a388:	6063      	str	r3, [r4, #4]
 800a38a:	6054      	str	r4, [r2, #4]
 800a38c:	e7ca      	b.n	800a324 <_free_r+0x24>
 800a38e:	46c0      	nop			; (mov r8, r8)
 800a390:	200004d0 	.word	0x200004d0

0800a394 <sbrk_aligned>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	4e0f      	ldr	r6, [pc, #60]	; (800a3d4 <sbrk_aligned+0x40>)
 800a398:	000d      	movs	r5, r1
 800a39a:	6831      	ldr	r1, [r6, #0]
 800a39c:	0004      	movs	r4, r0
 800a39e:	2900      	cmp	r1, #0
 800a3a0:	d102      	bne.n	800a3a8 <sbrk_aligned+0x14>
 800a3a2:	f000 f9f1 	bl	800a788 <_sbrk_r>
 800a3a6:	6030      	str	r0, [r6, #0]
 800a3a8:	0029      	movs	r1, r5
 800a3aa:	0020      	movs	r0, r4
 800a3ac:	f000 f9ec 	bl	800a788 <_sbrk_r>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d00a      	beq.n	800a3ca <sbrk_aligned+0x36>
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	1cc5      	adds	r5, r0, #3
 800a3b8:	439d      	bics	r5, r3
 800a3ba:	42a8      	cmp	r0, r5
 800a3bc:	d007      	beq.n	800a3ce <sbrk_aligned+0x3a>
 800a3be:	1a29      	subs	r1, r5, r0
 800a3c0:	0020      	movs	r0, r4
 800a3c2:	f000 f9e1 	bl	800a788 <_sbrk_r>
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	d101      	bne.n	800a3ce <sbrk_aligned+0x3a>
 800a3ca:	2501      	movs	r5, #1
 800a3cc:	426d      	negs	r5, r5
 800a3ce:	0028      	movs	r0, r5
 800a3d0:	bd70      	pop	{r4, r5, r6, pc}
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	200004d4 	.word	0x200004d4

0800a3d8 <_malloc_r>:
 800a3d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3da:	2203      	movs	r2, #3
 800a3dc:	1ccb      	adds	r3, r1, #3
 800a3de:	4393      	bics	r3, r2
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	0006      	movs	r6, r0
 800a3e4:	001f      	movs	r7, r3
 800a3e6:	2b0c      	cmp	r3, #12
 800a3e8:	d232      	bcs.n	800a450 <_malloc_r+0x78>
 800a3ea:	270c      	movs	r7, #12
 800a3ec:	42b9      	cmp	r1, r7
 800a3ee:	d831      	bhi.n	800a454 <_malloc_r+0x7c>
 800a3f0:	0030      	movs	r0, r6
 800a3f2:	f000 fa2f 	bl	800a854 <__malloc_lock>
 800a3f6:	4d32      	ldr	r5, [pc, #200]	; (800a4c0 <_malloc_r+0xe8>)
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	001c      	movs	r4, r3
 800a3fc:	2c00      	cmp	r4, #0
 800a3fe:	d12e      	bne.n	800a45e <_malloc_r+0x86>
 800a400:	0039      	movs	r1, r7
 800a402:	0030      	movs	r0, r6
 800a404:	f7ff ffc6 	bl	800a394 <sbrk_aligned>
 800a408:	0004      	movs	r4, r0
 800a40a:	1c43      	adds	r3, r0, #1
 800a40c:	d11e      	bne.n	800a44c <_malloc_r+0x74>
 800a40e:	682c      	ldr	r4, [r5, #0]
 800a410:	0025      	movs	r5, r4
 800a412:	2d00      	cmp	r5, #0
 800a414:	d14a      	bne.n	800a4ac <_malloc_r+0xd4>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	0029      	movs	r1, r5
 800a41a:	18e3      	adds	r3, r4, r3
 800a41c:	0030      	movs	r0, r6
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	f000 f9b2 	bl	800a788 <_sbrk_r>
 800a424:	9b01      	ldr	r3, [sp, #4]
 800a426:	4283      	cmp	r3, r0
 800a428:	d143      	bne.n	800a4b2 <_malloc_r+0xda>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	3703      	adds	r7, #3
 800a42e:	1aff      	subs	r7, r7, r3
 800a430:	2303      	movs	r3, #3
 800a432:	439f      	bics	r7, r3
 800a434:	3708      	adds	r7, #8
 800a436:	2f0c      	cmp	r7, #12
 800a438:	d200      	bcs.n	800a43c <_malloc_r+0x64>
 800a43a:	270c      	movs	r7, #12
 800a43c:	0039      	movs	r1, r7
 800a43e:	0030      	movs	r0, r6
 800a440:	f7ff ffa8 	bl	800a394 <sbrk_aligned>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d034      	beq.n	800a4b2 <_malloc_r+0xda>
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	19df      	adds	r7, r3, r7
 800a44c:	6027      	str	r7, [r4, #0]
 800a44e:	e013      	b.n	800a478 <_malloc_r+0xa0>
 800a450:	2b00      	cmp	r3, #0
 800a452:	dacb      	bge.n	800a3ec <_malloc_r+0x14>
 800a454:	230c      	movs	r3, #12
 800a456:	2500      	movs	r5, #0
 800a458:	6033      	str	r3, [r6, #0]
 800a45a:	0028      	movs	r0, r5
 800a45c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a45e:	6822      	ldr	r2, [r4, #0]
 800a460:	1bd1      	subs	r1, r2, r7
 800a462:	d420      	bmi.n	800a4a6 <_malloc_r+0xce>
 800a464:	290b      	cmp	r1, #11
 800a466:	d917      	bls.n	800a498 <_malloc_r+0xc0>
 800a468:	19e2      	adds	r2, r4, r7
 800a46a:	6027      	str	r7, [r4, #0]
 800a46c:	42a3      	cmp	r3, r4
 800a46e:	d111      	bne.n	800a494 <_malloc_r+0xbc>
 800a470:	602a      	str	r2, [r5, #0]
 800a472:	6863      	ldr	r3, [r4, #4]
 800a474:	6011      	str	r1, [r2, #0]
 800a476:	6053      	str	r3, [r2, #4]
 800a478:	0030      	movs	r0, r6
 800a47a:	0025      	movs	r5, r4
 800a47c:	f000 f9f2 	bl	800a864 <__malloc_unlock>
 800a480:	2207      	movs	r2, #7
 800a482:	350b      	adds	r5, #11
 800a484:	1d23      	adds	r3, r4, #4
 800a486:	4395      	bics	r5, r2
 800a488:	1aea      	subs	r2, r5, r3
 800a48a:	429d      	cmp	r5, r3
 800a48c:	d0e5      	beq.n	800a45a <_malloc_r+0x82>
 800a48e:	1b5b      	subs	r3, r3, r5
 800a490:	50a3      	str	r3, [r4, r2]
 800a492:	e7e2      	b.n	800a45a <_malloc_r+0x82>
 800a494:	605a      	str	r2, [r3, #4]
 800a496:	e7ec      	b.n	800a472 <_malloc_r+0x9a>
 800a498:	6862      	ldr	r2, [r4, #4]
 800a49a:	42a3      	cmp	r3, r4
 800a49c:	d101      	bne.n	800a4a2 <_malloc_r+0xca>
 800a49e:	602a      	str	r2, [r5, #0]
 800a4a0:	e7ea      	b.n	800a478 <_malloc_r+0xa0>
 800a4a2:	605a      	str	r2, [r3, #4]
 800a4a4:	e7e8      	b.n	800a478 <_malloc_r+0xa0>
 800a4a6:	0023      	movs	r3, r4
 800a4a8:	6864      	ldr	r4, [r4, #4]
 800a4aa:	e7a7      	b.n	800a3fc <_malloc_r+0x24>
 800a4ac:	002c      	movs	r4, r5
 800a4ae:	686d      	ldr	r5, [r5, #4]
 800a4b0:	e7af      	b.n	800a412 <_malloc_r+0x3a>
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	0030      	movs	r0, r6
 800a4b6:	6033      	str	r3, [r6, #0]
 800a4b8:	f000 f9d4 	bl	800a864 <__malloc_unlock>
 800a4bc:	e7cd      	b.n	800a45a <_malloc_r+0x82>
 800a4be:	46c0      	nop			; (mov r8, r8)
 800a4c0:	200004d0 	.word	0x200004d0

0800a4c4 <__ssputs_r>:
 800a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c6:	688e      	ldr	r6, [r1, #8]
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	0007      	movs	r7, r0
 800a4cc:	000c      	movs	r4, r1
 800a4ce:	9203      	str	r2, [sp, #12]
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	429e      	cmp	r6, r3
 800a4d4:	d83c      	bhi.n	800a550 <__ssputs_r+0x8c>
 800a4d6:	2390      	movs	r3, #144	; 0x90
 800a4d8:	898a      	ldrh	r2, [r1, #12]
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	421a      	tst	r2, r3
 800a4de:	d034      	beq.n	800a54a <__ssputs_r+0x86>
 800a4e0:	6909      	ldr	r1, [r1, #16]
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	6960      	ldr	r0, [r4, #20]
 800a4e6:	1a5b      	subs	r3, r3, r1
 800a4e8:	9302      	str	r3, [sp, #8]
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	4343      	muls	r3, r0
 800a4ee:	0fdd      	lsrs	r5, r3, #31
 800a4f0:	18ed      	adds	r5, r5, r3
 800a4f2:	9b01      	ldr	r3, [sp, #4]
 800a4f4:	9802      	ldr	r0, [sp, #8]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	181b      	adds	r3, r3, r0
 800a4fa:	106d      	asrs	r5, r5, #1
 800a4fc:	42ab      	cmp	r3, r5
 800a4fe:	d900      	bls.n	800a502 <__ssputs_r+0x3e>
 800a500:	001d      	movs	r5, r3
 800a502:	0553      	lsls	r3, r2, #21
 800a504:	d532      	bpl.n	800a56c <__ssputs_r+0xa8>
 800a506:	0029      	movs	r1, r5
 800a508:	0038      	movs	r0, r7
 800a50a:	f7ff ff65 	bl	800a3d8 <_malloc_r>
 800a50e:	1e06      	subs	r6, r0, #0
 800a510:	d109      	bne.n	800a526 <__ssputs_r+0x62>
 800a512:	230c      	movs	r3, #12
 800a514:	603b      	str	r3, [r7, #0]
 800a516:	2340      	movs	r3, #64	; 0x40
 800a518:	2001      	movs	r0, #1
 800a51a:	89a2      	ldrh	r2, [r4, #12]
 800a51c:	4240      	negs	r0, r0
 800a51e:	4313      	orrs	r3, r2
 800a520:	81a3      	strh	r3, [r4, #12]
 800a522:	b005      	add	sp, #20
 800a524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a526:	9a02      	ldr	r2, [sp, #8]
 800a528:	6921      	ldr	r1, [r4, #16]
 800a52a:	f7fd ffc1 	bl	80084b0 <memcpy>
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	4a14      	ldr	r2, [pc, #80]	; (800a584 <__ssputs_r+0xc0>)
 800a532:	401a      	ands	r2, r3
 800a534:	2380      	movs	r3, #128	; 0x80
 800a536:	4313      	orrs	r3, r2
 800a538:	81a3      	strh	r3, [r4, #12]
 800a53a:	9b02      	ldr	r3, [sp, #8]
 800a53c:	6126      	str	r6, [r4, #16]
 800a53e:	18f6      	adds	r6, r6, r3
 800a540:	6026      	str	r6, [r4, #0]
 800a542:	6165      	str	r5, [r4, #20]
 800a544:	9e01      	ldr	r6, [sp, #4]
 800a546:	1aed      	subs	r5, r5, r3
 800a548:	60a5      	str	r5, [r4, #8]
 800a54a:	9b01      	ldr	r3, [sp, #4]
 800a54c:	429e      	cmp	r6, r3
 800a54e:	d900      	bls.n	800a552 <__ssputs_r+0x8e>
 800a550:	9e01      	ldr	r6, [sp, #4]
 800a552:	0032      	movs	r2, r6
 800a554:	9903      	ldr	r1, [sp, #12]
 800a556:	6820      	ldr	r0, [r4, #0]
 800a558:	f000 f968 	bl	800a82c <memmove>
 800a55c:	68a3      	ldr	r3, [r4, #8]
 800a55e:	2000      	movs	r0, #0
 800a560:	1b9b      	subs	r3, r3, r6
 800a562:	60a3      	str	r3, [r4, #8]
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	199e      	adds	r6, r3, r6
 800a568:	6026      	str	r6, [r4, #0]
 800a56a:	e7da      	b.n	800a522 <__ssputs_r+0x5e>
 800a56c:	002a      	movs	r2, r5
 800a56e:	0038      	movs	r0, r7
 800a570:	f000 f980 	bl	800a874 <_realloc_r>
 800a574:	1e06      	subs	r6, r0, #0
 800a576:	d1e0      	bne.n	800a53a <__ssputs_r+0x76>
 800a578:	0038      	movs	r0, r7
 800a57a:	6921      	ldr	r1, [r4, #16]
 800a57c:	f7ff fec0 	bl	800a300 <_free_r>
 800a580:	e7c7      	b.n	800a512 <__ssputs_r+0x4e>
 800a582:	46c0      	nop			; (mov r8, r8)
 800a584:	fffffb7f 	.word	0xfffffb7f

0800a588 <_svfiprintf_r>:
 800a588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a58a:	b0a1      	sub	sp, #132	; 0x84
 800a58c:	9003      	str	r0, [sp, #12]
 800a58e:	001d      	movs	r5, r3
 800a590:	898b      	ldrh	r3, [r1, #12]
 800a592:	000f      	movs	r7, r1
 800a594:	0016      	movs	r6, r2
 800a596:	061b      	lsls	r3, r3, #24
 800a598:	d511      	bpl.n	800a5be <_svfiprintf_r+0x36>
 800a59a:	690b      	ldr	r3, [r1, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10e      	bne.n	800a5be <_svfiprintf_r+0x36>
 800a5a0:	2140      	movs	r1, #64	; 0x40
 800a5a2:	f7ff ff19 	bl	800a3d8 <_malloc_r>
 800a5a6:	6038      	str	r0, [r7, #0]
 800a5a8:	6138      	str	r0, [r7, #16]
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d105      	bne.n	800a5ba <_svfiprintf_r+0x32>
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	9a03      	ldr	r2, [sp, #12]
 800a5b2:	3801      	subs	r0, #1
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	b021      	add	sp, #132	; 0x84
 800a5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ba:	2340      	movs	r3, #64	; 0x40
 800a5bc:	617b      	str	r3, [r7, #20]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	ac08      	add	r4, sp, #32
 800a5c2:	6163      	str	r3, [r4, #20]
 800a5c4:	3320      	adds	r3, #32
 800a5c6:	7663      	strb	r3, [r4, #25]
 800a5c8:	3310      	adds	r3, #16
 800a5ca:	76a3      	strb	r3, [r4, #26]
 800a5cc:	9507      	str	r5, [sp, #28]
 800a5ce:	0035      	movs	r5, r6
 800a5d0:	782b      	ldrb	r3, [r5, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <_svfiprintf_r+0x52>
 800a5d6:	2b25      	cmp	r3, #37	; 0x25
 800a5d8:	d147      	bne.n	800a66a <_svfiprintf_r+0xe2>
 800a5da:	1bab      	subs	r3, r5, r6
 800a5dc:	9305      	str	r3, [sp, #20]
 800a5de:	42b5      	cmp	r5, r6
 800a5e0:	d00c      	beq.n	800a5fc <_svfiprintf_r+0x74>
 800a5e2:	0032      	movs	r2, r6
 800a5e4:	0039      	movs	r1, r7
 800a5e6:	9803      	ldr	r0, [sp, #12]
 800a5e8:	f7ff ff6c 	bl	800a4c4 <__ssputs_r>
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	d100      	bne.n	800a5f2 <_svfiprintf_r+0x6a>
 800a5f0:	e0ae      	b.n	800a750 <_svfiprintf_r+0x1c8>
 800a5f2:	6962      	ldr	r2, [r4, #20]
 800a5f4:	9b05      	ldr	r3, [sp, #20]
 800a5f6:	4694      	mov	ip, r2
 800a5f8:	4463      	add	r3, ip
 800a5fa:	6163      	str	r3, [r4, #20]
 800a5fc:	782b      	ldrb	r3, [r5, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d100      	bne.n	800a604 <_svfiprintf_r+0x7c>
 800a602:	e0a5      	b.n	800a750 <_svfiprintf_r+0x1c8>
 800a604:	2201      	movs	r2, #1
 800a606:	2300      	movs	r3, #0
 800a608:	4252      	negs	r2, r2
 800a60a:	6062      	str	r2, [r4, #4]
 800a60c:	a904      	add	r1, sp, #16
 800a60e:	3254      	adds	r2, #84	; 0x54
 800a610:	1852      	adds	r2, r2, r1
 800a612:	1c6e      	adds	r6, r5, #1
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	60e3      	str	r3, [r4, #12]
 800a618:	60a3      	str	r3, [r4, #8]
 800a61a:	7013      	strb	r3, [r2, #0]
 800a61c:	65a3      	str	r3, [r4, #88]	; 0x58
 800a61e:	2205      	movs	r2, #5
 800a620:	7831      	ldrb	r1, [r6, #0]
 800a622:	4854      	ldr	r0, [pc, #336]	; (800a774 <_svfiprintf_r+0x1ec>)
 800a624:	f7ff fa98 	bl	8009b58 <memchr>
 800a628:	1c75      	adds	r5, r6, #1
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d11f      	bne.n	800a66e <_svfiprintf_r+0xe6>
 800a62e:	6822      	ldr	r2, [r4, #0]
 800a630:	06d3      	lsls	r3, r2, #27
 800a632:	d504      	bpl.n	800a63e <_svfiprintf_r+0xb6>
 800a634:	2353      	movs	r3, #83	; 0x53
 800a636:	a904      	add	r1, sp, #16
 800a638:	185b      	adds	r3, r3, r1
 800a63a:	2120      	movs	r1, #32
 800a63c:	7019      	strb	r1, [r3, #0]
 800a63e:	0713      	lsls	r3, r2, #28
 800a640:	d504      	bpl.n	800a64c <_svfiprintf_r+0xc4>
 800a642:	2353      	movs	r3, #83	; 0x53
 800a644:	a904      	add	r1, sp, #16
 800a646:	185b      	adds	r3, r3, r1
 800a648:	212b      	movs	r1, #43	; 0x2b
 800a64a:	7019      	strb	r1, [r3, #0]
 800a64c:	7833      	ldrb	r3, [r6, #0]
 800a64e:	2b2a      	cmp	r3, #42	; 0x2a
 800a650:	d016      	beq.n	800a680 <_svfiprintf_r+0xf8>
 800a652:	0035      	movs	r5, r6
 800a654:	2100      	movs	r1, #0
 800a656:	200a      	movs	r0, #10
 800a658:	68e3      	ldr	r3, [r4, #12]
 800a65a:	782a      	ldrb	r2, [r5, #0]
 800a65c:	1c6e      	adds	r6, r5, #1
 800a65e:	3a30      	subs	r2, #48	; 0x30
 800a660:	2a09      	cmp	r2, #9
 800a662:	d94e      	bls.n	800a702 <_svfiprintf_r+0x17a>
 800a664:	2900      	cmp	r1, #0
 800a666:	d111      	bne.n	800a68c <_svfiprintf_r+0x104>
 800a668:	e017      	b.n	800a69a <_svfiprintf_r+0x112>
 800a66a:	3501      	adds	r5, #1
 800a66c:	e7b0      	b.n	800a5d0 <_svfiprintf_r+0x48>
 800a66e:	4b41      	ldr	r3, [pc, #260]	; (800a774 <_svfiprintf_r+0x1ec>)
 800a670:	6822      	ldr	r2, [r4, #0]
 800a672:	1ac0      	subs	r0, r0, r3
 800a674:	2301      	movs	r3, #1
 800a676:	4083      	lsls	r3, r0
 800a678:	4313      	orrs	r3, r2
 800a67a:	002e      	movs	r6, r5
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	e7ce      	b.n	800a61e <_svfiprintf_r+0x96>
 800a680:	9b07      	ldr	r3, [sp, #28]
 800a682:	1d19      	adds	r1, r3, #4
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	9107      	str	r1, [sp, #28]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	db01      	blt.n	800a690 <_svfiprintf_r+0x108>
 800a68c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a68e:	e004      	b.n	800a69a <_svfiprintf_r+0x112>
 800a690:	425b      	negs	r3, r3
 800a692:	60e3      	str	r3, [r4, #12]
 800a694:	2302      	movs	r3, #2
 800a696:	4313      	orrs	r3, r2
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	782b      	ldrb	r3, [r5, #0]
 800a69c:	2b2e      	cmp	r3, #46	; 0x2e
 800a69e:	d10a      	bne.n	800a6b6 <_svfiprintf_r+0x12e>
 800a6a0:	786b      	ldrb	r3, [r5, #1]
 800a6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a4:	d135      	bne.n	800a712 <_svfiprintf_r+0x18a>
 800a6a6:	9b07      	ldr	r3, [sp, #28]
 800a6a8:	3502      	adds	r5, #2
 800a6aa:	1d1a      	adds	r2, r3, #4
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	9207      	str	r2, [sp, #28]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	db2b      	blt.n	800a70c <_svfiprintf_r+0x184>
 800a6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b6:	4e30      	ldr	r6, [pc, #192]	; (800a778 <_svfiprintf_r+0x1f0>)
 800a6b8:	2203      	movs	r2, #3
 800a6ba:	0030      	movs	r0, r6
 800a6bc:	7829      	ldrb	r1, [r5, #0]
 800a6be:	f7ff fa4b 	bl	8009b58 <memchr>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d006      	beq.n	800a6d4 <_svfiprintf_r+0x14c>
 800a6c6:	2340      	movs	r3, #64	; 0x40
 800a6c8:	1b80      	subs	r0, r0, r6
 800a6ca:	4083      	lsls	r3, r0
 800a6cc:	6822      	ldr	r2, [r4, #0]
 800a6ce:	3501      	adds	r5, #1
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	6023      	str	r3, [r4, #0]
 800a6d4:	7829      	ldrb	r1, [r5, #0]
 800a6d6:	2206      	movs	r2, #6
 800a6d8:	4828      	ldr	r0, [pc, #160]	; (800a77c <_svfiprintf_r+0x1f4>)
 800a6da:	1c6e      	adds	r6, r5, #1
 800a6dc:	7621      	strb	r1, [r4, #24]
 800a6de:	f7ff fa3b 	bl	8009b58 <memchr>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d03c      	beq.n	800a760 <_svfiprintf_r+0x1d8>
 800a6e6:	4b26      	ldr	r3, [pc, #152]	; (800a780 <_svfiprintf_r+0x1f8>)
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d125      	bne.n	800a738 <_svfiprintf_r+0x1b0>
 800a6ec:	2207      	movs	r2, #7
 800a6ee:	9b07      	ldr	r3, [sp, #28]
 800a6f0:	3307      	adds	r3, #7
 800a6f2:	4393      	bics	r3, r2
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	9307      	str	r3, [sp, #28]
 800a6f8:	6963      	ldr	r3, [r4, #20]
 800a6fa:	9a04      	ldr	r2, [sp, #16]
 800a6fc:	189b      	adds	r3, r3, r2
 800a6fe:	6163      	str	r3, [r4, #20]
 800a700:	e765      	b.n	800a5ce <_svfiprintf_r+0x46>
 800a702:	4343      	muls	r3, r0
 800a704:	0035      	movs	r5, r6
 800a706:	2101      	movs	r1, #1
 800a708:	189b      	adds	r3, r3, r2
 800a70a:	e7a6      	b.n	800a65a <_svfiprintf_r+0xd2>
 800a70c:	2301      	movs	r3, #1
 800a70e:	425b      	negs	r3, r3
 800a710:	e7d0      	b.n	800a6b4 <_svfiprintf_r+0x12c>
 800a712:	2300      	movs	r3, #0
 800a714:	200a      	movs	r0, #10
 800a716:	001a      	movs	r2, r3
 800a718:	3501      	adds	r5, #1
 800a71a:	6063      	str	r3, [r4, #4]
 800a71c:	7829      	ldrb	r1, [r5, #0]
 800a71e:	1c6e      	adds	r6, r5, #1
 800a720:	3930      	subs	r1, #48	; 0x30
 800a722:	2909      	cmp	r1, #9
 800a724:	d903      	bls.n	800a72e <_svfiprintf_r+0x1a6>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d0c5      	beq.n	800a6b6 <_svfiprintf_r+0x12e>
 800a72a:	9209      	str	r2, [sp, #36]	; 0x24
 800a72c:	e7c3      	b.n	800a6b6 <_svfiprintf_r+0x12e>
 800a72e:	4342      	muls	r2, r0
 800a730:	0035      	movs	r5, r6
 800a732:	2301      	movs	r3, #1
 800a734:	1852      	adds	r2, r2, r1
 800a736:	e7f1      	b.n	800a71c <_svfiprintf_r+0x194>
 800a738:	ab07      	add	r3, sp, #28
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	003a      	movs	r2, r7
 800a73e:	0021      	movs	r1, r4
 800a740:	4b10      	ldr	r3, [pc, #64]	; (800a784 <_svfiprintf_r+0x1fc>)
 800a742:	9803      	ldr	r0, [sp, #12]
 800a744:	f7fd ff70 	bl	8008628 <_printf_float>
 800a748:	9004      	str	r0, [sp, #16]
 800a74a:	9b04      	ldr	r3, [sp, #16]
 800a74c:	3301      	adds	r3, #1
 800a74e:	d1d3      	bne.n	800a6f8 <_svfiprintf_r+0x170>
 800a750:	89bb      	ldrh	r3, [r7, #12]
 800a752:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a754:	065b      	lsls	r3, r3, #25
 800a756:	d400      	bmi.n	800a75a <_svfiprintf_r+0x1d2>
 800a758:	e72d      	b.n	800a5b6 <_svfiprintf_r+0x2e>
 800a75a:	2001      	movs	r0, #1
 800a75c:	4240      	negs	r0, r0
 800a75e:	e72a      	b.n	800a5b6 <_svfiprintf_r+0x2e>
 800a760:	ab07      	add	r3, sp, #28
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	003a      	movs	r2, r7
 800a766:	0021      	movs	r1, r4
 800a768:	4b06      	ldr	r3, [pc, #24]	; (800a784 <_svfiprintf_r+0x1fc>)
 800a76a:	9803      	ldr	r0, [sp, #12]
 800a76c:	f7fe fa0e 	bl	8008b8c <_printf_i>
 800a770:	e7ea      	b.n	800a748 <_svfiprintf_r+0x1c0>
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	0800b864 	.word	0x0800b864
 800a778:	0800b86a 	.word	0x0800b86a
 800a77c:	0800b86e 	.word	0x0800b86e
 800a780:	08008629 	.word	0x08008629
 800a784:	0800a4c5 	.word	0x0800a4c5

0800a788 <_sbrk_r>:
 800a788:	2300      	movs	r3, #0
 800a78a:	b570      	push	{r4, r5, r6, lr}
 800a78c:	4d06      	ldr	r5, [pc, #24]	; (800a7a8 <_sbrk_r+0x20>)
 800a78e:	0004      	movs	r4, r0
 800a790:	0008      	movs	r0, r1
 800a792:	602b      	str	r3, [r5, #0]
 800a794:	f7f9 fe72 	bl	800447c <_sbrk>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d103      	bne.n	800a7a4 <_sbrk_r+0x1c>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d000      	beq.n	800a7a4 <_sbrk_r+0x1c>
 800a7a2:	6023      	str	r3, [r4, #0]
 800a7a4:	bd70      	pop	{r4, r5, r6, pc}
 800a7a6:	46c0      	nop			; (mov r8, r8)
 800a7a8:	200004d8 	.word	0x200004d8

0800a7ac <__assert_func>:
 800a7ac:	b530      	push	{r4, r5, lr}
 800a7ae:	0014      	movs	r4, r2
 800a7b0:	001a      	movs	r2, r3
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <__assert_func+0x2c>)
 800a7b4:	0005      	movs	r5, r0
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	b085      	sub	sp, #20
 800a7ba:	68d8      	ldr	r0, [r3, #12]
 800a7bc:	4b07      	ldr	r3, [pc, #28]	; (800a7dc <__assert_func+0x30>)
 800a7be:	2c00      	cmp	r4, #0
 800a7c0:	d101      	bne.n	800a7c6 <__assert_func+0x1a>
 800a7c2:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <__assert_func+0x34>)
 800a7c4:	001c      	movs	r4, r3
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	9100      	str	r1, [sp, #0]
 800a7ca:	002b      	movs	r3, r5
 800a7cc:	4905      	ldr	r1, [pc, #20]	; (800a7e4 <__assert_func+0x38>)
 800a7ce:	9402      	str	r4, [sp, #8]
 800a7d0:	f000 f80a 	bl	800a7e8 <fiprintf>
 800a7d4:	f000 faba 	bl	800ad4c <abort>
 800a7d8:	20000014 	.word	0x20000014
 800a7dc:	0800b875 	.word	0x0800b875
 800a7e0:	0800b8b0 	.word	0x0800b8b0
 800a7e4:	0800b882 	.word	0x0800b882

0800a7e8 <fiprintf>:
 800a7e8:	b40e      	push	{r1, r2, r3}
 800a7ea:	b503      	push	{r0, r1, lr}
 800a7ec:	0001      	movs	r1, r0
 800a7ee:	ab03      	add	r3, sp, #12
 800a7f0:	4804      	ldr	r0, [pc, #16]	; (800a804 <fiprintf+0x1c>)
 800a7f2:	cb04      	ldmia	r3!, {r2}
 800a7f4:	6800      	ldr	r0, [r0, #0]
 800a7f6:	9301      	str	r3, [sp, #4]
 800a7f8:	f000 f892 	bl	800a920 <_vfiprintf_r>
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bc08      	pop	{r3}
 800a800:	b003      	add	sp, #12
 800a802:	4718      	bx	r3
 800a804:	20000014 	.word	0x20000014

0800a808 <__ascii_mbtowc>:
 800a808:	b082      	sub	sp, #8
 800a80a:	2900      	cmp	r1, #0
 800a80c:	d100      	bne.n	800a810 <__ascii_mbtowc+0x8>
 800a80e:	a901      	add	r1, sp, #4
 800a810:	1e10      	subs	r0, r2, #0
 800a812:	d006      	beq.n	800a822 <__ascii_mbtowc+0x1a>
 800a814:	2b00      	cmp	r3, #0
 800a816:	d006      	beq.n	800a826 <__ascii_mbtowc+0x1e>
 800a818:	7813      	ldrb	r3, [r2, #0]
 800a81a:	600b      	str	r3, [r1, #0]
 800a81c:	7810      	ldrb	r0, [r2, #0]
 800a81e:	1e43      	subs	r3, r0, #1
 800a820:	4198      	sbcs	r0, r3
 800a822:	b002      	add	sp, #8
 800a824:	4770      	bx	lr
 800a826:	2002      	movs	r0, #2
 800a828:	4240      	negs	r0, r0
 800a82a:	e7fa      	b.n	800a822 <__ascii_mbtowc+0x1a>

0800a82c <memmove>:
 800a82c:	b510      	push	{r4, lr}
 800a82e:	4288      	cmp	r0, r1
 800a830:	d902      	bls.n	800a838 <memmove+0xc>
 800a832:	188b      	adds	r3, r1, r2
 800a834:	4298      	cmp	r0, r3
 800a836:	d303      	bcc.n	800a840 <memmove+0x14>
 800a838:	2300      	movs	r3, #0
 800a83a:	e007      	b.n	800a84c <memmove+0x20>
 800a83c:	5c8b      	ldrb	r3, [r1, r2]
 800a83e:	5483      	strb	r3, [r0, r2]
 800a840:	3a01      	subs	r2, #1
 800a842:	d2fb      	bcs.n	800a83c <memmove+0x10>
 800a844:	bd10      	pop	{r4, pc}
 800a846:	5ccc      	ldrb	r4, [r1, r3]
 800a848:	54c4      	strb	r4, [r0, r3]
 800a84a:	3301      	adds	r3, #1
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d1fa      	bne.n	800a846 <memmove+0x1a>
 800a850:	e7f8      	b.n	800a844 <memmove+0x18>
	...

0800a854 <__malloc_lock>:
 800a854:	b510      	push	{r4, lr}
 800a856:	4802      	ldr	r0, [pc, #8]	; (800a860 <__malloc_lock+0xc>)
 800a858:	f000 fc4f 	bl	800b0fa <__retarget_lock_acquire_recursive>
 800a85c:	bd10      	pop	{r4, pc}
 800a85e:	46c0      	nop			; (mov r8, r8)
 800a860:	200004dc 	.word	0x200004dc

0800a864 <__malloc_unlock>:
 800a864:	b510      	push	{r4, lr}
 800a866:	4802      	ldr	r0, [pc, #8]	; (800a870 <__malloc_unlock+0xc>)
 800a868:	f000 fc48 	bl	800b0fc <__retarget_lock_release_recursive>
 800a86c:	bd10      	pop	{r4, pc}
 800a86e:	46c0      	nop			; (mov r8, r8)
 800a870:	200004dc 	.word	0x200004dc

0800a874 <_realloc_r>:
 800a874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a876:	0007      	movs	r7, r0
 800a878:	000e      	movs	r6, r1
 800a87a:	0014      	movs	r4, r2
 800a87c:	2900      	cmp	r1, #0
 800a87e:	d105      	bne.n	800a88c <_realloc_r+0x18>
 800a880:	0011      	movs	r1, r2
 800a882:	f7ff fda9 	bl	800a3d8 <_malloc_r>
 800a886:	0005      	movs	r5, r0
 800a888:	0028      	movs	r0, r5
 800a88a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	d103      	bne.n	800a898 <_realloc_r+0x24>
 800a890:	f7ff fd36 	bl	800a300 <_free_r>
 800a894:	0025      	movs	r5, r4
 800a896:	e7f7      	b.n	800a888 <_realloc_r+0x14>
 800a898:	f000 fc9e 	bl	800b1d8 <_malloc_usable_size_r>
 800a89c:	9001      	str	r0, [sp, #4]
 800a89e:	4284      	cmp	r4, r0
 800a8a0:	d803      	bhi.n	800a8aa <_realloc_r+0x36>
 800a8a2:	0035      	movs	r5, r6
 800a8a4:	0843      	lsrs	r3, r0, #1
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	d3ee      	bcc.n	800a888 <_realloc_r+0x14>
 800a8aa:	0021      	movs	r1, r4
 800a8ac:	0038      	movs	r0, r7
 800a8ae:	f7ff fd93 	bl	800a3d8 <_malloc_r>
 800a8b2:	1e05      	subs	r5, r0, #0
 800a8b4:	d0e8      	beq.n	800a888 <_realloc_r+0x14>
 800a8b6:	9b01      	ldr	r3, [sp, #4]
 800a8b8:	0022      	movs	r2, r4
 800a8ba:	429c      	cmp	r4, r3
 800a8bc:	d900      	bls.n	800a8c0 <_realloc_r+0x4c>
 800a8be:	001a      	movs	r2, r3
 800a8c0:	0031      	movs	r1, r6
 800a8c2:	0028      	movs	r0, r5
 800a8c4:	f7fd fdf4 	bl	80084b0 <memcpy>
 800a8c8:	0031      	movs	r1, r6
 800a8ca:	0038      	movs	r0, r7
 800a8cc:	f7ff fd18 	bl	800a300 <_free_r>
 800a8d0:	e7da      	b.n	800a888 <_realloc_r+0x14>

0800a8d2 <__sfputc_r>:
 800a8d2:	6893      	ldr	r3, [r2, #8]
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	6093      	str	r3, [r2, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	da04      	bge.n	800a8e8 <__sfputc_r+0x16>
 800a8de:	6994      	ldr	r4, [r2, #24]
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	db07      	blt.n	800a8f4 <__sfputc_r+0x22>
 800a8e4:	290a      	cmp	r1, #10
 800a8e6:	d005      	beq.n	800a8f4 <__sfputc_r+0x22>
 800a8e8:	6813      	ldr	r3, [r2, #0]
 800a8ea:	1c58      	adds	r0, r3, #1
 800a8ec:	6010      	str	r0, [r2, #0]
 800a8ee:	7019      	strb	r1, [r3, #0]
 800a8f0:	0008      	movs	r0, r1
 800a8f2:	bd10      	pop	{r4, pc}
 800a8f4:	f000 f94e 	bl	800ab94 <__swbuf_r>
 800a8f8:	0001      	movs	r1, r0
 800a8fa:	e7f9      	b.n	800a8f0 <__sfputc_r+0x1e>

0800a8fc <__sfputs_r>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	0006      	movs	r6, r0
 800a900:	000f      	movs	r7, r1
 800a902:	0014      	movs	r4, r2
 800a904:	18d5      	adds	r5, r2, r3
 800a906:	42ac      	cmp	r4, r5
 800a908:	d101      	bne.n	800a90e <__sfputs_r+0x12>
 800a90a:	2000      	movs	r0, #0
 800a90c:	e007      	b.n	800a91e <__sfputs_r+0x22>
 800a90e:	7821      	ldrb	r1, [r4, #0]
 800a910:	003a      	movs	r2, r7
 800a912:	0030      	movs	r0, r6
 800a914:	f7ff ffdd 	bl	800a8d2 <__sfputc_r>
 800a918:	3401      	adds	r4, #1
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	d1f3      	bne.n	800a906 <__sfputs_r+0xa>
 800a91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a920 <_vfiprintf_r>:
 800a920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a922:	b0a1      	sub	sp, #132	; 0x84
 800a924:	0006      	movs	r6, r0
 800a926:	000c      	movs	r4, r1
 800a928:	001f      	movs	r7, r3
 800a92a:	9203      	str	r2, [sp, #12]
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d004      	beq.n	800a93a <_vfiprintf_r+0x1a>
 800a930:	6983      	ldr	r3, [r0, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <_vfiprintf_r+0x1a>
 800a936:	f000 fb3f 	bl	800afb8 <__sinit>
 800a93a:	4b8e      	ldr	r3, [pc, #568]	; (800ab74 <_vfiprintf_r+0x254>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	d11c      	bne.n	800a97a <_vfiprintf_r+0x5a>
 800a940:	6874      	ldr	r4, [r6, #4]
 800a942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a944:	07db      	lsls	r3, r3, #31
 800a946:	d405      	bmi.n	800a954 <_vfiprintf_r+0x34>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	059b      	lsls	r3, r3, #22
 800a94c:	d402      	bmi.n	800a954 <_vfiprintf_r+0x34>
 800a94e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a950:	f000 fbd3 	bl	800b0fa <__retarget_lock_acquire_recursive>
 800a954:	89a3      	ldrh	r3, [r4, #12]
 800a956:	071b      	lsls	r3, r3, #28
 800a958:	d502      	bpl.n	800a960 <_vfiprintf_r+0x40>
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d11d      	bne.n	800a99c <_vfiprintf_r+0x7c>
 800a960:	0021      	movs	r1, r4
 800a962:	0030      	movs	r0, r6
 800a964:	f000 f97a 	bl	800ac5c <__swsetup_r>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d017      	beq.n	800a99c <_vfiprintf_r+0x7c>
 800a96c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a96e:	07db      	lsls	r3, r3, #31
 800a970:	d50d      	bpl.n	800a98e <_vfiprintf_r+0x6e>
 800a972:	2001      	movs	r0, #1
 800a974:	4240      	negs	r0, r0
 800a976:	b021      	add	sp, #132	; 0x84
 800a978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a97a:	4b7f      	ldr	r3, [pc, #508]	; (800ab78 <_vfiprintf_r+0x258>)
 800a97c:	429c      	cmp	r4, r3
 800a97e:	d101      	bne.n	800a984 <_vfiprintf_r+0x64>
 800a980:	68b4      	ldr	r4, [r6, #8]
 800a982:	e7de      	b.n	800a942 <_vfiprintf_r+0x22>
 800a984:	4b7d      	ldr	r3, [pc, #500]	; (800ab7c <_vfiprintf_r+0x25c>)
 800a986:	429c      	cmp	r4, r3
 800a988:	d1db      	bne.n	800a942 <_vfiprintf_r+0x22>
 800a98a:	68f4      	ldr	r4, [r6, #12]
 800a98c:	e7d9      	b.n	800a942 <_vfiprintf_r+0x22>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	059b      	lsls	r3, r3, #22
 800a992:	d4ee      	bmi.n	800a972 <_vfiprintf_r+0x52>
 800a994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a996:	f000 fbb1 	bl	800b0fc <__retarget_lock_release_recursive>
 800a99a:	e7ea      	b.n	800a972 <_vfiprintf_r+0x52>
 800a99c:	2300      	movs	r3, #0
 800a99e:	ad08      	add	r5, sp, #32
 800a9a0:	616b      	str	r3, [r5, #20]
 800a9a2:	3320      	adds	r3, #32
 800a9a4:	766b      	strb	r3, [r5, #25]
 800a9a6:	3310      	adds	r3, #16
 800a9a8:	76ab      	strb	r3, [r5, #26]
 800a9aa:	9707      	str	r7, [sp, #28]
 800a9ac:	9f03      	ldr	r7, [sp, #12]
 800a9ae:	783b      	ldrb	r3, [r7, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <_vfiprintf_r+0x98>
 800a9b4:	2b25      	cmp	r3, #37	; 0x25
 800a9b6:	d14e      	bne.n	800aa56 <_vfiprintf_r+0x136>
 800a9b8:	9b03      	ldr	r3, [sp, #12]
 800a9ba:	1afb      	subs	r3, r7, r3
 800a9bc:	9305      	str	r3, [sp, #20]
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	429f      	cmp	r7, r3
 800a9c2:	d00d      	beq.n	800a9e0 <_vfiprintf_r+0xc0>
 800a9c4:	9b05      	ldr	r3, [sp, #20]
 800a9c6:	0021      	movs	r1, r4
 800a9c8:	0030      	movs	r0, r6
 800a9ca:	9a03      	ldr	r2, [sp, #12]
 800a9cc:	f7ff ff96 	bl	800a8fc <__sfputs_r>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d100      	bne.n	800a9d6 <_vfiprintf_r+0xb6>
 800a9d4:	e0b5      	b.n	800ab42 <_vfiprintf_r+0x222>
 800a9d6:	696a      	ldr	r2, [r5, #20]
 800a9d8:	9b05      	ldr	r3, [sp, #20]
 800a9da:	4694      	mov	ip, r2
 800a9dc:	4463      	add	r3, ip
 800a9de:	616b      	str	r3, [r5, #20]
 800a9e0:	783b      	ldrb	r3, [r7, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d100      	bne.n	800a9e8 <_vfiprintf_r+0xc8>
 800a9e6:	e0ac      	b.n	800ab42 <_vfiprintf_r+0x222>
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	1c7b      	adds	r3, r7, #1
 800a9ec:	9303      	str	r3, [sp, #12]
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4252      	negs	r2, r2
 800a9f2:	606a      	str	r2, [r5, #4]
 800a9f4:	a904      	add	r1, sp, #16
 800a9f6:	3254      	adds	r2, #84	; 0x54
 800a9f8:	1852      	adds	r2, r2, r1
 800a9fa:	602b      	str	r3, [r5, #0]
 800a9fc:	60eb      	str	r3, [r5, #12]
 800a9fe:	60ab      	str	r3, [r5, #8]
 800aa00:	7013      	strb	r3, [r2, #0]
 800aa02:	65ab      	str	r3, [r5, #88]	; 0x58
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	2205      	movs	r2, #5
 800aa08:	7819      	ldrb	r1, [r3, #0]
 800aa0a:	485d      	ldr	r0, [pc, #372]	; (800ab80 <_vfiprintf_r+0x260>)
 800aa0c:	f7ff f8a4 	bl	8009b58 <memchr>
 800aa10:	9b03      	ldr	r3, [sp, #12]
 800aa12:	1c5f      	adds	r7, r3, #1
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d120      	bne.n	800aa5a <_vfiprintf_r+0x13a>
 800aa18:	682a      	ldr	r2, [r5, #0]
 800aa1a:	06d3      	lsls	r3, r2, #27
 800aa1c:	d504      	bpl.n	800aa28 <_vfiprintf_r+0x108>
 800aa1e:	2353      	movs	r3, #83	; 0x53
 800aa20:	a904      	add	r1, sp, #16
 800aa22:	185b      	adds	r3, r3, r1
 800aa24:	2120      	movs	r1, #32
 800aa26:	7019      	strb	r1, [r3, #0]
 800aa28:	0713      	lsls	r3, r2, #28
 800aa2a:	d504      	bpl.n	800aa36 <_vfiprintf_r+0x116>
 800aa2c:	2353      	movs	r3, #83	; 0x53
 800aa2e:	a904      	add	r1, sp, #16
 800aa30:	185b      	adds	r3, r3, r1
 800aa32:	212b      	movs	r1, #43	; 0x2b
 800aa34:	7019      	strb	r1, [r3, #0]
 800aa36:	9b03      	ldr	r3, [sp, #12]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa3c:	d016      	beq.n	800aa6c <_vfiprintf_r+0x14c>
 800aa3e:	2100      	movs	r1, #0
 800aa40:	68eb      	ldr	r3, [r5, #12]
 800aa42:	9f03      	ldr	r7, [sp, #12]
 800aa44:	783a      	ldrb	r2, [r7, #0]
 800aa46:	1c78      	adds	r0, r7, #1
 800aa48:	3a30      	subs	r2, #48	; 0x30
 800aa4a:	4684      	mov	ip, r0
 800aa4c:	2a09      	cmp	r2, #9
 800aa4e:	d94f      	bls.n	800aaf0 <_vfiprintf_r+0x1d0>
 800aa50:	2900      	cmp	r1, #0
 800aa52:	d111      	bne.n	800aa78 <_vfiprintf_r+0x158>
 800aa54:	e017      	b.n	800aa86 <_vfiprintf_r+0x166>
 800aa56:	3701      	adds	r7, #1
 800aa58:	e7a9      	b.n	800a9ae <_vfiprintf_r+0x8e>
 800aa5a:	4b49      	ldr	r3, [pc, #292]	; (800ab80 <_vfiprintf_r+0x260>)
 800aa5c:	682a      	ldr	r2, [r5, #0]
 800aa5e:	1ac0      	subs	r0, r0, r3
 800aa60:	2301      	movs	r3, #1
 800aa62:	4083      	lsls	r3, r0
 800aa64:	4313      	orrs	r3, r2
 800aa66:	602b      	str	r3, [r5, #0]
 800aa68:	9703      	str	r7, [sp, #12]
 800aa6a:	e7cb      	b.n	800aa04 <_vfiprintf_r+0xe4>
 800aa6c:	9b07      	ldr	r3, [sp, #28]
 800aa6e:	1d19      	adds	r1, r3, #4
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	9107      	str	r1, [sp, #28]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	db01      	blt.n	800aa7c <_vfiprintf_r+0x15c>
 800aa78:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa7a:	e004      	b.n	800aa86 <_vfiprintf_r+0x166>
 800aa7c:	425b      	negs	r3, r3
 800aa7e:	60eb      	str	r3, [r5, #12]
 800aa80:	2302      	movs	r3, #2
 800aa82:	4313      	orrs	r3, r2
 800aa84:	602b      	str	r3, [r5, #0]
 800aa86:	783b      	ldrb	r3, [r7, #0]
 800aa88:	2b2e      	cmp	r3, #46	; 0x2e
 800aa8a:	d10a      	bne.n	800aaa2 <_vfiprintf_r+0x182>
 800aa8c:	787b      	ldrb	r3, [r7, #1]
 800aa8e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa90:	d137      	bne.n	800ab02 <_vfiprintf_r+0x1e2>
 800aa92:	9b07      	ldr	r3, [sp, #28]
 800aa94:	3702      	adds	r7, #2
 800aa96:	1d1a      	adds	r2, r3, #4
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	9207      	str	r2, [sp, #28]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	db2d      	blt.n	800aafc <_vfiprintf_r+0x1dc>
 800aaa0:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	7839      	ldrb	r1, [r7, #0]
 800aaa6:	4837      	ldr	r0, [pc, #220]	; (800ab84 <_vfiprintf_r+0x264>)
 800aaa8:	f7ff f856 	bl	8009b58 <memchr>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d007      	beq.n	800aac0 <_vfiprintf_r+0x1a0>
 800aab0:	4b34      	ldr	r3, [pc, #208]	; (800ab84 <_vfiprintf_r+0x264>)
 800aab2:	682a      	ldr	r2, [r5, #0]
 800aab4:	1ac0      	subs	r0, r0, r3
 800aab6:	2340      	movs	r3, #64	; 0x40
 800aab8:	4083      	lsls	r3, r0
 800aaba:	4313      	orrs	r3, r2
 800aabc:	3701      	adds	r7, #1
 800aabe:	602b      	str	r3, [r5, #0]
 800aac0:	7839      	ldrb	r1, [r7, #0]
 800aac2:	1c7b      	adds	r3, r7, #1
 800aac4:	2206      	movs	r2, #6
 800aac6:	4830      	ldr	r0, [pc, #192]	; (800ab88 <_vfiprintf_r+0x268>)
 800aac8:	9303      	str	r3, [sp, #12]
 800aaca:	7629      	strb	r1, [r5, #24]
 800aacc:	f7ff f844 	bl	8009b58 <memchr>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d045      	beq.n	800ab60 <_vfiprintf_r+0x240>
 800aad4:	4b2d      	ldr	r3, [pc, #180]	; (800ab8c <_vfiprintf_r+0x26c>)
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d127      	bne.n	800ab2a <_vfiprintf_r+0x20a>
 800aada:	2207      	movs	r2, #7
 800aadc:	9b07      	ldr	r3, [sp, #28]
 800aade:	3307      	adds	r3, #7
 800aae0:	4393      	bics	r3, r2
 800aae2:	3308      	adds	r3, #8
 800aae4:	9307      	str	r3, [sp, #28]
 800aae6:	696b      	ldr	r3, [r5, #20]
 800aae8:	9a04      	ldr	r2, [sp, #16]
 800aaea:	189b      	adds	r3, r3, r2
 800aaec:	616b      	str	r3, [r5, #20]
 800aaee:	e75d      	b.n	800a9ac <_vfiprintf_r+0x8c>
 800aaf0:	210a      	movs	r1, #10
 800aaf2:	434b      	muls	r3, r1
 800aaf4:	4667      	mov	r7, ip
 800aaf6:	189b      	adds	r3, r3, r2
 800aaf8:	3909      	subs	r1, #9
 800aafa:	e7a3      	b.n	800aa44 <_vfiprintf_r+0x124>
 800aafc:	2301      	movs	r3, #1
 800aafe:	425b      	negs	r3, r3
 800ab00:	e7ce      	b.n	800aaa0 <_vfiprintf_r+0x180>
 800ab02:	2300      	movs	r3, #0
 800ab04:	001a      	movs	r2, r3
 800ab06:	3701      	adds	r7, #1
 800ab08:	606b      	str	r3, [r5, #4]
 800ab0a:	7839      	ldrb	r1, [r7, #0]
 800ab0c:	1c78      	adds	r0, r7, #1
 800ab0e:	3930      	subs	r1, #48	; 0x30
 800ab10:	4684      	mov	ip, r0
 800ab12:	2909      	cmp	r1, #9
 800ab14:	d903      	bls.n	800ab1e <_vfiprintf_r+0x1fe>
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0c3      	beq.n	800aaa2 <_vfiprintf_r+0x182>
 800ab1a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab1c:	e7c1      	b.n	800aaa2 <_vfiprintf_r+0x182>
 800ab1e:	230a      	movs	r3, #10
 800ab20:	435a      	muls	r2, r3
 800ab22:	4667      	mov	r7, ip
 800ab24:	1852      	adds	r2, r2, r1
 800ab26:	3b09      	subs	r3, #9
 800ab28:	e7ef      	b.n	800ab0a <_vfiprintf_r+0x1ea>
 800ab2a:	ab07      	add	r3, sp, #28
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	0022      	movs	r2, r4
 800ab30:	0029      	movs	r1, r5
 800ab32:	0030      	movs	r0, r6
 800ab34:	4b16      	ldr	r3, [pc, #88]	; (800ab90 <_vfiprintf_r+0x270>)
 800ab36:	f7fd fd77 	bl	8008628 <_printf_float>
 800ab3a:	9004      	str	r0, [sp, #16]
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	d1d1      	bne.n	800aae6 <_vfiprintf_r+0x1c6>
 800ab42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab44:	07db      	lsls	r3, r3, #31
 800ab46:	d405      	bmi.n	800ab54 <_vfiprintf_r+0x234>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	059b      	lsls	r3, r3, #22
 800ab4c:	d402      	bmi.n	800ab54 <_vfiprintf_r+0x234>
 800ab4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab50:	f000 fad4 	bl	800b0fc <__retarget_lock_release_recursive>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	065b      	lsls	r3, r3, #25
 800ab58:	d500      	bpl.n	800ab5c <_vfiprintf_r+0x23c>
 800ab5a:	e70a      	b.n	800a972 <_vfiprintf_r+0x52>
 800ab5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ab5e:	e70a      	b.n	800a976 <_vfiprintf_r+0x56>
 800ab60:	ab07      	add	r3, sp, #28
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	0022      	movs	r2, r4
 800ab66:	0029      	movs	r1, r5
 800ab68:	0030      	movs	r0, r6
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <_vfiprintf_r+0x270>)
 800ab6c:	f7fe f80e 	bl	8008b8c <_printf_i>
 800ab70:	e7e3      	b.n	800ab3a <_vfiprintf_r+0x21a>
 800ab72:	46c0      	nop			; (mov r8, r8)
 800ab74:	0800b9dc 	.word	0x0800b9dc
 800ab78:	0800b9fc 	.word	0x0800b9fc
 800ab7c:	0800b9bc 	.word	0x0800b9bc
 800ab80:	0800b864 	.word	0x0800b864
 800ab84:	0800b86a 	.word	0x0800b86a
 800ab88:	0800b86e 	.word	0x0800b86e
 800ab8c:	08008629 	.word	0x08008629
 800ab90:	0800a8fd 	.word	0x0800a8fd

0800ab94 <__swbuf_r>:
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	0005      	movs	r5, r0
 800ab98:	000e      	movs	r6, r1
 800ab9a:	0014      	movs	r4, r2
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d004      	beq.n	800abaa <__swbuf_r+0x16>
 800aba0:	6983      	ldr	r3, [r0, #24]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <__swbuf_r+0x16>
 800aba6:	f000 fa07 	bl	800afb8 <__sinit>
 800abaa:	4b22      	ldr	r3, [pc, #136]	; (800ac34 <__swbuf_r+0xa0>)
 800abac:	429c      	cmp	r4, r3
 800abae:	d12e      	bne.n	800ac0e <__swbuf_r+0x7a>
 800abb0:	686c      	ldr	r4, [r5, #4]
 800abb2:	69a3      	ldr	r3, [r4, #24]
 800abb4:	60a3      	str	r3, [r4, #8]
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	071b      	lsls	r3, r3, #28
 800abba:	d532      	bpl.n	800ac22 <__swbuf_r+0x8e>
 800abbc:	6923      	ldr	r3, [r4, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d02f      	beq.n	800ac22 <__swbuf_r+0x8e>
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	6922      	ldr	r2, [r4, #16]
 800abc6:	b2f7      	uxtb	r7, r6
 800abc8:	1a98      	subs	r0, r3, r2
 800abca:	6963      	ldr	r3, [r4, #20]
 800abcc:	b2f6      	uxtb	r6, r6
 800abce:	4283      	cmp	r3, r0
 800abd0:	dc05      	bgt.n	800abde <__swbuf_r+0x4a>
 800abd2:	0021      	movs	r1, r4
 800abd4:	0028      	movs	r0, r5
 800abd6:	f000 f94d 	bl	800ae74 <_fflush_r>
 800abda:	2800      	cmp	r0, #0
 800abdc:	d127      	bne.n	800ac2e <__swbuf_r+0x9a>
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	3001      	adds	r0, #1
 800abe2:	3b01      	subs	r3, #1
 800abe4:	60a3      	str	r3, [r4, #8]
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	6022      	str	r2, [r4, #0]
 800abec:	701f      	strb	r7, [r3, #0]
 800abee:	6963      	ldr	r3, [r4, #20]
 800abf0:	4283      	cmp	r3, r0
 800abf2:	d004      	beq.n	800abfe <__swbuf_r+0x6a>
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	07db      	lsls	r3, r3, #31
 800abf8:	d507      	bpl.n	800ac0a <__swbuf_r+0x76>
 800abfa:	2e0a      	cmp	r6, #10
 800abfc:	d105      	bne.n	800ac0a <__swbuf_r+0x76>
 800abfe:	0021      	movs	r1, r4
 800ac00:	0028      	movs	r0, r5
 800ac02:	f000 f937 	bl	800ae74 <_fflush_r>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d111      	bne.n	800ac2e <__swbuf_r+0x9a>
 800ac0a:	0030      	movs	r0, r6
 800ac0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac0e:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <__swbuf_r+0xa4>)
 800ac10:	429c      	cmp	r4, r3
 800ac12:	d101      	bne.n	800ac18 <__swbuf_r+0x84>
 800ac14:	68ac      	ldr	r4, [r5, #8]
 800ac16:	e7cc      	b.n	800abb2 <__swbuf_r+0x1e>
 800ac18:	4b08      	ldr	r3, [pc, #32]	; (800ac3c <__swbuf_r+0xa8>)
 800ac1a:	429c      	cmp	r4, r3
 800ac1c:	d1c9      	bne.n	800abb2 <__swbuf_r+0x1e>
 800ac1e:	68ec      	ldr	r4, [r5, #12]
 800ac20:	e7c7      	b.n	800abb2 <__swbuf_r+0x1e>
 800ac22:	0021      	movs	r1, r4
 800ac24:	0028      	movs	r0, r5
 800ac26:	f000 f819 	bl	800ac5c <__swsetup_r>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d0c9      	beq.n	800abc2 <__swbuf_r+0x2e>
 800ac2e:	2601      	movs	r6, #1
 800ac30:	4276      	negs	r6, r6
 800ac32:	e7ea      	b.n	800ac0a <__swbuf_r+0x76>
 800ac34:	0800b9dc 	.word	0x0800b9dc
 800ac38:	0800b9fc 	.word	0x0800b9fc
 800ac3c:	0800b9bc 	.word	0x0800b9bc

0800ac40 <__ascii_wctomb>:
 800ac40:	0003      	movs	r3, r0
 800ac42:	1e08      	subs	r0, r1, #0
 800ac44:	d005      	beq.n	800ac52 <__ascii_wctomb+0x12>
 800ac46:	2aff      	cmp	r2, #255	; 0xff
 800ac48:	d904      	bls.n	800ac54 <__ascii_wctomb+0x14>
 800ac4a:	228a      	movs	r2, #138	; 0x8a
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	4240      	negs	r0, r0
 800ac52:	4770      	bx	lr
 800ac54:	2001      	movs	r0, #1
 800ac56:	700a      	strb	r2, [r1, #0]
 800ac58:	e7fb      	b.n	800ac52 <__ascii_wctomb+0x12>
	...

0800ac5c <__swsetup_r>:
 800ac5c:	4b37      	ldr	r3, [pc, #220]	; (800ad3c <__swsetup_r+0xe0>)
 800ac5e:	b570      	push	{r4, r5, r6, lr}
 800ac60:	681d      	ldr	r5, [r3, #0]
 800ac62:	0006      	movs	r6, r0
 800ac64:	000c      	movs	r4, r1
 800ac66:	2d00      	cmp	r5, #0
 800ac68:	d005      	beq.n	800ac76 <__swsetup_r+0x1a>
 800ac6a:	69ab      	ldr	r3, [r5, #24]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d102      	bne.n	800ac76 <__swsetup_r+0x1a>
 800ac70:	0028      	movs	r0, r5
 800ac72:	f000 f9a1 	bl	800afb8 <__sinit>
 800ac76:	4b32      	ldr	r3, [pc, #200]	; (800ad40 <__swsetup_r+0xe4>)
 800ac78:	429c      	cmp	r4, r3
 800ac7a:	d10f      	bne.n	800ac9c <__swsetup_r+0x40>
 800ac7c:	686c      	ldr	r4, [r5, #4]
 800ac7e:	230c      	movs	r3, #12
 800ac80:	5ee2      	ldrsh	r2, [r4, r3]
 800ac82:	b293      	uxth	r3, r2
 800ac84:	0711      	lsls	r1, r2, #28
 800ac86:	d42d      	bmi.n	800ace4 <__swsetup_r+0x88>
 800ac88:	06d9      	lsls	r1, r3, #27
 800ac8a:	d411      	bmi.n	800acb0 <__swsetup_r+0x54>
 800ac8c:	2309      	movs	r3, #9
 800ac8e:	2001      	movs	r0, #1
 800ac90:	6033      	str	r3, [r6, #0]
 800ac92:	3337      	adds	r3, #55	; 0x37
 800ac94:	4313      	orrs	r3, r2
 800ac96:	81a3      	strh	r3, [r4, #12]
 800ac98:	4240      	negs	r0, r0
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	4b29      	ldr	r3, [pc, #164]	; (800ad44 <__swsetup_r+0xe8>)
 800ac9e:	429c      	cmp	r4, r3
 800aca0:	d101      	bne.n	800aca6 <__swsetup_r+0x4a>
 800aca2:	68ac      	ldr	r4, [r5, #8]
 800aca4:	e7eb      	b.n	800ac7e <__swsetup_r+0x22>
 800aca6:	4b28      	ldr	r3, [pc, #160]	; (800ad48 <__swsetup_r+0xec>)
 800aca8:	429c      	cmp	r4, r3
 800acaa:	d1e8      	bne.n	800ac7e <__swsetup_r+0x22>
 800acac:	68ec      	ldr	r4, [r5, #12]
 800acae:	e7e6      	b.n	800ac7e <__swsetup_r+0x22>
 800acb0:	075b      	lsls	r3, r3, #29
 800acb2:	d513      	bpl.n	800acdc <__swsetup_r+0x80>
 800acb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acb6:	2900      	cmp	r1, #0
 800acb8:	d008      	beq.n	800accc <__swsetup_r+0x70>
 800acba:	0023      	movs	r3, r4
 800acbc:	3344      	adds	r3, #68	; 0x44
 800acbe:	4299      	cmp	r1, r3
 800acc0:	d002      	beq.n	800acc8 <__swsetup_r+0x6c>
 800acc2:	0030      	movs	r0, r6
 800acc4:	f7ff fb1c 	bl	800a300 <_free_r>
 800acc8:	2300      	movs	r3, #0
 800acca:	6363      	str	r3, [r4, #52]	; 0x34
 800accc:	2224      	movs	r2, #36	; 0x24
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	4393      	bics	r3, r2
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	2300      	movs	r3, #0
 800acd6:	6063      	str	r3, [r4, #4]
 800acd8:	6923      	ldr	r3, [r4, #16]
 800acda:	6023      	str	r3, [r4, #0]
 800acdc:	2308      	movs	r3, #8
 800acde:	89a2      	ldrh	r2, [r4, #12]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	6923      	ldr	r3, [r4, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10b      	bne.n	800ad02 <__swsetup_r+0xa6>
 800acea:	21a0      	movs	r1, #160	; 0xa0
 800acec:	2280      	movs	r2, #128	; 0x80
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	0089      	lsls	r1, r1, #2
 800acf2:	0092      	lsls	r2, r2, #2
 800acf4:	400b      	ands	r3, r1
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d003      	beq.n	800ad02 <__swsetup_r+0xa6>
 800acfa:	0021      	movs	r1, r4
 800acfc:	0030      	movs	r0, r6
 800acfe:	f000 fa27 	bl	800b150 <__smakebuf_r>
 800ad02:	220c      	movs	r2, #12
 800ad04:	5ea3      	ldrsh	r3, [r4, r2]
 800ad06:	2001      	movs	r0, #1
 800ad08:	001a      	movs	r2, r3
 800ad0a:	b299      	uxth	r1, r3
 800ad0c:	4002      	ands	r2, r0
 800ad0e:	4203      	tst	r3, r0
 800ad10:	d00f      	beq.n	800ad32 <__swsetup_r+0xd6>
 800ad12:	2200      	movs	r2, #0
 800ad14:	60a2      	str	r2, [r4, #8]
 800ad16:	6962      	ldr	r2, [r4, #20]
 800ad18:	4252      	negs	r2, r2
 800ad1a:	61a2      	str	r2, [r4, #24]
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	6922      	ldr	r2, [r4, #16]
 800ad20:	4282      	cmp	r2, r0
 800ad22:	d1ba      	bne.n	800ac9a <__swsetup_r+0x3e>
 800ad24:	060a      	lsls	r2, r1, #24
 800ad26:	d5b8      	bpl.n	800ac9a <__swsetup_r+0x3e>
 800ad28:	2240      	movs	r2, #64	; 0x40
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	3801      	subs	r0, #1
 800ad30:	e7b3      	b.n	800ac9a <__swsetup_r+0x3e>
 800ad32:	0788      	lsls	r0, r1, #30
 800ad34:	d400      	bmi.n	800ad38 <__swsetup_r+0xdc>
 800ad36:	6962      	ldr	r2, [r4, #20]
 800ad38:	60a2      	str	r2, [r4, #8]
 800ad3a:	e7ef      	b.n	800ad1c <__swsetup_r+0xc0>
 800ad3c:	20000014 	.word	0x20000014
 800ad40:	0800b9dc 	.word	0x0800b9dc
 800ad44:	0800b9fc 	.word	0x0800b9fc
 800ad48:	0800b9bc 	.word	0x0800b9bc

0800ad4c <abort>:
 800ad4c:	2006      	movs	r0, #6
 800ad4e:	b510      	push	{r4, lr}
 800ad50:	f000 fa74 	bl	800b23c <raise>
 800ad54:	2001      	movs	r0, #1
 800ad56:	f7f9 fb1f 	bl	8004398 <_exit>
	...

0800ad5c <__sflush_r>:
 800ad5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad5e:	898b      	ldrh	r3, [r1, #12]
 800ad60:	0005      	movs	r5, r0
 800ad62:	000c      	movs	r4, r1
 800ad64:	071a      	lsls	r2, r3, #28
 800ad66:	d45f      	bmi.n	800ae28 <__sflush_r+0xcc>
 800ad68:	684a      	ldr	r2, [r1, #4]
 800ad6a:	2a00      	cmp	r2, #0
 800ad6c:	dc04      	bgt.n	800ad78 <__sflush_r+0x1c>
 800ad6e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ad70:	2a00      	cmp	r2, #0
 800ad72:	dc01      	bgt.n	800ad78 <__sflush_r+0x1c>
 800ad74:	2000      	movs	r0, #0
 800ad76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad78:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad7a:	2f00      	cmp	r7, #0
 800ad7c:	d0fa      	beq.n	800ad74 <__sflush_r+0x18>
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2180      	movs	r1, #128	; 0x80
 800ad82:	682e      	ldr	r6, [r5, #0]
 800ad84:	602a      	str	r2, [r5, #0]
 800ad86:	001a      	movs	r2, r3
 800ad88:	0149      	lsls	r1, r1, #5
 800ad8a:	400a      	ands	r2, r1
 800ad8c:	420b      	tst	r3, r1
 800ad8e:	d034      	beq.n	800adfa <__sflush_r+0x9e>
 800ad90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	075b      	lsls	r3, r3, #29
 800ad96:	d506      	bpl.n	800ada6 <__sflush_r+0x4a>
 800ad98:	6863      	ldr	r3, [r4, #4]
 800ad9a:	1ac0      	subs	r0, r0, r3
 800ad9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <__sflush_r+0x4a>
 800ada2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ada4:	1ac0      	subs	r0, r0, r3
 800ada6:	0002      	movs	r2, r0
 800ada8:	6a21      	ldr	r1, [r4, #32]
 800adaa:	2300      	movs	r3, #0
 800adac:	0028      	movs	r0, r5
 800adae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800adb0:	47b8      	blx	r7
 800adb2:	89a1      	ldrh	r1, [r4, #12]
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d106      	bne.n	800adc6 <__sflush_r+0x6a>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	2b1d      	cmp	r3, #29
 800adbc:	d831      	bhi.n	800ae22 <__sflush_r+0xc6>
 800adbe:	4a2c      	ldr	r2, [pc, #176]	; (800ae70 <__sflush_r+0x114>)
 800adc0:	40da      	lsrs	r2, r3
 800adc2:	07d3      	lsls	r3, r2, #31
 800adc4:	d52d      	bpl.n	800ae22 <__sflush_r+0xc6>
 800adc6:	2300      	movs	r3, #0
 800adc8:	6063      	str	r3, [r4, #4]
 800adca:	6923      	ldr	r3, [r4, #16]
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	04cb      	lsls	r3, r1, #19
 800add0:	d505      	bpl.n	800adde <__sflush_r+0x82>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d102      	bne.n	800addc <__sflush_r+0x80>
 800add6:	682b      	ldr	r3, [r5, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d100      	bne.n	800adde <__sflush_r+0x82>
 800addc:	6560      	str	r0, [r4, #84]	; 0x54
 800adde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ade0:	602e      	str	r6, [r5, #0]
 800ade2:	2900      	cmp	r1, #0
 800ade4:	d0c6      	beq.n	800ad74 <__sflush_r+0x18>
 800ade6:	0023      	movs	r3, r4
 800ade8:	3344      	adds	r3, #68	; 0x44
 800adea:	4299      	cmp	r1, r3
 800adec:	d002      	beq.n	800adf4 <__sflush_r+0x98>
 800adee:	0028      	movs	r0, r5
 800adf0:	f7ff fa86 	bl	800a300 <_free_r>
 800adf4:	2000      	movs	r0, #0
 800adf6:	6360      	str	r0, [r4, #52]	; 0x34
 800adf8:	e7bd      	b.n	800ad76 <__sflush_r+0x1a>
 800adfa:	2301      	movs	r3, #1
 800adfc:	0028      	movs	r0, r5
 800adfe:	6a21      	ldr	r1, [r4, #32]
 800ae00:	47b8      	blx	r7
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	d1c5      	bne.n	800ad92 <__sflush_r+0x36>
 800ae06:	682b      	ldr	r3, [r5, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0c2      	beq.n	800ad92 <__sflush_r+0x36>
 800ae0c:	2b1d      	cmp	r3, #29
 800ae0e:	d001      	beq.n	800ae14 <__sflush_r+0xb8>
 800ae10:	2b16      	cmp	r3, #22
 800ae12:	d101      	bne.n	800ae18 <__sflush_r+0xbc>
 800ae14:	602e      	str	r6, [r5, #0]
 800ae16:	e7ad      	b.n	800ad74 <__sflush_r+0x18>
 800ae18:	2340      	movs	r3, #64	; 0x40
 800ae1a:	89a2      	ldrh	r2, [r4, #12]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	e7a9      	b.n	800ad76 <__sflush_r+0x1a>
 800ae22:	2340      	movs	r3, #64	; 0x40
 800ae24:	430b      	orrs	r3, r1
 800ae26:	e7fa      	b.n	800ae1e <__sflush_r+0xc2>
 800ae28:	690f      	ldr	r7, [r1, #16]
 800ae2a:	2f00      	cmp	r7, #0
 800ae2c:	d0a2      	beq.n	800ad74 <__sflush_r+0x18>
 800ae2e:	680a      	ldr	r2, [r1, #0]
 800ae30:	600f      	str	r7, [r1, #0]
 800ae32:	1bd2      	subs	r2, r2, r7
 800ae34:	9201      	str	r2, [sp, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	079b      	lsls	r3, r3, #30
 800ae3a:	d100      	bne.n	800ae3e <__sflush_r+0xe2>
 800ae3c:	694a      	ldr	r2, [r1, #20]
 800ae3e:	60a2      	str	r2, [r4, #8]
 800ae40:	9b01      	ldr	r3, [sp, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dc00      	bgt.n	800ae48 <__sflush_r+0xec>
 800ae46:	e795      	b.n	800ad74 <__sflush_r+0x18>
 800ae48:	003a      	movs	r2, r7
 800ae4a:	0028      	movs	r0, r5
 800ae4c:	9b01      	ldr	r3, [sp, #4]
 800ae4e:	6a21      	ldr	r1, [r4, #32]
 800ae50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae52:	47b0      	blx	r6
 800ae54:	2800      	cmp	r0, #0
 800ae56:	dc06      	bgt.n	800ae66 <__sflush_r+0x10a>
 800ae58:	2340      	movs	r3, #64	; 0x40
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	89a2      	ldrh	r2, [r4, #12]
 800ae5e:	4240      	negs	r0, r0
 800ae60:	4313      	orrs	r3, r2
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	e787      	b.n	800ad76 <__sflush_r+0x1a>
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	183f      	adds	r7, r7, r0
 800ae6a:	1a1b      	subs	r3, r3, r0
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	e7e7      	b.n	800ae40 <__sflush_r+0xe4>
 800ae70:	20400001 	.word	0x20400001

0800ae74 <_fflush_r>:
 800ae74:	690b      	ldr	r3, [r1, #16]
 800ae76:	b570      	push	{r4, r5, r6, lr}
 800ae78:	0005      	movs	r5, r0
 800ae7a:	000c      	movs	r4, r1
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d102      	bne.n	800ae86 <_fflush_r+0x12>
 800ae80:	2500      	movs	r5, #0
 800ae82:	0028      	movs	r0, r5
 800ae84:	bd70      	pop	{r4, r5, r6, pc}
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d004      	beq.n	800ae94 <_fflush_r+0x20>
 800ae8a:	6983      	ldr	r3, [r0, #24]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <_fflush_r+0x20>
 800ae90:	f000 f892 	bl	800afb8 <__sinit>
 800ae94:	4b14      	ldr	r3, [pc, #80]	; (800aee8 <_fflush_r+0x74>)
 800ae96:	429c      	cmp	r4, r3
 800ae98:	d11b      	bne.n	800aed2 <_fflush_r+0x5e>
 800ae9a:	686c      	ldr	r4, [r5, #4]
 800ae9c:	220c      	movs	r2, #12
 800ae9e:	5ea3      	ldrsh	r3, [r4, r2]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d0ed      	beq.n	800ae80 <_fflush_r+0xc>
 800aea4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aea6:	07d2      	lsls	r2, r2, #31
 800aea8:	d404      	bmi.n	800aeb4 <_fflush_r+0x40>
 800aeaa:	059b      	lsls	r3, r3, #22
 800aeac:	d402      	bmi.n	800aeb4 <_fflush_r+0x40>
 800aeae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb0:	f000 f923 	bl	800b0fa <__retarget_lock_acquire_recursive>
 800aeb4:	0028      	movs	r0, r5
 800aeb6:	0021      	movs	r1, r4
 800aeb8:	f7ff ff50 	bl	800ad5c <__sflush_r>
 800aebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aebe:	0005      	movs	r5, r0
 800aec0:	07db      	lsls	r3, r3, #31
 800aec2:	d4de      	bmi.n	800ae82 <_fflush_r+0xe>
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	059b      	lsls	r3, r3, #22
 800aec8:	d4db      	bmi.n	800ae82 <_fflush_r+0xe>
 800aeca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aecc:	f000 f916 	bl	800b0fc <__retarget_lock_release_recursive>
 800aed0:	e7d7      	b.n	800ae82 <_fflush_r+0xe>
 800aed2:	4b06      	ldr	r3, [pc, #24]	; (800aeec <_fflush_r+0x78>)
 800aed4:	429c      	cmp	r4, r3
 800aed6:	d101      	bne.n	800aedc <_fflush_r+0x68>
 800aed8:	68ac      	ldr	r4, [r5, #8]
 800aeda:	e7df      	b.n	800ae9c <_fflush_r+0x28>
 800aedc:	4b04      	ldr	r3, [pc, #16]	; (800aef0 <_fflush_r+0x7c>)
 800aede:	429c      	cmp	r4, r3
 800aee0:	d1dc      	bne.n	800ae9c <_fflush_r+0x28>
 800aee2:	68ec      	ldr	r4, [r5, #12]
 800aee4:	e7da      	b.n	800ae9c <_fflush_r+0x28>
 800aee6:	46c0      	nop			; (mov r8, r8)
 800aee8:	0800b9dc 	.word	0x0800b9dc
 800aeec:	0800b9fc 	.word	0x0800b9fc
 800aef0:	0800b9bc 	.word	0x0800b9bc

0800aef4 <std>:
 800aef4:	2300      	movs	r3, #0
 800aef6:	b510      	push	{r4, lr}
 800aef8:	0004      	movs	r4, r0
 800aefa:	6003      	str	r3, [r0, #0]
 800aefc:	6043      	str	r3, [r0, #4]
 800aefe:	6083      	str	r3, [r0, #8]
 800af00:	8181      	strh	r1, [r0, #12]
 800af02:	6643      	str	r3, [r0, #100]	; 0x64
 800af04:	0019      	movs	r1, r3
 800af06:	81c2      	strh	r2, [r0, #14]
 800af08:	6103      	str	r3, [r0, #16]
 800af0a:	6143      	str	r3, [r0, #20]
 800af0c:	6183      	str	r3, [r0, #24]
 800af0e:	2208      	movs	r2, #8
 800af10:	305c      	adds	r0, #92	; 0x5c
 800af12:	f7fd fad6 	bl	80084c2 <memset>
 800af16:	4b05      	ldr	r3, [pc, #20]	; (800af2c <std+0x38>)
 800af18:	6224      	str	r4, [r4, #32]
 800af1a:	6263      	str	r3, [r4, #36]	; 0x24
 800af1c:	4b04      	ldr	r3, [pc, #16]	; (800af30 <std+0x3c>)
 800af1e:	62a3      	str	r3, [r4, #40]	; 0x28
 800af20:	4b04      	ldr	r3, [pc, #16]	; (800af34 <std+0x40>)
 800af22:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af24:	4b04      	ldr	r3, [pc, #16]	; (800af38 <std+0x44>)
 800af26:	6323      	str	r3, [r4, #48]	; 0x30
 800af28:	bd10      	pop	{r4, pc}
 800af2a:	46c0      	nop			; (mov r8, r8)
 800af2c:	0800b27d 	.word	0x0800b27d
 800af30:	0800b2a5 	.word	0x0800b2a5
 800af34:	0800b2dd 	.word	0x0800b2dd
 800af38:	0800b309 	.word	0x0800b309

0800af3c <_cleanup_r>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	4902      	ldr	r1, [pc, #8]	; (800af48 <_cleanup_r+0xc>)
 800af40:	f000 f8ba 	bl	800b0b8 <_fwalk_reent>
 800af44:	bd10      	pop	{r4, pc}
 800af46:	46c0      	nop			; (mov r8, r8)
 800af48:	0800ae75 	.word	0x0800ae75

0800af4c <__sfmoreglue>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	2568      	movs	r5, #104	; 0x68
 800af50:	1e4a      	subs	r2, r1, #1
 800af52:	4355      	muls	r5, r2
 800af54:	000e      	movs	r6, r1
 800af56:	0029      	movs	r1, r5
 800af58:	3174      	adds	r1, #116	; 0x74
 800af5a:	f7ff fa3d 	bl	800a3d8 <_malloc_r>
 800af5e:	1e04      	subs	r4, r0, #0
 800af60:	d008      	beq.n	800af74 <__sfmoreglue+0x28>
 800af62:	2100      	movs	r1, #0
 800af64:	002a      	movs	r2, r5
 800af66:	6001      	str	r1, [r0, #0]
 800af68:	6046      	str	r6, [r0, #4]
 800af6a:	300c      	adds	r0, #12
 800af6c:	60a0      	str	r0, [r4, #8]
 800af6e:	3268      	adds	r2, #104	; 0x68
 800af70:	f7fd faa7 	bl	80084c2 <memset>
 800af74:	0020      	movs	r0, r4
 800af76:	bd70      	pop	{r4, r5, r6, pc}

0800af78 <__sfp_lock_acquire>:
 800af78:	b510      	push	{r4, lr}
 800af7a:	4802      	ldr	r0, [pc, #8]	; (800af84 <__sfp_lock_acquire+0xc>)
 800af7c:	f000 f8bd 	bl	800b0fa <__retarget_lock_acquire_recursive>
 800af80:	bd10      	pop	{r4, pc}
 800af82:	46c0      	nop			; (mov r8, r8)
 800af84:	200004dd 	.word	0x200004dd

0800af88 <__sfp_lock_release>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	4802      	ldr	r0, [pc, #8]	; (800af94 <__sfp_lock_release+0xc>)
 800af8c:	f000 f8b6 	bl	800b0fc <__retarget_lock_release_recursive>
 800af90:	bd10      	pop	{r4, pc}
 800af92:	46c0      	nop			; (mov r8, r8)
 800af94:	200004dd 	.word	0x200004dd

0800af98 <__sinit_lock_acquire>:
 800af98:	b510      	push	{r4, lr}
 800af9a:	4802      	ldr	r0, [pc, #8]	; (800afa4 <__sinit_lock_acquire+0xc>)
 800af9c:	f000 f8ad 	bl	800b0fa <__retarget_lock_acquire_recursive>
 800afa0:	bd10      	pop	{r4, pc}
 800afa2:	46c0      	nop			; (mov r8, r8)
 800afa4:	200004de 	.word	0x200004de

0800afa8 <__sinit_lock_release>:
 800afa8:	b510      	push	{r4, lr}
 800afaa:	4802      	ldr	r0, [pc, #8]	; (800afb4 <__sinit_lock_release+0xc>)
 800afac:	f000 f8a6 	bl	800b0fc <__retarget_lock_release_recursive>
 800afb0:	bd10      	pop	{r4, pc}
 800afb2:	46c0      	nop			; (mov r8, r8)
 800afb4:	200004de 	.word	0x200004de

0800afb8 <__sinit>:
 800afb8:	b513      	push	{r0, r1, r4, lr}
 800afba:	0004      	movs	r4, r0
 800afbc:	f7ff ffec 	bl	800af98 <__sinit_lock_acquire>
 800afc0:	69a3      	ldr	r3, [r4, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d002      	beq.n	800afcc <__sinit+0x14>
 800afc6:	f7ff ffef 	bl	800afa8 <__sinit_lock_release>
 800afca:	bd13      	pop	{r0, r1, r4, pc}
 800afcc:	64a3      	str	r3, [r4, #72]	; 0x48
 800afce:	64e3      	str	r3, [r4, #76]	; 0x4c
 800afd0:	6523      	str	r3, [r4, #80]	; 0x50
 800afd2:	4b13      	ldr	r3, [pc, #76]	; (800b020 <__sinit+0x68>)
 800afd4:	4a13      	ldr	r2, [pc, #76]	; (800b024 <__sinit+0x6c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	62a2      	str	r2, [r4, #40]	; 0x28
 800afda:	9301      	str	r3, [sp, #4]
 800afdc:	42a3      	cmp	r3, r4
 800afde:	d101      	bne.n	800afe4 <__sinit+0x2c>
 800afe0:	2301      	movs	r3, #1
 800afe2:	61a3      	str	r3, [r4, #24]
 800afe4:	0020      	movs	r0, r4
 800afe6:	f000 f81f 	bl	800b028 <__sfp>
 800afea:	6060      	str	r0, [r4, #4]
 800afec:	0020      	movs	r0, r4
 800afee:	f000 f81b 	bl	800b028 <__sfp>
 800aff2:	60a0      	str	r0, [r4, #8]
 800aff4:	0020      	movs	r0, r4
 800aff6:	f000 f817 	bl	800b028 <__sfp>
 800affa:	2200      	movs	r2, #0
 800affc:	2104      	movs	r1, #4
 800affe:	60e0      	str	r0, [r4, #12]
 800b000:	6860      	ldr	r0, [r4, #4]
 800b002:	f7ff ff77 	bl	800aef4 <std>
 800b006:	2201      	movs	r2, #1
 800b008:	2109      	movs	r1, #9
 800b00a:	68a0      	ldr	r0, [r4, #8]
 800b00c:	f7ff ff72 	bl	800aef4 <std>
 800b010:	2202      	movs	r2, #2
 800b012:	2112      	movs	r1, #18
 800b014:	68e0      	ldr	r0, [r4, #12]
 800b016:	f7ff ff6d 	bl	800aef4 <std>
 800b01a:	2301      	movs	r3, #1
 800b01c:	61a3      	str	r3, [r4, #24]
 800b01e:	e7d2      	b.n	800afc6 <__sinit+0xe>
 800b020:	0800b640 	.word	0x0800b640
 800b024:	0800af3d 	.word	0x0800af3d

0800b028 <__sfp>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	0007      	movs	r7, r0
 800b02c:	f7ff ffa4 	bl	800af78 <__sfp_lock_acquire>
 800b030:	4b1f      	ldr	r3, [pc, #124]	; (800b0b0 <__sfp+0x88>)
 800b032:	681e      	ldr	r6, [r3, #0]
 800b034:	69b3      	ldr	r3, [r6, #24]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <__sfp+0x18>
 800b03a:	0030      	movs	r0, r6
 800b03c:	f7ff ffbc 	bl	800afb8 <__sinit>
 800b040:	3648      	adds	r6, #72	; 0x48
 800b042:	68b4      	ldr	r4, [r6, #8]
 800b044:	6873      	ldr	r3, [r6, #4]
 800b046:	3b01      	subs	r3, #1
 800b048:	d504      	bpl.n	800b054 <__sfp+0x2c>
 800b04a:	6833      	ldr	r3, [r6, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d022      	beq.n	800b096 <__sfp+0x6e>
 800b050:	6836      	ldr	r6, [r6, #0]
 800b052:	e7f6      	b.n	800b042 <__sfp+0x1a>
 800b054:	220c      	movs	r2, #12
 800b056:	5ea5      	ldrsh	r5, [r4, r2]
 800b058:	2d00      	cmp	r5, #0
 800b05a:	d11a      	bne.n	800b092 <__sfp+0x6a>
 800b05c:	0020      	movs	r0, r4
 800b05e:	4b15      	ldr	r3, [pc, #84]	; (800b0b4 <__sfp+0x8c>)
 800b060:	3058      	adds	r0, #88	; 0x58
 800b062:	60e3      	str	r3, [r4, #12]
 800b064:	6665      	str	r5, [r4, #100]	; 0x64
 800b066:	f000 f847 	bl	800b0f8 <__retarget_lock_init_recursive>
 800b06a:	f7ff ff8d 	bl	800af88 <__sfp_lock_release>
 800b06e:	0020      	movs	r0, r4
 800b070:	2208      	movs	r2, #8
 800b072:	0029      	movs	r1, r5
 800b074:	6025      	str	r5, [r4, #0]
 800b076:	60a5      	str	r5, [r4, #8]
 800b078:	6065      	str	r5, [r4, #4]
 800b07a:	6125      	str	r5, [r4, #16]
 800b07c:	6165      	str	r5, [r4, #20]
 800b07e:	61a5      	str	r5, [r4, #24]
 800b080:	305c      	adds	r0, #92	; 0x5c
 800b082:	f7fd fa1e 	bl	80084c2 <memset>
 800b086:	6365      	str	r5, [r4, #52]	; 0x34
 800b088:	63a5      	str	r5, [r4, #56]	; 0x38
 800b08a:	64a5      	str	r5, [r4, #72]	; 0x48
 800b08c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b08e:	0020      	movs	r0, r4
 800b090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b092:	3468      	adds	r4, #104	; 0x68
 800b094:	e7d7      	b.n	800b046 <__sfp+0x1e>
 800b096:	2104      	movs	r1, #4
 800b098:	0038      	movs	r0, r7
 800b09a:	f7ff ff57 	bl	800af4c <__sfmoreglue>
 800b09e:	1e04      	subs	r4, r0, #0
 800b0a0:	6030      	str	r0, [r6, #0]
 800b0a2:	d1d5      	bne.n	800b050 <__sfp+0x28>
 800b0a4:	f7ff ff70 	bl	800af88 <__sfp_lock_release>
 800b0a8:	230c      	movs	r3, #12
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	e7ef      	b.n	800b08e <__sfp+0x66>
 800b0ae:	46c0      	nop			; (mov r8, r8)
 800b0b0:	0800b640 	.word	0x0800b640
 800b0b4:	ffff0001 	.word	0xffff0001

0800b0b8 <_fwalk_reent>:
 800b0b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ba:	0004      	movs	r4, r0
 800b0bc:	0006      	movs	r6, r0
 800b0be:	2700      	movs	r7, #0
 800b0c0:	9101      	str	r1, [sp, #4]
 800b0c2:	3448      	adds	r4, #72	; 0x48
 800b0c4:	6863      	ldr	r3, [r4, #4]
 800b0c6:	68a5      	ldr	r5, [r4, #8]
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	9b00      	ldr	r3, [sp, #0]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	d504      	bpl.n	800b0dc <_fwalk_reent+0x24>
 800b0d2:	6824      	ldr	r4, [r4, #0]
 800b0d4:	2c00      	cmp	r4, #0
 800b0d6:	d1f5      	bne.n	800b0c4 <_fwalk_reent+0xc>
 800b0d8:	0038      	movs	r0, r7
 800b0da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0dc:	89ab      	ldrh	r3, [r5, #12]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d908      	bls.n	800b0f4 <_fwalk_reent+0x3c>
 800b0e2:	220e      	movs	r2, #14
 800b0e4:	5eab      	ldrsh	r3, [r5, r2]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	d004      	beq.n	800b0f4 <_fwalk_reent+0x3c>
 800b0ea:	0029      	movs	r1, r5
 800b0ec:	0030      	movs	r0, r6
 800b0ee:	9b01      	ldr	r3, [sp, #4]
 800b0f0:	4798      	blx	r3
 800b0f2:	4307      	orrs	r7, r0
 800b0f4:	3568      	adds	r5, #104	; 0x68
 800b0f6:	e7e8      	b.n	800b0ca <_fwalk_reent+0x12>

0800b0f8 <__retarget_lock_init_recursive>:
 800b0f8:	4770      	bx	lr

0800b0fa <__retarget_lock_acquire_recursive>:
 800b0fa:	4770      	bx	lr

0800b0fc <__retarget_lock_release_recursive>:
 800b0fc:	4770      	bx	lr
	...

0800b100 <__swhatbuf_r>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	000e      	movs	r6, r1
 800b104:	001d      	movs	r5, r3
 800b106:	230e      	movs	r3, #14
 800b108:	5ec9      	ldrsh	r1, [r1, r3]
 800b10a:	0014      	movs	r4, r2
 800b10c:	b096      	sub	sp, #88	; 0x58
 800b10e:	2900      	cmp	r1, #0
 800b110:	da08      	bge.n	800b124 <__swhatbuf_r+0x24>
 800b112:	220c      	movs	r2, #12
 800b114:	5eb3      	ldrsh	r3, [r6, r2]
 800b116:	2200      	movs	r2, #0
 800b118:	602a      	str	r2, [r5, #0]
 800b11a:	061b      	lsls	r3, r3, #24
 800b11c:	d411      	bmi.n	800b142 <__swhatbuf_r+0x42>
 800b11e:	2380      	movs	r3, #128	; 0x80
 800b120:	00db      	lsls	r3, r3, #3
 800b122:	e00f      	b.n	800b144 <__swhatbuf_r+0x44>
 800b124:	466a      	mov	r2, sp
 800b126:	f000 f91b 	bl	800b360 <_fstat_r>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	dbf1      	blt.n	800b112 <__swhatbuf_r+0x12>
 800b12e:	23f0      	movs	r3, #240	; 0xf0
 800b130:	9901      	ldr	r1, [sp, #4]
 800b132:	021b      	lsls	r3, r3, #8
 800b134:	4019      	ands	r1, r3
 800b136:	4b05      	ldr	r3, [pc, #20]	; (800b14c <__swhatbuf_r+0x4c>)
 800b138:	18c9      	adds	r1, r1, r3
 800b13a:	424b      	negs	r3, r1
 800b13c:	4159      	adcs	r1, r3
 800b13e:	6029      	str	r1, [r5, #0]
 800b140:	e7ed      	b.n	800b11e <__swhatbuf_r+0x1e>
 800b142:	2340      	movs	r3, #64	; 0x40
 800b144:	2000      	movs	r0, #0
 800b146:	6023      	str	r3, [r4, #0]
 800b148:	b016      	add	sp, #88	; 0x58
 800b14a:	bd70      	pop	{r4, r5, r6, pc}
 800b14c:	ffffe000 	.word	0xffffe000

0800b150 <__smakebuf_r>:
 800b150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b152:	2602      	movs	r6, #2
 800b154:	898b      	ldrh	r3, [r1, #12]
 800b156:	0005      	movs	r5, r0
 800b158:	000c      	movs	r4, r1
 800b15a:	4233      	tst	r3, r6
 800b15c:	d006      	beq.n	800b16c <__smakebuf_r+0x1c>
 800b15e:	0023      	movs	r3, r4
 800b160:	3347      	adds	r3, #71	; 0x47
 800b162:	6023      	str	r3, [r4, #0]
 800b164:	6123      	str	r3, [r4, #16]
 800b166:	2301      	movs	r3, #1
 800b168:	6163      	str	r3, [r4, #20]
 800b16a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b16c:	466a      	mov	r2, sp
 800b16e:	ab01      	add	r3, sp, #4
 800b170:	f7ff ffc6 	bl	800b100 <__swhatbuf_r>
 800b174:	9900      	ldr	r1, [sp, #0]
 800b176:	0007      	movs	r7, r0
 800b178:	0028      	movs	r0, r5
 800b17a:	f7ff f92d 	bl	800a3d8 <_malloc_r>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d108      	bne.n	800b194 <__smakebuf_r+0x44>
 800b182:	220c      	movs	r2, #12
 800b184:	5ea3      	ldrsh	r3, [r4, r2]
 800b186:	059a      	lsls	r2, r3, #22
 800b188:	d4ef      	bmi.n	800b16a <__smakebuf_r+0x1a>
 800b18a:	2203      	movs	r2, #3
 800b18c:	4393      	bics	r3, r2
 800b18e:	431e      	orrs	r6, r3
 800b190:	81a6      	strh	r6, [r4, #12]
 800b192:	e7e4      	b.n	800b15e <__smakebuf_r+0xe>
 800b194:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <__smakebuf_r+0x84>)
 800b196:	62ab      	str	r3, [r5, #40]	; 0x28
 800b198:	2380      	movs	r3, #128	; 0x80
 800b19a:	89a2      	ldrh	r2, [r4, #12]
 800b19c:	6020      	str	r0, [r4, #0]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	81a3      	strh	r3, [r4, #12]
 800b1a2:	9b00      	ldr	r3, [sp, #0]
 800b1a4:	6120      	str	r0, [r4, #16]
 800b1a6:	6163      	str	r3, [r4, #20]
 800b1a8:	9b01      	ldr	r3, [sp, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00d      	beq.n	800b1ca <__smakebuf_r+0x7a>
 800b1ae:	0028      	movs	r0, r5
 800b1b0:	230e      	movs	r3, #14
 800b1b2:	5ee1      	ldrsh	r1, [r4, r3]
 800b1b4:	f000 f8e6 	bl	800b384 <_isatty_r>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d006      	beq.n	800b1ca <__smakebuf_r+0x7a>
 800b1bc:	2203      	movs	r2, #3
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	4393      	bics	r3, r2
 800b1c2:	001a      	movs	r2, r3
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	81a3      	strh	r3, [r4, #12]
 800b1ca:	89a0      	ldrh	r0, [r4, #12]
 800b1cc:	4307      	orrs	r7, r0
 800b1ce:	81a7      	strh	r7, [r4, #12]
 800b1d0:	e7cb      	b.n	800b16a <__smakebuf_r+0x1a>
 800b1d2:	46c0      	nop			; (mov r8, r8)
 800b1d4:	0800af3d 	.word	0x0800af3d

0800b1d8 <_malloc_usable_size_r>:
 800b1d8:	1f0b      	subs	r3, r1, #4
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	1f18      	subs	r0, r3, #4
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	da01      	bge.n	800b1e6 <_malloc_usable_size_r+0xe>
 800b1e2:	580b      	ldr	r3, [r1, r0]
 800b1e4:	18c0      	adds	r0, r0, r3
 800b1e6:	4770      	bx	lr

0800b1e8 <_raise_r>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	0004      	movs	r4, r0
 800b1ec:	000d      	movs	r5, r1
 800b1ee:	291f      	cmp	r1, #31
 800b1f0:	d904      	bls.n	800b1fc <_raise_r+0x14>
 800b1f2:	2316      	movs	r3, #22
 800b1f4:	6003      	str	r3, [r0, #0]
 800b1f6:	2001      	movs	r0, #1
 800b1f8:	4240      	negs	r0, r0
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
 800b1fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <_raise_r+0x24>
 800b202:	008a      	lsls	r2, r1, #2
 800b204:	189b      	adds	r3, r3, r2
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	2a00      	cmp	r2, #0
 800b20a:	d108      	bne.n	800b21e <_raise_r+0x36>
 800b20c:	0020      	movs	r0, r4
 800b20e:	f000 f831 	bl	800b274 <_getpid_r>
 800b212:	002a      	movs	r2, r5
 800b214:	0001      	movs	r1, r0
 800b216:	0020      	movs	r0, r4
 800b218:	f000 f81a 	bl	800b250 <_kill_r>
 800b21c:	e7ed      	b.n	800b1fa <_raise_r+0x12>
 800b21e:	2000      	movs	r0, #0
 800b220:	2a01      	cmp	r2, #1
 800b222:	d0ea      	beq.n	800b1fa <_raise_r+0x12>
 800b224:	1c51      	adds	r1, r2, #1
 800b226:	d103      	bne.n	800b230 <_raise_r+0x48>
 800b228:	2316      	movs	r3, #22
 800b22a:	3001      	adds	r0, #1
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	e7e4      	b.n	800b1fa <_raise_r+0x12>
 800b230:	2400      	movs	r4, #0
 800b232:	0028      	movs	r0, r5
 800b234:	601c      	str	r4, [r3, #0]
 800b236:	4790      	blx	r2
 800b238:	0020      	movs	r0, r4
 800b23a:	e7de      	b.n	800b1fa <_raise_r+0x12>

0800b23c <raise>:
 800b23c:	b510      	push	{r4, lr}
 800b23e:	4b03      	ldr	r3, [pc, #12]	; (800b24c <raise+0x10>)
 800b240:	0001      	movs	r1, r0
 800b242:	6818      	ldr	r0, [r3, #0]
 800b244:	f7ff ffd0 	bl	800b1e8 <_raise_r>
 800b248:	bd10      	pop	{r4, pc}
 800b24a:	46c0      	nop			; (mov r8, r8)
 800b24c:	20000014 	.word	0x20000014

0800b250 <_kill_r>:
 800b250:	2300      	movs	r3, #0
 800b252:	b570      	push	{r4, r5, r6, lr}
 800b254:	4d06      	ldr	r5, [pc, #24]	; (800b270 <_kill_r+0x20>)
 800b256:	0004      	movs	r4, r0
 800b258:	0008      	movs	r0, r1
 800b25a:	0011      	movs	r1, r2
 800b25c:	602b      	str	r3, [r5, #0]
 800b25e:	f7f9 f88b 	bl	8004378 <_kill>
 800b262:	1c43      	adds	r3, r0, #1
 800b264:	d103      	bne.n	800b26e <_kill_r+0x1e>
 800b266:	682b      	ldr	r3, [r5, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d000      	beq.n	800b26e <_kill_r+0x1e>
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	200004d8 	.word	0x200004d8

0800b274 <_getpid_r>:
 800b274:	b510      	push	{r4, lr}
 800b276:	f7f9 f879 	bl	800436c <_getpid>
 800b27a:	bd10      	pop	{r4, pc}

0800b27c <__sread>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	000c      	movs	r4, r1
 800b280:	250e      	movs	r5, #14
 800b282:	5f49      	ldrsh	r1, [r1, r5]
 800b284:	f000 f8a4 	bl	800b3d0 <_read_r>
 800b288:	2800      	cmp	r0, #0
 800b28a:	db03      	blt.n	800b294 <__sread+0x18>
 800b28c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b28e:	181b      	adds	r3, r3, r0
 800b290:	6563      	str	r3, [r4, #84]	; 0x54
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	89a3      	ldrh	r3, [r4, #12]
 800b296:	4a02      	ldr	r2, [pc, #8]	; (800b2a0 <__sread+0x24>)
 800b298:	4013      	ands	r3, r2
 800b29a:	81a3      	strh	r3, [r4, #12]
 800b29c:	e7f9      	b.n	800b292 <__sread+0x16>
 800b29e:	46c0      	nop			; (mov r8, r8)
 800b2a0:	ffffefff 	.word	0xffffefff

0800b2a4 <__swrite>:
 800b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a6:	001f      	movs	r7, r3
 800b2a8:	898b      	ldrh	r3, [r1, #12]
 800b2aa:	0005      	movs	r5, r0
 800b2ac:	000c      	movs	r4, r1
 800b2ae:	0016      	movs	r6, r2
 800b2b0:	05db      	lsls	r3, r3, #23
 800b2b2:	d505      	bpl.n	800b2c0 <__swrite+0x1c>
 800b2b4:	230e      	movs	r3, #14
 800b2b6:	5ec9      	ldrsh	r1, [r1, r3]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	f000 f874 	bl	800b3a8 <_lseek_r>
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	4a05      	ldr	r2, [pc, #20]	; (800b2d8 <__swrite+0x34>)
 800b2c4:	0028      	movs	r0, r5
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	81a3      	strh	r3, [r4, #12]
 800b2ca:	0032      	movs	r2, r6
 800b2cc:	230e      	movs	r3, #14
 800b2ce:	5ee1      	ldrsh	r1, [r4, r3]
 800b2d0:	003b      	movs	r3, r7
 800b2d2:	f000 f81f 	bl	800b314 <_write_r>
 800b2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d8:	ffffefff 	.word	0xffffefff

0800b2dc <__sseek>:
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	000c      	movs	r4, r1
 800b2e0:	250e      	movs	r5, #14
 800b2e2:	5f49      	ldrsh	r1, [r1, r5]
 800b2e4:	f000 f860 	bl	800b3a8 <_lseek_r>
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	1c42      	adds	r2, r0, #1
 800b2ec:	d103      	bne.n	800b2f6 <__sseek+0x1a>
 800b2ee:	4a05      	ldr	r2, [pc, #20]	; (800b304 <__sseek+0x28>)
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	81a3      	strh	r3, [r4, #12]
 800b2f4:	bd70      	pop	{r4, r5, r6, pc}
 800b2f6:	2280      	movs	r2, #128	; 0x80
 800b2f8:	0152      	lsls	r2, r2, #5
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	81a3      	strh	r3, [r4, #12]
 800b2fe:	6560      	str	r0, [r4, #84]	; 0x54
 800b300:	e7f8      	b.n	800b2f4 <__sseek+0x18>
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	ffffefff 	.word	0xffffefff

0800b308 <__sclose>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	230e      	movs	r3, #14
 800b30c:	5ec9      	ldrsh	r1, [r1, r3]
 800b30e:	f000 f815 	bl	800b33c <_close_r>
 800b312:	bd10      	pop	{r4, pc}

0800b314 <_write_r>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	0004      	movs	r4, r0
 800b318:	0008      	movs	r0, r1
 800b31a:	0011      	movs	r1, r2
 800b31c:	001a      	movs	r2, r3
 800b31e:	2300      	movs	r3, #0
 800b320:	4d05      	ldr	r5, [pc, #20]	; (800b338 <_write_r+0x24>)
 800b322:	602b      	str	r3, [r5, #0]
 800b324:	f7f9 f861 	bl	80043ea <_write>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d103      	bne.n	800b334 <_write_r+0x20>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d000      	beq.n	800b334 <_write_r+0x20>
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	bd70      	pop	{r4, r5, r6, pc}
 800b336:	46c0      	nop			; (mov r8, r8)
 800b338:	200004d8 	.word	0x200004d8

0800b33c <_close_r>:
 800b33c:	2300      	movs	r3, #0
 800b33e:	b570      	push	{r4, r5, r6, lr}
 800b340:	4d06      	ldr	r5, [pc, #24]	; (800b35c <_close_r+0x20>)
 800b342:	0004      	movs	r4, r0
 800b344:	0008      	movs	r0, r1
 800b346:	602b      	str	r3, [r5, #0]
 800b348:	f7f9 f86b 	bl	8004422 <_close>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d103      	bne.n	800b358 <_close_r+0x1c>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d000      	beq.n	800b358 <_close_r+0x1c>
 800b356:	6023      	str	r3, [r4, #0]
 800b358:	bd70      	pop	{r4, r5, r6, pc}
 800b35a:	46c0      	nop			; (mov r8, r8)
 800b35c:	200004d8 	.word	0x200004d8

0800b360 <_fstat_r>:
 800b360:	2300      	movs	r3, #0
 800b362:	b570      	push	{r4, r5, r6, lr}
 800b364:	4d06      	ldr	r5, [pc, #24]	; (800b380 <_fstat_r+0x20>)
 800b366:	0004      	movs	r4, r0
 800b368:	0008      	movs	r0, r1
 800b36a:	0011      	movs	r1, r2
 800b36c:	602b      	str	r3, [r5, #0]
 800b36e:	f7f9 f862 	bl	8004436 <_fstat>
 800b372:	1c43      	adds	r3, r0, #1
 800b374:	d103      	bne.n	800b37e <_fstat_r+0x1e>
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d000      	beq.n	800b37e <_fstat_r+0x1e>
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	200004d8 	.word	0x200004d8

0800b384 <_isatty_r>:
 800b384:	2300      	movs	r3, #0
 800b386:	b570      	push	{r4, r5, r6, lr}
 800b388:	4d06      	ldr	r5, [pc, #24]	; (800b3a4 <_isatty_r+0x20>)
 800b38a:	0004      	movs	r4, r0
 800b38c:	0008      	movs	r0, r1
 800b38e:	602b      	str	r3, [r5, #0]
 800b390:	f7f9 f85f 	bl	8004452 <_isatty>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	d103      	bne.n	800b3a0 <_isatty_r+0x1c>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d000      	beq.n	800b3a0 <_isatty_r+0x1c>
 800b39e:	6023      	str	r3, [r4, #0]
 800b3a0:	bd70      	pop	{r4, r5, r6, pc}
 800b3a2:	46c0      	nop			; (mov r8, r8)
 800b3a4:	200004d8 	.word	0x200004d8

0800b3a8 <_lseek_r>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	0004      	movs	r4, r0
 800b3ac:	0008      	movs	r0, r1
 800b3ae:	0011      	movs	r1, r2
 800b3b0:	001a      	movs	r2, r3
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4d05      	ldr	r5, [pc, #20]	; (800b3cc <_lseek_r+0x24>)
 800b3b6:	602b      	str	r3, [r5, #0]
 800b3b8:	f7f9 f854 	bl	8004464 <_lseek>
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	d103      	bne.n	800b3c8 <_lseek_r+0x20>
 800b3c0:	682b      	ldr	r3, [r5, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d000      	beq.n	800b3c8 <_lseek_r+0x20>
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ca:	46c0      	nop			; (mov r8, r8)
 800b3cc:	200004d8 	.word	0x200004d8

0800b3d0 <_read_r>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	0004      	movs	r4, r0
 800b3d4:	0008      	movs	r0, r1
 800b3d6:	0011      	movs	r1, r2
 800b3d8:	001a      	movs	r2, r3
 800b3da:	2300      	movs	r3, #0
 800b3dc:	4d05      	ldr	r5, [pc, #20]	; (800b3f4 <_read_r+0x24>)
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	f7f8 ffe6 	bl	80043b0 <_read>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d103      	bne.n	800b3f0 <_read_r+0x20>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d000      	beq.n	800b3f0 <_read_r+0x20>
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	bd70      	pop	{r4, r5, r6, pc}
 800b3f2:	46c0      	nop			; (mov r8, r8)
 800b3f4:	200004d8 	.word	0x200004d8

0800b3f8 <_init>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	46c0      	nop			; (mov r8, r8)
 800b3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3fe:	bc08      	pop	{r3}
 800b400:	469e      	mov	lr, r3
 800b402:	4770      	bx	lr

0800b404 <_fini>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	46c0      	nop			; (mov r8, r8)
 800b408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40a:	bc08      	pop	{r3}
 800b40c:	469e      	mov	lr, r3
 800b40e:	4770      	bx	lr
