
PMIK_PROJEKT_CLEAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008640  08008640  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008648  08008648  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008648  08008648  00018648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800864c  0800864c  0001864c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000070  080086c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080086c0  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ce9  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba2  00000000  00000000  00032d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00035928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  000369e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172ee  00000000  00000000  00037940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015240  00000000  00000000  0004ec2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088759  00000000  00000000  00063e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec5c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  000ec618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080084a0 	.word	0x080084a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080084a0 	.word	0x080084a0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cfrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	0008      	movs	r0, r1
 8000248:	4661      	mov	r1, ip
 800024a:	e7ff      	b.n	800024c <__aeabi_cfcmpeq>

0800024c <__aeabi_cfcmpeq>:
 800024c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800024e:	f000 fb8d 	bl	800096c <__lesf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	d401      	bmi.n	800025a <__aeabi_cfcmpeq+0xe>
 8000256:	2100      	movs	r1, #0
 8000258:	42c8      	cmn	r0, r1
 800025a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800025c <__aeabi_fcmpeq>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 fb19 	bl	8000894 <__eqsf2>
 8000262:	4240      	negs	r0, r0
 8000264:	3001      	adds	r0, #1
 8000266:	bd10      	pop	{r4, pc}

08000268 <__aeabi_fcmplt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fb7f 	bl	800096c <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	db01      	blt.n	8000276 <__aeabi_fcmplt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmple>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fb75 	bl	800096c <__lesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dd01      	ble.n	800028a <__aeabi_fcmple+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpgt>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 fb25 	bl	80008e0 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	dc01      	bgt.n	800029e <__aeabi_fcmpgt+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_fcmpge>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	f000 fb1b 	bl	80008e0 <__gesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	da01      	bge.n	80002b2 <__aeabi_fcmpge+0xe>
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	2001      	movs	r0, #1
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_uldivmod>:
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d111      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002bc:	2a00      	cmp	r2, #0
 80002be:	d10f      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d100      	bne.n	80002c6 <__aeabi_uldivmod+0xe>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d002      	beq.n	80002ce <__aeabi_uldivmod+0x16>
 80002c8:	2100      	movs	r1, #0
 80002ca:	43c9      	mvns	r1, r1
 80002cc:	0008      	movs	r0, r1
 80002ce:	b407      	push	{r0, r1, r2}
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <__aeabi_uldivmod+0x24>)
 80002d2:	a102      	add	r1, pc, #8	; (adr r1, 80002dc <__aeabi_uldivmod+0x24>)
 80002d4:	1840      	adds	r0, r0, r1
 80002d6:	9002      	str	r0, [sp, #8]
 80002d8:	bd03      	pop	{r0, r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	ffffff65 	.word	0xffffff65
 80002e0:	b403      	push	{r0, r1}
 80002e2:	4668      	mov	r0, sp
 80002e4:	b501      	push	{r0, lr}
 80002e6:	9802      	ldr	r0, [sp, #8]
 80002e8:	f000 f86a 	bl	80003c0 <__udivmoddi4>
 80002ec:	9b01      	ldr	r3, [sp, #4]
 80002ee:	469e      	mov	lr, r3
 80002f0:	b002      	add	sp, #8
 80002f2:	bc0c      	pop	{r2, r3}
 80002f4:	4770      	bx	lr
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_lmul>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	46ce      	mov	lr, r9
 80002fc:	4647      	mov	r7, r8
 80002fe:	b580      	push	{r7, lr}
 8000300:	0007      	movs	r7, r0
 8000302:	4699      	mov	r9, r3
 8000304:	0c3b      	lsrs	r3, r7, #16
 8000306:	469c      	mov	ip, r3
 8000308:	0413      	lsls	r3, r2, #16
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	001d      	movs	r5, r3
 800030e:	000e      	movs	r6, r1
 8000310:	4661      	mov	r1, ip
 8000312:	0400      	lsls	r0, r0, #16
 8000314:	0c14      	lsrs	r4, r2, #16
 8000316:	0c00      	lsrs	r0, r0, #16
 8000318:	4345      	muls	r5, r0
 800031a:	434b      	muls	r3, r1
 800031c:	4360      	muls	r0, r4
 800031e:	4361      	muls	r1, r4
 8000320:	18c0      	adds	r0, r0, r3
 8000322:	0c2c      	lsrs	r4, r5, #16
 8000324:	1820      	adds	r0, r4, r0
 8000326:	468c      	mov	ip, r1
 8000328:	4283      	cmp	r3, r0
 800032a:	d903      	bls.n	8000334 <__aeabi_lmul+0x3c>
 800032c:	2380      	movs	r3, #128	; 0x80
 800032e:	025b      	lsls	r3, r3, #9
 8000330:	4698      	mov	r8, r3
 8000332:	44c4      	add	ip, r8
 8000334:	4649      	mov	r1, r9
 8000336:	4379      	muls	r1, r7
 8000338:	4372      	muls	r2, r6
 800033a:	0c03      	lsrs	r3, r0, #16
 800033c:	4463      	add	r3, ip
 800033e:	042d      	lsls	r5, r5, #16
 8000340:	0c2d      	lsrs	r5, r5, #16
 8000342:	18c9      	adds	r1, r1, r3
 8000344:	0400      	lsls	r0, r0, #16
 8000346:	1940      	adds	r0, r0, r5
 8000348:	1889      	adds	r1, r1, r2
 800034a:	bcc0      	pop	{r6, r7}
 800034c:	46b9      	mov	r9, r7
 800034e:	46b0      	mov	r8, r6
 8000350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)

08000354 <__aeabi_f2uiz>:
 8000354:	219e      	movs	r1, #158	; 0x9e
 8000356:	b510      	push	{r4, lr}
 8000358:	05c9      	lsls	r1, r1, #23
 800035a:	1c04      	adds	r4, r0, #0
 800035c:	f7ff ffa2 	bl	80002a4 <__aeabi_fcmpge>
 8000360:	2800      	cmp	r0, #0
 8000362:	d103      	bne.n	800036c <__aeabi_f2uiz+0x18>
 8000364:	1c20      	adds	r0, r4, #0
 8000366:	f000 fe19 	bl	8000f9c <__aeabi_f2iz>
 800036a:	bd10      	pop	{r4, pc}
 800036c:	219e      	movs	r1, #158	; 0x9e
 800036e:	1c20      	adds	r0, r4, #0
 8000370:	05c9      	lsls	r1, r1, #23
 8000372:	f000 fc65 	bl	8000c40 <__aeabi_fsub>
 8000376:	f000 fe11 	bl	8000f9c <__aeabi_f2iz>
 800037a:	2380      	movs	r3, #128	; 0x80
 800037c:	061b      	lsls	r3, r3, #24
 800037e:	469c      	mov	ip, r3
 8000380:	4460      	add	r0, ip
 8000382:	e7f2      	b.n	800036a <__aeabi_f2uiz+0x16>

08000384 <__aeabi_d2uiz>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	2200      	movs	r2, #0
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <__aeabi_d2uiz+0x38>)
 800038a:	0004      	movs	r4, r0
 800038c:	000d      	movs	r5, r1
 800038e:	f002 f94f 	bl	8002630 <__aeabi_dcmpge>
 8000392:	2800      	cmp	r0, #0
 8000394:	d104      	bne.n	80003a0 <__aeabi_d2uiz+0x1c>
 8000396:	0020      	movs	r0, r4
 8000398:	0029      	movs	r1, r5
 800039a:	f001 ffe9 	bl	8002370 <__aeabi_d2iz>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <__aeabi_d2uiz+0x38>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	0020      	movs	r0, r4
 80003a6:	0029      	movs	r1, r5
 80003a8:	f001 fc50 	bl	8001c4c <__aeabi_dsub>
 80003ac:	f001 ffe0 	bl	8002370 <__aeabi_d2iz>
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	061b      	lsls	r3, r3, #24
 80003b4:	469c      	mov	ip, r3
 80003b6:	4460      	add	r0, ip
 80003b8:	e7f1      	b.n	800039e <__aeabi_d2uiz+0x1a>
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	41e00000 	.word	0x41e00000

080003c0 <__udivmoddi4>:
 80003c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003c2:	4657      	mov	r7, sl
 80003c4:	464e      	mov	r6, r9
 80003c6:	4645      	mov	r5, r8
 80003c8:	46de      	mov	lr, fp
 80003ca:	b5e0      	push	{r5, r6, r7, lr}
 80003cc:	0004      	movs	r4, r0
 80003ce:	000d      	movs	r5, r1
 80003d0:	4692      	mov	sl, r2
 80003d2:	4699      	mov	r9, r3
 80003d4:	b083      	sub	sp, #12
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d830      	bhi.n	800043c <__udivmoddi4+0x7c>
 80003da:	d02d      	beq.n	8000438 <__udivmoddi4+0x78>
 80003dc:	4649      	mov	r1, r9
 80003de:	4650      	mov	r0, sl
 80003e0:	f002 f94e 	bl	8002680 <__clzdi2>
 80003e4:	0029      	movs	r1, r5
 80003e6:	0006      	movs	r6, r0
 80003e8:	0020      	movs	r0, r4
 80003ea:	f002 f949 	bl	8002680 <__clzdi2>
 80003ee:	1a33      	subs	r3, r6, r0
 80003f0:	4698      	mov	r8, r3
 80003f2:	3b20      	subs	r3, #32
 80003f4:	469b      	mov	fp, r3
 80003f6:	d433      	bmi.n	8000460 <__udivmoddi4+0xa0>
 80003f8:	465a      	mov	r2, fp
 80003fa:	4653      	mov	r3, sl
 80003fc:	4093      	lsls	r3, r2
 80003fe:	4642      	mov	r2, r8
 8000400:	001f      	movs	r7, r3
 8000402:	4653      	mov	r3, sl
 8000404:	4093      	lsls	r3, r2
 8000406:	001e      	movs	r6, r3
 8000408:	42af      	cmp	r7, r5
 800040a:	d83a      	bhi.n	8000482 <__udivmoddi4+0xc2>
 800040c:	42af      	cmp	r7, r5
 800040e:	d100      	bne.n	8000412 <__udivmoddi4+0x52>
 8000410:	e078      	b.n	8000504 <__udivmoddi4+0x144>
 8000412:	465b      	mov	r3, fp
 8000414:	1ba4      	subs	r4, r4, r6
 8000416:	41bd      	sbcs	r5, r7
 8000418:	2b00      	cmp	r3, #0
 800041a:	da00      	bge.n	800041e <__udivmoddi4+0x5e>
 800041c:	e075      	b.n	800050a <__udivmoddi4+0x14a>
 800041e:	2200      	movs	r2, #0
 8000420:	2300      	movs	r3, #0
 8000422:	9200      	str	r2, [sp, #0]
 8000424:	9301      	str	r3, [sp, #4]
 8000426:	2301      	movs	r3, #1
 8000428:	465a      	mov	r2, fp
 800042a:	4093      	lsls	r3, r2
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2301      	movs	r3, #1
 8000430:	4642      	mov	r2, r8
 8000432:	4093      	lsls	r3, r2
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	e028      	b.n	800048a <__udivmoddi4+0xca>
 8000438:	4282      	cmp	r2, r0
 800043a:	d9cf      	bls.n	80003dc <__udivmoddi4+0x1c>
 800043c:	2200      	movs	r2, #0
 800043e:	2300      	movs	r3, #0
 8000440:	9200      	str	r2, [sp, #0]
 8000442:	9301      	str	r3, [sp, #4]
 8000444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <__udivmoddi4+0x8e>
 800044a:	601c      	str	r4, [r3, #0]
 800044c:	605d      	str	r5, [r3, #4]
 800044e:	9800      	ldr	r0, [sp, #0]
 8000450:	9901      	ldr	r1, [sp, #4]
 8000452:	b003      	add	sp, #12
 8000454:	bcf0      	pop	{r4, r5, r6, r7}
 8000456:	46bb      	mov	fp, r7
 8000458:	46b2      	mov	sl, r6
 800045a:	46a9      	mov	r9, r5
 800045c:	46a0      	mov	r8, r4
 800045e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000460:	4642      	mov	r2, r8
 8000462:	2320      	movs	r3, #32
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	4652      	mov	r2, sl
 8000468:	40da      	lsrs	r2, r3
 800046a:	4641      	mov	r1, r8
 800046c:	0013      	movs	r3, r2
 800046e:	464a      	mov	r2, r9
 8000470:	408a      	lsls	r2, r1
 8000472:	0017      	movs	r7, r2
 8000474:	4642      	mov	r2, r8
 8000476:	431f      	orrs	r7, r3
 8000478:	4653      	mov	r3, sl
 800047a:	4093      	lsls	r3, r2
 800047c:	001e      	movs	r6, r3
 800047e:	42af      	cmp	r7, r5
 8000480:	d9c4      	bls.n	800040c <__udivmoddi4+0x4c>
 8000482:	2200      	movs	r2, #0
 8000484:	2300      	movs	r3, #0
 8000486:	9200      	str	r2, [sp, #0]
 8000488:	9301      	str	r3, [sp, #4]
 800048a:	4643      	mov	r3, r8
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0d9      	beq.n	8000444 <__udivmoddi4+0x84>
 8000490:	07fb      	lsls	r3, r7, #31
 8000492:	0872      	lsrs	r2, r6, #1
 8000494:	431a      	orrs	r2, r3
 8000496:	4646      	mov	r6, r8
 8000498:	087b      	lsrs	r3, r7, #1
 800049a:	e00e      	b.n	80004ba <__udivmoddi4+0xfa>
 800049c:	42ab      	cmp	r3, r5
 800049e:	d101      	bne.n	80004a4 <__udivmoddi4+0xe4>
 80004a0:	42a2      	cmp	r2, r4
 80004a2:	d80c      	bhi.n	80004be <__udivmoddi4+0xfe>
 80004a4:	1aa4      	subs	r4, r4, r2
 80004a6:	419d      	sbcs	r5, r3
 80004a8:	2001      	movs	r0, #1
 80004aa:	1924      	adds	r4, r4, r4
 80004ac:	416d      	adcs	r5, r5
 80004ae:	2100      	movs	r1, #0
 80004b0:	3e01      	subs	r6, #1
 80004b2:	1824      	adds	r4, r4, r0
 80004b4:	414d      	adcs	r5, r1
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d006      	beq.n	80004c8 <__udivmoddi4+0x108>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	d9ee      	bls.n	800049c <__udivmoddi4+0xdc>
 80004be:	3e01      	subs	r6, #1
 80004c0:	1924      	adds	r4, r4, r4
 80004c2:	416d      	adcs	r5, r5
 80004c4:	2e00      	cmp	r6, #0
 80004c6:	d1f8      	bne.n	80004ba <__udivmoddi4+0xfa>
 80004c8:	9800      	ldr	r0, [sp, #0]
 80004ca:	9901      	ldr	r1, [sp, #4]
 80004cc:	465b      	mov	r3, fp
 80004ce:	1900      	adds	r0, r0, r4
 80004d0:	4169      	adcs	r1, r5
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	db24      	blt.n	8000520 <__udivmoddi4+0x160>
 80004d6:	002b      	movs	r3, r5
 80004d8:	465a      	mov	r2, fp
 80004da:	4644      	mov	r4, r8
 80004dc:	40d3      	lsrs	r3, r2
 80004de:	002a      	movs	r2, r5
 80004e0:	40e2      	lsrs	r2, r4
 80004e2:	001c      	movs	r4, r3
 80004e4:	465b      	mov	r3, fp
 80004e6:	0015      	movs	r5, r2
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	db2a      	blt.n	8000542 <__udivmoddi4+0x182>
 80004ec:	0026      	movs	r6, r4
 80004ee:	409e      	lsls	r6, r3
 80004f0:	0033      	movs	r3, r6
 80004f2:	0026      	movs	r6, r4
 80004f4:	4647      	mov	r7, r8
 80004f6:	40be      	lsls	r6, r7
 80004f8:	0032      	movs	r2, r6
 80004fa:	1a80      	subs	r0, r0, r2
 80004fc:	4199      	sbcs	r1, r3
 80004fe:	9000      	str	r0, [sp, #0]
 8000500:	9101      	str	r1, [sp, #4]
 8000502:	e79f      	b.n	8000444 <__udivmoddi4+0x84>
 8000504:	42a3      	cmp	r3, r4
 8000506:	d8bc      	bhi.n	8000482 <__udivmoddi4+0xc2>
 8000508:	e783      	b.n	8000412 <__udivmoddi4+0x52>
 800050a:	4642      	mov	r2, r8
 800050c:	2320      	movs	r3, #32
 800050e:	2100      	movs	r1, #0
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	2200      	movs	r2, #0
 8000514:	9100      	str	r1, [sp, #0]
 8000516:	9201      	str	r2, [sp, #4]
 8000518:	2201      	movs	r2, #1
 800051a:	40da      	lsrs	r2, r3
 800051c:	9201      	str	r2, [sp, #4]
 800051e:	e786      	b.n	800042e <__udivmoddi4+0x6e>
 8000520:	4642      	mov	r2, r8
 8000522:	2320      	movs	r3, #32
 8000524:	1a9b      	subs	r3, r3, r2
 8000526:	002a      	movs	r2, r5
 8000528:	4646      	mov	r6, r8
 800052a:	409a      	lsls	r2, r3
 800052c:	0023      	movs	r3, r4
 800052e:	40f3      	lsrs	r3, r6
 8000530:	4644      	mov	r4, r8
 8000532:	4313      	orrs	r3, r2
 8000534:	002a      	movs	r2, r5
 8000536:	40e2      	lsrs	r2, r4
 8000538:	001c      	movs	r4, r3
 800053a:	465b      	mov	r3, fp
 800053c:	0015      	movs	r5, r2
 800053e:	2b00      	cmp	r3, #0
 8000540:	dad4      	bge.n	80004ec <__udivmoddi4+0x12c>
 8000542:	4642      	mov	r2, r8
 8000544:	002f      	movs	r7, r5
 8000546:	2320      	movs	r3, #32
 8000548:	0026      	movs	r6, r4
 800054a:	4097      	lsls	r7, r2
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	40de      	lsrs	r6, r3
 8000550:	003b      	movs	r3, r7
 8000552:	4333      	orrs	r3, r6
 8000554:	e7cd      	b.n	80004f2 <__udivmoddi4+0x132>
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_fadd>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	46c6      	mov	lr, r8
 800055c:	0243      	lsls	r3, r0, #9
 800055e:	0a5b      	lsrs	r3, r3, #9
 8000560:	024e      	lsls	r6, r1, #9
 8000562:	0045      	lsls	r5, r0, #1
 8000564:	004f      	lsls	r7, r1, #1
 8000566:	00da      	lsls	r2, r3, #3
 8000568:	0fc4      	lsrs	r4, r0, #31
 800056a:	469c      	mov	ip, r3
 800056c:	0a70      	lsrs	r0, r6, #9
 800056e:	4690      	mov	r8, r2
 8000570:	b500      	push	{lr}
 8000572:	0e2d      	lsrs	r5, r5, #24
 8000574:	0e3f      	lsrs	r7, r7, #24
 8000576:	0fc9      	lsrs	r1, r1, #31
 8000578:	09b6      	lsrs	r6, r6, #6
 800057a:	428c      	cmp	r4, r1
 800057c:	d04b      	beq.n	8000616 <__aeabi_fadd+0xbe>
 800057e:	1bea      	subs	r2, r5, r7
 8000580:	2a00      	cmp	r2, #0
 8000582:	dd36      	ble.n	80005f2 <__aeabi_fadd+0x9a>
 8000584:	2f00      	cmp	r7, #0
 8000586:	d061      	beq.n	800064c <__aeabi_fadd+0xf4>
 8000588:	2dff      	cmp	r5, #255	; 0xff
 800058a:	d100      	bne.n	800058e <__aeabi_fadd+0x36>
 800058c:	e0ad      	b.n	80006ea <__aeabi_fadd+0x192>
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	04db      	lsls	r3, r3, #19
 8000592:	431e      	orrs	r6, r3
 8000594:	2a1b      	cmp	r2, #27
 8000596:	dc00      	bgt.n	800059a <__aeabi_fadd+0x42>
 8000598:	e0d3      	b.n	8000742 <__aeabi_fadd+0x1ea>
 800059a:	2001      	movs	r0, #1
 800059c:	4643      	mov	r3, r8
 800059e:	1a18      	subs	r0, r3, r0
 80005a0:	0143      	lsls	r3, r0, #5
 80005a2:	d400      	bmi.n	80005a6 <__aeabi_fadd+0x4e>
 80005a4:	e08c      	b.n	80006c0 <__aeabi_fadd+0x168>
 80005a6:	0180      	lsls	r0, r0, #6
 80005a8:	0987      	lsrs	r7, r0, #6
 80005aa:	0038      	movs	r0, r7
 80005ac:	f002 f84a 	bl	8002644 <__clzsi2>
 80005b0:	3805      	subs	r0, #5
 80005b2:	4087      	lsls	r7, r0
 80005b4:	4285      	cmp	r5, r0
 80005b6:	dc00      	bgt.n	80005ba <__aeabi_fadd+0x62>
 80005b8:	e0b6      	b.n	8000728 <__aeabi_fadd+0x1d0>
 80005ba:	1a2d      	subs	r5, r5, r0
 80005bc:	48b3      	ldr	r0, [pc, #716]	; (800088c <__aeabi_fadd+0x334>)
 80005be:	4038      	ands	r0, r7
 80005c0:	0743      	lsls	r3, r0, #29
 80005c2:	d004      	beq.n	80005ce <__aeabi_fadd+0x76>
 80005c4:	230f      	movs	r3, #15
 80005c6:	4003      	ands	r3, r0
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d000      	beq.n	80005ce <__aeabi_fadd+0x76>
 80005cc:	3004      	adds	r0, #4
 80005ce:	0143      	lsls	r3, r0, #5
 80005d0:	d400      	bmi.n	80005d4 <__aeabi_fadd+0x7c>
 80005d2:	e078      	b.n	80006c6 <__aeabi_fadd+0x16e>
 80005d4:	1c6a      	adds	r2, r5, #1
 80005d6:	2dfe      	cmp	r5, #254	; 0xfe
 80005d8:	d065      	beq.n	80006a6 <__aeabi_fadd+0x14e>
 80005da:	0180      	lsls	r0, r0, #6
 80005dc:	0a43      	lsrs	r3, r0, #9
 80005de:	469c      	mov	ip, r3
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	4663      	mov	r3, ip
 80005e4:	05d0      	lsls	r0, r2, #23
 80005e6:	4318      	orrs	r0, r3
 80005e8:	07e4      	lsls	r4, r4, #31
 80005ea:	4320      	orrs	r0, r4
 80005ec:	bc80      	pop	{r7}
 80005ee:	46b8      	mov	r8, r7
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d035      	beq.n	8000662 <__aeabi_fadd+0x10a>
 80005f6:	1b7a      	subs	r2, r7, r5
 80005f8:	2d00      	cmp	r5, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0xa6>
 80005fc:	e0af      	b.n	800075e <__aeabi_fadd+0x206>
 80005fe:	4643      	mov	r3, r8
 8000600:	2b00      	cmp	r3, #0
 8000602:	d100      	bne.n	8000606 <__aeabi_fadd+0xae>
 8000604:	e0a7      	b.n	8000756 <__aeabi_fadd+0x1fe>
 8000606:	1e53      	subs	r3, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0xb6>
 800060c:	e12f      	b.n	800086e <__aeabi_fadd+0x316>
 800060e:	2aff      	cmp	r2, #255	; 0xff
 8000610:	d069      	beq.n	80006e6 <__aeabi_fadd+0x18e>
 8000612:	001a      	movs	r2, r3
 8000614:	e0aa      	b.n	800076c <__aeabi_fadd+0x214>
 8000616:	1be9      	subs	r1, r5, r7
 8000618:	2900      	cmp	r1, #0
 800061a:	dd70      	ble.n	80006fe <__aeabi_fadd+0x1a6>
 800061c:	2f00      	cmp	r7, #0
 800061e:	d037      	beq.n	8000690 <__aeabi_fadd+0x138>
 8000620:	2dff      	cmp	r5, #255	; 0xff
 8000622:	d062      	beq.n	80006ea <__aeabi_fadd+0x192>
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	04db      	lsls	r3, r3, #19
 8000628:	431e      	orrs	r6, r3
 800062a:	291b      	cmp	r1, #27
 800062c:	dc00      	bgt.n	8000630 <__aeabi_fadd+0xd8>
 800062e:	e0b0      	b.n	8000792 <__aeabi_fadd+0x23a>
 8000630:	2001      	movs	r0, #1
 8000632:	4440      	add	r0, r8
 8000634:	0143      	lsls	r3, r0, #5
 8000636:	d543      	bpl.n	80006c0 <__aeabi_fadd+0x168>
 8000638:	3501      	adds	r5, #1
 800063a:	2dff      	cmp	r5, #255	; 0xff
 800063c:	d033      	beq.n	80006a6 <__aeabi_fadd+0x14e>
 800063e:	2301      	movs	r3, #1
 8000640:	4a93      	ldr	r2, [pc, #588]	; (8000890 <__aeabi_fadd+0x338>)
 8000642:	4003      	ands	r3, r0
 8000644:	0840      	lsrs	r0, r0, #1
 8000646:	4010      	ands	r0, r2
 8000648:	4318      	orrs	r0, r3
 800064a:	e7b9      	b.n	80005c0 <__aeabi_fadd+0x68>
 800064c:	2e00      	cmp	r6, #0
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0xfa>
 8000650:	e083      	b.n	800075a <__aeabi_fadd+0x202>
 8000652:	1e51      	subs	r1, r2, #1
 8000654:	2a01      	cmp	r2, #1
 8000656:	d100      	bne.n	800065a <__aeabi_fadd+0x102>
 8000658:	e0d8      	b.n	800080c <__aeabi_fadd+0x2b4>
 800065a:	2aff      	cmp	r2, #255	; 0xff
 800065c:	d045      	beq.n	80006ea <__aeabi_fadd+0x192>
 800065e:	000a      	movs	r2, r1
 8000660:	e798      	b.n	8000594 <__aeabi_fadd+0x3c>
 8000662:	27fe      	movs	r7, #254	; 0xfe
 8000664:	1c6a      	adds	r2, r5, #1
 8000666:	4217      	tst	r7, r2
 8000668:	d000      	beq.n	800066c <__aeabi_fadd+0x114>
 800066a:	e086      	b.n	800077a <__aeabi_fadd+0x222>
 800066c:	2d00      	cmp	r5, #0
 800066e:	d000      	beq.n	8000672 <__aeabi_fadd+0x11a>
 8000670:	e0b7      	b.n	80007e2 <__aeabi_fadd+0x28a>
 8000672:	4643      	mov	r3, r8
 8000674:	2b00      	cmp	r3, #0
 8000676:	d100      	bne.n	800067a <__aeabi_fadd+0x122>
 8000678:	e0f3      	b.n	8000862 <__aeabi_fadd+0x30a>
 800067a:	2200      	movs	r2, #0
 800067c:	2e00      	cmp	r6, #0
 800067e:	d0b0      	beq.n	80005e2 <__aeabi_fadd+0x8a>
 8000680:	1b98      	subs	r0, r3, r6
 8000682:	0143      	lsls	r3, r0, #5
 8000684:	d400      	bmi.n	8000688 <__aeabi_fadd+0x130>
 8000686:	e0fa      	b.n	800087e <__aeabi_fadd+0x326>
 8000688:	4643      	mov	r3, r8
 800068a:	000c      	movs	r4, r1
 800068c:	1af0      	subs	r0, r6, r3
 800068e:	e797      	b.n	80005c0 <__aeabi_fadd+0x68>
 8000690:	2e00      	cmp	r6, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x13e>
 8000694:	e0c8      	b.n	8000828 <__aeabi_fadd+0x2d0>
 8000696:	1e4a      	subs	r2, r1, #1
 8000698:	2901      	cmp	r1, #1
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x146>
 800069c:	e0ae      	b.n	80007fc <__aeabi_fadd+0x2a4>
 800069e:	29ff      	cmp	r1, #255	; 0xff
 80006a0:	d023      	beq.n	80006ea <__aeabi_fadd+0x192>
 80006a2:	0011      	movs	r1, r2
 80006a4:	e7c1      	b.n	800062a <__aeabi_fadd+0xd2>
 80006a6:	2300      	movs	r3, #0
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	469c      	mov	ip, r3
 80006ac:	e799      	b.n	80005e2 <__aeabi_fadd+0x8a>
 80006ae:	21fe      	movs	r1, #254	; 0xfe
 80006b0:	1c6a      	adds	r2, r5, #1
 80006b2:	4211      	tst	r1, r2
 80006b4:	d077      	beq.n	80007a6 <__aeabi_fadd+0x24e>
 80006b6:	2aff      	cmp	r2, #255	; 0xff
 80006b8:	d0f5      	beq.n	80006a6 <__aeabi_fadd+0x14e>
 80006ba:	0015      	movs	r5, r2
 80006bc:	4446      	add	r6, r8
 80006be:	0870      	lsrs	r0, r6, #1
 80006c0:	0743      	lsls	r3, r0, #29
 80006c2:	d000      	beq.n	80006c6 <__aeabi_fadd+0x16e>
 80006c4:	e77e      	b.n	80005c4 <__aeabi_fadd+0x6c>
 80006c6:	08c3      	lsrs	r3, r0, #3
 80006c8:	2dff      	cmp	r5, #255	; 0xff
 80006ca:	d00e      	beq.n	80006ea <__aeabi_fadd+0x192>
 80006cc:	025b      	lsls	r3, r3, #9
 80006ce:	0a5b      	lsrs	r3, r3, #9
 80006d0:	469c      	mov	ip, r3
 80006d2:	b2ea      	uxtb	r2, r5
 80006d4:	e785      	b.n	80005e2 <__aeabi_fadd+0x8a>
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d007      	beq.n	80006ea <__aeabi_fadd+0x192>
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	03d2      	lsls	r2, r2, #15
 80006de:	4213      	tst	r3, r2
 80006e0:	d003      	beq.n	80006ea <__aeabi_fadd+0x192>
 80006e2:	4210      	tst	r0, r2
 80006e4:	d101      	bne.n	80006ea <__aeabi_fadd+0x192>
 80006e6:	000c      	movs	r4, r1
 80006e8:	0003      	movs	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0db      	beq.n	80006a6 <__aeabi_fadd+0x14e>
 80006ee:	2080      	movs	r0, #128	; 0x80
 80006f0:	03c0      	lsls	r0, r0, #15
 80006f2:	4318      	orrs	r0, r3
 80006f4:	0240      	lsls	r0, r0, #9
 80006f6:	0a43      	lsrs	r3, r0, #9
 80006f8:	469c      	mov	ip, r3
 80006fa:	22ff      	movs	r2, #255	; 0xff
 80006fc:	e771      	b.n	80005e2 <__aeabi_fadd+0x8a>
 80006fe:	2900      	cmp	r1, #0
 8000700:	d0d5      	beq.n	80006ae <__aeabi_fadd+0x156>
 8000702:	1b7a      	subs	r2, r7, r5
 8000704:	2d00      	cmp	r5, #0
 8000706:	d160      	bne.n	80007ca <__aeabi_fadd+0x272>
 8000708:	4643      	mov	r3, r8
 800070a:	2b00      	cmp	r3, #0
 800070c:	d024      	beq.n	8000758 <__aeabi_fadd+0x200>
 800070e:	1e53      	subs	r3, r2, #1
 8000710:	2a01      	cmp	r2, #1
 8000712:	d073      	beq.n	80007fc <__aeabi_fadd+0x2a4>
 8000714:	2aff      	cmp	r2, #255	; 0xff
 8000716:	d0e7      	beq.n	80006e8 <__aeabi_fadd+0x190>
 8000718:	001a      	movs	r2, r3
 800071a:	2a1b      	cmp	r2, #27
 800071c:	dc00      	bgt.n	8000720 <__aeabi_fadd+0x1c8>
 800071e:	e085      	b.n	800082c <__aeabi_fadd+0x2d4>
 8000720:	2001      	movs	r0, #1
 8000722:	003d      	movs	r5, r7
 8000724:	1980      	adds	r0, r0, r6
 8000726:	e785      	b.n	8000634 <__aeabi_fadd+0xdc>
 8000728:	2320      	movs	r3, #32
 800072a:	003a      	movs	r2, r7
 800072c:	1b45      	subs	r5, r0, r5
 800072e:	0038      	movs	r0, r7
 8000730:	3501      	adds	r5, #1
 8000732:	40ea      	lsrs	r2, r5
 8000734:	1b5d      	subs	r5, r3, r5
 8000736:	40a8      	lsls	r0, r5
 8000738:	1e43      	subs	r3, r0, #1
 800073a:	4198      	sbcs	r0, r3
 800073c:	2500      	movs	r5, #0
 800073e:	4310      	orrs	r0, r2
 8000740:	e73e      	b.n	80005c0 <__aeabi_fadd+0x68>
 8000742:	2320      	movs	r3, #32
 8000744:	0030      	movs	r0, r6
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	0031      	movs	r1, r6
 800074a:	4098      	lsls	r0, r3
 800074c:	40d1      	lsrs	r1, r2
 800074e:	1e43      	subs	r3, r0, #1
 8000750:	4198      	sbcs	r0, r3
 8000752:	4308      	orrs	r0, r1
 8000754:	e722      	b.n	800059c <__aeabi_fadd+0x44>
 8000756:	000c      	movs	r4, r1
 8000758:	0003      	movs	r3, r0
 800075a:	0015      	movs	r5, r2
 800075c:	e7b4      	b.n	80006c8 <__aeabi_fadd+0x170>
 800075e:	2fff      	cmp	r7, #255	; 0xff
 8000760:	d0c1      	beq.n	80006e6 <__aeabi_fadd+0x18e>
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	4640      	mov	r0, r8
 8000766:	04db      	lsls	r3, r3, #19
 8000768:	4318      	orrs	r0, r3
 800076a:	4680      	mov	r8, r0
 800076c:	2a1b      	cmp	r2, #27
 800076e:	dd51      	ble.n	8000814 <__aeabi_fadd+0x2bc>
 8000770:	2001      	movs	r0, #1
 8000772:	000c      	movs	r4, r1
 8000774:	003d      	movs	r5, r7
 8000776:	1a30      	subs	r0, r6, r0
 8000778:	e712      	b.n	80005a0 <__aeabi_fadd+0x48>
 800077a:	4643      	mov	r3, r8
 800077c:	1b9f      	subs	r7, r3, r6
 800077e:	017b      	lsls	r3, r7, #5
 8000780:	d42b      	bmi.n	80007da <__aeabi_fadd+0x282>
 8000782:	2f00      	cmp	r7, #0
 8000784:	d000      	beq.n	8000788 <__aeabi_fadd+0x230>
 8000786:	e710      	b.n	80005aa <__aeabi_fadd+0x52>
 8000788:	2300      	movs	r3, #0
 800078a:	2400      	movs	r4, #0
 800078c:	2200      	movs	r2, #0
 800078e:	469c      	mov	ip, r3
 8000790:	e727      	b.n	80005e2 <__aeabi_fadd+0x8a>
 8000792:	2320      	movs	r3, #32
 8000794:	0032      	movs	r2, r6
 8000796:	0030      	movs	r0, r6
 8000798:	40ca      	lsrs	r2, r1
 800079a:	1a59      	subs	r1, r3, r1
 800079c:	4088      	lsls	r0, r1
 800079e:	1e43      	subs	r3, r0, #1
 80007a0:	4198      	sbcs	r0, r3
 80007a2:	4310      	orrs	r0, r2
 80007a4:	e745      	b.n	8000632 <__aeabi_fadd+0xda>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d14a      	bne.n	8000840 <__aeabi_fadd+0x2e8>
 80007aa:	4643      	mov	r3, r8
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d063      	beq.n	8000878 <__aeabi_fadd+0x320>
 80007b0:	2200      	movs	r2, #0
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fadd+0x260>
 80007b6:	e714      	b.n	80005e2 <__aeabi_fadd+0x8a>
 80007b8:	0030      	movs	r0, r6
 80007ba:	4440      	add	r0, r8
 80007bc:	0143      	lsls	r3, r0, #5
 80007be:	d400      	bmi.n	80007c2 <__aeabi_fadd+0x26a>
 80007c0:	e77e      	b.n	80006c0 <__aeabi_fadd+0x168>
 80007c2:	4b32      	ldr	r3, [pc, #200]	; (800088c <__aeabi_fadd+0x334>)
 80007c4:	3501      	adds	r5, #1
 80007c6:	4018      	ands	r0, r3
 80007c8:	e77a      	b.n	80006c0 <__aeabi_fadd+0x168>
 80007ca:	2fff      	cmp	r7, #255	; 0xff
 80007cc:	d08c      	beq.n	80006e8 <__aeabi_fadd+0x190>
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	4641      	mov	r1, r8
 80007d2:	04db      	lsls	r3, r3, #19
 80007d4:	4319      	orrs	r1, r3
 80007d6:	4688      	mov	r8, r1
 80007d8:	e79f      	b.n	800071a <__aeabi_fadd+0x1c2>
 80007da:	4643      	mov	r3, r8
 80007dc:	000c      	movs	r4, r1
 80007de:	1af7      	subs	r7, r6, r3
 80007e0:	e6e3      	b.n	80005aa <__aeabi_fadd+0x52>
 80007e2:	4642      	mov	r2, r8
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d000      	beq.n	80007ea <__aeabi_fadd+0x292>
 80007e8:	e775      	b.n	80006d6 <__aeabi_fadd+0x17e>
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fadd+0x298>
 80007ee:	e77a      	b.n	80006e6 <__aeabi_fadd+0x18e>
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	03db      	lsls	r3, r3, #15
 80007f4:	2400      	movs	r4, #0
 80007f6:	469c      	mov	ip, r3
 80007f8:	22ff      	movs	r2, #255	; 0xff
 80007fa:	e6f2      	b.n	80005e2 <__aeabi_fadd+0x8a>
 80007fc:	0030      	movs	r0, r6
 80007fe:	4440      	add	r0, r8
 8000800:	2501      	movs	r5, #1
 8000802:	0143      	lsls	r3, r0, #5
 8000804:	d400      	bmi.n	8000808 <__aeabi_fadd+0x2b0>
 8000806:	e75b      	b.n	80006c0 <__aeabi_fadd+0x168>
 8000808:	2502      	movs	r5, #2
 800080a:	e718      	b.n	800063e <__aeabi_fadd+0xe6>
 800080c:	4643      	mov	r3, r8
 800080e:	2501      	movs	r5, #1
 8000810:	1b98      	subs	r0, r3, r6
 8000812:	e6c5      	b.n	80005a0 <__aeabi_fadd+0x48>
 8000814:	2320      	movs	r3, #32
 8000816:	4644      	mov	r4, r8
 8000818:	4640      	mov	r0, r8
 800081a:	40d4      	lsrs	r4, r2
 800081c:	1a9a      	subs	r2, r3, r2
 800081e:	4090      	lsls	r0, r2
 8000820:	1e43      	subs	r3, r0, #1
 8000822:	4198      	sbcs	r0, r3
 8000824:	4320      	orrs	r0, r4
 8000826:	e7a4      	b.n	8000772 <__aeabi_fadd+0x21a>
 8000828:	000d      	movs	r5, r1
 800082a:	e74d      	b.n	80006c8 <__aeabi_fadd+0x170>
 800082c:	2320      	movs	r3, #32
 800082e:	4641      	mov	r1, r8
 8000830:	4640      	mov	r0, r8
 8000832:	40d1      	lsrs	r1, r2
 8000834:	1a9a      	subs	r2, r3, r2
 8000836:	4090      	lsls	r0, r2
 8000838:	1e43      	subs	r3, r0, #1
 800083a:	4198      	sbcs	r0, r3
 800083c:	4308      	orrs	r0, r1
 800083e:	e770      	b.n	8000722 <__aeabi_fadd+0x1ca>
 8000840:	4642      	mov	r2, r8
 8000842:	2a00      	cmp	r2, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x2f0>
 8000846:	e74f      	b.n	80006e8 <__aeabi_fadd+0x190>
 8000848:	2e00      	cmp	r6, #0
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x2f6>
 800084c:	e74d      	b.n	80006ea <__aeabi_fadd+0x192>
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	03d2      	lsls	r2, r2, #15
 8000852:	4213      	tst	r3, r2
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x300>
 8000856:	e748      	b.n	80006ea <__aeabi_fadd+0x192>
 8000858:	4210      	tst	r0, r2
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x306>
 800085c:	e745      	b.n	80006ea <__aeabi_fadd+0x192>
 800085e:	0003      	movs	r3, r0
 8000860:	e743      	b.n	80006ea <__aeabi_fadd+0x192>
 8000862:	2e00      	cmp	r6, #0
 8000864:	d090      	beq.n	8000788 <__aeabi_fadd+0x230>
 8000866:	000c      	movs	r4, r1
 8000868:	4684      	mov	ip, r0
 800086a:	2200      	movs	r2, #0
 800086c:	e6b9      	b.n	80005e2 <__aeabi_fadd+0x8a>
 800086e:	4643      	mov	r3, r8
 8000870:	000c      	movs	r4, r1
 8000872:	1af0      	subs	r0, r6, r3
 8000874:	3501      	adds	r5, #1
 8000876:	e693      	b.n	80005a0 <__aeabi_fadd+0x48>
 8000878:	4684      	mov	ip, r0
 800087a:	2200      	movs	r2, #0
 800087c:	e6b1      	b.n	80005e2 <__aeabi_fadd+0x8a>
 800087e:	2800      	cmp	r0, #0
 8000880:	d000      	beq.n	8000884 <__aeabi_fadd+0x32c>
 8000882:	e71d      	b.n	80006c0 <__aeabi_fadd+0x168>
 8000884:	2300      	movs	r3, #0
 8000886:	2400      	movs	r4, #0
 8000888:	469c      	mov	ip, r3
 800088a:	e6aa      	b.n	80005e2 <__aeabi_fadd+0x8a>
 800088c:	fbffffff 	.word	0xfbffffff
 8000890:	7dffffff 	.word	0x7dffffff

08000894 <__eqsf2>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	0042      	lsls	r2, r0, #1
 8000898:	0245      	lsls	r5, r0, #9
 800089a:	024e      	lsls	r6, r1, #9
 800089c:	004c      	lsls	r4, r1, #1
 800089e:	0fc3      	lsrs	r3, r0, #31
 80008a0:	0a6d      	lsrs	r5, r5, #9
 80008a2:	2001      	movs	r0, #1
 80008a4:	0e12      	lsrs	r2, r2, #24
 80008a6:	0a76      	lsrs	r6, r6, #9
 80008a8:	0e24      	lsrs	r4, r4, #24
 80008aa:	0fc9      	lsrs	r1, r1, #31
 80008ac:	2aff      	cmp	r2, #255	; 0xff
 80008ae:	d006      	beq.n	80008be <__eqsf2+0x2a>
 80008b0:	2cff      	cmp	r4, #255	; 0xff
 80008b2:	d003      	beq.n	80008bc <__eqsf2+0x28>
 80008b4:	42a2      	cmp	r2, r4
 80008b6:	d101      	bne.n	80008bc <__eqsf2+0x28>
 80008b8:	42b5      	cmp	r5, r6
 80008ba:	d006      	beq.n	80008ca <__eqsf2+0x36>
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	2d00      	cmp	r5, #0
 80008c0:	d1fc      	bne.n	80008bc <__eqsf2+0x28>
 80008c2:	2cff      	cmp	r4, #255	; 0xff
 80008c4:	d1fa      	bne.n	80008bc <__eqsf2+0x28>
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	d1f8      	bne.n	80008bc <__eqsf2+0x28>
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d006      	beq.n	80008dc <__eqsf2+0x48>
 80008ce:	2001      	movs	r0, #1
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	d1f3      	bne.n	80008bc <__eqsf2+0x28>
 80008d4:	0028      	movs	r0, r5
 80008d6:	1e43      	subs	r3, r0, #1
 80008d8:	4198      	sbcs	r0, r3
 80008da:	e7ef      	b.n	80008bc <__eqsf2+0x28>
 80008dc:	2000      	movs	r0, #0
 80008de:	e7ed      	b.n	80008bc <__eqsf2+0x28>

080008e0 <__gesf2>:
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	0042      	lsls	r2, r0, #1
 80008e4:	0245      	lsls	r5, r0, #9
 80008e6:	024e      	lsls	r6, r1, #9
 80008e8:	004c      	lsls	r4, r1, #1
 80008ea:	0fc3      	lsrs	r3, r0, #31
 80008ec:	0a6d      	lsrs	r5, r5, #9
 80008ee:	0e12      	lsrs	r2, r2, #24
 80008f0:	0a76      	lsrs	r6, r6, #9
 80008f2:	0e24      	lsrs	r4, r4, #24
 80008f4:	0fc8      	lsrs	r0, r1, #31
 80008f6:	2aff      	cmp	r2, #255	; 0xff
 80008f8:	d01b      	beq.n	8000932 <__gesf2+0x52>
 80008fa:	2cff      	cmp	r4, #255	; 0xff
 80008fc:	d00e      	beq.n	800091c <__gesf2+0x3c>
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d11b      	bne.n	800093a <__gesf2+0x5a>
 8000902:	2c00      	cmp	r4, #0
 8000904:	d101      	bne.n	800090a <__gesf2+0x2a>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d01c      	beq.n	8000944 <__gesf2+0x64>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d00c      	beq.n	8000928 <__gesf2+0x48>
 800090e:	4283      	cmp	r3, r0
 8000910:	d01c      	beq.n	800094c <__gesf2+0x6c>
 8000912:	2102      	movs	r1, #2
 8000914:	1e58      	subs	r0, r3, #1
 8000916:	4008      	ands	r0, r1
 8000918:	3801      	subs	r0, #1
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	2e00      	cmp	r6, #0
 800091e:	d122      	bne.n	8000966 <__gesf2+0x86>
 8000920:	2a00      	cmp	r2, #0
 8000922:	d1f4      	bne.n	800090e <__gesf2+0x2e>
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1f2      	bne.n	800090e <__gesf2+0x2e>
 8000928:	2800      	cmp	r0, #0
 800092a:	d1f6      	bne.n	800091a <__gesf2+0x3a>
 800092c:	2001      	movs	r0, #1
 800092e:	4240      	negs	r0, r0
 8000930:	e7f3      	b.n	800091a <__gesf2+0x3a>
 8000932:	2d00      	cmp	r5, #0
 8000934:	d117      	bne.n	8000966 <__gesf2+0x86>
 8000936:	2cff      	cmp	r4, #255	; 0xff
 8000938:	d0f0      	beq.n	800091c <__gesf2+0x3c>
 800093a:	2c00      	cmp	r4, #0
 800093c:	d1e7      	bne.n	800090e <__gesf2+0x2e>
 800093e:	2e00      	cmp	r6, #0
 8000940:	d1e5      	bne.n	800090e <__gesf2+0x2e>
 8000942:	e7e6      	b.n	8000912 <__gesf2+0x32>
 8000944:	2000      	movs	r0, #0
 8000946:	2d00      	cmp	r5, #0
 8000948:	d0e7      	beq.n	800091a <__gesf2+0x3a>
 800094a:	e7e2      	b.n	8000912 <__gesf2+0x32>
 800094c:	42a2      	cmp	r2, r4
 800094e:	dc05      	bgt.n	800095c <__gesf2+0x7c>
 8000950:	dbea      	blt.n	8000928 <__gesf2+0x48>
 8000952:	42b5      	cmp	r5, r6
 8000954:	d802      	bhi.n	800095c <__gesf2+0x7c>
 8000956:	d3e7      	bcc.n	8000928 <__gesf2+0x48>
 8000958:	2000      	movs	r0, #0
 800095a:	e7de      	b.n	800091a <__gesf2+0x3a>
 800095c:	4243      	negs	r3, r0
 800095e:	4158      	adcs	r0, r3
 8000960:	0040      	lsls	r0, r0, #1
 8000962:	3801      	subs	r0, #1
 8000964:	e7d9      	b.n	800091a <__gesf2+0x3a>
 8000966:	2002      	movs	r0, #2
 8000968:	4240      	negs	r0, r0
 800096a:	e7d6      	b.n	800091a <__gesf2+0x3a>

0800096c <__lesf2>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	0042      	lsls	r2, r0, #1
 8000970:	0245      	lsls	r5, r0, #9
 8000972:	024e      	lsls	r6, r1, #9
 8000974:	004c      	lsls	r4, r1, #1
 8000976:	0fc3      	lsrs	r3, r0, #31
 8000978:	0a6d      	lsrs	r5, r5, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	0a76      	lsrs	r6, r6, #9
 800097e:	0e24      	lsrs	r4, r4, #24
 8000980:	0fc8      	lsrs	r0, r1, #31
 8000982:	2aff      	cmp	r2, #255	; 0xff
 8000984:	d00b      	beq.n	800099e <__lesf2+0x32>
 8000986:	2cff      	cmp	r4, #255	; 0xff
 8000988:	d00d      	beq.n	80009a6 <__lesf2+0x3a>
 800098a:	2a00      	cmp	r2, #0
 800098c:	d11f      	bne.n	80009ce <__lesf2+0x62>
 800098e:	2c00      	cmp	r4, #0
 8000990:	d116      	bne.n	80009c0 <__lesf2+0x54>
 8000992:	2e00      	cmp	r6, #0
 8000994:	d114      	bne.n	80009c0 <__lesf2+0x54>
 8000996:	2000      	movs	r0, #0
 8000998:	2d00      	cmp	r5, #0
 800099a:	d010      	beq.n	80009be <__lesf2+0x52>
 800099c:	e009      	b.n	80009b2 <__lesf2+0x46>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d10c      	bne.n	80009bc <__lesf2+0x50>
 80009a2:	2cff      	cmp	r4, #255	; 0xff
 80009a4:	d113      	bne.n	80009ce <__lesf2+0x62>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	d108      	bne.n	80009bc <__lesf2+0x50>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d008      	beq.n	80009c0 <__lesf2+0x54>
 80009ae:	4283      	cmp	r3, r0
 80009b0:	d012      	beq.n	80009d8 <__lesf2+0x6c>
 80009b2:	2102      	movs	r1, #2
 80009b4:	1e58      	subs	r0, r3, #1
 80009b6:	4008      	ands	r0, r1
 80009b8:	3801      	subs	r0, #1
 80009ba:	e000      	b.n	80009be <__lesf2+0x52>
 80009bc:	2002      	movs	r0, #2
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d1f4      	bne.n	80009ae <__lesf2+0x42>
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d1fa      	bne.n	80009be <__lesf2+0x52>
 80009c8:	2001      	movs	r0, #1
 80009ca:	4240      	negs	r0, r0
 80009cc:	e7f7      	b.n	80009be <__lesf2+0x52>
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	d1ed      	bne.n	80009ae <__lesf2+0x42>
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	d1eb      	bne.n	80009ae <__lesf2+0x42>
 80009d6:	e7ec      	b.n	80009b2 <__lesf2+0x46>
 80009d8:	42a2      	cmp	r2, r4
 80009da:	dc05      	bgt.n	80009e8 <__lesf2+0x7c>
 80009dc:	dbf2      	blt.n	80009c4 <__lesf2+0x58>
 80009de:	42b5      	cmp	r5, r6
 80009e0:	d802      	bhi.n	80009e8 <__lesf2+0x7c>
 80009e2:	d3ef      	bcc.n	80009c4 <__lesf2+0x58>
 80009e4:	2000      	movs	r0, #0
 80009e6:	e7ea      	b.n	80009be <__lesf2+0x52>
 80009e8:	4243      	negs	r3, r0
 80009ea:	4158      	adcs	r0, r3
 80009ec:	0040      	lsls	r0, r0, #1
 80009ee:	3801      	subs	r0, #1
 80009f0:	e7e5      	b.n	80009be <__lesf2+0x52>
 80009f2:	46c0      	nop			; (mov r8, r8)

080009f4 <__aeabi_fmul>:
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	46d6      	mov	lr, sl
 80009fc:	0244      	lsls	r4, r0, #9
 80009fe:	0045      	lsls	r5, r0, #1
 8000a00:	b5c0      	push	{r6, r7, lr}
 8000a02:	0a64      	lsrs	r4, r4, #9
 8000a04:	1c0f      	adds	r7, r1, #0
 8000a06:	0e2d      	lsrs	r5, r5, #24
 8000a08:	0fc6      	lsrs	r6, r0, #31
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x1c>
 8000a0e:	e08d      	b.n	8000b2c <__aeabi_fmul+0x138>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x22>
 8000a14:	e092      	b.n	8000b3c <__aeabi_fmul+0x148>
 8000a16:	2300      	movs	r3, #0
 8000a18:	2080      	movs	r0, #128	; 0x80
 8000a1a:	4699      	mov	r9, r3
 8000a1c:	469a      	mov	sl, r3
 8000a1e:	00e4      	lsls	r4, r4, #3
 8000a20:	04c0      	lsls	r0, r0, #19
 8000a22:	4304      	orrs	r4, r0
 8000a24:	3d7f      	subs	r5, #127	; 0x7f
 8000a26:	0278      	lsls	r0, r7, #9
 8000a28:	0a43      	lsrs	r3, r0, #9
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	007b      	lsls	r3, r7, #1
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x44>
 8000a36:	e070      	b.n	8000b1a <__aeabi_fmul+0x126>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fmul+0x4a>
 8000a3c:	e086      	b.n	8000b4c <__aeabi_fmul+0x158>
 8000a3e:	4642      	mov	r2, r8
 8000a40:	00d0      	lsls	r0, r2, #3
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	3b7f      	subs	r3, #127	; 0x7f
 8000a46:	18ed      	adds	r5, r5, r3
 8000a48:	2300      	movs	r3, #0
 8000a4a:	04d2      	lsls	r2, r2, #19
 8000a4c:	4302      	orrs	r2, r0
 8000a4e:	4690      	mov	r8, r2
 8000a50:	469c      	mov	ip, r3
 8000a52:	0031      	movs	r1, r6
 8000a54:	464b      	mov	r3, r9
 8000a56:	4079      	eors	r1, r7
 8000a58:	1c68      	adds	r0, r5, #1
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	d81c      	bhi.n	8000a98 <__aeabi_fmul+0xa4>
 8000a5e:	4a76      	ldr	r2, [pc, #472]	; (8000c38 <__aeabi_fmul+0x244>)
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	58d3      	ldr	r3, [r2, r3]
 8000a64:	469f      	mov	pc, r3
 8000a66:	0039      	movs	r1, r7
 8000a68:	4644      	mov	r4, r8
 8000a6a:	46e2      	mov	sl, ip
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d00f      	beq.n	8000a92 <__aeabi_fmul+0x9e>
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fmul+0x84>
 8000a76:	e0d7      	b.n	8000c28 <__aeabi_fmul+0x234>
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d137      	bne.n	8000aec <__aeabi_fmul+0xf8>
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	2400      	movs	r4, #0
 8000a80:	05c0      	lsls	r0, r0, #23
 8000a82:	4320      	orrs	r0, r4
 8000a84:	07c9      	lsls	r1, r1, #31
 8000a86:	4308      	orrs	r0, r1
 8000a88:	bce0      	pop	{r5, r6, r7}
 8000a8a:	46ba      	mov	sl, r7
 8000a8c:	46b1      	mov	r9, r6
 8000a8e:	46a8      	mov	r8, r5
 8000a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a92:	20ff      	movs	r0, #255	; 0xff
 8000a94:	2400      	movs	r4, #0
 8000a96:	e7f3      	b.n	8000a80 <__aeabi_fmul+0x8c>
 8000a98:	0c26      	lsrs	r6, r4, #16
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	0c22      	lsrs	r2, r4, #16
 8000a9e:	4644      	mov	r4, r8
 8000aa0:	0424      	lsls	r4, r4, #16
 8000aa2:	0c24      	lsrs	r4, r4, #16
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	0027      	movs	r7, r4
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	4357      	muls	r7, r2
 8000aac:	4374      	muls	r4, r6
 8000aae:	435a      	muls	r2, r3
 8000ab0:	435e      	muls	r6, r3
 8000ab2:	1912      	adds	r2, r2, r4
 8000ab4:	0c3b      	lsrs	r3, r7, #16
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	d903      	bls.n	8000ac4 <__aeabi_fmul+0xd0>
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	0252      	lsls	r2, r2, #9
 8000ac0:	4694      	mov	ip, r2
 8000ac2:	4466      	add	r6, ip
 8000ac4:	043f      	lsls	r7, r7, #16
 8000ac6:	041a      	lsls	r2, r3, #16
 8000ac8:	0c3f      	lsrs	r7, r7, #16
 8000aca:	19d2      	adds	r2, r2, r7
 8000acc:	0194      	lsls	r4, r2, #6
 8000ace:	1e67      	subs	r7, r4, #1
 8000ad0:	41bc      	sbcs	r4, r7
 8000ad2:	0c1b      	lsrs	r3, r3, #16
 8000ad4:	0e92      	lsrs	r2, r2, #26
 8000ad6:	199b      	adds	r3, r3, r6
 8000ad8:	4314      	orrs	r4, r2
 8000ada:	019b      	lsls	r3, r3, #6
 8000adc:	431c      	orrs	r4, r3
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_fmul+0xf0>
 8000ae2:	e09b      	b.n	8000c1c <__aeabi_fmul+0x228>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	0862      	lsrs	r2, r4, #1
 8000ae8:	401c      	ands	r4, r3
 8000aea:	4314      	orrs	r4, r2
 8000aec:	0002      	movs	r2, r0
 8000aee:	327f      	adds	r2, #127	; 0x7f
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	dd64      	ble.n	8000bbe <__aeabi_fmul+0x1ca>
 8000af4:	0763      	lsls	r3, r4, #29
 8000af6:	d004      	beq.n	8000b02 <__aeabi_fmul+0x10e>
 8000af8:	230f      	movs	r3, #15
 8000afa:	4023      	ands	r3, r4
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d000      	beq.n	8000b02 <__aeabi_fmul+0x10e>
 8000b00:	3404      	adds	r4, #4
 8000b02:	0123      	lsls	r3, r4, #4
 8000b04:	d503      	bpl.n	8000b0e <__aeabi_fmul+0x11a>
 8000b06:	0002      	movs	r2, r0
 8000b08:	4b4c      	ldr	r3, [pc, #304]	; (8000c3c <__aeabi_fmul+0x248>)
 8000b0a:	3280      	adds	r2, #128	; 0x80
 8000b0c:	401c      	ands	r4, r3
 8000b0e:	2afe      	cmp	r2, #254	; 0xfe
 8000b10:	dcbf      	bgt.n	8000a92 <__aeabi_fmul+0x9e>
 8000b12:	01a4      	lsls	r4, r4, #6
 8000b14:	0a64      	lsrs	r4, r4, #9
 8000b16:	b2d0      	uxtb	r0, r2
 8000b18:	e7b2      	b.n	8000a80 <__aeabi_fmul+0x8c>
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d13d      	bne.n	8000b9c <__aeabi_fmul+0x1a8>
 8000b20:	464a      	mov	r2, r9
 8000b22:	3301      	adds	r3, #1
 8000b24:	431a      	orrs	r2, r3
 8000b26:	4691      	mov	r9, r2
 8000b28:	469c      	mov	ip, r3
 8000b2a:	e792      	b.n	8000a52 <__aeabi_fmul+0x5e>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d129      	bne.n	8000b84 <__aeabi_fmul+0x190>
 8000b30:	2304      	movs	r3, #4
 8000b32:	4699      	mov	r9, r3
 8000b34:	3b03      	subs	r3, #3
 8000b36:	2500      	movs	r5, #0
 8000b38:	469a      	mov	sl, r3
 8000b3a:	e774      	b.n	8000a26 <__aeabi_fmul+0x32>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d11b      	bne.n	8000b78 <__aeabi_fmul+0x184>
 8000b40:	2308      	movs	r3, #8
 8000b42:	4699      	mov	r9, r3
 8000b44:	3b06      	subs	r3, #6
 8000b46:	25ff      	movs	r5, #255	; 0xff
 8000b48:	469a      	mov	sl, r3
 8000b4a:	e76c      	b.n	8000a26 <__aeabi_fmul+0x32>
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	35ff      	adds	r5, #255	; 0xff
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10b      	bne.n	8000b6c <__aeabi_fmul+0x178>
 8000b54:	2302      	movs	r3, #2
 8000b56:	464a      	mov	r2, r9
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	469c      	mov	ip, r3
 8000b5e:	e778      	b.n	8000a52 <__aeabi_fmul+0x5e>
 8000b60:	4653      	mov	r3, sl
 8000b62:	0031      	movs	r1, r6
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fmul+0x176>
 8000b68:	e783      	b.n	8000a72 <__aeabi_fmul+0x7e>
 8000b6a:	e792      	b.n	8000a92 <__aeabi_fmul+0x9e>
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	464a      	mov	r2, r9
 8000b70:	431a      	orrs	r2, r3
 8000b72:	4691      	mov	r9, r2
 8000b74:	469c      	mov	ip, r3
 8000b76:	e76c      	b.n	8000a52 <__aeabi_fmul+0x5e>
 8000b78:	230c      	movs	r3, #12
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b09      	subs	r3, #9
 8000b7e:	25ff      	movs	r5, #255	; 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e750      	b.n	8000a26 <__aeabi_fmul+0x32>
 8000b84:	0020      	movs	r0, r4
 8000b86:	f001 fd5d 	bl	8002644 <__clzsi2>
 8000b8a:	2576      	movs	r5, #118	; 0x76
 8000b8c:	1f43      	subs	r3, r0, #5
 8000b8e:	409c      	lsls	r4, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	426d      	negs	r5, r5
 8000b94:	4699      	mov	r9, r3
 8000b96:	469a      	mov	sl, r3
 8000b98:	1a2d      	subs	r5, r5, r0
 8000b9a:	e744      	b.n	8000a26 <__aeabi_fmul+0x32>
 8000b9c:	4640      	mov	r0, r8
 8000b9e:	f001 fd51 	bl	8002644 <__clzsi2>
 8000ba2:	4642      	mov	r2, r8
 8000ba4:	1f43      	subs	r3, r0, #5
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	1a2d      	subs	r5, r5, r0
 8000bac:	4690      	mov	r8, r2
 8000bae:	469c      	mov	ip, r3
 8000bb0:	3d76      	subs	r5, #118	; 0x76
 8000bb2:	e74e      	b.n	8000a52 <__aeabi_fmul+0x5e>
 8000bb4:	2480      	movs	r4, #128	; 0x80
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	20ff      	movs	r0, #255	; 0xff
 8000bba:	03e4      	lsls	r4, r4, #15
 8000bbc:	e760      	b.n	8000a80 <__aeabi_fmul+0x8c>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	1a9b      	subs	r3, r3, r2
 8000bc2:	2b1b      	cmp	r3, #27
 8000bc4:	dd00      	ble.n	8000bc8 <__aeabi_fmul+0x1d4>
 8000bc6:	e759      	b.n	8000a7c <__aeabi_fmul+0x88>
 8000bc8:	0022      	movs	r2, r4
 8000bca:	309e      	adds	r0, #158	; 0x9e
 8000bcc:	40da      	lsrs	r2, r3
 8000bce:	4084      	lsls	r4, r0
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	1e62      	subs	r2, r4, #1
 8000bd4:	4194      	sbcs	r4, r2
 8000bd6:	431c      	orrs	r4, r3
 8000bd8:	0763      	lsls	r3, r4, #29
 8000bda:	d004      	beq.n	8000be6 <__aeabi_fmul+0x1f2>
 8000bdc:	230f      	movs	r3, #15
 8000bde:	4023      	ands	r3, r4
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d000      	beq.n	8000be6 <__aeabi_fmul+0x1f2>
 8000be4:	3404      	adds	r4, #4
 8000be6:	0163      	lsls	r3, r4, #5
 8000be8:	d51a      	bpl.n	8000c20 <__aeabi_fmul+0x22c>
 8000bea:	2001      	movs	r0, #1
 8000bec:	2400      	movs	r4, #0
 8000bee:	e747      	b.n	8000a80 <__aeabi_fmul+0x8c>
 8000bf0:	2080      	movs	r0, #128	; 0x80
 8000bf2:	03c0      	lsls	r0, r0, #15
 8000bf4:	4204      	tst	r4, r0
 8000bf6:	d009      	beq.n	8000c0c <__aeabi_fmul+0x218>
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	4203      	tst	r3, r0
 8000bfc:	d106      	bne.n	8000c0c <__aeabi_fmul+0x218>
 8000bfe:	4644      	mov	r4, r8
 8000c00:	4304      	orrs	r4, r0
 8000c02:	0264      	lsls	r4, r4, #9
 8000c04:	0039      	movs	r1, r7
 8000c06:	20ff      	movs	r0, #255	; 0xff
 8000c08:	0a64      	lsrs	r4, r4, #9
 8000c0a:	e739      	b.n	8000a80 <__aeabi_fmul+0x8c>
 8000c0c:	2080      	movs	r0, #128	; 0x80
 8000c0e:	03c0      	lsls	r0, r0, #15
 8000c10:	4304      	orrs	r4, r0
 8000c12:	0264      	lsls	r4, r4, #9
 8000c14:	0031      	movs	r1, r6
 8000c16:	20ff      	movs	r0, #255	; 0xff
 8000c18:	0a64      	lsrs	r4, r4, #9
 8000c1a:	e731      	b.n	8000a80 <__aeabi_fmul+0x8c>
 8000c1c:	0028      	movs	r0, r5
 8000c1e:	e765      	b.n	8000aec <__aeabi_fmul+0xf8>
 8000c20:	01a4      	lsls	r4, r4, #6
 8000c22:	2000      	movs	r0, #0
 8000c24:	0a64      	lsrs	r4, r4, #9
 8000c26:	e72b      	b.n	8000a80 <__aeabi_fmul+0x8c>
 8000c28:	2080      	movs	r0, #128	; 0x80
 8000c2a:	03c0      	lsls	r0, r0, #15
 8000c2c:	4304      	orrs	r4, r0
 8000c2e:	0264      	lsls	r4, r4, #9
 8000c30:	20ff      	movs	r0, #255	; 0xff
 8000c32:	0a64      	lsrs	r4, r4, #9
 8000c34:	e724      	b.n	8000a80 <__aeabi_fmul+0x8c>
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	080084c4 	.word	0x080084c4
 8000c3c:	f7ffffff 	.word	0xf7ffffff

08000c40 <__aeabi_fsub>:
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	46ce      	mov	lr, r9
 8000c44:	4647      	mov	r7, r8
 8000c46:	0243      	lsls	r3, r0, #9
 8000c48:	0a5b      	lsrs	r3, r3, #9
 8000c4a:	024e      	lsls	r6, r1, #9
 8000c4c:	00da      	lsls	r2, r3, #3
 8000c4e:	4694      	mov	ip, r2
 8000c50:	0a72      	lsrs	r2, r6, #9
 8000c52:	4691      	mov	r9, r2
 8000c54:	0045      	lsls	r5, r0, #1
 8000c56:	004a      	lsls	r2, r1, #1
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	0e2d      	lsrs	r5, r5, #24
 8000c5c:	001f      	movs	r7, r3
 8000c5e:	0fc4      	lsrs	r4, r0, #31
 8000c60:	0e12      	lsrs	r2, r2, #24
 8000c62:	0fc9      	lsrs	r1, r1, #31
 8000c64:	09b6      	lsrs	r6, r6, #6
 8000c66:	2aff      	cmp	r2, #255	; 0xff
 8000c68:	d05b      	beq.n	8000d22 <__aeabi_fsub+0xe2>
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4041      	eors	r1, r0
 8000c6e:	428c      	cmp	r4, r1
 8000c70:	d039      	beq.n	8000ce6 <__aeabi_fsub+0xa6>
 8000c72:	1aa8      	subs	r0, r5, r2
 8000c74:	2800      	cmp	r0, #0
 8000c76:	dd5a      	ble.n	8000d2e <__aeabi_fsub+0xee>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d06a      	beq.n	8000d52 <__aeabi_fsub+0x112>
 8000c7c:	2dff      	cmp	r5, #255	; 0xff
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_fsub+0x42>
 8000c80:	e0d9      	b.n	8000e36 <__aeabi_fsub+0x1f6>
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	04d2      	lsls	r2, r2, #19
 8000c86:	4316      	orrs	r6, r2
 8000c88:	281b      	cmp	r0, #27
 8000c8a:	dc00      	bgt.n	8000c8e <__aeabi_fsub+0x4e>
 8000c8c:	e0e9      	b.n	8000e62 <__aeabi_fsub+0x222>
 8000c8e:	2001      	movs	r0, #1
 8000c90:	4663      	mov	r3, ip
 8000c92:	1a18      	subs	r0, r3, r0
 8000c94:	0143      	lsls	r3, r0, #5
 8000c96:	d400      	bmi.n	8000c9a <__aeabi_fsub+0x5a>
 8000c98:	e0b4      	b.n	8000e04 <__aeabi_fsub+0x1c4>
 8000c9a:	0180      	lsls	r0, r0, #6
 8000c9c:	0987      	lsrs	r7, r0, #6
 8000c9e:	0038      	movs	r0, r7
 8000ca0:	f001 fcd0 	bl	8002644 <__clzsi2>
 8000ca4:	3805      	subs	r0, #5
 8000ca6:	4087      	lsls	r7, r0
 8000ca8:	4285      	cmp	r5, r0
 8000caa:	dc00      	bgt.n	8000cae <__aeabi_fsub+0x6e>
 8000cac:	e0cc      	b.n	8000e48 <__aeabi_fsub+0x208>
 8000cae:	1a2d      	subs	r5, r5, r0
 8000cb0:	48b5      	ldr	r0, [pc, #724]	; (8000f88 <__aeabi_fsub+0x348>)
 8000cb2:	4038      	ands	r0, r7
 8000cb4:	0743      	lsls	r3, r0, #29
 8000cb6:	d004      	beq.n	8000cc2 <__aeabi_fsub+0x82>
 8000cb8:	230f      	movs	r3, #15
 8000cba:	4003      	ands	r3, r0
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_fsub+0x82>
 8000cc0:	3004      	adds	r0, #4
 8000cc2:	0143      	lsls	r3, r0, #5
 8000cc4:	d400      	bmi.n	8000cc8 <__aeabi_fsub+0x88>
 8000cc6:	e0a0      	b.n	8000e0a <__aeabi_fsub+0x1ca>
 8000cc8:	1c6a      	adds	r2, r5, #1
 8000cca:	2dfe      	cmp	r5, #254	; 0xfe
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_fsub+0x90>
 8000cce:	e08d      	b.n	8000dec <__aeabi_fsub+0x1ac>
 8000cd0:	0180      	lsls	r0, r0, #6
 8000cd2:	0a47      	lsrs	r7, r0, #9
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	05d0      	lsls	r0, r2, #23
 8000cd8:	4338      	orrs	r0, r7
 8000cda:	07e4      	lsls	r4, r4, #31
 8000cdc:	4320      	orrs	r0, r4
 8000cde:	bcc0      	pop	{r6, r7}
 8000ce0:	46b9      	mov	r9, r7
 8000ce2:	46b0      	mov	r8, r6
 8000ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ce6:	1aa8      	subs	r0, r5, r2
 8000ce8:	4680      	mov	r8, r0
 8000cea:	2800      	cmp	r0, #0
 8000cec:	dd45      	ble.n	8000d7a <__aeabi_fsub+0x13a>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d070      	beq.n	8000dd4 <__aeabi_fsub+0x194>
 8000cf2:	2dff      	cmp	r5, #255	; 0xff
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0xb8>
 8000cf6:	e09e      	b.n	8000e36 <__aeabi_fsub+0x1f6>
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	04db      	lsls	r3, r3, #19
 8000cfc:	431e      	orrs	r6, r3
 8000cfe:	4643      	mov	r3, r8
 8000d00:	2b1b      	cmp	r3, #27
 8000d02:	dc00      	bgt.n	8000d06 <__aeabi_fsub+0xc6>
 8000d04:	e0d2      	b.n	8000eac <__aeabi_fsub+0x26c>
 8000d06:	2001      	movs	r0, #1
 8000d08:	4460      	add	r0, ip
 8000d0a:	0143      	lsls	r3, r0, #5
 8000d0c:	d57a      	bpl.n	8000e04 <__aeabi_fsub+0x1c4>
 8000d0e:	3501      	adds	r5, #1
 8000d10:	2dff      	cmp	r5, #255	; 0xff
 8000d12:	d06b      	beq.n	8000dec <__aeabi_fsub+0x1ac>
 8000d14:	2301      	movs	r3, #1
 8000d16:	4a9d      	ldr	r2, [pc, #628]	; (8000f8c <__aeabi_fsub+0x34c>)
 8000d18:	4003      	ands	r3, r0
 8000d1a:	0840      	lsrs	r0, r0, #1
 8000d1c:	4010      	ands	r0, r2
 8000d1e:	4318      	orrs	r0, r3
 8000d20:	e7c8      	b.n	8000cb4 <__aeabi_fsub+0x74>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d020      	beq.n	8000d68 <__aeabi_fsub+0x128>
 8000d26:	428c      	cmp	r4, r1
 8000d28:	d023      	beq.n	8000d72 <__aeabi_fsub+0x132>
 8000d2a:	0028      	movs	r0, r5
 8000d2c:	38ff      	subs	r0, #255	; 0xff
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d039      	beq.n	8000da6 <__aeabi_fsub+0x166>
 8000d32:	1b57      	subs	r7, r2, r5
 8000d34:	2d00      	cmp	r5, #0
 8000d36:	d000      	beq.n	8000d3a <__aeabi_fsub+0xfa>
 8000d38:	e09d      	b.n	8000e76 <__aeabi_fsub+0x236>
 8000d3a:	4663      	mov	r3, ip
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_fsub+0x102>
 8000d40:	e0db      	b.n	8000efa <__aeabi_fsub+0x2ba>
 8000d42:	1e7b      	subs	r3, r7, #1
 8000d44:	2f01      	cmp	r7, #1
 8000d46:	d100      	bne.n	8000d4a <__aeabi_fsub+0x10a>
 8000d48:	e10d      	b.n	8000f66 <__aeabi_fsub+0x326>
 8000d4a:	2fff      	cmp	r7, #255	; 0xff
 8000d4c:	d071      	beq.n	8000e32 <__aeabi_fsub+0x1f2>
 8000d4e:	001f      	movs	r7, r3
 8000d50:	e098      	b.n	8000e84 <__aeabi_fsub+0x244>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x118>
 8000d56:	e0a7      	b.n	8000ea8 <__aeabi_fsub+0x268>
 8000d58:	1e42      	subs	r2, r0, #1
 8000d5a:	2801      	cmp	r0, #1
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_fsub+0x120>
 8000d5e:	e0e6      	b.n	8000f2e <__aeabi_fsub+0x2ee>
 8000d60:	28ff      	cmp	r0, #255	; 0xff
 8000d62:	d068      	beq.n	8000e36 <__aeabi_fsub+0x1f6>
 8000d64:	0010      	movs	r0, r2
 8000d66:	e78f      	b.n	8000c88 <__aeabi_fsub+0x48>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	4041      	eors	r1, r0
 8000d6c:	42a1      	cmp	r1, r4
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_fsub+0x132>
 8000d70:	e77f      	b.n	8000c72 <__aeabi_fsub+0x32>
 8000d72:	20ff      	movs	r0, #255	; 0xff
 8000d74:	4240      	negs	r0, r0
 8000d76:	4680      	mov	r8, r0
 8000d78:	44a8      	add	r8, r5
 8000d7a:	4640      	mov	r0, r8
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d038      	beq.n	8000df2 <__aeabi_fsub+0x1b2>
 8000d80:	1b51      	subs	r1, r2, r5
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0x148>
 8000d86:	e0ae      	b.n	8000ee6 <__aeabi_fsub+0x2a6>
 8000d88:	2aff      	cmp	r2, #255	; 0xff
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_fsub+0x14e>
 8000d8c:	e0df      	b.n	8000f4e <__aeabi_fsub+0x30e>
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	4660      	mov	r0, ip
 8000d92:	04db      	lsls	r3, r3, #19
 8000d94:	4318      	orrs	r0, r3
 8000d96:	4684      	mov	ip, r0
 8000d98:	291b      	cmp	r1, #27
 8000d9a:	dc00      	bgt.n	8000d9e <__aeabi_fsub+0x15e>
 8000d9c:	e0d9      	b.n	8000f52 <__aeabi_fsub+0x312>
 8000d9e:	2001      	movs	r0, #1
 8000da0:	0015      	movs	r5, r2
 8000da2:	1980      	adds	r0, r0, r6
 8000da4:	e7b1      	b.n	8000d0a <__aeabi_fsub+0xca>
 8000da6:	20fe      	movs	r0, #254	; 0xfe
 8000da8:	1c6a      	adds	r2, r5, #1
 8000daa:	4210      	tst	r0, r2
 8000dac:	d171      	bne.n	8000e92 <__aeabi_fsub+0x252>
 8000dae:	2d00      	cmp	r5, #0
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x174>
 8000db2:	e0a6      	b.n	8000f02 <__aeabi_fsub+0x2c2>
 8000db4:	4663      	mov	r3, ip
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d100      	bne.n	8000dbc <__aeabi_fsub+0x17c>
 8000dba:	e0d9      	b.n	8000f70 <__aeabi_fsub+0x330>
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_fsub+0x184>
 8000dc2:	e788      	b.n	8000cd6 <__aeabi_fsub+0x96>
 8000dc4:	1b98      	subs	r0, r3, r6
 8000dc6:	0143      	lsls	r3, r0, #5
 8000dc8:	d400      	bmi.n	8000dcc <__aeabi_fsub+0x18c>
 8000dca:	e0e1      	b.n	8000f90 <__aeabi_fsub+0x350>
 8000dcc:	4663      	mov	r3, ip
 8000dce:	000c      	movs	r4, r1
 8000dd0:	1af0      	subs	r0, r6, r3
 8000dd2:	e76f      	b.n	8000cb4 <__aeabi_fsub+0x74>
 8000dd4:	2e00      	cmp	r6, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_fsub+0x19a>
 8000dd8:	e0b7      	b.n	8000f4a <__aeabi_fsub+0x30a>
 8000dda:	0002      	movs	r2, r0
 8000ddc:	3a01      	subs	r2, #1
 8000dde:	2801      	cmp	r0, #1
 8000de0:	d100      	bne.n	8000de4 <__aeabi_fsub+0x1a4>
 8000de2:	e09c      	b.n	8000f1e <__aeabi_fsub+0x2de>
 8000de4:	28ff      	cmp	r0, #255	; 0xff
 8000de6:	d026      	beq.n	8000e36 <__aeabi_fsub+0x1f6>
 8000de8:	4690      	mov	r8, r2
 8000dea:	e788      	b.n	8000cfe <__aeabi_fsub+0xbe>
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	2700      	movs	r7, #0
 8000df0:	e771      	b.n	8000cd6 <__aeabi_fsub+0x96>
 8000df2:	20fe      	movs	r0, #254	; 0xfe
 8000df4:	1c6a      	adds	r2, r5, #1
 8000df6:	4210      	tst	r0, r2
 8000df8:	d064      	beq.n	8000ec4 <__aeabi_fsub+0x284>
 8000dfa:	2aff      	cmp	r2, #255	; 0xff
 8000dfc:	d0f6      	beq.n	8000dec <__aeabi_fsub+0x1ac>
 8000dfe:	0015      	movs	r5, r2
 8000e00:	4466      	add	r6, ip
 8000e02:	0870      	lsrs	r0, r6, #1
 8000e04:	0743      	lsls	r3, r0, #29
 8000e06:	d000      	beq.n	8000e0a <__aeabi_fsub+0x1ca>
 8000e08:	e756      	b.n	8000cb8 <__aeabi_fsub+0x78>
 8000e0a:	08c3      	lsrs	r3, r0, #3
 8000e0c:	2dff      	cmp	r5, #255	; 0xff
 8000e0e:	d012      	beq.n	8000e36 <__aeabi_fsub+0x1f6>
 8000e10:	025b      	lsls	r3, r3, #9
 8000e12:	0a5f      	lsrs	r7, r3, #9
 8000e14:	b2ea      	uxtb	r2, r5
 8000e16:	e75e      	b.n	8000cd6 <__aeabi_fsub+0x96>
 8000e18:	4662      	mov	r2, ip
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_fsub+0x1e0>
 8000e1e:	e096      	b.n	8000f4e <__aeabi_fsub+0x30e>
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d008      	beq.n	8000e36 <__aeabi_fsub+0x1f6>
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	03d2      	lsls	r2, r2, #15
 8000e28:	4213      	tst	r3, r2
 8000e2a:	d004      	beq.n	8000e36 <__aeabi_fsub+0x1f6>
 8000e2c:	4648      	mov	r0, r9
 8000e2e:	4210      	tst	r0, r2
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fsub+0x1f6>
 8000e32:	000c      	movs	r4, r1
 8000e34:	464b      	mov	r3, r9
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0d8      	beq.n	8000dec <__aeabi_fsub+0x1ac>
 8000e3a:	2780      	movs	r7, #128	; 0x80
 8000e3c:	03ff      	lsls	r7, r7, #15
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	027f      	lsls	r7, r7, #9
 8000e42:	22ff      	movs	r2, #255	; 0xff
 8000e44:	0a7f      	lsrs	r7, r7, #9
 8000e46:	e746      	b.n	8000cd6 <__aeabi_fsub+0x96>
 8000e48:	2320      	movs	r3, #32
 8000e4a:	003a      	movs	r2, r7
 8000e4c:	1b45      	subs	r5, r0, r5
 8000e4e:	0038      	movs	r0, r7
 8000e50:	3501      	adds	r5, #1
 8000e52:	40ea      	lsrs	r2, r5
 8000e54:	1b5d      	subs	r5, r3, r5
 8000e56:	40a8      	lsls	r0, r5
 8000e58:	1e43      	subs	r3, r0, #1
 8000e5a:	4198      	sbcs	r0, r3
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	4310      	orrs	r0, r2
 8000e60:	e728      	b.n	8000cb4 <__aeabi_fsub+0x74>
 8000e62:	2320      	movs	r3, #32
 8000e64:	1a1b      	subs	r3, r3, r0
 8000e66:	0032      	movs	r2, r6
 8000e68:	409e      	lsls	r6, r3
 8000e6a:	40c2      	lsrs	r2, r0
 8000e6c:	0030      	movs	r0, r6
 8000e6e:	1e43      	subs	r3, r0, #1
 8000e70:	4198      	sbcs	r0, r3
 8000e72:	4310      	orrs	r0, r2
 8000e74:	e70c      	b.n	8000c90 <__aeabi_fsub+0x50>
 8000e76:	2aff      	cmp	r2, #255	; 0xff
 8000e78:	d0db      	beq.n	8000e32 <__aeabi_fsub+0x1f2>
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	04db      	lsls	r3, r3, #19
 8000e80:	4318      	orrs	r0, r3
 8000e82:	4684      	mov	ip, r0
 8000e84:	2f1b      	cmp	r7, #27
 8000e86:	dd56      	ble.n	8000f36 <__aeabi_fsub+0x2f6>
 8000e88:	2001      	movs	r0, #1
 8000e8a:	000c      	movs	r4, r1
 8000e8c:	0015      	movs	r5, r2
 8000e8e:	1a30      	subs	r0, r6, r0
 8000e90:	e700      	b.n	8000c94 <__aeabi_fsub+0x54>
 8000e92:	4663      	mov	r3, ip
 8000e94:	1b9f      	subs	r7, r3, r6
 8000e96:	017b      	lsls	r3, r7, #5
 8000e98:	d43d      	bmi.n	8000f16 <__aeabi_fsub+0x2d6>
 8000e9a:	2f00      	cmp	r7, #0
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_fsub+0x260>
 8000e9e:	e6fe      	b.n	8000c9e <__aeabi_fsub+0x5e>
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e716      	b.n	8000cd6 <__aeabi_fsub+0x96>
 8000ea8:	0005      	movs	r5, r0
 8000eaa:	e7af      	b.n	8000e0c <__aeabi_fsub+0x1cc>
 8000eac:	0032      	movs	r2, r6
 8000eae:	4643      	mov	r3, r8
 8000eb0:	4641      	mov	r1, r8
 8000eb2:	40da      	lsrs	r2, r3
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	1a5b      	subs	r3, r3, r1
 8000eb8:	409e      	lsls	r6, r3
 8000eba:	0030      	movs	r0, r6
 8000ebc:	1e43      	subs	r3, r0, #1
 8000ebe:	4198      	sbcs	r0, r3
 8000ec0:	4310      	orrs	r0, r2
 8000ec2:	e721      	b.n	8000d08 <__aeabi_fsub+0xc8>
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d1a7      	bne.n	8000e18 <__aeabi_fsub+0x1d8>
 8000ec8:	4663      	mov	r3, ip
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d059      	beq.n	8000f82 <__aeabi_fsub+0x342>
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2e00      	cmp	r6, #0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_fsub+0x296>
 8000ed4:	e6ff      	b.n	8000cd6 <__aeabi_fsub+0x96>
 8000ed6:	0030      	movs	r0, r6
 8000ed8:	4460      	add	r0, ip
 8000eda:	0143      	lsls	r3, r0, #5
 8000edc:	d592      	bpl.n	8000e04 <__aeabi_fsub+0x1c4>
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <__aeabi_fsub+0x348>)
 8000ee0:	3501      	adds	r5, #1
 8000ee2:	4018      	ands	r0, r3
 8000ee4:	e78e      	b.n	8000e04 <__aeabi_fsub+0x1c4>
 8000ee6:	4663      	mov	r3, ip
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d047      	beq.n	8000f7c <__aeabi_fsub+0x33c>
 8000eec:	1e4b      	subs	r3, r1, #1
 8000eee:	2901      	cmp	r1, #1
 8000ef0:	d015      	beq.n	8000f1e <__aeabi_fsub+0x2de>
 8000ef2:	29ff      	cmp	r1, #255	; 0xff
 8000ef4:	d02b      	beq.n	8000f4e <__aeabi_fsub+0x30e>
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	e74e      	b.n	8000d98 <__aeabi_fsub+0x158>
 8000efa:	000c      	movs	r4, r1
 8000efc:	464b      	mov	r3, r9
 8000efe:	003d      	movs	r5, r7
 8000f00:	e784      	b.n	8000e0c <__aeabi_fsub+0x1cc>
 8000f02:	4662      	mov	r2, ip
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	d18b      	bne.n	8000e20 <__aeabi_fsub+0x1e0>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d192      	bne.n	8000e32 <__aeabi_fsub+0x1f2>
 8000f0c:	2780      	movs	r7, #128	; 0x80
 8000f0e:	2400      	movs	r4, #0
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	03ff      	lsls	r7, r7, #15
 8000f14:	e6df      	b.n	8000cd6 <__aeabi_fsub+0x96>
 8000f16:	4663      	mov	r3, ip
 8000f18:	000c      	movs	r4, r1
 8000f1a:	1af7      	subs	r7, r6, r3
 8000f1c:	e6bf      	b.n	8000c9e <__aeabi_fsub+0x5e>
 8000f1e:	0030      	movs	r0, r6
 8000f20:	4460      	add	r0, ip
 8000f22:	2501      	movs	r5, #1
 8000f24:	0143      	lsls	r3, r0, #5
 8000f26:	d400      	bmi.n	8000f2a <__aeabi_fsub+0x2ea>
 8000f28:	e76c      	b.n	8000e04 <__aeabi_fsub+0x1c4>
 8000f2a:	2502      	movs	r5, #2
 8000f2c:	e6f2      	b.n	8000d14 <__aeabi_fsub+0xd4>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	2501      	movs	r5, #1
 8000f32:	1b98      	subs	r0, r3, r6
 8000f34:	e6ae      	b.n	8000c94 <__aeabi_fsub+0x54>
 8000f36:	2320      	movs	r3, #32
 8000f38:	4664      	mov	r4, ip
 8000f3a:	4660      	mov	r0, ip
 8000f3c:	40fc      	lsrs	r4, r7
 8000f3e:	1bdf      	subs	r7, r3, r7
 8000f40:	40b8      	lsls	r0, r7
 8000f42:	1e43      	subs	r3, r0, #1
 8000f44:	4198      	sbcs	r0, r3
 8000f46:	4320      	orrs	r0, r4
 8000f48:	e79f      	b.n	8000e8a <__aeabi_fsub+0x24a>
 8000f4a:	0005      	movs	r5, r0
 8000f4c:	e75e      	b.n	8000e0c <__aeabi_fsub+0x1cc>
 8000f4e:	464b      	mov	r3, r9
 8000f50:	e771      	b.n	8000e36 <__aeabi_fsub+0x1f6>
 8000f52:	2320      	movs	r3, #32
 8000f54:	4665      	mov	r5, ip
 8000f56:	4660      	mov	r0, ip
 8000f58:	40cd      	lsrs	r5, r1
 8000f5a:	1a59      	subs	r1, r3, r1
 8000f5c:	4088      	lsls	r0, r1
 8000f5e:	1e43      	subs	r3, r0, #1
 8000f60:	4198      	sbcs	r0, r3
 8000f62:	4328      	orrs	r0, r5
 8000f64:	e71c      	b.n	8000da0 <__aeabi_fsub+0x160>
 8000f66:	4663      	mov	r3, ip
 8000f68:	000c      	movs	r4, r1
 8000f6a:	2501      	movs	r5, #1
 8000f6c:	1af0      	subs	r0, r6, r3
 8000f6e:	e691      	b.n	8000c94 <__aeabi_fsub+0x54>
 8000f70:	2e00      	cmp	r6, #0
 8000f72:	d095      	beq.n	8000ea0 <__aeabi_fsub+0x260>
 8000f74:	000c      	movs	r4, r1
 8000f76:	464f      	mov	r7, r9
 8000f78:	2200      	movs	r2, #0
 8000f7a:	e6ac      	b.n	8000cd6 <__aeabi_fsub+0x96>
 8000f7c:	464b      	mov	r3, r9
 8000f7e:	000d      	movs	r5, r1
 8000f80:	e744      	b.n	8000e0c <__aeabi_fsub+0x1cc>
 8000f82:	464f      	mov	r7, r9
 8000f84:	2200      	movs	r2, #0
 8000f86:	e6a6      	b.n	8000cd6 <__aeabi_fsub+0x96>
 8000f88:	fbffffff 	.word	0xfbffffff
 8000f8c:	7dffffff 	.word	0x7dffffff
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0x356>
 8000f94:	e736      	b.n	8000e04 <__aeabi_fsub+0x1c4>
 8000f96:	2400      	movs	r4, #0
 8000f98:	2700      	movs	r7, #0
 8000f9a:	e69c      	b.n	8000cd6 <__aeabi_fsub+0x96>

08000f9c <__aeabi_f2iz>:
 8000f9c:	0241      	lsls	r1, r0, #9
 8000f9e:	0042      	lsls	r2, r0, #1
 8000fa0:	0fc3      	lsrs	r3, r0, #31
 8000fa2:	0a49      	lsrs	r1, r1, #9
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	0e12      	lsrs	r2, r2, #24
 8000fa8:	2a7e      	cmp	r2, #126	; 0x7e
 8000faa:	dd03      	ble.n	8000fb4 <__aeabi_f2iz+0x18>
 8000fac:	2a9d      	cmp	r2, #157	; 0x9d
 8000fae:	dd02      	ble.n	8000fb6 <__aeabi_f2iz+0x1a>
 8000fb0:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <__aeabi_f2iz+0x3c>)
 8000fb2:	1898      	adds	r0, r3, r2
 8000fb4:	4770      	bx	lr
 8000fb6:	2080      	movs	r0, #128	; 0x80
 8000fb8:	0400      	lsls	r0, r0, #16
 8000fba:	4301      	orrs	r1, r0
 8000fbc:	2a95      	cmp	r2, #149	; 0x95
 8000fbe:	dc07      	bgt.n	8000fd0 <__aeabi_f2iz+0x34>
 8000fc0:	2096      	movs	r0, #150	; 0x96
 8000fc2:	1a82      	subs	r2, r0, r2
 8000fc4:	40d1      	lsrs	r1, r2
 8000fc6:	4248      	negs	r0, r1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f3      	bne.n	8000fb4 <__aeabi_f2iz+0x18>
 8000fcc:	0008      	movs	r0, r1
 8000fce:	e7f1      	b.n	8000fb4 <__aeabi_f2iz+0x18>
 8000fd0:	3a96      	subs	r2, #150	; 0x96
 8000fd2:	4091      	lsls	r1, r2
 8000fd4:	e7f7      	b.n	8000fc6 <__aeabi_f2iz+0x2a>
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	7fffffff 	.word	0x7fffffff

08000fdc <__aeabi_i2f>:
 8000fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	d013      	beq.n	800100a <__aeabi_i2f+0x2e>
 8000fe2:	17c3      	asrs	r3, r0, #31
 8000fe4:	18c6      	adds	r6, r0, r3
 8000fe6:	405e      	eors	r6, r3
 8000fe8:	0fc4      	lsrs	r4, r0, #31
 8000fea:	0030      	movs	r0, r6
 8000fec:	f001 fb2a 	bl	8002644 <__clzsi2>
 8000ff0:	239e      	movs	r3, #158	; 0x9e
 8000ff2:	0005      	movs	r5, r0
 8000ff4:	1a1b      	subs	r3, r3, r0
 8000ff6:	2b96      	cmp	r3, #150	; 0x96
 8000ff8:	dc0f      	bgt.n	800101a <__aeabi_i2f+0x3e>
 8000ffa:	2808      	cmp	r0, #8
 8000ffc:	dd01      	ble.n	8001002 <__aeabi_i2f+0x26>
 8000ffe:	3d08      	subs	r5, #8
 8001000:	40ae      	lsls	r6, r5
 8001002:	0276      	lsls	r6, r6, #9
 8001004:	0a76      	lsrs	r6, r6, #9
 8001006:	b2d8      	uxtb	r0, r3
 8001008:	e002      	b.n	8001010 <__aeabi_i2f+0x34>
 800100a:	2400      	movs	r4, #0
 800100c:	2000      	movs	r0, #0
 800100e:	2600      	movs	r6, #0
 8001010:	05c0      	lsls	r0, r0, #23
 8001012:	4330      	orrs	r0, r6
 8001014:	07e4      	lsls	r4, r4, #31
 8001016:	4320      	orrs	r0, r4
 8001018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800101a:	2b99      	cmp	r3, #153	; 0x99
 800101c:	dd0c      	ble.n	8001038 <__aeabi_i2f+0x5c>
 800101e:	2205      	movs	r2, #5
 8001020:	0031      	movs	r1, r6
 8001022:	1a12      	subs	r2, r2, r0
 8001024:	40d1      	lsrs	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	0001      	movs	r1, r0
 800102a:	0030      	movs	r0, r6
 800102c:	311b      	adds	r1, #27
 800102e:	4088      	lsls	r0, r1
 8001030:	1e41      	subs	r1, r0, #1
 8001032:	4188      	sbcs	r0, r1
 8001034:	4302      	orrs	r2, r0
 8001036:	0016      	movs	r6, r2
 8001038:	2d05      	cmp	r5, #5
 800103a:	dc12      	bgt.n	8001062 <__aeabi_i2f+0x86>
 800103c:	0031      	movs	r1, r6
 800103e:	4f0d      	ldr	r7, [pc, #52]	; (8001074 <__aeabi_i2f+0x98>)
 8001040:	4039      	ands	r1, r7
 8001042:	0772      	lsls	r2, r6, #29
 8001044:	d009      	beq.n	800105a <__aeabi_i2f+0x7e>
 8001046:	200f      	movs	r0, #15
 8001048:	4030      	ands	r0, r6
 800104a:	2804      	cmp	r0, #4
 800104c:	d005      	beq.n	800105a <__aeabi_i2f+0x7e>
 800104e:	3104      	adds	r1, #4
 8001050:	014a      	lsls	r2, r1, #5
 8001052:	d502      	bpl.n	800105a <__aeabi_i2f+0x7e>
 8001054:	239f      	movs	r3, #159	; 0x9f
 8001056:	4039      	ands	r1, r7
 8001058:	1b5b      	subs	r3, r3, r5
 800105a:	0189      	lsls	r1, r1, #6
 800105c:	0a4e      	lsrs	r6, r1, #9
 800105e:	b2d8      	uxtb	r0, r3
 8001060:	e7d6      	b.n	8001010 <__aeabi_i2f+0x34>
 8001062:	1f6a      	subs	r2, r5, #5
 8001064:	4096      	lsls	r6, r2
 8001066:	0031      	movs	r1, r6
 8001068:	4f02      	ldr	r7, [pc, #8]	; (8001074 <__aeabi_i2f+0x98>)
 800106a:	4039      	ands	r1, r7
 800106c:	0772      	lsls	r2, r6, #29
 800106e:	d0f4      	beq.n	800105a <__aeabi_i2f+0x7e>
 8001070:	e7e9      	b.n	8001046 <__aeabi_i2f+0x6a>
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	fbffffff 	.word	0xfbffffff

08001078 <__aeabi_ui2f>:
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	1e05      	subs	r5, r0, #0
 800107c:	d00e      	beq.n	800109c <__aeabi_ui2f+0x24>
 800107e:	f001 fae1 	bl	8002644 <__clzsi2>
 8001082:	239e      	movs	r3, #158	; 0x9e
 8001084:	0004      	movs	r4, r0
 8001086:	1a1b      	subs	r3, r3, r0
 8001088:	2b96      	cmp	r3, #150	; 0x96
 800108a:	dc0c      	bgt.n	80010a6 <__aeabi_ui2f+0x2e>
 800108c:	2808      	cmp	r0, #8
 800108e:	dd01      	ble.n	8001094 <__aeabi_ui2f+0x1c>
 8001090:	3c08      	subs	r4, #8
 8001092:	40a5      	lsls	r5, r4
 8001094:	026d      	lsls	r5, r5, #9
 8001096:	0a6d      	lsrs	r5, r5, #9
 8001098:	b2d8      	uxtb	r0, r3
 800109a:	e001      	b.n	80010a0 <__aeabi_ui2f+0x28>
 800109c:	2000      	movs	r0, #0
 800109e:	2500      	movs	r5, #0
 80010a0:	05c0      	lsls	r0, r0, #23
 80010a2:	4328      	orrs	r0, r5
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
 80010a6:	2b99      	cmp	r3, #153	; 0x99
 80010a8:	dd09      	ble.n	80010be <__aeabi_ui2f+0x46>
 80010aa:	0002      	movs	r2, r0
 80010ac:	0029      	movs	r1, r5
 80010ae:	321b      	adds	r2, #27
 80010b0:	4091      	lsls	r1, r2
 80010b2:	1e4a      	subs	r2, r1, #1
 80010b4:	4191      	sbcs	r1, r2
 80010b6:	2205      	movs	r2, #5
 80010b8:	1a12      	subs	r2, r2, r0
 80010ba:	40d5      	lsrs	r5, r2
 80010bc:	430d      	orrs	r5, r1
 80010be:	2c05      	cmp	r4, #5
 80010c0:	dc12      	bgt.n	80010e8 <__aeabi_ui2f+0x70>
 80010c2:	0029      	movs	r1, r5
 80010c4:	4e0c      	ldr	r6, [pc, #48]	; (80010f8 <__aeabi_ui2f+0x80>)
 80010c6:	4031      	ands	r1, r6
 80010c8:	076a      	lsls	r2, r5, #29
 80010ca:	d009      	beq.n	80010e0 <__aeabi_ui2f+0x68>
 80010cc:	200f      	movs	r0, #15
 80010ce:	4028      	ands	r0, r5
 80010d0:	2804      	cmp	r0, #4
 80010d2:	d005      	beq.n	80010e0 <__aeabi_ui2f+0x68>
 80010d4:	3104      	adds	r1, #4
 80010d6:	014a      	lsls	r2, r1, #5
 80010d8:	d502      	bpl.n	80010e0 <__aeabi_ui2f+0x68>
 80010da:	239f      	movs	r3, #159	; 0x9f
 80010dc:	4031      	ands	r1, r6
 80010de:	1b1b      	subs	r3, r3, r4
 80010e0:	0189      	lsls	r1, r1, #6
 80010e2:	0a4d      	lsrs	r5, r1, #9
 80010e4:	b2d8      	uxtb	r0, r3
 80010e6:	e7db      	b.n	80010a0 <__aeabi_ui2f+0x28>
 80010e8:	1f62      	subs	r2, r4, #5
 80010ea:	4095      	lsls	r5, r2
 80010ec:	0029      	movs	r1, r5
 80010ee:	4e02      	ldr	r6, [pc, #8]	; (80010f8 <__aeabi_ui2f+0x80>)
 80010f0:	4031      	ands	r1, r6
 80010f2:	076a      	lsls	r2, r5, #29
 80010f4:	d0f4      	beq.n	80010e0 <__aeabi_ui2f+0x68>
 80010f6:	e7e9      	b.n	80010cc <__aeabi_ui2f+0x54>
 80010f8:	fbffffff 	.word	0xfbffffff

080010fc <__aeabi_dadd>:
 80010fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fe:	464f      	mov	r7, r9
 8001100:	4646      	mov	r6, r8
 8001102:	46d6      	mov	lr, sl
 8001104:	000d      	movs	r5, r1
 8001106:	0004      	movs	r4, r0
 8001108:	b5c0      	push	{r6, r7, lr}
 800110a:	001f      	movs	r7, r3
 800110c:	0011      	movs	r1, r2
 800110e:	0328      	lsls	r0, r5, #12
 8001110:	0f62      	lsrs	r2, r4, #29
 8001112:	0a40      	lsrs	r0, r0, #9
 8001114:	4310      	orrs	r0, r2
 8001116:	007a      	lsls	r2, r7, #1
 8001118:	0d52      	lsrs	r2, r2, #21
 800111a:	00e3      	lsls	r3, r4, #3
 800111c:	033c      	lsls	r4, r7, #12
 800111e:	4691      	mov	r9, r2
 8001120:	0a64      	lsrs	r4, r4, #9
 8001122:	0ffa      	lsrs	r2, r7, #31
 8001124:	0f4f      	lsrs	r7, r1, #29
 8001126:	006e      	lsls	r6, r5, #1
 8001128:	4327      	orrs	r7, r4
 800112a:	4692      	mov	sl, r2
 800112c:	46b8      	mov	r8, r7
 800112e:	0d76      	lsrs	r6, r6, #21
 8001130:	0fed      	lsrs	r5, r5, #31
 8001132:	00c9      	lsls	r1, r1, #3
 8001134:	4295      	cmp	r5, r2
 8001136:	d100      	bne.n	800113a <__aeabi_dadd+0x3e>
 8001138:	e099      	b.n	800126e <__aeabi_dadd+0x172>
 800113a:	464c      	mov	r4, r9
 800113c:	1b34      	subs	r4, r6, r4
 800113e:	46a4      	mov	ip, r4
 8001140:	2c00      	cmp	r4, #0
 8001142:	dc00      	bgt.n	8001146 <__aeabi_dadd+0x4a>
 8001144:	e07c      	b.n	8001240 <__aeabi_dadd+0x144>
 8001146:	464a      	mov	r2, r9
 8001148:	2a00      	cmp	r2, #0
 800114a:	d100      	bne.n	800114e <__aeabi_dadd+0x52>
 800114c:	e0b8      	b.n	80012c0 <__aeabi_dadd+0x1c4>
 800114e:	4ac5      	ldr	r2, [pc, #788]	; (8001464 <__aeabi_dadd+0x368>)
 8001150:	4296      	cmp	r6, r2
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x5a>
 8001154:	e11c      	b.n	8001390 <__aeabi_dadd+0x294>
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	003c      	movs	r4, r7
 800115a:	0412      	lsls	r2, r2, #16
 800115c:	4314      	orrs	r4, r2
 800115e:	46a0      	mov	r8, r4
 8001160:	4662      	mov	r2, ip
 8001162:	2a38      	cmp	r2, #56	; 0x38
 8001164:	dd00      	ble.n	8001168 <__aeabi_dadd+0x6c>
 8001166:	e161      	b.n	800142c <__aeabi_dadd+0x330>
 8001168:	2a1f      	cmp	r2, #31
 800116a:	dd00      	ble.n	800116e <__aeabi_dadd+0x72>
 800116c:	e1cc      	b.n	8001508 <__aeabi_dadd+0x40c>
 800116e:	4664      	mov	r4, ip
 8001170:	2220      	movs	r2, #32
 8001172:	1b12      	subs	r2, r2, r4
 8001174:	4644      	mov	r4, r8
 8001176:	4094      	lsls	r4, r2
 8001178:	000f      	movs	r7, r1
 800117a:	46a1      	mov	r9, r4
 800117c:	4664      	mov	r4, ip
 800117e:	4091      	lsls	r1, r2
 8001180:	40e7      	lsrs	r7, r4
 8001182:	464c      	mov	r4, r9
 8001184:	1e4a      	subs	r2, r1, #1
 8001186:	4191      	sbcs	r1, r2
 8001188:	433c      	orrs	r4, r7
 800118a:	4642      	mov	r2, r8
 800118c:	4321      	orrs	r1, r4
 800118e:	4664      	mov	r4, ip
 8001190:	40e2      	lsrs	r2, r4
 8001192:	1a80      	subs	r0, r0, r2
 8001194:	1a5c      	subs	r4, r3, r1
 8001196:	42a3      	cmp	r3, r4
 8001198:	419b      	sbcs	r3, r3
 800119a:	425f      	negs	r7, r3
 800119c:	1bc7      	subs	r7, r0, r7
 800119e:	023b      	lsls	r3, r7, #8
 80011a0:	d400      	bmi.n	80011a4 <__aeabi_dadd+0xa8>
 80011a2:	e0d0      	b.n	8001346 <__aeabi_dadd+0x24a>
 80011a4:	027f      	lsls	r7, r7, #9
 80011a6:	0a7f      	lsrs	r7, r7, #9
 80011a8:	2f00      	cmp	r7, #0
 80011aa:	d100      	bne.n	80011ae <__aeabi_dadd+0xb2>
 80011ac:	e0ff      	b.n	80013ae <__aeabi_dadd+0x2b2>
 80011ae:	0038      	movs	r0, r7
 80011b0:	f001 fa48 	bl	8002644 <__clzsi2>
 80011b4:	0001      	movs	r1, r0
 80011b6:	3908      	subs	r1, #8
 80011b8:	2320      	movs	r3, #32
 80011ba:	0022      	movs	r2, r4
 80011bc:	1a5b      	subs	r3, r3, r1
 80011be:	408f      	lsls	r7, r1
 80011c0:	40da      	lsrs	r2, r3
 80011c2:	408c      	lsls	r4, r1
 80011c4:	4317      	orrs	r7, r2
 80011c6:	42b1      	cmp	r1, r6
 80011c8:	da00      	bge.n	80011cc <__aeabi_dadd+0xd0>
 80011ca:	e0ff      	b.n	80013cc <__aeabi_dadd+0x2d0>
 80011cc:	1b89      	subs	r1, r1, r6
 80011ce:	1c4b      	adds	r3, r1, #1
 80011d0:	2b1f      	cmp	r3, #31
 80011d2:	dd00      	ble.n	80011d6 <__aeabi_dadd+0xda>
 80011d4:	e0a8      	b.n	8001328 <__aeabi_dadd+0x22c>
 80011d6:	2220      	movs	r2, #32
 80011d8:	0039      	movs	r1, r7
 80011da:	1ad2      	subs	r2, r2, r3
 80011dc:	0020      	movs	r0, r4
 80011de:	4094      	lsls	r4, r2
 80011e0:	4091      	lsls	r1, r2
 80011e2:	40d8      	lsrs	r0, r3
 80011e4:	1e62      	subs	r2, r4, #1
 80011e6:	4194      	sbcs	r4, r2
 80011e8:	40df      	lsrs	r7, r3
 80011ea:	2600      	movs	r6, #0
 80011ec:	4301      	orrs	r1, r0
 80011ee:	430c      	orrs	r4, r1
 80011f0:	0763      	lsls	r3, r4, #29
 80011f2:	d009      	beq.n	8001208 <__aeabi_dadd+0x10c>
 80011f4:	230f      	movs	r3, #15
 80011f6:	4023      	ands	r3, r4
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d005      	beq.n	8001208 <__aeabi_dadd+0x10c>
 80011fc:	1d23      	adds	r3, r4, #4
 80011fe:	42a3      	cmp	r3, r4
 8001200:	41a4      	sbcs	r4, r4
 8001202:	4264      	negs	r4, r4
 8001204:	193f      	adds	r7, r7, r4
 8001206:	001c      	movs	r4, r3
 8001208:	023b      	lsls	r3, r7, #8
 800120a:	d400      	bmi.n	800120e <__aeabi_dadd+0x112>
 800120c:	e09e      	b.n	800134c <__aeabi_dadd+0x250>
 800120e:	4b95      	ldr	r3, [pc, #596]	; (8001464 <__aeabi_dadd+0x368>)
 8001210:	3601      	adds	r6, #1
 8001212:	429e      	cmp	r6, r3
 8001214:	d100      	bne.n	8001218 <__aeabi_dadd+0x11c>
 8001216:	e0b7      	b.n	8001388 <__aeabi_dadd+0x28c>
 8001218:	4a93      	ldr	r2, [pc, #588]	; (8001468 <__aeabi_dadd+0x36c>)
 800121a:	08e4      	lsrs	r4, r4, #3
 800121c:	4017      	ands	r7, r2
 800121e:	077b      	lsls	r3, r7, #29
 8001220:	0571      	lsls	r1, r6, #21
 8001222:	027f      	lsls	r7, r7, #9
 8001224:	4323      	orrs	r3, r4
 8001226:	0b3f      	lsrs	r7, r7, #12
 8001228:	0d4a      	lsrs	r2, r1, #21
 800122a:	0512      	lsls	r2, r2, #20
 800122c:	433a      	orrs	r2, r7
 800122e:	07ed      	lsls	r5, r5, #31
 8001230:	432a      	orrs	r2, r5
 8001232:	0018      	movs	r0, r3
 8001234:	0011      	movs	r1, r2
 8001236:	bce0      	pop	{r5, r6, r7}
 8001238:	46ba      	mov	sl, r7
 800123a:	46b1      	mov	r9, r6
 800123c:	46a8      	mov	r8, r5
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001240:	2c00      	cmp	r4, #0
 8001242:	d04b      	beq.n	80012dc <__aeabi_dadd+0x1e0>
 8001244:	464c      	mov	r4, r9
 8001246:	1ba4      	subs	r4, r4, r6
 8001248:	46a4      	mov	ip, r4
 800124a:	2e00      	cmp	r6, #0
 800124c:	d000      	beq.n	8001250 <__aeabi_dadd+0x154>
 800124e:	e123      	b.n	8001498 <__aeabi_dadd+0x39c>
 8001250:	0004      	movs	r4, r0
 8001252:	431c      	orrs	r4, r3
 8001254:	d100      	bne.n	8001258 <__aeabi_dadd+0x15c>
 8001256:	e1af      	b.n	80015b8 <__aeabi_dadd+0x4bc>
 8001258:	4662      	mov	r2, ip
 800125a:	1e54      	subs	r4, r2, #1
 800125c:	2a01      	cmp	r2, #1
 800125e:	d100      	bne.n	8001262 <__aeabi_dadd+0x166>
 8001260:	e215      	b.n	800168e <__aeabi_dadd+0x592>
 8001262:	4d80      	ldr	r5, [pc, #512]	; (8001464 <__aeabi_dadd+0x368>)
 8001264:	45ac      	cmp	ip, r5
 8001266:	d100      	bne.n	800126a <__aeabi_dadd+0x16e>
 8001268:	e1c8      	b.n	80015fc <__aeabi_dadd+0x500>
 800126a:	46a4      	mov	ip, r4
 800126c:	e11b      	b.n	80014a6 <__aeabi_dadd+0x3aa>
 800126e:	464a      	mov	r2, r9
 8001270:	1ab2      	subs	r2, r6, r2
 8001272:	4694      	mov	ip, r2
 8001274:	2a00      	cmp	r2, #0
 8001276:	dc00      	bgt.n	800127a <__aeabi_dadd+0x17e>
 8001278:	e0ac      	b.n	80013d4 <__aeabi_dadd+0x2d8>
 800127a:	464a      	mov	r2, r9
 800127c:	2a00      	cmp	r2, #0
 800127e:	d043      	beq.n	8001308 <__aeabi_dadd+0x20c>
 8001280:	4a78      	ldr	r2, [pc, #480]	; (8001464 <__aeabi_dadd+0x368>)
 8001282:	4296      	cmp	r6, r2
 8001284:	d100      	bne.n	8001288 <__aeabi_dadd+0x18c>
 8001286:	e1af      	b.n	80015e8 <__aeabi_dadd+0x4ec>
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	003c      	movs	r4, r7
 800128c:	0412      	lsls	r2, r2, #16
 800128e:	4314      	orrs	r4, r2
 8001290:	46a0      	mov	r8, r4
 8001292:	4662      	mov	r2, ip
 8001294:	2a38      	cmp	r2, #56	; 0x38
 8001296:	dc67      	bgt.n	8001368 <__aeabi_dadd+0x26c>
 8001298:	2a1f      	cmp	r2, #31
 800129a:	dc00      	bgt.n	800129e <__aeabi_dadd+0x1a2>
 800129c:	e15f      	b.n	800155e <__aeabi_dadd+0x462>
 800129e:	4647      	mov	r7, r8
 80012a0:	3a20      	subs	r2, #32
 80012a2:	40d7      	lsrs	r7, r2
 80012a4:	4662      	mov	r2, ip
 80012a6:	2a20      	cmp	r2, #32
 80012a8:	d005      	beq.n	80012b6 <__aeabi_dadd+0x1ba>
 80012aa:	4664      	mov	r4, ip
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	1b12      	subs	r2, r2, r4
 80012b0:	4644      	mov	r4, r8
 80012b2:	4094      	lsls	r4, r2
 80012b4:	4321      	orrs	r1, r4
 80012b6:	1e4a      	subs	r2, r1, #1
 80012b8:	4191      	sbcs	r1, r2
 80012ba:	000c      	movs	r4, r1
 80012bc:	433c      	orrs	r4, r7
 80012be:	e057      	b.n	8001370 <__aeabi_dadd+0x274>
 80012c0:	003a      	movs	r2, r7
 80012c2:	430a      	orrs	r2, r1
 80012c4:	d100      	bne.n	80012c8 <__aeabi_dadd+0x1cc>
 80012c6:	e105      	b.n	80014d4 <__aeabi_dadd+0x3d8>
 80012c8:	0022      	movs	r2, r4
 80012ca:	3a01      	subs	r2, #1
 80012cc:	2c01      	cmp	r4, #1
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dadd+0x1d6>
 80012d0:	e182      	b.n	80015d8 <__aeabi_dadd+0x4dc>
 80012d2:	4c64      	ldr	r4, [pc, #400]	; (8001464 <__aeabi_dadd+0x368>)
 80012d4:	45a4      	cmp	ip, r4
 80012d6:	d05b      	beq.n	8001390 <__aeabi_dadd+0x294>
 80012d8:	4694      	mov	ip, r2
 80012da:	e741      	b.n	8001160 <__aeabi_dadd+0x64>
 80012dc:	4c63      	ldr	r4, [pc, #396]	; (800146c <__aeabi_dadd+0x370>)
 80012de:	1c77      	adds	r7, r6, #1
 80012e0:	4227      	tst	r7, r4
 80012e2:	d000      	beq.n	80012e6 <__aeabi_dadd+0x1ea>
 80012e4:	e0c4      	b.n	8001470 <__aeabi_dadd+0x374>
 80012e6:	0004      	movs	r4, r0
 80012e8:	431c      	orrs	r4, r3
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x1f4>
 80012ee:	e169      	b.n	80015c4 <__aeabi_dadd+0x4c8>
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x1fa>
 80012f4:	e1bf      	b.n	8001676 <__aeabi_dadd+0x57a>
 80012f6:	4644      	mov	r4, r8
 80012f8:	430c      	orrs	r4, r1
 80012fa:	d000      	beq.n	80012fe <__aeabi_dadd+0x202>
 80012fc:	e1d0      	b.n	80016a0 <__aeabi_dadd+0x5a4>
 80012fe:	0742      	lsls	r2, r0, #29
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	4313      	orrs	r3, r2
 8001304:	08c0      	lsrs	r0, r0, #3
 8001306:	e029      	b.n	800135c <__aeabi_dadd+0x260>
 8001308:	003a      	movs	r2, r7
 800130a:	430a      	orrs	r2, r1
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x214>
 800130e:	e170      	b.n	80015f2 <__aeabi_dadd+0x4f6>
 8001310:	4662      	mov	r2, ip
 8001312:	4664      	mov	r4, ip
 8001314:	3a01      	subs	r2, #1
 8001316:	2c01      	cmp	r4, #1
 8001318:	d100      	bne.n	800131c <__aeabi_dadd+0x220>
 800131a:	e0e0      	b.n	80014de <__aeabi_dadd+0x3e2>
 800131c:	4c51      	ldr	r4, [pc, #324]	; (8001464 <__aeabi_dadd+0x368>)
 800131e:	45a4      	cmp	ip, r4
 8001320:	d100      	bne.n	8001324 <__aeabi_dadd+0x228>
 8001322:	e161      	b.n	80015e8 <__aeabi_dadd+0x4ec>
 8001324:	4694      	mov	ip, r2
 8001326:	e7b4      	b.n	8001292 <__aeabi_dadd+0x196>
 8001328:	003a      	movs	r2, r7
 800132a:	391f      	subs	r1, #31
 800132c:	40ca      	lsrs	r2, r1
 800132e:	0011      	movs	r1, r2
 8001330:	2b20      	cmp	r3, #32
 8001332:	d003      	beq.n	800133c <__aeabi_dadd+0x240>
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	409f      	lsls	r7, r3
 800133a:	433c      	orrs	r4, r7
 800133c:	1e63      	subs	r3, r4, #1
 800133e:	419c      	sbcs	r4, r3
 8001340:	2700      	movs	r7, #0
 8001342:	2600      	movs	r6, #0
 8001344:	430c      	orrs	r4, r1
 8001346:	0763      	lsls	r3, r4, #29
 8001348:	d000      	beq.n	800134c <__aeabi_dadd+0x250>
 800134a:	e753      	b.n	80011f4 <__aeabi_dadd+0xf8>
 800134c:	46b4      	mov	ip, r6
 800134e:	08e4      	lsrs	r4, r4, #3
 8001350:	077b      	lsls	r3, r7, #29
 8001352:	4323      	orrs	r3, r4
 8001354:	08f8      	lsrs	r0, r7, #3
 8001356:	4a43      	ldr	r2, [pc, #268]	; (8001464 <__aeabi_dadd+0x368>)
 8001358:	4594      	cmp	ip, r2
 800135a:	d01d      	beq.n	8001398 <__aeabi_dadd+0x29c>
 800135c:	4662      	mov	r2, ip
 800135e:	0307      	lsls	r7, r0, #12
 8001360:	0552      	lsls	r2, r2, #21
 8001362:	0b3f      	lsrs	r7, r7, #12
 8001364:	0d52      	lsrs	r2, r2, #21
 8001366:	e760      	b.n	800122a <__aeabi_dadd+0x12e>
 8001368:	4644      	mov	r4, r8
 800136a:	430c      	orrs	r4, r1
 800136c:	1e62      	subs	r2, r4, #1
 800136e:	4194      	sbcs	r4, r2
 8001370:	18e4      	adds	r4, r4, r3
 8001372:	429c      	cmp	r4, r3
 8001374:	419b      	sbcs	r3, r3
 8001376:	425f      	negs	r7, r3
 8001378:	183f      	adds	r7, r7, r0
 800137a:	023b      	lsls	r3, r7, #8
 800137c:	d5e3      	bpl.n	8001346 <__aeabi_dadd+0x24a>
 800137e:	4b39      	ldr	r3, [pc, #228]	; (8001464 <__aeabi_dadd+0x368>)
 8001380:	3601      	adds	r6, #1
 8001382:	429e      	cmp	r6, r3
 8001384:	d000      	beq.n	8001388 <__aeabi_dadd+0x28c>
 8001386:	e0b5      	b.n	80014f4 <__aeabi_dadd+0x3f8>
 8001388:	0032      	movs	r2, r6
 800138a:	2700      	movs	r7, #0
 800138c:	2300      	movs	r3, #0
 800138e:	e74c      	b.n	800122a <__aeabi_dadd+0x12e>
 8001390:	0742      	lsls	r2, r0, #29
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	4313      	orrs	r3, r2
 8001396:	08c0      	lsrs	r0, r0, #3
 8001398:	001a      	movs	r2, r3
 800139a:	4302      	orrs	r2, r0
 800139c:	d100      	bne.n	80013a0 <__aeabi_dadd+0x2a4>
 800139e:	e1e1      	b.n	8001764 <__aeabi_dadd+0x668>
 80013a0:	2780      	movs	r7, #128	; 0x80
 80013a2:	033f      	lsls	r7, r7, #12
 80013a4:	4307      	orrs	r7, r0
 80013a6:	033f      	lsls	r7, r7, #12
 80013a8:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <__aeabi_dadd+0x368>)
 80013aa:	0b3f      	lsrs	r7, r7, #12
 80013ac:	e73d      	b.n	800122a <__aeabi_dadd+0x12e>
 80013ae:	0020      	movs	r0, r4
 80013b0:	f001 f948 	bl	8002644 <__clzsi2>
 80013b4:	0001      	movs	r1, r0
 80013b6:	3118      	adds	r1, #24
 80013b8:	291f      	cmp	r1, #31
 80013ba:	dc00      	bgt.n	80013be <__aeabi_dadd+0x2c2>
 80013bc:	e6fc      	b.n	80011b8 <__aeabi_dadd+0xbc>
 80013be:	3808      	subs	r0, #8
 80013c0:	4084      	lsls	r4, r0
 80013c2:	0027      	movs	r7, r4
 80013c4:	2400      	movs	r4, #0
 80013c6:	42b1      	cmp	r1, r6
 80013c8:	db00      	blt.n	80013cc <__aeabi_dadd+0x2d0>
 80013ca:	e6ff      	b.n	80011cc <__aeabi_dadd+0xd0>
 80013cc:	4a26      	ldr	r2, [pc, #152]	; (8001468 <__aeabi_dadd+0x36c>)
 80013ce:	1a76      	subs	r6, r6, r1
 80013d0:	4017      	ands	r7, r2
 80013d2:	e70d      	b.n	80011f0 <__aeabi_dadd+0xf4>
 80013d4:	2a00      	cmp	r2, #0
 80013d6:	d02f      	beq.n	8001438 <__aeabi_dadd+0x33c>
 80013d8:	464a      	mov	r2, r9
 80013da:	1b92      	subs	r2, r2, r6
 80013dc:	4694      	mov	ip, r2
 80013de:	2e00      	cmp	r6, #0
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x2e8>
 80013e2:	e0ad      	b.n	8001540 <__aeabi_dadd+0x444>
 80013e4:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <__aeabi_dadd+0x368>)
 80013e6:	4591      	cmp	r9, r2
 80013e8:	d100      	bne.n	80013ec <__aeabi_dadd+0x2f0>
 80013ea:	e10f      	b.n	800160c <__aeabi_dadd+0x510>
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	0412      	lsls	r2, r2, #16
 80013f0:	4310      	orrs	r0, r2
 80013f2:	4662      	mov	r2, ip
 80013f4:	2a38      	cmp	r2, #56	; 0x38
 80013f6:	dd00      	ble.n	80013fa <__aeabi_dadd+0x2fe>
 80013f8:	e10f      	b.n	800161a <__aeabi_dadd+0x51e>
 80013fa:	2a1f      	cmp	r2, #31
 80013fc:	dd00      	ble.n	8001400 <__aeabi_dadd+0x304>
 80013fe:	e180      	b.n	8001702 <__aeabi_dadd+0x606>
 8001400:	4664      	mov	r4, ip
 8001402:	2220      	movs	r2, #32
 8001404:	001e      	movs	r6, r3
 8001406:	1b12      	subs	r2, r2, r4
 8001408:	4667      	mov	r7, ip
 800140a:	0004      	movs	r4, r0
 800140c:	4093      	lsls	r3, r2
 800140e:	4094      	lsls	r4, r2
 8001410:	40fe      	lsrs	r6, r7
 8001412:	1e5a      	subs	r2, r3, #1
 8001414:	4193      	sbcs	r3, r2
 8001416:	40f8      	lsrs	r0, r7
 8001418:	4334      	orrs	r4, r6
 800141a:	431c      	orrs	r4, r3
 800141c:	4480      	add	r8, r0
 800141e:	1864      	adds	r4, r4, r1
 8001420:	428c      	cmp	r4, r1
 8001422:	41bf      	sbcs	r7, r7
 8001424:	427f      	negs	r7, r7
 8001426:	464e      	mov	r6, r9
 8001428:	4447      	add	r7, r8
 800142a:	e7a6      	b.n	800137a <__aeabi_dadd+0x27e>
 800142c:	4642      	mov	r2, r8
 800142e:	430a      	orrs	r2, r1
 8001430:	0011      	movs	r1, r2
 8001432:	1e4a      	subs	r2, r1, #1
 8001434:	4191      	sbcs	r1, r2
 8001436:	e6ad      	b.n	8001194 <__aeabi_dadd+0x98>
 8001438:	4c0c      	ldr	r4, [pc, #48]	; (800146c <__aeabi_dadd+0x370>)
 800143a:	1c72      	adds	r2, r6, #1
 800143c:	4222      	tst	r2, r4
 800143e:	d000      	beq.n	8001442 <__aeabi_dadd+0x346>
 8001440:	e0a1      	b.n	8001586 <__aeabi_dadd+0x48a>
 8001442:	0002      	movs	r2, r0
 8001444:	431a      	orrs	r2, r3
 8001446:	2e00      	cmp	r6, #0
 8001448:	d000      	beq.n	800144c <__aeabi_dadd+0x350>
 800144a:	e0fa      	b.n	8001642 <__aeabi_dadd+0x546>
 800144c:	2a00      	cmp	r2, #0
 800144e:	d100      	bne.n	8001452 <__aeabi_dadd+0x356>
 8001450:	e145      	b.n	80016de <__aeabi_dadd+0x5e2>
 8001452:	003a      	movs	r2, r7
 8001454:	430a      	orrs	r2, r1
 8001456:	d000      	beq.n	800145a <__aeabi_dadd+0x35e>
 8001458:	e146      	b.n	80016e8 <__aeabi_dadd+0x5ec>
 800145a:	0742      	lsls	r2, r0, #29
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	4313      	orrs	r3, r2
 8001460:	08c0      	lsrs	r0, r0, #3
 8001462:	e77b      	b.n	800135c <__aeabi_dadd+0x260>
 8001464:	000007ff 	.word	0x000007ff
 8001468:	ff7fffff 	.word	0xff7fffff
 800146c:	000007fe 	.word	0x000007fe
 8001470:	4647      	mov	r7, r8
 8001472:	1a5c      	subs	r4, r3, r1
 8001474:	1bc2      	subs	r2, r0, r7
 8001476:	42a3      	cmp	r3, r4
 8001478:	41bf      	sbcs	r7, r7
 800147a:	427f      	negs	r7, r7
 800147c:	46b9      	mov	r9, r7
 800147e:	0017      	movs	r7, r2
 8001480:	464a      	mov	r2, r9
 8001482:	1abf      	subs	r7, r7, r2
 8001484:	023a      	lsls	r2, r7, #8
 8001486:	d500      	bpl.n	800148a <__aeabi_dadd+0x38e>
 8001488:	e08d      	b.n	80015a6 <__aeabi_dadd+0x4aa>
 800148a:	0023      	movs	r3, r4
 800148c:	433b      	orrs	r3, r7
 800148e:	d000      	beq.n	8001492 <__aeabi_dadd+0x396>
 8001490:	e68a      	b.n	80011a8 <__aeabi_dadd+0xac>
 8001492:	2000      	movs	r0, #0
 8001494:	2500      	movs	r5, #0
 8001496:	e761      	b.n	800135c <__aeabi_dadd+0x260>
 8001498:	4cb4      	ldr	r4, [pc, #720]	; (800176c <__aeabi_dadd+0x670>)
 800149a:	45a1      	cmp	r9, r4
 800149c:	d100      	bne.n	80014a0 <__aeabi_dadd+0x3a4>
 800149e:	e0ad      	b.n	80015fc <__aeabi_dadd+0x500>
 80014a0:	2480      	movs	r4, #128	; 0x80
 80014a2:	0424      	lsls	r4, r4, #16
 80014a4:	4320      	orrs	r0, r4
 80014a6:	4664      	mov	r4, ip
 80014a8:	2c38      	cmp	r4, #56	; 0x38
 80014aa:	dc3d      	bgt.n	8001528 <__aeabi_dadd+0x42c>
 80014ac:	4662      	mov	r2, ip
 80014ae:	2c1f      	cmp	r4, #31
 80014b0:	dd00      	ble.n	80014b4 <__aeabi_dadd+0x3b8>
 80014b2:	e0b7      	b.n	8001624 <__aeabi_dadd+0x528>
 80014b4:	2520      	movs	r5, #32
 80014b6:	001e      	movs	r6, r3
 80014b8:	1b2d      	subs	r5, r5, r4
 80014ba:	0004      	movs	r4, r0
 80014bc:	40ab      	lsls	r3, r5
 80014be:	40ac      	lsls	r4, r5
 80014c0:	40d6      	lsrs	r6, r2
 80014c2:	40d0      	lsrs	r0, r2
 80014c4:	4642      	mov	r2, r8
 80014c6:	1e5d      	subs	r5, r3, #1
 80014c8:	41ab      	sbcs	r3, r5
 80014ca:	4334      	orrs	r4, r6
 80014cc:	1a12      	subs	r2, r2, r0
 80014ce:	4690      	mov	r8, r2
 80014d0:	4323      	orrs	r3, r4
 80014d2:	e02c      	b.n	800152e <__aeabi_dadd+0x432>
 80014d4:	0742      	lsls	r2, r0, #29
 80014d6:	08db      	lsrs	r3, r3, #3
 80014d8:	4313      	orrs	r3, r2
 80014da:	08c0      	lsrs	r0, r0, #3
 80014dc:	e73b      	b.n	8001356 <__aeabi_dadd+0x25a>
 80014de:	185c      	adds	r4, r3, r1
 80014e0:	429c      	cmp	r4, r3
 80014e2:	419b      	sbcs	r3, r3
 80014e4:	4440      	add	r0, r8
 80014e6:	425b      	negs	r3, r3
 80014e8:	18c7      	adds	r7, r0, r3
 80014ea:	2601      	movs	r6, #1
 80014ec:	023b      	lsls	r3, r7, #8
 80014ee:	d400      	bmi.n	80014f2 <__aeabi_dadd+0x3f6>
 80014f0:	e729      	b.n	8001346 <__aeabi_dadd+0x24a>
 80014f2:	2602      	movs	r6, #2
 80014f4:	4a9e      	ldr	r2, [pc, #632]	; (8001770 <__aeabi_dadd+0x674>)
 80014f6:	0863      	lsrs	r3, r4, #1
 80014f8:	4017      	ands	r7, r2
 80014fa:	2201      	movs	r2, #1
 80014fc:	4014      	ands	r4, r2
 80014fe:	431c      	orrs	r4, r3
 8001500:	07fb      	lsls	r3, r7, #31
 8001502:	431c      	orrs	r4, r3
 8001504:	087f      	lsrs	r7, r7, #1
 8001506:	e673      	b.n	80011f0 <__aeabi_dadd+0xf4>
 8001508:	4644      	mov	r4, r8
 800150a:	3a20      	subs	r2, #32
 800150c:	40d4      	lsrs	r4, r2
 800150e:	4662      	mov	r2, ip
 8001510:	2a20      	cmp	r2, #32
 8001512:	d005      	beq.n	8001520 <__aeabi_dadd+0x424>
 8001514:	4667      	mov	r7, ip
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	1bd2      	subs	r2, r2, r7
 800151a:	4647      	mov	r7, r8
 800151c:	4097      	lsls	r7, r2
 800151e:	4339      	orrs	r1, r7
 8001520:	1e4a      	subs	r2, r1, #1
 8001522:	4191      	sbcs	r1, r2
 8001524:	4321      	orrs	r1, r4
 8001526:	e635      	b.n	8001194 <__aeabi_dadd+0x98>
 8001528:	4303      	orrs	r3, r0
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	4183      	sbcs	r3, r0
 800152e:	1acc      	subs	r4, r1, r3
 8001530:	42a1      	cmp	r1, r4
 8001532:	41bf      	sbcs	r7, r7
 8001534:	4643      	mov	r3, r8
 8001536:	427f      	negs	r7, r7
 8001538:	4655      	mov	r5, sl
 800153a:	464e      	mov	r6, r9
 800153c:	1bdf      	subs	r7, r3, r7
 800153e:	e62e      	b.n	800119e <__aeabi_dadd+0xa2>
 8001540:	0002      	movs	r2, r0
 8001542:	431a      	orrs	r2, r3
 8001544:	d100      	bne.n	8001548 <__aeabi_dadd+0x44c>
 8001546:	e0bd      	b.n	80016c4 <__aeabi_dadd+0x5c8>
 8001548:	4662      	mov	r2, ip
 800154a:	4664      	mov	r4, ip
 800154c:	3a01      	subs	r2, #1
 800154e:	2c01      	cmp	r4, #1
 8001550:	d100      	bne.n	8001554 <__aeabi_dadd+0x458>
 8001552:	e0e5      	b.n	8001720 <__aeabi_dadd+0x624>
 8001554:	4c85      	ldr	r4, [pc, #532]	; (800176c <__aeabi_dadd+0x670>)
 8001556:	45a4      	cmp	ip, r4
 8001558:	d058      	beq.n	800160c <__aeabi_dadd+0x510>
 800155a:	4694      	mov	ip, r2
 800155c:	e749      	b.n	80013f2 <__aeabi_dadd+0x2f6>
 800155e:	4664      	mov	r4, ip
 8001560:	2220      	movs	r2, #32
 8001562:	1b12      	subs	r2, r2, r4
 8001564:	4644      	mov	r4, r8
 8001566:	4094      	lsls	r4, r2
 8001568:	000f      	movs	r7, r1
 800156a:	46a1      	mov	r9, r4
 800156c:	4664      	mov	r4, ip
 800156e:	4091      	lsls	r1, r2
 8001570:	40e7      	lsrs	r7, r4
 8001572:	464c      	mov	r4, r9
 8001574:	1e4a      	subs	r2, r1, #1
 8001576:	4191      	sbcs	r1, r2
 8001578:	433c      	orrs	r4, r7
 800157a:	4642      	mov	r2, r8
 800157c:	430c      	orrs	r4, r1
 800157e:	4661      	mov	r1, ip
 8001580:	40ca      	lsrs	r2, r1
 8001582:	1880      	adds	r0, r0, r2
 8001584:	e6f4      	b.n	8001370 <__aeabi_dadd+0x274>
 8001586:	4c79      	ldr	r4, [pc, #484]	; (800176c <__aeabi_dadd+0x670>)
 8001588:	42a2      	cmp	r2, r4
 800158a:	d100      	bne.n	800158e <__aeabi_dadd+0x492>
 800158c:	e6fd      	b.n	800138a <__aeabi_dadd+0x28e>
 800158e:	1859      	adds	r1, r3, r1
 8001590:	4299      	cmp	r1, r3
 8001592:	419b      	sbcs	r3, r3
 8001594:	4440      	add	r0, r8
 8001596:	425f      	negs	r7, r3
 8001598:	19c7      	adds	r7, r0, r7
 800159a:	07fc      	lsls	r4, r7, #31
 800159c:	0849      	lsrs	r1, r1, #1
 800159e:	0016      	movs	r6, r2
 80015a0:	430c      	orrs	r4, r1
 80015a2:	087f      	lsrs	r7, r7, #1
 80015a4:	e6cf      	b.n	8001346 <__aeabi_dadd+0x24a>
 80015a6:	1acc      	subs	r4, r1, r3
 80015a8:	42a1      	cmp	r1, r4
 80015aa:	41bf      	sbcs	r7, r7
 80015ac:	4643      	mov	r3, r8
 80015ae:	427f      	negs	r7, r7
 80015b0:	1a18      	subs	r0, r3, r0
 80015b2:	4655      	mov	r5, sl
 80015b4:	1bc7      	subs	r7, r0, r7
 80015b6:	e5f7      	b.n	80011a8 <__aeabi_dadd+0xac>
 80015b8:	08c9      	lsrs	r1, r1, #3
 80015ba:	077b      	lsls	r3, r7, #29
 80015bc:	4655      	mov	r5, sl
 80015be:	430b      	orrs	r3, r1
 80015c0:	08f8      	lsrs	r0, r7, #3
 80015c2:	e6c8      	b.n	8001356 <__aeabi_dadd+0x25a>
 80015c4:	2c00      	cmp	r4, #0
 80015c6:	d000      	beq.n	80015ca <__aeabi_dadd+0x4ce>
 80015c8:	e081      	b.n	80016ce <__aeabi_dadd+0x5d2>
 80015ca:	4643      	mov	r3, r8
 80015cc:	430b      	orrs	r3, r1
 80015ce:	d115      	bne.n	80015fc <__aeabi_dadd+0x500>
 80015d0:	2080      	movs	r0, #128	; 0x80
 80015d2:	2500      	movs	r5, #0
 80015d4:	0300      	lsls	r0, r0, #12
 80015d6:	e6e3      	b.n	80013a0 <__aeabi_dadd+0x2a4>
 80015d8:	1a5c      	subs	r4, r3, r1
 80015da:	42a3      	cmp	r3, r4
 80015dc:	419b      	sbcs	r3, r3
 80015de:	1bc7      	subs	r7, r0, r7
 80015e0:	425b      	negs	r3, r3
 80015e2:	2601      	movs	r6, #1
 80015e4:	1aff      	subs	r7, r7, r3
 80015e6:	e5da      	b.n	800119e <__aeabi_dadd+0xa2>
 80015e8:	0742      	lsls	r2, r0, #29
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	08c0      	lsrs	r0, r0, #3
 80015f0:	e6d2      	b.n	8001398 <__aeabi_dadd+0x29c>
 80015f2:	0742      	lsls	r2, r0, #29
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	08c0      	lsrs	r0, r0, #3
 80015fa:	e6ac      	b.n	8001356 <__aeabi_dadd+0x25a>
 80015fc:	4643      	mov	r3, r8
 80015fe:	4642      	mov	r2, r8
 8001600:	08c9      	lsrs	r1, r1, #3
 8001602:	075b      	lsls	r3, r3, #29
 8001604:	4655      	mov	r5, sl
 8001606:	430b      	orrs	r3, r1
 8001608:	08d0      	lsrs	r0, r2, #3
 800160a:	e6c5      	b.n	8001398 <__aeabi_dadd+0x29c>
 800160c:	4643      	mov	r3, r8
 800160e:	4642      	mov	r2, r8
 8001610:	075b      	lsls	r3, r3, #29
 8001612:	08c9      	lsrs	r1, r1, #3
 8001614:	430b      	orrs	r3, r1
 8001616:	08d0      	lsrs	r0, r2, #3
 8001618:	e6be      	b.n	8001398 <__aeabi_dadd+0x29c>
 800161a:	4303      	orrs	r3, r0
 800161c:	001c      	movs	r4, r3
 800161e:	1e63      	subs	r3, r4, #1
 8001620:	419c      	sbcs	r4, r3
 8001622:	e6fc      	b.n	800141e <__aeabi_dadd+0x322>
 8001624:	0002      	movs	r2, r0
 8001626:	3c20      	subs	r4, #32
 8001628:	40e2      	lsrs	r2, r4
 800162a:	0014      	movs	r4, r2
 800162c:	4662      	mov	r2, ip
 800162e:	2a20      	cmp	r2, #32
 8001630:	d003      	beq.n	800163a <__aeabi_dadd+0x53e>
 8001632:	2540      	movs	r5, #64	; 0x40
 8001634:	1aad      	subs	r5, r5, r2
 8001636:	40a8      	lsls	r0, r5
 8001638:	4303      	orrs	r3, r0
 800163a:	1e58      	subs	r0, r3, #1
 800163c:	4183      	sbcs	r3, r0
 800163e:	4323      	orrs	r3, r4
 8001640:	e775      	b.n	800152e <__aeabi_dadd+0x432>
 8001642:	2a00      	cmp	r2, #0
 8001644:	d0e2      	beq.n	800160c <__aeabi_dadd+0x510>
 8001646:	003a      	movs	r2, r7
 8001648:	430a      	orrs	r2, r1
 800164a:	d0cd      	beq.n	80015e8 <__aeabi_dadd+0x4ec>
 800164c:	0742      	lsls	r2, r0, #29
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	4313      	orrs	r3, r2
 8001652:	2280      	movs	r2, #128	; 0x80
 8001654:	08c0      	lsrs	r0, r0, #3
 8001656:	0312      	lsls	r2, r2, #12
 8001658:	4210      	tst	r0, r2
 800165a:	d006      	beq.n	800166a <__aeabi_dadd+0x56e>
 800165c:	08fc      	lsrs	r4, r7, #3
 800165e:	4214      	tst	r4, r2
 8001660:	d103      	bne.n	800166a <__aeabi_dadd+0x56e>
 8001662:	0020      	movs	r0, r4
 8001664:	08cb      	lsrs	r3, r1, #3
 8001666:	077a      	lsls	r2, r7, #29
 8001668:	4313      	orrs	r3, r2
 800166a:	0f5a      	lsrs	r2, r3, #29
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	0752      	lsls	r2, r2, #29
 8001670:	08db      	lsrs	r3, r3, #3
 8001672:	4313      	orrs	r3, r2
 8001674:	e690      	b.n	8001398 <__aeabi_dadd+0x29c>
 8001676:	4643      	mov	r3, r8
 8001678:	430b      	orrs	r3, r1
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x582>
 800167c:	e709      	b.n	8001492 <__aeabi_dadd+0x396>
 800167e:	4643      	mov	r3, r8
 8001680:	4642      	mov	r2, r8
 8001682:	08c9      	lsrs	r1, r1, #3
 8001684:	075b      	lsls	r3, r3, #29
 8001686:	4655      	mov	r5, sl
 8001688:	430b      	orrs	r3, r1
 800168a:	08d0      	lsrs	r0, r2, #3
 800168c:	e666      	b.n	800135c <__aeabi_dadd+0x260>
 800168e:	1acc      	subs	r4, r1, r3
 8001690:	42a1      	cmp	r1, r4
 8001692:	4189      	sbcs	r1, r1
 8001694:	1a3f      	subs	r7, r7, r0
 8001696:	4249      	negs	r1, r1
 8001698:	4655      	mov	r5, sl
 800169a:	2601      	movs	r6, #1
 800169c:	1a7f      	subs	r7, r7, r1
 800169e:	e57e      	b.n	800119e <__aeabi_dadd+0xa2>
 80016a0:	4642      	mov	r2, r8
 80016a2:	1a5c      	subs	r4, r3, r1
 80016a4:	1a87      	subs	r7, r0, r2
 80016a6:	42a3      	cmp	r3, r4
 80016a8:	4192      	sbcs	r2, r2
 80016aa:	4252      	negs	r2, r2
 80016ac:	1abf      	subs	r7, r7, r2
 80016ae:	023a      	lsls	r2, r7, #8
 80016b0:	d53d      	bpl.n	800172e <__aeabi_dadd+0x632>
 80016b2:	1acc      	subs	r4, r1, r3
 80016b4:	42a1      	cmp	r1, r4
 80016b6:	4189      	sbcs	r1, r1
 80016b8:	4643      	mov	r3, r8
 80016ba:	4249      	negs	r1, r1
 80016bc:	1a1f      	subs	r7, r3, r0
 80016be:	4655      	mov	r5, sl
 80016c0:	1a7f      	subs	r7, r7, r1
 80016c2:	e595      	b.n	80011f0 <__aeabi_dadd+0xf4>
 80016c4:	077b      	lsls	r3, r7, #29
 80016c6:	08c9      	lsrs	r1, r1, #3
 80016c8:	430b      	orrs	r3, r1
 80016ca:	08f8      	lsrs	r0, r7, #3
 80016cc:	e643      	b.n	8001356 <__aeabi_dadd+0x25a>
 80016ce:	4644      	mov	r4, r8
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	430c      	orrs	r4, r1
 80016d4:	d130      	bne.n	8001738 <__aeabi_dadd+0x63c>
 80016d6:	0742      	lsls	r2, r0, #29
 80016d8:	4313      	orrs	r3, r2
 80016da:	08c0      	lsrs	r0, r0, #3
 80016dc:	e65c      	b.n	8001398 <__aeabi_dadd+0x29c>
 80016de:	077b      	lsls	r3, r7, #29
 80016e0:	08c9      	lsrs	r1, r1, #3
 80016e2:	430b      	orrs	r3, r1
 80016e4:	08f8      	lsrs	r0, r7, #3
 80016e6:	e639      	b.n	800135c <__aeabi_dadd+0x260>
 80016e8:	185c      	adds	r4, r3, r1
 80016ea:	429c      	cmp	r4, r3
 80016ec:	419b      	sbcs	r3, r3
 80016ee:	4440      	add	r0, r8
 80016f0:	425b      	negs	r3, r3
 80016f2:	18c7      	adds	r7, r0, r3
 80016f4:	023b      	lsls	r3, r7, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x5fe>
 80016f8:	e625      	b.n	8001346 <__aeabi_dadd+0x24a>
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <__aeabi_dadd+0x674>)
 80016fc:	2601      	movs	r6, #1
 80016fe:	401f      	ands	r7, r3
 8001700:	e621      	b.n	8001346 <__aeabi_dadd+0x24a>
 8001702:	0004      	movs	r4, r0
 8001704:	3a20      	subs	r2, #32
 8001706:	40d4      	lsrs	r4, r2
 8001708:	4662      	mov	r2, ip
 800170a:	2a20      	cmp	r2, #32
 800170c:	d004      	beq.n	8001718 <__aeabi_dadd+0x61c>
 800170e:	2240      	movs	r2, #64	; 0x40
 8001710:	4666      	mov	r6, ip
 8001712:	1b92      	subs	r2, r2, r6
 8001714:	4090      	lsls	r0, r2
 8001716:	4303      	orrs	r3, r0
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	4193      	sbcs	r3, r2
 800171c:	431c      	orrs	r4, r3
 800171e:	e67e      	b.n	800141e <__aeabi_dadd+0x322>
 8001720:	185c      	adds	r4, r3, r1
 8001722:	428c      	cmp	r4, r1
 8001724:	4189      	sbcs	r1, r1
 8001726:	4440      	add	r0, r8
 8001728:	4249      	negs	r1, r1
 800172a:	1847      	adds	r7, r0, r1
 800172c:	e6dd      	b.n	80014ea <__aeabi_dadd+0x3ee>
 800172e:	0023      	movs	r3, r4
 8001730:	433b      	orrs	r3, r7
 8001732:	d100      	bne.n	8001736 <__aeabi_dadd+0x63a>
 8001734:	e6ad      	b.n	8001492 <__aeabi_dadd+0x396>
 8001736:	e606      	b.n	8001346 <__aeabi_dadd+0x24a>
 8001738:	0744      	lsls	r4, r0, #29
 800173a:	4323      	orrs	r3, r4
 800173c:	2480      	movs	r4, #128	; 0x80
 800173e:	08c0      	lsrs	r0, r0, #3
 8001740:	0324      	lsls	r4, r4, #12
 8001742:	4220      	tst	r0, r4
 8001744:	d008      	beq.n	8001758 <__aeabi_dadd+0x65c>
 8001746:	4642      	mov	r2, r8
 8001748:	08d6      	lsrs	r6, r2, #3
 800174a:	4226      	tst	r6, r4
 800174c:	d104      	bne.n	8001758 <__aeabi_dadd+0x65c>
 800174e:	4655      	mov	r5, sl
 8001750:	0030      	movs	r0, r6
 8001752:	08cb      	lsrs	r3, r1, #3
 8001754:	0751      	lsls	r1, r2, #29
 8001756:	430b      	orrs	r3, r1
 8001758:	0f5a      	lsrs	r2, r3, #29
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	0752      	lsls	r2, r2, #29
 8001760:	4313      	orrs	r3, r2
 8001762:	e619      	b.n	8001398 <__aeabi_dadd+0x29c>
 8001764:	2300      	movs	r3, #0
 8001766:	4a01      	ldr	r2, [pc, #4]	; (800176c <__aeabi_dadd+0x670>)
 8001768:	001f      	movs	r7, r3
 800176a:	e55e      	b.n	800122a <__aeabi_dadd+0x12e>
 800176c:	000007ff 	.word	0x000007ff
 8001770:	ff7fffff 	.word	0xff7fffff

08001774 <__aeabi_dmul>:
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	4657      	mov	r7, sl
 8001778:	464e      	mov	r6, r9
 800177a:	4645      	mov	r5, r8
 800177c:	46de      	mov	lr, fp
 800177e:	b5e0      	push	{r5, r6, r7, lr}
 8001780:	4698      	mov	r8, r3
 8001782:	030c      	lsls	r4, r1, #12
 8001784:	004b      	lsls	r3, r1, #1
 8001786:	0006      	movs	r6, r0
 8001788:	4692      	mov	sl, r2
 800178a:	b087      	sub	sp, #28
 800178c:	0b24      	lsrs	r4, r4, #12
 800178e:	0d5b      	lsrs	r3, r3, #21
 8001790:	0fcf      	lsrs	r7, r1, #31
 8001792:	2b00      	cmp	r3, #0
 8001794:	d100      	bne.n	8001798 <__aeabi_dmul+0x24>
 8001796:	e15c      	b.n	8001a52 <__aeabi_dmul+0x2de>
 8001798:	4ad9      	ldr	r2, [pc, #868]	; (8001b00 <__aeabi_dmul+0x38c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0x2c>
 800179e:	e175      	b.n	8001a8c <__aeabi_dmul+0x318>
 80017a0:	0f42      	lsrs	r2, r0, #29
 80017a2:	00e4      	lsls	r4, r4, #3
 80017a4:	4314      	orrs	r4, r2
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	0412      	lsls	r2, r2, #16
 80017aa:	4314      	orrs	r4, r2
 80017ac:	4ad5      	ldr	r2, [pc, #852]	; (8001b04 <__aeabi_dmul+0x390>)
 80017ae:	00c5      	lsls	r5, r0, #3
 80017b0:	4694      	mov	ip, r2
 80017b2:	4463      	add	r3, ip
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	4699      	mov	r9, r3
 80017ba:	469b      	mov	fp, r3
 80017bc:	4643      	mov	r3, r8
 80017be:	4642      	mov	r2, r8
 80017c0:	031e      	lsls	r6, r3, #12
 80017c2:	0fd2      	lsrs	r2, r2, #31
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4650      	mov	r0, sl
 80017c8:	4690      	mov	r8, r2
 80017ca:	0b36      	lsrs	r6, r6, #12
 80017cc:	0d5b      	lsrs	r3, r3, #21
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dmul+0x5e>
 80017d0:	e120      	b.n	8001a14 <__aeabi_dmul+0x2a0>
 80017d2:	4acb      	ldr	r2, [pc, #812]	; (8001b00 <__aeabi_dmul+0x38c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d100      	bne.n	80017da <__aeabi_dmul+0x66>
 80017d8:	e162      	b.n	8001aa0 <__aeabi_dmul+0x32c>
 80017da:	49ca      	ldr	r1, [pc, #808]	; (8001b04 <__aeabi_dmul+0x390>)
 80017dc:	0f42      	lsrs	r2, r0, #29
 80017de:	468c      	mov	ip, r1
 80017e0:	9900      	ldr	r1, [sp, #0]
 80017e2:	4463      	add	r3, ip
 80017e4:	00f6      	lsls	r6, r6, #3
 80017e6:	468c      	mov	ip, r1
 80017e8:	4316      	orrs	r6, r2
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	449c      	add	ip, r3
 80017ee:	0412      	lsls	r2, r2, #16
 80017f0:	4663      	mov	r3, ip
 80017f2:	4316      	orrs	r6, r2
 80017f4:	00c2      	lsls	r2, r0, #3
 80017f6:	2000      	movs	r0, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	9900      	ldr	r1, [sp, #0]
 80017fc:	4643      	mov	r3, r8
 80017fe:	3101      	adds	r1, #1
 8001800:	468c      	mov	ip, r1
 8001802:	4649      	mov	r1, r9
 8001804:	407b      	eors	r3, r7
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	290f      	cmp	r1, #15
 800180a:	d826      	bhi.n	800185a <__aeabi_dmul+0xe6>
 800180c:	4bbe      	ldr	r3, [pc, #760]	; (8001b08 <__aeabi_dmul+0x394>)
 800180e:	0089      	lsls	r1, r1, #2
 8001810:	5859      	ldr	r1, [r3, r1]
 8001812:	468f      	mov	pc, r1
 8001814:	4643      	mov	r3, r8
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	0034      	movs	r4, r6
 800181a:	0015      	movs	r5, r2
 800181c:	4683      	mov	fp, r0
 800181e:	465b      	mov	r3, fp
 8001820:	2b02      	cmp	r3, #2
 8001822:	d016      	beq.n	8001852 <__aeabi_dmul+0xde>
 8001824:	2b03      	cmp	r3, #3
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0xb6>
 8001828:	e203      	b.n	8001c32 <__aeabi_dmul+0x4be>
 800182a:	2b01      	cmp	r3, #1
 800182c:	d000      	beq.n	8001830 <__aeabi_dmul+0xbc>
 800182e:	e0cd      	b.n	80019cc <__aeabi_dmul+0x258>
 8001830:	2200      	movs	r2, #0
 8001832:	2400      	movs	r4, #0
 8001834:	2500      	movs	r5, #0
 8001836:	9b01      	ldr	r3, [sp, #4]
 8001838:	0512      	lsls	r2, r2, #20
 800183a:	4322      	orrs	r2, r4
 800183c:	07db      	lsls	r3, r3, #31
 800183e:	431a      	orrs	r2, r3
 8001840:	0028      	movs	r0, r5
 8001842:	0011      	movs	r1, r2
 8001844:	b007      	add	sp, #28
 8001846:	bcf0      	pop	{r4, r5, r6, r7}
 8001848:	46bb      	mov	fp, r7
 800184a:	46b2      	mov	sl, r6
 800184c:	46a9      	mov	r9, r5
 800184e:	46a0      	mov	r8, r4
 8001850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001852:	2400      	movs	r4, #0
 8001854:	2500      	movs	r5, #0
 8001856:	4aaa      	ldr	r2, [pc, #680]	; (8001b00 <__aeabi_dmul+0x38c>)
 8001858:	e7ed      	b.n	8001836 <__aeabi_dmul+0xc2>
 800185a:	0c28      	lsrs	r0, r5, #16
 800185c:	042d      	lsls	r5, r5, #16
 800185e:	0c2d      	lsrs	r5, r5, #16
 8001860:	002b      	movs	r3, r5
 8001862:	0c11      	lsrs	r1, r2, #16
 8001864:	0412      	lsls	r2, r2, #16
 8001866:	0c12      	lsrs	r2, r2, #16
 8001868:	4353      	muls	r3, r2
 800186a:	4698      	mov	r8, r3
 800186c:	0013      	movs	r3, r2
 800186e:	002f      	movs	r7, r5
 8001870:	4343      	muls	r3, r0
 8001872:	4699      	mov	r9, r3
 8001874:	434f      	muls	r7, r1
 8001876:	444f      	add	r7, r9
 8001878:	46bb      	mov	fp, r7
 800187a:	4647      	mov	r7, r8
 800187c:	000b      	movs	r3, r1
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	46ba      	mov	sl, r7
 8001882:	4343      	muls	r3, r0
 8001884:	44da      	add	sl, fp
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	45d1      	cmp	r9, sl
 800188a:	d904      	bls.n	8001896 <__aeabi_dmul+0x122>
 800188c:	2780      	movs	r7, #128	; 0x80
 800188e:	027f      	lsls	r7, r7, #9
 8001890:	46b9      	mov	r9, r7
 8001892:	444b      	add	r3, r9
 8001894:	9302      	str	r3, [sp, #8]
 8001896:	4653      	mov	r3, sl
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	469b      	mov	fp, r3
 800189c:	4653      	mov	r3, sl
 800189e:	041f      	lsls	r7, r3, #16
 80018a0:	4643      	mov	r3, r8
 80018a2:	041b      	lsls	r3, r3, #16
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	4698      	mov	r8, r3
 80018a8:	003b      	movs	r3, r7
 80018aa:	4443      	add	r3, r8
 80018ac:	9304      	str	r3, [sp, #16]
 80018ae:	0c33      	lsrs	r3, r6, #16
 80018b0:	0436      	lsls	r6, r6, #16
 80018b2:	0c36      	lsrs	r6, r6, #16
 80018b4:	4698      	mov	r8, r3
 80018b6:	0033      	movs	r3, r6
 80018b8:	4343      	muls	r3, r0
 80018ba:	4699      	mov	r9, r3
 80018bc:	4643      	mov	r3, r8
 80018be:	4343      	muls	r3, r0
 80018c0:	002f      	movs	r7, r5
 80018c2:	469a      	mov	sl, r3
 80018c4:	4643      	mov	r3, r8
 80018c6:	4377      	muls	r7, r6
 80018c8:	435d      	muls	r5, r3
 80018ca:	0c38      	lsrs	r0, r7, #16
 80018cc:	444d      	add	r5, r9
 80018ce:	1945      	adds	r5, r0, r5
 80018d0:	45a9      	cmp	r9, r5
 80018d2:	d903      	bls.n	80018dc <__aeabi_dmul+0x168>
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	4699      	mov	r9, r3
 80018da:	44ca      	add	sl, r9
 80018dc:	043f      	lsls	r7, r7, #16
 80018de:	0c28      	lsrs	r0, r5, #16
 80018e0:	0c3f      	lsrs	r7, r7, #16
 80018e2:	042d      	lsls	r5, r5, #16
 80018e4:	19ed      	adds	r5, r5, r7
 80018e6:	0c27      	lsrs	r7, r4, #16
 80018e8:	0424      	lsls	r4, r4, #16
 80018ea:	0c24      	lsrs	r4, r4, #16
 80018ec:	0003      	movs	r3, r0
 80018ee:	0020      	movs	r0, r4
 80018f0:	4350      	muls	r0, r2
 80018f2:	437a      	muls	r2, r7
 80018f4:	4691      	mov	r9, r2
 80018f6:	003a      	movs	r2, r7
 80018f8:	4453      	add	r3, sl
 80018fa:	9305      	str	r3, [sp, #20]
 80018fc:	0c03      	lsrs	r3, r0, #16
 80018fe:	469a      	mov	sl, r3
 8001900:	434a      	muls	r2, r1
 8001902:	4361      	muls	r1, r4
 8001904:	4449      	add	r1, r9
 8001906:	4451      	add	r1, sl
 8001908:	44ab      	add	fp, r5
 800190a:	4589      	cmp	r9, r1
 800190c:	d903      	bls.n	8001916 <__aeabi_dmul+0x1a2>
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	025b      	lsls	r3, r3, #9
 8001912:	4699      	mov	r9, r3
 8001914:	444a      	add	r2, r9
 8001916:	0400      	lsls	r0, r0, #16
 8001918:	0c0b      	lsrs	r3, r1, #16
 800191a:	0c00      	lsrs	r0, r0, #16
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	1809      	adds	r1, r1, r0
 8001920:	0020      	movs	r0, r4
 8001922:	4699      	mov	r9, r3
 8001924:	4643      	mov	r3, r8
 8001926:	4370      	muls	r0, r6
 8001928:	435c      	muls	r4, r3
 800192a:	437e      	muls	r6, r7
 800192c:	435f      	muls	r7, r3
 800192e:	0c03      	lsrs	r3, r0, #16
 8001930:	4698      	mov	r8, r3
 8001932:	19a4      	adds	r4, r4, r6
 8001934:	4444      	add	r4, r8
 8001936:	444a      	add	r2, r9
 8001938:	9703      	str	r7, [sp, #12]
 800193a:	42a6      	cmp	r6, r4
 800193c:	d904      	bls.n	8001948 <__aeabi_dmul+0x1d4>
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	4698      	mov	r8, r3
 8001944:	4447      	add	r7, r8
 8001946:	9703      	str	r7, [sp, #12]
 8001948:	0423      	lsls	r3, r4, #16
 800194a:	9e02      	ldr	r6, [sp, #8]
 800194c:	469a      	mov	sl, r3
 800194e:	9b05      	ldr	r3, [sp, #20]
 8001950:	445e      	add	r6, fp
 8001952:	4698      	mov	r8, r3
 8001954:	42ae      	cmp	r6, r5
 8001956:	41ad      	sbcs	r5, r5
 8001958:	1876      	adds	r6, r6, r1
 800195a:	428e      	cmp	r6, r1
 800195c:	4189      	sbcs	r1, r1
 800195e:	0400      	lsls	r0, r0, #16
 8001960:	0c00      	lsrs	r0, r0, #16
 8001962:	4450      	add	r0, sl
 8001964:	4440      	add	r0, r8
 8001966:	426d      	negs	r5, r5
 8001968:	1947      	adds	r7, r0, r5
 800196a:	46b8      	mov	r8, r7
 800196c:	4693      	mov	fp, r2
 800196e:	4249      	negs	r1, r1
 8001970:	4689      	mov	r9, r1
 8001972:	44c3      	add	fp, r8
 8001974:	44d9      	add	r9, fp
 8001976:	4298      	cmp	r0, r3
 8001978:	4180      	sbcs	r0, r0
 800197a:	45a8      	cmp	r8, r5
 800197c:	41ad      	sbcs	r5, r5
 800197e:	4593      	cmp	fp, r2
 8001980:	4192      	sbcs	r2, r2
 8001982:	4589      	cmp	r9, r1
 8001984:	4189      	sbcs	r1, r1
 8001986:	426d      	negs	r5, r5
 8001988:	4240      	negs	r0, r0
 800198a:	4328      	orrs	r0, r5
 800198c:	0c24      	lsrs	r4, r4, #16
 800198e:	4252      	negs	r2, r2
 8001990:	4249      	negs	r1, r1
 8001992:	430a      	orrs	r2, r1
 8001994:	9b03      	ldr	r3, [sp, #12]
 8001996:	1900      	adds	r0, r0, r4
 8001998:	1880      	adds	r0, r0, r2
 800199a:	18c7      	adds	r7, r0, r3
 800199c:	464b      	mov	r3, r9
 800199e:	0ddc      	lsrs	r4, r3, #23
 80019a0:	9b04      	ldr	r3, [sp, #16]
 80019a2:	0275      	lsls	r5, r6, #9
 80019a4:	431d      	orrs	r5, r3
 80019a6:	1e6a      	subs	r2, r5, #1
 80019a8:	4195      	sbcs	r5, r2
 80019aa:	464b      	mov	r3, r9
 80019ac:	0df6      	lsrs	r6, r6, #23
 80019ae:	027f      	lsls	r7, r7, #9
 80019b0:	4335      	orrs	r5, r6
 80019b2:	025a      	lsls	r2, r3, #9
 80019b4:	433c      	orrs	r4, r7
 80019b6:	4315      	orrs	r5, r2
 80019b8:	01fb      	lsls	r3, r7, #7
 80019ba:	d400      	bmi.n	80019be <__aeabi_dmul+0x24a>
 80019bc:	e11c      	b.n	8001bf8 <__aeabi_dmul+0x484>
 80019be:	2101      	movs	r1, #1
 80019c0:	086a      	lsrs	r2, r5, #1
 80019c2:	400d      	ands	r5, r1
 80019c4:	4315      	orrs	r5, r2
 80019c6:	07e2      	lsls	r2, r4, #31
 80019c8:	4315      	orrs	r5, r2
 80019ca:	0864      	lsrs	r4, r4, #1
 80019cc:	494f      	ldr	r1, [pc, #316]	; (8001b0c <__aeabi_dmul+0x398>)
 80019ce:	4461      	add	r1, ip
 80019d0:	2900      	cmp	r1, #0
 80019d2:	dc00      	bgt.n	80019d6 <__aeabi_dmul+0x262>
 80019d4:	e0b0      	b.n	8001b38 <__aeabi_dmul+0x3c4>
 80019d6:	076b      	lsls	r3, r5, #29
 80019d8:	d009      	beq.n	80019ee <__aeabi_dmul+0x27a>
 80019da:	220f      	movs	r2, #15
 80019dc:	402a      	ands	r2, r5
 80019de:	2a04      	cmp	r2, #4
 80019e0:	d005      	beq.n	80019ee <__aeabi_dmul+0x27a>
 80019e2:	1d2a      	adds	r2, r5, #4
 80019e4:	42aa      	cmp	r2, r5
 80019e6:	41ad      	sbcs	r5, r5
 80019e8:	426d      	negs	r5, r5
 80019ea:	1964      	adds	r4, r4, r5
 80019ec:	0015      	movs	r5, r2
 80019ee:	01e3      	lsls	r3, r4, #7
 80019f0:	d504      	bpl.n	80019fc <__aeabi_dmul+0x288>
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	4a46      	ldr	r2, [pc, #280]	; (8001b10 <__aeabi_dmul+0x39c>)
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	4014      	ands	r4, r2
 80019fa:	4461      	add	r1, ip
 80019fc:	4a45      	ldr	r2, [pc, #276]	; (8001b14 <__aeabi_dmul+0x3a0>)
 80019fe:	4291      	cmp	r1, r2
 8001a00:	dd00      	ble.n	8001a04 <__aeabi_dmul+0x290>
 8001a02:	e726      	b.n	8001852 <__aeabi_dmul+0xde>
 8001a04:	0762      	lsls	r2, r4, #29
 8001a06:	08ed      	lsrs	r5, r5, #3
 8001a08:	0264      	lsls	r4, r4, #9
 8001a0a:	0549      	lsls	r1, r1, #21
 8001a0c:	4315      	orrs	r5, r2
 8001a0e:	0b24      	lsrs	r4, r4, #12
 8001a10:	0d4a      	lsrs	r2, r1, #21
 8001a12:	e710      	b.n	8001836 <__aeabi_dmul+0xc2>
 8001a14:	4652      	mov	r2, sl
 8001a16:	4332      	orrs	r2, r6
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dmul+0x2a8>
 8001a1a:	e07f      	b.n	8001b1c <__aeabi_dmul+0x3a8>
 8001a1c:	2e00      	cmp	r6, #0
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dmul+0x2ae>
 8001a20:	e0dc      	b.n	8001bdc <__aeabi_dmul+0x468>
 8001a22:	0030      	movs	r0, r6
 8001a24:	f000 fe0e 	bl	8002644 <__clzsi2>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	3a0b      	subs	r2, #11
 8001a2c:	231d      	movs	r3, #29
 8001a2e:	0001      	movs	r1, r0
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	4652      	mov	r2, sl
 8001a34:	3908      	subs	r1, #8
 8001a36:	40da      	lsrs	r2, r3
 8001a38:	408e      	lsls	r6, r1
 8001a3a:	4316      	orrs	r6, r2
 8001a3c:	4652      	mov	r2, sl
 8001a3e:	408a      	lsls	r2, r1
 8001a40:	9b00      	ldr	r3, [sp, #0]
 8001a42:	4935      	ldr	r1, [pc, #212]	; (8001b18 <__aeabi_dmul+0x3a4>)
 8001a44:	1a18      	subs	r0, r3, r0
 8001a46:	0003      	movs	r3, r0
 8001a48:	468c      	mov	ip, r1
 8001a4a:	4463      	add	r3, ip
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	e6d3      	b.n	80017fa <__aeabi_dmul+0x86>
 8001a52:	0025      	movs	r5, r4
 8001a54:	4305      	orrs	r5, r0
 8001a56:	d04a      	beq.n	8001aee <__aeabi_dmul+0x37a>
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dmul+0x2ea>
 8001a5c:	e0b0      	b.n	8001bc0 <__aeabi_dmul+0x44c>
 8001a5e:	0020      	movs	r0, r4
 8001a60:	f000 fdf0 	bl	8002644 <__clzsi2>
 8001a64:	0001      	movs	r1, r0
 8001a66:	0002      	movs	r2, r0
 8001a68:	390b      	subs	r1, #11
 8001a6a:	231d      	movs	r3, #29
 8001a6c:	0010      	movs	r0, r2
 8001a6e:	1a5b      	subs	r3, r3, r1
 8001a70:	0031      	movs	r1, r6
 8001a72:	0035      	movs	r5, r6
 8001a74:	3808      	subs	r0, #8
 8001a76:	4084      	lsls	r4, r0
 8001a78:	40d9      	lsrs	r1, r3
 8001a7a:	4085      	lsls	r5, r0
 8001a7c:	430c      	orrs	r4, r1
 8001a7e:	4826      	ldr	r0, [pc, #152]	; (8001b18 <__aeabi_dmul+0x3a4>)
 8001a80:	1a83      	subs	r3, r0, r2
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2300      	movs	r3, #0
 8001a86:	4699      	mov	r9, r3
 8001a88:	469b      	mov	fp, r3
 8001a8a:	e697      	b.n	80017bc <__aeabi_dmul+0x48>
 8001a8c:	0005      	movs	r5, r0
 8001a8e:	4325      	orrs	r5, r4
 8001a90:	d126      	bne.n	8001ae0 <__aeabi_dmul+0x36c>
 8001a92:	2208      	movs	r2, #8
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2302      	movs	r3, #2
 8001a98:	2400      	movs	r4, #0
 8001a9a:	4691      	mov	r9, r2
 8001a9c:	469b      	mov	fp, r3
 8001a9e:	e68d      	b.n	80017bc <__aeabi_dmul+0x48>
 8001aa0:	4652      	mov	r2, sl
 8001aa2:	9b00      	ldr	r3, [sp, #0]
 8001aa4:	4332      	orrs	r2, r6
 8001aa6:	d110      	bne.n	8001aca <__aeabi_dmul+0x356>
 8001aa8:	4915      	ldr	r1, [pc, #84]	; (8001b00 <__aeabi_dmul+0x38c>)
 8001aaa:	2600      	movs	r6, #0
 8001aac:	468c      	mov	ip, r1
 8001aae:	4463      	add	r3, ip
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	4319      	orrs	r1, r3
 8001ab8:	4689      	mov	r9, r1
 8001aba:	2002      	movs	r0, #2
 8001abc:	e69d      	b.n	80017fa <__aeabi_dmul+0x86>
 8001abe:	465b      	mov	r3, fp
 8001ac0:	9701      	str	r7, [sp, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d000      	beq.n	8001ac8 <__aeabi_dmul+0x354>
 8001ac6:	e6ad      	b.n	8001824 <__aeabi_dmul+0xb0>
 8001ac8:	e6c3      	b.n	8001852 <__aeabi_dmul+0xde>
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <__aeabi_dmul+0x38c>)
 8001acc:	2003      	movs	r0, #3
 8001ace:	4694      	mov	ip, r2
 8001ad0:	4463      	add	r3, ip
 8001ad2:	464a      	mov	r2, r9
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	4691      	mov	r9, r2
 8001adc:	4652      	mov	r2, sl
 8001ade:	e68c      	b.n	80017fa <__aeabi_dmul+0x86>
 8001ae0:	220c      	movs	r2, #12
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	0005      	movs	r5, r0
 8001ae8:	4691      	mov	r9, r2
 8001aea:	469b      	mov	fp, r3
 8001aec:	e666      	b.n	80017bc <__aeabi_dmul+0x48>
 8001aee:	2304      	movs	r3, #4
 8001af0:	4699      	mov	r9, r3
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	2400      	movs	r4, #0
 8001afa:	469b      	mov	fp, r3
 8001afc:	e65e      	b.n	80017bc <__aeabi_dmul+0x48>
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	000007ff 	.word	0x000007ff
 8001b04:	fffffc01 	.word	0xfffffc01
 8001b08:	08008504 	.word	0x08008504
 8001b0c:	000003ff 	.word	0x000003ff
 8001b10:	feffffff 	.word	0xfeffffff
 8001b14:	000007fe 	.word	0x000007fe
 8001b18:	fffffc0d 	.word	0xfffffc0d
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4319      	orrs	r1, r3
 8001b22:	4689      	mov	r9, r1
 8001b24:	2600      	movs	r6, #0
 8001b26:	2001      	movs	r0, #1
 8001b28:	e667      	b.n	80017fa <__aeabi_dmul+0x86>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2480      	movs	r4, #128	; 0x80
 8001b2e:	2500      	movs	r5, #0
 8001b30:	4a43      	ldr	r2, [pc, #268]	; (8001c40 <__aeabi_dmul+0x4cc>)
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	0324      	lsls	r4, r4, #12
 8001b36:	e67e      	b.n	8001836 <__aeabi_dmul+0xc2>
 8001b38:	2001      	movs	r0, #1
 8001b3a:	1a40      	subs	r0, r0, r1
 8001b3c:	2838      	cmp	r0, #56	; 0x38
 8001b3e:	dd00      	ble.n	8001b42 <__aeabi_dmul+0x3ce>
 8001b40:	e676      	b.n	8001830 <__aeabi_dmul+0xbc>
 8001b42:	281f      	cmp	r0, #31
 8001b44:	dd5b      	ble.n	8001bfe <__aeabi_dmul+0x48a>
 8001b46:	221f      	movs	r2, #31
 8001b48:	0023      	movs	r3, r4
 8001b4a:	4252      	negs	r2, r2
 8001b4c:	1a51      	subs	r1, r2, r1
 8001b4e:	40cb      	lsrs	r3, r1
 8001b50:	0019      	movs	r1, r3
 8001b52:	2820      	cmp	r0, #32
 8001b54:	d003      	beq.n	8001b5e <__aeabi_dmul+0x3ea>
 8001b56:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <__aeabi_dmul+0x4d0>)
 8001b58:	4462      	add	r2, ip
 8001b5a:	4094      	lsls	r4, r2
 8001b5c:	4325      	orrs	r5, r4
 8001b5e:	1e6a      	subs	r2, r5, #1
 8001b60:	4195      	sbcs	r5, r2
 8001b62:	002a      	movs	r2, r5
 8001b64:	430a      	orrs	r2, r1
 8001b66:	2107      	movs	r1, #7
 8001b68:	000d      	movs	r5, r1
 8001b6a:	2400      	movs	r4, #0
 8001b6c:	4015      	ands	r5, r2
 8001b6e:	4211      	tst	r1, r2
 8001b70:	d05b      	beq.n	8001c2a <__aeabi_dmul+0x4b6>
 8001b72:	210f      	movs	r1, #15
 8001b74:	2400      	movs	r4, #0
 8001b76:	4011      	ands	r1, r2
 8001b78:	2904      	cmp	r1, #4
 8001b7a:	d053      	beq.n	8001c24 <__aeabi_dmul+0x4b0>
 8001b7c:	1d11      	adds	r1, r2, #4
 8001b7e:	4291      	cmp	r1, r2
 8001b80:	4192      	sbcs	r2, r2
 8001b82:	4252      	negs	r2, r2
 8001b84:	18a4      	adds	r4, r4, r2
 8001b86:	000a      	movs	r2, r1
 8001b88:	0223      	lsls	r3, r4, #8
 8001b8a:	d54b      	bpl.n	8001c24 <__aeabi_dmul+0x4b0>
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2400      	movs	r4, #0
 8001b90:	2500      	movs	r5, #0
 8001b92:	e650      	b.n	8001836 <__aeabi_dmul+0xc2>
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	031b      	lsls	r3, r3, #12
 8001b98:	421c      	tst	r4, r3
 8001b9a:	d009      	beq.n	8001bb0 <__aeabi_dmul+0x43c>
 8001b9c:	421e      	tst	r6, r3
 8001b9e:	d107      	bne.n	8001bb0 <__aeabi_dmul+0x43c>
 8001ba0:	4333      	orrs	r3, r6
 8001ba2:	031c      	lsls	r4, r3, #12
 8001ba4:	4643      	mov	r3, r8
 8001ba6:	0015      	movs	r5, r2
 8001ba8:	0b24      	lsrs	r4, r4, #12
 8001baa:	4a25      	ldr	r2, [pc, #148]	; (8001c40 <__aeabi_dmul+0x4cc>)
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	e642      	b.n	8001836 <__aeabi_dmul+0xc2>
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	0312      	lsls	r2, r2, #12
 8001bb4:	4314      	orrs	r4, r2
 8001bb6:	0324      	lsls	r4, r4, #12
 8001bb8:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <__aeabi_dmul+0x4cc>)
 8001bba:	0b24      	lsrs	r4, r4, #12
 8001bbc:	9701      	str	r7, [sp, #4]
 8001bbe:	e63a      	b.n	8001836 <__aeabi_dmul+0xc2>
 8001bc0:	f000 fd40 	bl	8002644 <__clzsi2>
 8001bc4:	0001      	movs	r1, r0
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	3115      	adds	r1, #21
 8001bca:	3220      	adds	r2, #32
 8001bcc:	291c      	cmp	r1, #28
 8001bce:	dc00      	bgt.n	8001bd2 <__aeabi_dmul+0x45e>
 8001bd0:	e74b      	b.n	8001a6a <__aeabi_dmul+0x2f6>
 8001bd2:	0034      	movs	r4, r6
 8001bd4:	3808      	subs	r0, #8
 8001bd6:	2500      	movs	r5, #0
 8001bd8:	4084      	lsls	r4, r0
 8001bda:	e750      	b.n	8001a7e <__aeabi_dmul+0x30a>
 8001bdc:	f000 fd32 	bl	8002644 <__clzsi2>
 8001be0:	0003      	movs	r3, r0
 8001be2:	001a      	movs	r2, r3
 8001be4:	3215      	adds	r2, #21
 8001be6:	3020      	adds	r0, #32
 8001be8:	2a1c      	cmp	r2, #28
 8001bea:	dc00      	bgt.n	8001bee <__aeabi_dmul+0x47a>
 8001bec:	e71e      	b.n	8001a2c <__aeabi_dmul+0x2b8>
 8001bee:	4656      	mov	r6, sl
 8001bf0:	3b08      	subs	r3, #8
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	409e      	lsls	r6, r3
 8001bf6:	e723      	b.n	8001a40 <__aeabi_dmul+0x2cc>
 8001bf8:	9b00      	ldr	r3, [sp, #0]
 8001bfa:	469c      	mov	ip, r3
 8001bfc:	e6e6      	b.n	80019cc <__aeabi_dmul+0x258>
 8001bfe:	4912      	ldr	r1, [pc, #72]	; (8001c48 <__aeabi_dmul+0x4d4>)
 8001c00:	0022      	movs	r2, r4
 8001c02:	4461      	add	r1, ip
 8001c04:	002e      	movs	r6, r5
 8001c06:	408d      	lsls	r5, r1
 8001c08:	408a      	lsls	r2, r1
 8001c0a:	40c6      	lsrs	r6, r0
 8001c0c:	1e69      	subs	r1, r5, #1
 8001c0e:	418d      	sbcs	r5, r1
 8001c10:	4332      	orrs	r2, r6
 8001c12:	432a      	orrs	r2, r5
 8001c14:	40c4      	lsrs	r4, r0
 8001c16:	0753      	lsls	r3, r2, #29
 8001c18:	d0b6      	beq.n	8001b88 <__aeabi_dmul+0x414>
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	4011      	ands	r1, r2
 8001c1e:	2904      	cmp	r1, #4
 8001c20:	d1ac      	bne.n	8001b7c <__aeabi_dmul+0x408>
 8001c22:	e7b1      	b.n	8001b88 <__aeabi_dmul+0x414>
 8001c24:	0765      	lsls	r5, r4, #29
 8001c26:	0264      	lsls	r4, r4, #9
 8001c28:	0b24      	lsrs	r4, r4, #12
 8001c2a:	08d2      	lsrs	r2, r2, #3
 8001c2c:	4315      	orrs	r5, r2
 8001c2e:	2200      	movs	r2, #0
 8001c30:	e601      	b.n	8001836 <__aeabi_dmul+0xc2>
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	0312      	lsls	r2, r2, #12
 8001c36:	4314      	orrs	r4, r2
 8001c38:	0324      	lsls	r4, r4, #12
 8001c3a:	4a01      	ldr	r2, [pc, #4]	; (8001c40 <__aeabi_dmul+0x4cc>)
 8001c3c:	0b24      	lsrs	r4, r4, #12
 8001c3e:	e5fa      	b.n	8001836 <__aeabi_dmul+0xc2>
 8001c40:	000007ff 	.word	0x000007ff
 8001c44:	0000043e 	.word	0x0000043e
 8001c48:	0000041e 	.word	0x0000041e

08001c4c <__aeabi_dsub>:
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	4657      	mov	r7, sl
 8001c50:	464e      	mov	r6, r9
 8001c52:	4645      	mov	r5, r8
 8001c54:	46de      	mov	lr, fp
 8001c56:	b5e0      	push	{r5, r6, r7, lr}
 8001c58:	001e      	movs	r6, r3
 8001c5a:	0017      	movs	r7, r2
 8001c5c:	004a      	lsls	r2, r1, #1
 8001c5e:	030b      	lsls	r3, r1, #12
 8001c60:	0d52      	lsrs	r2, r2, #21
 8001c62:	0a5b      	lsrs	r3, r3, #9
 8001c64:	4690      	mov	r8, r2
 8001c66:	0f42      	lsrs	r2, r0, #29
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	0fcd      	lsrs	r5, r1, #31
 8001c6c:	4ccd      	ldr	r4, [pc, #820]	; (8001fa4 <__aeabi_dsub+0x358>)
 8001c6e:	0331      	lsls	r1, r6, #12
 8001c70:	00c3      	lsls	r3, r0, #3
 8001c72:	4694      	mov	ip, r2
 8001c74:	0070      	lsls	r0, r6, #1
 8001c76:	0f7a      	lsrs	r2, r7, #29
 8001c78:	0a49      	lsrs	r1, r1, #9
 8001c7a:	00ff      	lsls	r7, r7, #3
 8001c7c:	469a      	mov	sl, r3
 8001c7e:	46b9      	mov	r9, r7
 8001c80:	0d40      	lsrs	r0, r0, #21
 8001c82:	0ff6      	lsrs	r6, r6, #31
 8001c84:	4311      	orrs	r1, r2
 8001c86:	42a0      	cmp	r0, r4
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x40>
 8001c8a:	e0b1      	b.n	8001df0 <__aeabi_dsub+0x1a4>
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4056      	eors	r6, r2
 8001c90:	46b3      	mov	fp, r6
 8001c92:	42b5      	cmp	r5, r6
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x4c>
 8001c96:	e088      	b.n	8001daa <__aeabi_dsub+0x15e>
 8001c98:	4642      	mov	r2, r8
 8001c9a:	1a12      	subs	r2, r2, r0
 8001c9c:	2a00      	cmp	r2, #0
 8001c9e:	dc00      	bgt.n	8001ca2 <__aeabi_dsub+0x56>
 8001ca0:	e0ae      	b.n	8001e00 <__aeabi_dsub+0x1b4>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x5c>
 8001ca6:	e0c1      	b.n	8001e2c <__aeabi_dsub+0x1e0>
 8001ca8:	48be      	ldr	r0, [pc, #760]	; (8001fa4 <__aeabi_dsub+0x358>)
 8001caa:	4580      	cmp	r8, r0
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x64>
 8001cae:	e151      	b.n	8001f54 <__aeabi_dsub+0x308>
 8001cb0:	2080      	movs	r0, #128	; 0x80
 8001cb2:	0400      	lsls	r0, r0, #16
 8001cb4:	4301      	orrs	r1, r0
 8001cb6:	2a38      	cmp	r2, #56	; 0x38
 8001cb8:	dd00      	ble.n	8001cbc <__aeabi_dsub+0x70>
 8001cba:	e17b      	b.n	8001fb4 <__aeabi_dsub+0x368>
 8001cbc:	2a1f      	cmp	r2, #31
 8001cbe:	dd00      	ble.n	8001cc2 <__aeabi_dsub+0x76>
 8001cc0:	e1ee      	b.n	80020a0 <__aeabi_dsub+0x454>
 8001cc2:	2020      	movs	r0, #32
 8001cc4:	003e      	movs	r6, r7
 8001cc6:	1a80      	subs	r0, r0, r2
 8001cc8:	000c      	movs	r4, r1
 8001cca:	40d6      	lsrs	r6, r2
 8001ccc:	40d1      	lsrs	r1, r2
 8001cce:	4087      	lsls	r7, r0
 8001cd0:	4662      	mov	r2, ip
 8001cd2:	4084      	lsls	r4, r0
 8001cd4:	1a52      	subs	r2, r2, r1
 8001cd6:	1e78      	subs	r0, r7, #1
 8001cd8:	4187      	sbcs	r7, r0
 8001cda:	4694      	mov	ip, r2
 8001cdc:	4334      	orrs	r4, r6
 8001cde:	4327      	orrs	r7, r4
 8001ce0:	1bdc      	subs	r4, r3, r7
 8001ce2:	42a3      	cmp	r3, r4
 8001ce4:	419b      	sbcs	r3, r3
 8001ce6:	4662      	mov	r2, ip
 8001ce8:	425b      	negs	r3, r3
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	4699      	mov	r9, r3
 8001cee:	464b      	mov	r3, r9
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	d400      	bmi.n	8001cf6 <__aeabi_dsub+0xaa>
 8001cf4:	e118      	b.n	8001f28 <__aeabi_dsub+0x2dc>
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	0258      	lsls	r0, r3, #9
 8001cfa:	0a43      	lsrs	r3, r0, #9
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	464b      	mov	r3, r9
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0xba>
 8001d04:	e137      	b.n	8001f76 <__aeabi_dsub+0x32a>
 8001d06:	4648      	mov	r0, r9
 8001d08:	f000 fc9c 	bl	8002644 <__clzsi2>
 8001d0c:	0001      	movs	r1, r0
 8001d0e:	3908      	subs	r1, #8
 8001d10:	2320      	movs	r3, #32
 8001d12:	0022      	movs	r2, r4
 8001d14:	4648      	mov	r0, r9
 8001d16:	1a5b      	subs	r3, r3, r1
 8001d18:	40da      	lsrs	r2, r3
 8001d1a:	4088      	lsls	r0, r1
 8001d1c:	408c      	lsls	r4, r1
 8001d1e:	4643      	mov	r3, r8
 8001d20:	4310      	orrs	r0, r2
 8001d22:	4588      	cmp	r8, r1
 8001d24:	dd00      	ble.n	8001d28 <__aeabi_dsub+0xdc>
 8001d26:	e136      	b.n	8001f96 <__aeabi_dsub+0x34a>
 8001d28:	1ac9      	subs	r1, r1, r3
 8001d2a:	1c4b      	adds	r3, r1, #1
 8001d2c:	2b1f      	cmp	r3, #31
 8001d2e:	dd00      	ble.n	8001d32 <__aeabi_dsub+0xe6>
 8001d30:	e0ea      	b.n	8001f08 <__aeabi_dsub+0x2bc>
 8001d32:	2220      	movs	r2, #32
 8001d34:	0026      	movs	r6, r4
 8001d36:	1ad2      	subs	r2, r2, r3
 8001d38:	0001      	movs	r1, r0
 8001d3a:	4094      	lsls	r4, r2
 8001d3c:	40de      	lsrs	r6, r3
 8001d3e:	40d8      	lsrs	r0, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	4091      	lsls	r1, r2
 8001d44:	1e62      	subs	r2, r4, #1
 8001d46:	4194      	sbcs	r4, r2
 8001d48:	4681      	mov	r9, r0
 8001d4a:	4698      	mov	r8, r3
 8001d4c:	4331      	orrs	r1, r6
 8001d4e:	430c      	orrs	r4, r1
 8001d50:	0763      	lsls	r3, r4, #29
 8001d52:	d009      	beq.n	8001d68 <__aeabi_dsub+0x11c>
 8001d54:	230f      	movs	r3, #15
 8001d56:	4023      	ands	r3, r4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d005      	beq.n	8001d68 <__aeabi_dsub+0x11c>
 8001d5c:	1d23      	adds	r3, r4, #4
 8001d5e:	42a3      	cmp	r3, r4
 8001d60:	41a4      	sbcs	r4, r4
 8001d62:	4264      	negs	r4, r4
 8001d64:	44a1      	add	r9, r4
 8001d66:	001c      	movs	r4, r3
 8001d68:	464b      	mov	r3, r9
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	d400      	bmi.n	8001d70 <__aeabi_dsub+0x124>
 8001d6e:	e0de      	b.n	8001f2e <__aeabi_dsub+0x2e2>
 8001d70:	4641      	mov	r1, r8
 8001d72:	4b8c      	ldr	r3, [pc, #560]	; (8001fa4 <__aeabi_dsub+0x358>)
 8001d74:	3101      	adds	r1, #1
 8001d76:	4299      	cmp	r1, r3
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x130>
 8001d7a:	e0e7      	b.n	8001f4c <__aeabi_dsub+0x300>
 8001d7c:	464b      	mov	r3, r9
 8001d7e:	488a      	ldr	r0, [pc, #552]	; (8001fa8 <__aeabi_dsub+0x35c>)
 8001d80:	08e4      	lsrs	r4, r4, #3
 8001d82:	4003      	ands	r3, r0
 8001d84:	0018      	movs	r0, r3
 8001d86:	0549      	lsls	r1, r1, #21
 8001d88:	075b      	lsls	r3, r3, #29
 8001d8a:	0240      	lsls	r0, r0, #9
 8001d8c:	4323      	orrs	r3, r4
 8001d8e:	0d4a      	lsrs	r2, r1, #21
 8001d90:	0b04      	lsrs	r4, r0, #12
 8001d92:	0512      	lsls	r2, r2, #20
 8001d94:	07ed      	lsls	r5, r5, #31
 8001d96:	4322      	orrs	r2, r4
 8001d98:	432a      	orrs	r2, r5
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	0011      	movs	r1, r2
 8001d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001da0:	46bb      	mov	fp, r7
 8001da2:	46b2      	mov	sl, r6
 8001da4:	46a9      	mov	r9, r5
 8001da6:	46a0      	mov	r8, r4
 8001da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001daa:	4642      	mov	r2, r8
 8001dac:	1a12      	subs	r2, r2, r0
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	dd52      	ble.n	8001e58 <__aeabi_dsub+0x20c>
 8001db2:	2800      	cmp	r0, #0
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x16c>
 8001db6:	e09c      	b.n	8001ef2 <__aeabi_dsub+0x2a6>
 8001db8:	45a0      	cmp	r8, r4
 8001dba:	d100      	bne.n	8001dbe <__aeabi_dsub+0x172>
 8001dbc:	e0ca      	b.n	8001f54 <__aeabi_dsub+0x308>
 8001dbe:	2080      	movs	r0, #128	; 0x80
 8001dc0:	0400      	lsls	r0, r0, #16
 8001dc2:	4301      	orrs	r1, r0
 8001dc4:	2a38      	cmp	r2, #56	; 0x38
 8001dc6:	dd00      	ble.n	8001dca <__aeabi_dsub+0x17e>
 8001dc8:	e149      	b.n	800205e <__aeabi_dsub+0x412>
 8001dca:	2a1f      	cmp	r2, #31
 8001dcc:	dc00      	bgt.n	8001dd0 <__aeabi_dsub+0x184>
 8001dce:	e197      	b.n	8002100 <__aeabi_dsub+0x4b4>
 8001dd0:	0010      	movs	r0, r2
 8001dd2:	000e      	movs	r6, r1
 8001dd4:	3820      	subs	r0, #32
 8001dd6:	40c6      	lsrs	r6, r0
 8001dd8:	2a20      	cmp	r2, #32
 8001dda:	d004      	beq.n	8001de6 <__aeabi_dsub+0x19a>
 8001ddc:	2040      	movs	r0, #64	; 0x40
 8001dde:	1a82      	subs	r2, r0, r2
 8001de0:	4091      	lsls	r1, r2
 8001de2:	430f      	orrs	r7, r1
 8001de4:	46b9      	mov	r9, r7
 8001de6:	464c      	mov	r4, r9
 8001de8:	1e62      	subs	r2, r4, #1
 8001dea:	4194      	sbcs	r4, r2
 8001dec:	4334      	orrs	r4, r6
 8001dee:	e13a      	b.n	8002066 <__aeabi_dsub+0x41a>
 8001df0:	000a      	movs	r2, r1
 8001df2:	433a      	orrs	r2, r7
 8001df4:	d028      	beq.n	8001e48 <__aeabi_dsub+0x1fc>
 8001df6:	46b3      	mov	fp, r6
 8001df8:	42b5      	cmp	r5, r6
 8001dfa:	d02b      	beq.n	8001e54 <__aeabi_dsub+0x208>
 8001dfc:	4a6b      	ldr	r2, [pc, #428]	; (8001fac <__aeabi_dsub+0x360>)
 8001dfe:	4442      	add	r2, r8
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	d05d      	beq.n	8001ec0 <__aeabi_dsub+0x274>
 8001e04:	4642      	mov	r2, r8
 8001e06:	4644      	mov	r4, r8
 8001e08:	1a82      	subs	r2, r0, r2
 8001e0a:	2c00      	cmp	r4, #0
 8001e0c:	d000      	beq.n	8001e10 <__aeabi_dsub+0x1c4>
 8001e0e:	e0f5      	b.n	8001ffc <__aeabi_dsub+0x3b0>
 8001e10:	4665      	mov	r5, ip
 8001e12:	431d      	orrs	r5, r3
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x1cc>
 8001e16:	e19c      	b.n	8002152 <__aeabi_dsub+0x506>
 8001e18:	1e55      	subs	r5, r2, #1
 8001e1a:	2a01      	cmp	r2, #1
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x1d4>
 8001e1e:	e1fb      	b.n	8002218 <__aeabi_dsub+0x5cc>
 8001e20:	4c60      	ldr	r4, [pc, #384]	; (8001fa4 <__aeabi_dsub+0x358>)
 8001e22:	42a2      	cmp	r2, r4
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x1dc>
 8001e26:	e1bd      	b.n	80021a4 <__aeabi_dsub+0x558>
 8001e28:	002a      	movs	r2, r5
 8001e2a:	e0f0      	b.n	800200e <__aeabi_dsub+0x3c2>
 8001e2c:	0008      	movs	r0, r1
 8001e2e:	4338      	orrs	r0, r7
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x1e8>
 8001e32:	e0c3      	b.n	8001fbc <__aeabi_dsub+0x370>
 8001e34:	1e50      	subs	r0, r2, #1
 8001e36:	2a01      	cmp	r2, #1
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x1f0>
 8001e3a:	e1a8      	b.n	800218e <__aeabi_dsub+0x542>
 8001e3c:	4c59      	ldr	r4, [pc, #356]	; (8001fa4 <__aeabi_dsub+0x358>)
 8001e3e:	42a2      	cmp	r2, r4
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x1f8>
 8001e42:	e087      	b.n	8001f54 <__aeabi_dsub+0x308>
 8001e44:	0002      	movs	r2, r0
 8001e46:	e736      	b.n	8001cb6 <__aeabi_dsub+0x6a>
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4056      	eors	r6, r2
 8001e4c:	46b3      	mov	fp, r6
 8001e4e:	42b5      	cmp	r5, r6
 8001e50:	d000      	beq.n	8001e54 <__aeabi_dsub+0x208>
 8001e52:	e721      	b.n	8001c98 <__aeabi_dsub+0x4c>
 8001e54:	4a55      	ldr	r2, [pc, #340]	; (8001fac <__aeabi_dsub+0x360>)
 8001e56:	4442      	add	r2, r8
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_dsub+0x212>
 8001e5c:	e0b5      	b.n	8001fca <__aeabi_dsub+0x37e>
 8001e5e:	4642      	mov	r2, r8
 8001e60:	4644      	mov	r4, r8
 8001e62:	1a82      	subs	r2, r0, r2
 8001e64:	2c00      	cmp	r4, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x21e>
 8001e68:	e138      	b.n	80020dc <__aeabi_dsub+0x490>
 8001e6a:	4e4e      	ldr	r6, [pc, #312]	; (8001fa4 <__aeabi_dsub+0x358>)
 8001e6c:	42b0      	cmp	r0, r6
 8001e6e:	d100      	bne.n	8001e72 <__aeabi_dsub+0x226>
 8001e70:	e1de      	b.n	8002230 <__aeabi_dsub+0x5e4>
 8001e72:	2680      	movs	r6, #128	; 0x80
 8001e74:	4664      	mov	r4, ip
 8001e76:	0436      	lsls	r6, r6, #16
 8001e78:	4334      	orrs	r4, r6
 8001e7a:	46a4      	mov	ip, r4
 8001e7c:	2a38      	cmp	r2, #56	; 0x38
 8001e7e:	dd00      	ble.n	8001e82 <__aeabi_dsub+0x236>
 8001e80:	e196      	b.n	80021b0 <__aeabi_dsub+0x564>
 8001e82:	2a1f      	cmp	r2, #31
 8001e84:	dd00      	ble.n	8001e88 <__aeabi_dsub+0x23c>
 8001e86:	e224      	b.n	80022d2 <__aeabi_dsub+0x686>
 8001e88:	2620      	movs	r6, #32
 8001e8a:	1ab4      	subs	r4, r6, r2
 8001e8c:	46a2      	mov	sl, r4
 8001e8e:	4664      	mov	r4, ip
 8001e90:	4656      	mov	r6, sl
 8001e92:	40b4      	lsls	r4, r6
 8001e94:	46a1      	mov	r9, r4
 8001e96:	001c      	movs	r4, r3
 8001e98:	464e      	mov	r6, r9
 8001e9a:	40d4      	lsrs	r4, r2
 8001e9c:	4326      	orrs	r6, r4
 8001e9e:	0034      	movs	r4, r6
 8001ea0:	4656      	mov	r6, sl
 8001ea2:	40b3      	lsls	r3, r6
 8001ea4:	1e5e      	subs	r6, r3, #1
 8001ea6:	41b3      	sbcs	r3, r6
 8001ea8:	431c      	orrs	r4, r3
 8001eaa:	4663      	mov	r3, ip
 8001eac:	40d3      	lsrs	r3, r2
 8001eae:	18c9      	adds	r1, r1, r3
 8001eb0:	19e4      	adds	r4, r4, r7
 8001eb2:	42bc      	cmp	r4, r7
 8001eb4:	41bf      	sbcs	r7, r7
 8001eb6:	427f      	negs	r7, r7
 8001eb8:	46b9      	mov	r9, r7
 8001eba:	4680      	mov	r8, r0
 8001ebc:	4489      	add	r9, r1
 8001ebe:	e0d8      	b.n	8002072 <__aeabi_dsub+0x426>
 8001ec0:	4640      	mov	r0, r8
 8001ec2:	4c3b      	ldr	r4, [pc, #236]	; (8001fb0 <__aeabi_dsub+0x364>)
 8001ec4:	3001      	adds	r0, #1
 8001ec6:	4220      	tst	r0, r4
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_dsub+0x280>
 8001eca:	e0b4      	b.n	8002036 <__aeabi_dsub+0x3ea>
 8001ecc:	4640      	mov	r0, r8
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_dsub+0x288>
 8001ed2:	e144      	b.n	800215e <__aeabi_dsub+0x512>
 8001ed4:	4660      	mov	r0, ip
 8001ed6:	4318      	orrs	r0, r3
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x290>
 8001eda:	e190      	b.n	80021fe <__aeabi_dsub+0x5b2>
 8001edc:	0008      	movs	r0, r1
 8001ede:	4338      	orrs	r0, r7
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x298>
 8001ee2:	e1aa      	b.n	800223a <__aeabi_dsub+0x5ee>
 8001ee4:	4661      	mov	r1, ip
 8001ee6:	08db      	lsrs	r3, r3, #3
 8001ee8:	0749      	lsls	r1, r1, #29
 8001eea:	430b      	orrs	r3, r1
 8001eec:	4661      	mov	r1, ip
 8001eee:	08cc      	lsrs	r4, r1, #3
 8001ef0:	e027      	b.n	8001f42 <__aeabi_dsub+0x2f6>
 8001ef2:	0008      	movs	r0, r1
 8001ef4:	4338      	orrs	r0, r7
 8001ef6:	d061      	beq.n	8001fbc <__aeabi_dsub+0x370>
 8001ef8:	1e50      	subs	r0, r2, #1
 8001efa:	2a01      	cmp	r2, #1
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x2b4>
 8001efe:	e139      	b.n	8002174 <__aeabi_dsub+0x528>
 8001f00:	42a2      	cmp	r2, r4
 8001f02:	d027      	beq.n	8001f54 <__aeabi_dsub+0x308>
 8001f04:	0002      	movs	r2, r0
 8001f06:	e75d      	b.n	8001dc4 <__aeabi_dsub+0x178>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	391f      	subs	r1, #31
 8001f0c:	40ca      	lsrs	r2, r1
 8001f0e:	0011      	movs	r1, r2
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d003      	beq.n	8001f1c <__aeabi_dsub+0x2d0>
 8001f14:	2240      	movs	r2, #64	; 0x40
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	4098      	lsls	r0, r3
 8001f1a:	4304      	orrs	r4, r0
 8001f1c:	1e63      	subs	r3, r4, #1
 8001f1e:	419c      	sbcs	r4, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	4699      	mov	r9, r3
 8001f24:	4698      	mov	r8, r3
 8001f26:	430c      	orrs	r4, r1
 8001f28:	0763      	lsls	r3, r4, #29
 8001f2a:	d000      	beq.n	8001f2e <__aeabi_dsub+0x2e2>
 8001f2c:	e712      	b.n	8001d54 <__aeabi_dsub+0x108>
 8001f2e:	464b      	mov	r3, r9
 8001f30:	464a      	mov	r2, r9
 8001f32:	08e4      	lsrs	r4, r4, #3
 8001f34:	075b      	lsls	r3, r3, #29
 8001f36:	4323      	orrs	r3, r4
 8001f38:	08d4      	lsrs	r4, r2, #3
 8001f3a:	4642      	mov	r2, r8
 8001f3c:	4919      	ldr	r1, [pc, #100]	; (8001fa4 <__aeabi_dsub+0x358>)
 8001f3e:	428a      	cmp	r2, r1
 8001f40:	d00e      	beq.n	8001f60 <__aeabi_dsub+0x314>
 8001f42:	0324      	lsls	r4, r4, #12
 8001f44:	0552      	lsls	r2, r2, #21
 8001f46:	0b24      	lsrs	r4, r4, #12
 8001f48:	0d52      	lsrs	r2, r2, #21
 8001f4a:	e722      	b.n	8001d92 <__aeabi_dsub+0x146>
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	2400      	movs	r4, #0
 8001f50:	2300      	movs	r3, #0
 8001f52:	e71e      	b.n	8001d92 <__aeabi_dsub+0x146>
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	4662      	mov	r2, ip
 8001f58:	0752      	lsls	r2, r2, #29
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	4662      	mov	r2, ip
 8001f5e:	08d4      	lsrs	r4, r2, #3
 8001f60:	001a      	movs	r2, r3
 8001f62:	4322      	orrs	r2, r4
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x31c>
 8001f66:	e1fc      	b.n	8002362 <__aeabi_dsub+0x716>
 8001f68:	2280      	movs	r2, #128	; 0x80
 8001f6a:	0312      	lsls	r2, r2, #12
 8001f6c:	4314      	orrs	r4, r2
 8001f6e:	0324      	lsls	r4, r4, #12
 8001f70:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <__aeabi_dsub+0x358>)
 8001f72:	0b24      	lsrs	r4, r4, #12
 8001f74:	e70d      	b.n	8001d92 <__aeabi_dsub+0x146>
 8001f76:	0020      	movs	r0, r4
 8001f78:	f000 fb64 	bl	8002644 <__clzsi2>
 8001f7c:	0001      	movs	r1, r0
 8001f7e:	3118      	adds	r1, #24
 8001f80:	291f      	cmp	r1, #31
 8001f82:	dc00      	bgt.n	8001f86 <__aeabi_dsub+0x33a>
 8001f84:	e6c4      	b.n	8001d10 <__aeabi_dsub+0xc4>
 8001f86:	3808      	subs	r0, #8
 8001f88:	4084      	lsls	r4, r0
 8001f8a:	4643      	mov	r3, r8
 8001f8c:	0020      	movs	r0, r4
 8001f8e:	2400      	movs	r4, #0
 8001f90:	4588      	cmp	r8, r1
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_dsub+0x34a>
 8001f94:	e6c8      	b.n	8001d28 <__aeabi_dsub+0xdc>
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__aeabi_dsub+0x35c>)
 8001f98:	1a5b      	subs	r3, r3, r1
 8001f9a:	4010      	ands	r0, r2
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	4681      	mov	r9, r0
 8001fa0:	e6d6      	b.n	8001d50 <__aeabi_dsub+0x104>
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	000007ff 	.word	0x000007ff
 8001fa8:	ff7fffff 	.word	0xff7fffff
 8001fac:	fffff801 	.word	0xfffff801
 8001fb0:	000007fe 	.word	0x000007fe
 8001fb4:	430f      	orrs	r7, r1
 8001fb6:	1e7a      	subs	r2, r7, #1
 8001fb8:	4197      	sbcs	r7, r2
 8001fba:	e691      	b.n	8001ce0 <__aeabi_dsub+0x94>
 8001fbc:	4661      	mov	r1, ip
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0749      	lsls	r1, r1, #29
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	4661      	mov	r1, ip
 8001fc6:	08cc      	lsrs	r4, r1, #3
 8001fc8:	e7b8      	b.n	8001f3c <__aeabi_dsub+0x2f0>
 8001fca:	4640      	mov	r0, r8
 8001fcc:	4cd3      	ldr	r4, [pc, #844]	; (800231c <__aeabi_dsub+0x6d0>)
 8001fce:	3001      	adds	r0, #1
 8001fd0:	4220      	tst	r0, r4
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_dsub+0x38a>
 8001fd4:	e0a2      	b.n	800211c <__aeabi_dsub+0x4d0>
 8001fd6:	4640      	mov	r0, r8
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x392>
 8001fdc:	e101      	b.n	80021e2 <__aeabi_dsub+0x596>
 8001fde:	4660      	mov	r0, ip
 8001fe0:	4318      	orrs	r0, r3
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dsub+0x39a>
 8001fe4:	e15e      	b.n	80022a4 <__aeabi_dsub+0x658>
 8001fe6:	0008      	movs	r0, r1
 8001fe8:	4338      	orrs	r0, r7
 8001fea:	d000      	beq.n	8001fee <__aeabi_dsub+0x3a2>
 8001fec:	e15f      	b.n	80022ae <__aeabi_dsub+0x662>
 8001fee:	4661      	mov	r1, ip
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	0749      	lsls	r1, r1, #29
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	4661      	mov	r1, ip
 8001ff8:	08cc      	lsrs	r4, r1, #3
 8001ffa:	e7a2      	b.n	8001f42 <__aeabi_dsub+0x2f6>
 8001ffc:	4dc8      	ldr	r5, [pc, #800]	; (8002320 <__aeabi_dsub+0x6d4>)
 8001ffe:	42a8      	cmp	r0, r5
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x3b8>
 8002002:	e0cf      	b.n	80021a4 <__aeabi_dsub+0x558>
 8002004:	2580      	movs	r5, #128	; 0x80
 8002006:	4664      	mov	r4, ip
 8002008:	042d      	lsls	r5, r5, #16
 800200a:	432c      	orrs	r4, r5
 800200c:	46a4      	mov	ip, r4
 800200e:	2a38      	cmp	r2, #56	; 0x38
 8002010:	dc56      	bgt.n	80020c0 <__aeabi_dsub+0x474>
 8002012:	2a1f      	cmp	r2, #31
 8002014:	dd00      	ble.n	8002018 <__aeabi_dsub+0x3cc>
 8002016:	e0d1      	b.n	80021bc <__aeabi_dsub+0x570>
 8002018:	2520      	movs	r5, #32
 800201a:	001e      	movs	r6, r3
 800201c:	1aad      	subs	r5, r5, r2
 800201e:	4664      	mov	r4, ip
 8002020:	40ab      	lsls	r3, r5
 8002022:	40ac      	lsls	r4, r5
 8002024:	40d6      	lsrs	r6, r2
 8002026:	1e5d      	subs	r5, r3, #1
 8002028:	41ab      	sbcs	r3, r5
 800202a:	4334      	orrs	r4, r6
 800202c:	4323      	orrs	r3, r4
 800202e:	4664      	mov	r4, ip
 8002030:	40d4      	lsrs	r4, r2
 8002032:	1b09      	subs	r1, r1, r4
 8002034:	e049      	b.n	80020ca <__aeabi_dsub+0x47e>
 8002036:	4660      	mov	r0, ip
 8002038:	1bdc      	subs	r4, r3, r7
 800203a:	1a46      	subs	r6, r0, r1
 800203c:	42a3      	cmp	r3, r4
 800203e:	4180      	sbcs	r0, r0
 8002040:	4240      	negs	r0, r0
 8002042:	4681      	mov	r9, r0
 8002044:	0030      	movs	r0, r6
 8002046:	464e      	mov	r6, r9
 8002048:	1b80      	subs	r0, r0, r6
 800204a:	4681      	mov	r9, r0
 800204c:	0200      	lsls	r0, r0, #8
 800204e:	d476      	bmi.n	800213e <__aeabi_dsub+0x4f2>
 8002050:	464b      	mov	r3, r9
 8002052:	4323      	orrs	r3, r4
 8002054:	d000      	beq.n	8002058 <__aeabi_dsub+0x40c>
 8002056:	e652      	b.n	8001cfe <__aeabi_dsub+0xb2>
 8002058:	2400      	movs	r4, #0
 800205a:	2500      	movs	r5, #0
 800205c:	e771      	b.n	8001f42 <__aeabi_dsub+0x2f6>
 800205e:	4339      	orrs	r1, r7
 8002060:	000c      	movs	r4, r1
 8002062:	1e62      	subs	r2, r4, #1
 8002064:	4194      	sbcs	r4, r2
 8002066:	18e4      	adds	r4, r4, r3
 8002068:	429c      	cmp	r4, r3
 800206a:	419b      	sbcs	r3, r3
 800206c:	425b      	negs	r3, r3
 800206e:	4463      	add	r3, ip
 8002070:	4699      	mov	r9, r3
 8002072:	464b      	mov	r3, r9
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	d400      	bmi.n	800207a <__aeabi_dsub+0x42e>
 8002078:	e756      	b.n	8001f28 <__aeabi_dsub+0x2dc>
 800207a:	2301      	movs	r3, #1
 800207c:	469c      	mov	ip, r3
 800207e:	4ba8      	ldr	r3, [pc, #672]	; (8002320 <__aeabi_dsub+0x6d4>)
 8002080:	44e0      	add	r8, ip
 8002082:	4598      	cmp	r8, r3
 8002084:	d038      	beq.n	80020f8 <__aeabi_dsub+0x4ac>
 8002086:	464b      	mov	r3, r9
 8002088:	48a6      	ldr	r0, [pc, #664]	; (8002324 <__aeabi_dsub+0x6d8>)
 800208a:	2201      	movs	r2, #1
 800208c:	4003      	ands	r3, r0
 800208e:	0018      	movs	r0, r3
 8002090:	0863      	lsrs	r3, r4, #1
 8002092:	4014      	ands	r4, r2
 8002094:	431c      	orrs	r4, r3
 8002096:	07c3      	lsls	r3, r0, #31
 8002098:	431c      	orrs	r4, r3
 800209a:	0843      	lsrs	r3, r0, #1
 800209c:	4699      	mov	r9, r3
 800209e:	e657      	b.n	8001d50 <__aeabi_dsub+0x104>
 80020a0:	0010      	movs	r0, r2
 80020a2:	000e      	movs	r6, r1
 80020a4:	3820      	subs	r0, #32
 80020a6:	40c6      	lsrs	r6, r0
 80020a8:	2a20      	cmp	r2, #32
 80020aa:	d004      	beq.n	80020b6 <__aeabi_dsub+0x46a>
 80020ac:	2040      	movs	r0, #64	; 0x40
 80020ae:	1a82      	subs	r2, r0, r2
 80020b0:	4091      	lsls	r1, r2
 80020b2:	430f      	orrs	r7, r1
 80020b4:	46b9      	mov	r9, r7
 80020b6:	464f      	mov	r7, r9
 80020b8:	1e7a      	subs	r2, r7, #1
 80020ba:	4197      	sbcs	r7, r2
 80020bc:	4337      	orrs	r7, r6
 80020be:	e60f      	b.n	8001ce0 <__aeabi_dsub+0x94>
 80020c0:	4662      	mov	r2, ip
 80020c2:	431a      	orrs	r2, r3
 80020c4:	0013      	movs	r3, r2
 80020c6:	1e5a      	subs	r2, r3, #1
 80020c8:	4193      	sbcs	r3, r2
 80020ca:	1afc      	subs	r4, r7, r3
 80020cc:	42a7      	cmp	r7, r4
 80020ce:	41bf      	sbcs	r7, r7
 80020d0:	427f      	negs	r7, r7
 80020d2:	1bcb      	subs	r3, r1, r7
 80020d4:	4699      	mov	r9, r3
 80020d6:	465d      	mov	r5, fp
 80020d8:	4680      	mov	r8, r0
 80020da:	e608      	b.n	8001cee <__aeabi_dsub+0xa2>
 80020dc:	4666      	mov	r6, ip
 80020de:	431e      	orrs	r6, r3
 80020e0:	d100      	bne.n	80020e4 <__aeabi_dsub+0x498>
 80020e2:	e0be      	b.n	8002262 <__aeabi_dsub+0x616>
 80020e4:	1e56      	subs	r6, r2, #1
 80020e6:	2a01      	cmp	r2, #1
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x4a0>
 80020ea:	e109      	b.n	8002300 <__aeabi_dsub+0x6b4>
 80020ec:	4c8c      	ldr	r4, [pc, #560]	; (8002320 <__aeabi_dsub+0x6d4>)
 80020ee:	42a2      	cmp	r2, r4
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0x4a8>
 80020f2:	e119      	b.n	8002328 <__aeabi_dsub+0x6dc>
 80020f4:	0032      	movs	r2, r6
 80020f6:	e6c1      	b.n	8001e7c <__aeabi_dsub+0x230>
 80020f8:	4642      	mov	r2, r8
 80020fa:	2400      	movs	r4, #0
 80020fc:	2300      	movs	r3, #0
 80020fe:	e648      	b.n	8001d92 <__aeabi_dsub+0x146>
 8002100:	2020      	movs	r0, #32
 8002102:	000c      	movs	r4, r1
 8002104:	1a80      	subs	r0, r0, r2
 8002106:	003e      	movs	r6, r7
 8002108:	4087      	lsls	r7, r0
 800210a:	4084      	lsls	r4, r0
 800210c:	40d6      	lsrs	r6, r2
 800210e:	1e78      	subs	r0, r7, #1
 8002110:	4187      	sbcs	r7, r0
 8002112:	40d1      	lsrs	r1, r2
 8002114:	4334      	orrs	r4, r6
 8002116:	433c      	orrs	r4, r7
 8002118:	448c      	add	ip, r1
 800211a:	e7a4      	b.n	8002066 <__aeabi_dsub+0x41a>
 800211c:	4a80      	ldr	r2, [pc, #512]	; (8002320 <__aeabi_dsub+0x6d4>)
 800211e:	4290      	cmp	r0, r2
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x4d8>
 8002122:	e0e9      	b.n	80022f8 <__aeabi_dsub+0x6ac>
 8002124:	19df      	adds	r7, r3, r7
 8002126:	429f      	cmp	r7, r3
 8002128:	419b      	sbcs	r3, r3
 800212a:	4461      	add	r1, ip
 800212c:	425b      	negs	r3, r3
 800212e:	18c9      	adds	r1, r1, r3
 8002130:	07cc      	lsls	r4, r1, #31
 8002132:	087f      	lsrs	r7, r7, #1
 8002134:	084b      	lsrs	r3, r1, #1
 8002136:	4699      	mov	r9, r3
 8002138:	4680      	mov	r8, r0
 800213a:	433c      	orrs	r4, r7
 800213c:	e6f4      	b.n	8001f28 <__aeabi_dsub+0x2dc>
 800213e:	1afc      	subs	r4, r7, r3
 8002140:	42a7      	cmp	r7, r4
 8002142:	41bf      	sbcs	r7, r7
 8002144:	4663      	mov	r3, ip
 8002146:	427f      	negs	r7, r7
 8002148:	1ac9      	subs	r1, r1, r3
 800214a:	1bcb      	subs	r3, r1, r7
 800214c:	4699      	mov	r9, r3
 800214e:	465d      	mov	r5, fp
 8002150:	e5d5      	b.n	8001cfe <__aeabi_dsub+0xb2>
 8002152:	08ff      	lsrs	r7, r7, #3
 8002154:	074b      	lsls	r3, r1, #29
 8002156:	465d      	mov	r5, fp
 8002158:	433b      	orrs	r3, r7
 800215a:	08cc      	lsrs	r4, r1, #3
 800215c:	e6ee      	b.n	8001f3c <__aeabi_dsub+0x2f0>
 800215e:	4662      	mov	r2, ip
 8002160:	431a      	orrs	r2, r3
 8002162:	d000      	beq.n	8002166 <__aeabi_dsub+0x51a>
 8002164:	e082      	b.n	800226c <__aeabi_dsub+0x620>
 8002166:	000b      	movs	r3, r1
 8002168:	433b      	orrs	r3, r7
 800216a:	d11b      	bne.n	80021a4 <__aeabi_dsub+0x558>
 800216c:	2480      	movs	r4, #128	; 0x80
 800216e:	2500      	movs	r5, #0
 8002170:	0324      	lsls	r4, r4, #12
 8002172:	e6f9      	b.n	8001f68 <__aeabi_dsub+0x31c>
 8002174:	19dc      	adds	r4, r3, r7
 8002176:	429c      	cmp	r4, r3
 8002178:	419b      	sbcs	r3, r3
 800217a:	4461      	add	r1, ip
 800217c:	4689      	mov	r9, r1
 800217e:	425b      	negs	r3, r3
 8002180:	4499      	add	r9, r3
 8002182:	464b      	mov	r3, r9
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	d444      	bmi.n	8002212 <__aeabi_dsub+0x5c6>
 8002188:	2301      	movs	r3, #1
 800218a:	4698      	mov	r8, r3
 800218c:	e6cc      	b.n	8001f28 <__aeabi_dsub+0x2dc>
 800218e:	1bdc      	subs	r4, r3, r7
 8002190:	4662      	mov	r2, ip
 8002192:	42a3      	cmp	r3, r4
 8002194:	419b      	sbcs	r3, r3
 8002196:	1a51      	subs	r1, r2, r1
 8002198:	425b      	negs	r3, r3
 800219a:	1acb      	subs	r3, r1, r3
 800219c:	4699      	mov	r9, r3
 800219e:	2301      	movs	r3, #1
 80021a0:	4698      	mov	r8, r3
 80021a2:	e5a4      	b.n	8001cee <__aeabi_dsub+0xa2>
 80021a4:	08ff      	lsrs	r7, r7, #3
 80021a6:	074b      	lsls	r3, r1, #29
 80021a8:	465d      	mov	r5, fp
 80021aa:	433b      	orrs	r3, r7
 80021ac:	08cc      	lsrs	r4, r1, #3
 80021ae:	e6d7      	b.n	8001f60 <__aeabi_dsub+0x314>
 80021b0:	4662      	mov	r2, ip
 80021b2:	431a      	orrs	r2, r3
 80021b4:	0014      	movs	r4, r2
 80021b6:	1e63      	subs	r3, r4, #1
 80021b8:	419c      	sbcs	r4, r3
 80021ba:	e679      	b.n	8001eb0 <__aeabi_dsub+0x264>
 80021bc:	0015      	movs	r5, r2
 80021be:	4664      	mov	r4, ip
 80021c0:	3d20      	subs	r5, #32
 80021c2:	40ec      	lsrs	r4, r5
 80021c4:	46a0      	mov	r8, r4
 80021c6:	2a20      	cmp	r2, #32
 80021c8:	d005      	beq.n	80021d6 <__aeabi_dsub+0x58a>
 80021ca:	2540      	movs	r5, #64	; 0x40
 80021cc:	4664      	mov	r4, ip
 80021ce:	1aaa      	subs	r2, r5, r2
 80021d0:	4094      	lsls	r4, r2
 80021d2:	4323      	orrs	r3, r4
 80021d4:	469a      	mov	sl, r3
 80021d6:	4654      	mov	r4, sl
 80021d8:	1e63      	subs	r3, r4, #1
 80021da:	419c      	sbcs	r4, r3
 80021dc:	4643      	mov	r3, r8
 80021de:	4323      	orrs	r3, r4
 80021e0:	e773      	b.n	80020ca <__aeabi_dsub+0x47e>
 80021e2:	4662      	mov	r2, ip
 80021e4:	431a      	orrs	r2, r3
 80021e6:	d023      	beq.n	8002230 <__aeabi_dsub+0x5e4>
 80021e8:	000a      	movs	r2, r1
 80021ea:	433a      	orrs	r2, r7
 80021ec:	d000      	beq.n	80021f0 <__aeabi_dsub+0x5a4>
 80021ee:	e0a0      	b.n	8002332 <__aeabi_dsub+0x6e6>
 80021f0:	4662      	mov	r2, ip
 80021f2:	08db      	lsrs	r3, r3, #3
 80021f4:	0752      	lsls	r2, r2, #29
 80021f6:	4313      	orrs	r3, r2
 80021f8:	4662      	mov	r2, ip
 80021fa:	08d4      	lsrs	r4, r2, #3
 80021fc:	e6b0      	b.n	8001f60 <__aeabi_dsub+0x314>
 80021fe:	000b      	movs	r3, r1
 8002200:	433b      	orrs	r3, r7
 8002202:	d100      	bne.n	8002206 <__aeabi_dsub+0x5ba>
 8002204:	e728      	b.n	8002058 <__aeabi_dsub+0x40c>
 8002206:	08ff      	lsrs	r7, r7, #3
 8002208:	074b      	lsls	r3, r1, #29
 800220a:	465d      	mov	r5, fp
 800220c:	433b      	orrs	r3, r7
 800220e:	08cc      	lsrs	r4, r1, #3
 8002210:	e697      	b.n	8001f42 <__aeabi_dsub+0x2f6>
 8002212:	2302      	movs	r3, #2
 8002214:	4698      	mov	r8, r3
 8002216:	e736      	b.n	8002086 <__aeabi_dsub+0x43a>
 8002218:	1afc      	subs	r4, r7, r3
 800221a:	42a7      	cmp	r7, r4
 800221c:	41bf      	sbcs	r7, r7
 800221e:	4663      	mov	r3, ip
 8002220:	427f      	negs	r7, r7
 8002222:	1ac9      	subs	r1, r1, r3
 8002224:	1bcb      	subs	r3, r1, r7
 8002226:	4699      	mov	r9, r3
 8002228:	2301      	movs	r3, #1
 800222a:	465d      	mov	r5, fp
 800222c:	4698      	mov	r8, r3
 800222e:	e55e      	b.n	8001cee <__aeabi_dsub+0xa2>
 8002230:	074b      	lsls	r3, r1, #29
 8002232:	08ff      	lsrs	r7, r7, #3
 8002234:	433b      	orrs	r3, r7
 8002236:	08cc      	lsrs	r4, r1, #3
 8002238:	e692      	b.n	8001f60 <__aeabi_dsub+0x314>
 800223a:	1bdc      	subs	r4, r3, r7
 800223c:	4660      	mov	r0, ip
 800223e:	42a3      	cmp	r3, r4
 8002240:	41b6      	sbcs	r6, r6
 8002242:	1a40      	subs	r0, r0, r1
 8002244:	4276      	negs	r6, r6
 8002246:	1b80      	subs	r0, r0, r6
 8002248:	4681      	mov	r9, r0
 800224a:	0200      	lsls	r0, r0, #8
 800224c:	d560      	bpl.n	8002310 <__aeabi_dsub+0x6c4>
 800224e:	1afc      	subs	r4, r7, r3
 8002250:	42a7      	cmp	r7, r4
 8002252:	41bf      	sbcs	r7, r7
 8002254:	4663      	mov	r3, ip
 8002256:	427f      	negs	r7, r7
 8002258:	1ac9      	subs	r1, r1, r3
 800225a:	1bcb      	subs	r3, r1, r7
 800225c:	4699      	mov	r9, r3
 800225e:	465d      	mov	r5, fp
 8002260:	e576      	b.n	8001d50 <__aeabi_dsub+0x104>
 8002262:	08ff      	lsrs	r7, r7, #3
 8002264:	074b      	lsls	r3, r1, #29
 8002266:	433b      	orrs	r3, r7
 8002268:	08cc      	lsrs	r4, r1, #3
 800226a:	e667      	b.n	8001f3c <__aeabi_dsub+0x2f0>
 800226c:	000a      	movs	r2, r1
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	433a      	orrs	r2, r7
 8002272:	d100      	bne.n	8002276 <__aeabi_dsub+0x62a>
 8002274:	e66f      	b.n	8001f56 <__aeabi_dsub+0x30a>
 8002276:	4662      	mov	r2, ip
 8002278:	0752      	lsls	r2, r2, #29
 800227a:	4313      	orrs	r3, r2
 800227c:	4662      	mov	r2, ip
 800227e:	08d4      	lsrs	r4, r2, #3
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	0312      	lsls	r2, r2, #12
 8002284:	4214      	tst	r4, r2
 8002286:	d007      	beq.n	8002298 <__aeabi_dsub+0x64c>
 8002288:	08c8      	lsrs	r0, r1, #3
 800228a:	4210      	tst	r0, r2
 800228c:	d104      	bne.n	8002298 <__aeabi_dsub+0x64c>
 800228e:	465d      	mov	r5, fp
 8002290:	0004      	movs	r4, r0
 8002292:	08fb      	lsrs	r3, r7, #3
 8002294:	0749      	lsls	r1, r1, #29
 8002296:	430b      	orrs	r3, r1
 8002298:	0f5a      	lsrs	r2, r3, #29
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	08db      	lsrs	r3, r3, #3
 800229e:	0752      	lsls	r2, r2, #29
 80022a0:	4313      	orrs	r3, r2
 80022a2:	e65d      	b.n	8001f60 <__aeabi_dsub+0x314>
 80022a4:	074b      	lsls	r3, r1, #29
 80022a6:	08ff      	lsrs	r7, r7, #3
 80022a8:	433b      	orrs	r3, r7
 80022aa:	08cc      	lsrs	r4, r1, #3
 80022ac:	e649      	b.n	8001f42 <__aeabi_dsub+0x2f6>
 80022ae:	19dc      	adds	r4, r3, r7
 80022b0:	429c      	cmp	r4, r3
 80022b2:	419b      	sbcs	r3, r3
 80022b4:	4461      	add	r1, ip
 80022b6:	4689      	mov	r9, r1
 80022b8:	425b      	negs	r3, r3
 80022ba:	4499      	add	r9, r3
 80022bc:	464b      	mov	r3, r9
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	d400      	bmi.n	80022c4 <__aeabi_dsub+0x678>
 80022c2:	e631      	b.n	8001f28 <__aeabi_dsub+0x2dc>
 80022c4:	464a      	mov	r2, r9
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <__aeabi_dsub+0x6d8>)
 80022c8:	401a      	ands	r2, r3
 80022ca:	2301      	movs	r3, #1
 80022cc:	4691      	mov	r9, r2
 80022ce:	4698      	mov	r8, r3
 80022d0:	e62a      	b.n	8001f28 <__aeabi_dsub+0x2dc>
 80022d2:	0016      	movs	r6, r2
 80022d4:	4664      	mov	r4, ip
 80022d6:	3e20      	subs	r6, #32
 80022d8:	40f4      	lsrs	r4, r6
 80022da:	46a0      	mov	r8, r4
 80022dc:	2a20      	cmp	r2, #32
 80022de:	d005      	beq.n	80022ec <__aeabi_dsub+0x6a0>
 80022e0:	2640      	movs	r6, #64	; 0x40
 80022e2:	4664      	mov	r4, ip
 80022e4:	1ab2      	subs	r2, r6, r2
 80022e6:	4094      	lsls	r4, r2
 80022e8:	4323      	orrs	r3, r4
 80022ea:	469a      	mov	sl, r3
 80022ec:	4654      	mov	r4, sl
 80022ee:	1e63      	subs	r3, r4, #1
 80022f0:	419c      	sbcs	r4, r3
 80022f2:	4643      	mov	r3, r8
 80022f4:	431c      	orrs	r4, r3
 80022f6:	e5db      	b.n	8001eb0 <__aeabi_dsub+0x264>
 80022f8:	0002      	movs	r2, r0
 80022fa:	2400      	movs	r4, #0
 80022fc:	2300      	movs	r3, #0
 80022fe:	e548      	b.n	8001d92 <__aeabi_dsub+0x146>
 8002300:	19dc      	adds	r4, r3, r7
 8002302:	42bc      	cmp	r4, r7
 8002304:	41bf      	sbcs	r7, r7
 8002306:	4461      	add	r1, ip
 8002308:	4689      	mov	r9, r1
 800230a:	427f      	negs	r7, r7
 800230c:	44b9      	add	r9, r7
 800230e:	e738      	b.n	8002182 <__aeabi_dsub+0x536>
 8002310:	464b      	mov	r3, r9
 8002312:	4323      	orrs	r3, r4
 8002314:	d100      	bne.n	8002318 <__aeabi_dsub+0x6cc>
 8002316:	e69f      	b.n	8002058 <__aeabi_dsub+0x40c>
 8002318:	e606      	b.n	8001f28 <__aeabi_dsub+0x2dc>
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	000007fe 	.word	0x000007fe
 8002320:	000007ff 	.word	0x000007ff
 8002324:	ff7fffff 	.word	0xff7fffff
 8002328:	08ff      	lsrs	r7, r7, #3
 800232a:	074b      	lsls	r3, r1, #29
 800232c:	433b      	orrs	r3, r7
 800232e:	08cc      	lsrs	r4, r1, #3
 8002330:	e616      	b.n	8001f60 <__aeabi_dsub+0x314>
 8002332:	4662      	mov	r2, ip
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	0752      	lsls	r2, r2, #29
 8002338:	4313      	orrs	r3, r2
 800233a:	4662      	mov	r2, ip
 800233c:	08d4      	lsrs	r4, r2, #3
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	0312      	lsls	r2, r2, #12
 8002342:	4214      	tst	r4, r2
 8002344:	d007      	beq.n	8002356 <__aeabi_dsub+0x70a>
 8002346:	08c8      	lsrs	r0, r1, #3
 8002348:	4210      	tst	r0, r2
 800234a:	d104      	bne.n	8002356 <__aeabi_dsub+0x70a>
 800234c:	465d      	mov	r5, fp
 800234e:	0004      	movs	r4, r0
 8002350:	08fb      	lsrs	r3, r7, #3
 8002352:	0749      	lsls	r1, r1, #29
 8002354:	430b      	orrs	r3, r1
 8002356:	0f5a      	lsrs	r2, r3, #29
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	0752      	lsls	r2, r2, #29
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	4313      	orrs	r3, r2
 8002360:	e5fe      	b.n	8001f60 <__aeabi_dsub+0x314>
 8002362:	2300      	movs	r3, #0
 8002364:	4a01      	ldr	r2, [pc, #4]	; (800236c <__aeabi_dsub+0x720>)
 8002366:	001c      	movs	r4, r3
 8002368:	e513      	b.n	8001d92 <__aeabi_dsub+0x146>
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	000007ff 	.word	0x000007ff

08002370 <__aeabi_d2iz>:
 8002370:	000a      	movs	r2, r1
 8002372:	b530      	push	{r4, r5, lr}
 8002374:	4c13      	ldr	r4, [pc, #76]	; (80023c4 <__aeabi_d2iz+0x54>)
 8002376:	0053      	lsls	r3, r2, #1
 8002378:	0309      	lsls	r1, r1, #12
 800237a:	0005      	movs	r5, r0
 800237c:	0b09      	lsrs	r1, r1, #12
 800237e:	2000      	movs	r0, #0
 8002380:	0d5b      	lsrs	r3, r3, #21
 8002382:	0fd2      	lsrs	r2, r2, #31
 8002384:	42a3      	cmp	r3, r4
 8002386:	dd04      	ble.n	8002392 <__aeabi_d2iz+0x22>
 8002388:	480f      	ldr	r0, [pc, #60]	; (80023c8 <__aeabi_d2iz+0x58>)
 800238a:	4283      	cmp	r3, r0
 800238c:	dd02      	ble.n	8002394 <__aeabi_d2iz+0x24>
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <__aeabi_d2iz+0x5c>)
 8002390:	18d0      	adds	r0, r2, r3
 8002392:	bd30      	pop	{r4, r5, pc}
 8002394:	2080      	movs	r0, #128	; 0x80
 8002396:	0340      	lsls	r0, r0, #13
 8002398:	4301      	orrs	r1, r0
 800239a:	480d      	ldr	r0, [pc, #52]	; (80023d0 <__aeabi_d2iz+0x60>)
 800239c:	1ac0      	subs	r0, r0, r3
 800239e:	281f      	cmp	r0, #31
 80023a0:	dd08      	ble.n	80023b4 <__aeabi_d2iz+0x44>
 80023a2:	480c      	ldr	r0, [pc, #48]	; (80023d4 <__aeabi_d2iz+0x64>)
 80023a4:	1ac3      	subs	r3, r0, r3
 80023a6:	40d9      	lsrs	r1, r3
 80023a8:	000b      	movs	r3, r1
 80023aa:	4258      	negs	r0, r3
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	d1f0      	bne.n	8002392 <__aeabi_d2iz+0x22>
 80023b0:	0018      	movs	r0, r3
 80023b2:	e7ee      	b.n	8002392 <__aeabi_d2iz+0x22>
 80023b4:	4c08      	ldr	r4, [pc, #32]	; (80023d8 <__aeabi_d2iz+0x68>)
 80023b6:	40c5      	lsrs	r5, r0
 80023b8:	46a4      	mov	ip, r4
 80023ba:	4463      	add	r3, ip
 80023bc:	4099      	lsls	r1, r3
 80023be:	000b      	movs	r3, r1
 80023c0:	432b      	orrs	r3, r5
 80023c2:	e7f2      	b.n	80023aa <__aeabi_d2iz+0x3a>
 80023c4:	000003fe 	.word	0x000003fe
 80023c8:	0000041d 	.word	0x0000041d
 80023cc:	7fffffff 	.word	0x7fffffff
 80023d0:	00000433 	.word	0x00000433
 80023d4:	00000413 	.word	0x00000413
 80023d8:	fffffbed 	.word	0xfffffbed

080023dc <__aeabi_ui2d>:
 80023dc:	b510      	push	{r4, lr}
 80023de:	1e04      	subs	r4, r0, #0
 80023e0:	d010      	beq.n	8002404 <__aeabi_ui2d+0x28>
 80023e2:	f000 f92f 	bl	8002644 <__clzsi2>
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <__aeabi_ui2d+0x48>)
 80023e8:	1a1b      	subs	r3, r3, r0
 80023ea:	280a      	cmp	r0, #10
 80023ec:	dc11      	bgt.n	8002412 <__aeabi_ui2d+0x36>
 80023ee:	220b      	movs	r2, #11
 80023f0:	0021      	movs	r1, r4
 80023f2:	1a12      	subs	r2, r2, r0
 80023f4:	40d1      	lsrs	r1, r2
 80023f6:	3015      	adds	r0, #21
 80023f8:	030a      	lsls	r2, r1, #12
 80023fa:	055b      	lsls	r3, r3, #21
 80023fc:	4084      	lsls	r4, r0
 80023fe:	0b12      	lsrs	r2, r2, #12
 8002400:	0d5b      	lsrs	r3, r3, #21
 8002402:	e001      	b.n	8002408 <__aeabi_ui2d+0x2c>
 8002404:	2300      	movs	r3, #0
 8002406:	2200      	movs	r2, #0
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	4313      	orrs	r3, r2
 800240c:	0020      	movs	r0, r4
 800240e:	0019      	movs	r1, r3
 8002410:	bd10      	pop	{r4, pc}
 8002412:	0022      	movs	r2, r4
 8002414:	380b      	subs	r0, #11
 8002416:	4082      	lsls	r2, r0
 8002418:	055b      	lsls	r3, r3, #21
 800241a:	0312      	lsls	r2, r2, #12
 800241c:	2400      	movs	r4, #0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e7f1      	b.n	8002408 <__aeabi_ui2d+0x2c>
 8002424:	0000041e 	.word	0x0000041e

08002428 <__aeabi_f2d>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	0043      	lsls	r3, r0, #1
 800242c:	0246      	lsls	r6, r0, #9
 800242e:	0fc4      	lsrs	r4, r0, #31
 8002430:	20fe      	movs	r0, #254	; 0xfe
 8002432:	0e1b      	lsrs	r3, r3, #24
 8002434:	1c59      	adds	r1, r3, #1
 8002436:	0a75      	lsrs	r5, r6, #9
 8002438:	4208      	tst	r0, r1
 800243a:	d00c      	beq.n	8002456 <__aeabi_f2d+0x2e>
 800243c:	22e0      	movs	r2, #224	; 0xe0
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4694      	mov	ip, r2
 8002442:	076d      	lsls	r5, r5, #29
 8002444:	0b36      	lsrs	r6, r6, #12
 8002446:	4463      	add	r3, ip
 8002448:	051b      	lsls	r3, r3, #20
 800244a:	4333      	orrs	r3, r6
 800244c:	07e4      	lsls	r4, r4, #31
 800244e:	4323      	orrs	r3, r4
 8002450:	0028      	movs	r0, r5
 8002452:	0019      	movs	r1, r3
 8002454:	bd70      	pop	{r4, r5, r6, pc}
 8002456:	2b00      	cmp	r3, #0
 8002458:	d114      	bne.n	8002484 <__aeabi_f2d+0x5c>
 800245a:	2d00      	cmp	r5, #0
 800245c:	d01b      	beq.n	8002496 <__aeabi_f2d+0x6e>
 800245e:	0028      	movs	r0, r5
 8002460:	f000 f8f0 	bl	8002644 <__clzsi2>
 8002464:	280a      	cmp	r0, #10
 8002466:	dc1c      	bgt.n	80024a2 <__aeabi_f2d+0x7a>
 8002468:	230b      	movs	r3, #11
 800246a:	002e      	movs	r6, r5
 800246c:	1a1b      	subs	r3, r3, r0
 800246e:	40de      	lsrs	r6, r3
 8002470:	0003      	movs	r3, r0
 8002472:	3315      	adds	r3, #21
 8002474:	409d      	lsls	r5, r3
 8002476:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <__aeabi_f2d+0x88>)
 8002478:	0336      	lsls	r6, r6, #12
 800247a:	1a12      	subs	r2, r2, r0
 800247c:	0552      	lsls	r2, r2, #21
 800247e:	0b36      	lsrs	r6, r6, #12
 8002480:	0d53      	lsrs	r3, r2, #21
 8002482:	e7e1      	b.n	8002448 <__aeabi_f2d+0x20>
 8002484:	2d00      	cmp	r5, #0
 8002486:	d009      	beq.n	800249c <__aeabi_f2d+0x74>
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	0b36      	lsrs	r6, r6, #12
 800248c:	0312      	lsls	r2, r2, #12
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <__aeabi_f2d+0x8c>)
 8002490:	076d      	lsls	r5, r5, #29
 8002492:	4316      	orrs	r6, r2
 8002494:	e7d8      	b.n	8002448 <__aeabi_f2d+0x20>
 8002496:	2300      	movs	r3, #0
 8002498:	2600      	movs	r6, #0
 800249a:	e7d5      	b.n	8002448 <__aeabi_f2d+0x20>
 800249c:	2600      	movs	r6, #0
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <__aeabi_f2d+0x8c>)
 80024a0:	e7d2      	b.n	8002448 <__aeabi_f2d+0x20>
 80024a2:	0003      	movs	r3, r0
 80024a4:	3b0b      	subs	r3, #11
 80024a6:	409d      	lsls	r5, r3
 80024a8:	002e      	movs	r6, r5
 80024aa:	2500      	movs	r5, #0
 80024ac:	e7e3      	b.n	8002476 <__aeabi_f2d+0x4e>
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	00000389 	.word	0x00000389
 80024b4:	000007ff 	.word	0x000007ff

080024b8 <__aeabi_d2f>:
 80024b8:	0002      	movs	r2, r0
 80024ba:	004b      	lsls	r3, r1, #1
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	0d5b      	lsrs	r3, r3, #21
 80024c0:	030c      	lsls	r4, r1, #12
 80024c2:	4e3d      	ldr	r6, [pc, #244]	; (80025b8 <__aeabi_d2f+0x100>)
 80024c4:	0a64      	lsrs	r4, r4, #9
 80024c6:	0f40      	lsrs	r0, r0, #29
 80024c8:	1c5f      	adds	r7, r3, #1
 80024ca:	0fc9      	lsrs	r1, r1, #31
 80024cc:	4304      	orrs	r4, r0
 80024ce:	00d5      	lsls	r5, r2, #3
 80024d0:	4237      	tst	r7, r6
 80024d2:	d00a      	beq.n	80024ea <__aeabi_d2f+0x32>
 80024d4:	4839      	ldr	r0, [pc, #228]	; (80025bc <__aeabi_d2f+0x104>)
 80024d6:	181e      	adds	r6, r3, r0
 80024d8:	2efe      	cmp	r6, #254	; 0xfe
 80024da:	dd16      	ble.n	800250a <__aeabi_d2f+0x52>
 80024dc:	20ff      	movs	r0, #255	; 0xff
 80024de:	2400      	movs	r4, #0
 80024e0:	05c0      	lsls	r0, r0, #23
 80024e2:	4320      	orrs	r0, r4
 80024e4:	07c9      	lsls	r1, r1, #31
 80024e6:	4308      	orrs	r0, r1
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <__aeabi_d2f+0x44>
 80024ee:	432c      	orrs	r4, r5
 80024f0:	d026      	beq.n	8002540 <__aeabi_d2f+0x88>
 80024f2:	2205      	movs	r2, #5
 80024f4:	0192      	lsls	r2, r2, #6
 80024f6:	0a54      	lsrs	r4, r2, #9
 80024f8:	b2d8      	uxtb	r0, r3
 80024fa:	e7f1      	b.n	80024e0 <__aeabi_d2f+0x28>
 80024fc:	4325      	orrs	r5, r4
 80024fe:	d0ed      	beq.n	80024dc <__aeabi_d2f+0x24>
 8002500:	2080      	movs	r0, #128	; 0x80
 8002502:	03c0      	lsls	r0, r0, #15
 8002504:	4304      	orrs	r4, r0
 8002506:	20ff      	movs	r0, #255	; 0xff
 8002508:	e7ea      	b.n	80024e0 <__aeabi_d2f+0x28>
 800250a:	2e00      	cmp	r6, #0
 800250c:	dd1b      	ble.n	8002546 <__aeabi_d2f+0x8e>
 800250e:	0192      	lsls	r2, r2, #6
 8002510:	1e53      	subs	r3, r2, #1
 8002512:	419a      	sbcs	r2, r3
 8002514:	00e4      	lsls	r4, r4, #3
 8002516:	0f6d      	lsrs	r5, r5, #29
 8002518:	4322      	orrs	r2, r4
 800251a:	432a      	orrs	r2, r5
 800251c:	0753      	lsls	r3, r2, #29
 800251e:	d048      	beq.n	80025b2 <__aeabi_d2f+0xfa>
 8002520:	230f      	movs	r3, #15
 8002522:	4013      	ands	r3, r2
 8002524:	2b04      	cmp	r3, #4
 8002526:	d000      	beq.n	800252a <__aeabi_d2f+0x72>
 8002528:	3204      	adds	r2, #4
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	04db      	lsls	r3, r3, #19
 800252e:	4013      	ands	r3, r2
 8002530:	d03f      	beq.n	80025b2 <__aeabi_d2f+0xfa>
 8002532:	1c70      	adds	r0, r6, #1
 8002534:	2efe      	cmp	r6, #254	; 0xfe
 8002536:	d0d1      	beq.n	80024dc <__aeabi_d2f+0x24>
 8002538:	0192      	lsls	r2, r2, #6
 800253a:	0a54      	lsrs	r4, r2, #9
 800253c:	b2c0      	uxtb	r0, r0
 800253e:	e7cf      	b.n	80024e0 <__aeabi_d2f+0x28>
 8002540:	2000      	movs	r0, #0
 8002542:	2400      	movs	r4, #0
 8002544:	e7cc      	b.n	80024e0 <__aeabi_d2f+0x28>
 8002546:	0032      	movs	r2, r6
 8002548:	3217      	adds	r2, #23
 800254a:	db22      	blt.n	8002592 <__aeabi_d2f+0xda>
 800254c:	2080      	movs	r0, #128	; 0x80
 800254e:	0400      	lsls	r0, r0, #16
 8002550:	4320      	orrs	r0, r4
 8002552:	241e      	movs	r4, #30
 8002554:	1ba4      	subs	r4, r4, r6
 8002556:	2c1f      	cmp	r4, #31
 8002558:	dd1d      	ble.n	8002596 <__aeabi_d2f+0xde>
 800255a:	2202      	movs	r2, #2
 800255c:	4252      	negs	r2, r2
 800255e:	1b96      	subs	r6, r2, r6
 8002560:	0002      	movs	r2, r0
 8002562:	40f2      	lsrs	r2, r6
 8002564:	0016      	movs	r6, r2
 8002566:	2c20      	cmp	r4, #32
 8002568:	d004      	beq.n	8002574 <__aeabi_d2f+0xbc>
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <__aeabi_d2f+0x108>)
 800256c:	4694      	mov	ip, r2
 800256e:	4463      	add	r3, ip
 8002570:	4098      	lsls	r0, r3
 8002572:	4305      	orrs	r5, r0
 8002574:	002a      	movs	r2, r5
 8002576:	1e53      	subs	r3, r2, #1
 8002578:	419a      	sbcs	r2, r3
 800257a:	4332      	orrs	r2, r6
 800257c:	2600      	movs	r6, #0
 800257e:	0753      	lsls	r3, r2, #29
 8002580:	d1ce      	bne.n	8002520 <__aeabi_d2f+0x68>
 8002582:	2480      	movs	r4, #128	; 0x80
 8002584:	0013      	movs	r3, r2
 8002586:	04e4      	lsls	r4, r4, #19
 8002588:	2001      	movs	r0, #1
 800258a:	4023      	ands	r3, r4
 800258c:	4222      	tst	r2, r4
 800258e:	d1d3      	bne.n	8002538 <__aeabi_d2f+0x80>
 8002590:	e7b0      	b.n	80024f4 <__aeabi_d2f+0x3c>
 8002592:	2300      	movs	r3, #0
 8002594:	e7ad      	b.n	80024f2 <__aeabi_d2f+0x3a>
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <__aeabi_d2f+0x10c>)
 8002598:	4694      	mov	ip, r2
 800259a:	002a      	movs	r2, r5
 800259c:	40e2      	lsrs	r2, r4
 800259e:	0014      	movs	r4, r2
 80025a0:	002a      	movs	r2, r5
 80025a2:	4463      	add	r3, ip
 80025a4:	409a      	lsls	r2, r3
 80025a6:	4098      	lsls	r0, r3
 80025a8:	1e55      	subs	r5, r2, #1
 80025aa:	41aa      	sbcs	r2, r5
 80025ac:	4302      	orrs	r2, r0
 80025ae:	4322      	orrs	r2, r4
 80025b0:	e7e4      	b.n	800257c <__aeabi_d2f+0xc4>
 80025b2:	0033      	movs	r3, r6
 80025b4:	e79e      	b.n	80024f4 <__aeabi_d2f+0x3c>
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	000007fe 	.word	0x000007fe
 80025bc:	fffffc80 	.word	0xfffffc80
 80025c0:	fffffca2 	.word	0xfffffca2
 80025c4:	fffffc82 	.word	0xfffffc82

080025c8 <__aeabi_cdrcmple>:
 80025c8:	4684      	mov	ip, r0
 80025ca:	0010      	movs	r0, r2
 80025cc:	4662      	mov	r2, ip
 80025ce:	468c      	mov	ip, r1
 80025d0:	0019      	movs	r1, r3
 80025d2:	4663      	mov	r3, ip
 80025d4:	e000      	b.n	80025d8 <__aeabi_cdcmpeq>
 80025d6:	46c0      	nop			; (mov r8, r8)

080025d8 <__aeabi_cdcmpeq>:
 80025d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80025da:	f000 f905 	bl	80027e8 <__ledf2>
 80025de:	2800      	cmp	r0, #0
 80025e0:	d401      	bmi.n	80025e6 <__aeabi_cdcmpeq+0xe>
 80025e2:	2100      	movs	r1, #0
 80025e4:	42c8      	cmn	r0, r1
 80025e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080025e8 <__aeabi_dcmpeq>:
 80025e8:	b510      	push	{r4, lr}
 80025ea:	f000 f855 	bl	8002698 <__eqdf2>
 80025ee:	4240      	negs	r0, r0
 80025f0:	3001      	adds	r0, #1
 80025f2:	bd10      	pop	{r4, pc}

080025f4 <__aeabi_dcmplt>:
 80025f4:	b510      	push	{r4, lr}
 80025f6:	f000 f8f7 	bl	80027e8 <__ledf2>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	db01      	blt.n	8002602 <__aeabi_dcmplt+0xe>
 80025fe:	2000      	movs	r0, #0
 8002600:	bd10      	pop	{r4, pc}
 8002602:	2001      	movs	r0, #1
 8002604:	bd10      	pop	{r4, pc}
 8002606:	46c0      	nop			; (mov r8, r8)

08002608 <__aeabi_dcmple>:
 8002608:	b510      	push	{r4, lr}
 800260a:	f000 f8ed 	bl	80027e8 <__ledf2>
 800260e:	2800      	cmp	r0, #0
 8002610:	dd01      	ble.n	8002616 <__aeabi_dcmple+0xe>
 8002612:	2000      	movs	r0, #0
 8002614:	bd10      	pop	{r4, pc}
 8002616:	2001      	movs	r0, #1
 8002618:	bd10      	pop	{r4, pc}
 800261a:	46c0      	nop			; (mov r8, r8)

0800261c <__aeabi_dcmpgt>:
 800261c:	b510      	push	{r4, lr}
 800261e:	f000 f87d 	bl	800271c <__gedf2>
 8002622:	2800      	cmp	r0, #0
 8002624:	dc01      	bgt.n	800262a <__aeabi_dcmpgt+0xe>
 8002626:	2000      	movs	r0, #0
 8002628:	bd10      	pop	{r4, pc}
 800262a:	2001      	movs	r0, #1
 800262c:	bd10      	pop	{r4, pc}
 800262e:	46c0      	nop			; (mov r8, r8)

08002630 <__aeabi_dcmpge>:
 8002630:	b510      	push	{r4, lr}
 8002632:	f000 f873 	bl	800271c <__gedf2>
 8002636:	2800      	cmp	r0, #0
 8002638:	da01      	bge.n	800263e <__aeabi_dcmpge+0xe>
 800263a:	2000      	movs	r0, #0
 800263c:	bd10      	pop	{r4, pc}
 800263e:	2001      	movs	r0, #1
 8002640:	bd10      	pop	{r4, pc}
 8002642:	46c0      	nop			; (mov r8, r8)

08002644 <__clzsi2>:
 8002644:	211c      	movs	r1, #28
 8002646:	2301      	movs	r3, #1
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	4298      	cmp	r0, r3
 800264c:	d301      	bcc.n	8002652 <__clzsi2+0xe>
 800264e:	0c00      	lsrs	r0, r0, #16
 8002650:	3910      	subs	r1, #16
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	4298      	cmp	r0, r3
 8002656:	d301      	bcc.n	800265c <__clzsi2+0x18>
 8002658:	0a00      	lsrs	r0, r0, #8
 800265a:	3908      	subs	r1, #8
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	4298      	cmp	r0, r3
 8002660:	d301      	bcc.n	8002666 <__clzsi2+0x22>
 8002662:	0900      	lsrs	r0, r0, #4
 8002664:	3904      	subs	r1, #4
 8002666:	a202      	add	r2, pc, #8	; (adr r2, 8002670 <__clzsi2+0x2c>)
 8002668:	5c10      	ldrb	r0, [r2, r0]
 800266a:	1840      	adds	r0, r0, r1
 800266c:	4770      	bx	lr
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	02020304 	.word	0x02020304
 8002674:	01010101 	.word	0x01010101
	...

08002680 <__clzdi2>:
 8002680:	b510      	push	{r4, lr}
 8002682:	2900      	cmp	r1, #0
 8002684:	d103      	bne.n	800268e <__clzdi2+0xe>
 8002686:	f7ff ffdd 	bl	8002644 <__clzsi2>
 800268a:	3020      	adds	r0, #32
 800268c:	e002      	b.n	8002694 <__clzdi2+0x14>
 800268e:	0008      	movs	r0, r1
 8002690:	f7ff ffd8 	bl	8002644 <__clzsi2>
 8002694:	bd10      	pop	{r4, pc}
 8002696:	46c0      	nop			; (mov r8, r8)

08002698 <__eqdf2>:
 8002698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269a:	464e      	mov	r6, r9
 800269c:	4645      	mov	r5, r8
 800269e:	46de      	mov	lr, fp
 80026a0:	4657      	mov	r7, sl
 80026a2:	4690      	mov	r8, r2
 80026a4:	b5e0      	push	{r5, r6, r7, lr}
 80026a6:	0017      	movs	r7, r2
 80026a8:	031a      	lsls	r2, r3, #12
 80026aa:	0b12      	lsrs	r2, r2, #12
 80026ac:	0005      	movs	r5, r0
 80026ae:	4684      	mov	ip, r0
 80026b0:	4819      	ldr	r0, [pc, #100]	; (8002718 <__eqdf2+0x80>)
 80026b2:	030e      	lsls	r6, r1, #12
 80026b4:	004c      	lsls	r4, r1, #1
 80026b6:	4691      	mov	r9, r2
 80026b8:	005a      	lsls	r2, r3, #1
 80026ba:	0fdb      	lsrs	r3, r3, #31
 80026bc:	469b      	mov	fp, r3
 80026be:	0b36      	lsrs	r6, r6, #12
 80026c0:	0d64      	lsrs	r4, r4, #21
 80026c2:	0fc9      	lsrs	r1, r1, #31
 80026c4:	0d52      	lsrs	r2, r2, #21
 80026c6:	4284      	cmp	r4, r0
 80026c8:	d019      	beq.n	80026fe <__eqdf2+0x66>
 80026ca:	4282      	cmp	r2, r0
 80026cc:	d010      	beq.n	80026f0 <__eqdf2+0x58>
 80026ce:	2001      	movs	r0, #1
 80026d0:	4294      	cmp	r4, r2
 80026d2:	d10e      	bne.n	80026f2 <__eqdf2+0x5a>
 80026d4:	454e      	cmp	r6, r9
 80026d6:	d10c      	bne.n	80026f2 <__eqdf2+0x5a>
 80026d8:	2001      	movs	r0, #1
 80026da:	45c4      	cmp	ip, r8
 80026dc:	d109      	bne.n	80026f2 <__eqdf2+0x5a>
 80026de:	4559      	cmp	r1, fp
 80026e0:	d017      	beq.n	8002712 <__eqdf2+0x7a>
 80026e2:	2c00      	cmp	r4, #0
 80026e4:	d105      	bne.n	80026f2 <__eqdf2+0x5a>
 80026e6:	0030      	movs	r0, r6
 80026e8:	4328      	orrs	r0, r5
 80026ea:	1e43      	subs	r3, r0, #1
 80026ec:	4198      	sbcs	r0, r3
 80026ee:	e000      	b.n	80026f2 <__eqdf2+0x5a>
 80026f0:	2001      	movs	r0, #1
 80026f2:	bcf0      	pop	{r4, r5, r6, r7}
 80026f4:	46bb      	mov	fp, r7
 80026f6:	46b2      	mov	sl, r6
 80026f8:	46a9      	mov	r9, r5
 80026fa:	46a0      	mov	r8, r4
 80026fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fe:	0033      	movs	r3, r6
 8002700:	2001      	movs	r0, #1
 8002702:	432b      	orrs	r3, r5
 8002704:	d1f5      	bne.n	80026f2 <__eqdf2+0x5a>
 8002706:	42a2      	cmp	r2, r4
 8002708:	d1f3      	bne.n	80026f2 <__eqdf2+0x5a>
 800270a:	464b      	mov	r3, r9
 800270c:	433b      	orrs	r3, r7
 800270e:	d1f0      	bne.n	80026f2 <__eqdf2+0x5a>
 8002710:	e7e2      	b.n	80026d8 <__eqdf2+0x40>
 8002712:	2000      	movs	r0, #0
 8002714:	e7ed      	b.n	80026f2 <__eqdf2+0x5a>
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	000007ff 	.word	0x000007ff

0800271c <__gedf2>:
 800271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271e:	4647      	mov	r7, r8
 8002720:	46ce      	mov	lr, r9
 8002722:	0004      	movs	r4, r0
 8002724:	0018      	movs	r0, r3
 8002726:	0016      	movs	r6, r2
 8002728:	031b      	lsls	r3, r3, #12
 800272a:	0b1b      	lsrs	r3, r3, #12
 800272c:	4d2d      	ldr	r5, [pc, #180]	; (80027e4 <__gedf2+0xc8>)
 800272e:	004a      	lsls	r2, r1, #1
 8002730:	4699      	mov	r9, r3
 8002732:	b580      	push	{r7, lr}
 8002734:	0043      	lsls	r3, r0, #1
 8002736:	030f      	lsls	r7, r1, #12
 8002738:	46a4      	mov	ip, r4
 800273a:	46b0      	mov	r8, r6
 800273c:	0b3f      	lsrs	r7, r7, #12
 800273e:	0d52      	lsrs	r2, r2, #21
 8002740:	0fc9      	lsrs	r1, r1, #31
 8002742:	0d5b      	lsrs	r3, r3, #21
 8002744:	0fc0      	lsrs	r0, r0, #31
 8002746:	42aa      	cmp	r2, r5
 8002748:	d021      	beq.n	800278e <__gedf2+0x72>
 800274a:	42ab      	cmp	r3, r5
 800274c:	d013      	beq.n	8002776 <__gedf2+0x5a>
 800274e:	2a00      	cmp	r2, #0
 8002750:	d122      	bne.n	8002798 <__gedf2+0x7c>
 8002752:	433c      	orrs	r4, r7
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <__gedf2+0x42>
 8002758:	464d      	mov	r5, r9
 800275a:	432e      	orrs	r6, r5
 800275c:	d022      	beq.n	80027a4 <__gedf2+0x88>
 800275e:	2c00      	cmp	r4, #0
 8002760:	d010      	beq.n	8002784 <__gedf2+0x68>
 8002762:	4281      	cmp	r1, r0
 8002764:	d022      	beq.n	80027ac <__gedf2+0x90>
 8002766:	2002      	movs	r0, #2
 8002768:	3901      	subs	r1, #1
 800276a:	4008      	ands	r0, r1
 800276c:	3801      	subs	r0, #1
 800276e:	bcc0      	pop	{r6, r7}
 8002770:	46b9      	mov	r9, r7
 8002772:	46b0      	mov	r8, r6
 8002774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002776:	464d      	mov	r5, r9
 8002778:	432e      	orrs	r6, r5
 800277a:	d129      	bne.n	80027d0 <__gedf2+0xb4>
 800277c:	2a00      	cmp	r2, #0
 800277e:	d1f0      	bne.n	8002762 <__gedf2+0x46>
 8002780:	433c      	orrs	r4, r7
 8002782:	d1ee      	bne.n	8002762 <__gedf2+0x46>
 8002784:	2800      	cmp	r0, #0
 8002786:	d1f2      	bne.n	800276e <__gedf2+0x52>
 8002788:	2001      	movs	r0, #1
 800278a:	4240      	negs	r0, r0
 800278c:	e7ef      	b.n	800276e <__gedf2+0x52>
 800278e:	003d      	movs	r5, r7
 8002790:	4325      	orrs	r5, r4
 8002792:	d11d      	bne.n	80027d0 <__gedf2+0xb4>
 8002794:	4293      	cmp	r3, r2
 8002796:	d0ee      	beq.n	8002776 <__gedf2+0x5a>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e2      	bne.n	8002762 <__gedf2+0x46>
 800279c:	464c      	mov	r4, r9
 800279e:	4326      	orrs	r6, r4
 80027a0:	d1df      	bne.n	8002762 <__gedf2+0x46>
 80027a2:	e7e0      	b.n	8002766 <__gedf2+0x4a>
 80027a4:	2000      	movs	r0, #0
 80027a6:	2c00      	cmp	r4, #0
 80027a8:	d0e1      	beq.n	800276e <__gedf2+0x52>
 80027aa:	e7dc      	b.n	8002766 <__gedf2+0x4a>
 80027ac:	429a      	cmp	r2, r3
 80027ae:	dc0a      	bgt.n	80027c6 <__gedf2+0xaa>
 80027b0:	dbe8      	blt.n	8002784 <__gedf2+0x68>
 80027b2:	454f      	cmp	r7, r9
 80027b4:	d8d7      	bhi.n	8002766 <__gedf2+0x4a>
 80027b6:	d00e      	beq.n	80027d6 <__gedf2+0xba>
 80027b8:	2000      	movs	r0, #0
 80027ba:	454f      	cmp	r7, r9
 80027bc:	d2d7      	bcs.n	800276e <__gedf2+0x52>
 80027be:	2900      	cmp	r1, #0
 80027c0:	d0e2      	beq.n	8002788 <__gedf2+0x6c>
 80027c2:	0008      	movs	r0, r1
 80027c4:	e7d3      	b.n	800276e <__gedf2+0x52>
 80027c6:	4243      	negs	r3, r0
 80027c8:	4158      	adcs	r0, r3
 80027ca:	0040      	lsls	r0, r0, #1
 80027cc:	3801      	subs	r0, #1
 80027ce:	e7ce      	b.n	800276e <__gedf2+0x52>
 80027d0:	2002      	movs	r0, #2
 80027d2:	4240      	negs	r0, r0
 80027d4:	e7cb      	b.n	800276e <__gedf2+0x52>
 80027d6:	45c4      	cmp	ip, r8
 80027d8:	d8c5      	bhi.n	8002766 <__gedf2+0x4a>
 80027da:	2000      	movs	r0, #0
 80027dc:	45c4      	cmp	ip, r8
 80027de:	d2c6      	bcs.n	800276e <__gedf2+0x52>
 80027e0:	e7ed      	b.n	80027be <__gedf2+0xa2>
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	000007ff 	.word	0x000007ff

080027e8 <__ledf2>:
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ea:	4647      	mov	r7, r8
 80027ec:	46ce      	mov	lr, r9
 80027ee:	0004      	movs	r4, r0
 80027f0:	0018      	movs	r0, r3
 80027f2:	0016      	movs	r6, r2
 80027f4:	031b      	lsls	r3, r3, #12
 80027f6:	0b1b      	lsrs	r3, r3, #12
 80027f8:	4d2c      	ldr	r5, [pc, #176]	; (80028ac <__ledf2+0xc4>)
 80027fa:	004a      	lsls	r2, r1, #1
 80027fc:	4699      	mov	r9, r3
 80027fe:	b580      	push	{r7, lr}
 8002800:	0043      	lsls	r3, r0, #1
 8002802:	030f      	lsls	r7, r1, #12
 8002804:	46a4      	mov	ip, r4
 8002806:	46b0      	mov	r8, r6
 8002808:	0b3f      	lsrs	r7, r7, #12
 800280a:	0d52      	lsrs	r2, r2, #21
 800280c:	0fc9      	lsrs	r1, r1, #31
 800280e:	0d5b      	lsrs	r3, r3, #21
 8002810:	0fc0      	lsrs	r0, r0, #31
 8002812:	42aa      	cmp	r2, r5
 8002814:	d00d      	beq.n	8002832 <__ledf2+0x4a>
 8002816:	42ab      	cmp	r3, r5
 8002818:	d010      	beq.n	800283c <__ledf2+0x54>
 800281a:	2a00      	cmp	r2, #0
 800281c:	d127      	bne.n	800286e <__ledf2+0x86>
 800281e:	433c      	orrs	r4, r7
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <__ledf2+0x60>
 8002824:	464d      	mov	r5, r9
 8002826:	432e      	orrs	r6, r5
 8002828:	d10e      	bne.n	8002848 <__ledf2+0x60>
 800282a:	2000      	movs	r0, #0
 800282c:	2c00      	cmp	r4, #0
 800282e:	d015      	beq.n	800285c <__ledf2+0x74>
 8002830:	e00e      	b.n	8002850 <__ledf2+0x68>
 8002832:	003d      	movs	r5, r7
 8002834:	4325      	orrs	r5, r4
 8002836:	d110      	bne.n	800285a <__ledf2+0x72>
 8002838:	4293      	cmp	r3, r2
 800283a:	d118      	bne.n	800286e <__ledf2+0x86>
 800283c:	464d      	mov	r5, r9
 800283e:	432e      	orrs	r6, r5
 8002840:	d10b      	bne.n	800285a <__ledf2+0x72>
 8002842:	2a00      	cmp	r2, #0
 8002844:	d102      	bne.n	800284c <__ledf2+0x64>
 8002846:	433c      	orrs	r4, r7
 8002848:	2c00      	cmp	r4, #0
 800284a:	d00b      	beq.n	8002864 <__ledf2+0x7c>
 800284c:	4281      	cmp	r1, r0
 800284e:	d014      	beq.n	800287a <__ledf2+0x92>
 8002850:	2002      	movs	r0, #2
 8002852:	3901      	subs	r1, #1
 8002854:	4008      	ands	r0, r1
 8002856:	3801      	subs	r0, #1
 8002858:	e000      	b.n	800285c <__ledf2+0x74>
 800285a:	2002      	movs	r0, #2
 800285c:	bcc0      	pop	{r6, r7}
 800285e:	46b9      	mov	r9, r7
 8002860:	46b0      	mov	r8, r6
 8002862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002864:	2800      	cmp	r0, #0
 8002866:	d1f9      	bne.n	800285c <__ledf2+0x74>
 8002868:	2001      	movs	r0, #1
 800286a:	4240      	negs	r0, r0
 800286c:	e7f6      	b.n	800285c <__ledf2+0x74>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1ec      	bne.n	800284c <__ledf2+0x64>
 8002872:	464c      	mov	r4, r9
 8002874:	4326      	orrs	r6, r4
 8002876:	d1e9      	bne.n	800284c <__ledf2+0x64>
 8002878:	e7ea      	b.n	8002850 <__ledf2+0x68>
 800287a:	429a      	cmp	r2, r3
 800287c:	dd04      	ble.n	8002888 <__ledf2+0xa0>
 800287e:	4243      	negs	r3, r0
 8002880:	4158      	adcs	r0, r3
 8002882:	0040      	lsls	r0, r0, #1
 8002884:	3801      	subs	r0, #1
 8002886:	e7e9      	b.n	800285c <__ledf2+0x74>
 8002888:	429a      	cmp	r2, r3
 800288a:	dbeb      	blt.n	8002864 <__ledf2+0x7c>
 800288c:	454f      	cmp	r7, r9
 800288e:	d8df      	bhi.n	8002850 <__ledf2+0x68>
 8002890:	d006      	beq.n	80028a0 <__ledf2+0xb8>
 8002892:	2000      	movs	r0, #0
 8002894:	454f      	cmp	r7, r9
 8002896:	d2e1      	bcs.n	800285c <__ledf2+0x74>
 8002898:	2900      	cmp	r1, #0
 800289a:	d0e5      	beq.n	8002868 <__ledf2+0x80>
 800289c:	0008      	movs	r0, r1
 800289e:	e7dd      	b.n	800285c <__ledf2+0x74>
 80028a0:	45c4      	cmp	ip, r8
 80028a2:	d8d5      	bhi.n	8002850 <__ledf2+0x68>
 80028a4:	2000      	movs	r0, #0
 80028a6:	45c4      	cmp	ip, r8
 80028a8:	d2d8      	bcs.n	800285c <__ledf2+0x74>
 80028aa:	e7f5      	b.n	8002898 <__ledf2+0xb0>
 80028ac:	000007ff 	.word	0x000007ff

080028b0 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	0002      	movs	r2, r0
 80028b8:	1dbb      	adds	r3, r7, #6
 80028ba:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80028bc:	230f      	movs	r3, #15
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 80028c4:	210e      	movs	r1, #14
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	222d      	movs	r2, #45	; 0x2d
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e01a      	b.n	800290a <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80028d4:	240e      	movs	r4, #14
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b299      	uxth	r1, r3
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3b2d      	subs	r3, #45	; 0x2d
 80028e2:	4a3e      	ldr	r2, [pc, #248]	; (80029dc <VL53L1X_SensorInit+0x12c>)
 80028e4:	5cd2      	ldrb	r2, [r2, r3]
 80028e6:	1dbb      	adds	r3, r7, #6
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f001 fbec 	bl	80040c8 <VL53L1_WrByte>
 80028f0:	0003      	movs	r3, r0
 80028f2:	0019      	movs	r1, r3
 80028f4:	220f      	movs	r2, #15
 80028f6:	18bb      	adds	r3, r7, r2
 80028f8:	18ba      	adds	r2, r7, r2
 80028fa:	7812      	ldrb	r2, [r2, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8002900:	193b      	adds	r3, r7, r4
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	193b      	adds	r3, r7, r4
 8002906:	3201      	adds	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	230e      	movs	r3, #14
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b87      	cmp	r3, #135	; 0x87
 8002912:	d9df      	bls.n	80028d4 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8002914:	1dbb      	adds	r3, r7, #6
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 f8b3 	bl	8002a84 <VL53L1X_StartRanging>
 800291e:	0003      	movs	r3, r0
 8002920:	0019      	movs	r1, r3
 8002922:	220f      	movs	r2, #15
 8002924:	18bb      	adds	r3, r7, r2
 8002926:	18ba      	adds	r2, r7, r2
 8002928:	7812      	ldrb	r2, [r2, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 800292e:	230d      	movs	r3, #13
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8002936:	e00f      	b.n	8002958 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8002938:	230d      	movs	r3, #13
 800293a:	18fa      	adds	r2, r7, r3
 800293c:	1dbb      	adds	r3, r7, #6
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	0011      	movs	r1, r2
 8002942:	0018      	movs	r0, r3
 8002944:	f000 f8dc 	bl	8002b00 <VL53L1X_CheckForDataReady>
 8002948:	0003      	movs	r3, r0
 800294a:	0019      	movs	r1, r3
 800294c:	220f      	movs	r2, #15
 800294e:	18bb      	adds	r3, r7, r2
 8002950:	18ba      	adds	r2, r7, r2
 8002952:	7812      	ldrb	r2, [r2, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8002958:	230d      	movs	r3, #13
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ea      	beq.n	8002938 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8002962:	1dbb      	adds	r3, r7, #6
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 f83a 	bl	80029e0 <VL53L1X_ClearInterrupt>
 800296c:	0003      	movs	r3, r0
 800296e:	0019      	movs	r1, r3
 8002970:	240f      	movs	r4, #15
 8002972:	193b      	adds	r3, r7, r4
 8002974:	193a      	adds	r2, r7, r4
 8002976:	7812      	ldrb	r2, [r2, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 800297c:	1dbb      	adds	r3, r7, #6
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	0018      	movs	r0, r3
 8002982:	f000 f89e 	bl	8002ac2 <VL53L1X_StopRanging>
 8002986:	0003      	movs	r3, r0
 8002988:	0019      	movs	r1, r3
 800298a:	193b      	adds	r3, r7, r4
 800298c:	193a      	adds	r2, r7, r4
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8002994:	1dbb      	adds	r3, r7, #6
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	2209      	movs	r2, #9
 800299a:	2108      	movs	r1, #8
 800299c:	0018      	movs	r0, r3
 800299e:	f001 fb93 	bl	80040c8 <VL53L1_WrByte>
 80029a2:	0003      	movs	r3, r0
 80029a4:	0019      	movs	r1, r3
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	193a      	adds	r2, r7, r4
 80029aa:	7812      	ldrb	r2, [r2, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80029b0:	1dbb      	adds	r3, r7, #6
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	210b      	movs	r1, #11
 80029b8:	0018      	movs	r0, r3
 80029ba:	f001 fb85 	bl	80040c8 <VL53L1_WrByte>
 80029be:	0003      	movs	r3, r0
 80029c0:	0019      	movs	r1, r3
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	193a      	adds	r2, r7, r4
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	701a      	strb	r2, [r3, #0]
	return status;
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b25b      	sxtb	r3, r3
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b005      	add	sp, #20
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	08008544 	.word	0x08008544

080029e0 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	0002      	movs	r2, r0
 80029e8:	1dbb      	adds	r3, r7, #6
 80029ea:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80029ec:	240f      	movs	r4, #15
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80029f4:	1dbb      	adds	r3, r7, #6
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	2201      	movs	r2, #1
 80029fa:	2186      	movs	r1, #134	; 0x86
 80029fc:	0018      	movs	r0, r3
 80029fe:	f001 fb63 	bl	80040c8 <VL53L1_WrByte>
 8002a02:	0003      	movs	r3, r0
 8002a04:	0019      	movs	r1, r3
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	193a      	adds	r2, r7, r4
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	701a      	strb	r2, [r3, #0]
	return status;
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b25b      	sxtb	r3, r3
}
 8002a16:	0018      	movs	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b005      	add	sp, #20
 8002a1c:	bd90      	pop	{r4, r7, pc}

08002a1e <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8002a1e:	b5b0      	push	{r4, r5, r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	0002      	movs	r2, r0
 8002a26:	6039      	str	r1, [r7, #0]
 8002a28:	1dbb      	adds	r3, r7, #6
 8002a2a:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8002a2c:	240f      	movs	r4, #15
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8002a34:	250e      	movs	r5, #14
 8002a36:	197a      	adds	r2, r7, r5
 8002a38:	1dbb      	adds	r3, r7, #6
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	2130      	movs	r1, #48	; 0x30
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f001 fc08 	bl	8004254 <VL53L1_RdByte>
 8002a44:	0003      	movs	r3, r0
 8002a46:	0019      	movs	r1, r3
 8002a48:	0020      	movs	r0, r4
 8002a4a:	183b      	adds	r3, r7, r0
 8002a4c:	183a      	adds	r2, r7, r0
 8002a4e:	7812      	ldrb	r2, [r2, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8002a54:	197b      	adds	r3, r7, r5
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2210      	movs	r2, #16
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	197b      	adds	r3, r7, r5
 8002a60:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8002a62:	197b      	adds	r3, r7, r5
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	425a      	negs	r2, r3
 8002a6c:	4153      	adcs	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	001a      	movs	r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	701a      	strb	r2, [r3, #0]
	return status;
 8002a76:	183b      	adds	r3, r7, r0
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b25b      	sxtb	r3, r3
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b004      	add	sp, #16
 8002a82:	bdb0      	pop	{r4, r5, r7, pc}

08002a84 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	1dbb      	adds	r3, r7, #6
 8002a8e:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8002a90:	240f      	movs	r4, #15
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8002a98:	1dbb      	adds	r3, r7, #6
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	2187      	movs	r1, #135	; 0x87
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f001 fb11 	bl	80040c8 <VL53L1_WrByte>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	193a      	adds	r2, r7, r4
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	701a      	strb	r2, [r3, #0]
	return status;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b25b      	sxtb	r3, r3
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b005      	add	sp, #20
 8002ac0:	bd90      	pop	{r4, r7, pc}

08002ac2 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8002ac2:	b590      	push	{r4, r7, lr}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	0002      	movs	r2, r0
 8002aca:	1dbb      	adds	r3, r7, #6
 8002acc:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8002ace:	240f      	movs	r4, #15
 8002ad0:	193b      	adds	r3, r7, r4
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8002ad6:	1dbb      	adds	r3, r7, #6
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2187      	movs	r1, #135	; 0x87
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f001 faf2 	bl	80040c8 <VL53L1_WrByte>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	193a      	adds	r2, r7, r4
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	701a      	strb	r2, [r3, #0]
	return status;
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b25b      	sxtb	r3, r3
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b005      	add	sp, #20
 8002afe:	bd90      	pop	{r4, r7, pc}

08002b00 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	0002      	movs	r2, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	1dbb      	adds	r3, r7, #6
 8002b0c:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8002b0e:	240f      	movs	r4, #15
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8002b16:	250d      	movs	r5, #13
 8002b18:	197a      	adds	r2, r7, r5
 8002b1a:	1dbb      	adds	r3, r7, #6
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	0011      	movs	r1, r2
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff ff7c 	bl	8002a1e <VL53L1X_GetInterruptPolarity>
 8002b26:	0003      	movs	r3, r0
 8002b28:	0019      	movs	r1, r3
 8002b2a:	193b      	adds	r3, r7, r4
 8002b2c:	193a      	adds	r2, r7, r4
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8002b34:	260e      	movs	r6, #14
 8002b36:	19ba      	adds	r2, r7, r6
 8002b38:	1dbb      	adds	r3, r7, #6
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	2131      	movs	r1, #49	; 0x31
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 fb88 	bl	8004254 <VL53L1_RdByte>
 8002b44:	0003      	movs	r3, r0
 8002b46:	0019      	movs	r1, r3
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	193a      	adds	r2, r7, r4
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10f      	bne.n	8002b7c <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 8002b5c:	19bb      	adds	r3, r7, r6
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	001a      	movs	r2, r3
 8002b62:	2301      	movs	r3, #1
 8002b64:	4013      	ands	r3, r2
 8002b66:	197a      	adds	r2, r7, r5
 8002b68:	7812      	ldrb	r2, [r2, #0]
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d103      	bne.n	8002b76 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e002      	b.n	8002b7c <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8002b7c:	230f      	movs	r3, #15
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b25b      	sxtb	r3, r3
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b005      	add	sp, #20
 8002b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b8c <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8002b8c:	b5b0      	push	{r4, r5, r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	0002      	movs	r2, r0
 8002b94:	1dbb      	adds	r3, r7, #6
 8002b96:	801a      	strh	r2, [r3, #0]
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	1c0a      	adds	r2, r1, #0
 8002b9c:	801a      	strh	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8002b9e:	240f      	movs	r4, #15
 8002ba0:	193b      	adds	r3, r7, r4
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8002ba6:	250c      	movs	r5, #12
 8002ba8:	197a      	adds	r2, r7, r5
 8002baa:	1dbb      	adds	r3, r7, #6
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	0011      	movs	r1, r2
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 faa5 	bl	8003100 <VL53L1X_GetDistanceMode>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	0019      	movs	r1, r3
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	193a      	adds	r2, r7, r4
 8002bbe:	7812      	ldrb	r2, [r2, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	701a      	strb	r2, [r3, #0]
	if (DM == 0)
 8002bc4:	197b      	adds	r3, r7, r5
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <VL53L1X_SetTimingBudgetInMs+0x44>
		return 1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e11a      	b.n	8002e06 <VL53L1X_SetTimingBudgetInMs+0x27a>
	else if (DM == 1) {	/* Short DistanceMode */
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d000      	beq.n	8002bdc <VL53L1X_SetTimingBudgetInMs+0x50>
 8002bda:	e092      	b.n	8002d02 <VL53L1X_SetTimingBudgetInMs+0x176>
		switch (TimingBudgetInMs) {
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	22fa      	movs	r2, #250	; 0xfa
 8002be2:	0052      	lsls	r2, r2, #1
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d100      	bne.n	8002bea <VL53L1X_SetTimingBudgetInMs+0x5e>
 8002be8:	e077      	b.n	8002cda <VL53L1X_SetTimingBudgetInMs+0x14e>
 8002bea:	22fa      	movs	r2, #250	; 0xfa
 8002bec:	0052      	lsls	r2, r2, #1
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	dd00      	ble.n	8002bf4 <VL53L1X_SetTimingBudgetInMs+0x68>
 8002bf2:	e081      	b.n	8002cf8 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8002bf4:	2bc8      	cmp	r3, #200	; 0xc8
 8002bf6:	d100      	bne.n	8002bfa <VL53L1X_SetTimingBudgetInMs+0x6e>
 8002bf8:	e060      	b.n	8002cbc <VL53L1X_SetTimingBudgetInMs+0x130>
 8002bfa:	dd00      	ble.n	8002bfe <VL53L1X_SetTimingBudgetInMs+0x72>
 8002bfc:	e07c      	b.n	8002cf8 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d04c      	beq.n	8002c9c <VL53L1X_SetTimingBudgetInMs+0x110>
 8002c02:	dd00      	ble.n	8002c06 <VL53L1X_SetTimingBudgetInMs+0x7a>
 8002c04:	e078      	b.n	8002cf8 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8002c06:	2b32      	cmp	r3, #50	; 0x32
 8002c08:	d037      	beq.n	8002c7a <VL53L1X_SetTimingBudgetInMs+0xee>
 8002c0a:	dd00      	ble.n	8002c0e <VL53L1X_SetTimingBudgetInMs+0x82>
 8002c0c:	e074      	b.n	8002cf8 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8002c0e:	2b21      	cmp	r3, #33	; 0x21
 8002c10:	d024      	beq.n	8002c5c <VL53L1X_SetTimingBudgetInMs+0xd0>
 8002c12:	dd00      	ble.n	8002c16 <VL53L1X_SetTimingBudgetInMs+0x8a>
 8002c14:	e070      	b.n	8002cf8 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	d002      	beq.n	8002c20 <VL53L1X_SetTimingBudgetInMs+0x94>
 8002c1a:	2b14      	cmp	r3, #20
 8002c1c:	d00f      	beq.n	8002c3e <VL53L1X_SetTimingBudgetInMs+0xb2>
 8002c1e:	e06b      	b.n	8002cf8 <VL53L1X_SetTimingBudgetInMs+0x16c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	221d      	movs	r2, #29
 8002c26:	215e      	movs	r1, #94	; 0x5e
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f001 fa89 	bl	8004140 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002c2e:	1dbb      	adds	r3, r7, #6
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	2227      	movs	r2, #39	; 0x27
 8002c34:	2161      	movs	r1, #97	; 0x61
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 fa82 	bl	8004140 <VL53L1_WrWord>
					0x0027);
			break;
 8002c3c:	e0df      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002c3e:	1dbb      	adds	r3, r7, #6
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	2251      	movs	r2, #81	; 0x51
 8002c44:	215e      	movs	r1, #94	; 0x5e
 8002c46:	0018      	movs	r0, r3
 8002c48:	f001 fa7a 	bl	8004140 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002c4c:	1dbb      	adds	r3, r7, #6
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	226e      	movs	r2, #110	; 0x6e
 8002c52:	2161      	movs	r1, #97	; 0x61
 8002c54:	0018      	movs	r0, r3
 8002c56:	f001 fa73 	bl	8004140 <VL53L1_WrWord>
					0x006E);
			break;
 8002c5a:	e0d0      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002c5c:	1dbb      	adds	r3, r7, #6
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	22d6      	movs	r2, #214	; 0xd6
 8002c62:	215e      	movs	r1, #94	; 0x5e
 8002c64:	0018      	movs	r0, r3
 8002c66:	f001 fa6b 	bl	8004140 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002c6a:	1dbb      	adds	r3, r7, #6
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	226e      	movs	r2, #110	; 0x6e
 8002c70:	2161      	movs	r1, #97	; 0x61
 8002c72:	0018      	movs	r0, r3
 8002c74:	f001 fa64 	bl	8004140 <VL53L1_WrWord>
					0x006E);
			break;
 8002c78:	e0c1      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002c7a:	23d7      	movs	r3, #215	; 0xd7
 8002c7c:	005a      	lsls	r2, r3, #1
 8002c7e:	1dbb      	adds	r3, r7, #6
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	215e      	movs	r1, #94	; 0x5e
 8002c84:	0018      	movs	r0, r3
 8002c86:	f001 fa5b 	bl	8004140 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002c8a:	23f4      	movs	r3, #244	; 0xf4
 8002c8c:	005a      	lsls	r2, r3, #1
 8002c8e:	1dbb      	adds	r3, r7, #6
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	2161      	movs	r1, #97	; 0x61
 8002c94:	0018      	movs	r0, r3
 8002c96:	f001 fa53 	bl	8004140 <VL53L1_WrWord>
					0x01E8);
			break;
 8002c9a:	e0b0      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002c9c:	4a5c      	ldr	r2, [pc, #368]	; (8002e10 <VL53L1X_SetTimingBudgetInMs+0x284>)
 8002c9e:	1dbb      	adds	r3, r7, #6
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	215e      	movs	r1, #94	; 0x5e
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f001 fa4b 	bl	8004140 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002caa:	23e2      	movs	r3, #226	; 0xe2
 8002cac:	009a      	lsls	r2, r3, #2
 8002cae:	1dbb      	adds	r3, r7, #6
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	2161      	movs	r1, #97	; 0x61
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f001 fa43 	bl	8004140 <VL53L1_WrWord>
					0x0388);
			break;
 8002cba:	e0a0      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002cbc:	4a55      	ldr	r2, [pc, #340]	; (8002e14 <VL53L1X_SetTimingBudgetInMs+0x288>)
 8002cbe:	1dbb      	adds	r3, r7, #6
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	215e      	movs	r1, #94	; 0x5e
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f001 fa3b 	bl	8004140 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002cca:	4a53      	ldr	r2, [pc, #332]	; (8002e18 <VL53L1X_SetTimingBudgetInMs+0x28c>)
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	2161      	movs	r1, #97	; 0x61
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f001 fa34 	bl	8004140 <VL53L1_WrWord>
					0x0496);
			break;
 8002cd8:	e091      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002cda:	4a50      	ldr	r2, [pc, #320]	; (8002e1c <VL53L1X_SetTimingBudgetInMs+0x290>)
 8002cdc:	1dbb      	adds	r3, r7, #6
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	215e      	movs	r1, #94	; 0x5e
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f001 fa2c 	bl	8004140 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002ce8:	4a4d      	ldr	r2, [pc, #308]	; (8002e20 <VL53L1X_SetTimingBudgetInMs+0x294>)
 8002cea:	1dbb      	adds	r3, r7, #6
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	2161      	movs	r1, #97	; 0x61
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f001 fa25 	bl	8004140 <VL53L1_WrWord>
					0x05C1);
			break;
 8002cf6:	e082      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8002cf8:	230f      	movs	r3, #15
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
			break;
 8002d00:	e07d      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		}
	} else {
		switch (TimingBudgetInMs) {
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	22fa      	movs	r2, #250	; 0xfa
 8002d08:	0052      	lsls	r2, r2, #1
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d100      	bne.n	8002d10 <VL53L1X_SetTimingBudgetInMs+0x184>
 8002d0e:	e062      	b.n	8002dd6 <VL53L1X_SetTimingBudgetInMs+0x24a>
 8002d10:	22fa      	movs	r2, #250	; 0xfa
 8002d12:	0052      	lsls	r2, r2, #1
 8002d14:	4293      	cmp	r3, r2
 8002d16:	dd00      	ble.n	8002d1a <VL53L1X_SetTimingBudgetInMs+0x18e>
 8002d18:	e06c      	b.n	8002df4 <VL53L1X_SetTimingBudgetInMs+0x268>
 8002d1a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d1c:	d04b      	beq.n	8002db6 <VL53L1X_SetTimingBudgetInMs+0x22a>
 8002d1e:	dd00      	ble.n	8002d22 <VL53L1X_SetTimingBudgetInMs+0x196>
 8002d20:	e068      	b.n	8002df4 <VL53L1X_SetTimingBudgetInMs+0x268>
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d036      	beq.n	8002d94 <VL53L1X_SetTimingBudgetInMs+0x208>
 8002d26:	dd00      	ble.n	8002d2a <VL53L1X_SetTimingBudgetInMs+0x19e>
 8002d28:	e064      	b.n	8002df4 <VL53L1X_SetTimingBudgetInMs+0x268>
 8002d2a:	2b32      	cmp	r3, #50	; 0x32
 8002d2c:	d023      	beq.n	8002d76 <VL53L1X_SetTimingBudgetInMs+0x1ea>
 8002d2e:	dc61      	bgt.n	8002df4 <VL53L1X_SetTimingBudgetInMs+0x268>
 8002d30:	2b14      	cmp	r3, #20
 8002d32:	d002      	beq.n	8002d3a <VL53L1X_SetTimingBudgetInMs+0x1ae>
 8002d34:	2b21      	cmp	r3, #33	; 0x21
 8002d36:	d00f      	beq.n	8002d58 <VL53L1X_SetTimingBudgetInMs+0x1cc>
 8002d38:	e05c      	b.n	8002df4 <VL53L1X_SetTimingBudgetInMs+0x268>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002d3a:	1dbb      	adds	r3, r7, #6
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	221e      	movs	r2, #30
 8002d40:	215e      	movs	r1, #94	; 0x5e
 8002d42:	0018      	movs	r0, r3
 8002d44:	f001 f9fc 	bl	8004140 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002d48:	1dbb      	adds	r3, r7, #6
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2222      	movs	r2, #34	; 0x22
 8002d4e:	2161      	movs	r1, #97	; 0x61
 8002d50:	0018      	movs	r0, r3
 8002d52:	f001 f9f5 	bl	8004140 <VL53L1_WrWord>
					0x0022);
			break;
 8002d56:	e052      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002d58:	1dbb      	adds	r3, r7, #6
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	2260      	movs	r2, #96	; 0x60
 8002d5e:	215e      	movs	r1, #94	; 0x5e
 8002d60:	0018      	movs	r0, r3
 8002d62:	f001 f9ed 	bl	8004140 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002d66:	1dbb      	adds	r3, r7, #6
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	226e      	movs	r2, #110	; 0x6e
 8002d6c:	2161      	movs	r1, #97	; 0x61
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f001 f9e6 	bl	8004140 <VL53L1_WrWord>
					0x006E);
			break;
 8002d74:	e043      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002d76:	1dbb      	adds	r3, r7, #6
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	22ad      	movs	r2, #173	; 0xad
 8002d7c:	215e      	movs	r1, #94	; 0x5e
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f001 f9de 	bl	8004140 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002d84:	1dbb      	adds	r3, r7, #6
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	22c6      	movs	r2, #198	; 0xc6
 8002d8a:	2161      	movs	r1, #97	; 0x61
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f001 f9d7 	bl	8004140 <VL53L1_WrWord>
					0x00C6);
			break;
 8002d92:	e034      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002d94:	23e6      	movs	r3, #230	; 0xe6
 8002d96:	005a      	lsls	r2, r3, #1
 8002d98:	1dbb      	adds	r3, r7, #6
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	215e      	movs	r1, #94	; 0x5e
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f001 f9ce 	bl	8004140 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002da4:	23f5      	movs	r3, #245	; 0xf5
 8002da6:	005a      	lsls	r2, r3, #1
 8002da8:	1dbb      	adds	r3, r7, #6
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	2161      	movs	r1, #97	; 0x61
 8002dae:	0018      	movs	r0, r3
 8002db0:	f001 f9c6 	bl	8004140 <VL53L1_WrWord>
					0x01EA);
			break;
 8002db4:	e023      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <VL53L1X_SetTimingBudgetInMs+0x298>)
 8002db8:	1dbb      	adds	r3, r7, #6
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	215e      	movs	r1, #94	; 0x5e
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f001 f9be 	bl	8004140 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002dc4:	23be      	movs	r3, #190	; 0xbe
 8002dc6:	009a      	lsls	r2, r3, #2
 8002dc8:	1dbb      	adds	r3, r7, #6
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	2161      	movs	r1, #97	; 0x61
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f001 f9b6 	bl	8004140 <VL53L1_WrWord>
					0x02F8);
			break;
 8002dd4:	e013      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002dd6:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <VL53L1X_SetTimingBudgetInMs+0x29c>)
 8002dd8:	1dbb      	adds	r3, r7, #6
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	215e      	movs	r1, #94	; 0x5e
 8002dde:	0018      	movs	r0, r3
 8002de0:	f001 f9ae 	bl	8004140 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002de4:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <VL53L1X_SetTimingBudgetInMs+0x2a0>)
 8002de6:	1dbb      	adds	r3, r7, #6
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	2161      	movs	r1, #97	; 0x61
 8002dec:	0018      	movs	r0, r3
 8002dee:	f001 f9a7 	bl	8004140 <VL53L1_WrWord>
					0x04A4);
			break;
 8002df2:	e004      	b.n	8002dfe <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8002df4:	230f      	movs	r3, #15
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
			break;
 8002dfc:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 8002dfe:	230f      	movs	r3, #15
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b25b      	sxtb	r3, r3
}
 8002e06:	0018      	movs	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b004      	add	sp, #16
 8002e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	000002e1 	.word	0x000002e1
 8002e14:	000003e1 	.word	0x000003e1
 8002e18:	00000496 	.word	0x00000496
 8002e1c:	00000591 	.word	0x00000591
 8002e20:	000005c1 	.word	0x000005c1
 8002e24:	000002d9 	.word	0x000002d9
 8002e28:	0000048f 	.word	0x0000048f
 8002e2c:	000004a4 	.word	0x000004a4

08002e30 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8002e30:	b5b0      	push	{r4, r5, r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	0002      	movs	r2, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	1dbb      	adds	r3, r7, #6
 8002e3c:	801a      	strh	r2, [r3, #0]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8002e3e:	240f      	movs	r4, #15
 8002e40:	193b      	adds	r3, r7, r4
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8002e46:	250c      	movs	r5, #12
 8002e48:	197a      	adds	r2, r7, r5
 8002e4a:	1dbb      	adds	r3, r7, #6
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	215e      	movs	r1, #94	; 0x5e
 8002e50:	0018      	movs	r0, r3
 8002e52:	f001 fa45 	bl	80042e0 <VL53L1_RdWord>
 8002e56:	0003      	movs	r3, r0
 8002e58:	0019      	movs	r1, r3
 8002e5a:	193b      	adds	r3, r7, r4
 8002e5c:	193a      	adds	r2, r7, r4
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	701a      	strb	r2, [r3, #0]
	switch (Temp) {
 8002e64:	197b      	adds	r3, r7, r5
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	4a37      	ldr	r2, [pc, #220]	; (8002f48 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d100      	bne.n	8002e70 <VL53L1X_GetTimingBudgetInMs+0x40>
 8002e6e:	e057      	b.n	8002f20 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8002e70:	4a35      	ldr	r2, [pc, #212]	; (8002f48 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	dd00      	ble.n	8002e78 <VL53L1X_GetTimingBudgetInMs+0x48>
 8002e76:	e058      	b.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002e78:	4a34      	ldr	r2, [pc, #208]	; (8002f4c <VL53L1X_GetTimingBudgetInMs+0x11c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d100      	bne.n	8002e80 <VL53L1X_GetTimingBudgetInMs+0x50>
 8002e7e:	e04f      	b.n	8002f20 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8002e80:	2292      	movs	r2, #146	; 0x92
 8002e82:	00d2      	lsls	r2, r2, #3
 8002e84:	4293      	cmp	r3, r2
 8002e86:	db00      	blt.n	8002e8a <VL53L1X_GetTimingBudgetInMs+0x5a>
 8002e88:	e04f      	b.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002e8a:	4a31      	ldr	r2, [pc, #196]	; (8002f50 <VL53L1X_GetTimingBudgetInMs+0x120>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d043      	beq.n	8002f18 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8002e90:	4a2f      	ldr	r2, [pc, #188]	; (8002f50 <VL53L1X_GetTimingBudgetInMs+0x120>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	dc49      	bgt.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002e96:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <VL53L1X_GetTimingBudgetInMs+0x124>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d039      	beq.n	8002f10 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8002e9c:	4a2d      	ldr	r2, [pc, #180]	; (8002f54 <VL53L1X_GetTimingBudgetInMs+0x124>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	dc43      	bgt.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002ea2:	4a2d      	ldr	r2, [pc, #180]	; (8002f58 <VL53L1X_GetTimingBudgetInMs+0x128>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d037      	beq.n	8002f18 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <VL53L1X_GetTimingBudgetInMs+0x128>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	dc3d      	bgt.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002eae:	22e6      	movs	r2, #230	; 0xe6
 8002eb0:	0052      	lsls	r2, r2, #1
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02c      	beq.n	8002f10 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8002eb6:	22e6      	movs	r2, #230	; 0xe6
 8002eb8:	0052      	lsls	r2, r2, #1
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	dc35      	bgt.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002ebe:	22d7      	movs	r2, #215	; 0xd7
 8002ec0:	0052      	lsls	r2, r2, #1
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d020      	beq.n	8002f08 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8002ec6:	22d7      	movs	r2, #215	; 0xd7
 8002ec8:	0052      	lsls	r2, r2, #1
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	dc2d      	bgt.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002ece:	2bd6      	cmp	r3, #214	; 0xd6
 8002ed0:	d016      	beq.n	8002f00 <VL53L1X_GetTimingBudgetInMs+0xd0>
 8002ed2:	dc2a      	bgt.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002ed4:	2bad      	cmp	r3, #173	; 0xad
 8002ed6:	d017      	beq.n	8002f08 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8002ed8:	dc27      	bgt.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002eda:	2b60      	cmp	r3, #96	; 0x60
 8002edc:	d010      	beq.n	8002f00 <VL53L1X_GetTimingBudgetInMs+0xd0>
 8002ede:	dc24      	bgt.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002ee0:	2b51      	cmp	r3, #81	; 0x51
 8002ee2:	d009      	beq.n	8002ef8 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8002ee4:	dc21      	bgt.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8002ee6:	2b1d      	cmp	r3, #29
 8002ee8:	d002      	beq.n	8002ef0 <VL53L1X_GetTimingBudgetInMs+0xc0>
 8002eea:	2b1e      	cmp	r3, #30
 8002eec:	d004      	beq.n	8002ef8 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8002eee:	e01c      	b.n	8002f2a <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x001D :
			*pTimingBudget = 15;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	801a      	strh	r2, [r3, #0]
			break;
 8002ef6:	e01f      	b.n	8002f38 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2214      	movs	r2, #20
 8002efc:	801a      	strh	r2, [r3, #0]
			break;
 8002efe:	e01b      	b.n	8002f38 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	801a      	strh	r2, [r3, #0]
			break;
 8002f06:	e017      	b.n	8002f38 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2232      	movs	r2, #50	; 0x32
 8002f0c:	801a      	strh	r2, [r3, #0]
			break;
 8002f0e:	e013      	b.n	8002f38 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2264      	movs	r2, #100	; 0x64
 8002f14:	801a      	strh	r2, [r3, #0]
			break;
 8002f16:	e00f      	b.n	8002f38 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	22c8      	movs	r2, #200	; 0xc8
 8002f1c:	801a      	strh	r2, [r3, #0]
			break;
 8002f1e:	e00b      	b.n	8002f38 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	22fa      	movs	r2, #250	; 0xfa
 8002f24:	0052      	lsls	r2, r2, #1
 8002f26:	801a      	strh	r2, [r3, #0]
			break;
 8002f28:	e006      	b.n	8002f38 <VL53L1X_GetTimingBudgetInMs+0x108>
		default:
			status = 1;
 8002f2a:	230f      	movs	r3, #15
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
			*pTimingBudget = 0;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8002f38:	230f      	movs	r3, #15
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b25b      	sxtb	r3, r3
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b004      	add	sp, #16
 8002f46:	bdb0      	pop	{r4, r5, r7, pc}
 8002f48:	00000591 	.word	0x00000591
 8002f4c:	0000048f 	.word	0x0000048f
 8002f50:	000003e1 	.word	0x000003e1
 8002f54:	000002e1 	.word	0x000002e1
 8002f58:	000002d9 	.word	0x000002d9

08002f5c <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	0002      	movs	r2, r0
 8002f64:	1dbb      	adds	r3, r7, #6
 8002f66:	801a      	strh	r2, [r3, #0]
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	1c0a      	adds	r2, r1, #0
 8002f6c:	801a      	strh	r2, [r3, #0]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8002f6e:	240f      	movs	r4, #15
 8002f70:	193b      	adds	r3, r7, r4
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8002f76:	230c      	movs	r3, #12
 8002f78:	18fa      	adds	r2, r7, r3
 8002f7a:	1dbb      	adds	r3, r7, #6
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff ff55 	bl	8002e30 <VL53L1X_GetTimingBudgetInMs>
 8002f86:	0003      	movs	r3, r0
 8002f88:	0019      	movs	r1, r3
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	193a      	adds	r2, r7, r4
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	701a      	strb	r2, [r3, #0]
	if (status != 0)
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <VL53L1X_SetDistanceMode+0x46>
		return 1;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0a1      	b.n	80030e6 <VL53L1X_SetDistanceMode+0x18a>
	switch (DM) {
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d002      	beq.n	8002fb0 <VL53L1X_SetDistanceMode+0x54>
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d03e      	beq.n	800302c <VL53L1X_SetDistanceMode+0xd0>
 8002fae:	e07b      	b.n	80030a8 <VL53L1X_SetDistanceMode+0x14c>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8002fb0:	250f      	movs	r5, #15
 8002fb2:	197c      	adds	r4, r7, r5
 8002fb4:	1dbb      	adds	r3, r7, #6
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	2214      	movs	r2, #20
 8002fba:	214b      	movs	r1, #75	; 0x4b
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f001 f883 	bl	80040c8 <VL53L1_WrByte>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8002fc6:	197c      	adds	r4, r7, r5
 8002fc8:	1dbb      	adds	r3, r7, #6
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	2207      	movs	r2, #7
 8002fce:	2160      	movs	r1, #96	; 0x60
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f001 f879 	bl	80040c8 <VL53L1_WrByte>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8002fda:	197c      	adds	r4, r7, r5
 8002fdc:	1dbb      	adds	r3, r7, #6
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	2205      	movs	r2, #5
 8002fe2:	2163      	movs	r1, #99	; 0x63
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 f86f 	bl	80040c8 <VL53L1_WrByte>
 8002fea:	0003      	movs	r3, r0
 8002fec:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8002fee:	197c      	adds	r4, r7, r5
 8002ff0:	1dbb      	adds	r3, r7, #6
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	2238      	movs	r2, #56	; 0x38
 8002ff6:	2169      	movs	r1, #105	; 0x69
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 f865 	bl	80040c8 <VL53L1_WrByte>
 8002ffe:	0003      	movs	r3, r0
 8003000:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8003002:	197c      	adds	r4, r7, r5
 8003004:	4a3a      	ldr	r2, [pc, #232]	; (80030f0 <VL53L1X_SetDistanceMode+0x194>)
 8003006:	1dbb      	adds	r3, r7, #6
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	2178      	movs	r1, #120	; 0x78
 800300c:	0018      	movs	r0, r3
 800300e:	f001 f897 	bl	8004140 <VL53L1_WrWord>
 8003012:	0003      	movs	r3, r0
 8003014:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8003016:	197c      	adds	r4, r7, r5
 8003018:	4a36      	ldr	r2, [pc, #216]	; (80030f4 <VL53L1X_SetDistanceMode+0x198>)
 800301a:	1dbb      	adds	r3, r7, #6
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	217a      	movs	r1, #122	; 0x7a
 8003020:	0018      	movs	r0, r3
 8003022:	f001 f88d 	bl	8004140 <VL53L1_WrWord>
 8003026:	0003      	movs	r3, r0
 8003028:	7023      	strb	r3, [r4, #0]
		break;
 800302a:	e042      	b.n	80030b2 <VL53L1X_SetDistanceMode+0x156>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 800302c:	250f      	movs	r5, #15
 800302e:	197c      	adds	r4, r7, r5
 8003030:	1dbb      	adds	r3, r7, #6
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	220a      	movs	r2, #10
 8003036:	214b      	movs	r1, #75	; 0x4b
 8003038:	0018      	movs	r0, r3
 800303a:	f001 f845 	bl	80040c8 <VL53L1_WrByte>
 800303e:	0003      	movs	r3, r0
 8003040:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8003042:	197c      	adds	r4, r7, r5
 8003044:	1dbb      	adds	r3, r7, #6
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	220f      	movs	r2, #15
 800304a:	2160      	movs	r1, #96	; 0x60
 800304c:	0018      	movs	r0, r3
 800304e:	f001 f83b 	bl	80040c8 <VL53L1_WrByte>
 8003052:	0003      	movs	r3, r0
 8003054:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8003056:	197c      	adds	r4, r7, r5
 8003058:	1dbb      	adds	r3, r7, #6
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	220d      	movs	r2, #13
 800305e:	2163      	movs	r1, #99	; 0x63
 8003060:	0018      	movs	r0, r3
 8003062:	f001 f831 	bl	80040c8 <VL53L1_WrByte>
 8003066:	0003      	movs	r3, r0
 8003068:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 800306a:	197c      	adds	r4, r7, r5
 800306c:	1dbb      	adds	r3, r7, #6
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	22b8      	movs	r2, #184	; 0xb8
 8003072:	2169      	movs	r1, #105	; 0x69
 8003074:	0018      	movs	r0, r3
 8003076:	f001 f827 	bl	80040c8 <VL53L1_WrByte>
 800307a:	0003      	movs	r3, r0
 800307c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 800307e:	197c      	adds	r4, r7, r5
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <VL53L1X_SetDistanceMode+0x19c>)
 8003082:	1dbb      	adds	r3, r7, #6
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	2178      	movs	r1, #120	; 0x78
 8003088:	0018      	movs	r0, r3
 800308a:	f001 f859 	bl	8004140 <VL53L1_WrWord>
 800308e:	0003      	movs	r3, r0
 8003090:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8003092:	197c      	adds	r4, r7, r5
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <VL53L1X_SetDistanceMode+0x1a0>)
 8003096:	1dbb      	adds	r3, r7, #6
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	217a      	movs	r1, #122	; 0x7a
 800309c:	0018      	movs	r0, r3
 800309e:	f001 f84f 	bl	8004140 <VL53L1_WrWord>
 80030a2:	0003      	movs	r3, r0
 80030a4:	7023      	strb	r3, [r4, #0]
		break;
 80030a6:	e004      	b.n	80030b2 <VL53L1X_SetDistanceMode+0x156>
	default:
		status = 1;
 80030a8:	230f      	movs	r3, #15
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
		break;
 80030b0:	46c0      	nop			; (mov r8, r8)
	}

	if (status == 0)
 80030b2:	240f      	movs	r4, #15
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b25b      	sxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <VL53L1X_SetDistanceMode+0x182>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 80030be:	230c      	movs	r3, #12
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	1dbb      	adds	r3, r7, #6
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	0011      	movs	r1, r2
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff fd5e 	bl	8002b8c <VL53L1X_SetTimingBudgetInMs>
 80030d0:	0003      	movs	r3, r0
 80030d2:	0019      	movs	r1, r3
 80030d4:	193b      	adds	r3, r7, r4
 80030d6:	193a      	adds	r2, r7, r4
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	701a      	strb	r2, [r3, #0]
	return status;
 80030de:	230f      	movs	r3, #15
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b25b      	sxtb	r3, r3
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b004      	add	sp, #16
 80030ec:	bdb0      	pop	{r4, r5, r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	00000705 	.word	0x00000705
 80030f4:	00000606 	.word	0x00000606
 80030f8:	00000f0d 	.word	0x00000f0d
 80030fc:	00000e0e 	.word	0x00000e0e

08003100 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	0002      	movs	r2, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	1dbb      	adds	r3, r7, #6
 800310c:	801a      	strh	r2, [r3, #0]
	uint8_t TempDM, status=0;
 800310e:	240f      	movs	r4, #15
 8003110:	193b      	adds	r3, r7, r4
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8003116:	250e      	movs	r5, #14
 8003118:	197a      	adds	r2, r7, r5
 800311a:	1dbb      	adds	r3, r7, #6
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	214b      	movs	r1, #75	; 0x4b
 8003120:	0018      	movs	r0, r3
 8003122:	f001 f897 	bl	8004254 <VL53L1_RdByte>
 8003126:	0003      	movs	r3, r0
 8003128:	001a      	movs	r2, r3
 800312a:	193b      	adds	r3, r7, r4
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	4313      	orrs	r3, r2
 8003132:	b25a      	sxtb	r2, r3
 8003134:	193b      	adds	r3, r7, r4
 8003136:	701a      	strb	r2, [r3, #0]
	if (TempDM == 0x14)
 8003138:	197b      	adds	r3, r7, r5
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b14      	cmp	r3, #20
 800313e:	d102      	bne.n	8003146 <VL53L1X_GetDistanceMode+0x46>
		*DM=1;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2201      	movs	r2, #1
 8003144:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8003146:	230e      	movs	r3, #14
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b0a      	cmp	r3, #10
 800314e:	d102      	bne.n	8003156 <VL53L1X_GetDistanceMode+0x56>
		*DM=2;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2202      	movs	r2, #2
 8003154:	801a      	strh	r2, [r3, #0]
	return status;
 8003156:	230f      	movs	r3, #15
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b25b      	sxtb	r3, r3
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003168 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8003168:	b5b0      	push	{r4, r5, r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	0002      	movs	r2, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	1dbb      	adds	r3, r7, #6
 8003174:	801a      	strh	r2, [r3, #0]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8003176:	240f      	movs	r4, #15
 8003178:	193b      	adds	r3, r7, r4
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 800317e:	250c      	movs	r5, #12
 8003180:	197a      	adds	r2, r7, r5
 8003182:	1dbb      	adds	r3, r7, #6
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	21de      	movs	r1, #222	; 0xde
 8003188:	0018      	movs	r0, r3
 800318a:	f001 f8a9 	bl	80042e0 <VL53L1_RdWord>
 800318e:	0003      	movs	r3, r0
 8003190:	0019      	movs	r1, r3
 8003192:	193b      	adds	r3, r7, r4
 8003194:	193a      	adds	r2, r7, r4
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	701a      	strb	r2, [r3, #0]
	ClockPLL = ClockPLL&0x3FF;
 800319c:	197b      	adds	r3, r7, r5
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	059b      	lsls	r3, r3, #22
 80031a2:	0d9b      	lsrs	r3, r3, #22
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	197b      	adds	r3, r7, r5
 80031a8:	801a      	strh	r2, [r3, #0]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 80031aa:	197b      	adds	r3, r7, r5
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	001a      	movs	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4353      	muls	r3, r2
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff f911 	bl	80023dc <__aeabi_ui2d>
 80031ba:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <VL53L1X_SetInterMeasurementInMs+0x84>)
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <VL53L1X_SetInterMeasurementInMs+0x88>)
 80031be:	f7fe fad9 	bl	8001774 <__aeabi_dmul>
 80031c2:	0002      	movs	r2, r0
 80031c4:	000b      	movs	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 80031c6:	0010      	movs	r0, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	f7fd f8db 	bl	8000384 <__aeabi_d2uiz>
 80031ce:	0002      	movs	r2, r0
 80031d0:	1dbb      	adds	r3, r7, #6
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	216c      	movs	r1, #108	; 0x6c
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 fff6 	bl	80041c8 <VL53L1_WrDWord>
	return status;
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b25b      	sxtb	r3, r3

}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b004      	add	sp, #16
 80031e8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	33333333 	.word	0x33333333
 80031f0:	3ff13333 	.word	0x3ff13333

080031f4 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	0002      	movs	r2, r0
 80031fc:	6039      	str	r1, [r7, #0]
 80031fe:	1dbb      	adds	r3, r7, #6
 8003200:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003202:	240f      	movs	r4, #15
 8003204:	193b      	adds	r3, r7, r4
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 800320a:	250e      	movs	r5, #14
 800320c:	197b      	adds	r3, r7, r5
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8003212:	197a      	adds	r2, r7, r5
 8003214:	1dbb      	adds	r3, r7, #6
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	21e5      	movs	r1, #229	; 0xe5
 800321a:	0018      	movs	r0, r3
 800321c:	f001 f81a 	bl	8004254 <VL53L1_RdByte>
 8003220:	0003      	movs	r3, r0
 8003222:	0019      	movs	r1, r3
 8003224:	193b      	adds	r3, r7, r4
 8003226:	193a      	adds	r2, r7, r4
 8003228:	7812      	ldrb	r2, [r2, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	701a      	strb	r2, [r3, #0]
	*state = tmp;
 800322e:	197b      	adds	r3, r7, r5
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	701a      	strb	r2, [r3, #0]
	return status;
 8003236:	193b      	adds	r3, r7, r4
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	b25b      	sxtb	r3, r3
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b004      	add	sp, #16
 8003242:	bdb0      	pop	{r4, r5, r7, pc}

08003244 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8003244:	b5b0      	push	{r4, r5, r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	0002      	movs	r2, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	1dbb      	adds	r3, r7, #6
 8003250:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003252:	240f      	movs	r4, #15
 8003254:	193b      	adds	r3, r7, r4
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 800325a:	250c      	movs	r5, #12
 800325c:	197a      	adds	r2, r7, r5
 800325e:	1dbb      	adds	r3, r7, #6
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	2196      	movs	r1, #150	; 0x96
 8003264:	0018      	movs	r0, r3
 8003266:	f001 f83b 	bl	80042e0 <VL53L1_RdWord>
 800326a:	0003      	movs	r3, r0
 800326c:	0019      	movs	r1, r3
 800326e:	0020      	movs	r0, r4
 8003270:	183b      	adds	r3, r7, r0
 8003272:	183a      	adds	r2, r7, r0
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800327a:	197b      	adds	r3, r7, r5
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	801a      	strh	r2, [r3, #0]
	return status;
 8003282:	183b      	adds	r3, r7, r0
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b25b      	sxtb	r3, r3
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b004      	add	sp, #16
 800328e:	bdb0      	pop	{r4, r5, r7, pc}

08003290 <bma_write>:
#include "akcelerometr.h"


void bma_write (uint8_t reg, uint8_t value)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af02      	add	r7, sp, #8
 8003296:	0002      	movs	r2, r0
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	1dbb      	adds	r3, r7, #6
 800329e:	1c0a      	adds	r2, r1, #0
 80032a0:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = reg;
 80032a2:	210c      	movs	r1, #12
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	1dfa      	adds	r2, r7, #7
 80032a8:	7812      	ldrb	r2, [r2, #0]
 80032aa:	701a      	strb	r2, [r3, #0]
	data[1] = value;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	1dba      	adds	r2, r7, #6
 80032b0:	7812      	ldrb	r2, [r2, #0]
 80032b2:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&I2C_NO, bma_adr, data, 2, 10);
 80032b4:	187a      	adds	r2, r7, r1
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <bma_write+0x3c>)
 80032b8:	230a      	movs	r3, #10
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2302      	movs	r3, #2
 80032be:	2114      	movs	r1, #20
 80032c0:	f001 fc04 	bl	8004acc <HAL_I2C_Master_Transmit>

}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	2000008c 	.word	0x2000008c

080032d0 <bma_read>:


int8_t bma_read (uint8_t reg, uint8_t numberofbytes)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af04      	add	r7, sp, #16
 80032d6:	0002      	movs	r2, r0
 80032d8:	1dfb      	adds	r3, r7, #7
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	1dbb      	adds	r3, r7, #6
 80032de:	1c0a      	adds	r2, r1, #0
 80032e0:	701a      	strb	r2, [r3, #0]
	int8_t odakcel;

	int8_t temp_data_rec[1];
	temp_data_rec[0] = 0;
 80032e2:	240c      	movs	r4, #12
 80032e4:	193b      	adds	r3, r7, r4
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&I2C_NO, bma_adr, reg, 1, temp_data_rec, numberofbytes, 100);
 80032ea:	1dfb      	adds	r3, r7, #7
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	480c      	ldr	r0, [pc, #48]	; (8003328 <bma_read+0x58>)
 80032f8:	2164      	movs	r1, #100	; 0x64
 80032fa:	9102      	str	r1, [sp, #8]
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2301      	movs	r3, #1
 8003304:	2114      	movs	r1, #20
 8003306:	f001 fdf1 	bl	8004eec <HAL_I2C_Mem_Read>
	odakcel = (temp_data_rec[0] >> 2);
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2200      	movs	r2, #0
 800330e:	569a      	ldrsb	r2, [r3, r2]
 8003310:	210f      	movs	r1, #15
 8003312:	187b      	adds	r3, r7, r1
 8003314:	1092      	asrs	r2, r2, #2
 8003316:	701a      	strb	r2, [r3, #0]
	return odakcel;
 8003318:	187b      	adds	r3, r7, r1
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b25b      	sxtb	r3, r3
}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	b005      	add	sp, #20
 8003324:	bd90      	pop	{r4, r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	2000008c 	.word	0x2000008c

0800332c <bma_init>:


void bma_init (void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0

	bma_write(0x22,0x00);
 8003330:	2100      	movs	r1, #0
 8003332:	2022      	movs	r0, #34	; 0x22
 8003334:	f7ff ffac 	bl	8003290 <bma_write>

	bma_write(0x20,0x05);
 8003338:	2105      	movs	r1, #5
 800333a:	2020      	movs	r0, #32
 800333c:	f7ff ffa8 	bl	8003290 <bma_write>

	bma_write(0x1A,0x04);
 8003340:	2104      	movs	r1, #4
 8003342:	201a      	movs	r0, #26
 8003344:	f7ff ffa4 	bl	8003290 <bma_write>

}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <IR_Init>:
#define dev 0x52  // address of IR distance sensor



void IR_Init()
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
	uint8_t sensorState=0;
 8003354:	1dfb      	adds	r3, r7, #7
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
	 while(sensorState==0){
 800335a:	e007      	b.n	800336c <IR_Init+0x1e>
			VL53L1X_BootState(dev, &sensorState);
 800335c:	1dfb      	adds	r3, r7, #7
 800335e:	0019      	movs	r1, r3
 8003360:	2052      	movs	r0, #82	; 0x52
 8003362:	f7ff ff47 	bl	80031f4 <VL53L1X_BootState>
		HAL_Delay(2);
 8003366:	2002      	movs	r0, #2
 8003368:	f001 f8a6 	bl	80044b8 <HAL_Delay>
	 while(sensorState==0){
 800336c:	1dfb      	adds	r3, r7, #7
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f3      	beq.n	800335c <IR_Init+0xe>
	  }


	  /* This function must to be called to initialize the sensor with the default setting  */
	  VL53L1X_SensorInit(dev);
 8003374:	2052      	movs	r0, #82	; 0x52
 8003376:	f7ff fa9b 	bl	80028b0 <VL53L1X_SensorInit>
	  /* Optional functions to be used to change the main ranging parameters according the application requirements to get the best ranging performances */
	  VL53L1X_SetDistanceMode(dev, 1); /* 1=short, 2=long */
 800337a:	2101      	movs	r1, #1
 800337c:	2052      	movs	r0, #82	; 0x52
 800337e:	f7ff fded 	bl	8002f5c <VL53L1X_SetDistanceMode>
	  VL53L1X_SetTimingBudgetInMs(dev, 100); /* in ms possible values [20, 50, 100, 200, 500] */
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	2052      	movs	r0, #82	; 0x52
 8003386:	f7ff fc01 	bl	8002b8c <VL53L1X_SetTimingBudgetInMs>
	  VL53L1X_SetInterMeasurementInMs(dev, 100); /* in ms, IM must be > = TB */
 800338a:	2164      	movs	r1, #100	; 0x64
 800338c:	2052      	movs	r0, #82	; 0x52
 800338e:	f7ff feeb 	bl	8003168 <VL53L1X_SetInterMeasurementInMs>
	//  status = VL53L1X_SetOffset(dev,20); /* offset compensation in mm */
	//  status = VL53L1X_SetROI(dev, 16, 16); /* minimum ROI 4,4 */
	//	status = VL53L1X_CalibrateOffset(dev, 140, &offset); /* may take few second to perform the offset cal*/
	//	status = VL53L1X_CalibrateXtalk(dev, 1000, &xtalk); /* may take few second to perform the xtalk cal */
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b002      	add	sp, #8
 8003398:	bd80      	pop	{r7, pc}

0800339a <IR_Get_Distance>:


uint16_t IR_Get_Distance()
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
	uint8_t sensorState=0;
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
//	if(VL53L1X_BootState(dev, &sensorState)==0)
//	{
//		return 1;
//	}

	VL53L1X_StartRanging(dev);
 80033a6:	2052      	movs	r0, #82	; 0x52
 80033a8:	f7ff fb6c 	bl	8002a84 <VL53L1X_StartRanging>

	while (dataReady == 0){
 80033ac:	e007      	b.n	80033be <IR_Get_Distance+0x24>
			  VL53L1X_CheckForDataReady(dev, &dataReady);
 80033ae:	1cfb      	adds	r3, r7, #3
 80033b0:	0019      	movs	r1, r3
 80033b2:	2052      	movs	r0, #82	; 0x52
 80033b4:	f7ff fba4 	bl	8002b00 <VL53L1X_CheckForDataReady>
			  HAL_Delay(2);
 80033b8:	2002      	movs	r0, #2
 80033ba:	f001 f87d 	bl	80044b8 <HAL_Delay>
	while (dataReady == 0){
 80033be:	1cfb      	adds	r3, r7, #3
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f3      	beq.n	80033ae <IR_Get_Distance+0x14>
		  }
		  dataReady = 0;
 80033c6:	1cfb      	adds	r3, r7, #3
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
		  VL53L1X_GetDistance(dev, &Distance);
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	0019      	movs	r1, r3
 80033d0:	2052      	movs	r0, #82	; 0x52
 80033d2:	f7ff ff37 	bl	8003244 <VL53L1X_GetDistance>

		  VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt*/
 80033d6:	2052      	movs	r0, #82	; 0x52
 80033d8:	f7ff fb02 	bl	80029e0 <VL53L1X_ClearInterrupt>
		  VL53L1X_StopRanging(dev);
 80033dc:	2052      	movs	r0, #82	; 0x52
 80033de:	f7ff fb70 	bl	8002ac2 <VL53L1X_StopRanging>
		  return Distance;
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	881b      	ldrh	r3, [r3, #0]
}
 80033e6:	0018      	movs	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b002      	add	sp, #8
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f6:	240c      	movs	r4, #12
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	0018      	movs	r0, r3
 80033fc:	2314      	movs	r3, #20
 80033fe:	001a      	movs	r2, r3
 8003400:	2100      	movs	r1, #0
 8003402:	f004 fbe4 	bl	8007bce <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003406:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <MX_GPIO_Init+0xc0>)
 8003408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <MX_GPIO_Init+0xc0>)
 800340c:	2104      	movs	r1, #4
 800340e:	430a      	orrs	r2, r1
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c
 8003412:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <MX_GPIO_Init+0xc0>)
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	2204      	movs	r2, #4
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800341e:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <MX_GPIO_Init+0xc0>)
 8003420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <MX_GPIO_Init+0xc0>)
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	430a      	orrs	r2, r1
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c
 800342a:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <MX_GPIO_Init+0xc0>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	4013      	ands	r3, r2
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003436:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <MX_GPIO_Init+0xc0>)
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <MX_GPIO_Init+0xc0>)
 800343c:	2101      	movs	r1, #1
 800343e:	430a      	orrs	r2, r1
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <MX_GPIO_Init+0xc0>)
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800344e:	23a0      	movs	r3, #160	; 0xa0
 8003450:	05db      	lsls	r3, r3, #23
 8003452:	2200      	movs	r2, #0
 8003454:	2120      	movs	r1, #32
 8003456:	0018      	movs	r0, r3
 8003458:	f001 fa84 	bl	8004964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800345c:	193b      	adds	r3, r7, r4
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	0192      	lsls	r2, r2, #6
 8003462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003464:	193b      	adds	r3, r7, r4
 8003466:	2284      	movs	r2, #132	; 0x84
 8003468:	0392      	lsls	r2, r2, #14
 800346a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	193b      	adds	r3, r7, r4
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003472:	193b      	adds	r3, r7, r4
 8003474:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <MX_GPIO_Init+0xc4>)
 8003476:	0019      	movs	r1, r3
 8003478:	0010      	movs	r0, r2
 800347a:	f001 f8f5 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800347e:	0021      	movs	r1, r4
 8003480:	187b      	adds	r3, r7, r1
 8003482:	2220      	movs	r2, #32
 8003484:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003486:	187b      	adds	r3, r7, r1
 8003488:	2201      	movs	r2, #1
 800348a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	187b      	adds	r3, r7, r1
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003492:	187b      	adds	r3, r7, r1
 8003494:	2200      	movs	r2, #0
 8003496:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003498:	187a      	adds	r2, r7, r1
 800349a:	23a0      	movs	r3, #160	; 0xa0
 800349c:	05db      	lsls	r3, r3, #23
 800349e:	0011      	movs	r1, r2
 80034a0:	0018      	movs	r0, r3
 80034a2:	f001 f8e1 	bl	8004668 <HAL_GPIO_Init>

}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b009      	add	sp, #36	; 0x24
 80034ac:	bd90      	pop	{r4, r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	40021000 	.word	0x40021000
 80034b4:	50000800 	.word	0x50000800

080034b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <MX_I2C1_Init+0x74>)
 80034be:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <MX_I2C1_Init+0x78>)
 80034c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80034c2:	4b1a      	ldr	r3, [pc, #104]	; (800352c <MX_I2C1_Init+0x74>)
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <MX_I2C1_Init+0x7c>)
 80034c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034c8:	4b18      	ldr	r3, [pc, #96]	; (800352c <MX_I2C1_Init+0x74>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <MX_I2C1_Init+0x74>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034d4:	4b15      	ldr	r3, [pc, #84]	; (800352c <MX_I2C1_Init+0x74>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <MX_I2C1_Init+0x74>)
 80034dc:	2200      	movs	r2, #0
 80034de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <MX_I2C1_Init+0x74>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <MX_I2C1_Init+0x74>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <MX_I2C1_Init+0x74>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <MX_I2C1_Init+0x74>)
 80034f4:	0018      	movs	r0, r3
 80034f6:	f001 fa53 	bl	80049a0 <HAL_I2C_Init>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80034fe:	f000 fab3 	bl	8003a68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <MX_I2C1_Init+0x74>)
 8003504:	2100      	movs	r1, #0
 8003506:	0018      	movs	r0, r3
 8003508:	f002 f87e 	bl	8005608 <HAL_I2CEx_ConfigAnalogFilter>
 800350c:	1e03      	subs	r3, r0, #0
 800350e:	d001      	beq.n	8003514 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003510:	f000 faaa 	bl	8003a68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <MX_I2C1_Init+0x74>)
 8003516:	2100      	movs	r1, #0
 8003518:	0018      	movs	r0, r3
 800351a:	f002 f8c1 	bl	80056a0 <HAL_I2CEx_ConfigDigitalFilter>
 800351e:	1e03      	subs	r3, r0, #0
 8003520:	d001      	beq.n	8003526 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003522:	f000 faa1 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	2000008c 	.word	0x2000008c
 8003530:	40005400 	.word	0x40005400
 8003534:	00707cbb 	.word	0x00707cbb

08003538 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	240c      	movs	r4, #12
 8003542:	193b      	adds	r3, r7, r4
 8003544:	0018      	movs	r0, r3
 8003546:	2314      	movs	r3, #20
 8003548:	001a      	movs	r2, r3
 800354a:	2100      	movs	r1, #0
 800354c:	f004 fb3f 	bl	8007bce <memset>
  if(i2cHandle->Instance==I2C1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <HAL_I2C_MspInit+0x80>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12a      	bne.n	80035b0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	4b18      	ldr	r3, [pc, #96]	; (80035bc <HAL_I2C_MspInit+0x84>)
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_I2C_MspInit+0x84>)
 8003560:	2101      	movs	r1, #1
 8003562:	430a      	orrs	r2, r1
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_I2C_MspInit+0x84>)
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	2201      	movs	r2, #1
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003572:	193b      	adds	r3, r7, r4
 8003574:	22c0      	movs	r2, #192	; 0xc0
 8003576:	00d2      	lsls	r2, r2, #3
 8003578:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800357a:	0021      	movs	r1, r4
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2212      	movs	r2, #18
 8003580:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2201      	movs	r2, #1
 8003586:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003588:	187b      	adds	r3, r7, r1
 800358a:	2203      	movs	r2, #3
 800358c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800358e:	187b      	adds	r3, r7, r1
 8003590:	2206      	movs	r2, #6
 8003592:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	187a      	adds	r2, r7, r1
 8003596:	23a0      	movs	r3, #160	; 0xa0
 8003598:	05db      	lsls	r3, r3, #23
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f001 f863 	bl	8004668 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_I2C_MspInit+0x84>)
 80035a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_I2C_MspInit+0x84>)
 80035a8:	2180      	movs	r1, #128	; 0x80
 80035aa:	0389      	lsls	r1, r1, #14
 80035ac:	430a      	orrs	r2, r1
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b009      	add	sp, #36	; 0x24
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	40005400 	.word	0x40005400
 80035bc:	40021000 	.word	0x40021000

080035c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b08b      	sub	sp, #44	; 0x2c
 80035c4:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035c6:	f000 ff07 	bl	80043d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035ca:	f000 f891 	bl	80036f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ce:	f7ff ff0f 	bl	80033f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80035d2:	f7ff ff71 	bl	80034b8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80035d6:	f000 fcbd 	bl	8003f54 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80035da:	f000 fb27 	bl	8003c2c <MX_TIM2_Init>
  MX_TIM3_Init();
 80035de:	f000 fba5 	bl	8003d2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  bma_init();
 80035e2:	f7ff fea3 	bl	800332c <bma_init>
  IR_Init();
 80035e6:	f7ff feb2 	bl	800334e <IR_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <main+0x110>)
 80035ec:	2100      	movs	r1, #0
 80035ee:	0018      	movs	r0, r3
 80035f0:	f003 f896 	bl	8006720 <HAL_TIM_PWM_Start>

  //PID VARIABLES INIT
  PID.Kd = 0.0;
 80035f4:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <main+0x114>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  PID.Ki = 0.0;
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <main+0x114>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	60da      	str	r2, [r3, #12]
  PID.Kp = 1.0;
 8003600:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <main+0x114>)
 8003602:	22fe      	movs	r2, #254	; 0xfe
 8003604:	0592      	lsls	r2, r2, #22
 8003606:	605a      	str	r2, [r3, #4]
  PID.time_old = HAL_GetTick();
 8003608:	f000 ff4c 	bl	80044a4 <HAL_GetTick>
 800360c:	0002      	movs	r2, r0
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <main+0x114>)
 8003610:	611a      	str	r2, [r3, #16]
  PID.set_point = 200;
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <main+0x114>)
 8003614:	22c8      	movs	r2, #200	; 0xc8
 8003616:	801a      	strh	r2, [r3, #0]
  {

	 //koniec rynienki 355
	 //srodek rynienki 205
	 // lewo 55
	 data_recdist = IR_Get_Distance();
 8003618:	f7ff febf 	bl	800339a <IR_Get_Distance>
 800361c:	0003      	movs	r3, r0
 800361e:	001a      	movs	r2, r3
 8003620:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <main+0x118>)
 8003622:	801a      	strh	r2, [r3, #0]
	 data_recangle = bma_read(bma_x,1);
 8003624:	2101      	movs	r1, #1
 8003626:	2004      	movs	r0, #4
 8003628:	f7ff fe52 	bl	80032d0 <bma_read>
 800362c:	0003      	movs	r3, r0
 800362e:	001a      	movs	r2, r3
 8003630:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <main+0x11c>)
 8003632:	701a      	strb	r2, [r3, #0]
	 data_PID_total = PIDRegulator(data_recdist, PID);
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <main+0x118>)
 8003636:	881c      	ldrh	r4, [r3, #0]
 8003638:	4826      	ldr	r0, [pc, #152]	; (80036d4 <main+0x114>)
 800363a:	466b      	mov	r3, sp
 800363c:	001a      	movs	r2, r3
 800363e:	0003      	movs	r3, r0
 8003640:	330c      	adds	r3, #12
 8003642:	cb62      	ldmia	r3!, {r1, r5, r6}
 8003644:	c262      	stmia	r2!, {r1, r5, r6}
 8003646:	cb62      	ldmia	r3!, {r1, r5, r6}
 8003648:	c262      	stmia	r2!, {r1, r5, r6}
 800364a:	cb62      	ldmia	r3!, {r1, r5, r6}
 800364c:	c262      	stmia	r2!, {r1, r5, r6}
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	6801      	ldr	r1, [r0, #0]
 8003654:	6842      	ldr	r2, [r0, #4]
 8003656:	6883      	ldr	r3, [r0, #8]
 8003658:	0020      	movs	r0, r4
 800365a:	f000 f8bf 	bl	80037dc <PIDRegulator>
 800365e:	1c02      	adds	r2, r0, #0
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <main+0x120>)
 8003662:	601a      	str	r2, [r3, #0]
//	 set_move(10,1);
//	 HAL_Delay(3000);
//	 stop_servo();
	 if(data_PID_total<0)
 8003664:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <main+0x120>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2100      	movs	r1, #0
 800366a:	1c18      	adds	r0, r3, #0
 800366c:	f7fc fdfc 	bl	8000268 <__aeabi_fcmplt>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d009      	beq.n	8003688 <main+0xc8>
	 {
		 set_move(-data_PID_total, 1);
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <main+0x120>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	0612      	lsls	r2, r2, #24
 800367c:	4053      	eors	r3, r2
 800367e:	2101      	movs	r1, #1
 8003680:	1c18      	adds	r0, r3, #0
 8003682:	f000 f9f7 	bl	8003a74 <set_move>
 8003686:	e00d      	b.n	80036a4 <main+0xe4>
	 }
	 else if (data_PID_total>0)
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <main+0x120>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2100      	movs	r1, #0
 800368e:	1c18      	adds	r0, r3, #0
 8003690:	f7fc fdfe 	bl	8000290 <__aeabi_fcmpgt>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d005      	beq.n	80036a4 <main+0xe4>
	 {
		 set_move(data_PID_total, 0);
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <main+0x120>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2100      	movs	r1, #0
 800369e:	1c18      	adds	r0, r3, #0
 80036a0:	f000 f9e8 	bl	8003a74 <set_move>
	 }


	 // uart test
	 sprintf((char*)msg,"Odczyt: %d\n",data_recdist);
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <main+0x118>)
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	001a      	movs	r2, r3
 80036aa:	490e      	ldr	r1, [pc, #56]	; (80036e4 <main+0x124>)
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <main+0x128>)
 80036ae:	0018      	movs	r0, r3
 80036b0:	f004 fa96 	bl	8007be0 <siprintf>


	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),1000);
 80036b4:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <main+0x128>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fc fd26 	bl	8000108 <strlen>
 80036bc:	0003      	movs	r3, r0
 80036be:	b29a      	uxth	r2, r3
 80036c0:	23fa      	movs	r3, #250	; 0xfa
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4908      	ldr	r1, [pc, #32]	; (80036e8 <main+0x128>)
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <main+0x12c>)
 80036c8:	f003 fd46 	bl	8007158 <HAL_UART_Transmit>
  {
 80036cc:	e7a4      	b.n	8003618 <main+0x58>
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	20000198 	.word	0x20000198
 80036d4:	200000e0 	.word	0x200000e0
 80036d8:	200000d8 	.word	0x200000d8
 80036dc:	200000da 	.word	0x200000da
 80036e0:	200000dc 	.word	0x200000dc
 80036e4:	080084b8 	.word	0x080084b8
 80036e8:	20000114 	.word	0x20000114
 80036ec:	200001d8 	.word	0x200001d8

080036f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b09f      	sub	sp, #124	; 0x7c
 80036f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036f6:	2440      	movs	r4, #64	; 0x40
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	0018      	movs	r0, r3
 80036fc:	2338      	movs	r3, #56	; 0x38
 80036fe:	001a      	movs	r2, r3
 8003700:	2100      	movs	r1, #0
 8003702:	f004 fa64 	bl	8007bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003706:	232c      	movs	r3, #44	; 0x2c
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	0018      	movs	r0, r3
 800370c:	2314      	movs	r3, #20
 800370e:	001a      	movs	r2, r3
 8003710:	2100      	movs	r1, #0
 8003712:	f004 fa5c 	bl	8007bce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	0018      	movs	r0, r3
 800371a:	2328      	movs	r3, #40	; 0x28
 800371c:	001a      	movs	r2, r3
 800371e:	2100      	movs	r1, #0
 8003720:	f004 fa55 	bl	8007bce <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003724:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <SystemClock_Config+0xe4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <SystemClock_Config+0xe8>)
 800372a:	401a      	ands	r2, r3
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <SystemClock_Config+0xe4>)
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	0109      	lsls	r1, r1, #4
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003736:	0021      	movs	r1, r4
 8003738:	187b      	adds	r3, r7, r1
 800373a:	2202      	movs	r2, #2
 800373c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800373e:	187b      	adds	r3, r7, r1
 8003740:	2201      	movs	r2, #1
 8003742:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003744:	187b      	adds	r3, r7, r1
 8003746:	2210      	movs	r2, #16
 8003748:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800374a:	187b      	adds	r3, r7, r1
 800374c:	2202      	movs	r2, #2
 800374e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003750:	187b      	adds	r3, r7, r1
 8003752:	2200      	movs	r2, #0
 8003754:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003756:	187b      	adds	r3, r7, r1
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	02d2      	lsls	r2, r2, #11
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800375e:	187b      	adds	r3, r7, r1
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	03d2      	lsls	r2, r2, #15
 8003764:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003766:	187b      	adds	r3, r7, r1
 8003768:	0018      	movs	r0, r3
 800376a:	f001 ffe5 	bl	8005738 <HAL_RCC_OscConfig>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d001      	beq.n	8003776 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003772:	f000 f979 	bl	8003a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003776:	212c      	movs	r1, #44	; 0x2c
 8003778:	187b      	adds	r3, r7, r1
 800377a:	220f      	movs	r2, #15
 800377c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800377e:	187b      	adds	r3, r7, r1
 8003780:	2203      	movs	r2, #3
 8003782:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003784:	187b      	adds	r3, r7, r1
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800378a:	187b      	adds	r3, r7, r1
 800378c:	2200      	movs	r2, #0
 800378e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003790:	187b      	adds	r3, r7, r1
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003796:	187b      	adds	r3, r7, r1
 8003798:	2101      	movs	r1, #1
 800379a:	0018      	movs	r0, r3
 800379c:	f002 fba0 	bl	8005ee0 <HAL_RCC_ClockConfig>
 80037a0:	1e03      	subs	r3, r0, #0
 80037a2:	d001      	beq.n	80037a8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80037a4:	f000 f960 	bl	8003a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	220a      	movs	r2, #10
 80037ac:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	2200      	movs	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	2200      	movs	r2, #0
 80037b8:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	0018      	movs	r0, r3
 80037be:	f002 fdb3 	bl	8006328 <HAL_RCCEx_PeriphCLKConfig>
 80037c2:	1e03      	subs	r3, r0, #0
 80037c4:	d001      	beq.n	80037ca <SystemClock_Config+0xda>
  {
    Error_Handler();
 80037c6:	f000 f94f 	bl	8003a68 <Error_Handler>
  }
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b01f      	add	sp, #124	; 0x7c
 80037d0:	bd90      	pop	{r4, r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	40007000 	.word	0x40007000
 80037d8:	ffffe7ff 	.word	0xffffe7ff

080037dc <PIDRegulator>:

/* USER CODE BEGIN 4 */
float PIDRegulator(uint16_t distance, PIDStruct PID)
{
 80037dc:	b084      	sub	sp, #16
 80037de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	0004      	movs	r4, r0
 80037e6:	2004      	movs	r0, #4
 80037e8:	2518      	movs	r5, #24
 80037ea:	1940      	adds	r0, r0, r5
 80037ec:	2608      	movs	r6, #8
 80037ee:	46b4      	mov	ip, r6
 80037f0:	44bc      	add	ip, r7
 80037f2:	4460      	add	r0, ip
 80037f4:	6001      	str	r1, [r0, #0]
 80037f6:	6042      	str	r2, [r0, #4]
 80037f8:	6083      	str	r3, [r0, #8]
 80037fa:	1dbb      	adds	r3, r7, #6
 80037fc:	1c22      	adds	r2, r4, #0
 80037fe:	801a      	strh	r2, [r3, #0]
	PID.time_new = HAL_GetTick();
 8003800:	f000 fe50 	bl	80044a4 <HAL_GetTick>
 8003804:	0002      	movs	r2, r0
 8003806:	2304      	movs	r3, #4
 8003808:	195b      	adds	r3, r3, r5
 800380a:	2108      	movs	r1, #8
 800380c:	468c      	mov	ip, r1
 800380e:	44bc      	add	ip, r7
 8003810:	4463      	add	r3, ip
 8003812:	615a      	str	r2, [r3, #20]
	PID.period = PID.time_new - PID.time_old;
 8003814:	2304      	movs	r3, #4
 8003816:	195b      	adds	r3, r3, r5
 8003818:	2208      	movs	r2, #8
 800381a:	4694      	mov	ip, r2
 800381c:	44bc      	add	ip, r7
 800381e:	4463      	add	r3, ip
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	2304      	movs	r3, #4
 8003824:	195b      	adds	r3, r3, r5
 8003826:	2108      	movs	r1, #8
 8003828:	468c      	mov	ip, r1
 800382a:	44bc      	add	ip, r7
 800382c:	4463      	add	r3, ip
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	1ad2      	subs	r2, r2, r3
 8003832:	2304      	movs	r3, #4
 8003834:	0029      	movs	r1, r5
 8003836:	185b      	adds	r3, r3, r1
 8003838:	2008      	movs	r0, #8
 800383a:	4684      	mov	ip, r0
 800383c:	44bc      	add	ip, r7
 800383e:	4463      	add	r3, ip
 8003840:	619a      	str	r2, [r3, #24]
	PID.time_old = PID.time_new;
 8003842:	2304      	movs	r3, #4
 8003844:	185b      	adds	r3, r3, r1
 8003846:	2208      	movs	r2, #8
 8003848:	4694      	mov	ip, r2
 800384a:	44bc      	add	ip, r7
 800384c:	4463      	add	r3, ip
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	2304      	movs	r3, #4
 8003852:	185b      	adds	r3, r3, r1
 8003854:	2008      	movs	r0, #8
 8003856:	4684      	mov	ip, r0
 8003858:	44bc      	add	ip, r7
 800385a:	4463      	add	r3, ip
 800385c:	611a      	str	r2, [r3, #16]

	PID.distance_error = PID.set_point - distance;
 800385e:	2304      	movs	r3, #4
 8003860:	185b      	adds	r3, r3, r1
 8003862:	2208      	movs	r2, #8
 8003864:	4694      	mov	ip, r2
 8003866:	44bc      	add	ip, r7
 8003868:	4463      	add	r3, ip
 800386a:	881a      	ldrh	r2, [r3, #0]
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	b29b      	uxth	r3, r3
 8003874:	b21a      	sxth	r2, r3
 8003876:	2304      	movs	r3, #4
 8003878:	185b      	adds	r3, r3, r1
 800387a:	2008      	movs	r0, #8
 800387c:	4684      	mov	ip, r0
 800387e:	44bc      	add	ip, r7
 8003880:	4463      	add	r3, ip
 8003882:	839a      	strh	r2, [r3, #28]

	PID.PID_p = PID.Kp * PID.distance_error;
 8003884:	2304      	movs	r3, #4
 8003886:	185b      	adds	r3, r3, r1
 8003888:	2208      	movs	r2, #8
 800388a:	4694      	mov	ip, r2
 800388c:	44bc      	add	ip, r7
 800388e:	4463      	add	r3, ip
 8003890:	685c      	ldr	r4, [r3, #4]
 8003892:	2304      	movs	r3, #4
 8003894:	000d      	movs	r5, r1
 8003896:	185b      	adds	r3, r3, r1
 8003898:	2208      	movs	r2, #8
 800389a:	4694      	mov	ip, r2
 800389c:	44bc      	add	ip, r7
 800389e:	4463      	add	r3, ip
 80038a0:	221c      	movs	r2, #28
 80038a2:	5e9b      	ldrsh	r3, [r3, r2]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7fd fb99 	bl	8000fdc <__aeabi_i2f>
 80038aa:	1c03      	adds	r3, r0, #0
 80038ac:	1c19      	adds	r1, r3, #0
 80038ae:	1c20      	adds	r0, r4, #0
 80038b0:	f7fd f8a0 	bl	80009f4 <__aeabi_fmul>
 80038b4:	1c03      	adds	r3, r0, #0
 80038b6:	1c1a      	adds	r2, r3, #0
 80038b8:	2304      	movs	r3, #4
 80038ba:	195b      	adds	r3, r3, r5
 80038bc:	2108      	movs	r1, #8
 80038be:	468c      	mov	ip, r1
 80038c0:	44bc      	add	ip, r7
 80038c2:	4463      	add	r3, ip
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

	PID.dist_diference = PID.distance_error - PID.distance_previous_error;
 80038c6:	2304      	movs	r3, #4
 80038c8:	195b      	adds	r3, r3, r5
 80038ca:	2208      	movs	r2, #8
 80038cc:	4694      	mov	ip, r2
 80038ce:	44bc      	add	ip, r7
 80038d0:	4463      	add	r3, ip
 80038d2:	221c      	movs	r2, #28
 80038d4:	5e9b      	ldrsh	r3, [r3, r2]
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	2304      	movs	r3, #4
 80038da:	195b      	adds	r3, r3, r5
 80038dc:	2108      	movs	r1, #8
 80038de:	468c      	mov	ip, r1
 80038e0:	44bc      	add	ip, r7
 80038e2:	4463      	add	r3, ip
 80038e4:	8bdb      	ldrh	r3, [r3, #30]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	2304      	movs	r3, #4
 80038ec:	195b      	adds	r3, r3, r5
 80038ee:	2108      	movs	r1, #8
 80038f0:	468c      	mov	ip, r1
 80038f2:	44bc      	add	ip, r7
 80038f4:	4463      	add	r3, ip
 80038f6:	841a      	strh	r2, [r3, #32]

	PID.PID_d = PID.Kd*((PID.distance_error - PID.distance_previous_error)/PID.period);
 80038f8:	2304      	movs	r3, #4
 80038fa:	195b      	adds	r3, r3, r5
 80038fc:	2208      	movs	r2, #8
 80038fe:	4694      	mov	ip, r2
 8003900:	44bc      	add	ip, r7
 8003902:	4463      	add	r3, ip
 8003904:	689c      	ldr	r4, [r3, #8]
 8003906:	2304      	movs	r3, #4
 8003908:	195b      	adds	r3, r3, r5
 800390a:	2208      	movs	r2, #8
 800390c:	4694      	mov	ip, r2
 800390e:	44bc      	add	ip, r7
 8003910:	4463      	add	r3, ip
 8003912:	221c      	movs	r2, #28
 8003914:	5e9b      	ldrsh	r3, [r3, r2]
 8003916:	001a      	movs	r2, r3
 8003918:	2304      	movs	r3, #4
 800391a:	195b      	adds	r3, r3, r5
 800391c:	2108      	movs	r1, #8
 800391e:	468c      	mov	ip, r1
 8003920:	44bc      	add	ip, r7
 8003922:	4463      	add	r3, ip
 8003924:	8bdb      	ldrh	r3, [r3, #30]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	001a      	movs	r2, r3
 800392a:	2304      	movs	r3, #4
 800392c:	195b      	adds	r3, r3, r5
 800392e:	2108      	movs	r1, #8
 8003930:	468c      	mov	ip, r1
 8003932:	44bc      	add	ip, r7
 8003934:	4463      	add	r3, ip
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	0019      	movs	r1, r3
 800393a:	0010      	movs	r0, r2
 800393c:	f7fc fbf6 	bl	800012c <__udivsi3>
 8003940:	0003      	movs	r3, r0
 8003942:	0018      	movs	r0, r3
 8003944:	f7fd fb98 	bl	8001078 <__aeabi_ui2f>
 8003948:	1c03      	adds	r3, r0, #0
 800394a:	1c19      	adds	r1, r3, #0
 800394c:	1c20      	adds	r0, r4, #0
 800394e:	f7fd f851 	bl	80009f4 <__aeabi_fmul>
 8003952:	1c03      	adds	r3, r0, #0
 8003954:	1c1a      	adds	r2, r3, #0
 8003956:	2304      	movs	r3, #4
 8003958:	195b      	adds	r3, r3, r5
 800395a:	2108      	movs	r1, #8
 800395c:	468c      	mov	ip, r1
 800395e:	44bc      	add	ip, r7
 8003960:	4463      	add	r3, ip
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c

	if(-3 < PID.distance_error && PID.distance_error < 3)
 8003964:	2304      	movs	r3, #4
 8003966:	195b      	adds	r3, r3, r5
 8003968:	2208      	movs	r2, #8
 800396a:	4694      	mov	ip, r2
 800396c:	44bc      	add	ip, r7
 800396e:	4463      	add	r3, ip
 8003970:	221c      	movs	r2, #28
 8003972:	5e9b      	ldrsh	r3, [r3, r2]
 8003974:	3302      	adds	r3, #2
 8003976:	db37      	blt.n	80039e8 <PIDRegulator+0x20c>
 8003978:	2304      	movs	r3, #4
 800397a:	195b      	adds	r3, r3, r5
 800397c:	2208      	movs	r2, #8
 800397e:	4694      	mov	ip, r2
 8003980:	44bc      	add	ip, r7
 8003982:	4463      	add	r3, ip
 8003984:	221c      	movs	r2, #28
 8003986:	5e9b      	ldrsh	r3, [r3, r2]
 8003988:	2b02      	cmp	r3, #2
 800398a:	dc2d      	bgt.n	80039e8 <PIDRegulator+0x20c>
	    {
		PID.PID_i = PID.PID_i + (PID.Ki * PID.distance_error);
 800398c:	2304      	movs	r3, #4
 800398e:	195b      	adds	r3, r3, r5
 8003990:	2208      	movs	r2, #8
 8003992:	4694      	mov	ip, r2
 8003994:	44bc      	add	ip, r7
 8003996:	4463      	add	r3, ip
 8003998:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800399a:	2304      	movs	r3, #4
 800399c:	002e      	movs	r6, r5
 800399e:	195b      	adds	r3, r3, r5
 80039a0:	2208      	movs	r2, #8
 80039a2:	4694      	mov	ip, r2
 80039a4:	44bc      	add	ip, r7
 80039a6:	4463      	add	r3, ip
 80039a8:	68dd      	ldr	r5, [r3, #12]
 80039aa:	2304      	movs	r3, #4
 80039ac:	199b      	adds	r3, r3, r6
 80039ae:	2208      	movs	r2, #8
 80039b0:	4694      	mov	ip, r2
 80039b2:	44bc      	add	ip, r7
 80039b4:	4463      	add	r3, ip
 80039b6:	221c      	movs	r2, #28
 80039b8:	5e9b      	ldrsh	r3, [r3, r2]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7fd fb0e 	bl	8000fdc <__aeabi_i2f>
 80039c0:	1c03      	adds	r3, r0, #0
 80039c2:	1c19      	adds	r1, r3, #0
 80039c4:	1c28      	adds	r0, r5, #0
 80039c6:	f7fd f815 	bl	80009f4 <__aeabi_fmul>
 80039ca:	1c03      	adds	r3, r0, #0
 80039cc:	1c19      	adds	r1, r3, #0
 80039ce:	1c20      	adds	r0, r4, #0
 80039d0:	f7fc fdc2 	bl	8000558 <__aeabi_fadd>
 80039d4:	1c03      	adds	r3, r0, #0
 80039d6:	1c1a      	adds	r2, r3, #0
 80039d8:	2304      	movs	r3, #4
 80039da:	199b      	adds	r3, r3, r6
 80039dc:	2108      	movs	r1, #8
 80039de:	468c      	mov	ip, r1
 80039e0:	44bc      	add	ip, r7
 80039e2:	4463      	add	r3, ip
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
 80039e6:	e008      	b.n	80039fa <PIDRegulator+0x21e>
	    }
	    else
	    {
	    	PID.PID_i = 0;
 80039e8:	2304      	movs	r3, #4
 80039ea:	2218      	movs	r2, #24
 80039ec:	189b      	adds	r3, r3, r2
 80039ee:	2208      	movs	r2, #8
 80039f0:	4694      	mov	ip, r2
 80039f2:	44bc      	add	ip, r7
 80039f4:	4463      	add	r3, ip
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
	    }
	PID.PID_total = PID.PID_p + PID.PID_i + PID.PID_d;
 80039fa:	2304      	movs	r3, #4
 80039fc:	2418      	movs	r4, #24
 80039fe:	191b      	adds	r3, r3, r4
 8003a00:	2208      	movs	r2, #8
 8003a02:	4694      	mov	ip, r2
 8003a04:	44bc      	add	ip, r7
 8003a06:	4463      	add	r3, ip
 8003a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	191b      	adds	r3, r3, r4
 8003a0e:	2108      	movs	r1, #8
 8003a10:	468c      	mov	ip, r1
 8003a12:	44bc      	add	ip, r7
 8003a14:	4463      	add	r3, ip
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	1c19      	adds	r1, r3, #0
 8003a1a:	1c10      	adds	r0, r2, #0
 8003a1c:	f7fc fd9c 	bl	8000558 <__aeabi_fadd>
 8003a20:	1c03      	adds	r3, r0, #0
 8003a22:	1c1a      	adds	r2, r3, #0
 8003a24:	2304      	movs	r3, #4
 8003a26:	191b      	adds	r3, r3, r4
 8003a28:	2108      	movs	r1, #8
 8003a2a:	468c      	mov	ip, r1
 8003a2c:	44bc      	add	ip, r7
 8003a2e:	4463      	add	r3, ip
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	1c19      	adds	r1, r3, #0
 8003a34:	1c10      	adds	r0, r2, #0
 8003a36:	f7fc fd8f 	bl	8000558 <__aeabi_fadd>
 8003a3a:	1c03      	adds	r3, r0, #0
 8003a3c:	1c1a      	adds	r2, r3, #0
 8003a3e:	2304      	movs	r3, #4
 8003a40:	191b      	adds	r3, r3, r4
 8003a42:	2108      	movs	r1, #8
 8003a44:	468c      	mov	ip, r1
 8003a46:	44bc      	add	ip, r7
 8003a48:	4463      	add	r3, ip
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30

	return PID.PID_total;
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	191b      	adds	r3, r3, r4
 8003a50:	2208      	movs	r2, #8
 8003a52:	4694      	mov	ip, r2
 8003a54:	44bc      	add	ip, r7
 8003a56:	4463      	add	r3, ip
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003a5a:	1c18      	adds	r0, r3, #0
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b003      	add	sp, #12
 8003a60:	bcf0      	pop	{r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	b004      	add	sp, #16
 8003a66:	4718      	bx	r3

08003a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6c:	b672      	cpsid	i
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <Error_Handler+0x8>
	...

08003a74 <set_move>:
//stop_speed_level = 205
#define Skala 4.66


void set_move(float PID_value, uint8_t direction)
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	000a      	movs	r2, r1
 8003a7e:	1cfb      	adds	r3, r7, #3
 8003a80:	701a      	strb	r2, [r3, #0]
	if(direction == 0 &&PID_value <150 && PID_value>=0){		// krecenie w lewo
 8003a82:	1cfb      	adds	r3, r7, #3
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d128      	bne.n	8003adc <set_move+0x68>
 8003a8a:	492f      	ldr	r1, [pc, #188]	; (8003b48 <set_move+0xd4>)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7fc fbeb 	bl	8000268 <__aeabi_fcmplt>
 8003a92:	1e03      	subs	r3, r0, #0
 8003a94:	d022      	beq.n	8003adc <set_move+0x68>
 8003a96:	2100      	movs	r1, #0
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7fc fc03 	bl	80002a4 <__aeabi_fcmpge>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d01c      	beq.n	8003adc <set_move+0x68>
		float servo_speed = PWM_STOP - Skala * PID_value ;
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe fcc0 	bl	8002428 <__aeabi_f2d>
 8003aa8:	4a28      	ldr	r2, [pc, #160]	; (8003b4c <set_move+0xd8>)
 8003aaa:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <set_move+0xdc>)
 8003aac:	f7fd fe62 	bl	8001774 <__aeabi_dmul>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	000b      	movs	r3, r1
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	4927      	ldr	r1, [pc, #156]	; (8003b54 <set_move+0xe0>)
 8003ab8:	f7fe f8c8 	bl	8001c4c <__aeabi_dsub>
 8003abc:	0002      	movs	r2, r0
 8003abe:	000b      	movs	r3, r1
 8003ac0:	0010      	movs	r0, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	f7fe fcf8 	bl	80024b8 <__aeabi_d2f>
 8003ac8:	1c03      	adds	r3, r0, #0
 8003aca:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, servo_speed);
 8003acc:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <set_move+0xe4>)
 8003ace:	681c      	ldr	r4, [r3, #0]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7fc fc3f 	bl	8000354 <__aeabi_f2uiz>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	6363      	str	r3, [r4, #52]	; 0x34
	if(direction == 0 &&PID_value <150 && PID_value>=0){		// krecenie w lewo
 8003ada:	e031      	b.n	8003b40 <set_move+0xcc>
	}
	else if(direction == 1 && PID_value <150 && PID_value>=0){		// krecenie w prawo
 8003adc:	1cfb      	adds	r3, r7, #3
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d12c      	bne.n	8003b3e <set_move+0xca>
 8003ae4:	4918      	ldr	r1, [pc, #96]	; (8003b48 <set_move+0xd4>)
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fc fbbe 	bl	8000268 <__aeabi_fcmplt>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d100      	bne.n	8003af2 <set_move+0x7e>
			float servo_speed = PWM_STOP +Skala * PID_value ;
				__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, servo_speed);
			}
	else{
		//stop_servo();
		return;
 8003af0:	e025      	b.n	8003b3e <set_move+0xca>
	else if(direction == 1 && PID_value <150 && PID_value>=0){		// krecenie w prawo
 8003af2:	2100      	movs	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7fc fbd5 	bl	80002a4 <__aeabi_fcmpge>
 8003afa:	1e03      	subs	r3, r0, #0
 8003afc:	d100      	bne.n	8003b00 <set_move+0x8c>
		return;
 8003afe:	e01e      	b.n	8003b3e <set_move+0xca>
			float servo_speed = PWM_STOP +Skala * PID_value ;
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7fe fc91 	bl	8002428 <__aeabi_f2d>
 8003b06:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <set_move+0xd8>)
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <set_move+0xdc>)
 8003b0a:	f7fd fe33 	bl	8001774 <__aeabi_dmul>
 8003b0e:	0002      	movs	r2, r0
 8003b10:	000b      	movs	r3, r1
 8003b12:	0010      	movs	r0, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	2200      	movs	r2, #0
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <set_move+0xe0>)
 8003b1a:	f7fd faef 	bl	80010fc <__aeabi_dadd>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	000b      	movs	r3, r1
 8003b22:	0010      	movs	r0, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	f7fe fcc7 	bl	80024b8 <__aeabi_d2f>
 8003b2a:	1c03      	adds	r3, r0, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
				__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, servo_speed);
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <set_move+0xe4>)
 8003b30:	681c      	ldr	r4, [r3, #0]
 8003b32:	68b8      	ldr	r0, [r7, #8]
 8003b34:	f7fc fc0e 	bl	8000354 <__aeabi_f2uiz>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	6363      	str	r3, [r4, #52]	; 0x34
	else if(direction == 1 && PID_value <150 && PID_value>=0){		// krecenie w prawo
 8003b3c:	e000      	b.n	8003b40 <set_move+0xcc>
		return;
 8003b3e:	46c0      	nop			; (mov r8, r8)
	}
	}
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b005      	add	sp, #20
 8003b44:	bd90      	pop	{r4, r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	43160000 	.word	0x43160000
 8003b4c:	0a3d70a4 	.word	0x0a3d70a4
 8003b50:	4012a3d7 	.word	0x4012a3d7
 8003b54:	4097e800 	.word	0x4097e800
 8003b58:	20000198 	.word	0x20000198

08003b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_MspInit+0x24>)
 8003b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_MspInit+0x24>)
 8003b66:	2101      	movs	r1, #1
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <HAL_MspInit+0x24>)
 8003b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_MspInit+0x24>)
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	0549      	lsls	r1, r1, #21
 8003b76:	430a      	orrs	r2, r1
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000

08003b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <NMI_Handler+0x4>

08003b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b8e:	e7fe      	b.n	8003b8e <HardFault_Handler+0x4>

08003b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ba8:	f000 fc6a 	bl	8004480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bbc:	4a14      	ldr	r2, [pc, #80]	; (8003c10 <_sbrk+0x5c>)
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <_sbrk+0x60>)
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <_sbrk+0x64>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <_sbrk+0x64>)
 8003bd2:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <_sbrk+0x68>)
 8003bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <_sbrk+0x64>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	18d3      	adds	r3, r2, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d207      	bcs.n	8003bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003be4:	f003 ffc0 	bl	8007b68 <__errno>
 8003be8:	0003      	movs	r3, r0
 8003bea:	220c      	movs	r2, #12
 8003bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	e009      	b.n	8003c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <_sbrk+0x64>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <_sbrk+0x64>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	18d2      	adds	r2, r2, r3
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <_sbrk+0x64>)
 8003c04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c06:	68fb      	ldr	r3, [r7, #12]
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b006      	add	sp, #24
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20005000 	.word	0x20005000
 8003c14:	00000400 	.word	0x00000400
 8003c18:	20000154 	.word	0x20000154
 8003c1c:	20000370 	.word	0x20000370

08003c20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	; 0x28
 8003c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c32:	2318      	movs	r3, #24
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	0018      	movs	r0, r3
 8003c38:	2310      	movs	r3, #16
 8003c3a:	001a      	movs	r2, r3
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f003 ffc6 	bl	8007bce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c42:	2310      	movs	r3, #16
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	0018      	movs	r0, r3
 8003c48:	2308      	movs	r3, #8
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	f003 ffbe 	bl	8007bce <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c52:	003b      	movs	r3, r7
 8003c54:	0018      	movs	r0, r3
 8003c56:	2310      	movs	r3, #16
 8003c58:	001a      	movs	r2, r3
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	f003 ffb7 	bl	8007bce <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	05d2      	lsls	r2, r2, #23
 8003c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8003c68:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003c6a:	221f      	movs	r2, #31
 8003c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003c76:	4a2c      	ldr	r2, [pc, #176]	; (8003d28 <MX_TIM2_Init+0xfc>)
 8003c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c7a:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c80:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c86:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f002 fcc1 	bl	8006610 <HAL_TIM_Base_Init>
 8003c8e:	1e03      	subs	r3, r0, #0
 8003c90:	d001      	beq.n	8003c96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003c92:	f7ff fee9 	bl	8003a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c96:	2118      	movs	r1, #24
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	0152      	lsls	r2, r2, #5
 8003c9e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ca0:	187a      	adds	r2, r7, r1
 8003ca2:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003ca4:	0011      	movs	r1, r2
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f002 fe92 	bl	80069d0 <HAL_TIM_ConfigClockSource>
 8003cac:	1e03      	subs	r3, r0, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003cb0:	f7ff feda 	bl	8003a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f002 fcea 	bl	8006690 <HAL_TIM_PWM_Init>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003cc0:	f7ff fed2 	bl	8003a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cc4:	2110      	movs	r1, #16
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2200      	movs	r2, #0
 8003cd0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cd2:	187a      	adds	r2, r7, r1
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f003 f96d 	bl	8006fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003cde:	1e03      	subs	r3, r0, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8003ce2:	f7ff fec1 	bl	8003a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ce6:	003b      	movs	r3, r7
 8003ce8:	2260      	movs	r2, #96	; 0x60
 8003cea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003cec:	003b      	movs	r3, r7
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cf2:	003b      	movs	r3, r7
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cf8:	003b      	movs	r3, r7
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cfe:	0039      	movs	r1, r7
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	0018      	movs	r0, r3
 8003d06:	f002 fd9d 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 8003d0a:	1e03      	subs	r3, r0, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8003d0e:	f7ff feab 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <MX_TIM2_Init+0xf8>)
 8003d14:	0018      	movs	r0, r3
 8003d16:	f000 f8b7 	bl	8003e88 <HAL_TIM_MspPostInit>

}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b00a      	add	sp, #40	; 0x28
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	20000158 	.word	0x20000158
 8003d28:	00004e1f 	.word	0x00004e1f

08003d2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d32:	2318      	movs	r3, #24
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	0018      	movs	r0, r3
 8003d38:	2310      	movs	r3, #16
 8003d3a:	001a      	movs	r2, r3
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	f003 ff46 	bl	8007bce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d42:	2310      	movs	r3, #16
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	0018      	movs	r0, r3
 8003d48:	2308      	movs	r3, #8
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	f003 ff3e 	bl	8007bce <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d52:	003b      	movs	r3, r7
 8003d54:	0018      	movs	r0, r3
 8003d56:	2310      	movs	r3, #16
 8003d58:	001a      	movs	r2, r3
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	f003 ff37 	bl	8007bce <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d60:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003d62:	4a35      	ldr	r2, [pc, #212]	; (8003e38 <MX_TIM3_Init+0x10c>)
 8003d64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8003d66:	4b33      	ldr	r3, [pc, #204]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003d68:	221f      	movs	r2, #31
 8003d6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d6c:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003d72:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003d74:	4a31      	ldr	r2, [pc, #196]	; (8003e3c <MX_TIM3_Init+0x110>)
 8003d76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d78:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d7e:	4b2d      	ldr	r3, [pc, #180]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003d86:	0018      	movs	r0, r3
 8003d88:	f002 fc42 	bl	8006610 <HAL_TIM_Base_Init>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003d90:	f7ff fe6a 	bl	8003a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d94:	2118      	movs	r1, #24
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	2280      	movs	r2, #128	; 0x80
 8003d9a:	0152      	lsls	r2, r2, #5
 8003d9c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d9e:	187a      	adds	r2, r7, r1
 8003da0:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003da2:	0011      	movs	r1, r2
 8003da4:	0018      	movs	r0, r3
 8003da6:	f002 fe13 	bl	80069d0 <HAL_TIM_ConfigClockSource>
 8003daa:	1e03      	subs	r3, r0, #0
 8003dac:	d001      	beq.n	8003db2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003dae:	f7ff fe5b 	bl	8003a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003db2:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003db4:	0018      	movs	r0, r3
 8003db6:	f002 fc6b 	bl	8006690 <HAL_TIM_PWM_Init>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003dbe:	f7ff fe53 	bl	8003a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc2:	2110      	movs	r1, #16
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	2200      	movs	r2, #0
 8003dce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003dd0:	187a      	adds	r2, r7, r1
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003dd4:	0011      	movs	r1, r2
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f003 f8ee 	bl	8006fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ddc:	1e03      	subs	r3, r0, #0
 8003dde:	d001      	beq.n	8003de4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003de0:	f7ff fe42 	bl	8003a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003de4:	003b      	movs	r3, r7
 8003de6:	2260      	movs	r2, #96	; 0x60
 8003de8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003dea:	003b      	movs	r3, r7
 8003dec:	2200      	movs	r2, #0
 8003dee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003df0:	003b      	movs	r3, r7
 8003df2:	2200      	movs	r2, #0
 8003df4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003df6:	003b      	movs	r3, r7
 8003df8:	2200      	movs	r2, #0
 8003dfa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dfc:	0039      	movs	r1, r7
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	0018      	movs	r0, r3
 8003e04:	f002 fd1e 	bl	8006844 <HAL_TIM_PWM_ConfigChannel>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8003e0c:	f7ff fe2c 	bl	8003a68 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003e12:	2104      	movs	r1, #4
 8003e14:	0018      	movs	r0, r3
 8003e16:	f003 f92d 	bl	8007074 <HAL_TIMEx_RemapConfig>
 8003e1a:	1e03      	subs	r3, r0, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8003e1e:	f7ff fe23 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e22:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <MX_TIM3_Init+0x108>)
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 f82f 	bl	8003e88 <HAL_TIM_MspPostInit>

}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b00a      	add	sp, #40	; 0x28
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	20000198 	.word	0x20000198
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	00004e1f 	.word	0x00004e1f

08003e40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	05db      	lsls	r3, r3, #23
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d106      	bne.n	8003e62 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_TIM_Base_MspInit+0x40>)
 8003e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_TIM_Base_MspInit+0x40>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003e60:	e00a      	b.n	8003e78 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM3)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <HAL_TIM_Base_MspInit+0x44>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d105      	bne.n	8003e78 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <HAL_TIM_Base_MspInit+0x40>)
 8003e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_TIM_Base_MspInit+0x40>)
 8003e72:	2102      	movs	r1, #2
 8003e74:	430a      	orrs	r2, r1
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b002      	add	sp, #8
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40000400 	.word	0x40000400

08003e88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b08b      	sub	sp, #44	; 0x2c
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e90:	2414      	movs	r4, #20
 8003e92:	193b      	adds	r3, r7, r4
 8003e94:	0018      	movs	r0, r3
 8003e96:	2314      	movs	r3, #20
 8003e98:	001a      	movs	r2, r3
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f003 fe97 	bl	8007bce <memset>
  if(timHandle->Instance==TIM2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	05db      	lsls	r3, r3, #23
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d123      	bne.n	8003ef4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eac:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <HAL_TIM_MspPostInit+0xc4>)
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <HAL_TIM_MspPostInit+0xc4>)
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eb8:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_TIM_MspPostInit+0xc4>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ec4:	0021      	movs	r1, r4
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2202      	movs	r2, #2
 8003ed0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2200      	movs	r2, #0
 8003edc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee4:	187a      	adds	r2, r7, r1
 8003ee6:	23a0      	movs	r3, #160	; 0xa0
 8003ee8:	05db      	lsls	r3, r3, #23
 8003eea:	0011      	movs	r1, r2
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 fbbb 	bl	8004668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ef2:	e027      	b.n	8003f44 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <HAL_TIM_MspPostInit+0xc8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <HAL_TIM_MspPostInit+0xc4>)
 8003f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <HAL_TIM_MspPostInit+0xc4>)
 8003f04:	2101      	movs	r1, #1
 8003f06:	430a      	orrs	r2, r1
 8003f08:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <HAL_TIM_MspPostInit+0xc4>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f16:	2114      	movs	r1, #20
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	2240      	movs	r2, #64	; 0x40
 8003f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	2202      	movs	r2, #2
 8003f22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f30:	187b      	adds	r3, r7, r1
 8003f32:	2202      	movs	r2, #2
 8003f34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f36:	187a      	adds	r2, r7, r1
 8003f38:	23a0      	movs	r3, #160	; 0xa0
 8003f3a:	05db      	lsls	r3, r3, #23
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fb92 	bl	8004668 <HAL_GPIO_Init>
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b00b      	add	sp, #44	; 0x2c
 8003f4a:	bd90      	pop	{r4, r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40000400 	.word	0x40000400

08003f54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <MX_USART2_UART_Init+0x5c>)
 8003f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f5e:	4b13      	ldr	r3, [pc, #76]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f60:	22e1      	movs	r2, #225	; 0xe1
 8003f62:	0252      	lsls	r2, r2, #9
 8003f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f72:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f7a:	220c      	movs	r2, #12
 8003f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f90:	4b06      	ldr	r3, [pc, #24]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <MX_USART2_UART_Init+0x58>)
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f003 f889 	bl	80070b0 <HAL_UART_Init>
 8003f9e:	1e03      	subs	r3, r0, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003fa2:	f7ff fd61 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	200001d8 	.word	0x200001d8
 8003fb0:	40004400 	.word	0x40004400

08003fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbc:	240c      	movs	r4, #12
 8003fbe:	193b      	adds	r3, r7, r4
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	2314      	movs	r3, #20
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f003 fe01 	bl	8007bce <memset>
  if(uartHandle->Instance==USART2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_UART_MspInit+0x80>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d129      	bne.n	800402a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fd6:	4b18      	ldr	r3, [pc, #96]	; (8004038 <HAL_UART_MspInit+0x84>)
 8003fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fda:	4b17      	ldr	r3, [pc, #92]	; (8004038 <HAL_UART_MspInit+0x84>)
 8003fdc:	2180      	movs	r1, #128	; 0x80
 8003fde:	0289      	lsls	r1, r1, #10
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe4:	4b14      	ldr	r3, [pc, #80]	; (8004038 <HAL_UART_MspInit+0x84>)
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_UART_MspInit+0x84>)
 8003fea:	2101      	movs	r1, #1
 8003fec:	430a      	orrs	r2, r1
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_UART_MspInit+0x84>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ffc:	0021      	movs	r1, r4
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	220c      	movs	r2, #12
 8004002:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	187b      	adds	r3, r7, r1
 8004006:	2202      	movs	r2, #2
 8004008:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	187b      	adds	r3, r7, r1
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	187b      	adds	r3, r7, r1
 8004012:	2203      	movs	r2, #3
 8004014:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004016:	187b      	adds	r3, r7, r1
 8004018:	2204      	movs	r2, #4
 800401a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401c:	187a      	adds	r2, r7, r1
 800401e:	23a0      	movs	r3, #160	; 0xa0
 8004020:	05db      	lsls	r3, r3, #23
 8004022:	0011      	movs	r1, r2
 8004024:	0018      	movs	r0, r3
 8004026:	f000 fb1f 	bl	8004668 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	b009      	add	sp, #36	; 0x24
 8004030:	bd90      	pop	{r4, r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	40004400 	.word	0x40004400
 8004038:	40021000 	.word	0x40021000

0800403c <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800403c:	b5b0      	push	{r4, r5, r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	210e      	movs	r1, #14
 8004048:	187b      	adds	r3, r7, r1
 800404a:	1c02      	adds	r2, r0, #0
 800404c:	801a      	strh	r2, [r3, #0]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	330a      	adds	r3, #10
 8004052:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	b29d      	uxth	r5, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	68bc      	ldr	r4, [r7, #8]
 800405c:	187a      	adds	r2, r7, r1
 800405e:	8811      	ldrh	r1, [r2, #0]
 8004060:	4806      	ldr	r0, [pc, #24]	; (800407c <_I2CWrite+0x40>)
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	002b      	movs	r3, r5
 8004066:	0022      	movs	r2, r4
 8004068:	f000 fd30 	bl	8004acc <HAL_I2C_Master_Transmit>
 800406c:	0003      	movs	r3, r0
 800406e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8004070:	693b      	ldr	r3, [r7, #16]
}
 8004072:	0018      	movs	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	b006      	add	sp, #24
 8004078:	bdb0      	pop	{r4, r5, r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	2000008c 	.word	0x2000008c

08004080 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b089      	sub	sp, #36	; 0x24
 8004084:	af02      	add	r7, sp, #8
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	210e      	movs	r1, #14
 800408c:	187b      	adds	r3, r7, r1
 800408e:	1c02      	adds	r2, r0, #0
 8004090:	801a      	strh	r2, [r3, #0]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	330a      	adds	r3, #10
 8004096:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 8004098:	187b      	adds	r3, r7, r1
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	2201      	movs	r2, #1
 800409e:	4313      	orrs	r3, r2
 80040a0:	b299      	uxth	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	b29c      	uxth	r4, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	4806      	ldr	r0, [pc, #24]	; (80040c4 <_I2CRead+0x44>)
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	0023      	movs	r3, r4
 80040b0:	f000 fe14 	bl	8004cdc <HAL_I2C_Master_Receive>
 80040b4:	0003      	movs	r3, r0
 80040b6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80040b8:	693b      	ldr	r3, [r7, #16]
}
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b007      	add	sp, #28
 80040c0:	bd90      	pop	{r4, r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	2000008c 	.word	0x2000008c

080040c8 <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	0004      	movs	r4, r0
 80040d0:	0008      	movs	r0, r1
 80040d2:	0011      	movs	r1, r2
 80040d4:	1dbb      	adds	r3, r7, #6
 80040d6:	1c22      	adds	r2, r4, #0
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	1c02      	adds	r2, r0, #0
 80040de:	801a      	strh	r2, [r3, #0]
 80040e0:	1cfb      	adds	r3, r7, #3
 80040e2:	1c0a      	adds	r2, r1, #0
 80040e4:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80040e6:	240f      	movs	r4, #15
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <VL53L1_WrByte+0x74>)
 80040fa:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <VL53L1_WrByte+0x74>)
 8004104:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <VL53L1_WrByte+0x74>)
 8004108:	1cfa      	adds	r2, r7, #3
 800410a:	7812      	ldrb	r2, [r2, #0]
 800410c:	709a      	strb	r2, [r3, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800410e:	490b      	ldr	r1, [pc, #44]	; (800413c <VL53L1_WrByte+0x74>)
 8004110:	1dbb      	adds	r3, r7, #6
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	2203      	movs	r2, #3
 8004116:	0018      	movs	r0, r3
 8004118:	f7ff ff90 	bl	800403c <_I2CWrite>
 800411c:	0003      	movs	r3, r0
 800411e:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <VL53L1_WrByte+0x64>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004126:	193b      	adds	r3, r7, r4
 8004128:	22f3      	movs	r2, #243	; 0xf3
 800412a:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 800412c:	230f      	movs	r3, #15
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b25b      	sxtb	r3, r3
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b005      	add	sp, #20
 800413a:	bd90      	pop	{r4, r7, pc}
 800413c:	2000025c 	.word	0x2000025c

08004140 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data) {
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	0004      	movs	r4, r0
 8004148:	0008      	movs	r0, r1
 800414a:	0011      	movs	r1, r2
 800414c:	1dbb      	adds	r3, r7, #6
 800414e:	1c22      	adds	r2, r4, #0
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	1c02      	adds	r2, r0, #0
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	1cbb      	adds	r3, r7, #2
 800415a:	1c0a      	adds	r2, r1, #0
 800415c:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800415e:	240f      	movs	r4, #15
 8004160:	193b      	adds	r3, r7, r4
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b29b      	uxth	r3, r3
 800416e:	b2da      	uxtb	r2, r3
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <VL53L1_WrWord+0x84>)
 8004172:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <VL53L1_WrWord+0x84>)
 800417c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 800417e:	1cbb      	adds	r3, r7, #2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	b29b      	uxth	r3, r3
 8004186:	b2da      	uxtb	r2, r3
 8004188:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <VL53L1_WrWord+0x84>)
 800418a:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 800418c:	1cbb      	adds	r3, r7, #2
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <VL53L1_WrWord+0x84>)
 8004194:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8004196:	490b      	ldr	r1, [pc, #44]	; (80041c4 <VL53L1_WrWord+0x84>)
 8004198:	1dbb      	adds	r3, r7, #6
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	2204      	movs	r2, #4
 800419e:	0018      	movs	r0, r3
 80041a0:	f7ff ff4c 	bl	800403c <_I2CWrite>
 80041a4:	0003      	movs	r3, r0
 80041a6:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <VL53L1_WrWord+0x74>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80041ae:	193b      	adds	r3, r7, r4
 80041b0:	22f3      	movs	r2, #243	; 0xf3
 80041b2:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 80041b4:	230f      	movs	r3, #15
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	b25b      	sxtb	r3, r3
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b005      	add	sp, #20
 80041c2:	bd90      	pop	{r4, r7, pc}
 80041c4:	2000025c 	.word	0x2000025c

080041c8 <VL53L1_WrDWord>:

VL53L1_Error VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data) {
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	603a      	str	r2, [r7, #0]
 80041d0:	1dbb      	adds	r3, r7, #6
 80041d2:	1c02      	adds	r2, r0, #0
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	1c0a      	adds	r2, r1, #0
 80041da:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80041dc:	240f      	movs	r4, #15
 80041de:	193b      	adds	r3, r7, r4
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 80041e4:	1d3b      	adds	r3, r7, #4
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4b18      	ldr	r3, [pc, #96]	; (8004250 <VL53L1_WrDWord+0x88>)
 80041f0:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <VL53L1_WrDWord+0x88>)
 80041fa:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	0e1b      	lsrs	r3, r3, #24
 8004200:	b2da      	uxtb	r2, r3
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <VL53L1_WrDWord+0x88>)
 8004204:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	b2da      	uxtb	r2, r3
 800420c:	4b10      	ldr	r3, [pc, #64]	; (8004250 <VL53L1_WrDWord+0x88>)
 800420e:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <VL53L1_WrDWord+0x88>)
 8004218:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <VL53L1_WrDWord+0x88>)
 8004220:	715a      	strb	r2, [r3, #5]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 8004222:	490b      	ldr	r1, [pc, #44]	; (8004250 <VL53L1_WrDWord+0x88>)
 8004224:	1dbb      	adds	r3, r7, #6
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	2206      	movs	r2, #6
 800422a:	0018      	movs	r0, r3
 800422c:	f7ff ff06 	bl	800403c <_I2CWrite>
 8004230:	0003      	movs	r3, r0
 8004232:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <VL53L1_WrDWord+0x78>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800423a:	193b      	adds	r3, r7, r4
 800423c:	22f3      	movs	r2, #243	; 0xf3
 800423e:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 8004240:	230f      	movs	r3, #15
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	b25b      	sxtb	r3, r3
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b005      	add	sp, #20
 800424e:	bd90      	pop	{r4, r7, pc}
 8004250:	2000025c 	.word	0x2000025c

08004254 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	603a      	str	r2, [r7, #0]
 800425c:	1dbb      	adds	r3, r7, #6
 800425e:	1c02      	adds	r2, r0, #0
 8004260:	801a      	strh	r2, [r3, #0]
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	1c0a      	adds	r2, r1, #0
 8004266:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004268:	240f      	movs	r4, #15
 800426a:	193b      	adds	r3, r7, r4
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	0a1b      	lsrs	r3, r3, #8
 8004276:	b29b      	uxth	r3, r3
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4b18      	ldr	r3, [pc, #96]	; (80042dc <VL53L1_RdByte+0x88>)
 800427c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	4b15      	ldr	r3, [pc, #84]	; (80042dc <VL53L1_RdByte+0x88>)
 8004286:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004288:	4914      	ldr	r1, [pc, #80]	; (80042dc <VL53L1_RdByte+0x88>)
 800428a:	1dbb      	adds	r3, r7, #6
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	2202      	movs	r2, #2
 8004290:	0018      	movs	r0, r3
 8004292:	f7ff fed3 	bl	800403c <_I2CWrite>
 8004296:	0003      	movs	r3, r0
 8004298:	60bb      	str	r3, [r7, #8]
    if( status_int ){
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80042a0:	193b      	adds	r3, r7, r4
 80042a2:	22f3      	movs	r2, #243	; 0xf3
 80042a4:	701a      	strb	r2, [r3, #0]
        goto done;
 80042a6:	e011      	b.n	80042cc <VL53L1_RdByte+0x78>
    }
    status_int = _I2CRead(Dev, data, 1);
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	1dbb      	adds	r3, r7, #6
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	2201      	movs	r2, #1
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7ff fee5 	bl	8004080 <_I2CRead>
 80042b6:	0003      	movs	r3, r0
 80042b8:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <VL53L1_RdByte+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80042c0:	230f      	movs	r3, #15
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	22f3      	movs	r2, #243	; 0xf3
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e000      	b.n	80042cc <VL53L1_RdByte+0x78>
    }
done:
 80042ca:	46c0      	nop			; (mov r8, r8)
    VL53L1_PutI2cBus();
    return Status;
 80042cc:	230f      	movs	r3, #15
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b25b      	sxtb	r3, r3
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b005      	add	sp, #20
 80042da:	bd90      	pop	{r4, r7, pc}
 80042dc:	2000025c 	.word	0x2000025c

080042e0 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	603a      	str	r2, [r7, #0]
 80042e8:	1dbb      	adds	r3, r7, #6
 80042ea:	1c02      	adds	r2, r0, #0
 80042ec:	801a      	strh	r2, [r3, #0]
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	1c0a      	adds	r2, r1, #0
 80042f2:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80042f4:	240f      	movs	r4, #15
 80042f6:	193b      	adds	r3, r7, r4
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	b29b      	uxth	r3, r3
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <VL53L1_RdWord+0xa0>)
 8004308:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <VL53L1_RdWord+0xa0>)
 8004312:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004314:	491a      	ldr	r1, [pc, #104]	; (8004380 <VL53L1_RdWord+0xa0>)
 8004316:	1dbb      	adds	r3, r7, #6
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	2202      	movs	r2, #2
 800431c:	0018      	movs	r0, r3
 800431e:	f7ff fe8d 	bl	800403c <_I2CWrite>
 8004322:	0003      	movs	r3, r0
 8004324:	60bb      	str	r3, [r7, #8]

    if( status_int ){
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <VL53L1_RdWord+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800432c:	193b      	adds	r3, r7, r4
 800432e:	22f3      	movs	r2, #243	; 0xf3
 8004330:	701a      	strb	r2, [r3, #0]
        goto done;
 8004332:	e01c      	b.n	800436e <VL53L1_RdWord+0x8e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004334:	4912      	ldr	r1, [pc, #72]	; (8004380 <VL53L1_RdWord+0xa0>)
 8004336:	1dbb      	adds	r3, r7, #6
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	2202      	movs	r2, #2
 800433c:	0018      	movs	r0, r3
 800433e:	f7ff fe9f 	bl	8004080 <_I2CRead>
 8004342:	0003      	movs	r3, r0
 8004344:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <VL53L1_RdWord+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800434c:	230f      	movs	r3, #15
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	22f3      	movs	r2, #243	; 0xf3
 8004352:	701a      	strb	r2, [r3, #0]
        goto done;
 8004354:	e00b      	b.n	800436e <VL53L1_RdWord+0x8e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <VL53L1_RdWord+0xa0>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	b29a      	uxth	r2, r3
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <VL53L1_RdWord+0xa0>)
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	b29b      	uxth	r3, r3
 8004366:	18d3      	adds	r3, r2, r3
 8004368:	b29a      	uxth	r2, r3
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800436e:	230f      	movs	r3, #15
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b25b      	sxtb	r3, r3
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b005      	add	sp, #20
 800437c:	bd90      	pop	{r4, r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	2000025c 	.word	0x2000025c

08004384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004384:	480d      	ldr	r0, [pc, #52]	; (80043bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004386:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004388:	480d      	ldr	r0, [pc, #52]	; (80043c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800438a:	490e      	ldr	r1, [pc, #56]	; (80043c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800438c:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <LoopForever+0xe>)
  movs r3, #0
 800438e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004390:	e002      	b.n	8004398 <LoopCopyDataInit>

08004392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004396:	3304      	adds	r3, #4

08004398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800439a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800439c:	d3f9      	bcc.n	8004392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800439e:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80043a0:	4c0b      	ldr	r4, [pc, #44]	; (80043d0 <LoopForever+0x16>)
  movs r3, #0
 80043a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043a4:	e001      	b.n	80043aa <LoopFillZerobss>

080043a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043a8:	3204      	adds	r2, #4

080043aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043ac:	d3fb      	bcc.n	80043a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80043ae:	f7ff fc37 	bl	8003c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043b2:	f003 fbdf 	bl	8007b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043b6:	f7ff f903 	bl	80035c0 <main>

080043ba <LoopForever>:

LoopForever:
    b LoopForever
 80043ba:	e7fe      	b.n	80043ba <LoopForever>
   ldr   r0, =_estack
 80043bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80043c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80043c8:	08008650 	.word	0x08008650
  ldr r2, =_sbss
 80043cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80043d0:	20000370 	.word	0x20000370

080043d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043d4:	e7fe      	b.n	80043d4 <ADC1_COMP_IRQHandler>
	...

080043d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043de:	1dfb      	adds	r3, r7, #7
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_Init+0x3c>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_Init+0x3c>)
 80043ea:	2140      	movs	r1, #64	; 0x40
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043f0:	2000      	movs	r0, #0
 80043f2:	f000 f811 	bl	8004418 <HAL_InitTick>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d003      	beq.n	8004402 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80043fa:	1dfb      	adds	r3, r7, #7
 80043fc:	2201      	movs	r2, #1
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e001      	b.n	8004406 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004402:	f7ff fbab 	bl	8003b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004406:	1dfb      	adds	r3, r7, #7
 8004408:	781b      	ldrb	r3, [r3, #0]
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b002      	add	sp, #8
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	40022000 	.word	0x40022000

08004418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004418:	b590      	push	{r4, r7, lr}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <HAL_InitTick+0x5c>)
 8004422:	681c      	ldr	r4, [r3, #0]
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <HAL_InitTick+0x60>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	0019      	movs	r1, r3
 800442a:	23fa      	movs	r3, #250	; 0xfa
 800442c:	0098      	lsls	r0, r3, #2
 800442e:	f7fb fe7d 	bl	800012c <__udivsi3>
 8004432:	0003      	movs	r3, r0
 8004434:	0019      	movs	r1, r3
 8004436:	0020      	movs	r0, r4
 8004438:	f7fb fe78 	bl	800012c <__udivsi3>
 800443c:	0003      	movs	r3, r0
 800443e:	0018      	movs	r0, r3
 8004440:	f000 f905 	bl	800464e <HAL_SYSTICK_Config>
 8004444:	1e03      	subs	r3, r0, #0
 8004446:	d001      	beq.n	800444c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e00f      	b.n	800446c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d80b      	bhi.n	800446a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	2301      	movs	r3, #1
 8004456:	425b      	negs	r3, r3
 8004458:	2200      	movs	r2, #0
 800445a:	0018      	movs	r0, r3
 800445c:	f000 f8e2 	bl	8004624 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_InitTick+0x64>)
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b003      	add	sp, #12
 8004472:	bd90      	pop	{r4, r7, pc}
 8004474:	20000000 	.word	0x20000000
 8004478:	20000008 	.word	0x20000008
 800447c:	20000004 	.word	0x20000004

08004480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_IncTick+0x1c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	001a      	movs	r2, r3
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_IncTick+0x20>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	18d2      	adds	r2, r2, r3
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <HAL_IncTick+0x20>)
 8004492:	601a      	str	r2, [r3, #0]
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	20000008 	.word	0x20000008
 80044a0:	2000035c 	.word	0x2000035c

080044a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  return uwTick;
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <HAL_GetTick+0x10>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	0018      	movs	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	2000035c 	.word	0x2000035c

080044b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c0:	f7ff fff0 	bl	80044a4 <HAL_GetTick>
 80044c4:	0003      	movs	r3, r0
 80044c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3301      	adds	r3, #1
 80044d0:	d005      	beq.n	80044de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <HAL_Delay+0x44>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	001a      	movs	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	189b      	adds	r3, r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	f7ff ffe0 	bl	80044a4 <HAL_GetTick>
 80044e4:	0002      	movs	r2, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d8f7      	bhi.n	80044e0 <HAL_Delay+0x28>
  {
  }
}
 80044f0:	46c0      	nop			; (mov r8, r8)
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b004      	add	sp, #16
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	20000008 	.word	0x20000008

08004500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	0002      	movs	r2, r0
 8004508:	6039      	str	r1, [r7, #0]
 800450a:	1dfb      	adds	r3, r7, #7
 800450c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800450e:	1dfb      	adds	r3, r7, #7
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b7f      	cmp	r3, #127	; 0x7f
 8004514:	d828      	bhi.n	8004568 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004516:	4a2f      	ldr	r2, [pc, #188]	; (80045d4 <__NVIC_SetPriority+0xd4>)
 8004518:	1dfb      	adds	r3, r7, #7
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b25b      	sxtb	r3, r3
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	33c0      	adds	r3, #192	; 0xc0
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	589b      	ldr	r3, [r3, r2]
 8004526:	1dfa      	adds	r2, r7, #7
 8004528:	7812      	ldrb	r2, [r2, #0]
 800452a:	0011      	movs	r1, r2
 800452c:	2203      	movs	r2, #3
 800452e:	400a      	ands	r2, r1
 8004530:	00d2      	lsls	r2, r2, #3
 8004532:	21ff      	movs	r1, #255	; 0xff
 8004534:	4091      	lsls	r1, r2
 8004536:	000a      	movs	r2, r1
 8004538:	43d2      	mvns	r2, r2
 800453a:	401a      	ands	r2, r3
 800453c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	019b      	lsls	r3, r3, #6
 8004542:	22ff      	movs	r2, #255	; 0xff
 8004544:	401a      	ands	r2, r3
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	0018      	movs	r0, r3
 800454c:	2303      	movs	r3, #3
 800454e:	4003      	ands	r3, r0
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004554:	481f      	ldr	r0, [pc, #124]	; (80045d4 <__NVIC_SetPriority+0xd4>)
 8004556:	1dfb      	adds	r3, r7, #7
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	b25b      	sxtb	r3, r3
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	430a      	orrs	r2, r1
 8004560:	33c0      	adds	r3, #192	; 0xc0
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004566:	e031      	b.n	80045cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004568:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <__NVIC_SetPriority+0xd8>)
 800456a:	1dfb      	adds	r3, r7, #7
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	0019      	movs	r1, r3
 8004570:	230f      	movs	r3, #15
 8004572:	400b      	ands	r3, r1
 8004574:	3b08      	subs	r3, #8
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	3306      	adds	r3, #6
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	18d3      	adds	r3, r2, r3
 800457e:	3304      	adds	r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	1dfa      	adds	r2, r7, #7
 8004584:	7812      	ldrb	r2, [r2, #0]
 8004586:	0011      	movs	r1, r2
 8004588:	2203      	movs	r2, #3
 800458a:	400a      	ands	r2, r1
 800458c:	00d2      	lsls	r2, r2, #3
 800458e:	21ff      	movs	r1, #255	; 0xff
 8004590:	4091      	lsls	r1, r2
 8004592:	000a      	movs	r2, r1
 8004594:	43d2      	mvns	r2, r2
 8004596:	401a      	ands	r2, r3
 8004598:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	22ff      	movs	r2, #255	; 0xff
 80045a0:	401a      	ands	r2, r3
 80045a2:	1dfb      	adds	r3, r7, #7
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	0018      	movs	r0, r3
 80045a8:	2303      	movs	r3, #3
 80045aa:	4003      	ands	r3, r0
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045b0:	4809      	ldr	r0, [pc, #36]	; (80045d8 <__NVIC_SetPriority+0xd8>)
 80045b2:	1dfb      	adds	r3, r7, #7
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	001c      	movs	r4, r3
 80045b8:	230f      	movs	r3, #15
 80045ba:	4023      	ands	r3, r4
 80045bc:	3b08      	subs	r3, #8
 80045be:	089b      	lsrs	r3, r3, #2
 80045c0:	430a      	orrs	r2, r1
 80045c2:	3306      	adds	r3, #6
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	18c3      	adds	r3, r0, r3
 80045c8:	3304      	adds	r3, #4
 80045ca:	601a      	str	r2, [r3, #0]
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b003      	add	sp, #12
 80045d2:	bd90      	pop	{r4, r7, pc}
 80045d4:	e000e100 	.word	0xe000e100
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	1e5a      	subs	r2, r3, #1
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	045b      	lsls	r3, r3, #17
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d301      	bcc.n	80045f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f0:	2301      	movs	r3, #1
 80045f2:	e010      	b.n	8004616 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <SysTick_Config+0x44>)
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	3a01      	subs	r2, #1
 80045fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045fc:	2301      	movs	r3, #1
 80045fe:	425b      	negs	r3, r3
 8004600:	2103      	movs	r1, #3
 8004602:	0018      	movs	r0, r3
 8004604:	f7ff ff7c 	bl	8004500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <SysTick_Config+0x44>)
 800460a:	2200      	movs	r2, #0
 800460c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <SysTick_Config+0x44>)
 8004610:	2207      	movs	r2, #7
 8004612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004614:	2300      	movs	r3, #0
}
 8004616:	0018      	movs	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	b002      	add	sp, #8
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	e000e010 	.word	0xe000e010

08004624 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	210f      	movs	r1, #15
 8004630:	187b      	adds	r3, r7, r1
 8004632:	1c02      	adds	r2, r0, #0
 8004634:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	187b      	adds	r3, r7, r1
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	b25b      	sxtb	r3, r3
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f7ff ff5d 	bl	8004500 <__NVIC_SetPriority>
}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	b004      	add	sp, #16
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f7ff ffbf 	bl	80045dc <SysTick_Config>
 800465e:	0003      	movs	r3, r0
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b002      	add	sp, #8
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800467e:	e155      	b.n	800492c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2101      	movs	r1, #1
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4091      	lsls	r1, r2
 800468a:	000a      	movs	r2, r1
 800468c:	4013      	ands	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d100      	bne.n	8004698 <HAL_GPIO_Init+0x30>
 8004696:	e146      	b.n	8004926 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2203      	movs	r2, #3
 800469e:	4013      	ands	r3, r2
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d005      	beq.n	80046b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d130      	bne.n	8004712 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	2203      	movs	r2, #3
 80046bc:	409a      	lsls	r2, r3
 80046be:	0013      	movs	r3, r2
 80046c0:	43da      	mvns	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	409a      	lsls	r2, r3
 80046d2:	0013      	movs	r3, r2
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046e6:	2201      	movs	r2, #1
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	409a      	lsls	r2, r3
 80046ec:	0013      	movs	r3, r2
 80046ee:	43da      	mvns	r2, r3
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	2201      	movs	r2, #1
 80046fe:	401a      	ands	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	409a      	lsls	r2, r3
 8004704:	0013      	movs	r3, r2
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2203      	movs	r2, #3
 8004718:	4013      	ands	r3, r2
 800471a:	2b03      	cmp	r3, #3
 800471c:	d017      	beq.n	800474e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	2203      	movs	r2, #3
 800472a:	409a      	lsls	r2, r3
 800472c:	0013      	movs	r3, r2
 800472e:	43da      	mvns	r2, r3
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	409a      	lsls	r2, r3
 8004740:	0013      	movs	r3, r2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2203      	movs	r2, #3
 8004754:	4013      	ands	r3, r2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d123      	bne.n	80047a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	08da      	lsrs	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3208      	adds	r2, #8
 8004762:	0092      	lsls	r2, r2, #2
 8004764:	58d3      	ldr	r3, [r2, r3]
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2207      	movs	r2, #7
 800476c:	4013      	ands	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	220f      	movs	r2, #15
 8004772:	409a      	lsls	r2, r3
 8004774:	0013      	movs	r3, r2
 8004776:	43da      	mvns	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4013      	ands	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2107      	movs	r1, #7
 8004786:	400b      	ands	r3, r1
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	409a      	lsls	r2, r3
 800478c:	0013      	movs	r3, r2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	08da      	lsrs	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3208      	adds	r2, #8
 800479c:	0092      	lsls	r2, r2, #2
 800479e:	6939      	ldr	r1, [r7, #16]
 80047a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	2203      	movs	r2, #3
 80047ae:	409a      	lsls	r2, r3
 80047b0:	0013      	movs	r3, r2
 80047b2:	43da      	mvns	r2, r3
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2203      	movs	r2, #3
 80047c0:	401a      	ands	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	0013      	movs	r3, r2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	23c0      	movs	r3, #192	; 0xc0
 80047dc:	029b      	lsls	r3, r3, #10
 80047de:	4013      	ands	r3, r2
 80047e0:	d100      	bne.n	80047e4 <HAL_GPIO_Init+0x17c>
 80047e2:	e0a0      	b.n	8004926 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e4:	4b57      	ldr	r3, [pc, #348]	; (8004944 <HAL_GPIO_Init+0x2dc>)
 80047e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e8:	4b56      	ldr	r3, [pc, #344]	; (8004944 <HAL_GPIO_Init+0x2dc>)
 80047ea:	2101      	movs	r1, #1
 80047ec:	430a      	orrs	r2, r1
 80047ee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80047f0:	4a55      	ldr	r2, [pc, #340]	; (8004948 <HAL_GPIO_Init+0x2e0>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	3302      	adds	r3, #2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	589b      	ldr	r3, [r3, r2]
 80047fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2203      	movs	r2, #3
 8004802:	4013      	ands	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	220f      	movs	r2, #15
 8004808:	409a      	lsls	r2, r3
 800480a:	0013      	movs	r3, r2
 800480c:	43da      	mvns	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	23a0      	movs	r3, #160	; 0xa0
 8004818:	05db      	lsls	r3, r3, #23
 800481a:	429a      	cmp	r2, r3
 800481c:	d01f      	beq.n	800485e <HAL_GPIO_Init+0x1f6>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a4a      	ldr	r2, [pc, #296]	; (800494c <HAL_GPIO_Init+0x2e4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d019      	beq.n	800485a <HAL_GPIO_Init+0x1f2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a49      	ldr	r2, [pc, #292]	; (8004950 <HAL_GPIO_Init+0x2e8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_GPIO_Init+0x1ee>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a48      	ldr	r2, [pc, #288]	; (8004954 <HAL_GPIO_Init+0x2ec>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00d      	beq.n	8004852 <HAL_GPIO_Init+0x1ea>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a47      	ldr	r2, [pc, #284]	; (8004958 <HAL_GPIO_Init+0x2f0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d007      	beq.n	800484e <HAL_GPIO_Init+0x1e6>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a46      	ldr	r2, [pc, #280]	; (800495c <HAL_GPIO_Init+0x2f4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <HAL_GPIO_Init+0x1e2>
 8004846:	2305      	movs	r3, #5
 8004848:	e00a      	b.n	8004860 <HAL_GPIO_Init+0x1f8>
 800484a:	2306      	movs	r3, #6
 800484c:	e008      	b.n	8004860 <HAL_GPIO_Init+0x1f8>
 800484e:	2304      	movs	r3, #4
 8004850:	e006      	b.n	8004860 <HAL_GPIO_Init+0x1f8>
 8004852:	2303      	movs	r3, #3
 8004854:	e004      	b.n	8004860 <HAL_GPIO_Init+0x1f8>
 8004856:	2302      	movs	r3, #2
 8004858:	e002      	b.n	8004860 <HAL_GPIO_Init+0x1f8>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <HAL_GPIO_Init+0x1f8>
 800485e:	2300      	movs	r3, #0
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	2103      	movs	r1, #3
 8004864:	400a      	ands	r2, r1
 8004866:	0092      	lsls	r2, r2, #2
 8004868:	4093      	lsls	r3, r2
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004870:	4935      	ldr	r1, [pc, #212]	; (8004948 <HAL_GPIO_Init+0x2e0>)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	089b      	lsrs	r3, r3, #2
 8004876:	3302      	adds	r3, #2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800487e:	4b38      	ldr	r3, [pc, #224]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	43da      	mvns	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	025b      	lsls	r3, r3, #9
 8004896:	4013      	ands	r3, r2
 8004898:	d003      	beq.n	80048a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80048a2:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80048a8:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43da      	mvns	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	029b      	lsls	r3, r3, #10
 80048c0:	4013      	ands	r3, r2
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	43da      	mvns	r2, r3
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	035b      	lsls	r3, r3, #13
 80048ea:	4013      	ands	r3, r2
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80048fc:	4b18      	ldr	r3, [pc, #96]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	43da      	mvns	r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	039b      	lsls	r3, r3, #14
 8004914:	4013      	ands	r3, r2
 8004916:	d003      	beq.n	8004920 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	3301      	adds	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	40da      	lsrs	r2, r3
 8004934:	1e13      	subs	r3, r2, #0
 8004936:	d000      	beq.n	800493a <HAL_GPIO_Init+0x2d2>
 8004938:	e6a2      	b.n	8004680 <HAL_GPIO_Init+0x18>
  }
}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b006      	add	sp, #24
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	40010000 	.word	0x40010000
 800494c:	50000400 	.word	0x50000400
 8004950:	50000800 	.word	0x50000800
 8004954:	50000c00 	.word	0x50000c00
 8004958:	50001000 	.word	0x50001000
 800495c:	50001c00 	.word	0x50001c00
 8004960:	40010400 	.word	0x40010400

08004964 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	0008      	movs	r0, r1
 800496e:	0011      	movs	r1, r2
 8004970:	1cbb      	adds	r3, r7, #2
 8004972:	1c02      	adds	r2, r0, #0
 8004974:	801a      	strh	r2, [r3, #0]
 8004976:	1c7b      	adds	r3, r7, #1
 8004978:	1c0a      	adds	r2, r1, #0
 800497a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800497c:	1c7b      	adds	r3, r7, #1
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004984:	1cbb      	adds	r3, r7, #2
 8004986:	881a      	ldrh	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800498c:	e003      	b.n	8004996 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800498e:	1cbb      	adds	r3, r7, #2
 8004990:	881a      	ldrh	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	46bd      	mov	sp, r7
 800499a:	b002      	add	sp, #8
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e082      	b.n	8004ab8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2241      	movs	r2, #65	; 0x41
 80049b6:	5c9b      	ldrb	r3, [r3, r2]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d107      	bne.n	80049ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2240      	movs	r2, #64	; 0x40
 80049c2:	2100      	movs	r1, #0
 80049c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	0018      	movs	r0, r3
 80049ca:	f7fe fdb5 	bl	8003538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2241      	movs	r2, #65	; 0x41
 80049d2:	2124      	movs	r1, #36	; 0x24
 80049d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2101      	movs	r1, #1
 80049e2:	438a      	bics	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4934      	ldr	r1, [pc, #208]	; (8004ac0 <HAL_I2C_Init+0x120>)
 80049f0:	400a      	ands	r2, r1
 80049f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4931      	ldr	r1, [pc, #196]	; (8004ac4 <HAL_I2C_Init+0x124>)
 8004a00:	400a      	ands	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d108      	bne.n	8004a1e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	0209      	lsls	r1, r1, #8
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	e007      	b.n	8004a2e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2184      	movs	r1, #132	; 0x84
 8004a28:	0209      	lsls	r1, r1, #8
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d104      	bne.n	8004a40 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2280      	movs	r2, #128	; 0x80
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	491f      	ldr	r1, [pc, #124]	; (8004ac8 <HAL_I2C_Init+0x128>)
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	491a      	ldr	r1, [pc, #104]	; (8004ac4 <HAL_I2C_Init+0x124>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69d9      	ldr	r1, [r3, #28]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2101      	movs	r1, #1
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2241      	movs	r2, #65	; 0x41
 8004aa4:	2120      	movs	r1, #32
 8004aa6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2242      	movs	r2, #66	; 0x42
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b002      	add	sp, #8
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	f0ffffff 	.word	0xf0ffffff
 8004ac4:	ffff7fff 	.word	0xffff7fff
 8004ac8:	02008000 	.word	0x02008000

08004acc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b089      	sub	sp, #36	; 0x24
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	0008      	movs	r0, r1
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	0019      	movs	r1, r3
 8004ada:	230a      	movs	r3, #10
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	1c02      	adds	r2, r0, #0
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	1c0a      	adds	r2, r1, #0
 8004ae8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2241      	movs	r2, #65	; 0x41
 8004aee:	5c9b      	ldrb	r3, [r3, r2]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d000      	beq.n	8004af8 <HAL_I2C_Master_Transmit+0x2c>
 8004af6:	e0e7      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2240      	movs	r2, #64	; 0x40
 8004afc:	5c9b      	ldrb	r3, [r3, r2]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_I2C_Master_Transmit+0x3a>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0e1      	b.n	8004cca <HAL_I2C_Master_Transmit+0x1fe>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2240      	movs	r2, #64	; 0x40
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b0e:	f7ff fcc9 	bl	80044a4 <HAL_GetTick>
 8004b12:	0003      	movs	r3, r0
 8004b14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	0219      	lsls	r1, r3, #8
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2319      	movs	r3, #25
 8004b22:	2201      	movs	r2, #1
 8004b24:	f000 fb9a 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004b28:	1e03      	subs	r3, r0, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0cc      	b.n	8004cca <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2241      	movs	r2, #65	; 0x41
 8004b34:	2121      	movs	r1, #33	; 0x21
 8004b36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2242      	movs	r2, #66	; 0x42
 8004b3c:	2110      	movs	r1, #16
 8004b3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2208      	movs	r2, #8
 8004b50:	18ba      	adds	r2, r7, r2
 8004b52:	8812      	ldrh	r2, [r2, #0]
 8004b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2bff      	cmp	r3, #255	; 0xff
 8004b64:	d911      	bls.n	8004b8a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	22ff      	movs	r2, #255	; 0xff
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	045c      	lsls	r4, r3, #17
 8004b76:	230a      	movs	r3, #10
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	8819      	ldrh	r1, [r3, #0]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	4b55      	ldr	r3, [pc, #340]	; (8004cd4 <HAL_I2C_Master_Transmit+0x208>)
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	0023      	movs	r3, r4
 8004b84:	f000 fd0a 	bl	800559c <I2C_TransferConfig>
 8004b88:	e075      	b.n	8004c76 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	049c      	lsls	r4, r3, #18
 8004b9e:	230a      	movs	r3, #10
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	8819      	ldrh	r1, [r3, #0]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	4b4b      	ldr	r3, [pc, #300]	; (8004cd4 <HAL_I2C_Master_Transmit+0x208>)
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	0023      	movs	r3, r4
 8004bac:	f000 fcf6 	bl	800559c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004bb0:	e061      	b.n	8004c76 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 fb8e 	bl	80052da <I2C_WaitOnTXISFlagUntilTimeout>
 8004bbe:	1e03      	subs	r3, r0, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e081      	b.n	8004cca <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d03a      	beq.n	8004c76 <HAL_I2C_Master_Transmit+0x1aa>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d136      	bne.n	8004c76 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	0013      	movs	r3, r2
 8004c12:	2200      	movs	r2, #0
 8004c14:	2180      	movs	r1, #128	; 0x80
 8004c16:	f000 fb21 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004c1a:	1e03      	subs	r3, r0, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e053      	b.n	8004cca <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2bff      	cmp	r3, #255	; 0xff
 8004c2a:	d911      	bls.n	8004c50 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	22ff      	movs	r2, #255	; 0xff
 8004c30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	045c      	lsls	r4, r3, #17
 8004c3c:	230a      	movs	r3, #10
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	8819      	ldrh	r1, [r3, #0]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	2300      	movs	r3, #0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	0023      	movs	r3, r4
 8004c4a:	f000 fca7 	bl	800559c <I2C_TransferConfig>
 8004c4e:	e012      	b.n	8004c76 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	049c      	lsls	r4, r3, #18
 8004c64:	230a      	movs	r3, #10
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	8819      	ldrh	r1, [r3, #0]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	0023      	movs	r3, r4
 8004c72:	f000 fc93 	bl	800559c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d198      	bne.n	8004bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	0018      	movs	r0, r3
 8004c88:	f000 fb66 	bl	8005358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e01a      	b.n	8004cca <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	490c      	ldr	r1, [pc, #48]	; (8004cd8 <HAL_I2C_Master_Transmit+0x20c>)
 8004ca8:	400a      	ands	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2241      	movs	r2, #65	; 0x41
 8004cb0:	2120      	movs	r1, #32
 8004cb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2242      	movs	r2, #66	; 0x42
 8004cb8:	2100      	movs	r1, #0
 8004cba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2240      	movs	r2, #64	; 0x40
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e000      	b.n	8004cca <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
  }
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b007      	add	sp, #28
 8004cd0:	bd90      	pop	{r4, r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	80002000 	.word	0x80002000
 8004cd8:	fe00e800 	.word	0xfe00e800

08004cdc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b089      	sub	sp, #36	; 0x24
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	0008      	movs	r0, r1
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	0019      	movs	r1, r3
 8004cea:	230a      	movs	r3, #10
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	1c02      	adds	r2, r0, #0
 8004cf0:	801a      	strh	r2, [r3, #0]
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	1c0a      	adds	r2, r1, #0
 8004cf8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2241      	movs	r2, #65	; 0x41
 8004cfe:	5c9b      	ldrb	r3, [r3, r2]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d000      	beq.n	8004d08 <HAL_I2C_Master_Receive+0x2c>
 8004d06:	e0e8      	b.n	8004eda <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2240      	movs	r2, #64	; 0x40
 8004d0c:	5c9b      	ldrb	r3, [r3, r2]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_I2C_Master_Receive+0x3a>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e0e2      	b.n	8004edc <HAL_I2C_Master_Receive+0x200>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2240      	movs	r2, #64	; 0x40
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d1e:	f7ff fbc1 	bl	80044a4 <HAL_GetTick>
 8004d22:	0003      	movs	r3, r0
 8004d24:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	0219      	lsls	r1, r3, #8
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2319      	movs	r3, #25
 8004d32:	2201      	movs	r2, #1
 8004d34:	f000 fa92 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004d38:	1e03      	subs	r3, r0, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0cd      	b.n	8004edc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2241      	movs	r2, #65	; 0x41
 8004d44:	2122      	movs	r1, #34	; 0x22
 8004d46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2242      	movs	r2, #66	; 0x42
 8004d4c:	2110      	movs	r1, #16
 8004d4e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2208      	movs	r2, #8
 8004d60:	18ba      	adds	r2, r7, r2
 8004d62:	8812      	ldrh	r2, [r2, #0]
 8004d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2bff      	cmp	r3, #255	; 0xff
 8004d74:	d911      	bls.n	8004d9a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	22ff      	movs	r2, #255	; 0xff
 8004d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	045c      	lsls	r4, r3, #17
 8004d86:	230a      	movs	r3, #10
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	8819      	ldrh	r1, [r3, #0]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	4b55      	ldr	r3, [pc, #340]	; (8004ee4 <HAL_I2C_Master_Receive+0x208>)
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	0023      	movs	r3, r4
 8004d94:	f000 fc02 	bl	800559c <I2C_TransferConfig>
 8004d98:	e076      	b.n	8004e88 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	049c      	lsls	r4, r3, #18
 8004dae:	230a      	movs	r3, #10
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	8819      	ldrh	r1, [r3, #0]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	4b4b      	ldr	r3, [pc, #300]	; (8004ee4 <HAL_I2C_Master_Receive+0x208>)
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	0023      	movs	r3, r4
 8004dbc:	f000 fbee 	bl	800559c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004dc0:	e062      	b.n	8004e88 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 fb01 	bl	80053d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dce:	1e03      	subs	r3, r0, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e082      	b.n	8004edc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d03a      	beq.n	8004e88 <HAL_I2C_Master_Receive+0x1ac>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d136      	bne.n	8004e88 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	0013      	movs	r3, r2
 8004e24:	2200      	movs	r2, #0
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	f000 fa18 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004e2c:	1e03      	subs	r3, r0, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e053      	b.n	8004edc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2bff      	cmp	r3, #255	; 0xff
 8004e3c:	d911      	bls.n	8004e62 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	22ff      	movs	r2, #255	; 0xff
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	045c      	lsls	r4, r3, #17
 8004e4e:	230a      	movs	r3, #10
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	8819      	ldrh	r1, [r3, #0]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	0023      	movs	r3, r4
 8004e5c:	f000 fb9e 	bl	800559c <I2C_TransferConfig>
 8004e60:	e012      	b.n	8004e88 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	049c      	lsls	r4, r3, #18
 8004e76:	230a      	movs	r3, #10
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	8819      	ldrh	r1, [r3, #0]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	0023      	movs	r3, r4
 8004e84:	f000 fb8a 	bl	800559c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d197      	bne.n	8004dc2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f000 fa5d 	bl	8005358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e9e:	1e03      	subs	r3, r0, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e01a      	b.n	8004edc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	490b      	ldr	r1, [pc, #44]	; (8004ee8 <HAL_I2C_Master_Receive+0x20c>)
 8004eba:	400a      	ands	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2241      	movs	r2, #65	; 0x41
 8004ec2:	2120      	movs	r1, #32
 8004ec4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2242      	movs	r2, #66	; 0x42
 8004eca:	2100      	movs	r1, #0
 8004ecc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2240      	movs	r2, #64	; 0x40
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
  }
}
 8004edc:	0018      	movs	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b007      	add	sp, #28
 8004ee2:	bd90      	pop	{r4, r7, pc}
 8004ee4:	80002400 	.word	0x80002400
 8004ee8:	fe00e800 	.word	0xfe00e800

08004eec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b089      	sub	sp, #36	; 0x24
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	000c      	movs	r4, r1
 8004ef6:	0010      	movs	r0, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	230a      	movs	r3, #10
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	1c22      	adds	r2, r4, #0
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	2308      	movs	r3, #8
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	1c02      	adds	r2, r0, #0
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	1dbb      	adds	r3, r7, #6
 8004f0c:	1c0a      	adds	r2, r1, #0
 8004f0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2241      	movs	r2, #65	; 0x41
 8004f14:	5c9b      	ldrb	r3, [r3, r2]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d000      	beq.n	8004f1e <HAL_I2C_Mem_Read+0x32>
 8004f1c:	e110      	b.n	8005140 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <HAL_I2C_Mem_Read+0x42>
 8004f24:	232c      	movs	r3, #44	; 0x2c
 8004f26:	18fb      	adds	r3, r7, r3
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d105      	bne.n	8004f3a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2280      	movs	r2, #128	; 0x80
 8004f32:	0092      	lsls	r2, r2, #2
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e103      	b.n	8005142 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2240      	movs	r2, #64	; 0x40
 8004f3e:	5c9b      	ldrb	r3, [r3, r2]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_I2C_Mem_Read+0x5c>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e0fc      	b.n	8005142 <HAL_I2C_Mem_Read+0x256>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2240      	movs	r2, #64	; 0x40
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f50:	f7ff faa8 	bl	80044a4 <HAL_GetTick>
 8004f54:	0003      	movs	r3, r0
 8004f56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	0219      	lsls	r1, r3, #8
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2319      	movs	r3, #25
 8004f64:	2201      	movs	r2, #1
 8004f66:	f000 f979 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004f6a:	1e03      	subs	r3, r0, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0e7      	b.n	8005142 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2241      	movs	r2, #65	; 0x41
 8004f76:	2122      	movs	r1, #34	; 0x22
 8004f78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2242      	movs	r2, #66	; 0x42
 8004f7e:	2140      	movs	r1, #64	; 0x40
 8004f80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	222c      	movs	r2, #44	; 0x2c
 8004f92:	18ba      	adds	r2, r7, r2
 8004f94:	8812      	ldrh	r2, [r2, #0]
 8004f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f9e:	1dbb      	adds	r3, r7, #6
 8004fa0:	881c      	ldrh	r4, [r3, #0]
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	881a      	ldrh	r2, [r3, #0]
 8004fa8:	230a      	movs	r3, #10
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	8819      	ldrh	r1, [r3, #0]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	0023      	movs	r3, r4
 8004fba:	f000 f8cb 	bl	8005154 <I2C_RequestMemoryRead>
 8004fbe:	1e03      	subs	r3, r0, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2240      	movs	r2, #64	; 0x40
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e0b9      	b.n	8005142 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2bff      	cmp	r3, #255	; 0xff
 8004fd6:	d911      	bls.n	8004ffc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	22ff      	movs	r2, #255	; 0xff
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	045c      	lsls	r4, r3, #17
 8004fe8:	230a      	movs	r3, #10
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	8819      	ldrh	r1, [r3, #0]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	4b56      	ldr	r3, [pc, #344]	; (800514c <HAL_I2C_Mem_Read+0x260>)
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	0023      	movs	r3, r4
 8004ff6:	f000 fad1 	bl	800559c <I2C_TransferConfig>
 8004ffa:	e012      	b.n	8005022 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500a:	b2da      	uxtb	r2, r3
 800500c:	2380      	movs	r3, #128	; 0x80
 800500e:	049c      	lsls	r4, r3, #18
 8005010:	230a      	movs	r3, #10
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	8819      	ldrh	r1, [r3, #0]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	4b4c      	ldr	r3, [pc, #304]	; (800514c <HAL_I2C_Mem_Read+0x260>)
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	0023      	movs	r3, r4
 800501e:	f000 fabd 	bl	800559c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	0013      	movs	r3, r2
 800502c:	2200      	movs	r2, #0
 800502e:	2104      	movs	r1, #4
 8005030:	f000 f914 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8005034:	1e03      	subs	r3, r0, #0
 8005036:	d001      	beq.n	800503c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e082      	b.n	8005142 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d03a      	beq.n	80050ee <HAL_I2C_Mem_Read+0x202>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d136      	bne.n	80050ee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	0013      	movs	r3, r2
 800508a:	2200      	movs	r2, #0
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	f000 f8e5 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e053      	b.n	8005142 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2bff      	cmp	r3, #255	; 0xff
 80050a2:	d911      	bls.n	80050c8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	22ff      	movs	r2, #255	; 0xff
 80050a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	045c      	lsls	r4, r3, #17
 80050b4:	230a      	movs	r3, #10
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	8819      	ldrh	r1, [r3, #0]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	2300      	movs	r3, #0
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	0023      	movs	r3, r4
 80050c2:	f000 fa6b 	bl	800559c <I2C_TransferConfig>
 80050c6:	e012      	b.n	80050ee <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	049c      	lsls	r4, r3, #18
 80050dc:	230a      	movs	r3, #10
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	8819      	ldrh	r1, [r3, #0]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	2300      	movs	r3, #0
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	0023      	movs	r3, r4
 80050ea:	f000 fa57 	bl	800559c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d194      	bne.n	8005022 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	0018      	movs	r0, r3
 8005100:	f000 f92a 	bl	8005358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005104:	1e03      	subs	r3, r0, #0
 8005106:	d001      	beq.n	800510c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e01a      	b.n	8005142 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2220      	movs	r2, #32
 8005112:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	490c      	ldr	r1, [pc, #48]	; (8005150 <HAL_I2C_Mem_Read+0x264>)
 8005120:	400a      	ands	r2, r1
 8005122:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2241      	movs	r2, #65	; 0x41
 8005128:	2120      	movs	r1, #32
 800512a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2242      	movs	r2, #66	; 0x42
 8005130:	2100      	movs	r1, #0
 8005132:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2240      	movs	r2, #64	; 0x40
 8005138:	2100      	movs	r1, #0
 800513a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b007      	add	sp, #28
 8005148:	bd90      	pop	{r4, r7, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	80002400 	.word	0x80002400
 8005150:	fe00e800 	.word	0xfe00e800

08005154 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005154:	b5b0      	push	{r4, r5, r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	000c      	movs	r4, r1
 800515e:	0010      	movs	r0, r2
 8005160:	0019      	movs	r1, r3
 8005162:	250a      	movs	r5, #10
 8005164:	197b      	adds	r3, r7, r5
 8005166:	1c22      	adds	r2, r4, #0
 8005168:	801a      	strh	r2, [r3, #0]
 800516a:	2308      	movs	r3, #8
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	1c02      	adds	r2, r0, #0
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	1dbb      	adds	r3, r7, #6
 8005174:	1c0a      	adds	r2, r1, #0
 8005176:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005178:	1dbb      	adds	r3, r7, #6
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	197b      	adds	r3, r7, r5
 8005180:	8819      	ldrh	r1, [r3, #0]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	4b23      	ldr	r3, [pc, #140]	; (8005214 <I2C_RequestMemoryRead+0xc0>)
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	2300      	movs	r3, #0
 800518a:	f000 fa07 	bl	800559c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005190:	6a39      	ldr	r1, [r7, #32]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	0018      	movs	r0, r3
 8005196:	f000 f8a0 	bl	80052da <I2C_WaitOnTXISFlagUntilTimeout>
 800519a:	1e03      	subs	r3, r0, #0
 800519c:	d001      	beq.n	80051a2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e033      	b.n	800520a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051a2:	1dbb      	adds	r3, r7, #6
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051aa:	2308      	movs	r3, #8
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28
 80051b8:	e019      	b.n	80051ee <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051ba:	2308      	movs	r3, #8
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	6a39      	ldr	r1, [r7, #32]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 f881 	bl	80052da <I2C_WaitOnTXISFlagUntilTimeout>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d001      	beq.n	80051e0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e014      	b.n	800520a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051e0:	2308      	movs	r3, #8
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051ee:	6a3a      	ldr	r2, [r7, #32]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	0013      	movs	r3, r2
 80051f8:	2200      	movs	r2, #0
 80051fa:	2140      	movs	r1, #64	; 0x40
 80051fc:	f000 f82e 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8005200:	1e03      	subs	r3, r0, #0
 8005202:	d001      	beq.n	8005208 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	0018      	movs	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	b004      	add	sp, #16
 8005210:	bdb0      	pop	{r4, r5, r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	80002000 	.word	0x80002000

08005218 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2202      	movs	r2, #2
 8005228:	4013      	ands	r3, r2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d103      	bne.n	8005236 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2201      	movs	r2, #1
 800523e:	4013      	ands	r3, r2
 8005240:	2b01      	cmp	r3, #1
 8005242:	d007      	beq.n	8005254 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2101      	movs	r1, #1
 8005250:	430a      	orrs	r2, r1
 8005252:	619a      	str	r2, [r3, #24]
  }
}
 8005254:	46c0      	nop			; (mov r8, r8)
 8005256:	46bd      	mov	sp, r7
 8005258:	b002      	add	sp, #8
 800525a:	bd80      	pop	{r7, pc}

0800525c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	1dfb      	adds	r3, r7, #7
 800526a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800526c:	e021      	b.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	3301      	adds	r3, #1
 8005272:	d01e      	beq.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005274:	f7ff f916 	bl	80044a4 <HAL_GetTick>
 8005278:	0002      	movs	r2, r0
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d113      	bne.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	2220      	movs	r2, #32
 8005290:	431a      	orrs	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2241      	movs	r2, #65	; 0x41
 800529a:	2120      	movs	r1, #32
 800529c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2242      	movs	r2, #66	; 0x42
 80052a2:	2100      	movs	r1, #0
 80052a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2240      	movs	r2, #64	; 0x40
 80052aa:	2100      	movs	r1, #0
 80052ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e00f      	b.n	80052d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	425a      	negs	r2, r3
 80052c2:	4153      	adcs	r3, r2
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	001a      	movs	r2, r3
 80052c8:	1dfb      	adds	r3, r7, #7
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d0ce      	beq.n	800526e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	0018      	movs	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b004      	add	sp, #16
 80052d8:	bd80      	pop	{r7, pc}

080052da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052e6:	e02b      	b.n	8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	0018      	movs	r0, r3
 80052f0:	f000 f8da 	bl	80054a8 <I2C_IsAcknowledgeFailed>
 80052f4:	1e03      	subs	r3, r0, #0
 80052f6:	d001      	beq.n	80052fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e029      	b.n	8005350 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	3301      	adds	r3, #1
 8005300:	d01e      	beq.n	8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7ff f8cf 	bl	80044a4 <HAL_GetTick>
 8005306:	0002      	movs	r2, r0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d113      	bne.n	8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	2220      	movs	r2, #32
 800531e:	431a      	orrs	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2241      	movs	r2, #65	; 0x41
 8005328:	2120      	movs	r1, #32
 800532a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2242      	movs	r2, #66	; 0x42
 8005330:	2100      	movs	r1, #0
 8005332:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2240      	movs	r2, #64	; 0x40
 8005338:	2100      	movs	r1, #0
 800533a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e007      	b.n	8005350 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	2202      	movs	r2, #2
 8005348:	4013      	ands	r3, r2
 800534a:	2b02      	cmp	r3, #2
 800534c:	d1cc      	bne.n	80052e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	0018      	movs	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	b004      	add	sp, #16
 8005356:	bd80      	pop	{r7, pc}

08005358 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005364:	e028      	b.n	80053b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 f89b 	bl	80054a8 <I2C_IsAcknowledgeFailed>
 8005372:	1e03      	subs	r3, r0, #0
 8005374:	d001      	beq.n	800537a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e026      	b.n	80053c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7ff f893 	bl	80044a4 <HAL_GetTick>
 800537e:	0002      	movs	r2, r0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d113      	bne.n	80053b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005394:	2220      	movs	r2, #32
 8005396:	431a      	orrs	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2241      	movs	r2, #65	; 0x41
 80053a0:	2120      	movs	r1, #32
 80053a2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2242      	movs	r2, #66	; 0x42
 80053a8:	2100      	movs	r1, #0
 80053aa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2240      	movs	r2, #64	; 0x40
 80053b0:	2100      	movs	r1, #0
 80053b2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e007      	b.n	80053c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2220      	movs	r2, #32
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d1cf      	bne.n	8005366 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b004      	add	sp, #16
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053dc:	e055      	b.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 f85f 	bl	80054a8 <I2C_IsAcknowledgeFailed>
 80053ea:	1e03      	subs	r3, r0, #0
 80053ec:	d001      	beq.n	80053f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e053      	b.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2220      	movs	r2, #32
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d129      	bne.n	8005454 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2204      	movs	r2, #4
 8005408:	4013      	ands	r3, r2
 800540a:	2b04      	cmp	r3, #4
 800540c:	d105      	bne.n	800541a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e03f      	b.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2220      	movs	r2, #32
 8005420:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	491d      	ldr	r1, [pc, #116]	; (80054a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800542e:	400a      	ands	r2, r1
 8005430:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2241      	movs	r2, #65	; 0x41
 800543c:	2120      	movs	r1, #32
 800543e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2242      	movs	r2, #66	; 0x42
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2240      	movs	r2, #64	; 0x40
 800544c:	2100      	movs	r1, #0
 800544e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e022      	b.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005454:	f7ff f826 	bl	80044a4 <HAL_GetTick>
 8005458:	0002      	movs	r2, r0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546e:	2220      	movs	r2, #32
 8005470:	431a      	orrs	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2241      	movs	r2, #65	; 0x41
 800547a:	2120      	movs	r1, #32
 800547c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2240      	movs	r2, #64	; 0x40
 8005482:	2100      	movs	r1, #0
 8005484:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e007      	b.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2204      	movs	r2, #4
 8005492:	4013      	ands	r3, r2
 8005494:	2b04      	cmp	r3, #4
 8005496:	d1a2      	bne.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	0018      	movs	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	b004      	add	sp, #16
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	fe00e800 	.word	0xfe00e800

080054a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2210      	movs	r2, #16
 80054bc:	4013      	ands	r3, r2
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d164      	bne.n	800558c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	049b      	lsls	r3, r3, #18
 80054cc:	401a      	ands	r2, r3
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	049b      	lsls	r3, r3, #18
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d02b      	beq.n	800552e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	01c9      	lsls	r1, r1, #7
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e8:	e021      	b.n	800552e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	3301      	adds	r3, #1
 80054ee:	d01e      	beq.n	800552e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f0:	f7fe ffd8 	bl	80044a4 <HAL_GetTick>
 80054f4:	0002      	movs	r2, r0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <I2C_IsAcknowledgeFailed+0x5e>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d113      	bne.n	800552e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	2220      	movs	r2, #32
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2241      	movs	r2, #65	; 0x41
 8005516:	2120      	movs	r1, #32
 8005518:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2242      	movs	r2, #66	; 0x42
 800551e:	2100      	movs	r1, #0
 8005520:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2240      	movs	r2, #64	; 0x40
 8005526:	2100      	movs	r1, #0
 8005528:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e02f      	b.n	800558e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2220      	movs	r2, #32
 8005536:	4013      	ands	r3, r2
 8005538:	2b20      	cmp	r3, #32
 800553a:	d1d6      	bne.n	80054ea <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2210      	movs	r2, #16
 8005542:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2220      	movs	r2, #32
 800554a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	0018      	movs	r0, r3
 8005550:	f7ff fe62 	bl	8005218 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	490e      	ldr	r1, [pc, #56]	; (8005598 <I2C_IsAcknowledgeFailed+0xf0>)
 8005560:	400a      	ands	r2, r1
 8005562:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	2204      	movs	r2, #4
 800556a:	431a      	orrs	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2241      	movs	r2, #65	; 0x41
 8005574:	2120      	movs	r1, #32
 8005576:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2242      	movs	r2, #66	; 0x42
 800557c:	2100      	movs	r1, #0
 800557e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2240      	movs	r2, #64	; 0x40
 8005584:	2100      	movs	r1, #0
 8005586:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	0018      	movs	r0, r3
 8005590:	46bd      	mov	sp, r7
 8005592:	b004      	add	sp, #16
 8005594:	bd80      	pop	{r7, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	fe00e800 	.word	0xfe00e800

0800559c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800559c:	b590      	push	{r4, r7, lr}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	0008      	movs	r0, r1
 80055a6:	0011      	movs	r1, r2
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	240a      	movs	r4, #10
 80055ac:	193b      	adds	r3, r7, r4
 80055ae:	1c02      	adds	r2, r0, #0
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	2009      	movs	r0, #9
 80055b4:	183b      	adds	r3, r7, r0
 80055b6:	1c0a      	adds	r2, r1, #0
 80055b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	0d51      	lsrs	r1, r2, #21
 80055c4:	2280      	movs	r2, #128	; 0x80
 80055c6:	00d2      	lsls	r2, r2, #3
 80055c8:	400a      	ands	r2, r1
 80055ca:	490e      	ldr	r1, [pc, #56]	; (8005604 <I2C_TransferConfig+0x68>)
 80055cc:	430a      	orrs	r2, r1
 80055ce:	43d2      	mvns	r2, r2
 80055d0:	401a      	ands	r2, r3
 80055d2:	0011      	movs	r1, r2
 80055d4:	193b      	adds	r3, r7, r4
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	059b      	lsls	r3, r3, #22
 80055da:	0d9a      	lsrs	r2, r3, #22
 80055dc:	183b      	adds	r3, r7, r0
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	0418      	lsls	r0, r3, #16
 80055e2:	23ff      	movs	r3, #255	; 0xff
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	4003      	ands	r3, r0
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	431a      	orrs	r2, r3
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b005      	add	sp, #20
 8005600:	bd90      	pop	{r4, r7, pc}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	03ff63ff 	.word	0x03ff63ff

08005608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2241      	movs	r2, #65	; 0x41
 8005616:	5c9b      	ldrb	r3, [r3, r2]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b20      	cmp	r3, #32
 800561c:	d138      	bne.n	8005690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2240      	movs	r2, #64	; 0x40
 8005622:	5c9b      	ldrb	r3, [r3, r2]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005628:	2302      	movs	r3, #2
 800562a:	e032      	b.n	8005692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2240      	movs	r2, #64	; 0x40
 8005630:	2101      	movs	r1, #1
 8005632:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2241      	movs	r2, #65	; 0x41
 8005638:	2124      	movs	r1, #36	; 0x24
 800563a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2101      	movs	r1, #1
 8005648:	438a      	bics	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4911      	ldr	r1, [pc, #68]	; (800569c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005658:	400a      	ands	r2, r1
 800565a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2101      	movs	r1, #1
 8005678:	430a      	orrs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2241      	movs	r2, #65	; 0x41
 8005680:	2120      	movs	r1, #32
 8005682:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	2100      	movs	r1, #0
 800568a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	e000      	b.n	8005692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	b002      	add	sp, #8
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	ffffefff 	.word	0xffffefff

080056a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2241      	movs	r2, #65	; 0x41
 80056ae:	5c9b      	ldrb	r3, [r3, r2]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d139      	bne.n	800572a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2240      	movs	r2, #64	; 0x40
 80056ba:	5c9b      	ldrb	r3, [r3, r2]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e033      	b.n	800572c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2240      	movs	r2, #64	; 0x40
 80056c8:	2101      	movs	r1, #1
 80056ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2241      	movs	r2, #65	; 0x41
 80056d0:	2124      	movs	r1, #36	; 0x24
 80056d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2101      	movs	r1, #1
 80056e0:	438a      	bics	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a11      	ldr	r2, [pc, #68]	; (8005734 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2101      	movs	r1, #1
 8005712:	430a      	orrs	r2, r1
 8005714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2241      	movs	r2, #65	; 0x41
 800571a:	2120      	movs	r1, #32
 800571c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2240      	movs	r2, #64	; 0x40
 8005722:	2100      	movs	r1, #0
 8005724:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e000      	b.n	800572c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800572a:	2302      	movs	r3, #2
  }
}
 800572c:	0018      	movs	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	b004      	add	sp, #16
 8005732:	bd80      	pop	{r7, pc}
 8005734:	fffff0ff 	.word	0xfffff0ff

08005738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005738:	b5b0      	push	{r4, r5, r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d102      	bne.n	800574c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f000 fbbf 	bl	8005eca <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800574c:	4bc9      	ldr	r3, [pc, #804]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	220c      	movs	r2, #12
 8005752:	4013      	ands	r3, r2
 8005754:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005756:	4bc7      	ldr	r3, [pc, #796]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	025b      	lsls	r3, r3, #9
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2201      	movs	r2, #1
 8005768:	4013      	ands	r3, r2
 800576a:	d100      	bne.n	800576e <HAL_RCC_OscConfig+0x36>
 800576c:	e07e      	b.n	800586c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2b08      	cmp	r3, #8
 8005772:	d007      	beq.n	8005784 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	2b0c      	cmp	r3, #12
 8005778:	d112      	bne.n	80057a0 <HAL_RCC_OscConfig+0x68>
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	2380      	movs	r3, #128	; 0x80
 800577e:	025b      	lsls	r3, r3, #9
 8005780:	429a      	cmp	r2, r3
 8005782:	d10d      	bne.n	80057a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005784:	4bbb      	ldr	r3, [pc, #748]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	029b      	lsls	r3, r3, #10
 800578c:	4013      	ands	r3, r2
 800578e:	d100      	bne.n	8005792 <HAL_RCC_OscConfig+0x5a>
 8005790:	e06b      	b.n	800586a <HAL_RCC_OscConfig+0x132>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d167      	bne.n	800586a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	f000 fb95 	bl	8005eca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	025b      	lsls	r3, r3, #9
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d107      	bne.n	80057bc <HAL_RCC_OscConfig+0x84>
 80057ac:	4bb1      	ldr	r3, [pc, #708]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4bb0      	ldr	r3, [pc, #704]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057b2:	2180      	movs	r1, #128	; 0x80
 80057b4:	0249      	lsls	r1, r1, #9
 80057b6:	430a      	orrs	r2, r1
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e027      	b.n	800580c <HAL_RCC_OscConfig+0xd4>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	23a0      	movs	r3, #160	; 0xa0
 80057c2:	02db      	lsls	r3, r3, #11
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d10e      	bne.n	80057e6 <HAL_RCC_OscConfig+0xae>
 80057c8:	4baa      	ldr	r3, [pc, #680]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4ba9      	ldr	r3, [pc, #676]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	02c9      	lsls	r1, r1, #11
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	4ba7      	ldr	r3, [pc, #668]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4ba6      	ldr	r3, [pc, #664]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	0249      	lsls	r1, r1, #9
 80057e0:	430a      	orrs	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e012      	b.n	800580c <HAL_RCC_OscConfig+0xd4>
 80057e6:	4ba3      	ldr	r3, [pc, #652]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4ba2      	ldr	r3, [pc, #648]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057ec:	49a2      	ldr	r1, [pc, #648]	; (8005a78 <HAL_RCC_OscConfig+0x340>)
 80057ee:	400a      	ands	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	4ba0      	ldr	r3, [pc, #640]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	025b      	lsls	r3, r3, #9
 80057fa:	4013      	ands	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4b9c      	ldr	r3, [pc, #624]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b9b      	ldr	r3, [pc, #620]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005806:	499d      	ldr	r1, [pc, #628]	; (8005a7c <HAL_RCC_OscConfig+0x344>)
 8005808:	400a      	ands	r2, r1
 800580a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d015      	beq.n	8005840 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005814:	f7fe fe46 	bl	80044a4 <HAL_GetTick>
 8005818:	0003      	movs	r3, r0
 800581a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581c:	e009      	b.n	8005832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800581e:	f7fe fe41 	bl	80044a4 <HAL_GetTick>
 8005822:	0002      	movs	r2, r0
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b64      	cmp	r3, #100	; 0x64
 800582a:	d902      	bls.n	8005832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	f000 fb4c 	bl	8005eca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005832:	4b90      	ldr	r3, [pc, #576]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	029b      	lsls	r3, r3, #10
 800583a:	4013      	ands	r3, r2
 800583c:	d0ef      	beq.n	800581e <HAL_RCC_OscConfig+0xe6>
 800583e:	e015      	b.n	800586c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7fe fe30 	bl	80044a4 <HAL_GetTick>
 8005844:	0003      	movs	r3, r0
 8005846:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800584a:	f7fe fe2b 	bl	80044a4 <HAL_GetTick>
 800584e:	0002      	movs	r2, r0
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b64      	cmp	r3, #100	; 0x64
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e336      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800585c:	4b85      	ldr	r3, [pc, #532]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	029b      	lsls	r3, r3, #10
 8005864:	4013      	ands	r3, r2
 8005866:	d1f0      	bne.n	800584a <HAL_RCC_OscConfig+0x112>
 8005868:	e000      	b.n	800586c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2202      	movs	r2, #2
 8005872:	4013      	ands	r3, r2
 8005874:	d100      	bne.n	8005878 <HAL_RCC_OscConfig+0x140>
 8005876:	e099      	b.n	80059ac <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	2220      	movs	r2, #32
 8005882:	4013      	ands	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005886:	4b7b      	ldr	r3, [pc, #492]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b7a      	ldr	r3, [pc, #488]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 800588c:	2120      	movs	r1, #32
 800588e:	430a      	orrs	r2, r1
 8005890:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	2220      	movs	r2, #32
 8005896:	4393      	bics	r3, r2
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	2b04      	cmp	r3, #4
 800589e:	d005      	beq.n	80058ac <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2b0c      	cmp	r3, #12
 80058a4:	d13e      	bne.n	8005924 <HAL_RCC_OscConfig+0x1ec>
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d13b      	bne.n	8005924 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80058ac:	4b71      	ldr	r3, [pc, #452]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2204      	movs	r2, #4
 80058b2:	4013      	ands	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_RCC_OscConfig+0x188>
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e304      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b6c      	ldr	r3, [pc, #432]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4a6e      	ldr	r2, [pc, #440]	; (8005a80 <HAL_RCC_OscConfig+0x348>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	0019      	movs	r1, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	4b68      	ldr	r3, [pc, #416]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80058d6:	4b67      	ldr	r3, [pc, #412]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2209      	movs	r2, #9
 80058dc:	4393      	bics	r3, r2
 80058de:	0019      	movs	r1, r3
 80058e0:	4b64      	ldr	r3, [pc, #400]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80058e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e4:	430a      	orrs	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058e8:	f000 fc42 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 80058ec:	0001      	movs	r1, r0
 80058ee:	4b61      	ldr	r3, [pc, #388]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	220f      	movs	r2, #15
 80058f6:	4013      	ands	r3, r2
 80058f8:	4a62      	ldr	r2, [pc, #392]	; (8005a84 <HAL_RCC_OscConfig+0x34c>)
 80058fa:	5cd3      	ldrb	r3, [r2, r3]
 80058fc:	000a      	movs	r2, r1
 80058fe:	40da      	lsrs	r2, r3
 8005900:	4b61      	ldr	r3, [pc, #388]	; (8005a88 <HAL_RCC_OscConfig+0x350>)
 8005902:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005904:	4b61      	ldr	r3, [pc, #388]	; (8005a8c <HAL_RCC_OscConfig+0x354>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2513      	movs	r5, #19
 800590a:	197c      	adds	r4, r7, r5
 800590c:	0018      	movs	r0, r3
 800590e:	f7fe fd83 	bl	8004418 <HAL_InitTick>
 8005912:	0003      	movs	r3, r0
 8005914:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005916:	197b      	adds	r3, r7, r5
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d046      	beq.n	80059ac <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800591e:	197b      	adds	r3, r7, r5
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	e2d2      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d027      	beq.n	800597a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800592a:	4b52      	ldr	r3, [pc, #328]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2209      	movs	r2, #9
 8005930:	4393      	bics	r3, r2
 8005932:	0019      	movs	r1, r3
 8005934:	4b4f      	ldr	r3, [pc, #316]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005938:	430a      	orrs	r2, r1
 800593a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593c:	f7fe fdb2 	bl	80044a4 <HAL_GetTick>
 8005940:	0003      	movs	r3, r0
 8005942:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005946:	f7fe fdad 	bl	80044a4 <HAL_GetTick>
 800594a:	0002      	movs	r2, r0
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e2b8      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005958:	4b46      	ldr	r3, [pc, #280]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2204      	movs	r2, #4
 800595e:	4013      	ands	r3, r2
 8005960:	d0f1      	beq.n	8005946 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005962:	4b44      	ldr	r3, [pc, #272]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4a46      	ldr	r2, [pc, #280]	; (8005a80 <HAL_RCC_OscConfig+0x348>)
 8005968:	4013      	ands	r3, r2
 800596a:	0019      	movs	r1, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	021a      	lsls	r2, r3, #8
 8005972:	4b40      	ldr	r3, [pc, #256]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	e018      	b.n	80059ac <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597a:	4b3e      	ldr	r3, [pc, #248]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b3d      	ldr	r3, [pc, #244]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005980:	2101      	movs	r1, #1
 8005982:	438a      	bics	r2, r1
 8005984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005986:	f7fe fd8d 	bl	80044a4 <HAL_GetTick>
 800598a:	0003      	movs	r3, r0
 800598c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005990:	f7fe fd88 	bl	80044a4 <HAL_GetTick>
 8005994:	0002      	movs	r2, r0
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e293      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059a2:	4b34      	ldr	r3, [pc, #208]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2204      	movs	r2, #4
 80059a8:	4013      	ands	r3, r2
 80059aa:	d1f1      	bne.n	8005990 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2210      	movs	r2, #16
 80059b2:	4013      	ands	r3, r2
 80059b4:	d100      	bne.n	80059b8 <HAL_RCC_OscConfig+0x280>
 80059b6:	e0a2      	b.n	8005afe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d140      	bne.n	8005a40 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059be:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	2380      	movs	r3, #128	; 0x80
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4013      	ands	r3, r2
 80059c8:	d005      	beq.n	80059d6 <HAL_RCC_OscConfig+0x29e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e279      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059d6:	4b27      	ldr	r3, [pc, #156]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <HAL_RCC_OscConfig+0x358>)
 80059dc:	4013      	ands	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e4:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ea:	4b22      	ldr	r3, [pc, #136]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	0a19      	lsrs	r1, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	061a      	lsls	r2, r3, #24
 80059f8:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	0b5b      	lsrs	r3, r3, #13
 8005a04:	3301      	adds	r3, #1
 8005a06:	2280      	movs	r2, #128	; 0x80
 8005a08:	0212      	lsls	r2, r2, #8
 8005a0a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	210f      	movs	r1, #15
 8005a14:	400b      	ands	r3, r1
 8005a16:	491b      	ldr	r1, [pc, #108]	; (8005a84 <HAL_RCC_OscConfig+0x34c>)
 8005a18:	5ccb      	ldrb	r3, [r1, r3]
 8005a1a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005a1c:	4b1a      	ldr	r3, [pc, #104]	; (8005a88 <HAL_RCC_OscConfig+0x350>)
 8005a1e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005a20:	4b1a      	ldr	r3, [pc, #104]	; (8005a8c <HAL_RCC_OscConfig+0x354>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2513      	movs	r5, #19
 8005a26:	197c      	adds	r4, r7, r5
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7fe fcf5 	bl	8004418 <HAL_InitTick>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005a32:	197b      	adds	r3, r7, r5
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d061      	beq.n	8005afe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005a3a:	197b      	adds	r3, r7, r5
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	e244      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d040      	beq.n	8005aca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	0049      	lsls	r1, r1, #1
 8005a52:	430a      	orrs	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a56:	f7fe fd25 	bl	80044a4 <HAL_GetTick>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a5e:	e019      	b.n	8005a94 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a60:	f7fe fd20 	bl	80044a4 <HAL_GetTick>
 8005a64:	0002      	movs	r2, r0
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d912      	bls.n	8005a94 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e22b      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	40021000 	.word	0x40021000
 8005a78:	fffeffff 	.word	0xfffeffff
 8005a7c:	fffbffff 	.word	0xfffbffff
 8005a80:	ffffe0ff 	.word	0xffffe0ff
 8005a84:	080085a0 	.word	0x080085a0
 8005a88:	20000000 	.word	0x20000000
 8005a8c:	20000004 	.word	0x20000004
 8005a90:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a94:	4bca      	ldr	r3, [pc, #808]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d0df      	beq.n	8005a60 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa0:	4bc7      	ldr	r3, [pc, #796]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4ac7      	ldr	r2, [pc, #796]	; (8005dc4 <HAL_RCC_OscConfig+0x68c>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aae:	4bc4      	ldr	r3, [pc, #784]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab4:	4bc2      	ldr	r3, [pc, #776]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	0a19      	lsrs	r1, r3, #8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	061a      	lsls	r2, r3, #24
 8005ac2:	4bbf      	ldr	r3, [pc, #764]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	e019      	b.n	8005afe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005aca:	4bbd      	ldr	r3, [pc, #756]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4bbc      	ldr	r3, [pc, #752]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005ad0:	49bd      	ldr	r1, [pc, #756]	; (8005dc8 <HAL_RCC_OscConfig+0x690>)
 8005ad2:	400a      	ands	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad6:	f7fe fce5 	bl	80044a4 <HAL_GetTick>
 8005ada:	0003      	movs	r3, r0
 8005adc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ae0:	f7fe fce0 	bl	80044a4 <HAL_GetTick>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e1eb      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005af2:	4bb3      	ldr	r3, [pc, #716]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4013      	ands	r3, r2
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2208      	movs	r2, #8
 8005b04:	4013      	ands	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d019      	beq.n	8005b44 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b10:	4bab      	ldr	r3, [pc, #684]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b14:	4baa      	ldr	r3, [pc, #680]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005b16:	2101      	movs	r1, #1
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b1c:	f7fe fcc2 	bl	80044a4 <HAL_GetTick>
 8005b20:	0003      	movs	r3, r0
 8005b22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b26:	f7fe fcbd 	bl	80044a4 <HAL_GetTick>
 8005b2a:	0002      	movs	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e1c8      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b38:	4ba1      	ldr	r3, [pc, #644]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d0f1      	beq.n	8005b26 <HAL_RCC_OscConfig+0x3ee>
 8005b42:	e018      	b.n	8005b76 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b44:	4b9e      	ldr	r3, [pc, #632]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b48:	4b9d      	ldr	r3, [pc, #628]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	438a      	bics	r2, r1
 8005b4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b50:	f7fe fca8 	bl	80044a4 <HAL_GetTick>
 8005b54:	0003      	movs	r3, r0
 8005b56:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b5a:	f7fe fca3 	bl	80044a4 <HAL_GetTick>
 8005b5e:	0002      	movs	r2, r0
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e1ae      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b6c:	4b94      	ldr	r3, [pc, #592]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	2202      	movs	r2, #2
 8005b72:	4013      	ands	r3, r2
 8005b74:	d1f1      	bne.n	8005b5a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d100      	bne.n	8005b82 <HAL_RCC_OscConfig+0x44a>
 8005b80:	e0ae      	b.n	8005ce0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b82:	2023      	movs	r0, #35	; 0x23
 8005b84:	183b      	adds	r3, r7, r0
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8a:	4b8d      	ldr	r3, [pc, #564]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	055b      	lsls	r3, r3, #21
 8005b92:	4013      	ands	r3, r2
 8005b94:	d109      	bne.n	8005baa <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b96:	4b8a      	ldr	r3, [pc, #552]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b9a:	4b89      	ldr	r3, [pc, #548]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005b9c:	2180      	movs	r1, #128	; 0x80
 8005b9e:	0549      	lsls	r1, r1, #21
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005ba4:	183b      	adds	r3, r7, r0
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005baa:	4b88      	ldr	r3, [pc, #544]	; (8005dcc <HAL_RCC_OscConfig+0x694>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d11a      	bne.n	8005bec <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb6:	4b85      	ldr	r3, [pc, #532]	; (8005dcc <HAL_RCC_OscConfig+0x694>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b84      	ldr	r3, [pc, #528]	; (8005dcc <HAL_RCC_OscConfig+0x694>)
 8005bbc:	2180      	movs	r1, #128	; 0x80
 8005bbe:	0049      	lsls	r1, r1, #1
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc4:	f7fe fc6e 	bl	80044a4 <HAL_GetTick>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bce:	f7fe fc69 	bl	80044a4 <HAL_GetTick>
 8005bd2:	0002      	movs	r2, r0
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b64      	cmp	r3, #100	; 0x64
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e174      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be0:	4b7a      	ldr	r3, [pc, #488]	; (8005dcc <HAL_RCC_OscConfig+0x694>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	4013      	ands	r3, r2
 8005bea:	d0f0      	beq.n	8005bce <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d107      	bne.n	8005c08 <HAL_RCC_OscConfig+0x4d0>
 8005bf8:	4b71      	ldr	r3, [pc, #452]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bfc:	4b70      	ldr	r3, [pc, #448]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005bfe:	2180      	movs	r1, #128	; 0x80
 8005c00:	0049      	lsls	r1, r1, #1
 8005c02:	430a      	orrs	r2, r1
 8005c04:	651a      	str	r2, [r3, #80]	; 0x50
 8005c06:	e031      	b.n	8005c6c <HAL_RCC_OscConfig+0x534>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10c      	bne.n	8005c2a <HAL_RCC_OscConfig+0x4f2>
 8005c10:	4b6b      	ldr	r3, [pc, #428]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c14:	4b6a      	ldr	r3, [pc, #424]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c16:	496c      	ldr	r1, [pc, #432]	; (8005dc8 <HAL_RCC_OscConfig+0x690>)
 8005c18:	400a      	ands	r2, r1
 8005c1a:	651a      	str	r2, [r3, #80]	; 0x50
 8005c1c:	4b68      	ldr	r3, [pc, #416]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c20:	4b67      	ldr	r3, [pc, #412]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c22:	496b      	ldr	r1, [pc, #428]	; (8005dd0 <HAL_RCC_OscConfig+0x698>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	651a      	str	r2, [r3, #80]	; 0x50
 8005c28:	e020      	b.n	8005c6c <HAL_RCC_OscConfig+0x534>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	23a0      	movs	r3, #160	; 0xa0
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d10e      	bne.n	8005c54 <HAL_RCC_OscConfig+0x51c>
 8005c36:	4b62      	ldr	r3, [pc, #392]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c3a:	4b61      	ldr	r3, [pc, #388]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c3c:	2180      	movs	r1, #128	; 0x80
 8005c3e:	00c9      	lsls	r1, r1, #3
 8005c40:	430a      	orrs	r2, r1
 8005c42:	651a      	str	r2, [r3, #80]	; 0x50
 8005c44:	4b5e      	ldr	r3, [pc, #376]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c48:	4b5d      	ldr	r3, [pc, #372]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	0049      	lsls	r1, r1, #1
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	651a      	str	r2, [r3, #80]	; 0x50
 8005c52:	e00b      	b.n	8005c6c <HAL_RCC_OscConfig+0x534>
 8005c54:	4b5a      	ldr	r3, [pc, #360]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c58:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c5a:	495b      	ldr	r1, [pc, #364]	; (8005dc8 <HAL_RCC_OscConfig+0x690>)
 8005c5c:	400a      	ands	r2, r1
 8005c5e:	651a      	str	r2, [r3, #80]	; 0x50
 8005c60:	4b57      	ldr	r3, [pc, #348]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c64:	4b56      	ldr	r3, [pc, #344]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c66:	495a      	ldr	r1, [pc, #360]	; (8005dd0 <HAL_RCC_OscConfig+0x698>)
 8005c68:	400a      	ands	r2, r1
 8005c6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d015      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c74:	f7fe fc16 	bl	80044a4 <HAL_GetTick>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c7c:	e009      	b.n	8005c92 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c7e:	f7fe fc11 	bl	80044a4 <HAL_GetTick>
 8005c82:	0002      	movs	r2, r0
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	4a52      	ldr	r2, [pc, #328]	; (8005dd4 <HAL_RCC_OscConfig+0x69c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e11b      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c92:	4b4b      	ldr	r3, [pc, #300]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c96:	2380      	movs	r3, #128	; 0x80
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d0ef      	beq.n	8005c7e <HAL_RCC_OscConfig+0x546>
 8005c9e:	e014      	b.n	8005cca <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca0:	f7fe fc00 	bl	80044a4 <HAL_GetTick>
 8005ca4:	0003      	movs	r3, r0
 8005ca6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ca8:	e009      	b.n	8005cbe <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005caa:	f7fe fbfb 	bl	80044a4 <HAL_GetTick>
 8005cae:	0002      	movs	r2, r0
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	4a47      	ldr	r2, [pc, #284]	; (8005dd4 <HAL_RCC_OscConfig+0x69c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e105      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cbe:	4b40      	ldr	r3, [pc, #256]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d1ef      	bne.n	8005caa <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cca:	2323      	movs	r3, #35	; 0x23
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d105      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd4:	4b3a      	ldr	r3, [pc, #232]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd8:	4b39      	ldr	r3, [pc, #228]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005cda:	493f      	ldr	r1, [pc, #252]	; (8005dd8 <HAL_RCC_OscConfig+0x6a0>)
 8005cdc:	400a      	ands	r2, r1
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d049      	beq.n	8005d7e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d026      	beq.n	8005d40 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005cf2:	4b33      	ldr	r3, [pc, #204]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	4b32      	ldr	r3, [pc, #200]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	609a      	str	r2, [r3, #8]
 8005cfe:	4b30      	ldr	r3, [pc, #192]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d02:	4b2f      	ldr	r3, [pc, #188]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005d04:	2101      	movs	r1, #1
 8005d06:	430a      	orrs	r2, r1
 8005d08:	635a      	str	r2, [r3, #52]	; 0x34
 8005d0a:	4b34      	ldr	r3, [pc, #208]	; (8005ddc <HAL_RCC_OscConfig+0x6a4>)
 8005d0c:	6a1a      	ldr	r2, [r3, #32]
 8005d0e:	4b33      	ldr	r3, [pc, #204]	; (8005ddc <HAL_RCC_OscConfig+0x6a4>)
 8005d10:	2180      	movs	r1, #128	; 0x80
 8005d12:	0189      	lsls	r1, r1, #6
 8005d14:	430a      	orrs	r2, r1
 8005d16:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d18:	f7fe fbc4 	bl	80044a4 <HAL_GetTick>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d22:	f7fe fbbf 	bl	80044a4 <HAL_GetTick>
 8005d26:	0002      	movs	r2, r0
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e0ca      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d34:	4b22      	ldr	r3, [pc, #136]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d0f1      	beq.n	8005d22 <HAL_RCC_OscConfig+0x5ea>
 8005d3e:	e01e      	b.n	8005d7e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005d40:	4b1f      	ldr	r3, [pc, #124]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005d46:	2101      	movs	r1, #1
 8005d48:	438a      	bics	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
 8005d4c:	4b23      	ldr	r3, [pc, #140]	; (8005ddc <HAL_RCC_OscConfig+0x6a4>)
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	4b22      	ldr	r3, [pc, #136]	; (8005ddc <HAL_RCC_OscConfig+0x6a4>)
 8005d52:	4923      	ldr	r1, [pc, #140]	; (8005de0 <HAL_RCC_OscConfig+0x6a8>)
 8005d54:	400a      	ands	r2, r1
 8005d56:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7fe fba4 	bl	80044a4 <HAL_GetTick>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d62:	f7fe fb9f 	bl	80044a4 <HAL_GetTick>
 8005d66:	0002      	movs	r2, r0
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e0aa      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d74:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d1f1      	bne.n	8005d62 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d100      	bne.n	8005d88 <HAL_RCC_OscConfig+0x650>
 8005d86:	e09f      	b.n	8005ec8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b0c      	cmp	r3, #12
 8005d8c:	d100      	bne.n	8005d90 <HAL_RCC_OscConfig+0x658>
 8005d8e:	e078      	b.n	8005e82 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d159      	bne.n	8005e4c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <HAL_RCC_OscConfig+0x688>)
 8005d9e:	4911      	ldr	r1, [pc, #68]	; (8005de4 <HAL_RCC_OscConfig+0x6ac>)
 8005da0:	400a      	ands	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da4:	f7fe fb7e 	bl	80044a4 <HAL_GetTick>
 8005da8:	0003      	movs	r3, r0
 8005daa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005dac:	e01c      	b.n	8005de8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dae:	f7fe fb79 	bl	80044a4 <HAL_GetTick>
 8005db2:	0002      	movs	r2, r0
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d915      	bls.n	8005de8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e084      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	ffff1fff 	.word	0xffff1fff
 8005dc8:	fffffeff 	.word	0xfffffeff
 8005dcc:	40007000 	.word	0x40007000
 8005dd0:	fffffbff 	.word	0xfffffbff
 8005dd4:	00001388 	.word	0x00001388
 8005dd8:	efffffff 	.word	0xefffffff
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	ffffdfff 	.word	0xffffdfff
 8005de4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005de8:	4b3a      	ldr	r3, [pc, #232]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	049b      	lsls	r3, r3, #18
 8005df0:	4013      	ands	r3, r2
 8005df2:	d1dc      	bne.n	8005dae <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005df4:	4b37      	ldr	r3, [pc, #220]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4a37      	ldr	r2, [pc, #220]	; (8005ed8 <HAL_RCC_OscConfig+0x7a0>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	0019      	movs	r1, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005e10:	430a      	orrs	r2, r1
 8005e12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e14:	4b2f      	ldr	r3, [pc, #188]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	4b2e      	ldr	r3, [pc, #184]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005e1a:	2180      	movs	r1, #128	; 0x80
 8005e1c:	0449      	lsls	r1, r1, #17
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e22:	f7fe fb3f 	bl	80044a4 <HAL_GetTick>
 8005e26:	0003      	movs	r3, r0
 8005e28:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e2c:	f7fe fb3a 	bl	80044a4 <HAL_GetTick>
 8005e30:	0002      	movs	r2, r0
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e045      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005e3e:	4b25      	ldr	r3, [pc, #148]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	049b      	lsls	r3, r3, #18
 8005e46:	4013      	ands	r3, r2
 8005e48:	d0f0      	beq.n	8005e2c <HAL_RCC_OscConfig+0x6f4>
 8005e4a:	e03d      	b.n	8005ec8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4c:	4b21      	ldr	r3, [pc, #132]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b20      	ldr	r3, [pc, #128]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005e52:	4922      	ldr	r1, [pc, #136]	; (8005edc <HAL_RCC_OscConfig+0x7a4>)
 8005e54:	400a      	ands	r2, r1
 8005e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fe fb24 	bl	80044a4 <HAL_GetTick>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e62:	f7fe fb1f 	bl	80044a4 <HAL_GetTick>
 8005e66:	0002      	movs	r2, r0
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e02a      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e74:	4b17      	ldr	r3, [pc, #92]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	049b      	lsls	r3, r3, #18
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d1f0      	bne.n	8005e62 <HAL_RCC_OscConfig+0x72a>
 8005e80:	e022      	b.n	8005ec8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e01d      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <HAL_RCC_OscConfig+0x79c>)
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	2380      	movs	r3, #128	; 0x80
 8005e98:	025b      	lsls	r3, r3, #9
 8005e9a:	401a      	ands	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d10f      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	23f0      	movs	r3, #240	; 0xf0
 8005ea8:	039b      	lsls	r3, r3, #14
 8005eaa:	401a      	ands	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	23c0      	movs	r3, #192	; 0xc0
 8005eb8:	041b      	lsls	r3, r3, #16
 8005eba:	401a      	ands	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	0018      	movs	r0, r3
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b00a      	add	sp, #40	; 0x28
 8005ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	ff02ffff 	.word	0xff02ffff
 8005edc:	feffffff 	.word	0xfeffffff

08005ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ee0:	b5b0      	push	{r4, r5, r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e128      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ef4:	4b96      	ldr	r3, [pc, #600]	; (8006150 <HAL_RCC_ClockConfig+0x270>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	4013      	ands	r3, r2
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d91e      	bls.n	8005f40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f02:	4b93      	ldr	r3, [pc, #588]	; (8006150 <HAL_RCC_ClockConfig+0x270>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2201      	movs	r2, #1
 8005f08:	4393      	bics	r3, r2
 8005f0a:	0019      	movs	r1, r3
 8005f0c:	4b90      	ldr	r3, [pc, #576]	; (8006150 <HAL_RCC_ClockConfig+0x270>)
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f14:	f7fe fac6 	bl	80044a4 <HAL_GetTick>
 8005f18:	0003      	movs	r3, r0
 8005f1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1c:	e009      	b.n	8005f32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f1e:	f7fe fac1 	bl	80044a4 <HAL_GetTick>
 8005f22:	0002      	movs	r2, r0
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	4a8a      	ldr	r2, [pc, #552]	; (8006154 <HAL_RCC_ClockConfig+0x274>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e109      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f32:	4b87      	ldr	r3, [pc, #540]	; (8006150 <HAL_RCC_ClockConfig+0x270>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2201      	movs	r2, #1
 8005f38:	4013      	ands	r3, r2
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d1ee      	bne.n	8005f1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2202      	movs	r2, #2
 8005f46:	4013      	ands	r3, r2
 8005f48:	d009      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4a:	4b83      	ldr	r3, [pc, #524]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	22f0      	movs	r2, #240	; 0xf0
 8005f50:	4393      	bics	r3, r2
 8005f52:	0019      	movs	r1, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	4b7f      	ldr	r3, [pc, #508]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2201      	movs	r2, #1
 8005f64:	4013      	ands	r3, r2
 8005f66:	d100      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x8a>
 8005f68:	e089      	b.n	800607e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f72:	4b79      	ldr	r3, [pc, #484]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	029b      	lsls	r3, r3, #10
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d120      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e0e1      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d107      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f8a:	4b73      	ldr	r3, [pc, #460]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	049b      	lsls	r3, r3, #18
 8005f92:	4013      	ands	r3, r2
 8005f94:	d114      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e0d5      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d106      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fa2:	4b6d      	ldr	r3, [pc, #436]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d109      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0ca      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005fb0:	4b69      	ldr	r3, [pc, #420]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0c2      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fc0:	4b65      	ldr	r3, [pc, #404]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	4393      	bics	r3, r2
 8005fc8:	0019      	movs	r1, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	4b62      	ldr	r3, [pc, #392]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fd4:	f7fe fa66 	bl	80044a4 <HAL_GetTick>
 8005fd8:	0003      	movs	r3, r0
 8005fda:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d111      	bne.n	8006008 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fe4:	e009      	b.n	8005ffa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe6:	f7fe fa5d 	bl	80044a4 <HAL_GetTick>
 8005fea:	0002      	movs	r2, r0
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	4a58      	ldr	r2, [pc, #352]	; (8006154 <HAL_RCC_ClockConfig+0x274>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e0a5      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ffa:	4b57      	ldr	r3, [pc, #348]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	220c      	movs	r2, #12
 8006000:	4013      	ands	r3, r2
 8006002:	2b08      	cmp	r3, #8
 8006004:	d1ef      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x106>
 8006006:	e03a      	b.n	800607e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d111      	bne.n	8006034 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006010:	e009      	b.n	8006026 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006012:	f7fe fa47 	bl	80044a4 <HAL_GetTick>
 8006016:	0002      	movs	r2, r0
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	4a4d      	ldr	r2, [pc, #308]	; (8006154 <HAL_RCC_ClockConfig+0x274>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e08f      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006026:	4b4c      	ldr	r3, [pc, #304]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	220c      	movs	r2, #12
 800602c:	4013      	ands	r3, r2
 800602e:	2b0c      	cmp	r3, #12
 8006030:	d1ef      	bne.n	8006012 <HAL_RCC_ClockConfig+0x132>
 8006032:	e024      	b.n	800607e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d11b      	bne.n	8006074 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800603c:	e009      	b.n	8006052 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800603e:	f7fe fa31 	bl	80044a4 <HAL_GetTick>
 8006042:	0002      	movs	r2, r0
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	4a42      	ldr	r2, [pc, #264]	; (8006154 <HAL_RCC_ClockConfig+0x274>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e079      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006052:	4b41      	ldr	r3, [pc, #260]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	220c      	movs	r2, #12
 8006058:	4013      	ands	r3, r2
 800605a:	2b04      	cmp	r3, #4
 800605c:	d1ef      	bne.n	800603e <HAL_RCC_ClockConfig+0x15e>
 800605e:	e00e      	b.n	800607e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006060:	f7fe fa20 	bl	80044a4 <HAL_GetTick>
 8006064:	0002      	movs	r2, r0
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	4a3a      	ldr	r2, [pc, #232]	; (8006154 <HAL_RCC_ClockConfig+0x274>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e068      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006074:	4b38      	ldr	r3, [pc, #224]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	220c      	movs	r2, #12
 800607a:	4013      	ands	r3, r2
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800607e:	4b34      	ldr	r3, [pc, #208]	; (8006150 <HAL_RCC_ClockConfig+0x270>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2201      	movs	r2, #1
 8006084:	4013      	ands	r3, r2
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d21e      	bcs.n	80060ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800608c:	4b30      	ldr	r3, [pc, #192]	; (8006150 <HAL_RCC_ClockConfig+0x270>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2201      	movs	r2, #1
 8006092:	4393      	bics	r3, r2
 8006094:	0019      	movs	r1, r3
 8006096:	4b2e      	ldr	r3, [pc, #184]	; (8006150 <HAL_RCC_ClockConfig+0x270>)
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800609e:	f7fe fa01 	bl	80044a4 <HAL_GetTick>
 80060a2:	0003      	movs	r3, r0
 80060a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a6:	e009      	b.n	80060bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a8:	f7fe f9fc 	bl	80044a4 <HAL_GetTick>
 80060ac:	0002      	movs	r2, r0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	4a28      	ldr	r2, [pc, #160]	; (8006154 <HAL_RCC_ClockConfig+0x274>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e044      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060bc:	4b24      	ldr	r3, [pc, #144]	; (8006150 <HAL_RCC_ClockConfig+0x270>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	4013      	ands	r3, r2
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d1ee      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2204      	movs	r2, #4
 80060d0:	4013      	ands	r3, r2
 80060d2:	d009      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060d4:	4b20      	ldr	r3, [pc, #128]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a20      	ldr	r2, [pc, #128]	; (800615c <HAL_RCC_ClockConfig+0x27c>)
 80060da:	4013      	ands	r3, r2
 80060dc:	0019      	movs	r1, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 80060e4:	430a      	orrs	r2, r1
 80060e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2208      	movs	r2, #8
 80060ee:	4013      	ands	r3, r2
 80060f0:	d00a      	beq.n	8006108 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060f2:	4b19      	ldr	r3, [pc, #100]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	4a1a      	ldr	r2, [pc, #104]	; (8006160 <HAL_RCC_ClockConfig+0x280>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	0019      	movs	r1, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	00da      	lsls	r2, r3, #3
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8006104:	430a      	orrs	r2, r1
 8006106:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006108:	f000 f832 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 800610c:	0001      	movs	r1, r0
 800610e:	4b12      	ldr	r3, [pc, #72]	; (8006158 <HAL_RCC_ClockConfig+0x278>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	091b      	lsrs	r3, r3, #4
 8006114:	220f      	movs	r2, #15
 8006116:	4013      	ands	r3, r2
 8006118:	4a12      	ldr	r2, [pc, #72]	; (8006164 <HAL_RCC_ClockConfig+0x284>)
 800611a:	5cd3      	ldrb	r3, [r2, r3]
 800611c:	000a      	movs	r2, r1
 800611e:	40da      	lsrs	r2, r3
 8006120:	4b11      	ldr	r3, [pc, #68]	; (8006168 <HAL_RCC_ClockConfig+0x288>)
 8006122:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006124:	4b11      	ldr	r3, [pc, #68]	; (800616c <HAL_RCC_ClockConfig+0x28c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	250b      	movs	r5, #11
 800612a:	197c      	adds	r4, r7, r5
 800612c:	0018      	movs	r0, r3
 800612e:	f7fe f973 	bl	8004418 <HAL_InitTick>
 8006132:	0003      	movs	r3, r0
 8006134:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006136:	197b      	adds	r3, r7, r5
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800613e:	197b      	adds	r3, r7, r5
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	e000      	b.n	8006146 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	0018      	movs	r0, r3
 8006148:	46bd      	mov	sp, r7
 800614a:	b004      	add	sp, #16
 800614c:	bdb0      	pop	{r4, r5, r7, pc}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	40022000 	.word	0x40022000
 8006154:	00001388 	.word	0x00001388
 8006158:	40021000 	.word	0x40021000
 800615c:	fffff8ff 	.word	0xfffff8ff
 8006160:	ffffc7ff 	.word	0xffffc7ff
 8006164:	080085a0 	.word	0x080085a0
 8006168:	20000000 	.word	0x20000000
 800616c:	20000004 	.word	0x20000004

08006170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006170:	b5b0      	push	{r4, r5, r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006176:	4b4c      	ldr	r3, [pc, #304]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800617c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617e:	230c      	movs	r3, #12
 8006180:	4013      	ands	r3, r2
 8006182:	2b0c      	cmp	r3, #12
 8006184:	d014      	beq.n	80061b0 <HAL_RCC_GetSysClockFreq+0x40>
 8006186:	d900      	bls.n	800618a <HAL_RCC_GetSysClockFreq+0x1a>
 8006188:	e07b      	b.n	8006282 <HAL_RCC_GetSysClockFreq+0x112>
 800618a:	2b04      	cmp	r3, #4
 800618c:	d002      	beq.n	8006194 <HAL_RCC_GetSysClockFreq+0x24>
 800618e:	2b08      	cmp	r3, #8
 8006190:	d00b      	beq.n	80061aa <HAL_RCC_GetSysClockFreq+0x3a>
 8006192:	e076      	b.n	8006282 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006194:	4b44      	ldr	r3, [pc, #272]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2210      	movs	r2, #16
 800619a:	4013      	ands	r3, r2
 800619c:	d002      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800619e:	4b43      	ldr	r3, [pc, #268]	; (80062ac <HAL_RCC_GetSysClockFreq+0x13c>)
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80061a2:	e07c      	b.n	800629e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80061a4:	4b42      	ldr	r3, [pc, #264]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x140>)
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80061a8:	e079      	b.n	800629e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061aa:	4b42      	ldr	r3, [pc, #264]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80061ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80061ae:	e076      	b.n	800629e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	0c9a      	lsrs	r2, r3, #18
 80061b4:	230f      	movs	r3, #15
 80061b6:	401a      	ands	r2, r3
 80061b8:	4b3f      	ldr	r3, [pc, #252]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x148>)
 80061ba:	5c9b      	ldrb	r3, [r3, r2]
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	0d9a      	lsrs	r2, r3, #22
 80061c2:	2303      	movs	r3, #3
 80061c4:	4013      	ands	r3, r2
 80061c6:	3301      	adds	r3, #1
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061ca:	4b37      	ldr	r3, [pc, #220]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x138>)
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	025b      	lsls	r3, r3, #9
 80061d2:	4013      	ands	r3, r2
 80061d4:	d01a      	beq.n	800620c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	2300      	movs	r3, #0
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	4a35      	ldr	r2, [pc, #212]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80061e0:	2300      	movs	r3, #0
 80061e2:	69b8      	ldr	r0, [r7, #24]
 80061e4:	69f9      	ldr	r1, [r7, #28]
 80061e6:	f7fa f887 	bl	80002f8 <__aeabi_lmul>
 80061ea:	0002      	movs	r2, r0
 80061ec:	000b      	movs	r3, r1
 80061ee:	0010      	movs	r0, r2
 80061f0:	0019      	movs	r1, r3
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f7fa f85b 	bl	80002b8 <__aeabi_uldivmod>
 8006202:	0002      	movs	r2, r0
 8006204:	000b      	movs	r3, r1
 8006206:	0013      	movs	r3, r2
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
 800620a:	e037      	b.n	800627c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800620c:	4b26      	ldr	r3, [pc, #152]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2210      	movs	r2, #16
 8006212:	4013      	ands	r3, r2
 8006214:	d01a      	beq.n	800624c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	4a23      	ldr	r2, [pc, #140]	; (80062ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8006220:	2300      	movs	r3, #0
 8006222:	68b8      	ldr	r0, [r7, #8]
 8006224:	68f9      	ldr	r1, [r7, #12]
 8006226:	f7fa f867 	bl	80002f8 <__aeabi_lmul>
 800622a:	0002      	movs	r2, r0
 800622c:	000b      	movs	r3, r1
 800622e:	0010      	movs	r0, r2
 8006230:	0019      	movs	r1, r3
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	2300      	movs	r3, #0
 8006238:	607b      	str	r3, [r7, #4]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f7fa f83b 	bl	80002b8 <__aeabi_uldivmod>
 8006242:	0002      	movs	r2, r0
 8006244:	000b      	movs	r3, r1
 8006246:	0013      	movs	r3, r2
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
 800624a:	e017      	b.n	800627c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	0018      	movs	r0, r3
 8006250:	2300      	movs	r3, #0
 8006252:	0019      	movs	r1, r3
 8006254:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8006256:	2300      	movs	r3, #0
 8006258:	f7fa f84e 	bl	80002f8 <__aeabi_lmul>
 800625c:	0002      	movs	r2, r0
 800625e:	000b      	movs	r3, r1
 8006260:	0010      	movs	r0, r2
 8006262:	0019      	movs	r1, r3
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	001c      	movs	r4, r3
 8006268:	2300      	movs	r3, #0
 800626a:	001d      	movs	r5, r3
 800626c:	0022      	movs	r2, r4
 800626e:	002b      	movs	r3, r5
 8006270:	f7fa f822 	bl	80002b8 <__aeabi_uldivmod>
 8006274:	0002      	movs	r2, r0
 8006276:	000b      	movs	r3, r1
 8006278:	0013      	movs	r3, r2
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006280:	e00d      	b.n	800629e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006282:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	0b5b      	lsrs	r3, r3, #13
 8006288:	2207      	movs	r2, #7
 800628a:	4013      	ands	r3, r2
 800628c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	3301      	adds	r3, #1
 8006292:	2280      	movs	r2, #128	; 0x80
 8006294:	0212      	lsls	r2, r2, #8
 8006296:	409a      	lsls	r2, r3
 8006298:	0013      	movs	r3, r2
 800629a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800629c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80062a0:	0018      	movs	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b00e      	add	sp, #56	; 0x38
 80062a6:	bdb0      	pop	{r4, r5, r7, pc}
 80062a8:	40021000 	.word	0x40021000
 80062ac:	003d0900 	.word	0x003d0900
 80062b0:	00f42400 	.word	0x00f42400
 80062b4:	007a1200 	.word	0x007a1200
 80062b8:	080085b8 	.word	0x080085b8

080062bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062c0:	4b02      	ldr	r3, [pc, #8]	; (80062cc <HAL_RCC_GetHCLKFreq+0x10>)
 80062c2:	681b      	ldr	r3, [r3, #0]
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	20000000 	.word	0x20000000

080062d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062d4:	f7ff fff2 	bl	80062bc <HAL_RCC_GetHCLKFreq>
 80062d8:	0001      	movs	r1, r0
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	2207      	movs	r2, #7
 80062e2:	4013      	ands	r3, r2
 80062e4:	4a04      	ldr	r2, [pc, #16]	; (80062f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062e6:	5cd3      	ldrb	r3, [r2, r3]
 80062e8:	40d9      	lsrs	r1, r3
 80062ea:	000b      	movs	r3, r1
}
 80062ec:	0018      	movs	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	40021000 	.word	0x40021000
 80062f8:	080085b0 	.word	0x080085b0

080062fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006300:	f7ff ffdc 	bl	80062bc <HAL_RCC_GetHCLKFreq>
 8006304:	0001      	movs	r1, r0
 8006306:	4b06      	ldr	r3, [pc, #24]	; (8006320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	0adb      	lsrs	r3, r3, #11
 800630c:	2207      	movs	r2, #7
 800630e:	4013      	ands	r3, r2
 8006310:	4a04      	ldr	r2, [pc, #16]	; (8006324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006312:	5cd3      	ldrb	r3, [r2, r3]
 8006314:	40d9      	lsrs	r1, r3
 8006316:	000b      	movs	r3, r1
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	40021000 	.word	0x40021000
 8006324:	080085b0 	.word	0x080085b0

08006328 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006330:	2317      	movs	r3, #23
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2220      	movs	r2, #32
 800633e:	4013      	ands	r3, r2
 8006340:	d106      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	2380      	movs	r3, #128	; 0x80
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	4013      	ands	r3, r2
 800634c:	d100      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800634e:	e0d9      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006350:	4ba4      	ldr	r3, [pc, #656]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	055b      	lsls	r3, r3, #21
 8006358:	4013      	ands	r3, r2
 800635a:	d10a      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800635c:	4ba1      	ldr	r3, [pc, #644]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800635e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006360:	4ba0      	ldr	r3, [pc, #640]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	0549      	lsls	r1, r1, #21
 8006366:	430a      	orrs	r2, r1
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800636a:	2317      	movs	r3, #23
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	2201      	movs	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006372:	4b9d      	ldr	r3, [pc, #628]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	2380      	movs	r3, #128	; 0x80
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	4013      	ands	r3, r2
 800637c:	d11a      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637e:	4b9a      	ldr	r3, [pc, #616]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4b99      	ldr	r3, [pc, #612]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006384:	2180      	movs	r1, #128	; 0x80
 8006386:	0049      	lsls	r1, r1, #1
 8006388:	430a      	orrs	r2, r1
 800638a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800638c:	f7fe f88a 	bl	80044a4 <HAL_GetTick>
 8006390:	0003      	movs	r3, r0
 8006392:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006394:	e008      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006396:	f7fe f885 	bl	80044a4 <HAL_GetTick>
 800639a:	0002      	movs	r2, r0
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b64      	cmp	r3, #100	; 0x64
 80063a2:	d901      	bls.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e118      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a8:	4b8f      	ldr	r3, [pc, #572]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	2380      	movs	r3, #128	; 0x80
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4013      	ands	r3, r2
 80063b2:	d0f0      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80063b4:	4b8b      	ldr	r3, [pc, #556]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	23c0      	movs	r3, #192	; 0xc0
 80063ba:	039b      	lsls	r3, r3, #14
 80063bc:	4013      	ands	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	23c0      	movs	r3, #192	; 0xc0
 80063c6:	039b      	lsls	r3, r3, #14
 80063c8:	4013      	ands	r3, r2
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d107      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	23c0      	movs	r3, #192	; 0xc0
 80063d6:	039b      	lsls	r3, r3, #14
 80063d8:	4013      	ands	r3, r2
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d013      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	23c0      	movs	r3, #192	; 0xc0
 80063e6:	029b      	lsls	r3, r3, #10
 80063e8:	401a      	ands	r2, r3
 80063ea:	23c0      	movs	r3, #192	; 0xc0
 80063ec:	029b      	lsls	r3, r3, #10
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d10a      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063f2:	4b7c      	ldr	r3, [pc, #496]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	2380      	movs	r3, #128	; 0x80
 80063f8:	029b      	lsls	r3, r3, #10
 80063fa:	401a      	ands	r2, r3
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	029b      	lsls	r3, r3, #10
 8006400:	429a      	cmp	r2, r3
 8006402:	d101      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0e8      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006408:	4b76      	ldr	r3, [pc, #472]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800640a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800640c:	23c0      	movs	r3, #192	; 0xc0
 800640e:	029b      	lsls	r3, r3, #10
 8006410:	4013      	ands	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d049      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x186>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	23c0      	movs	r3, #192	; 0xc0
 8006420:	029b      	lsls	r3, r3, #10
 8006422:	4013      	ands	r3, r2
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	429a      	cmp	r2, r3
 8006428:	d004      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2220      	movs	r2, #32
 8006430:	4013      	ands	r3, r2
 8006432:	d10d      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	23c0      	movs	r3, #192	; 0xc0
 800643a:	029b      	lsls	r3, r3, #10
 800643c:	4013      	ands	r3, r2
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	429a      	cmp	r2, r3
 8006442:	d034      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	2380      	movs	r3, #128	; 0x80
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	4013      	ands	r3, r2
 800644e:	d02e      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006450:	4b64      	ldr	r3, [pc, #400]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006454:	4a65      	ldr	r2, [pc, #404]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006456:	4013      	ands	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800645a:	4b62      	ldr	r3, [pc, #392]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800645c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800645e:	4b61      	ldr	r3, [pc, #388]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006460:	2180      	movs	r1, #128	; 0x80
 8006462:	0309      	lsls	r1, r1, #12
 8006464:	430a      	orrs	r2, r1
 8006466:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006468:	4b5e      	ldr	r3, [pc, #376]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800646a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800646c:	4b5d      	ldr	r3, [pc, #372]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800646e:	4960      	ldr	r1, [pc, #384]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006470:	400a      	ands	r2, r1
 8006472:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006474:	4b5b      	ldr	r3, [pc, #364]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	2380      	movs	r3, #128	; 0x80
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	4013      	ands	r3, r2
 8006482:	d014      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006484:	f7fe f80e 	bl	80044a4 <HAL_GetTick>
 8006488:	0003      	movs	r3, r0
 800648a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800648c:	e009      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800648e:	f7fe f809 	bl	80044a4 <HAL_GetTick>
 8006492:	0002      	movs	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	4a56      	ldr	r2, [pc, #344]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d901      	bls.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e09b      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064a2:	4b50      	ldr	r3, [pc, #320]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064a6:	2380      	movs	r3, #128	; 0x80
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4013      	ands	r3, r2
 80064ac:	d0ef      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	23c0      	movs	r3, #192	; 0xc0
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	401a      	ands	r2, r3
 80064b8:	23c0      	movs	r3, #192	; 0xc0
 80064ba:	029b      	lsls	r3, r3, #10
 80064bc:	429a      	cmp	r2, r3
 80064be:	d10c      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80064c0:	4b48      	ldr	r3, [pc, #288]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a4c      	ldr	r2, [pc, #304]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	0019      	movs	r1, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	23c0      	movs	r3, #192	; 0xc0
 80064d0:	039b      	lsls	r3, r3, #14
 80064d2:	401a      	ands	r2, r3
 80064d4:	4b43      	ldr	r3, [pc, #268]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064d6:	430a      	orrs	r2, r1
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	4b42      	ldr	r3, [pc, #264]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	23c0      	movs	r3, #192	; 0xc0
 80064e4:	029b      	lsls	r3, r3, #10
 80064e6:	401a      	ands	r2, r3
 80064e8:	4b3e      	ldr	r3, [pc, #248]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064ea:	430a      	orrs	r2, r1
 80064ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064ee:	2317      	movs	r3, #23
 80064f0:	18fb      	adds	r3, r7, r3
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d105      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064f8:	4b3a      	ldr	r3, [pc, #232]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fc:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064fe:	493f      	ldr	r1, [pc, #252]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006500:	400a      	ands	r2, r1
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2201      	movs	r2, #1
 800650a:	4013      	ands	r3, r2
 800650c:	d009      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800650e:	4b35      	ldr	r3, [pc, #212]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006512:	2203      	movs	r2, #3
 8006514:	4393      	bics	r3, r2
 8006516:	0019      	movs	r1, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800651e:	430a      	orrs	r2, r1
 8006520:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2202      	movs	r2, #2
 8006528:	4013      	ands	r3, r2
 800652a:	d009      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800652c:	4b2d      	ldr	r3, [pc, #180]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800652e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006530:	220c      	movs	r2, #12
 8006532:	4393      	bics	r3, r2
 8006534:	0019      	movs	r1, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	4b2a      	ldr	r3, [pc, #168]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800653c:	430a      	orrs	r2, r1
 800653e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2204      	movs	r2, #4
 8006546:	4013      	ands	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800654a:	4b26      	ldr	r3, [pc, #152]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800654c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654e:	4a2c      	ldr	r2, [pc, #176]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006550:	4013      	ands	r3, r2
 8006552:	0019      	movs	r1, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	695a      	ldr	r2, [r3, #20]
 8006558:	4b22      	ldr	r3, [pc, #136]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800655a:	430a      	orrs	r2, r1
 800655c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2208      	movs	r2, #8
 8006564:	4013      	ands	r3, r2
 8006566:	d009      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006568:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800656a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656c:	4a25      	ldr	r2, [pc, #148]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800656e:	4013      	ands	r3, r2
 8006570:	0019      	movs	r1, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	4b1b      	ldr	r3, [pc, #108]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006578:	430a      	orrs	r2, r1
 800657a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	4013      	ands	r3, r2
 8006586:	d009      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006588:	4b16      	ldr	r3, [pc, #88]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800658a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658c:	4a17      	ldr	r2, [pc, #92]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800658e:	4013      	ands	r3, r2
 8006590:	0019      	movs	r1, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69da      	ldr	r2, [r3, #28]
 8006596:	4b13      	ldr	r3, [pc, #76]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006598:	430a      	orrs	r2, r1
 800659a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2240      	movs	r2, #64	; 0x40
 80065a2:	4013      	ands	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065a6:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	0019      	movs	r1, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065b4:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80065b6:	430a      	orrs	r2, r1
 80065b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2280      	movs	r2, #128	; 0x80
 80065c0:	4013      	ands	r3, r2
 80065c2:	d009      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80065c4:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80065c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c8:	4a10      	ldr	r2, [pc, #64]	; (800660c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	0019      	movs	r1, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1a      	ldr	r2, [r3, #32]
 80065d2:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80065d4:	430a      	orrs	r2, r1
 80065d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	0018      	movs	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	b006      	add	sp, #24
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	40021000 	.word	0x40021000
 80065e8:	40007000 	.word	0x40007000
 80065ec:	fffcffff 	.word	0xfffcffff
 80065f0:	fff7ffff 	.word	0xfff7ffff
 80065f4:	00001388 	.word	0x00001388
 80065f8:	ffcfffff 	.word	0xffcfffff
 80065fc:	efffffff 	.word	0xefffffff
 8006600:	fffff3ff 	.word	0xfffff3ff
 8006604:	ffffcfff 	.word	0xffffcfff
 8006608:	fbffffff 	.word	0xfbffffff
 800660c:	fff3ffff 	.word	0xfff3ffff

08006610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e032      	b.n	8006688 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2239      	movs	r2, #57	; 0x39
 8006626:	5c9b      	ldrb	r3, [r3, r2]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d107      	bne.n	800663e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2238      	movs	r2, #56	; 0x38
 8006632:	2100      	movs	r1, #0
 8006634:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	0018      	movs	r0, r3
 800663a:	f7fd fc01 	bl	8003e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2239      	movs	r2, #57	; 0x39
 8006642:	2102      	movs	r1, #2
 8006644:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3304      	adds	r3, #4
 800664e:	0019      	movs	r1, r3
 8006650:	0010      	movs	r0, r2
 8006652:	f000 fa91 	bl	8006b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	223e      	movs	r2, #62	; 0x3e
 800665a:	2101      	movs	r1, #1
 800665c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	223a      	movs	r2, #58	; 0x3a
 8006662:	2101      	movs	r1, #1
 8006664:	5499      	strb	r1, [r3, r2]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	223b      	movs	r2, #59	; 0x3b
 800666a:	2101      	movs	r1, #1
 800666c:	5499      	strb	r1, [r3, r2]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	223c      	movs	r2, #60	; 0x3c
 8006672:	2101      	movs	r1, #1
 8006674:	5499      	strb	r1, [r3, r2]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	223d      	movs	r2, #61	; 0x3d
 800667a:	2101      	movs	r1, #1
 800667c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2239      	movs	r2, #57	; 0x39
 8006682:	2101      	movs	r1, #1
 8006684:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	0018      	movs	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	b002      	add	sp, #8
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e032      	b.n	8006708 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2239      	movs	r2, #57	; 0x39
 80066a6:	5c9b      	ldrb	r3, [r3, r2]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d107      	bne.n	80066be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2238      	movs	r2, #56	; 0x38
 80066b2:	2100      	movs	r1, #0
 80066b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f000 f829 	bl	8006710 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2239      	movs	r2, #57	; 0x39
 80066c2:	2102      	movs	r1, #2
 80066c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3304      	adds	r3, #4
 80066ce:	0019      	movs	r1, r3
 80066d0:	0010      	movs	r0, r2
 80066d2:	f000 fa51 	bl	8006b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	223e      	movs	r2, #62	; 0x3e
 80066da:	2101      	movs	r1, #1
 80066dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	223a      	movs	r2, #58	; 0x3a
 80066e2:	2101      	movs	r1, #1
 80066e4:	5499      	strb	r1, [r3, r2]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	223b      	movs	r2, #59	; 0x3b
 80066ea:	2101      	movs	r1, #1
 80066ec:	5499      	strb	r1, [r3, r2]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	223c      	movs	r2, #60	; 0x3c
 80066f2:	2101      	movs	r1, #1
 80066f4:	5499      	strb	r1, [r3, r2]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	223d      	movs	r2, #61	; 0x3d
 80066fa:	2101      	movs	r1, #1
 80066fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2239      	movs	r2, #57	; 0x39
 8006702:	2101      	movs	r1, #1
 8006704:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	0018      	movs	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	b002      	add	sp, #8
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006718:	46c0      	nop			; (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	b002      	add	sp, #8
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d108      	bne.n	8006742 <HAL_TIM_PWM_Start+0x22>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	223a      	movs	r2, #58	; 0x3a
 8006734:	5c9b      	ldrb	r3, [r3, r2]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	1e5a      	subs	r2, r3, #1
 800673c:	4193      	sbcs	r3, r2
 800673e:	b2db      	uxtb	r3, r3
 8006740:	e01f      	b.n	8006782 <HAL_TIM_PWM_Start+0x62>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b04      	cmp	r3, #4
 8006746:	d108      	bne.n	800675a <HAL_TIM_PWM_Start+0x3a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	223b      	movs	r2, #59	; 0x3b
 800674c:	5c9b      	ldrb	r3, [r3, r2]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	1e5a      	subs	r2, r3, #1
 8006754:	4193      	sbcs	r3, r2
 8006756:	b2db      	uxtb	r3, r3
 8006758:	e013      	b.n	8006782 <HAL_TIM_PWM_Start+0x62>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d108      	bne.n	8006772 <HAL_TIM_PWM_Start+0x52>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	223c      	movs	r2, #60	; 0x3c
 8006764:	5c9b      	ldrb	r3, [r3, r2]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	1e5a      	subs	r2, r3, #1
 800676c:	4193      	sbcs	r3, r2
 800676e:	b2db      	uxtb	r3, r3
 8006770:	e007      	b.n	8006782 <HAL_TIM_PWM_Start+0x62>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	223d      	movs	r2, #61	; 0x3d
 8006776:	5c9b      	ldrb	r3, [r3, r2]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	1e5a      	subs	r2, r3, #1
 800677e:	4193      	sbcs	r3, r2
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e052      	b.n	8006830 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d104      	bne.n	800679a <HAL_TIM_PWM_Start+0x7a>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	223a      	movs	r2, #58	; 0x3a
 8006794:	2102      	movs	r1, #2
 8006796:	5499      	strb	r1, [r3, r2]
 8006798:	e013      	b.n	80067c2 <HAL_TIM_PWM_Start+0xa2>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b04      	cmp	r3, #4
 800679e:	d104      	bne.n	80067aa <HAL_TIM_PWM_Start+0x8a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	223b      	movs	r2, #59	; 0x3b
 80067a4:	2102      	movs	r1, #2
 80067a6:	5499      	strb	r1, [r3, r2]
 80067a8:	e00b      	b.n	80067c2 <HAL_TIM_PWM_Start+0xa2>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d104      	bne.n	80067ba <HAL_TIM_PWM_Start+0x9a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	223c      	movs	r2, #60	; 0x3c
 80067b4:	2102      	movs	r1, #2
 80067b6:	5499      	strb	r1, [r3, r2]
 80067b8:	e003      	b.n	80067c2 <HAL_TIM_PWM_Start+0xa2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	223d      	movs	r2, #61	; 0x3d
 80067be:	2102      	movs	r1, #2
 80067c0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	2201      	movs	r2, #1
 80067ca:	0018      	movs	r0, r3
 80067cc:	f000 fbd0 	bl	8006f70 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	2380      	movs	r3, #128	; 0x80
 80067d6:	05db      	lsls	r3, r3, #23
 80067d8:	429a      	cmp	r2, r3
 80067da:	d00e      	beq.n	80067fa <HAL_TIM_PWM_Start+0xda>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a15      	ldr	r2, [pc, #84]	; (8006838 <HAL_TIM_PWM_Start+0x118>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d009      	beq.n	80067fa <HAL_TIM_PWM_Start+0xda>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a14      	ldr	r2, [pc, #80]	; (800683c <HAL_TIM_PWM_Start+0x11c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d004      	beq.n	80067fa <HAL_TIM_PWM_Start+0xda>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a12      	ldr	r2, [pc, #72]	; (8006840 <HAL_TIM_PWM_Start+0x120>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d111      	bne.n	800681e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2207      	movs	r2, #7
 8006802:	4013      	ands	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b06      	cmp	r3, #6
 800680a:	d010      	beq.n	800682e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2101      	movs	r1, #1
 8006818:	430a      	orrs	r2, r1
 800681a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681c:	e007      	b.n	800682e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2101      	movs	r1, #1
 800682a:	430a      	orrs	r2, r1
 800682c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	0018      	movs	r0, r3
 8006832:	46bd      	mov	sp, r7
 8006834:	b004      	add	sp, #16
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40000400 	.word	0x40000400
 800683c:	40010800 	.word	0x40010800
 8006840:	40011400 	.word	0x40011400

08006844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006850:	2317      	movs	r3, #23
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	2200      	movs	r2, #0
 8006856:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2238      	movs	r2, #56	; 0x38
 800685c:	5c9b      	ldrb	r3, [r3, r2]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006862:	2302      	movs	r3, #2
 8006864:	e0ad      	b.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2238      	movs	r2, #56	; 0x38
 800686a:	2101      	movs	r1, #1
 800686c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b0c      	cmp	r3, #12
 8006872:	d100      	bne.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006874:	e076      	b.n	8006964 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b0c      	cmp	r3, #12
 800687a:	d900      	bls.n	800687e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800687c:	e095      	b.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b08      	cmp	r3, #8
 8006882:	d04e      	beq.n	8006922 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b08      	cmp	r3, #8
 8006888:	d900      	bls.n	800688c <HAL_TIM_PWM_ConfigChannel+0x48>
 800688a:	e08e      	b.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_TIM_PWM_ConfigChannel+0x56>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b04      	cmp	r3, #4
 8006896:	d021      	beq.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x98>
 8006898:	e087      	b.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	0011      	movs	r1, r2
 80068a2:	0018      	movs	r0, r3
 80068a4:	f000 f9c6 	bl	8006c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2108      	movs	r1, #8
 80068b4:	430a      	orrs	r2, r1
 80068b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2104      	movs	r1, #4
 80068c4:	438a      	bics	r2, r1
 80068c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6999      	ldr	r1, [r3, #24]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	619a      	str	r2, [r3, #24]
      break;
 80068da:	e06b      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	0011      	movs	r1, r2
 80068e4:	0018      	movs	r0, r3
 80068e6:	f000 f9e1 	bl	8006cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699a      	ldr	r2, [r3, #24]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2180      	movs	r1, #128	; 0x80
 80068f6:	0109      	lsls	r1, r1, #4
 80068f8:	430a      	orrs	r2, r1
 80068fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4931      	ldr	r1, [pc, #196]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006908:	400a      	ands	r2, r1
 800690a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6999      	ldr	r1, [r3, #24]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	021a      	lsls	r2, r3, #8
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	619a      	str	r2, [r3, #24]
      break;
 8006920:	e048      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	0011      	movs	r1, r2
 800692a:	0018      	movs	r0, r3
 800692c:	f000 fa00 	bl	8006d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	69da      	ldr	r2, [r3, #28]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2108      	movs	r1, #8
 800693c:	430a      	orrs	r2, r1
 800693e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2104      	movs	r1, #4
 800694c:	438a      	bics	r2, r1
 800694e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69d9      	ldr	r1, [r3, #28]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	61da      	str	r2, [r3, #28]
      break;
 8006962:	e027      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	0011      	movs	r1, r2
 800696c:	0018      	movs	r0, r3
 800696e:	f000 fa1f 	bl	8006db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2180      	movs	r1, #128	; 0x80
 800697e:	0109      	lsls	r1, r1, #4
 8006980:	430a      	orrs	r2, r1
 8006982:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69da      	ldr	r2, [r3, #28]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	490f      	ldr	r1, [pc, #60]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006990:	400a      	ands	r2, r1
 8006992:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69d9      	ldr	r1, [r3, #28]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	61da      	str	r2, [r3, #28]
      break;
 80069a8:	e004      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80069aa:	2317      	movs	r3, #23
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	2201      	movs	r2, #1
 80069b0:	701a      	strb	r2, [r3, #0]
      break;
 80069b2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2238      	movs	r2, #56	; 0x38
 80069b8:	2100      	movs	r1, #0
 80069ba:	5499      	strb	r1, [r3, r2]

  return status;
 80069bc:	2317      	movs	r3, #23
 80069be:	18fb      	adds	r3, r7, r3
 80069c0:	781b      	ldrb	r3, [r3, #0]
}
 80069c2:	0018      	movs	r0, r3
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b006      	add	sp, #24
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	fffffbff 	.word	0xfffffbff

080069d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069da:	230f      	movs	r3, #15
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2238      	movs	r2, #56	; 0x38
 80069e6:	5c9b      	ldrb	r3, [r3, r2]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_TIM_ConfigClockSource+0x20>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e0bc      	b.n	8006b6a <HAL_TIM_ConfigClockSource+0x19a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2238      	movs	r2, #56	; 0x38
 80069f4:	2101      	movs	r1, #1
 80069f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2239      	movs	r2, #57	; 0x39
 80069fc:	2102      	movs	r1, #2
 80069fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2277      	movs	r2, #119	; 0x77
 8006a0c:	4393      	bics	r3, r2
 8006a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4a58      	ldr	r2, [pc, #352]	; (8006b74 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2280      	movs	r2, #128	; 0x80
 8006a26:	0192      	lsls	r2, r2, #6
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d040      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0xde>
 8006a2c:	2280      	movs	r2, #128	; 0x80
 8006a2e:	0192      	lsls	r2, r2, #6
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d900      	bls.n	8006a36 <HAL_TIM_ConfigClockSource+0x66>
 8006a34:	e088      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x178>
 8006a36:	2280      	movs	r2, #128	; 0x80
 8006a38:	0152      	lsls	r2, r2, #5
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d100      	bne.n	8006a40 <HAL_TIM_ConfigClockSource+0x70>
 8006a3e:	e088      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x182>
 8006a40:	2280      	movs	r2, #128	; 0x80
 8006a42:	0152      	lsls	r2, r2, #5
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d900      	bls.n	8006a4a <HAL_TIM_ConfigClockSource+0x7a>
 8006a48:	e07e      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x178>
 8006a4a:	2b70      	cmp	r3, #112	; 0x70
 8006a4c:	d018      	beq.n	8006a80 <HAL_TIM_ConfigClockSource+0xb0>
 8006a4e:	d900      	bls.n	8006a52 <HAL_TIM_ConfigClockSource+0x82>
 8006a50:	e07a      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x178>
 8006a52:	2b60      	cmp	r3, #96	; 0x60
 8006a54:	d04f      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x126>
 8006a56:	d900      	bls.n	8006a5a <HAL_TIM_ConfigClockSource+0x8a>
 8006a58:	e076      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x178>
 8006a5a:	2b50      	cmp	r3, #80	; 0x50
 8006a5c:	d03b      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x106>
 8006a5e:	d900      	bls.n	8006a62 <HAL_TIM_ConfigClockSource+0x92>
 8006a60:	e072      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x178>
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	d057      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x146>
 8006a66:	d900      	bls.n	8006a6a <HAL_TIM_ConfigClockSource+0x9a>
 8006a68:	e06e      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x178>
 8006a6a:	2b30      	cmp	r3, #48	; 0x30
 8006a6c:	d063      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0x166>
 8006a6e:	d86b      	bhi.n	8006b48 <HAL_TIM_ConfigClockSource+0x178>
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d060      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0x166>
 8006a74:	d868      	bhi.n	8006b48 <HAL_TIM_ConfigClockSource+0x178>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d05d      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0x166>
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d05b      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0x166>
 8006a7e:	e063      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	6899      	ldr	r1, [r3, #8]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f000 fa4e 	bl	8006f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2277      	movs	r2, #119	; 0x77
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	609a      	str	r2, [r3, #8]
      break;
 8006aac:	e052      	b.n	8006b54 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6899      	ldr	r1, [r3, #8]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f000 fa37 	bl	8006f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2180      	movs	r1, #128	; 0x80
 8006ace:	01c9      	lsls	r1, r1, #7
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	609a      	str	r2, [r3, #8]
      break;
 8006ad4:	e03e      	b.n	8006b54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6859      	ldr	r1, [r3, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	001a      	movs	r2, r3
 8006ae4:	f000 f9aa 	bl	8006e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2150      	movs	r1, #80	; 0x50
 8006aee:	0018      	movs	r0, r3
 8006af0:	f000 fa04 	bl	8006efc <TIM_ITRx_SetConfig>
      break;
 8006af4:	e02e      	b.n	8006b54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6859      	ldr	r1, [r3, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	001a      	movs	r2, r3
 8006b04:	f000 f9c8 	bl	8006e98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2160      	movs	r1, #96	; 0x60
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f000 f9f4 	bl	8006efc <TIM_ITRx_SetConfig>
      break;
 8006b14:	e01e      	b.n	8006b54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6859      	ldr	r1, [r3, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	001a      	movs	r2, r3
 8006b24:	f000 f98a 	bl	8006e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2140      	movs	r1, #64	; 0x40
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f000 f9e4 	bl	8006efc <TIM_ITRx_SetConfig>
      break;
 8006b34:	e00e      	b.n	8006b54 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	0019      	movs	r1, r3
 8006b40:	0010      	movs	r0, r2
 8006b42:	f000 f9db 	bl	8006efc <TIM_ITRx_SetConfig>
      break;
 8006b46:	e005      	b.n	8006b54 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006b48:	230f      	movs	r3, #15
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
      break;
 8006b50:	e000      	b.n	8006b54 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006b52:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2239      	movs	r2, #57	; 0x39
 8006b58:	2101      	movs	r1, #1
 8006b5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2238      	movs	r2, #56	; 0x38
 8006b60:	2100      	movs	r1, #0
 8006b62:	5499      	strb	r1, [r3, r2]

  return status;
 8006b64:	230f      	movs	r3, #15
 8006b66:	18fb      	adds	r3, r7, r3
 8006b68:	781b      	ldrb	r3, [r3, #0]
}
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	b004      	add	sp, #16
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	ffff00ff 	.word	0xffff00ff

08006b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	2380      	movs	r3, #128	; 0x80
 8006b8c:	05db      	lsls	r3, r3, #23
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d00b      	beq.n	8006baa <TIM_Base_SetConfig+0x32>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a23      	ldr	r2, [pc, #140]	; (8006c24 <TIM_Base_SetConfig+0xac>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <TIM_Base_SetConfig+0x32>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a22      	ldr	r2, [pc, #136]	; (8006c28 <TIM_Base_SetConfig+0xb0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_Base_SetConfig+0x32>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a21      	ldr	r2, [pc, #132]	; (8006c2c <TIM_Base_SetConfig+0xb4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d108      	bne.n	8006bbc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2270      	movs	r2, #112	; 0x70
 8006bae:	4393      	bics	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	2380      	movs	r3, #128	; 0x80
 8006bc0:	05db      	lsls	r3, r3, #23
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d00b      	beq.n	8006bde <TIM_Base_SetConfig+0x66>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <TIM_Base_SetConfig+0xac>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d007      	beq.n	8006bde <TIM_Base_SetConfig+0x66>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <TIM_Base_SetConfig+0xb0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d003      	beq.n	8006bde <TIM_Base_SetConfig+0x66>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a14      	ldr	r2, [pc, #80]	; (8006c2c <TIM_Base_SetConfig+0xb4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d108      	bne.n	8006bf0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a13      	ldr	r2, [pc, #76]	; (8006c30 <TIM_Base_SetConfig+0xb8>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2280      	movs	r2, #128	; 0x80
 8006bf4:	4393      	bics	r3, r2
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	615a      	str	r2, [r3, #20]
}
 8006c1c:	46c0      	nop			; (mov r8, r8)
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	b004      	add	sp, #16
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40010800 	.word	0x40010800
 8006c2c:	40011400 	.word	0x40011400
 8006c30:	fffffcff 	.word	0xfffffcff

08006c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	2201      	movs	r2, #1
 8006c44:	4393      	bics	r3, r2
 8006c46:	001a      	movs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2270      	movs	r2, #112	; 0x70
 8006c62:	4393      	bics	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2203      	movs	r2, #3
 8006c6a:	4393      	bics	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	4393      	bics	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	621a      	str	r2, [r3, #32]
}
 8006ca4:	46c0      	nop			; (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b006      	add	sp, #24
 8006caa:	bd80      	pop	{r7, pc}

08006cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	2210      	movs	r2, #16
 8006cbc:	4393      	bics	r3, r2
 8006cbe:	001a      	movs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <TIM_OC2_SetConfig+0x7c>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4a12      	ldr	r2, [pc, #72]	; (8006d2c <TIM_OC2_SetConfig+0x80>)
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	4393      	bics	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	621a      	str	r2, [r3, #32]
}
 8006d20:	46c0      	nop			; (mov r8, r8)
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b006      	add	sp, #24
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	ffff8fff 	.word	0xffff8fff
 8006d2c:	fffffcff 	.word	0xfffffcff

08006d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	4a1a      	ldr	r2, [pc, #104]	; (8006da8 <TIM_OC3_SetConfig+0x78>)
 8006d40:	401a      	ands	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2270      	movs	r2, #112	; 0x70
 8006d5c:	4393      	bics	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2203      	movs	r2, #3
 8006d64:	4393      	bics	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	4a0d      	ldr	r2, [pc, #52]	; (8006dac <TIM_OC3_SetConfig+0x7c>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	621a      	str	r2, [r3, #32]
}
 8006da0:	46c0      	nop			; (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b006      	add	sp, #24
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	fffffeff 	.word	0xfffffeff
 8006dac:	fffffdff 	.word	0xfffffdff

08006db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <TIM_OC4_SetConfig+0x7c>)
 8006dc0:	401a      	ands	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <TIM_OC4_SetConfig+0x80>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4a14      	ldr	r2, [pc, #80]	; (8006e34 <TIM_OC4_SetConfig+0x84>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <TIM_OC4_SetConfig+0x88>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	031b      	lsls	r3, r3, #12
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	621a      	str	r2, [r3, #32]
}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b006      	add	sp, #24
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	ffffefff 	.word	0xffffefff
 8006e30:	ffff8fff 	.word	0xffff8fff
 8006e34:	fffffcff 	.word	0xfffffcff
 8006e38:	ffffdfff 	.word	0xffffdfff

08006e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	2201      	movs	r2, #1
 8006e54:	4393      	bics	r3, r2
 8006e56:	001a      	movs	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	22f0      	movs	r2, #240	; 0xf0
 8006e66:	4393      	bics	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	220a      	movs	r2, #10
 8006e78:	4393      	bics	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	621a      	str	r2, [r3, #32]
}
 8006e90:	46c0      	nop			; (mov r8, r8)
 8006e92:	46bd      	mov	sp, r7
 8006e94:	b006      	add	sp, #24
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	2210      	movs	r2, #16
 8006eaa:	4393      	bics	r3, r2
 8006eac:	001a      	movs	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	4a0d      	ldr	r2, [pc, #52]	; (8006ef8 <TIM_TI2_ConfigInputStage+0x60>)
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	031b      	lsls	r3, r3, #12
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	22a0      	movs	r2, #160	; 0xa0
 8006ed4:	4393      	bics	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	621a      	str	r2, [r3, #32]
}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b006      	add	sp, #24
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	ffff0fff 	.word	0xffff0fff

08006efc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2270      	movs	r2, #112	; 0x70
 8006f10:	4393      	bics	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	2207      	movs	r2, #7
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	609a      	str	r2, [r3, #8]
}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	b004      	add	sp, #16
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	4a09      	ldr	r2, [pc, #36]	; (8006f6c <TIM_ETR_SetConfig+0x3c>)
 8006f48:	4013      	ands	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	021a      	lsls	r2, r3, #8
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	46c0      	nop			; (mov r8, r8)
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b006      	add	sp, #24
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	ffff00ff 	.word	0xffff00ff

08006f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	221f      	movs	r2, #31
 8006f80:	4013      	ands	r3, r2
 8006f82:	2201      	movs	r2, #1
 8006f84:	409a      	lsls	r2, r3
 8006f86:	0013      	movs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	43d2      	mvns	r2, r2
 8006f92:	401a      	ands	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1a      	ldr	r2, [r3, #32]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	211f      	movs	r1, #31
 8006fa0:	400b      	ands	r3, r1
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4099      	lsls	r1, r3
 8006fa6:	000b      	movs	r3, r1
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	b006      	add	sp, #24
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2238      	movs	r2, #56	; 0x38
 8006fc6:	5c9b      	ldrb	r3, [r3, r2]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e047      	b.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2238      	movs	r2, #56	; 0x38
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2239      	movs	r2, #57	; 0x39
 8006fdc:	2102      	movs	r1, #2
 8006fde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2270      	movs	r2, #112	; 0x70
 8006ff4:	4393      	bics	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	2380      	movs	r3, #128	; 0x80
 8007010:	05db      	lsls	r3, r3, #23
 8007012:	429a      	cmp	r2, r3
 8007014:	d00e      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a13      	ldr	r2, [pc, #76]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d009      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a11      	ldr	r2, [pc, #68]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d004      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a10      	ldr	r2, [pc, #64]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d10c      	bne.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2280      	movs	r2, #128	; 0x80
 8007038:	4393      	bics	r3, r2
 800703a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	4313      	orrs	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2239      	movs	r2, #57	; 0x39
 8007052:	2101      	movs	r1, #1
 8007054:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2238      	movs	r2, #56	; 0x38
 800705a:	2100      	movs	r1, #0
 800705c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	0018      	movs	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	b004      	add	sp, #16
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40000400 	.word	0x40000400
 800706c:	40010800 	.word	0x40010800
 8007070:	40011400 	.word	0x40011400

08007074 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2238      	movs	r2, #56	; 0x38
 8007082:	5c9b      	ldrb	r3, [r3, r2]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_TIMEx_RemapConfig+0x18>
 8007088:	2302      	movs	r3, #2
 800708a:	e00c      	b.n	80070a6 <HAL_TIMEx_RemapConfig+0x32>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2238      	movs	r2, #56	; 0x38
 8007090:	2101      	movs	r1, #1
 8007092:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2238      	movs	r2, #56	; 0x38
 80070a0:	2100      	movs	r1, #0
 80070a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	0018      	movs	r0, r3
 80070a8:	46bd      	mov	sp, r7
 80070aa:	b002      	add	sp, #8
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e044      	b.n	800714c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d107      	bne.n	80070da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2274      	movs	r2, #116	; 0x74
 80070ce:	2100      	movs	r1, #0
 80070d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	0018      	movs	r0, r3
 80070d6:	f7fc ff6d 	bl	8003fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2224      	movs	r2, #36	; 0x24
 80070de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2101      	movs	r1, #1
 80070ec:	438a      	bics	r2, r1
 80070ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	0018      	movs	r0, r3
 80070f4:	f000 f8d8 	bl	80072a8 <UART_SetConfig>
 80070f8:	0003      	movs	r3, r0
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e024      	b.n	800714c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	0018      	movs	r0, r3
 800710e:	f000 fb6b 	bl	80077e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	490d      	ldr	r1, [pc, #52]	; (8007154 <HAL_UART_Init+0xa4>)
 800711e:	400a      	ands	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	212a      	movs	r1, #42	; 0x2a
 800712e:	438a      	bics	r2, r1
 8007130:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2101      	movs	r1, #1
 800713e:	430a      	orrs	r2, r1
 8007140:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	0018      	movs	r0, r3
 8007146:	f000 fc03 	bl	8007950 <UART_CheckIdleState>
 800714a:	0003      	movs	r3, r0
}
 800714c:	0018      	movs	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	b002      	add	sp, #8
 8007152:	bd80      	pop	{r7, pc}
 8007154:	ffffb7ff 	.word	0xffffb7ff

08007158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	af02      	add	r7, sp, #8
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	1dbb      	adds	r3, r7, #6
 8007166:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800716c:	2b20      	cmp	r3, #32
 800716e:	d000      	beq.n	8007172 <HAL_UART_Transmit+0x1a>
 8007170:	e095      	b.n	800729e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_UART_Transmit+0x28>
 8007178:	1dbb      	adds	r3, r7, #6
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e08d      	b.n	80072a0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	015b      	lsls	r3, r3, #5
 800718c:	429a      	cmp	r2, r3
 800718e:	d109      	bne.n	80071a4 <HAL_UART_Transmit+0x4c>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2201      	movs	r2, #1
 800719c:	4013      	ands	r3, r2
 800719e:	d001      	beq.n	80071a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e07d      	b.n	80072a0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2274      	movs	r2, #116	; 0x74
 80071a8:	5c9b      	ldrb	r3, [r3, r2]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <HAL_UART_Transmit+0x5a>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e076      	b.n	80072a0 <HAL_UART_Transmit+0x148>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2274      	movs	r2, #116	; 0x74
 80071b6:	2101      	movs	r1, #1
 80071b8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2280      	movs	r2, #128	; 0x80
 80071be:	2100      	movs	r1, #0
 80071c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2221      	movs	r2, #33	; 0x21
 80071c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071c8:	f7fd f96c 	bl	80044a4 <HAL_GetTick>
 80071cc:	0003      	movs	r3, r0
 80071ce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	1dba      	adds	r2, r7, #6
 80071d4:	2150      	movs	r1, #80	; 0x50
 80071d6:	8812      	ldrh	r2, [r2, #0]
 80071d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	1dba      	adds	r2, r7, #6
 80071de:	2152      	movs	r1, #82	; 0x52
 80071e0:	8812      	ldrh	r2, [r2, #0]
 80071e2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	2380      	movs	r3, #128	; 0x80
 80071ea:	015b      	lsls	r3, r3, #5
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d108      	bne.n	8007202 <HAL_UART_Transmit+0xaa>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e003      	b.n	800720a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2274      	movs	r2, #116	; 0x74
 800720e:	2100      	movs	r1, #0
 8007210:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007212:	e02c      	b.n	800726e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	0013      	movs	r3, r2
 800721e:	2200      	movs	r2, #0
 8007220:	2180      	movs	r1, #128	; 0x80
 8007222:	f000 fbdd 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 8007226:	1e03      	subs	r3, r0, #0
 8007228:	d001      	beq.n	800722e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e038      	b.n	80072a0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10b      	bne.n	800724c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	001a      	movs	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	05d2      	lsls	r2, r2, #23
 8007240:	0dd2      	lsrs	r2, r2, #23
 8007242:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	3302      	adds	r3, #2
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e007      	b.n	800725c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	3301      	adds	r3, #1
 800725a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2252      	movs	r2, #82	; 0x52
 8007260:	5a9b      	ldrh	r3, [r3, r2]
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b299      	uxth	r1, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2252      	movs	r2, #82	; 0x52
 800726c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2252      	movs	r2, #82	; 0x52
 8007272:	5a9b      	ldrh	r3, [r3, r2]
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1cc      	bne.n	8007214 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	0013      	movs	r3, r2
 8007284:	2200      	movs	r2, #0
 8007286:	2140      	movs	r1, #64	; 0x40
 8007288:	f000 fbaa 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 800728c:	1e03      	subs	r3, r0, #0
 800728e:	d001      	beq.n	8007294 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e005      	b.n	80072a0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	e000      	b.n	80072a0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800729e:	2302      	movs	r3, #2
  }
}
 80072a0:	0018      	movs	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	b008      	add	sp, #32
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a8:	b5b0      	push	{r4, r5, r7, lr}
 80072aa:	b08e      	sub	sp, #56	; 0x38
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072b0:	231a      	movs	r3, #26
 80072b2:	2218      	movs	r2, #24
 80072b4:	189b      	adds	r3, r3, r2
 80072b6:	19db      	adds	r3, r3, r7
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	431a      	orrs	r2, r3
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4ac3      	ldr	r2, [pc, #780]	; (80075e8 <UART_SetConfig+0x340>)
 80072dc:	4013      	ands	r3, r2
 80072de:	0019      	movs	r1, r3
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072e6:	430a      	orrs	r2, r1
 80072e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4abe      	ldr	r2, [pc, #760]	; (80075ec <UART_SetConfig+0x344>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	0019      	movs	r1, r3
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4ab8      	ldr	r2, [pc, #736]	; (80075f0 <UART_SetConfig+0x348>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007318:	4313      	orrs	r3, r2
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4ab4      	ldr	r2, [pc, #720]	; (80075f4 <UART_SetConfig+0x34c>)
 8007324:	4013      	ands	r3, r2
 8007326:	0019      	movs	r1, r3
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800732e:	430a      	orrs	r2, r1
 8007330:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4ab0      	ldr	r2, [pc, #704]	; (80075f8 <UART_SetConfig+0x350>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d131      	bne.n	80073a0 <UART_SetConfig+0xf8>
 800733c:	4baf      	ldr	r3, [pc, #700]	; (80075fc <UART_SetConfig+0x354>)
 800733e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007340:	2203      	movs	r2, #3
 8007342:	4013      	ands	r3, r2
 8007344:	2b03      	cmp	r3, #3
 8007346:	d01d      	beq.n	8007384 <UART_SetConfig+0xdc>
 8007348:	d823      	bhi.n	8007392 <UART_SetConfig+0xea>
 800734a:	2b02      	cmp	r3, #2
 800734c:	d00c      	beq.n	8007368 <UART_SetConfig+0xc0>
 800734e:	d820      	bhi.n	8007392 <UART_SetConfig+0xea>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <UART_SetConfig+0xb2>
 8007354:	2b01      	cmp	r3, #1
 8007356:	d00e      	beq.n	8007376 <UART_SetConfig+0xce>
 8007358:	e01b      	b.n	8007392 <UART_SetConfig+0xea>
 800735a:	231b      	movs	r3, #27
 800735c:	2218      	movs	r2, #24
 800735e:	189b      	adds	r3, r3, r2
 8007360:	19db      	adds	r3, r3, r7
 8007362:	2201      	movs	r2, #1
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	e0b4      	b.n	80074d2 <UART_SetConfig+0x22a>
 8007368:	231b      	movs	r3, #27
 800736a:	2218      	movs	r2, #24
 800736c:	189b      	adds	r3, r3, r2
 800736e:	19db      	adds	r3, r3, r7
 8007370:	2202      	movs	r2, #2
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	e0ad      	b.n	80074d2 <UART_SetConfig+0x22a>
 8007376:	231b      	movs	r3, #27
 8007378:	2218      	movs	r2, #24
 800737a:	189b      	adds	r3, r3, r2
 800737c:	19db      	adds	r3, r3, r7
 800737e:	2204      	movs	r2, #4
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	e0a6      	b.n	80074d2 <UART_SetConfig+0x22a>
 8007384:	231b      	movs	r3, #27
 8007386:	2218      	movs	r2, #24
 8007388:	189b      	adds	r3, r3, r2
 800738a:	19db      	adds	r3, r3, r7
 800738c:	2208      	movs	r2, #8
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e09f      	b.n	80074d2 <UART_SetConfig+0x22a>
 8007392:	231b      	movs	r3, #27
 8007394:	2218      	movs	r2, #24
 8007396:	189b      	adds	r3, r3, r2
 8007398:	19db      	adds	r3, r3, r7
 800739a:	2210      	movs	r2, #16
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e098      	b.n	80074d2 <UART_SetConfig+0x22a>
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a96      	ldr	r2, [pc, #600]	; (8007600 <UART_SetConfig+0x358>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d131      	bne.n	800740e <UART_SetConfig+0x166>
 80073aa:	4b94      	ldr	r3, [pc, #592]	; (80075fc <UART_SetConfig+0x354>)
 80073ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ae:	220c      	movs	r2, #12
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b0c      	cmp	r3, #12
 80073b4:	d01d      	beq.n	80073f2 <UART_SetConfig+0x14a>
 80073b6:	d823      	bhi.n	8007400 <UART_SetConfig+0x158>
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d00c      	beq.n	80073d6 <UART_SetConfig+0x12e>
 80073bc:	d820      	bhi.n	8007400 <UART_SetConfig+0x158>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <UART_SetConfig+0x120>
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d00e      	beq.n	80073e4 <UART_SetConfig+0x13c>
 80073c6:	e01b      	b.n	8007400 <UART_SetConfig+0x158>
 80073c8:	231b      	movs	r3, #27
 80073ca:	2218      	movs	r2, #24
 80073cc:	189b      	adds	r3, r3, r2
 80073ce:	19db      	adds	r3, r3, r7
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	e07d      	b.n	80074d2 <UART_SetConfig+0x22a>
 80073d6:	231b      	movs	r3, #27
 80073d8:	2218      	movs	r2, #24
 80073da:	189b      	adds	r3, r3, r2
 80073dc:	19db      	adds	r3, r3, r7
 80073de:	2202      	movs	r2, #2
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e076      	b.n	80074d2 <UART_SetConfig+0x22a>
 80073e4:	231b      	movs	r3, #27
 80073e6:	2218      	movs	r2, #24
 80073e8:	189b      	adds	r3, r3, r2
 80073ea:	19db      	adds	r3, r3, r7
 80073ec:	2204      	movs	r2, #4
 80073ee:	701a      	strb	r2, [r3, #0]
 80073f0:	e06f      	b.n	80074d2 <UART_SetConfig+0x22a>
 80073f2:	231b      	movs	r3, #27
 80073f4:	2218      	movs	r2, #24
 80073f6:	189b      	adds	r3, r3, r2
 80073f8:	19db      	adds	r3, r3, r7
 80073fa:	2208      	movs	r2, #8
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e068      	b.n	80074d2 <UART_SetConfig+0x22a>
 8007400:	231b      	movs	r3, #27
 8007402:	2218      	movs	r2, #24
 8007404:	189b      	adds	r3, r3, r2
 8007406:	19db      	adds	r3, r3, r7
 8007408:	2210      	movs	r2, #16
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	e061      	b.n	80074d2 <UART_SetConfig+0x22a>
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a7c      	ldr	r2, [pc, #496]	; (8007604 <UART_SetConfig+0x35c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d106      	bne.n	8007426 <UART_SetConfig+0x17e>
 8007418:	231b      	movs	r3, #27
 800741a:	2218      	movs	r2, #24
 800741c:	189b      	adds	r3, r3, r2
 800741e:	19db      	adds	r3, r3, r7
 8007420:	2200      	movs	r2, #0
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e055      	b.n	80074d2 <UART_SetConfig+0x22a>
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a77      	ldr	r2, [pc, #476]	; (8007608 <UART_SetConfig+0x360>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d106      	bne.n	800743e <UART_SetConfig+0x196>
 8007430:	231b      	movs	r3, #27
 8007432:	2218      	movs	r2, #24
 8007434:	189b      	adds	r3, r3, r2
 8007436:	19db      	adds	r3, r3, r7
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	e049      	b.n	80074d2 <UART_SetConfig+0x22a>
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a6b      	ldr	r2, [pc, #428]	; (80075f0 <UART_SetConfig+0x348>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d13e      	bne.n	80074c6 <UART_SetConfig+0x21e>
 8007448:	4b6c      	ldr	r3, [pc, #432]	; (80075fc <UART_SetConfig+0x354>)
 800744a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800744c:	23c0      	movs	r3, #192	; 0xc0
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	4013      	ands	r3, r2
 8007452:	22c0      	movs	r2, #192	; 0xc0
 8007454:	0112      	lsls	r2, r2, #4
 8007456:	4293      	cmp	r3, r2
 8007458:	d027      	beq.n	80074aa <UART_SetConfig+0x202>
 800745a:	22c0      	movs	r2, #192	; 0xc0
 800745c:	0112      	lsls	r2, r2, #4
 800745e:	4293      	cmp	r3, r2
 8007460:	d82a      	bhi.n	80074b8 <UART_SetConfig+0x210>
 8007462:	2280      	movs	r2, #128	; 0x80
 8007464:	0112      	lsls	r2, r2, #4
 8007466:	4293      	cmp	r3, r2
 8007468:	d011      	beq.n	800748e <UART_SetConfig+0x1e6>
 800746a:	2280      	movs	r2, #128	; 0x80
 800746c:	0112      	lsls	r2, r2, #4
 800746e:	4293      	cmp	r3, r2
 8007470:	d822      	bhi.n	80074b8 <UART_SetConfig+0x210>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d004      	beq.n	8007480 <UART_SetConfig+0x1d8>
 8007476:	2280      	movs	r2, #128	; 0x80
 8007478:	00d2      	lsls	r2, r2, #3
 800747a:	4293      	cmp	r3, r2
 800747c:	d00e      	beq.n	800749c <UART_SetConfig+0x1f4>
 800747e:	e01b      	b.n	80074b8 <UART_SetConfig+0x210>
 8007480:	231b      	movs	r3, #27
 8007482:	2218      	movs	r2, #24
 8007484:	189b      	adds	r3, r3, r2
 8007486:	19db      	adds	r3, r3, r7
 8007488:	2200      	movs	r2, #0
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	e021      	b.n	80074d2 <UART_SetConfig+0x22a>
 800748e:	231b      	movs	r3, #27
 8007490:	2218      	movs	r2, #24
 8007492:	189b      	adds	r3, r3, r2
 8007494:	19db      	adds	r3, r3, r7
 8007496:	2202      	movs	r2, #2
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	e01a      	b.n	80074d2 <UART_SetConfig+0x22a>
 800749c:	231b      	movs	r3, #27
 800749e:	2218      	movs	r2, #24
 80074a0:	189b      	adds	r3, r3, r2
 80074a2:	19db      	adds	r3, r3, r7
 80074a4:	2204      	movs	r2, #4
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	e013      	b.n	80074d2 <UART_SetConfig+0x22a>
 80074aa:	231b      	movs	r3, #27
 80074ac:	2218      	movs	r2, #24
 80074ae:	189b      	adds	r3, r3, r2
 80074b0:	19db      	adds	r3, r3, r7
 80074b2:	2208      	movs	r2, #8
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	e00c      	b.n	80074d2 <UART_SetConfig+0x22a>
 80074b8:	231b      	movs	r3, #27
 80074ba:	2218      	movs	r2, #24
 80074bc:	189b      	adds	r3, r3, r2
 80074be:	19db      	adds	r3, r3, r7
 80074c0:	2210      	movs	r2, #16
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e005      	b.n	80074d2 <UART_SetConfig+0x22a>
 80074c6:	231b      	movs	r3, #27
 80074c8:	2218      	movs	r2, #24
 80074ca:	189b      	adds	r3, r3, r2
 80074cc:	19db      	adds	r3, r3, r7
 80074ce:	2210      	movs	r2, #16
 80074d0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a46      	ldr	r2, [pc, #280]	; (80075f0 <UART_SetConfig+0x348>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d000      	beq.n	80074de <UART_SetConfig+0x236>
 80074dc:	e09a      	b.n	8007614 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074de:	231b      	movs	r3, #27
 80074e0:	2218      	movs	r2, #24
 80074e2:	189b      	adds	r3, r3, r2
 80074e4:	19db      	adds	r3, r3, r7
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d01d      	beq.n	8007528 <UART_SetConfig+0x280>
 80074ec:	dc20      	bgt.n	8007530 <UART_SetConfig+0x288>
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d015      	beq.n	800751e <UART_SetConfig+0x276>
 80074f2:	dc1d      	bgt.n	8007530 <UART_SetConfig+0x288>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <UART_SetConfig+0x256>
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d005      	beq.n	8007508 <UART_SetConfig+0x260>
 80074fc:	e018      	b.n	8007530 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fe:	f7fe fee7 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8007502:	0003      	movs	r3, r0
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007506:	e01c      	b.n	8007542 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007508:	4b3c      	ldr	r3, [pc, #240]	; (80075fc <UART_SetConfig+0x354>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2210      	movs	r2, #16
 800750e:	4013      	ands	r3, r2
 8007510:	d002      	beq.n	8007518 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007512:	4b3e      	ldr	r3, [pc, #248]	; (800760c <UART_SetConfig+0x364>)
 8007514:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007516:	e014      	b.n	8007542 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007518:	4b3d      	ldr	r3, [pc, #244]	; (8007610 <UART_SetConfig+0x368>)
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800751c:	e011      	b.n	8007542 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800751e:	f7fe fe27 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 8007522:	0003      	movs	r3, r0
 8007524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007526:	e00c      	b.n	8007542 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007528:	2380      	movs	r3, #128	; 0x80
 800752a:	021b      	lsls	r3, r3, #8
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800752e:	e008      	b.n	8007542 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007534:	231a      	movs	r3, #26
 8007536:	2218      	movs	r2, #24
 8007538:	189b      	adds	r3, r3, r2
 800753a:	19db      	adds	r3, r3, r7
 800753c:	2201      	movs	r2, #1
 800753e:	701a      	strb	r2, [r3, #0]
        break;
 8007540:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d100      	bne.n	800754a <UART_SetConfig+0x2a2>
 8007548:	e134      	b.n	80077b4 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	0013      	movs	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	189b      	adds	r3, r3, r2
 8007554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007556:	429a      	cmp	r2, r3
 8007558:	d305      	bcc.n	8007566 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007562:	429a      	cmp	r2, r3
 8007564:	d906      	bls.n	8007574 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007566:	231a      	movs	r3, #26
 8007568:	2218      	movs	r2, #24
 800756a:	189b      	adds	r3, r3, r2
 800756c:	19db      	adds	r3, r3, r7
 800756e:	2201      	movs	r2, #1
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	e11f      	b.n	80077b4 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	6939      	ldr	r1, [r7, #16]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	000b      	movs	r3, r1
 8007582:	0e1b      	lsrs	r3, r3, #24
 8007584:	0010      	movs	r0, r2
 8007586:	0205      	lsls	r5, r0, #8
 8007588:	431d      	orrs	r5, r3
 800758a:	000b      	movs	r3, r1
 800758c:	021c      	lsls	r4, r3, #8
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	68b8      	ldr	r0, [r7, #8]
 800759c:	68f9      	ldr	r1, [r7, #12]
 800759e:	1900      	adds	r0, r0, r4
 80075a0:	4169      	adcs	r1, r5
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f7f8 fe82 	bl	80002b8 <__aeabi_uldivmod>
 80075b4:	0002      	movs	r2, r0
 80075b6:	000b      	movs	r3, r1
 80075b8:	0013      	movs	r3, r2
 80075ba:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075be:	23c0      	movs	r3, #192	; 0xc0
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d309      	bcc.n	80075da <UART_SetConfig+0x332>
 80075c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	035b      	lsls	r3, r3, #13
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d204      	bcs.n	80075da <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d6:	60da      	str	r2, [r3, #12]
 80075d8:	e0ec      	b.n	80077b4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80075da:	231a      	movs	r3, #26
 80075dc:	2218      	movs	r2, #24
 80075de:	189b      	adds	r3, r3, r2
 80075e0:	19db      	adds	r3, r3, r7
 80075e2:	2201      	movs	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e0e5      	b.n	80077b4 <UART_SetConfig+0x50c>
 80075e8:	efff69f3 	.word	0xefff69f3
 80075ec:	ffffcfff 	.word	0xffffcfff
 80075f0:	40004800 	.word	0x40004800
 80075f4:	fffff4ff 	.word	0xfffff4ff
 80075f8:	40013800 	.word	0x40013800
 80075fc:	40021000 	.word	0x40021000
 8007600:	40004400 	.word	0x40004400
 8007604:	40004c00 	.word	0x40004c00
 8007608:	40005000 	.word	0x40005000
 800760c:	003d0900 	.word	0x003d0900
 8007610:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	2380      	movs	r3, #128	; 0x80
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	429a      	cmp	r2, r3
 800761e:	d000      	beq.n	8007622 <UART_SetConfig+0x37a>
 8007620:	e071      	b.n	8007706 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007622:	231b      	movs	r3, #27
 8007624:	2218      	movs	r2, #24
 8007626:	189b      	adds	r3, r3, r2
 8007628:	19db      	adds	r3, r3, r7
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b08      	cmp	r3, #8
 800762e:	d822      	bhi.n	8007676 <UART_SetConfig+0x3ce>
 8007630:	009a      	lsls	r2, r3, #2
 8007632:	4b68      	ldr	r3, [pc, #416]	; (80077d4 <UART_SetConfig+0x52c>)
 8007634:	18d3      	adds	r3, r2, r3
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800763a:	f7fe fe49 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 800763e:	0003      	movs	r3, r0
 8007640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007642:	e021      	b.n	8007688 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007644:	f7fe fe5a 	bl	80062fc <HAL_RCC_GetPCLK2Freq>
 8007648:	0003      	movs	r3, r0
 800764a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800764c:	e01c      	b.n	8007688 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800764e:	4b62      	ldr	r3, [pc, #392]	; (80077d8 <UART_SetConfig+0x530>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2210      	movs	r2, #16
 8007654:	4013      	ands	r3, r2
 8007656:	d002      	beq.n	800765e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007658:	4b60      	ldr	r3, [pc, #384]	; (80077dc <UART_SetConfig+0x534>)
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800765c:	e014      	b.n	8007688 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800765e:	4b60      	ldr	r3, [pc, #384]	; (80077e0 <UART_SetConfig+0x538>)
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007662:	e011      	b.n	8007688 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007664:	f7fe fd84 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 8007668:	0003      	movs	r3, r0
 800766a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800766c:	e00c      	b.n	8007688 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800766e:	2380      	movs	r3, #128	; 0x80
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007674:	e008      	b.n	8007688 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800767a:	231a      	movs	r3, #26
 800767c:	2218      	movs	r2, #24
 800767e:	189b      	adds	r3, r3, r2
 8007680:	19db      	adds	r3, r3, r7
 8007682:	2201      	movs	r2, #1
 8007684:	701a      	strb	r2, [r3, #0]
        break;
 8007686:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d100      	bne.n	8007690 <UART_SetConfig+0x3e8>
 800768e:	e091      	b.n	80077b4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	005a      	lsls	r2, r3, #1
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	18d2      	adds	r2, r2, r3
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	0019      	movs	r1, r3
 80076a2:	0010      	movs	r0, r2
 80076a4:	f7f8 fd42 	bl	800012c <__udivsi3>
 80076a8:	0003      	movs	r3, r0
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	2b0f      	cmp	r3, #15
 80076b2:	d921      	bls.n	80076f8 <UART_SetConfig+0x450>
 80076b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b6:	2380      	movs	r3, #128	; 0x80
 80076b8:	025b      	lsls	r3, r3, #9
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d21c      	bcs.n	80076f8 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	200e      	movs	r0, #14
 80076c4:	2418      	movs	r4, #24
 80076c6:	1903      	adds	r3, r0, r4
 80076c8:	19db      	adds	r3, r3, r7
 80076ca:	210f      	movs	r1, #15
 80076cc:	438a      	bics	r2, r1
 80076ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2207      	movs	r2, #7
 80076d8:	4013      	ands	r3, r2
 80076da:	b299      	uxth	r1, r3
 80076dc:	1903      	adds	r3, r0, r4
 80076de:	19db      	adds	r3, r3, r7
 80076e0:	1902      	adds	r2, r0, r4
 80076e2:	19d2      	adds	r2, r2, r7
 80076e4:	8812      	ldrh	r2, [r2, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	1902      	adds	r2, r0, r4
 80076f0:	19d2      	adds	r2, r2, r7
 80076f2:	8812      	ldrh	r2, [r2, #0]
 80076f4:	60da      	str	r2, [r3, #12]
 80076f6:	e05d      	b.n	80077b4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80076f8:	231a      	movs	r3, #26
 80076fa:	2218      	movs	r2, #24
 80076fc:	189b      	adds	r3, r3, r2
 80076fe:	19db      	adds	r3, r3, r7
 8007700:	2201      	movs	r2, #1
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e056      	b.n	80077b4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007706:	231b      	movs	r3, #27
 8007708:	2218      	movs	r2, #24
 800770a:	189b      	adds	r3, r3, r2
 800770c:	19db      	adds	r3, r3, r7
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b08      	cmp	r3, #8
 8007712:	d822      	bhi.n	800775a <UART_SetConfig+0x4b2>
 8007714:	009a      	lsls	r2, r3, #2
 8007716:	4b33      	ldr	r3, [pc, #204]	; (80077e4 <UART_SetConfig+0x53c>)
 8007718:	18d3      	adds	r3, r2, r3
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800771e:	f7fe fdd7 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8007722:	0003      	movs	r3, r0
 8007724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007726:	e021      	b.n	800776c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007728:	f7fe fde8 	bl	80062fc <HAL_RCC_GetPCLK2Freq>
 800772c:	0003      	movs	r3, r0
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007730:	e01c      	b.n	800776c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007732:	4b29      	ldr	r3, [pc, #164]	; (80077d8 <UART_SetConfig+0x530>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2210      	movs	r2, #16
 8007738:	4013      	ands	r3, r2
 800773a:	d002      	beq.n	8007742 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800773c:	4b27      	ldr	r3, [pc, #156]	; (80077dc <UART_SetConfig+0x534>)
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007740:	e014      	b.n	800776c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8007742:	4b27      	ldr	r3, [pc, #156]	; (80077e0 <UART_SetConfig+0x538>)
 8007744:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007746:	e011      	b.n	800776c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007748:	f7fe fd12 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 800774c:	0003      	movs	r3, r0
 800774e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007750:	e00c      	b.n	800776c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007752:	2380      	movs	r3, #128	; 0x80
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007758:	e008      	b.n	800776c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800775e:	231a      	movs	r3, #26
 8007760:	2218      	movs	r2, #24
 8007762:	189b      	adds	r3, r3, r2
 8007764:	19db      	adds	r3, r3, r7
 8007766:	2201      	movs	r2, #1
 8007768:	701a      	strb	r2, [r3, #0]
        break;
 800776a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d020      	beq.n	80077b4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	085a      	lsrs	r2, r3, #1
 8007778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777a:	18d2      	adds	r2, r2, r3
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	0019      	movs	r1, r3
 8007782:	0010      	movs	r0, r2
 8007784:	f7f8 fcd2 	bl	800012c <__udivsi3>
 8007788:	0003      	movs	r3, r0
 800778a:	b29b      	uxth	r3, r3
 800778c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	2b0f      	cmp	r3, #15
 8007792:	d909      	bls.n	80077a8 <UART_SetConfig+0x500>
 8007794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007796:	2380      	movs	r3, #128	; 0x80
 8007798:	025b      	lsls	r3, r3, #9
 800779a:	429a      	cmp	r2, r3
 800779c:	d204      	bcs.n	80077a8 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	e005      	b.n	80077b4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80077a8:	231a      	movs	r3, #26
 80077aa:	2218      	movs	r2, #24
 80077ac:	189b      	adds	r3, r3, r2
 80077ae:	19db      	adds	r3, r3, r7
 80077b0:	2201      	movs	r2, #1
 80077b2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	2200      	movs	r2, #0
 80077b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	2200      	movs	r2, #0
 80077be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80077c0:	231a      	movs	r3, #26
 80077c2:	2218      	movs	r2, #24
 80077c4:	189b      	adds	r3, r3, r2
 80077c6:	19db      	adds	r3, r3, r7
 80077c8:	781b      	ldrb	r3, [r3, #0]
}
 80077ca:	0018      	movs	r0, r3
 80077cc:	46bd      	mov	sp, r7
 80077ce:	b00e      	add	sp, #56	; 0x38
 80077d0:	bdb0      	pop	{r4, r5, r7, pc}
 80077d2:	46c0      	nop			; (mov r8, r8)
 80077d4:	080085c4 	.word	0x080085c4
 80077d8:	40021000 	.word	0x40021000
 80077dc:	003d0900 	.word	0x003d0900
 80077e0:	00f42400 	.word	0x00f42400
 80077e4:	080085e8 	.word	0x080085e8

080077e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	2201      	movs	r2, #1
 80077f6:	4013      	ands	r3, r2
 80077f8:	d00b      	beq.n	8007812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	4a4a      	ldr	r2, [pc, #296]	; (800792c <UART_AdvFeatureConfig+0x144>)
 8007802:	4013      	ands	r3, r2
 8007804:	0019      	movs	r1, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2202      	movs	r2, #2
 8007818:	4013      	ands	r3, r2
 800781a:	d00b      	beq.n	8007834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	4a43      	ldr	r2, [pc, #268]	; (8007930 <UART_AdvFeatureConfig+0x148>)
 8007824:	4013      	ands	r3, r2
 8007826:	0019      	movs	r1, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	2204      	movs	r2, #4
 800783a:	4013      	ands	r3, r2
 800783c:	d00b      	beq.n	8007856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	4a3b      	ldr	r2, [pc, #236]	; (8007934 <UART_AdvFeatureConfig+0x14c>)
 8007846:	4013      	ands	r3, r2
 8007848:	0019      	movs	r1, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	2208      	movs	r2, #8
 800785c:	4013      	ands	r3, r2
 800785e:	d00b      	beq.n	8007878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	4a34      	ldr	r2, [pc, #208]	; (8007938 <UART_AdvFeatureConfig+0x150>)
 8007868:	4013      	ands	r3, r2
 800786a:	0019      	movs	r1, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	2210      	movs	r2, #16
 800787e:	4013      	ands	r3, r2
 8007880:	d00b      	beq.n	800789a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	4a2c      	ldr	r2, [pc, #176]	; (800793c <UART_AdvFeatureConfig+0x154>)
 800788a:	4013      	ands	r3, r2
 800788c:	0019      	movs	r1, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	2220      	movs	r2, #32
 80078a0:	4013      	ands	r3, r2
 80078a2:	d00b      	beq.n	80078bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	4a25      	ldr	r2, [pc, #148]	; (8007940 <UART_AdvFeatureConfig+0x158>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	0019      	movs	r1, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	2240      	movs	r2, #64	; 0x40
 80078c2:	4013      	ands	r3, r2
 80078c4:	d01d      	beq.n	8007902 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	4a1d      	ldr	r2, [pc, #116]	; (8007944 <UART_AdvFeatureConfig+0x15c>)
 80078ce:	4013      	ands	r3, r2
 80078d0:	0019      	movs	r1, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078e2:	2380      	movs	r3, #128	; 0x80
 80078e4:	035b      	lsls	r3, r3, #13
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d10b      	bne.n	8007902 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	4a15      	ldr	r2, [pc, #84]	; (8007948 <UART_AdvFeatureConfig+0x160>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	0019      	movs	r1, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	2280      	movs	r2, #128	; 0x80
 8007908:	4013      	ands	r3, r2
 800790a:	d00b      	beq.n	8007924 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4a0e      	ldr	r2, [pc, #56]	; (800794c <UART_AdvFeatureConfig+0x164>)
 8007914:	4013      	ands	r3, r2
 8007916:	0019      	movs	r1, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	605a      	str	r2, [r3, #4]
  }
}
 8007924:	46c0      	nop			; (mov r8, r8)
 8007926:	46bd      	mov	sp, r7
 8007928:	b002      	add	sp, #8
 800792a:	bd80      	pop	{r7, pc}
 800792c:	fffdffff 	.word	0xfffdffff
 8007930:	fffeffff 	.word	0xfffeffff
 8007934:	fffbffff 	.word	0xfffbffff
 8007938:	ffff7fff 	.word	0xffff7fff
 800793c:	ffffefff 	.word	0xffffefff
 8007940:	ffffdfff 	.word	0xffffdfff
 8007944:	ffefffff 	.word	0xffefffff
 8007948:	ff9fffff 	.word	0xff9fffff
 800794c:	fff7ffff 	.word	0xfff7ffff

08007950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af02      	add	r7, sp, #8
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2280      	movs	r2, #128	; 0x80
 800795c:	2100      	movs	r1, #0
 800795e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007960:	f7fc fda0 	bl	80044a4 <HAL_GetTick>
 8007964:	0003      	movs	r3, r0
 8007966:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2208      	movs	r2, #8
 8007970:	4013      	ands	r3, r2
 8007972:	2b08      	cmp	r3, #8
 8007974:	d10c      	bne.n	8007990 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2280      	movs	r2, #128	; 0x80
 800797a:	0391      	lsls	r1, r2, #14
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	4a17      	ldr	r2, [pc, #92]	; (80079dc <UART_CheckIdleState+0x8c>)
 8007980:	9200      	str	r2, [sp, #0]
 8007982:	2200      	movs	r2, #0
 8007984:	f000 f82c 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 8007988:	1e03      	subs	r3, r0, #0
 800798a:	d001      	beq.n	8007990 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e021      	b.n	80079d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2204      	movs	r2, #4
 8007998:	4013      	ands	r3, r2
 800799a:	2b04      	cmp	r3, #4
 800799c:	d10c      	bne.n	80079b8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2280      	movs	r2, #128	; 0x80
 80079a2:	03d1      	lsls	r1, r2, #15
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4a0d      	ldr	r2, [pc, #52]	; (80079dc <UART_CheckIdleState+0x8c>)
 80079a8:	9200      	str	r2, [sp, #0]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f000 f818 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 80079b0:	1e03      	subs	r3, r0, #0
 80079b2:	d001      	beq.n	80079b8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e00d      	b.n	80079d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2220      	movs	r2, #32
 80079bc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2220      	movs	r2, #32
 80079c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2274      	movs	r2, #116	; 0x74
 80079ce:	2100      	movs	r1, #0
 80079d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	0018      	movs	r0, r3
 80079d6:	46bd      	mov	sp, r7
 80079d8:	b004      	add	sp, #16
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	01ffffff 	.word	0x01ffffff

080079e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b094      	sub	sp, #80	; 0x50
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	1dfb      	adds	r3, r7, #7
 80079ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f0:	e0a3      	b.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079f4:	3301      	adds	r3, #1
 80079f6:	d100      	bne.n	80079fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80079f8:	e09f      	b.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079fa:	f7fc fd53 	bl	80044a4 <HAL_GetTick>
 80079fe:	0002      	movs	r2, r0
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d302      	bcc.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d13d      	bne.n	8007a8c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a10:	f3ef 8310 	mrs	r3, PRIMASK
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a18:	647b      	str	r3, [r7, #68]	; 0x44
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	f383 8810 	msr	PRIMASK, r3
}
 8007a24:	46c0      	nop			; (mov r8, r8)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	494c      	ldr	r1, [pc, #304]	; (8007b64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007a32:	400a      	ands	r2, r1
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a38:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	f383 8810 	msr	PRIMASK, r3
}
 8007a40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a42:	f3ef 8310 	mrs	r3, PRIMASK
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	f383 8810 	msr	PRIMASK, r3
}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2101      	movs	r1, #1
 8007a64:	438a      	bics	r2, r1
 8007a66:	609a      	str	r2, [r3, #8]
 8007a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6e:	f383 8810 	msr	PRIMASK, r3
}
 8007a72:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2220      	movs	r2, #32
 8007a78:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2274      	movs	r2, #116	; 0x74
 8007a84:	2100      	movs	r1, #0
 8007a86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e067      	b.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2204      	movs	r2, #4
 8007a94:	4013      	ands	r3, r2
 8007a96:	d050      	beq.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69da      	ldr	r2, [r3, #28]
 8007a9e:	2380      	movs	r3, #128	; 0x80
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	2380      	movs	r3, #128	; 0x80
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d146      	bne.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2280      	movs	r2, #128	; 0x80
 8007ab2:	0112      	lsls	r2, r2, #4
 8007ab4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aba:	613b      	str	r3, [r7, #16]
  return(result);
 8007abc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f383 8810 	msr	PRIMASK, r3
}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4923      	ldr	r1, [pc, #140]	; (8007b64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007ad8:	400a      	ands	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ade:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	f383 8810 	msr	PRIMASK, r3
}
 8007ae6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8007aec:	61fb      	str	r3, [r7, #28]
  return(result);
 8007aee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af2:	2301      	movs	r3, #1
 8007af4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	f383 8810 	msr	PRIMASK, r3
}
 8007afc:	46c0      	nop			; (mov r8, r8)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2101      	movs	r1, #1
 8007b0a:	438a      	bics	r2, r1
 8007b0c:	609a      	str	r2, [r3, #8]
 8007b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	f383 8810 	msr	PRIMASK, r3
}
 8007b18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2220      	movs	r2, #32
 8007b24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	2120      	movs	r1, #32
 8007b2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2274      	movs	r2, #116	; 0x74
 8007b32:	2100      	movs	r1, #0
 8007b34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e010      	b.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	4013      	ands	r3, r2
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	425a      	negs	r2, r3
 8007b4a:	4153      	adcs	r3, r2
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	001a      	movs	r2, r3
 8007b50:	1dfb      	adds	r3, r7, #7
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d100      	bne.n	8007b5a <UART_WaitOnFlagUntilTimeout+0x17a>
 8007b58:	e74b      	b.n	80079f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	b014      	add	sp, #80	; 0x50
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	fffffe5f 	.word	0xfffffe5f

08007b68 <__errno>:
 8007b68:	4b01      	ldr	r3, [pc, #4]	; (8007b70 <__errno+0x8>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	4770      	bx	lr
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	2000000c 	.word	0x2000000c

08007b74 <__libc_init_array>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	2600      	movs	r6, #0
 8007b78:	4d0c      	ldr	r5, [pc, #48]	; (8007bac <__libc_init_array+0x38>)
 8007b7a:	4c0d      	ldr	r4, [pc, #52]	; (8007bb0 <__libc_init_array+0x3c>)
 8007b7c:	1b64      	subs	r4, r4, r5
 8007b7e:	10a4      	asrs	r4, r4, #2
 8007b80:	42a6      	cmp	r6, r4
 8007b82:	d109      	bne.n	8007b98 <__libc_init_array+0x24>
 8007b84:	2600      	movs	r6, #0
 8007b86:	f000 fc8b 	bl	80084a0 <_init>
 8007b8a:	4d0a      	ldr	r5, [pc, #40]	; (8007bb4 <__libc_init_array+0x40>)
 8007b8c:	4c0a      	ldr	r4, [pc, #40]	; (8007bb8 <__libc_init_array+0x44>)
 8007b8e:	1b64      	subs	r4, r4, r5
 8007b90:	10a4      	asrs	r4, r4, #2
 8007b92:	42a6      	cmp	r6, r4
 8007b94:	d105      	bne.n	8007ba2 <__libc_init_array+0x2e>
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	00b3      	lsls	r3, r6, #2
 8007b9a:	58eb      	ldr	r3, [r5, r3]
 8007b9c:	4798      	blx	r3
 8007b9e:	3601      	adds	r6, #1
 8007ba0:	e7ee      	b.n	8007b80 <__libc_init_array+0xc>
 8007ba2:	00b3      	lsls	r3, r6, #2
 8007ba4:	58eb      	ldr	r3, [r5, r3]
 8007ba6:	4798      	blx	r3
 8007ba8:	3601      	adds	r6, #1
 8007baa:	e7f2      	b.n	8007b92 <__libc_init_array+0x1e>
 8007bac:	08008648 	.word	0x08008648
 8007bb0:	08008648 	.word	0x08008648
 8007bb4:	08008648 	.word	0x08008648
 8007bb8:	0800864c 	.word	0x0800864c

08007bbc <memcpy>:
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d100      	bne.n	8007bc6 <memcpy+0xa>
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	5ccc      	ldrb	r4, [r1, r3]
 8007bc8:	54c4      	strb	r4, [r0, r3]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	e7f8      	b.n	8007bc0 <memcpy+0x4>

08007bce <memset>:
 8007bce:	0003      	movs	r3, r0
 8007bd0:	1882      	adds	r2, r0, r2
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d100      	bne.n	8007bd8 <memset+0xa>
 8007bd6:	4770      	bx	lr
 8007bd8:	7019      	strb	r1, [r3, #0]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	e7f9      	b.n	8007bd2 <memset+0x4>
	...

08007be0 <siprintf>:
 8007be0:	b40e      	push	{r1, r2, r3}
 8007be2:	b500      	push	{lr}
 8007be4:	490b      	ldr	r1, [pc, #44]	; (8007c14 <siprintf+0x34>)
 8007be6:	b09c      	sub	sp, #112	; 0x70
 8007be8:	ab1d      	add	r3, sp, #116	; 0x74
 8007bea:	9002      	str	r0, [sp, #8]
 8007bec:	9006      	str	r0, [sp, #24]
 8007bee:	9107      	str	r1, [sp, #28]
 8007bf0:	9104      	str	r1, [sp, #16]
 8007bf2:	4809      	ldr	r0, [pc, #36]	; (8007c18 <siprintf+0x38>)
 8007bf4:	4909      	ldr	r1, [pc, #36]	; (8007c1c <siprintf+0x3c>)
 8007bf6:	cb04      	ldmia	r3!, {r2}
 8007bf8:	9105      	str	r1, [sp, #20]
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	a902      	add	r1, sp, #8
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	f000 f870 	bl	8007ce4 <_svfiprintf_r>
 8007c04:	2300      	movs	r3, #0
 8007c06:	9a02      	ldr	r2, [sp, #8]
 8007c08:	7013      	strb	r3, [r2, #0]
 8007c0a:	b01c      	add	sp, #112	; 0x70
 8007c0c:	bc08      	pop	{r3}
 8007c0e:	b003      	add	sp, #12
 8007c10:	4718      	bx	r3
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	7fffffff 	.word	0x7fffffff
 8007c18:	2000000c 	.word	0x2000000c
 8007c1c:	ffff0208 	.word	0xffff0208

08007c20 <__ssputs_r>:
 8007c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c22:	688e      	ldr	r6, [r1, #8]
 8007c24:	b085      	sub	sp, #20
 8007c26:	0007      	movs	r7, r0
 8007c28:	000c      	movs	r4, r1
 8007c2a:	9203      	str	r2, [sp, #12]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	429e      	cmp	r6, r3
 8007c30:	d83c      	bhi.n	8007cac <__ssputs_r+0x8c>
 8007c32:	2390      	movs	r3, #144	; 0x90
 8007c34:	898a      	ldrh	r2, [r1, #12]
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	421a      	tst	r2, r3
 8007c3a:	d034      	beq.n	8007ca6 <__ssputs_r+0x86>
 8007c3c:	6909      	ldr	r1, [r1, #16]
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	6960      	ldr	r0, [r4, #20]
 8007c42:	1a5b      	subs	r3, r3, r1
 8007c44:	9302      	str	r3, [sp, #8]
 8007c46:	2303      	movs	r3, #3
 8007c48:	4343      	muls	r3, r0
 8007c4a:	0fdd      	lsrs	r5, r3, #31
 8007c4c:	18ed      	adds	r5, r5, r3
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	9802      	ldr	r0, [sp, #8]
 8007c52:	3301      	adds	r3, #1
 8007c54:	181b      	adds	r3, r3, r0
 8007c56:	106d      	asrs	r5, r5, #1
 8007c58:	42ab      	cmp	r3, r5
 8007c5a:	d900      	bls.n	8007c5e <__ssputs_r+0x3e>
 8007c5c:	001d      	movs	r5, r3
 8007c5e:	0553      	lsls	r3, r2, #21
 8007c60:	d532      	bpl.n	8007cc8 <__ssputs_r+0xa8>
 8007c62:	0029      	movs	r1, r5
 8007c64:	0038      	movs	r0, r7
 8007c66:	f000 fb49 	bl	80082fc <_malloc_r>
 8007c6a:	1e06      	subs	r6, r0, #0
 8007c6c:	d109      	bne.n	8007c82 <__ssputs_r+0x62>
 8007c6e:	230c      	movs	r3, #12
 8007c70:	603b      	str	r3, [r7, #0]
 8007c72:	2340      	movs	r3, #64	; 0x40
 8007c74:	2001      	movs	r0, #1
 8007c76:	89a2      	ldrh	r2, [r4, #12]
 8007c78:	4240      	negs	r0, r0
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	b005      	add	sp, #20
 8007c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c82:	9a02      	ldr	r2, [sp, #8]
 8007c84:	6921      	ldr	r1, [r4, #16]
 8007c86:	f7ff ff99 	bl	8007bbc <memcpy>
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	4a14      	ldr	r2, [pc, #80]	; (8007ce0 <__ssputs_r+0xc0>)
 8007c8e:	401a      	ands	r2, r3
 8007c90:	2380      	movs	r3, #128	; 0x80
 8007c92:	4313      	orrs	r3, r2
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	9b02      	ldr	r3, [sp, #8]
 8007c98:	6126      	str	r6, [r4, #16]
 8007c9a:	18f6      	adds	r6, r6, r3
 8007c9c:	6026      	str	r6, [r4, #0]
 8007c9e:	6165      	str	r5, [r4, #20]
 8007ca0:	9e01      	ldr	r6, [sp, #4]
 8007ca2:	1aed      	subs	r5, r5, r3
 8007ca4:	60a5      	str	r5, [r4, #8]
 8007ca6:	9b01      	ldr	r3, [sp, #4]
 8007ca8:	429e      	cmp	r6, r3
 8007caa:	d900      	bls.n	8007cae <__ssputs_r+0x8e>
 8007cac:	9e01      	ldr	r6, [sp, #4]
 8007cae:	0032      	movs	r2, r6
 8007cb0:	9903      	ldr	r1, [sp, #12]
 8007cb2:	6820      	ldr	r0, [r4, #0]
 8007cb4:	f000 faa3 	bl	80081fe <memmove>
 8007cb8:	68a3      	ldr	r3, [r4, #8]
 8007cba:	2000      	movs	r0, #0
 8007cbc:	1b9b      	subs	r3, r3, r6
 8007cbe:	60a3      	str	r3, [r4, #8]
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	199e      	adds	r6, r3, r6
 8007cc4:	6026      	str	r6, [r4, #0]
 8007cc6:	e7da      	b.n	8007c7e <__ssputs_r+0x5e>
 8007cc8:	002a      	movs	r2, r5
 8007cca:	0038      	movs	r0, r7
 8007ccc:	f000 fb8c 	bl	80083e8 <_realloc_r>
 8007cd0:	1e06      	subs	r6, r0, #0
 8007cd2:	d1e0      	bne.n	8007c96 <__ssputs_r+0x76>
 8007cd4:	0038      	movs	r0, r7
 8007cd6:	6921      	ldr	r1, [r4, #16]
 8007cd8:	f000 faa4 	bl	8008224 <_free_r>
 8007cdc:	e7c7      	b.n	8007c6e <__ssputs_r+0x4e>
 8007cde:	46c0      	nop			; (mov r8, r8)
 8007ce0:	fffffb7f 	.word	0xfffffb7f

08007ce4 <_svfiprintf_r>:
 8007ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce6:	b0a1      	sub	sp, #132	; 0x84
 8007ce8:	9003      	str	r0, [sp, #12]
 8007cea:	001d      	movs	r5, r3
 8007cec:	898b      	ldrh	r3, [r1, #12]
 8007cee:	000f      	movs	r7, r1
 8007cf0:	0016      	movs	r6, r2
 8007cf2:	061b      	lsls	r3, r3, #24
 8007cf4:	d511      	bpl.n	8007d1a <_svfiprintf_r+0x36>
 8007cf6:	690b      	ldr	r3, [r1, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10e      	bne.n	8007d1a <_svfiprintf_r+0x36>
 8007cfc:	2140      	movs	r1, #64	; 0x40
 8007cfe:	f000 fafd 	bl	80082fc <_malloc_r>
 8007d02:	6038      	str	r0, [r7, #0]
 8007d04:	6138      	str	r0, [r7, #16]
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d105      	bne.n	8007d16 <_svfiprintf_r+0x32>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	9a03      	ldr	r2, [sp, #12]
 8007d0e:	3801      	subs	r0, #1
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	b021      	add	sp, #132	; 0x84
 8007d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d16:	2340      	movs	r3, #64	; 0x40
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	ac08      	add	r4, sp, #32
 8007d1e:	6163      	str	r3, [r4, #20]
 8007d20:	3320      	adds	r3, #32
 8007d22:	7663      	strb	r3, [r4, #25]
 8007d24:	3310      	adds	r3, #16
 8007d26:	76a3      	strb	r3, [r4, #26]
 8007d28:	9507      	str	r5, [sp, #28]
 8007d2a:	0035      	movs	r5, r6
 8007d2c:	782b      	ldrb	r3, [r5, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <_svfiprintf_r+0x52>
 8007d32:	2b25      	cmp	r3, #37	; 0x25
 8007d34:	d147      	bne.n	8007dc6 <_svfiprintf_r+0xe2>
 8007d36:	1bab      	subs	r3, r5, r6
 8007d38:	9305      	str	r3, [sp, #20]
 8007d3a:	42b5      	cmp	r5, r6
 8007d3c:	d00c      	beq.n	8007d58 <_svfiprintf_r+0x74>
 8007d3e:	0032      	movs	r2, r6
 8007d40:	0039      	movs	r1, r7
 8007d42:	9803      	ldr	r0, [sp, #12]
 8007d44:	f7ff ff6c 	bl	8007c20 <__ssputs_r>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d100      	bne.n	8007d4e <_svfiprintf_r+0x6a>
 8007d4c:	e0ae      	b.n	8007eac <_svfiprintf_r+0x1c8>
 8007d4e:	6962      	ldr	r2, [r4, #20]
 8007d50:	9b05      	ldr	r3, [sp, #20]
 8007d52:	4694      	mov	ip, r2
 8007d54:	4463      	add	r3, ip
 8007d56:	6163      	str	r3, [r4, #20]
 8007d58:	782b      	ldrb	r3, [r5, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d100      	bne.n	8007d60 <_svfiprintf_r+0x7c>
 8007d5e:	e0a5      	b.n	8007eac <_svfiprintf_r+0x1c8>
 8007d60:	2201      	movs	r2, #1
 8007d62:	2300      	movs	r3, #0
 8007d64:	4252      	negs	r2, r2
 8007d66:	6062      	str	r2, [r4, #4]
 8007d68:	a904      	add	r1, sp, #16
 8007d6a:	3254      	adds	r2, #84	; 0x54
 8007d6c:	1852      	adds	r2, r2, r1
 8007d6e:	1c6e      	adds	r6, r5, #1
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	60e3      	str	r3, [r4, #12]
 8007d74:	60a3      	str	r3, [r4, #8]
 8007d76:	7013      	strb	r3, [r2, #0]
 8007d78:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d7a:	2205      	movs	r2, #5
 8007d7c:	7831      	ldrb	r1, [r6, #0]
 8007d7e:	4854      	ldr	r0, [pc, #336]	; (8007ed0 <_svfiprintf_r+0x1ec>)
 8007d80:	f000 fa32 	bl	80081e8 <memchr>
 8007d84:	1c75      	adds	r5, r6, #1
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d11f      	bne.n	8007dca <_svfiprintf_r+0xe6>
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	06d3      	lsls	r3, r2, #27
 8007d8e:	d504      	bpl.n	8007d9a <_svfiprintf_r+0xb6>
 8007d90:	2353      	movs	r3, #83	; 0x53
 8007d92:	a904      	add	r1, sp, #16
 8007d94:	185b      	adds	r3, r3, r1
 8007d96:	2120      	movs	r1, #32
 8007d98:	7019      	strb	r1, [r3, #0]
 8007d9a:	0713      	lsls	r3, r2, #28
 8007d9c:	d504      	bpl.n	8007da8 <_svfiprintf_r+0xc4>
 8007d9e:	2353      	movs	r3, #83	; 0x53
 8007da0:	a904      	add	r1, sp, #16
 8007da2:	185b      	adds	r3, r3, r1
 8007da4:	212b      	movs	r1, #43	; 0x2b
 8007da6:	7019      	strb	r1, [r3, #0]
 8007da8:	7833      	ldrb	r3, [r6, #0]
 8007daa:	2b2a      	cmp	r3, #42	; 0x2a
 8007dac:	d016      	beq.n	8007ddc <_svfiprintf_r+0xf8>
 8007dae:	0035      	movs	r5, r6
 8007db0:	2100      	movs	r1, #0
 8007db2:	200a      	movs	r0, #10
 8007db4:	68e3      	ldr	r3, [r4, #12]
 8007db6:	782a      	ldrb	r2, [r5, #0]
 8007db8:	1c6e      	adds	r6, r5, #1
 8007dba:	3a30      	subs	r2, #48	; 0x30
 8007dbc:	2a09      	cmp	r2, #9
 8007dbe:	d94e      	bls.n	8007e5e <_svfiprintf_r+0x17a>
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	d111      	bne.n	8007de8 <_svfiprintf_r+0x104>
 8007dc4:	e017      	b.n	8007df6 <_svfiprintf_r+0x112>
 8007dc6:	3501      	adds	r5, #1
 8007dc8:	e7b0      	b.n	8007d2c <_svfiprintf_r+0x48>
 8007dca:	4b41      	ldr	r3, [pc, #260]	; (8007ed0 <_svfiprintf_r+0x1ec>)
 8007dcc:	6822      	ldr	r2, [r4, #0]
 8007dce:	1ac0      	subs	r0, r0, r3
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	4083      	lsls	r3, r0
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	002e      	movs	r6, r5
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	e7ce      	b.n	8007d7a <_svfiprintf_r+0x96>
 8007ddc:	9b07      	ldr	r3, [sp, #28]
 8007dde:	1d19      	adds	r1, r3, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	9107      	str	r1, [sp, #28]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	db01      	blt.n	8007dec <_svfiprintf_r+0x108>
 8007de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dea:	e004      	b.n	8007df6 <_svfiprintf_r+0x112>
 8007dec:	425b      	negs	r3, r3
 8007dee:	60e3      	str	r3, [r4, #12]
 8007df0:	2302      	movs	r3, #2
 8007df2:	4313      	orrs	r3, r2
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	782b      	ldrb	r3, [r5, #0]
 8007df8:	2b2e      	cmp	r3, #46	; 0x2e
 8007dfa:	d10a      	bne.n	8007e12 <_svfiprintf_r+0x12e>
 8007dfc:	786b      	ldrb	r3, [r5, #1]
 8007dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007e00:	d135      	bne.n	8007e6e <_svfiprintf_r+0x18a>
 8007e02:	9b07      	ldr	r3, [sp, #28]
 8007e04:	3502      	adds	r5, #2
 8007e06:	1d1a      	adds	r2, r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	9207      	str	r2, [sp, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	db2b      	blt.n	8007e68 <_svfiprintf_r+0x184>
 8007e10:	9309      	str	r3, [sp, #36]	; 0x24
 8007e12:	4e30      	ldr	r6, [pc, #192]	; (8007ed4 <_svfiprintf_r+0x1f0>)
 8007e14:	2203      	movs	r2, #3
 8007e16:	0030      	movs	r0, r6
 8007e18:	7829      	ldrb	r1, [r5, #0]
 8007e1a:	f000 f9e5 	bl	80081e8 <memchr>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d006      	beq.n	8007e30 <_svfiprintf_r+0x14c>
 8007e22:	2340      	movs	r3, #64	; 0x40
 8007e24:	1b80      	subs	r0, r0, r6
 8007e26:	4083      	lsls	r3, r0
 8007e28:	6822      	ldr	r2, [r4, #0]
 8007e2a:	3501      	adds	r5, #1
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	6023      	str	r3, [r4, #0]
 8007e30:	7829      	ldrb	r1, [r5, #0]
 8007e32:	2206      	movs	r2, #6
 8007e34:	4828      	ldr	r0, [pc, #160]	; (8007ed8 <_svfiprintf_r+0x1f4>)
 8007e36:	1c6e      	adds	r6, r5, #1
 8007e38:	7621      	strb	r1, [r4, #24]
 8007e3a:	f000 f9d5 	bl	80081e8 <memchr>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d03c      	beq.n	8007ebc <_svfiprintf_r+0x1d8>
 8007e42:	4b26      	ldr	r3, [pc, #152]	; (8007edc <_svfiprintf_r+0x1f8>)
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d125      	bne.n	8007e94 <_svfiprintf_r+0x1b0>
 8007e48:	2207      	movs	r2, #7
 8007e4a:	9b07      	ldr	r3, [sp, #28]
 8007e4c:	3307      	adds	r3, #7
 8007e4e:	4393      	bics	r3, r2
 8007e50:	3308      	adds	r3, #8
 8007e52:	9307      	str	r3, [sp, #28]
 8007e54:	6963      	ldr	r3, [r4, #20]
 8007e56:	9a04      	ldr	r2, [sp, #16]
 8007e58:	189b      	adds	r3, r3, r2
 8007e5a:	6163      	str	r3, [r4, #20]
 8007e5c:	e765      	b.n	8007d2a <_svfiprintf_r+0x46>
 8007e5e:	4343      	muls	r3, r0
 8007e60:	0035      	movs	r5, r6
 8007e62:	2101      	movs	r1, #1
 8007e64:	189b      	adds	r3, r3, r2
 8007e66:	e7a6      	b.n	8007db6 <_svfiprintf_r+0xd2>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	425b      	negs	r3, r3
 8007e6c:	e7d0      	b.n	8007e10 <_svfiprintf_r+0x12c>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	200a      	movs	r0, #10
 8007e72:	001a      	movs	r2, r3
 8007e74:	3501      	adds	r5, #1
 8007e76:	6063      	str	r3, [r4, #4]
 8007e78:	7829      	ldrb	r1, [r5, #0]
 8007e7a:	1c6e      	adds	r6, r5, #1
 8007e7c:	3930      	subs	r1, #48	; 0x30
 8007e7e:	2909      	cmp	r1, #9
 8007e80:	d903      	bls.n	8007e8a <_svfiprintf_r+0x1a6>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0c5      	beq.n	8007e12 <_svfiprintf_r+0x12e>
 8007e86:	9209      	str	r2, [sp, #36]	; 0x24
 8007e88:	e7c3      	b.n	8007e12 <_svfiprintf_r+0x12e>
 8007e8a:	4342      	muls	r2, r0
 8007e8c:	0035      	movs	r5, r6
 8007e8e:	2301      	movs	r3, #1
 8007e90:	1852      	adds	r2, r2, r1
 8007e92:	e7f1      	b.n	8007e78 <_svfiprintf_r+0x194>
 8007e94:	ab07      	add	r3, sp, #28
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	003a      	movs	r2, r7
 8007e9a:	0021      	movs	r1, r4
 8007e9c:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <_svfiprintf_r+0x1fc>)
 8007e9e:	9803      	ldr	r0, [sp, #12]
 8007ea0:	e000      	b.n	8007ea4 <_svfiprintf_r+0x1c0>
 8007ea2:	bf00      	nop
 8007ea4:	9004      	str	r0, [sp, #16]
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	d1d3      	bne.n	8007e54 <_svfiprintf_r+0x170>
 8007eac:	89bb      	ldrh	r3, [r7, #12]
 8007eae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007eb0:	065b      	lsls	r3, r3, #25
 8007eb2:	d400      	bmi.n	8007eb6 <_svfiprintf_r+0x1d2>
 8007eb4:	e72d      	b.n	8007d12 <_svfiprintf_r+0x2e>
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	4240      	negs	r0, r0
 8007eba:	e72a      	b.n	8007d12 <_svfiprintf_r+0x2e>
 8007ebc:	ab07      	add	r3, sp, #28
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	003a      	movs	r2, r7
 8007ec2:	0021      	movs	r1, r4
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <_svfiprintf_r+0x1fc>)
 8007ec6:	9803      	ldr	r0, [sp, #12]
 8007ec8:	f000 f87c 	bl	8007fc4 <_printf_i>
 8007ecc:	e7ea      	b.n	8007ea4 <_svfiprintf_r+0x1c0>
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	0800860c 	.word	0x0800860c
 8007ed4:	08008612 	.word	0x08008612
 8007ed8:	08008616 	.word	0x08008616
 8007edc:	00000000 	.word	0x00000000
 8007ee0:	08007c21 	.word	0x08007c21

08007ee4 <_printf_common>:
 8007ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ee6:	0015      	movs	r5, r2
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	688a      	ldr	r2, [r1, #8]
 8007eec:	690b      	ldr	r3, [r1, #16]
 8007eee:	000c      	movs	r4, r1
 8007ef0:	9000      	str	r0, [sp, #0]
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	da00      	bge.n	8007ef8 <_printf_common+0x14>
 8007ef6:	0013      	movs	r3, r2
 8007ef8:	0022      	movs	r2, r4
 8007efa:	602b      	str	r3, [r5, #0]
 8007efc:	3243      	adds	r2, #67	; 0x43
 8007efe:	7812      	ldrb	r2, [r2, #0]
 8007f00:	2a00      	cmp	r2, #0
 8007f02:	d001      	beq.n	8007f08 <_printf_common+0x24>
 8007f04:	3301      	adds	r3, #1
 8007f06:	602b      	str	r3, [r5, #0]
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	069b      	lsls	r3, r3, #26
 8007f0c:	d502      	bpl.n	8007f14 <_printf_common+0x30>
 8007f0e:	682b      	ldr	r3, [r5, #0]
 8007f10:	3302      	adds	r3, #2
 8007f12:	602b      	str	r3, [r5, #0]
 8007f14:	6822      	ldr	r2, [r4, #0]
 8007f16:	2306      	movs	r3, #6
 8007f18:	0017      	movs	r7, r2
 8007f1a:	401f      	ands	r7, r3
 8007f1c:	421a      	tst	r2, r3
 8007f1e:	d027      	beq.n	8007f70 <_printf_common+0x8c>
 8007f20:	0023      	movs	r3, r4
 8007f22:	3343      	adds	r3, #67	; 0x43
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	1e5a      	subs	r2, r3, #1
 8007f28:	4193      	sbcs	r3, r2
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	0692      	lsls	r2, r2, #26
 8007f2e:	d430      	bmi.n	8007f92 <_printf_common+0xae>
 8007f30:	0022      	movs	r2, r4
 8007f32:	9901      	ldr	r1, [sp, #4]
 8007f34:	9800      	ldr	r0, [sp, #0]
 8007f36:	9e08      	ldr	r6, [sp, #32]
 8007f38:	3243      	adds	r2, #67	; 0x43
 8007f3a:	47b0      	blx	r6
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d025      	beq.n	8007f8c <_printf_common+0xa8>
 8007f40:	2306      	movs	r3, #6
 8007f42:	6820      	ldr	r0, [r4, #0]
 8007f44:	682a      	ldr	r2, [r5, #0]
 8007f46:	68e1      	ldr	r1, [r4, #12]
 8007f48:	2500      	movs	r5, #0
 8007f4a:	4003      	ands	r3, r0
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d103      	bne.n	8007f58 <_printf_common+0x74>
 8007f50:	1a8d      	subs	r5, r1, r2
 8007f52:	43eb      	mvns	r3, r5
 8007f54:	17db      	asrs	r3, r3, #31
 8007f56:	401d      	ands	r5, r3
 8007f58:	68a3      	ldr	r3, [r4, #8]
 8007f5a:	6922      	ldr	r2, [r4, #16]
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	dd01      	ble.n	8007f64 <_printf_common+0x80>
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	18ed      	adds	r5, r5, r3
 8007f64:	2700      	movs	r7, #0
 8007f66:	42bd      	cmp	r5, r7
 8007f68:	d120      	bne.n	8007fac <_printf_common+0xc8>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	e010      	b.n	8007f90 <_printf_common+0xac>
 8007f6e:	3701      	adds	r7, #1
 8007f70:	68e3      	ldr	r3, [r4, #12]
 8007f72:	682a      	ldr	r2, [r5, #0]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	42bb      	cmp	r3, r7
 8007f78:	ddd2      	ble.n	8007f20 <_printf_common+0x3c>
 8007f7a:	0022      	movs	r2, r4
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	9901      	ldr	r1, [sp, #4]
 8007f80:	9800      	ldr	r0, [sp, #0]
 8007f82:	9e08      	ldr	r6, [sp, #32]
 8007f84:	3219      	adds	r2, #25
 8007f86:	47b0      	blx	r6
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d1f0      	bne.n	8007f6e <_printf_common+0x8a>
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	4240      	negs	r0, r0
 8007f90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f92:	2030      	movs	r0, #48	; 0x30
 8007f94:	18e1      	adds	r1, r4, r3
 8007f96:	3143      	adds	r1, #67	; 0x43
 8007f98:	7008      	strb	r0, [r1, #0]
 8007f9a:	0021      	movs	r1, r4
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	3145      	adds	r1, #69	; 0x45
 8007fa0:	7809      	ldrb	r1, [r1, #0]
 8007fa2:	18a2      	adds	r2, r4, r2
 8007fa4:	3243      	adds	r2, #67	; 0x43
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	7011      	strb	r1, [r2, #0]
 8007faa:	e7c1      	b.n	8007f30 <_printf_common+0x4c>
 8007fac:	0022      	movs	r2, r4
 8007fae:	2301      	movs	r3, #1
 8007fb0:	9901      	ldr	r1, [sp, #4]
 8007fb2:	9800      	ldr	r0, [sp, #0]
 8007fb4:	9e08      	ldr	r6, [sp, #32]
 8007fb6:	321a      	adds	r2, #26
 8007fb8:	47b0      	blx	r6
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	d0e6      	beq.n	8007f8c <_printf_common+0xa8>
 8007fbe:	3701      	adds	r7, #1
 8007fc0:	e7d1      	b.n	8007f66 <_printf_common+0x82>
	...

08007fc4 <_printf_i>:
 8007fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc6:	b08b      	sub	sp, #44	; 0x2c
 8007fc8:	9206      	str	r2, [sp, #24]
 8007fca:	000a      	movs	r2, r1
 8007fcc:	3243      	adds	r2, #67	; 0x43
 8007fce:	9307      	str	r3, [sp, #28]
 8007fd0:	9005      	str	r0, [sp, #20]
 8007fd2:	9204      	str	r2, [sp, #16]
 8007fd4:	7e0a      	ldrb	r2, [r1, #24]
 8007fd6:	000c      	movs	r4, r1
 8007fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fda:	2a78      	cmp	r2, #120	; 0x78
 8007fdc:	d807      	bhi.n	8007fee <_printf_i+0x2a>
 8007fde:	2a62      	cmp	r2, #98	; 0x62
 8007fe0:	d809      	bhi.n	8007ff6 <_printf_i+0x32>
 8007fe2:	2a00      	cmp	r2, #0
 8007fe4:	d100      	bne.n	8007fe8 <_printf_i+0x24>
 8007fe6:	e0c1      	b.n	800816c <_printf_i+0x1a8>
 8007fe8:	2a58      	cmp	r2, #88	; 0x58
 8007fea:	d100      	bne.n	8007fee <_printf_i+0x2a>
 8007fec:	e08c      	b.n	8008108 <_printf_i+0x144>
 8007fee:	0026      	movs	r6, r4
 8007ff0:	3642      	adds	r6, #66	; 0x42
 8007ff2:	7032      	strb	r2, [r6, #0]
 8007ff4:	e022      	b.n	800803c <_printf_i+0x78>
 8007ff6:	0010      	movs	r0, r2
 8007ff8:	3863      	subs	r0, #99	; 0x63
 8007ffa:	2815      	cmp	r0, #21
 8007ffc:	d8f7      	bhi.n	8007fee <_printf_i+0x2a>
 8007ffe:	f7f8 f88b 	bl	8000118 <__gnu_thumb1_case_shi>
 8008002:	0016      	.short	0x0016
 8008004:	fff6001f 	.word	0xfff6001f
 8008008:	fff6fff6 	.word	0xfff6fff6
 800800c:	001ffff6 	.word	0x001ffff6
 8008010:	fff6fff6 	.word	0xfff6fff6
 8008014:	fff6fff6 	.word	0xfff6fff6
 8008018:	003600a8 	.word	0x003600a8
 800801c:	fff6009a 	.word	0xfff6009a
 8008020:	00b9fff6 	.word	0x00b9fff6
 8008024:	0036fff6 	.word	0x0036fff6
 8008028:	fff6fff6 	.word	0xfff6fff6
 800802c:	009e      	.short	0x009e
 800802e:	0026      	movs	r6, r4
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	3642      	adds	r6, #66	; 0x42
 8008034:	1d11      	adds	r1, r2, #4
 8008036:	6019      	str	r1, [r3, #0]
 8008038:	6813      	ldr	r3, [r2, #0]
 800803a:	7033      	strb	r3, [r6, #0]
 800803c:	2301      	movs	r3, #1
 800803e:	e0a7      	b.n	8008190 <_printf_i+0x1cc>
 8008040:	6808      	ldr	r0, [r1, #0]
 8008042:	6819      	ldr	r1, [r3, #0]
 8008044:	1d0a      	adds	r2, r1, #4
 8008046:	0605      	lsls	r5, r0, #24
 8008048:	d50b      	bpl.n	8008062 <_printf_i+0x9e>
 800804a:	680d      	ldr	r5, [r1, #0]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	2d00      	cmp	r5, #0
 8008050:	da03      	bge.n	800805a <_printf_i+0x96>
 8008052:	232d      	movs	r3, #45	; 0x2d
 8008054:	9a04      	ldr	r2, [sp, #16]
 8008056:	426d      	negs	r5, r5
 8008058:	7013      	strb	r3, [r2, #0]
 800805a:	4b61      	ldr	r3, [pc, #388]	; (80081e0 <_printf_i+0x21c>)
 800805c:	270a      	movs	r7, #10
 800805e:	9303      	str	r3, [sp, #12]
 8008060:	e01b      	b.n	800809a <_printf_i+0xd6>
 8008062:	680d      	ldr	r5, [r1, #0]
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	0641      	lsls	r1, r0, #25
 8008068:	d5f1      	bpl.n	800804e <_printf_i+0x8a>
 800806a:	b22d      	sxth	r5, r5
 800806c:	e7ef      	b.n	800804e <_printf_i+0x8a>
 800806e:	680d      	ldr	r5, [r1, #0]
 8008070:	6819      	ldr	r1, [r3, #0]
 8008072:	1d08      	adds	r0, r1, #4
 8008074:	6018      	str	r0, [r3, #0]
 8008076:	062e      	lsls	r6, r5, #24
 8008078:	d501      	bpl.n	800807e <_printf_i+0xba>
 800807a:	680d      	ldr	r5, [r1, #0]
 800807c:	e003      	b.n	8008086 <_printf_i+0xc2>
 800807e:	066d      	lsls	r5, r5, #25
 8008080:	d5fb      	bpl.n	800807a <_printf_i+0xb6>
 8008082:	680d      	ldr	r5, [r1, #0]
 8008084:	b2ad      	uxth	r5, r5
 8008086:	4b56      	ldr	r3, [pc, #344]	; (80081e0 <_printf_i+0x21c>)
 8008088:	2708      	movs	r7, #8
 800808a:	9303      	str	r3, [sp, #12]
 800808c:	2a6f      	cmp	r2, #111	; 0x6f
 800808e:	d000      	beq.n	8008092 <_printf_i+0xce>
 8008090:	3702      	adds	r7, #2
 8008092:	0023      	movs	r3, r4
 8008094:	2200      	movs	r2, #0
 8008096:	3343      	adds	r3, #67	; 0x43
 8008098:	701a      	strb	r2, [r3, #0]
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	60a3      	str	r3, [r4, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	db03      	blt.n	80080aa <_printf_i+0xe6>
 80080a2:	2204      	movs	r2, #4
 80080a4:	6821      	ldr	r1, [r4, #0]
 80080a6:	4391      	bics	r1, r2
 80080a8:	6021      	str	r1, [r4, #0]
 80080aa:	2d00      	cmp	r5, #0
 80080ac:	d102      	bne.n	80080b4 <_printf_i+0xf0>
 80080ae:	9e04      	ldr	r6, [sp, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00c      	beq.n	80080ce <_printf_i+0x10a>
 80080b4:	9e04      	ldr	r6, [sp, #16]
 80080b6:	0028      	movs	r0, r5
 80080b8:	0039      	movs	r1, r7
 80080ba:	f7f8 f8bd 	bl	8000238 <__aeabi_uidivmod>
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	3e01      	subs	r6, #1
 80080c2:	5c5b      	ldrb	r3, [r3, r1]
 80080c4:	7033      	strb	r3, [r6, #0]
 80080c6:	002b      	movs	r3, r5
 80080c8:	0005      	movs	r5, r0
 80080ca:	429f      	cmp	r7, r3
 80080cc:	d9f3      	bls.n	80080b6 <_printf_i+0xf2>
 80080ce:	2f08      	cmp	r7, #8
 80080d0:	d109      	bne.n	80080e6 <_printf_i+0x122>
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	07db      	lsls	r3, r3, #31
 80080d6:	d506      	bpl.n	80080e6 <_printf_i+0x122>
 80080d8:	6863      	ldr	r3, [r4, #4]
 80080da:	6922      	ldr	r2, [r4, #16]
 80080dc:	4293      	cmp	r3, r2
 80080de:	dc02      	bgt.n	80080e6 <_printf_i+0x122>
 80080e0:	2330      	movs	r3, #48	; 0x30
 80080e2:	3e01      	subs	r6, #1
 80080e4:	7033      	strb	r3, [r6, #0]
 80080e6:	9b04      	ldr	r3, [sp, #16]
 80080e8:	1b9b      	subs	r3, r3, r6
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	0021      	movs	r1, r4
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	9805      	ldr	r0, [sp, #20]
 80080f4:	9b06      	ldr	r3, [sp, #24]
 80080f6:	aa09      	add	r2, sp, #36	; 0x24
 80080f8:	f7ff fef4 	bl	8007ee4 <_printf_common>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d14c      	bne.n	800819a <_printf_i+0x1d6>
 8008100:	2001      	movs	r0, #1
 8008102:	4240      	negs	r0, r0
 8008104:	b00b      	add	sp, #44	; 0x2c
 8008106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008108:	3145      	adds	r1, #69	; 0x45
 800810a:	700a      	strb	r2, [r1, #0]
 800810c:	4a34      	ldr	r2, [pc, #208]	; (80081e0 <_printf_i+0x21c>)
 800810e:	9203      	str	r2, [sp, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	6821      	ldr	r1, [r4, #0]
 8008114:	ca20      	ldmia	r2!, {r5}
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	0608      	lsls	r0, r1, #24
 800811a:	d516      	bpl.n	800814a <_printf_i+0x186>
 800811c:	07cb      	lsls	r3, r1, #31
 800811e:	d502      	bpl.n	8008126 <_printf_i+0x162>
 8008120:	2320      	movs	r3, #32
 8008122:	4319      	orrs	r1, r3
 8008124:	6021      	str	r1, [r4, #0]
 8008126:	2710      	movs	r7, #16
 8008128:	2d00      	cmp	r5, #0
 800812a:	d1b2      	bne.n	8008092 <_printf_i+0xce>
 800812c:	2320      	movs	r3, #32
 800812e:	6822      	ldr	r2, [r4, #0]
 8008130:	439a      	bics	r2, r3
 8008132:	6022      	str	r2, [r4, #0]
 8008134:	e7ad      	b.n	8008092 <_printf_i+0xce>
 8008136:	2220      	movs	r2, #32
 8008138:	6809      	ldr	r1, [r1, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	6022      	str	r2, [r4, #0]
 800813e:	0022      	movs	r2, r4
 8008140:	2178      	movs	r1, #120	; 0x78
 8008142:	3245      	adds	r2, #69	; 0x45
 8008144:	7011      	strb	r1, [r2, #0]
 8008146:	4a27      	ldr	r2, [pc, #156]	; (80081e4 <_printf_i+0x220>)
 8008148:	e7e1      	b.n	800810e <_printf_i+0x14a>
 800814a:	0648      	lsls	r0, r1, #25
 800814c:	d5e6      	bpl.n	800811c <_printf_i+0x158>
 800814e:	b2ad      	uxth	r5, r5
 8008150:	e7e4      	b.n	800811c <_printf_i+0x158>
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	680d      	ldr	r5, [r1, #0]
 8008156:	1d10      	adds	r0, r2, #4
 8008158:	6949      	ldr	r1, [r1, #20]
 800815a:	6018      	str	r0, [r3, #0]
 800815c:	6813      	ldr	r3, [r2, #0]
 800815e:	062e      	lsls	r6, r5, #24
 8008160:	d501      	bpl.n	8008166 <_printf_i+0x1a2>
 8008162:	6019      	str	r1, [r3, #0]
 8008164:	e002      	b.n	800816c <_printf_i+0x1a8>
 8008166:	066d      	lsls	r5, r5, #25
 8008168:	d5fb      	bpl.n	8008162 <_printf_i+0x19e>
 800816a:	8019      	strh	r1, [r3, #0]
 800816c:	2300      	movs	r3, #0
 800816e:	9e04      	ldr	r6, [sp, #16]
 8008170:	6123      	str	r3, [r4, #16]
 8008172:	e7bb      	b.n	80080ec <_printf_i+0x128>
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	1d11      	adds	r1, r2, #4
 8008178:	6019      	str	r1, [r3, #0]
 800817a:	6816      	ldr	r6, [r2, #0]
 800817c:	2100      	movs	r1, #0
 800817e:	0030      	movs	r0, r6
 8008180:	6862      	ldr	r2, [r4, #4]
 8008182:	f000 f831 	bl	80081e8 <memchr>
 8008186:	2800      	cmp	r0, #0
 8008188:	d001      	beq.n	800818e <_printf_i+0x1ca>
 800818a:	1b80      	subs	r0, r0, r6
 800818c:	6060      	str	r0, [r4, #4]
 800818e:	6863      	ldr	r3, [r4, #4]
 8008190:	6123      	str	r3, [r4, #16]
 8008192:	2300      	movs	r3, #0
 8008194:	9a04      	ldr	r2, [sp, #16]
 8008196:	7013      	strb	r3, [r2, #0]
 8008198:	e7a8      	b.n	80080ec <_printf_i+0x128>
 800819a:	6923      	ldr	r3, [r4, #16]
 800819c:	0032      	movs	r2, r6
 800819e:	9906      	ldr	r1, [sp, #24]
 80081a0:	9805      	ldr	r0, [sp, #20]
 80081a2:	9d07      	ldr	r5, [sp, #28]
 80081a4:	47a8      	blx	r5
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	d0aa      	beq.n	8008100 <_printf_i+0x13c>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	079b      	lsls	r3, r3, #30
 80081ae:	d415      	bmi.n	80081dc <_printf_i+0x218>
 80081b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b2:	68e0      	ldr	r0, [r4, #12]
 80081b4:	4298      	cmp	r0, r3
 80081b6:	daa5      	bge.n	8008104 <_printf_i+0x140>
 80081b8:	0018      	movs	r0, r3
 80081ba:	e7a3      	b.n	8008104 <_printf_i+0x140>
 80081bc:	0022      	movs	r2, r4
 80081be:	2301      	movs	r3, #1
 80081c0:	9906      	ldr	r1, [sp, #24]
 80081c2:	9805      	ldr	r0, [sp, #20]
 80081c4:	9e07      	ldr	r6, [sp, #28]
 80081c6:	3219      	adds	r2, #25
 80081c8:	47b0      	blx	r6
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d098      	beq.n	8008100 <_printf_i+0x13c>
 80081ce:	3501      	adds	r5, #1
 80081d0:	68e3      	ldr	r3, [r4, #12]
 80081d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	42ab      	cmp	r3, r5
 80081d8:	dcf0      	bgt.n	80081bc <_printf_i+0x1f8>
 80081da:	e7e9      	b.n	80081b0 <_printf_i+0x1ec>
 80081dc:	2500      	movs	r5, #0
 80081de:	e7f7      	b.n	80081d0 <_printf_i+0x20c>
 80081e0:	0800861d 	.word	0x0800861d
 80081e4:	0800862e 	.word	0x0800862e

080081e8 <memchr>:
 80081e8:	b2c9      	uxtb	r1, r1
 80081ea:	1882      	adds	r2, r0, r2
 80081ec:	4290      	cmp	r0, r2
 80081ee:	d101      	bne.n	80081f4 <memchr+0xc>
 80081f0:	2000      	movs	r0, #0
 80081f2:	4770      	bx	lr
 80081f4:	7803      	ldrb	r3, [r0, #0]
 80081f6:	428b      	cmp	r3, r1
 80081f8:	d0fb      	beq.n	80081f2 <memchr+0xa>
 80081fa:	3001      	adds	r0, #1
 80081fc:	e7f6      	b.n	80081ec <memchr+0x4>

080081fe <memmove>:
 80081fe:	b510      	push	{r4, lr}
 8008200:	4288      	cmp	r0, r1
 8008202:	d902      	bls.n	800820a <memmove+0xc>
 8008204:	188b      	adds	r3, r1, r2
 8008206:	4298      	cmp	r0, r3
 8008208:	d303      	bcc.n	8008212 <memmove+0x14>
 800820a:	2300      	movs	r3, #0
 800820c:	e007      	b.n	800821e <memmove+0x20>
 800820e:	5c8b      	ldrb	r3, [r1, r2]
 8008210:	5483      	strb	r3, [r0, r2]
 8008212:	3a01      	subs	r2, #1
 8008214:	d2fb      	bcs.n	800820e <memmove+0x10>
 8008216:	bd10      	pop	{r4, pc}
 8008218:	5ccc      	ldrb	r4, [r1, r3]
 800821a:	54c4      	strb	r4, [r0, r3]
 800821c:	3301      	adds	r3, #1
 800821e:	429a      	cmp	r2, r3
 8008220:	d1fa      	bne.n	8008218 <memmove+0x1a>
 8008222:	e7f8      	b.n	8008216 <memmove+0x18>

08008224 <_free_r>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	0005      	movs	r5, r0
 8008228:	2900      	cmp	r1, #0
 800822a:	d010      	beq.n	800824e <_free_r+0x2a>
 800822c:	1f0c      	subs	r4, r1, #4
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	da00      	bge.n	8008236 <_free_r+0x12>
 8008234:	18e4      	adds	r4, r4, r3
 8008236:	0028      	movs	r0, r5
 8008238:	f000 f918 	bl	800846c <__malloc_lock>
 800823c:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <_free_r+0x90>)
 800823e:	6813      	ldr	r3, [r2, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d105      	bne.n	8008250 <_free_r+0x2c>
 8008244:	6063      	str	r3, [r4, #4]
 8008246:	6014      	str	r4, [r2, #0]
 8008248:	0028      	movs	r0, r5
 800824a:	f000 f917 	bl	800847c <__malloc_unlock>
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	42a3      	cmp	r3, r4
 8008252:	d908      	bls.n	8008266 <_free_r+0x42>
 8008254:	6821      	ldr	r1, [r4, #0]
 8008256:	1860      	adds	r0, r4, r1
 8008258:	4283      	cmp	r3, r0
 800825a:	d1f3      	bne.n	8008244 <_free_r+0x20>
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	1841      	adds	r1, r0, r1
 8008262:	6021      	str	r1, [r4, #0]
 8008264:	e7ee      	b.n	8008244 <_free_r+0x20>
 8008266:	001a      	movs	r2, r3
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <_free_r+0x4e>
 800826e:	42a3      	cmp	r3, r4
 8008270:	d9f9      	bls.n	8008266 <_free_r+0x42>
 8008272:	6811      	ldr	r1, [r2, #0]
 8008274:	1850      	adds	r0, r2, r1
 8008276:	42a0      	cmp	r0, r4
 8008278:	d10b      	bne.n	8008292 <_free_r+0x6e>
 800827a:	6820      	ldr	r0, [r4, #0]
 800827c:	1809      	adds	r1, r1, r0
 800827e:	1850      	adds	r0, r2, r1
 8008280:	6011      	str	r1, [r2, #0]
 8008282:	4283      	cmp	r3, r0
 8008284:	d1e0      	bne.n	8008248 <_free_r+0x24>
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	1841      	adds	r1, r0, r1
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	6053      	str	r3, [r2, #4]
 8008290:	e7da      	b.n	8008248 <_free_r+0x24>
 8008292:	42a0      	cmp	r0, r4
 8008294:	d902      	bls.n	800829c <_free_r+0x78>
 8008296:	230c      	movs	r3, #12
 8008298:	602b      	str	r3, [r5, #0]
 800829a:	e7d5      	b.n	8008248 <_free_r+0x24>
 800829c:	6821      	ldr	r1, [r4, #0]
 800829e:	1860      	adds	r0, r4, r1
 80082a0:	4283      	cmp	r3, r0
 80082a2:	d103      	bne.n	80082ac <_free_r+0x88>
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	1841      	adds	r1, r0, r1
 80082aa:	6021      	str	r1, [r4, #0]
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	6054      	str	r4, [r2, #4]
 80082b0:	e7ca      	b.n	8008248 <_free_r+0x24>
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	20000360 	.word	0x20000360

080082b8 <sbrk_aligned>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4e0f      	ldr	r6, [pc, #60]	; (80082f8 <sbrk_aligned+0x40>)
 80082bc:	000d      	movs	r5, r1
 80082be:	6831      	ldr	r1, [r6, #0]
 80082c0:	0004      	movs	r4, r0
 80082c2:	2900      	cmp	r1, #0
 80082c4:	d102      	bne.n	80082cc <sbrk_aligned+0x14>
 80082c6:	f000 f8bf 	bl	8008448 <_sbrk_r>
 80082ca:	6030      	str	r0, [r6, #0]
 80082cc:	0029      	movs	r1, r5
 80082ce:	0020      	movs	r0, r4
 80082d0:	f000 f8ba 	bl	8008448 <_sbrk_r>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d00a      	beq.n	80082ee <sbrk_aligned+0x36>
 80082d8:	2303      	movs	r3, #3
 80082da:	1cc5      	adds	r5, r0, #3
 80082dc:	439d      	bics	r5, r3
 80082de:	42a8      	cmp	r0, r5
 80082e0:	d007      	beq.n	80082f2 <sbrk_aligned+0x3a>
 80082e2:	1a29      	subs	r1, r5, r0
 80082e4:	0020      	movs	r0, r4
 80082e6:	f000 f8af 	bl	8008448 <_sbrk_r>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d101      	bne.n	80082f2 <sbrk_aligned+0x3a>
 80082ee:	2501      	movs	r5, #1
 80082f0:	426d      	negs	r5, r5
 80082f2:	0028      	movs	r0, r5
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	20000364 	.word	0x20000364

080082fc <_malloc_r>:
 80082fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082fe:	2203      	movs	r2, #3
 8008300:	1ccb      	adds	r3, r1, #3
 8008302:	4393      	bics	r3, r2
 8008304:	3308      	adds	r3, #8
 8008306:	0006      	movs	r6, r0
 8008308:	001f      	movs	r7, r3
 800830a:	2b0c      	cmp	r3, #12
 800830c:	d232      	bcs.n	8008374 <_malloc_r+0x78>
 800830e:	270c      	movs	r7, #12
 8008310:	42b9      	cmp	r1, r7
 8008312:	d831      	bhi.n	8008378 <_malloc_r+0x7c>
 8008314:	0030      	movs	r0, r6
 8008316:	f000 f8a9 	bl	800846c <__malloc_lock>
 800831a:	4d32      	ldr	r5, [pc, #200]	; (80083e4 <_malloc_r+0xe8>)
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	001c      	movs	r4, r3
 8008320:	2c00      	cmp	r4, #0
 8008322:	d12e      	bne.n	8008382 <_malloc_r+0x86>
 8008324:	0039      	movs	r1, r7
 8008326:	0030      	movs	r0, r6
 8008328:	f7ff ffc6 	bl	80082b8 <sbrk_aligned>
 800832c:	0004      	movs	r4, r0
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d11e      	bne.n	8008370 <_malloc_r+0x74>
 8008332:	682c      	ldr	r4, [r5, #0]
 8008334:	0025      	movs	r5, r4
 8008336:	2d00      	cmp	r5, #0
 8008338:	d14a      	bne.n	80083d0 <_malloc_r+0xd4>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	0029      	movs	r1, r5
 800833e:	18e3      	adds	r3, r4, r3
 8008340:	0030      	movs	r0, r6
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	f000 f880 	bl	8008448 <_sbrk_r>
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	4283      	cmp	r3, r0
 800834c:	d143      	bne.n	80083d6 <_malloc_r+0xda>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	3703      	adds	r7, #3
 8008352:	1aff      	subs	r7, r7, r3
 8008354:	2303      	movs	r3, #3
 8008356:	439f      	bics	r7, r3
 8008358:	3708      	adds	r7, #8
 800835a:	2f0c      	cmp	r7, #12
 800835c:	d200      	bcs.n	8008360 <_malloc_r+0x64>
 800835e:	270c      	movs	r7, #12
 8008360:	0039      	movs	r1, r7
 8008362:	0030      	movs	r0, r6
 8008364:	f7ff ffa8 	bl	80082b8 <sbrk_aligned>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d034      	beq.n	80083d6 <_malloc_r+0xda>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	19df      	adds	r7, r3, r7
 8008370:	6027      	str	r7, [r4, #0]
 8008372:	e013      	b.n	800839c <_malloc_r+0xa0>
 8008374:	2b00      	cmp	r3, #0
 8008376:	dacb      	bge.n	8008310 <_malloc_r+0x14>
 8008378:	230c      	movs	r3, #12
 800837a:	2500      	movs	r5, #0
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	0028      	movs	r0, r5
 8008380:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008382:	6822      	ldr	r2, [r4, #0]
 8008384:	1bd1      	subs	r1, r2, r7
 8008386:	d420      	bmi.n	80083ca <_malloc_r+0xce>
 8008388:	290b      	cmp	r1, #11
 800838a:	d917      	bls.n	80083bc <_malloc_r+0xc0>
 800838c:	19e2      	adds	r2, r4, r7
 800838e:	6027      	str	r7, [r4, #0]
 8008390:	42a3      	cmp	r3, r4
 8008392:	d111      	bne.n	80083b8 <_malloc_r+0xbc>
 8008394:	602a      	str	r2, [r5, #0]
 8008396:	6863      	ldr	r3, [r4, #4]
 8008398:	6011      	str	r1, [r2, #0]
 800839a:	6053      	str	r3, [r2, #4]
 800839c:	0030      	movs	r0, r6
 800839e:	0025      	movs	r5, r4
 80083a0:	f000 f86c 	bl	800847c <__malloc_unlock>
 80083a4:	2207      	movs	r2, #7
 80083a6:	350b      	adds	r5, #11
 80083a8:	1d23      	adds	r3, r4, #4
 80083aa:	4395      	bics	r5, r2
 80083ac:	1aea      	subs	r2, r5, r3
 80083ae:	429d      	cmp	r5, r3
 80083b0:	d0e5      	beq.n	800837e <_malloc_r+0x82>
 80083b2:	1b5b      	subs	r3, r3, r5
 80083b4:	50a3      	str	r3, [r4, r2]
 80083b6:	e7e2      	b.n	800837e <_malloc_r+0x82>
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	e7ec      	b.n	8008396 <_malloc_r+0x9a>
 80083bc:	6862      	ldr	r2, [r4, #4]
 80083be:	42a3      	cmp	r3, r4
 80083c0:	d101      	bne.n	80083c6 <_malloc_r+0xca>
 80083c2:	602a      	str	r2, [r5, #0]
 80083c4:	e7ea      	b.n	800839c <_malloc_r+0xa0>
 80083c6:	605a      	str	r2, [r3, #4]
 80083c8:	e7e8      	b.n	800839c <_malloc_r+0xa0>
 80083ca:	0023      	movs	r3, r4
 80083cc:	6864      	ldr	r4, [r4, #4]
 80083ce:	e7a7      	b.n	8008320 <_malloc_r+0x24>
 80083d0:	002c      	movs	r4, r5
 80083d2:	686d      	ldr	r5, [r5, #4]
 80083d4:	e7af      	b.n	8008336 <_malloc_r+0x3a>
 80083d6:	230c      	movs	r3, #12
 80083d8:	0030      	movs	r0, r6
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	f000 f84e 	bl	800847c <__malloc_unlock>
 80083e0:	e7cd      	b.n	800837e <_malloc_r+0x82>
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	20000360 	.word	0x20000360

080083e8 <_realloc_r>:
 80083e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ea:	0007      	movs	r7, r0
 80083ec:	000e      	movs	r6, r1
 80083ee:	0014      	movs	r4, r2
 80083f0:	2900      	cmp	r1, #0
 80083f2:	d105      	bne.n	8008400 <_realloc_r+0x18>
 80083f4:	0011      	movs	r1, r2
 80083f6:	f7ff ff81 	bl	80082fc <_malloc_r>
 80083fa:	0005      	movs	r5, r0
 80083fc:	0028      	movs	r0, r5
 80083fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008400:	2a00      	cmp	r2, #0
 8008402:	d103      	bne.n	800840c <_realloc_r+0x24>
 8008404:	f7ff ff0e 	bl	8008224 <_free_r>
 8008408:	0025      	movs	r5, r4
 800840a:	e7f7      	b.n	80083fc <_realloc_r+0x14>
 800840c:	f000 f83e 	bl	800848c <_malloc_usable_size_r>
 8008410:	9001      	str	r0, [sp, #4]
 8008412:	4284      	cmp	r4, r0
 8008414:	d803      	bhi.n	800841e <_realloc_r+0x36>
 8008416:	0035      	movs	r5, r6
 8008418:	0843      	lsrs	r3, r0, #1
 800841a:	42a3      	cmp	r3, r4
 800841c:	d3ee      	bcc.n	80083fc <_realloc_r+0x14>
 800841e:	0021      	movs	r1, r4
 8008420:	0038      	movs	r0, r7
 8008422:	f7ff ff6b 	bl	80082fc <_malloc_r>
 8008426:	1e05      	subs	r5, r0, #0
 8008428:	d0e8      	beq.n	80083fc <_realloc_r+0x14>
 800842a:	9b01      	ldr	r3, [sp, #4]
 800842c:	0022      	movs	r2, r4
 800842e:	429c      	cmp	r4, r3
 8008430:	d900      	bls.n	8008434 <_realloc_r+0x4c>
 8008432:	001a      	movs	r2, r3
 8008434:	0031      	movs	r1, r6
 8008436:	0028      	movs	r0, r5
 8008438:	f7ff fbc0 	bl	8007bbc <memcpy>
 800843c:	0031      	movs	r1, r6
 800843e:	0038      	movs	r0, r7
 8008440:	f7ff fef0 	bl	8008224 <_free_r>
 8008444:	e7da      	b.n	80083fc <_realloc_r+0x14>
	...

08008448 <_sbrk_r>:
 8008448:	2300      	movs	r3, #0
 800844a:	b570      	push	{r4, r5, r6, lr}
 800844c:	4d06      	ldr	r5, [pc, #24]	; (8008468 <_sbrk_r+0x20>)
 800844e:	0004      	movs	r4, r0
 8008450:	0008      	movs	r0, r1
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	f7fb fbae 	bl	8003bb4 <_sbrk>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d103      	bne.n	8008464 <_sbrk_r+0x1c>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d000      	beq.n	8008464 <_sbrk_r+0x1c>
 8008462:	6023      	str	r3, [r4, #0]
 8008464:	bd70      	pop	{r4, r5, r6, pc}
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	20000368 	.word	0x20000368

0800846c <__malloc_lock>:
 800846c:	b510      	push	{r4, lr}
 800846e:	4802      	ldr	r0, [pc, #8]	; (8008478 <__malloc_lock+0xc>)
 8008470:	f000 f814 	bl	800849c <__retarget_lock_acquire_recursive>
 8008474:	bd10      	pop	{r4, pc}
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	2000036c 	.word	0x2000036c

0800847c <__malloc_unlock>:
 800847c:	b510      	push	{r4, lr}
 800847e:	4802      	ldr	r0, [pc, #8]	; (8008488 <__malloc_unlock+0xc>)
 8008480:	f000 f80d 	bl	800849e <__retarget_lock_release_recursive>
 8008484:	bd10      	pop	{r4, pc}
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	2000036c 	.word	0x2000036c

0800848c <_malloc_usable_size_r>:
 800848c:	1f0b      	subs	r3, r1, #4
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	1f18      	subs	r0, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	da01      	bge.n	800849a <_malloc_usable_size_r+0xe>
 8008496:	580b      	ldr	r3, [r1, r0]
 8008498:	18c0      	adds	r0, r0, r3
 800849a:	4770      	bx	lr

0800849c <__retarget_lock_acquire_recursive>:
 800849c:	4770      	bx	lr

0800849e <__retarget_lock_release_recursive>:
 800849e:	4770      	bx	lr

080084a0 <_init>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

080084ac <_fini>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	46c0      	nop			; (mov r8, r8)
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr
