
PMIK_PROJEKT_CLEAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b708  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800b7c8  0800b7c8  0001b7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdcc  0800bdcc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdcc  0800bdcc  0001bdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdd4  0800bdd4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdd4  0800bdd4  0001bdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdd8  0800bdd8  0001bdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001e0  0800bfbc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800bfbc  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b3d  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4a  00000000  00000000  00033d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00036b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00037d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d10  00000000  00000000  00038d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a83  00000000  00000000  00050a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008989c  00000000  00000000  0006649b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efd37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c4  00000000  00000000  000efd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b7b0 	.word	0x0800b7b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800b7b0 	.word	0x0800b7b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff49 	bl	80022d4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe99 	bl	8002184 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff3b 	bl	80022d4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ff31 	bl	80022d4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fec1 	bl	8002208 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 feb7 	bl	8002208 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc8d 	bl	8000dd0 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc19 	bl	8000cf8 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc7f 	bl	8000dd0 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc75 	bl	8000dd0 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc25 	bl	8000d44 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc1b 	bl	8000d44 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f852 	bl	80005f4 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fd01 	bl	8002fd4 <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 f94a 	bl	8002874 <__aeabi_dsub>
 80005e0:	f002 fcf8 	bl	8002fd4 <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__udivmoddi4>:
 80005f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f6:	4657      	mov	r7, sl
 80005f8:	464e      	mov	r6, r9
 80005fa:	4645      	mov	r5, r8
 80005fc:	46de      	mov	lr, fp
 80005fe:	b5e0      	push	{r5, r6, r7, lr}
 8000600:	0004      	movs	r4, r0
 8000602:	000d      	movs	r5, r1
 8000604:	4692      	mov	sl, r2
 8000606:	4699      	mov	r9, r3
 8000608:	b083      	sub	sp, #12
 800060a:	428b      	cmp	r3, r1
 800060c:	d830      	bhi.n	8000670 <__udivmoddi4+0x7c>
 800060e:	d02d      	beq.n	800066c <__udivmoddi4+0x78>
 8000610:	4649      	mov	r1, r9
 8000612:	4650      	mov	r0, sl
 8000614:	f002 fdd0 	bl	80031b8 <__clzdi2>
 8000618:	0029      	movs	r1, r5
 800061a:	0006      	movs	r6, r0
 800061c:	0020      	movs	r0, r4
 800061e:	f002 fdcb 	bl	80031b8 <__clzdi2>
 8000622:	1a33      	subs	r3, r6, r0
 8000624:	4698      	mov	r8, r3
 8000626:	3b20      	subs	r3, #32
 8000628:	469b      	mov	fp, r3
 800062a:	d433      	bmi.n	8000694 <__udivmoddi4+0xa0>
 800062c:	465a      	mov	r2, fp
 800062e:	4653      	mov	r3, sl
 8000630:	4093      	lsls	r3, r2
 8000632:	4642      	mov	r2, r8
 8000634:	001f      	movs	r7, r3
 8000636:	4653      	mov	r3, sl
 8000638:	4093      	lsls	r3, r2
 800063a:	001e      	movs	r6, r3
 800063c:	42af      	cmp	r7, r5
 800063e:	d83a      	bhi.n	80006b6 <__udivmoddi4+0xc2>
 8000640:	42af      	cmp	r7, r5
 8000642:	d100      	bne.n	8000646 <__udivmoddi4+0x52>
 8000644:	e078      	b.n	8000738 <__udivmoddi4+0x144>
 8000646:	465b      	mov	r3, fp
 8000648:	1ba4      	subs	r4, r4, r6
 800064a:	41bd      	sbcs	r5, r7
 800064c:	2b00      	cmp	r3, #0
 800064e:	da00      	bge.n	8000652 <__udivmoddi4+0x5e>
 8000650:	e075      	b.n	800073e <__udivmoddi4+0x14a>
 8000652:	2200      	movs	r2, #0
 8000654:	2300      	movs	r3, #0
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	2301      	movs	r3, #1
 800065c:	465a      	mov	r2, fp
 800065e:	4093      	lsls	r3, r2
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2301      	movs	r3, #1
 8000664:	4642      	mov	r2, r8
 8000666:	4093      	lsls	r3, r2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	e028      	b.n	80006be <__udivmoddi4+0xca>
 800066c:	4282      	cmp	r2, r0
 800066e:	d9cf      	bls.n	8000610 <__udivmoddi4+0x1c>
 8000670:	2200      	movs	r2, #0
 8000672:	2300      	movs	r3, #0
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <__udivmoddi4+0x8e>
 800067e:	601c      	str	r4, [r3, #0]
 8000680:	605d      	str	r5, [r3, #4]
 8000682:	9800      	ldr	r0, [sp, #0]
 8000684:	9901      	ldr	r1, [sp, #4]
 8000686:	b003      	add	sp, #12
 8000688:	bcf0      	pop	{r4, r5, r6, r7}
 800068a:	46bb      	mov	fp, r7
 800068c:	46b2      	mov	sl, r6
 800068e:	46a9      	mov	r9, r5
 8000690:	46a0      	mov	r8, r4
 8000692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000694:	4642      	mov	r2, r8
 8000696:	2320      	movs	r3, #32
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	4652      	mov	r2, sl
 800069c:	40da      	lsrs	r2, r3
 800069e:	4641      	mov	r1, r8
 80006a0:	0013      	movs	r3, r2
 80006a2:	464a      	mov	r2, r9
 80006a4:	408a      	lsls	r2, r1
 80006a6:	0017      	movs	r7, r2
 80006a8:	4642      	mov	r2, r8
 80006aa:	431f      	orrs	r7, r3
 80006ac:	4653      	mov	r3, sl
 80006ae:	4093      	lsls	r3, r2
 80006b0:	001e      	movs	r6, r3
 80006b2:	42af      	cmp	r7, r5
 80006b4:	d9c4      	bls.n	8000640 <__udivmoddi4+0x4c>
 80006b6:	2200      	movs	r2, #0
 80006b8:	2300      	movs	r3, #0
 80006ba:	9200      	str	r2, [sp, #0]
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	4643      	mov	r3, r8
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d0d9      	beq.n	8000678 <__udivmoddi4+0x84>
 80006c4:	07fb      	lsls	r3, r7, #31
 80006c6:	0872      	lsrs	r2, r6, #1
 80006c8:	431a      	orrs	r2, r3
 80006ca:	4646      	mov	r6, r8
 80006cc:	087b      	lsrs	r3, r7, #1
 80006ce:	e00e      	b.n	80006ee <__udivmoddi4+0xfa>
 80006d0:	42ab      	cmp	r3, r5
 80006d2:	d101      	bne.n	80006d8 <__udivmoddi4+0xe4>
 80006d4:	42a2      	cmp	r2, r4
 80006d6:	d80c      	bhi.n	80006f2 <__udivmoddi4+0xfe>
 80006d8:	1aa4      	subs	r4, r4, r2
 80006da:	419d      	sbcs	r5, r3
 80006dc:	2001      	movs	r0, #1
 80006de:	1924      	adds	r4, r4, r4
 80006e0:	416d      	adcs	r5, r5
 80006e2:	2100      	movs	r1, #0
 80006e4:	3e01      	subs	r6, #1
 80006e6:	1824      	adds	r4, r4, r0
 80006e8:	414d      	adcs	r5, r1
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d006      	beq.n	80006fc <__udivmoddi4+0x108>
 80006ee:	42ab      	cmp	r3, r5
 80006f0:	d9ee      	bls.n	80006d0 <__udivmoddi4+0xdc>
 80006f2:	3e01      	subs	r6, #1
 80006f4:	1924      	adds	r4, r4, r4
 80006f6:	416d      	adcs	r5, r5
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d1f8      	bne.n	80006ee <__udivmoddi4+0xfa>
 80006fc:	9800      	ldr	r0, [sp, #0]
 80006fe:	9901      	ldr	r1, [sp, #4]
 8000700:	465b      	mov	r3, fp
 8000702:	1900      	adds	r0, r0, r4
 8000704:	4169      	adcs	r1, r5
 8000706:	2b00      	cmp	r3, #0
 8000708:	db24      	blt.n	8000754 <__udivmoddi4+0x160>
 800070a:	002b      	movs	r3, r5
 800070c:	465a      	mov	r2, fp
 800070e:	4644      	mov	r4, r8
 8000710:	40d3      	lsrs	r3, r2
 8000712:	002a      	movs	r2, r5
 8000714:	40e2      	lsrs	r2, r4
 8000716:	001c      	movs	r4, r3
 8000718:	465b      	mov	r3, fp
 800071a:	0015      	movs	r5, r2
 800071c:	2b00      	cmp	r3, #0
 800071e:	db2a      	blt.n	8000776 <__udivmoddi4+0x182>
 8000720:	0026      	movs	r6, r4
 8000722:	409e      	lsls	r6, r3
 8000724:	0033      	movs	r3, r6
 8000726:	0026      	movs	r6, r4
 8000728:	4647      	mov	r7, r8
 800072a:	40be      	lsls	r6, r7
 800072c:	0032      	movs	r2, r6
 800072e:	1a80      	subs	r0, r0, r2
 8000730:	4199      	sbcs	r1, r3
 8000732:	9000      	str	r0, [sp, #0]
 8000734:	9101      	str	r1, [sp, #4]
 8000736:	e79f      	b.n	8000678 <__udivmoddi4+0x84>
 8000738:	42a3      	cmp	r3, r4
 800073a:	d8bc      	bhi.n	80006b6 <__udivmoddi4+0xc2>
 800073c:	e783      	b.n	8000646 <__udivmoddi4+0x52>
 800073e:	4642      	mov	r2, r8
 8000740:	2320      	movs	r3, #32
 8000742:	2100      	movs	r1, #0
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	2200      	movs	r2, #0
 8000748:	9100      	str	r1, [sp, #0]
 800074a:	9201      	str	r2, [sp, #4]
 800074c:	2201      	movs	r2, #1
 800074e:	40da      	lsrs	r2, r3
 8000750:	9201      	str	r2, [sp, #4]
 8000752:	e786      	b.n	8000662 <__udivmoddi4+0x6e>
 8000754:	4642      	mov	r2, r8
 8000756:	2320      	movs	r3, #32
 8000758:	1a9b      	subs	r3, r3, r2
 800075a:	002a      	movs	r2, r5
 800075c:	4646      	mov	r6, r8
 800075e:	409a      	lsls	r2, r3
 8000760:	0023      	movs	r3, r4
 8000762:	40f3      	lsrs	r3, r6
 8000764:	4644      	mov	r4, r8
 8000766:	4313      	orrs	r3, r2
 8000768:	002a      	movs	r2, r5
 800076a:	40e2      	lsrs	r2, r4
 800076c:	001c      	movs	r4, r3
 800076e:	465b      	mov	r3, fp
 8000770:	0015      	movs	r5, r2
 8000772:	2b00      	cmp	r3, #0
 8000774:	dad4      	bge.n	8000720 <__udivmoddi4+0x12c>
 8000776:	4642      	mov	r2, r8
 8000778:	002f      	movs	r7, r5
 800077a:	2320      	movs	r3, #32
 800077c:	0026      	movs	r6, r4
 800077e:	4097      	lsls	r7, r2
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	40de      	lsrs	r6, r3
 8000784:	003b      	movs	r3, r7
 8000786:	4333      	orrs	r3, r6
 8000788:	e7cd      	b.n	8000726 <__udivmoddi4+0x132>
 800078a:	46c0      	nop			; (mov r8, r8)

0800078c <__aeabi_fadd>:
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	46c6      	mov	lr, r8
 8000790:	0243      	lsls	r3, r0, #9
 8000792:	0a5b      	lsrs	r3, r3, #9
 8000794:	024e      	lsls	r6, r1, #9
 8000796:	0045      	lsls	r5, r0, #1
 8000798:	004f      	lsls	r7, r1, #1
 800079a:	00da      	lsls	r2, r3, #3
 800079c:	0fc4      	lsrs	r4, r0, #31
 800079e:	469c      	mov	ip, r3
 80007a0:	0a70      	lsrs	r0, r6, #9
 80007a2:	4690      	mov	r8, r2
 80007a4:	b500      	push	{lr}
 80007a6:	0e2d      	lsrs	r5, r5, #24
 80007a8:	0e3f      	lsrs	r7, r7, #24
 80007aa:	0fc9      	lsrs	r1, r1, #31
 80007ac:	09b6      	lsrs	r6, r6, #6
 80007ae:	428c      	cmp	r4, r1
 80007b0:	d04b      	beq.n	800084a <__aeabi_fadd+0xbe>
 80007b2:	1bea      	subs	r2, r5, r7
 80007b4:	2a00      	cmp	r2, #0
 80007b6:	dd36      	ble.n	8000826 <__aeabi_fadd+0x9a>
 80007b8:	2f00      	cmp	r7, #0
 80007ba:	d061      	beq.n	8000880 <__aeabi_fadd+0xf4>
 80007bc:	2dff      	cmp	r5, #255	; 0xff
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0x36>
 80007c0:	e0ad      	b.n	800091e <__aeabi_fadd+0x192>
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	04db      	lsls	r3, r3, #19
 80007c6:	431e      	orrs	r6, r3
 80007c8:	2a1b      	cmp	r2, #27
 80007ca:	dc00      	bgt.n	80007ce <__aeabi_fadd+0x42>
 80007cc:	e0d3      	b.n	8000976 <__aeabi_fadd+0x1ea>
 80007ce:	2001      	movs	r0, #1
 80007d0:	4643      	mov	r3, r8
 80007d2:	1a18      	subs	r0, r3, r0
 80007d4:	0143      	lsls	r3, r0, #5
 80007d6:	d400      	bmi.n	80007da <__aeabi_fadd+0x4e>
 80007d8:	e08c      	b.n	80008f4 <__aeabi_fadd+0x168>
 80007da:	0180      	lsls	r0, r0, #6
 80007dc:	0987      	lsrs	r7, r0, #6
 80007de:	0038      	movs	r0, r7
 80007e0:	f002 fccc 	bl	800317c <__clzsi2>
 80007e4:	3805      	subs	r0, #5
 80007e6:	4087      	lsls	r7, r0
 80007e8:	4285      	cmp	r5, r0
 80007ea:	dc00      	bgt.n	80007ee <__aeabi_fadd+0x62>
 80007ec:	e0b6      	b.n	800095c <__aeabi_fadd+0x1d0>
 80007ee:	1a2d      	subs	r5, r5, r0
 80007f0:	48b3      	ldr	r0, [pc, #716]	; (8000ac0 <__aeabi_fadd+0x334>)
 80007f2:	4038      	ands	r0, r7
 80007f4:	0743      	lsls	r3, r0, #29
 80007f6:	d004      	beq.n	8000802 <__aeabi_fadd+0x76>
 80007f8:	230f      	movs	r3, #15
 80007fa:	4003      	ands	r3, r0
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d000      	beq.n	8000802 <__aeabi_fadd+0x76>
 8000800:	3004      	adds	r0, #4
 8000802:	0143      	lsls	r3, r0, #5
 8000804:	d400      	bmi.n	8000808 <__aeabi_fadd+0x7c>
 8000806:	e078      	b.n	80008fa <__aeabi_fadd+0x16e>
 8000808:	1c6a      	adds	r2, r5, #1
 800080a:	2dfe      	cmp	r5, #254	; 0xfe
 800080c:	d065      	beq.n	80008da <__aeabi_fadd+0x14e>
 800080e:	0180      	lsls	r0, r0, #6
 8000810:	0a43      	lsrs	r3, r0, #9
 8000812:	469c      	mov	ip, r3
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	4663      	mov	r3, ip
 8000818:	05d0      	lsls	r0, r2, #23
 800081a:	4318      	orrs	r0, r3
 800081c:	07e4      	lsls	r4, r4, #31
 800081e:	4320      	orrs	r0, r4
 8000820:	bc80      	pop	{r7}
 8000822:	46b8      	mov	r8, r7
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000826:	2a00      	cmp	r2, #0
 8000828:	d035      	beq.n	8000896 <__aeabi_fadd+0x10a>
 800082a:	1b7a      	subs	r2, r7, r5
 800082c:	2d00      	cmp	r5, #0
 800082e:	d000      	beq.n	8000832 <__aeabi_fadd+0xa6>
 8000830:	e0af      	b.n	8000992 <__aeabi_fadd+0x206>
 8000832:	4643      	mov	r3, r8
 8000834:	2b00      	cmp	r3, #0
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0xae>
 8000838:	e0a7      	b.n	800098a <__aeabi_fadd+0x1fe>
 800083a:	1e53      	subs	r3, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0xb6>
 8000840:	e12f      	b.n	8000aa2 <__aeabi_fadd+0x316>
 8000842:	2aff      	cmp	r2, #255	; 0xff
 8000844:	d069      	beq.n	800091a <__aeabi_fadd+0x18e>
 8000846:	001a      	movs	r2, r3
 8000848:	e0aa      	b.n	80009a0 <__aeabi_fadd+0x214>
 800084a:	1be9      	subs	r1, r5, r7
 800084c:	2900      	cmp	r1, #0
 800084e:	dd70      	ble.n	8000932 <__aeabi_fadd+0x1a6>
 8000850:	2f00      	cmp	r7, #0
 8000852:	d037      	beq.n	80008c4 <__aeabi_fadd+0x138>
 8000854:	2dff      	cmp	r5, #255	; 0xff
 8000856:	d062      	beq.n	800091e <__aeabi_fadd+0x192>
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	04db      	lsls	r3, r3, #19
 800085c:	431e      	orrs	r6, r3
 800085e:	291b      	cmp	r1, #27
 8000860:	dc00      	bgt.n	8000864 <__aeabi_fadd+0xd8>
 8000862:	e0b0      	b.n	80009c6 <__aeabi_fadd+0x23a>
 8000864:	2001      	movs	r0, #1
 8000866:	4440      	add	r0, r8
 8000868:	0143      	lsls	r3, r0, #5
 800086a:	d543      	bpl.n	80008f4 <__aeabi_fadd+0x168>
 800086c:	3501      	adds	r5, #1
 800086e:	2dff      	cmp	r5, #255	; 0xff
 8000870:	d033      	beq.n	80008da <__aeabi_fadd+0x14e>
 8000872:	2301      	movs	r3, #1
 8000874:	4a93      	ldr	r2, [pc, #588]	; (8000ac4 <__aeabi_fadd+0x338>)
 8000876:	4003      	ands	r3, r0
 8000878:	0840      	lsrs	r0, r0, #1
 800087a:	4010      	ands	r0, r2
 800087c:	4318      	orrs	r0, r3
 800087e:	e7b9      	b.n	80007f4 <__aeabi_fadd+0x68>
 8000880:	2e00      	cmp	r6, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_fadd+0xfa>
 8000884:	e083      	b.n	800098e <__aeabi_fadd+0x202>
 8000886:	1e51      	subs	r1, r2, #1
 8000888:	2a01      	cmp	r2, #1
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x102>
 800088c:	e0d8      	b.n	8000a40 <__aeabi_fadd+0x2b4>
 800088e:	2aff      	cmp	r2, #255	; 0xff
 8000890:	d045      	beq.n	800091e <__aeabi_fadd+0x192>
 8000892:	000a      	movs	r2, r1
 8000894:	e798      	b.n	80007c8 <__aeabi_fadd+0x3c>
 8000896:	27fe      	movs	r7, #254	; 0xfe
 8000898:	1c6a      	adds	r2, r5, #1
 800089a:	4217      	tst	r7, r2
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x114>
 800089e:	e086      	b.n	80009ae <__aeabi_fadd+0x222>
 80008a0:	2d00      	cmp	r5, #0
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fadd+0x11a>
 80008a4:	e0b7      	b.n	8000a16 <__aeabi_fadd+0x28a>
 80008a6:	4643      	mov	r3, r8
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d100      	bne.n	80008ae <__aeabi_fadd+0x122>
 80008ac:	e0f3      	b.n	8000a96 <__aeabi_fadd+0x30a>
 80008ae:	2200      	movs	r2, #0
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0b0      	beq.n	8000816 <__aeabi_fadd+0x8a>
 80008b4:	1b98      	subs	r0, r3, r6
 80008b6:	0143      	lsls	r3, r0, #5
 80008b8:	d400      	bmi.n	80008bc <__aeabi_fadd+0x130>
 80008ba:	e0fa      	b.n	8000ab2 <__aeabi_fadd+0x326>
 80008bc:	4643      	mov	r3, r8
 80008be:	000c      	movs	r4, r1
 80008c0:	1af0      	subs	r0, r6, r3
 80008c2:	e797      	b.n	80007f4 <__aeabi_fadd+0x68>
 80008c4:	2e00      	cmp	r6, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fadd+0x13e>
 80008c8:	e0c8      	b.n	8000a5c <__aeabi_fadd+0x2d0>
 80008ca:	1e4a      	subs	r2, r1, #1
 80008cc:	2901      	cmp	r1, #1
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fadd+0x146>
 80008d0:	e0ae      	b.n	8000a30 <__aeabi_fadd+0x2a4>
 80008d2:	29ff      	cmp	r1, #255	; 0xff
 80008d4:	d023      	beq.n	800091e <__aeabi_fadd+0x192>
 80008d6:	0011      	movs	r1, r2
 80008d8:	e7c1      	b.n	800085e <__aeabi_fadd+0xd2>
 80008da:	2300      	movs	r3, #0
 80008dc:	22ff      	movs	r2, #255	; 0xff
 80008de:	469c      	mov	ip, r3
 80008e0:	e799      	b.n	8000816 <__aeabi_fadd+0x8a>
 80008e2:	21fe      	movs	r1, #254	; 0xfe
 80008e4:	1c6a      	adds	r2, r5, #1
 80008e6:	4211      	tst	r1, r2
 80008e8:	d077      	beq.n	80009da <__aeabi_fadd+0x24e>
 80008ea:	2aff      	cmp	r2, #255	; 0xff
 80008ec:	d0f5      	beq.n	80008da <__aeabi_fadd+0x14e>
 80008ee:	0015      	movs	r5, r2
 80008f0:	4446      	add	r6, r8
 80008f2:	0870      	lsrs	r0, r6, #1
 80008f4:	0743      	lsls	r3, r0, #29
 80008f6:	d000      	beq.n	80008fa <__aeabi_fadd+0x16e>
 80008f8:	e77e      	b.n	80007f8 <__aeabi_fadd+0x6c>
 80008fa:	08c3      	lsrs	r3, r0, #3
 80008fc:	2dff      	cmp	r5, #255	; 0xff
 80008fe:	d00e      	beq.n	800091e <__aeabi_fadd+0x192>
 8000900:	025b      	lsls	r3, r3, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	469c      	mov	ip, r3
 8000906:	b2ea      	uxtb	r2, r5
 8000908:	e785      	b.n	8000816 <__aeabi_fadd+0x8a>
 800090a:	2e00      	cmp	r6, #0
 800090c:	d007      	beq.n	800091e <__aeabi_fadd+0x192>
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	03d2      	lsls	r2, r2, #15
 8000912:	4213      	tst	r3, r2
 8000914:	d003      	beq.n	800091e <__aeabi_fadd+0x192>
 8000916:	4210      	tst	r0, r2
 8000918:	d101      	bne.n	800091e <__aeabi_fadd+0x192>
 800091a:	000c      	movs	r4, r1
 800091c:	0003      	movs	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0db      	beq.n	80008da <__aeabi_fadd+0x14e>
 8000922:	2080      	movs	r0, #128	; 0x80
 8000924:	03c0      	lsls	r0, r0, #15
 8000926:	4318      	orrs	r0, r3
 8000928:	0240      	lsls	r0, r0, #9
 800092a:	0a43      	lsrs	r3, r0, #9
 800092c:	469c      	mov	ip, r3
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	e771      	b.n	8000816 <__aeabi_fadd+0x8a>
 8000932:	2900      	cmp	r1, #0
 8000934:	d0d5      	beq.n	80008e2 <__aeabi_fadd+0x156>
 8000936:	1b7a      	subs	r2, r7, r5
 8000938:	2d00      	cmp	r5, #0
 800093a:	d160      	bne.n	80009fe <__aeabi_fadd+0x272>
 800093c:	4643      	mov	r3, r8
 800093e:	2b00      	cmp	r3, #0
 8000940:	d024      	beq.n	800098c <__aeabi_fadd+0x200>
 8000942:	1e53      	subs	r3, r2, #1
 8000944:	2a01      	cmp	r2, #1
 8000946:	d073      	beq.n	8000a30 <__aeabi_fadd+0x2a4>
 8000948:	2aff      	cmp	r2, #255	; 0xff
 800094a:	d0e7      	beq.n	800091c <__aeabi_fadd+0x190>
 800094c:	001a      	movs	r2, r3
 800094e:	2a1b      	cmp	r2, #27
 8000950:	dc00      	bgt.n	8000954 <__aeabi_fadd+0x1c8>
 8000952:	e085      	b.n	8000a60 <__aeabi_fadd+0x2d4>
 8000954:	2001      	movs	r0, #1
 8000956:	003d      	movs	r5, r7
 8000958:	1980      	adds	r0, r0, r6
 800095a:	e785      	b.n	8000868 <__aeabi_fadd+0xdc>
 800095c:	2320      	movs	r3, #32
 800095e:	003a      	movs	r2, r7
 8000960:	1b45      	subs	r5, r0, r5
 8000962:	0038      	movs	r0, r7
 8000964:	3501      	adds	r5, #1
 8000966:	40ea      	lsrs	r2, r5
 8000968:	1b5d      	subs	r5, r3, r5
 800096a:	40a8      	lsls	r0, r5
 800096c:	1e43      	subs	r3, r0, #1
 800096e:	4198      	sbcs	r0, r3
 8000970:	2500      	movs	r5, #0
 8000972:	4310      	orrs	r0, r2
 8000974:	e73e      	b.n	80007f4 <__aeabi_fadd+0x68>
 8000976:	2320      	movs	r3, #32
 8000978:	0030      	movs	r0, r6
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	0031      	movs	r1, r6
 800097e:	4098      	lsls	r0, r3
 8000980:	40d1      	lsrs	r1, r2
 8000982:	1e43      	subs	r3, r0, #1
 8000984:	4198      	sbcs	r0, r3
 8000986:	4308      	orrs	r0, r1
 8000988:	e722      	b.n	80007d0 <__aeabi_fadd+0x44>
 800098a:	000c      	movs	r4, r1
 800098c:	0003      	movs	r3, r0
 800098e:	0015      	movs	r5, r2
 8000990:	e7b4      	b.n	80008fc <__aeabi_fadd+0x170>
 8000992:	2fff      	cmp	r7, #255	; 0xff
 8000994:	d0c1      	beq.n	800091a <__aeabi_fadd+0x18e>
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	4640      	mov	r0, r8
 800099a:	04db      	lsls	r3, r3, #19
 800099c:	4318      	orrs	r0, r3
 800099e:	4680      	mov	r8, r0
 80009a0:	2a1b      	cmp	r2, #27
 80009a2:	dd51      	ble.n	8000a48 <__aeabi_fadd+0x2bc>
 80009a4:	2001      	movs	r0, #1
 80009a6:	000c      	movs	r4, r1
 80009a8:	003d      	movs	r5, r7
 80009aa:	1a30      	subs	r0, r6, r0
 80009ac:	e712      	b.n	80007d4 <__aeabi_fadd+0x48>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1b9f      	subs	r7, r3, r6
 80009b2:	017b      	lsls	r3, r7, #5
 80009b4:	d42b      	bmi.n	8000a0e <__aeabi_fadd+0x282>
 80009b6:	2f00      	cmp	r7, #0
 80009b8:	d000      	beq.n	80009bc <__aeabi_fadd+0x230>
 80009ba:	e710      	b.n	80007de <__aeabi_fadd+0x52>
 80009bc:	2300      	movs	r3, #0
 80009be:	2400      	movs	r4, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	469c      	mov	ip, r3
 80009c4:	e727      	b.n	8000816 <__aeabi_fadd+0x8a>
 80009c6:	2320      	movs	r3, #32
 80009c8:	0032      	movs	r2, r6
 80009ca:	0030      	movs	r0, r6
 80009cc:	40ca      	lsrs	r2, r1
 80009ce:	1a59      	subs	r1, r3, r1
 80009d0:	4088      	lsls	r0, r1
 80009d2:	1e43      	subs	r3, r0, #1
 80009d4:	4198      	sbcs	r0, r3
 80009d6:	4310      	orrs	r0, r2
 80009d8:	e745      	b.n	8000866 <__aeabi_fadd+0xda>
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d14a      	bne.n	8000a74 <__aeabi_fadd+0x2e8>
 80009de:	4643      	mov	r3, r8
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d063      	beq.n	8000aac <__aeabi_fadd+0x320>
 80009e4:	2200      	movs	r2, #0
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fadd+0x260>
 80009ea:	e714      	b.n	8000816 <__aeabi_fadd+0x8a>
 80009ec:	0030      	movs	r0, r6
 80009ee:	4440      	add	r0, r8
 80009f0:	0143      	lsls	r3, r0, #5
 80009f2:	d400      	bmi.n	80009f6 <__aeabi_fadd+0x26a>
 80009f4:	e77e      	b.n	80008f4 <__aeabi_fadd+0x168>
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <__aeabi_fadd+0x334>)
 80009f8:	3501      	adds	r5, #1
 80009fa:	4018      	ands	r0, r3
 80009fc:	e77a      	b.n	80008f4 <__aeabi_fadd+0x168>
 80009fe:	2fff      	cmp	r7, #255	; 0xff
 8000a00:	d08c      	beq.n	800091c <__aeabi_fadd+0x190>
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	4641      	mov	r1, r8
 8000a06:	04db      	lsls	r3, r3, #19
 8000a08:	4319      	orrs	r1, r3
 8000a0a:	4688      	mov	r8, r1
 8000a0c:	e79f      	b.n	800094e <__aeabi_fadd+0x1c2>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	000c      	movs	r4, r1
 8000a12:	1af7      	subs	r7, r6, r3
 8000a14:	e6e3      	b.n	80007de <__aeabi_fadd+0x52>
 8000a16:	4642      	mov	r2, r8
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fadd+0x292>
 8000a1c:	e775      	b.n	800090a <__aeabi_fadd+0x17e>
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fadd+0x298>
 8000a22:	e77a      	b.n	800091a <__aeabi_fadd+0x18e>
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	03db      	lsls	r3, r3, #15
 8000a28:	2400      	movs	r4, #0
 8000a2a:	469c      	mov	ip, r3
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	e6f2      	b.n	8000816 <__aeabi_fadd+0x8a>
 8000a30:	0030      	movs	r0, r6
 8000a32:	4440      	add	r0, r8
 8000a34:	2501      	movs	r5, #1
 8000a36:	0143      	lsls	r3, r0, #5
 8000a38:	d400      	bmi.n	8000a3c <__aeabi_fadd+0x2b0>
 8000a3a:	e75b      	b.n	80008f4 <__aeabi_fadd+0x168>
 8000a3c:	2502      	movs	r5, #2
 8000a3e:	e718      	b.n	8000872 <__aeabi_fadd+0xe6>
 8000a40:	4643      	mov	r3, r8
 8000a42:	2501      	movs	r5, #1
 8000a44:	1b98      	subs	r0, r3, r6
 8000a46:	e6c5      	b.n	80007d4 <__aeabi_fadd+0x48>
 8000a48:	2320      	movs	r3, #32
 8000a4a:	4644      	mov	r4, r8
 8000a4c:	4640      	mov	r0, r8
 8000a4e:	40d4      	lsrs	r4, r2
 8000a50:	1a9a      	subs	r2, r3, r2
 8000a52:	4090      	lsls	r0, r2
 8000a54:	1e43      	subs	r3, r0, #1
 8000a56:	4198      	sbcs	r0, r3
 8000a58:	4320      	orrs	r0, r4
 8000a5a:	e7a4      	b.n	80009a6 <__aeabi_fadd+0x21a>
 8000a5c:	000d      	movs	r5, r1
 8000a5e:	e74d      	b.n	80008fc <__aeabi_fadd+0x170>
 8000a60:	2320      	movs	r3, #32
 8000a62:	4641      	mov	r1, r8
 8000a64:	4640      	mov	r0, r8
 8000a66:	40d1      	lsrs	r1, r2
 8000a68:	1a9a      	subs	r2, r3, r2
 8000a6a:	4090      	lsls	r0, r2
 8000a6c:	1e43      	subs	r3, r0, #1
 8000a6e:	4198      	sbcs	r0, r3
 8000a70:	4308      	orrs	r0, r1
 8000a72:	e770      	b.n	8000956 <__aeabi_fadd+0x1ca>
 8000a74:	4642      	mov	r2, r8
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fadd+0x2f0>
 8000a7a:	e74f      	b.n	800091c <__aeabi_fadd+0x190>
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x2f6>
 8000a80:	e74d      	b.n	800091e <__aeabi_fadd+0x192>
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	03d2      	lsls	r2, r2, #15
 8000a86:	4213      	tst	r3, r2
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x300>
 8000a8a:	e748      	b.n	800091e <__aeabi_fadd+0x192>
 8000a8c:	4210      	tst	r0, r2
 8000a8e:	d000      	beq.n	8000a92 <__aeabi_fadd+0x306>
 8000a90:	e745      	b.n	800091e <__aeabi_fadd+0x192>
 8000a92:	0003      	movs	r3, r0
 8000a94:	e743      	b.n	800091e <__aeabi_fadd+0x192>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d090      	beq.n	80009bc <__aeabi_fadd+0x230>
 8000a9a:	000c      	movs	r4, r1
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	e6b9      	b.n	8000816 <__aeabi_fadd+0x8a>
 8000aa2:	4643      	mov	r3, r8
 8000aa4:	000c      	movs	r4, r1
 8000aa6:	1af0      	subs	r0, r6, r3
 8000aa8:	3501      	adds	r5, #1
 8000aaa:	e693      	b.n	80007d4 <__aeabi_fadd+0x48>
 8000aac:	4684      	mov	ip, r0
 8000aae:	2200      	movs	r2, #0
 8000ab0:	e6b1      	b.n	8000816 <__aeabi_fadd+0x8a>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_fadd+0x32c>
 8000ab6:	e71d      	b.n	80008f4 <__aeabi_fadd+0x168>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	2400      	movs	r4, #0
 8000abc:	469c      	mov	ip, r3
 8000abe:	e6aa      	b.n	8000816 <__aeabi_fadd+0x8a>
 8000ac0:	fbffffff 	.word	0xfbffffff
 8000ac4:	7dffffff 	.word	0x7dffffff

08000ac8 <__aeabi_fdiv>:
 8000ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aca:	464f      	mov	r7, r9
 8000acc:	4646      	mov	r6, r8
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	0245      	lsls	r5, r0, #9
 8000ad2:	b5c0      	push	{r6, r7, lr}
 8000ad4:	0047      	lsls	r7, r0, #1
 8000ad6:	1c0c      	adds	r4, r1, #0
 8000ad8:	0a6d      	lsrs	r5, r5, #9
 8000ada:	0e3f      	lsrs	r7, r7, #24
 8000adc:	0fc6      	lsrs	r6, r0, #31
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_fdiv+0x1c>
 8000ae2:	e070      	b.n	8000bc6 <__aeabi_fdiv+0xfe>
 8000ae4:	2fff      	cmp	r7, #255	; 0xff
 8000ae6:	d100      	bne.n	8000aea <__aeabi_fdiv+0x22>
 8000ae8:	e075      	b.n	8000bd6 <__aeabi_fdiv+0x10e>
 8000aea:	00eb      	lsls	r3, r5, #3
 8000aec:	2580      	movs	r5, #128	; 0x80
 8000aee:	04ed      	lsls	r5, r5, #19
 8000af0:	431d      	orrs	r5, r3
 8000af2:	2300      	movs	r3, #0
 8000af4:	4699      	mov	r9, r3
 8000af6:	469a      	mov	sl, r3
 8000af8:	3f7f      	subs	r7, #127	; 0x7f
 8000afa:	0260      	lsls	r0, r4, #9
 8000afc:	0a43      	lsrs	r3, r0, #9
 8000afe:	4698      	mov	r8, r3
 8000b00:	0063      	lsls	r3, r4, #1
 8000b02:	0e1b      	lsrs	r3, r3, #24
 8000b04:	0fe4      	lsrs	r4, r4, #31
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d04e      	beq.n	8000ba8 <__aeabi_fdiv+0xe0>
 8000b0a:	2bff      	cmp	r3, #255	; 0xff
 8000b0c:	d046      	beq.n	8000b9c <__aeabi_fdiv+0xd4>
 8000b0e:	4642      	mov	r2, r8
 8000b10:	00d0      	lsls	r0, r2, #3
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	04d2      	lsls	r2, r2, #19
 8000b16:	4302      	orrs	r2, r0
 8000b18:	4690      	mov	r8, r2
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	3b7f      	subs	r3, #127	; 0x7f
 8000b1e:	0031      	movs	r1, r6
 8000b20:	1aff      	subs	r7, r7, r3
 8000b22:	464b      	mov	r3, r9
 8000b24:	4061      	eors	r1, r4
 8000b26:	b2c9      	uxtb	r1, r1
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	d900      	bls.n	8000b30 <__aeabi_fdiv+0x68>
 8000b2e:	e0b5      	b.n	8000c9c <__aeabi_fdiv+0x1d4>
 8000b30:	486e      	ldr	r0, [pc, #440]	; (8000cec <__aeabi_fdiv+0x224>)
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	58c3      	ldr	r3, [r0, r3]
 8000b36:	469f      	mov	pc, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	0026      	movs	r6, r4
 8000b3e:	4645      	mov	r5, r8
 8000b40:	4692      	mov	sl, r2
 8000b42:	4653      	mov	r3, sl
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d100      	bne.n	8000b4a <__aeabi_fdiv+0x82>
 8000b48:	e089      	b.n	8000c5e <__aeabi_fdiv+0x196>
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fdiv+0x88>
 8000b4e:	e09e      	b.n	8000c8e <__aeabi_fdiv+0x1c6>
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d018      	beq.n	8000b86 <__aeabi_fdiv+0xbe>
 8000b54:	003b      	movs	r3, r7
 8000b56:	337f      	adds	r3, #127	; 0x7f
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dd69      	ble.n	8000c30 <__aeabi_fdiv+0x168>
 8000b5c:	076a      	lsls	r2, r5, #29
 8000b5e:	d004      	beq.n	8000b6a <__aeabi_fdiv+0xa2>
 8000b60:	220f      	movs	r2, #15
 8000b62:	402a      	ands	r2, r5
 8000b64:	2a04      	cmp	r2, #4
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fdiv+0xa2>
 8000b68:	3504      	adds	r5, #4
 8000b6a:	012a      	lsls	r2, r5, #4
 8000b6c:	d503      	bpl.n	8000b76 <__aeabi_fdiv+0xae>
 8000b6e:	4b60      	ldr	r3, [pc, #384]	; (8000cf0 <__aeabi_fdiv+0x228>)
 8000b70:	401d      	ands	r5, r3
 8000b72:	003b      	movs	r3, r7
 8000b74:	3380      	adds	r3, #128	; 0x80
 8000b76:	2bfe      	cmp	r3, #254	; 0xfe
 8000b78:	dd00      	ble.n	8000b7c <__aeabi_fdiv+0xb4>
 8000b7a:	e070      	b.n	8000c5e <__aeabi_fdiv+0x196>
 8000b7c:	01ad      	lsls	r5, r5, #6
 8000b7e:	0a6d      	lsrs	r5, r5, #9
 8000b80:	b2d8      	uxtb	r0, r3
 8000b82:	e002      	b.n	8000b8a <__aeabi_fdiv+0xc2>
 8000b84:	000e      	movs	r6, r1
 8000b86:	2000      	movs	r0, #0
 8000b88:	2500      	movs	r5, #0
 8000b8a:	05c0      	lsls	r0, r0, #23
 8000b8c:	4328      	orrs	r0, r5
 8000b8e:	07f6      	lsls	r6, r6, #31
 8000b90:	4330      	orrs	r0, r6
 8000b92:	bce0      	pop	{r5, r6, r7}
 8000b94:	46ba      	mov	sl, r7
 8000b96:	46b1      	mov	r9, r6
 8000b98:	46a8      	mov	r8, r5
 8000b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b9c:	4643      	mov	r3, r8
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d13f      	bne.n	8000c22 <__aeabi_fdiv+0x15a>
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	3fff      	subs	r7, #255	; 0xff
 8000ba6:	e003      	b.n	8000bb0 <__aeabi_fdiv+0xe8>
 8000ba8:	4643      	mov	r3, r8
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d12d      	bne.n	8000c0a <__aeabi_fdiv+0x142>
 8000bae:	2201      	movs	r2, #1
 8000bb0:	0031      	movs	r1, r6
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	4061      	eors	r1, r4
 8000bb6:	b2c9      	uxtb	r1, r1
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d834      	bhi.n	8000c28 <__aeabi_fdiv+0x160>
 8000bbe:	484d      	ldr	r0, [pc, #308]	; (8000cf4 <__aeabi_fdiv+0x22c>)
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	58c3      	ldr	r3, [r0, r3]
 8000bc4:	469f      	mov	pc, r3
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d113      	bne.n	8000bf2 <__aeabi_fdiv+0x12a>
 8000bca:	2304      	movs	r3, #4
 8000bcc:	4699      	mov	r9, r3
 8000bce:	3b03      	subs	r3, #3
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	e791      	b.n	8000afa <__aeabi_fdiv+0x32>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d105      	bne.n	8000be6 <__aeabi_fdiv+0x11e>
 8000bda:	2308      	movs	r3, #8
 8000bdc:	4699      	mov	r9, r3
 8000bde:	3b06      	subs	r3, #6
 8000be0:	27ff      	movs	r7, #255	; 0xff
 8000be2:	469a      	mov	sl, r3
 8000be4:	e789      	b.n	8000afa <__aeabi_fdiv+0x32>
 8000be6:	230c      	movs	r3, #12
 8000be8:	4699      	mov	r9, r3
 8000bea:	3b09      	subs	r3, #9
 8000bec:	27ff      	movs	r7, #255	; 0xff
 8000bee:	469a      	mov	sl, r3
 8000bf0:	e783      	b.n	8000afa <__aeabi_fdiv+0x32>
 8000bf2:	0028      	movs	r0, r5
 8000bf4:	f002 fac2 	bl	800317c <__clzsi2>
 8000bf8:	2776      	movs	r7, #118	; 0x76
 8000bfa:	1f43      	subs	r3, r0, #5
 8000bfc:	409d      	lsls	r5, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	427f      	negs	r7, r7
 8000c02:	4699      	mov	r9, r3
 8000c04:	469a      	mov	sl, r3
 8000c06:	1a3f      	subs	r7, r7, r0
 8000c08:	e777      	b.n	8000afa <__aeabi_fdiv+0x32>
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	f002 fab6 	bl	800317c <__clzsi2>
 8000c10:	4642      	mov	r2, r8
 8000c12:	1f43      	subs	r3, r0, #5
 8000c14:	409a      	lsls	r2, r3
 8000c16:	2376      	movs	r3, #118	; 0x76
 8000c18:	425b      	negs	r3, r3
 8000c1a:	4690      	mov	r8, r2
 8000c1c:	1a1b      	subs	r3, r3, r0
 8000c1e:	2200      	movs	r2, #0
 8000c20:	e77d      	b.n	8000b1e <__aeabi_fdiv+0x56>
 8000c22:	23ff      	movs	r3, #255	; 0xff
 8000c24:	2203      	movs	r2, #3
 8000c26:	e77a      	b.n	8000b1e <__aeabi_fdiv+0x56>
 8000c28:	000e      	movs	r6, r1
 8000c2a:	20ff      	movs	r0, #255	; 0xff
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	e7ac      	b.n	8000b8a <__aeabi_fdiv+0xc2>
 8000c30:	2001      	movs	r0, #1
 8000c32:	1ac0      	subs	r0, r0, r3
 8000c34:	281b      	cmp	r0, #27
 8000c36:	dca6      	bgt.n	8000b86 <__aeabi_fdiv+0xbe>
 8000c38:	379e      	adds	r7, #158	; 0x9e
 8000c3a:	002a      	movs	r2, r5
 8000c3c:	40bd      	lsls	r5, r7
 8000c3e:	40c2      	lsrs	r2, r0
 8000c40:	1e6b      	subs	r3, r5, #1
 8000c42:	419d      	sbcs	r5, r3
 8000c44:	4315      	orrs	r5, r2
 8000c46:	076b      	lsls	r3, r5, #29
 8000c48:	d004      	beq.n	8000c54 <__aeabi_fdiv+0x18c>
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	402b      	ands	r3, r5
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d000      	beq.n	8000c54 <__aeabi_fdiv+0x18c>
 8000c52:	3504      	adds	r5, #4
 8000c54:	016b      	lsls	r3, r5, #5
 8000c56:	d544      	bpl.n	8000ce2 <__aeabi_fdiv+0x21a>
 8000c58:	2001      	movs	r0, #1
 8000c5a:	2500      	movs	r5, #0
 8000c5c:	e795      	b.n	8000b8a <__aeabi_fdiv+0xc2>
 8000c5e:	20ff      	movs	r0, #255	; 0xff
 8000c60:	2500      	movs	r5, #0
 8000c62:	e792      	b.n	8000b8a <__aeabi_fdiv+0xc2>
 8000c64:	2580      	movs	r5, #128	; 0x80
 8000c66:	2600      	movs	r6, #0
 8000c68:	20ff      	movs	r0, #255	; 0xff
 8000c6a:	03ed      	lsls	r5, r5, #15
 8000c6c:	e78d      	b.n	8000b8a <__aeabi_fdiv+0xc2>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	4698      	mov	r8, r3
 8000c72:	2080      	movs	r0, #128	; 0x80
 8000c74:	03c0      	lsls	r0, r0, #15
 8000c76:	4205      	tst	r5, r0
 8000c78:	d009      	beq.n	8000c8e <__aeabi_fdiv+0x1c6>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	4203      	tst	r3, r0
 8000c7e:	d106      	bne.n	8000c8e <__aeabi_fdiv+0x1c6>
 8000c80:	4645      	mov	r5, r8
 8000c82:	4305      	orrs	r5, r0
 8000c84:	026d      	lsls	r5, r5, #9
 8000c86:	0026      	movs	r6, r4
 8000c88:	20ff      	movs	r0, #255	; 0xff
 8000c8a:	0a6d      	lsrs	r5, r5, #9
 8000c8c:	e77d      	b.n	8000b8a <__aeabi_fdiv+0xc2>
 8000c8e:	2080      	movs	r0, #128	; 0x80
 8000c90:	03c0      	lsls	r0, r0, #15
 8000c92:	4305      	orrs	r5, r0
 8000c94:	026d      	lsls	r5, r5, #9
 8000c96:	20ff      	movs	r0, #255	; 0xff
 8000c98:	0a6d      	lsrs	r5, r5, #9
 8000c9a:	e776      	b.n	8000b8a <__aeabi_fdiv+0xc2>
 8000c9c:	4642      	mov	r2, r8
 8000c9e:	016b      	lsls	r3, r5, #5
 8000ca0:	0150      	lsls	r0, r2, #5
 8000ca2:	4283      	cmp	r3, r0
 8000ca4:	d219      	bcs.n	8000cda <__aeabi_fdiv+0x212>
 8000ca6:	221b      	movs	r2, #27
 8000ca8:	2500      	movs	r5, #0
 8000caa:	3f01      	subs	r7, #1
 8000cac:	2601      	movs	r6, #1
 8000cae:	001c      	movs	r4, r3
 8000cb0:	006d      	lsls	r5, r5, #1
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2c00      	cmp	r4, #0
 8000cb6:	db01      	blt.n	8000cbc <__aeabi_fdiv+0x1f4>
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	d801      	bhi.n	8000cc0 <__aeabi_fdiv+0x1f8>
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4335      	orrs	r5, r6
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	d1f3      	bne.n	8000cae <__aeabi_fdiv+0x1e6>
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	4193      	sbcs	r3, r2
 8000cca:	431d      	orrs	r5, r3
 8000ccc:	003b      	movs	r3, r7
 8000cce:	337f      	adds	r3, #127	; 0x7f
 8000cd0:	000e      	movs	r6, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	dd00      	ble.n	8000cd8 <__aeabi_fdiv+0x210>
 8000cd6:	e741      	b.n	8000b5c <__aeabi_fdiv+0x94>
 8000cd8:	e7aa      	b.n	8000c30 <__aeabi_fdiv+0x168>
 8000cda:	221a      	movs	r2, #26
 8000cdc:	2501      	movs	r5, #1
 8000cde:	1a1b      	subs	r3, r3, r0
 8000ce0:	e7e4      	b.n	8000cac <__aeabi_fdiv+0x1e4>
 8000ce2:	01ad      	lsls	r5, r5, #6
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	0a6d      	lsrs	r5, r5, #9
 8000ce8:	e74f      	b.n	8000b8a <__aeabi_fdiv+0xc2>
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	0800b7ec 	.word	0x0800b7ec
 8000cf0:	f7ffffff 	.word	0xf7ffffff
 8000cf4:	0800b82c 	.word	0x0800b82c

08000cf8 <__eqsf2>:
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	0042      	lsls	r2, r0, #1
 8000cfc:	0245      	lsls	r5, r0, #9
 8000cfe:	024e      	lsls	r6, r1, #9
 8000d00:	004c      	lsls	r4, r1, #1
 8000d02:	0fc3      	lsrs	r3, r0, #31
 8000d04:	0a6d      	lsrs	r5, r5, #9
 8000d06:	2001      	movs	r0, #1
 8000d08:	0e12      	lsrs	r2, r2, #24
 8000d0a:	0a76      	lsrs	r6, r6, #9
 8000d0c:	0e24      	lsrs	r4, r4, #24
 8000d0e:	0fc9      	lsrs	r1, r1, #31
 8000d10:	2aff      	cmp	r2, #255	; 0xff
 8000d12:	d006      	beq.n	8000d22 <__eqsf2+0x2a>
 8000d14:	2cff      	cmp	r4, #255	; 0xff
 8000d16:	d003      	beq.n	8000d20 <__eqsf2+0x28>
 8000d18:	42a2      	cmp	r2, r4
 8000d1a:	d101      	bne.n	8000d20 <__eqsf2+0x28>
 8000d1c:	42b5      	cmp	r5, r6
 8000d1e:	d006      	beq.n	8000d2e <__eqsf2+0x36>
 8000d20:	bd70      	pop	{r4, r5, r6, pc}
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d1fc      	bne.n	8000d20 <__eqsf2+0x28>
 8000d26:	2cff      	cmp	r4, #255	; 0xff
 8000d28:	d1fa      	bne.n	8000d20 <__eqsf2+0x28>
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d1f8      	bne.n	8000d20 <__eqsf2+0x28>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d006      	beq.n	8000d40 <__eqsf2+0x48>
 8000d32:	2001      	movs	r0, #1
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	d1f3      	bne.n	8000d20 <__eqsf2+0x28>
 8000d38:	0028      	movs	r0, r5
 8000d3a:	1e43      	subs	r3, r0, #1
 8000d3c:	4198      	sbcs	r0, r3
 8000d3e:	e7ef      	b.n	8000d20 <__eqsf2+0x28>
 8000d40:	2000      	movs	r0, #0
 8000d42:	e7ed      	b.n	8000d20 <__eqsf2+0x28>

08000d44 <__gesf2>:
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	0042      	lsls	r2, r0, #1
 8000d48:	0245      	lsls	r5, r0, #9
 8000d4a:	024e      	lsls	r6, r1, #9
 8000d4c:	004c      	lsls	r4, r1, #1
 8000d4e:	0fc3      	lsrs	r3, r0, #31
 8000d50:	0a6d      	lsrs	r5, r5, #9
 8000d52:	0e12      	lsrs	r2, r2, #24
 8000d54:	0a76      	lsrs	r6, r6, #9
 8000d56:	0e24      	lsrs	r4, r4, #24
 8000d58:	0fc8      	lsrs	r0, r1, #31
 8000d5a:	2aff      	cmp	r2, #255	; 0xff
 8000d5c:	d01b      	beq.n	8000d96 <__gesf2+0x52>
 8000d5e:	2cff      	cmp	r4, #255	; 0xff
 8000d60:	d00e      	beq.n	8000d80 <__gesf2+0x3c>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	d11b      	bne.n	8000d9e <__gesf2+0x5a>
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	d101      	bne.n	8000d6e <__gesf2+0x2a>
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d01c      	beq.n	8000da8 <__gesf2+0x64>
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	d00c      	beq.n	8000d8c <__gesf2+0x48>
 8000d72:	4283      	cmp	r3, r0
 8000d74:	d01c      	beq.n	8000db0 <__gesf2+0x6c>
 8000d76:	2102      	movs	r1, #2
 8000d78:	1e58      	subs	r0, r3, #1
 8000d7a:	4008      	ands	r0, r1
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d122      	bne.n	8000dca <__gesf2+0x86>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	d1f4      	bne.n	8000d72 <__gesf2+0x2e>
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d1f2      	bne.n	8000d72 <__gesf2+0x2e>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d1f6      	bne.n	8000d7e <__gesf2+0x3a>
 8000d90:	2001      	movs	r0, #1
 8000d92:	4240      	negs	r0, r0
 8000d94:	e7f3      	b.n	8000d7e <__gesf2+0x3a>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d117      	bne.n	8000dca <__gesf2+0x86>
 8000d9a:	2cff      	cmp	r4, #255	; 0xff
 8000d9c:	d0f0      	beq.n	8000d80 <__gesf2+0x3c>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d1e7      	bne.n	8000d72 <__gesf2+0x2e>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d1e5      	bne.n	8000d72 <__gesf2+0x2e>
 8000da6:	e7e6      	b.n	8000d76 <__gesf2+0x32>
 8000da8:	2000      	movs	r0, #0
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e7      	beq.n	8000d7e <__gesf2+0x3a>
 8000dae:	e7e2      	b.n	8000d76 <__gesf2+0x32>
 8000db0:	42a2      	cmp	r2, r4
 8000db2:	dc05      	bgt.n	8000dc0 <__gesf2+0x7c>
 8000db4:	dbea      	blt.n	8000d8c <__gesf2+0x48>
 8000db6:	42b5      	cmp	r5, r6
 8000db8:	d802      	bhi.n	8000dc0 <__gesf2+0x7c>
 8000dba:	d3e7      	bcc.n	8000d8c <__gesf2+0x48>
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e7de      	b.n	8000d7e <__gesf2+0x3a>
 8000dc0:	4243      	negs	r3, r0
 8000dc2:	4158      	adcs	r0, r3
 8000dc4:	0040      	lsls	r0, r0, #1
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7d9      	b.n	8000d7e <__gesf2+0x3a>
 8000dca:	2002      	movs	r0, #2
 8000dcc:	4240      	negs	r0, r0
 8000dce:	e7d6      	b.n	8000d7e <__gesf2+0x3a>

08000dd0 <__lesf2>:
 8000dd0:	b570      	push	{r4, r5, r6, lr}
 8000dd2:	0042      	lsls	r2, r0, #1
 8000dd4:	0245      	lsls	r5, r0, #9
 8000dd6:	024e      	lsls	r6, r1, #9
 8000dd8:	004c      	lsls	r4, r1, #1
 8000dda:	0fc3      	lsrs	r3, r0, #31
 8000ddc:	0a6d      	lsrs	r5, r5, #9
 8000dde:	0e12      	lsrs	r2, r2, #24
 8000de0:	0a76      	lsrs	r6, r6, #9
 8000de2:	0e24      	lsrs	r4, r4, #24
 8000de4:	0fc8      	lsrs	r0, r1, #31
 8000de6:	2aff      	cmp	r2, #255	; 0xff
 8000de8:	d00b      	beq.n	8000e02 <__lesf2+0x32>
 8000dea:	2cff      	cmp	r4, #255	; 0xff
 8000dec:	d00d      	beq.n	8000e0a <__lesf2+0x3a>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d11f      	bne.n	8000e32 <__lesf2+0x62>
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d116      	bne.n	8000e24 <__lesf2+0x54>
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d114      	bne.n	8000e24 <__lesf2+0x54>
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d010      	beq.n	8000e22 <__lesf2+0x52>
 8000e00:	e009      	b.n	8000e16 <__lesf2+0x46>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d10c      	bne.n	8000e20 <__lesf2+0x50>
 8000e06:	2cff      	cmp	r4, #255	; 0xff
 8000e08:	d113      	bne.n	8000e32 <__lesf2+0x62>
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d108      	bne.n	8000e20 <__lesf2+0x50>
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	d008      	beq.n	8000e24 <__lesf2+0x54>
 8000e12:	4283      	cmp	r3, r0
 8000e14:	d012      	beq.n	8000e3c <__lesf2+0x6c>
 8000e16:	2102      	movs	r1, #2
 8000e18:	1e58      	subs	r0, r3, #1
 8000e1a:	4008      	ands	r0, r1
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	e000      	b.n	8000e22 <__lesf2+0x52>
 8000e20:	2002      	movs	r0, #2
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d1f4      	bne.n	8000e12 <__lesf2+0x42>
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	d1fa      	bne.n	8000e22 <__lesf2+0x52>
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4240      	negs	r0, r0
 8000e30:	e7f7      	b.n	8000e22 <__lesf2+0x52>
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d1ed      	bne.n	8000e12 <__lesf2+0x42>
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d1eb      	bne.n	8000e12 <__lesf2+0x42>
 8000e3a:	e7ec      	b.n	8000e16 <__lesf2+0x46>
 8000e3c:	42a2      	cmp	r2, r4
 8000e3e:	dc05      	bgt.n	8000e4c <__lesf2+0x7c>
 8000e40:	dbf2      	blt.n	8000e28 <__lesf2+0x58>
 8000e42:	42b5      	cmp	r5, r6
 8000e44:	d802      	bhi.n	8000e4c <__lesf2+0x7c>
 8000e46:	d3ef      	bcc.n	8000e28 <__lesf2+0x58>
 8000e48:	2000      	movs	r0, #0
 8000e4a:	e7ea      	b.n	8000e22 <__lesf2+0x52>
 8000e4c:	4243      	negs	r3, r0
 8000e4e:	4158      	adcs	r0, r3
 8000e50:	0040      	lsls	r0, r0, #1
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7e5      	b.n	8000e22 <__lesf2+0x52>
 8000e56:	46c0      	nop			; (mov r8, r8)

08000e58 <__aeabi_fmul>:
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	464f      	mov	r7, r9
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	46d6      	mov	lr, sl
 8000e60:	0244      	lsls	r4, r0, #9
 8000e62:	0045      	lsls	r5, r0, #1
 8000e64:	b5c0      	push	{r6, r7, lr}
 8000e66:	0a64      	lsrs	r4, r4, #9
 8000e68:	1c0f      	adds	r7, r1, #0
 8000e6a:	0e2d      	lsrs	r5, r5, #24
 8000e6c:	0fc6      	lsrs	r6, r0, #31
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fmul+0x1c>
 8000e72:	e08d      	b.n	8000f90 <__aeabi_fmul+0x138>
 8000e74:	2dff      	cmp	r5, #255	; 0xff
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fmul+0x22>
 8000e78:	e092      	b.n	8000fa0 <__aeabi_fmul+0x148>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2080      	movs	r0, #128	; 0x80
 8000e7e:	4699      	mov	r9, r3
 8000e80:	469a      	mov	sl, r3
 8000e82:	00e4      	lsls	r4, r4, #3
 8000e84:	04c0      	lsls	r0, r0, #19
 8000e86:	4304      	orrs	r4, r0
 8000e88:	3d7f      	subs	r5, #127	; 0x7f
 8000e8a:	0278      	lsls	r0, r7, #9
 8000e8c:	0a43      	lsrs	r3, r0, #9
 8000e8e:	4698      	mov	r8, r3
 8000e90:	007b      	lsls	r3, r7, #1
 8000e92:	0e1b      	lsrs	r3, r3, #24
 8000e94:	0fff      	lsrs	r7, r7, #31
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_fmul+0x44>
 8000e9a:	e070      	b.n	8000f7e <__aeabi_fmul+0x126>
 8000e9c:	2bff      	cmp	r3, #255	; 0xff
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fmul+0x4a>
 8000ea0:	e086      	b.n	8000fb0 <__aeabi_fmul+0x158>
 8000ea2:	4642      	mov	r2, r8
 8000ea4:	00d0      	lsls	r0, r2, #3
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	3b7f      	subs	r3, #127	; 0x7f
 8000eaa:	18ed      	adds	r5, r5, r3
 8000eac:	2300      	movs	r3, #0
 8000eae:	04d2      	lsls	r2, r2, #19
 8000eb0:	4302      	orrs	r2, r0
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	469c      	mov	ip, r3
 8000eb6:	0031      	movs	r1, r6
 8000eb8:	464b      	mov	r3, r9
 8000eba:	4079      	eors	r1, r7
 8000ebc:	1c68      	adds	r0, r5, #1
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	d81c      	bhi.n	8000efc <__aeabi_fmul+0xa4>
 8000ec2:	4a76      	ldr	r2, [pc, #472]	; (800109c <__aeabi_fmul+0x244>)
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	58d3      	ldr	r3, [r2, r3]
 8000ec8:	469f      	mov	pc, r3
 8000eca:	0039      	movs	r1, r7
 8000ecc:	4644      	mov	r4, r8
 8000ece:	46e2      	mov	sl, ip
 8000ed0:	4653      	mov	r3, sl
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d00f      	beq.n	8000ef6 <__aeabi_fmul+0x9e>
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fmul+0x84>
 8000eda:	e0d7      	b.n	800108c <__aeabi_fmul+0x234>
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d137      	bne.n	8000f50 <__aeabi_fmul+0xf8>
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	2400      	movs	r4, #0
 8000ee4:	05c0      	lsls	r0, r0, #23
 8000ee6:	4320      	orrs	r0, r4
 8000ee8:	07c9      	lsls	r1, r1, #31
 8000eea:	4308      	orrs	r0, r1
 8000eec:	bce0      	pop	{r5, r6, r7}
 8000eee:	46ba      	mov	sl, r7
 8000ef0:	46b1      	mov	r9, r6
 8000ef2:	46a8      	mov	r8, r5
 8000ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef6:	20ff      	movs	r0, #255	; 0xff
 8000ef8:	2400      	movs	r4, #0
 8000efa:	e7f3      	b.n	8000ee4 <__aeabi_fmul+0x8c>
 8000efc:	0c26      	lsrs	r6, r4, #16
 8000efe:	0424      	lsls	r4, r4, #16
 8000f00:	0c22      	lsrs	r2, r4, #16
 8000f02:	4644      	mov	r4, r8
 8000f04:	0424      	lsls	r4, r4, #16
 8000f06:	0c24      	lsrs	r4, r4, #16
 8000f08:	4643      	mov	r3, r8
 8000f0a:	0027      	movs	r7, r4
 8000f0c:	0c1b      	lsrs	r3, r3, #16
 8000f0e:	4357      	muls	r7, r2
 8000f10:	4374      	muls	r4, r6
 8000f12:	435a      	muls	r2, r3
 8000f14:	435e      	muls	r6, r3
 8000f16:	1912      	adds	r2, r2, r4
 8000f18:	0c3b      	lsrs	r3, r7, #16
 8000f1a:	189b      	adds	r3, r3, r2
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	d903      	bls.n	8000f28 <__aeabi_fmul+0xd0>
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	0252      	lsls	r2, r2, #9
 8000f24:	4694      	mov	ip, r2
 8000f26:	4466      	add	r6, ip
 8000f28:	043f      	lsls	r7, r7, #16
 8000f2a:	041a      	lsls	r2, r3, #16
 8000f2c:	0c3f      	lsrs	r7, r7, #16
 8000f2e:	19d2      	adds	r2, r2, r7
 8000f30:	0194      	lsls	r4, r2, #6
 8000f32:	1e67      	subs	r7, r4, #1
 8000f34:	41bc      	sbcs	r4, r7
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	0e92      	lsrs	r2, r2, #26
 8000f3a:	199b      	adds	r3, r3, r6
 8000f3c:	4314      	orrs	r4, r2
 8000f3e:	019b      	lsls	r3, r3, #6
 8000f40:	431c      	orrs	r4, r3
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_fmul+0xf0>
 8000f46:	e09b      	b.n	8001080 <__aeabi_fmul+0x228>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	0862      	lsrs	r2, r4, #1
 8000f4c:	401c      	ands	r4, r3
 8000f4e:	4314      	orrs	r4, r2
 8000f50:	0002      	movs	r2, r0
 8000f52:	327f      	adds	r2, #127	; 0x7f
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	dd64      	ble.n	8001022 <__aeabi_fmul+0x1ca>
 8000f58:	0763      	lsls	r3, r4, #29
 8000f5a:	d004      	beq.n	8000f66 <__aeabi_fmul+0x10e>
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	4023      	ands	r3, r4
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d000      	beq.n	8000f66 <__aeabi_fmul+0x10e>
 8000f64:	3404      	adds	r4, #4
 8000f66:	0123      	lsls	r3, r4, #4
 8000f68:	d503      	bpl.n	8000f72 <__aeabi_fmul+0x11a>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <__aeabi_fmul+0x248>)
 8000f6e:	3280      	adds	r2, #128	; 0x80
 8000f70:	401c      	ands	r4, r3
 8000f72:	2afe      	cmp	r2, #254	; 0xfe
 8000f74:	dcbf      	bgt.n	8000ef6 <__aeabi_fmul+0x9e>
 8000f76:	01a4      	lsls	r4, r4, #6
 8000f78:	0a64      	lsrs	r4, r4, #9
 8000f7a:	b2d0      	uxtb	r0, r2
 8000f7c:	e7b2      	b.n	8000ee4 <__aeabi_fmul+0x8c>
 8000f7e:	4643      	mov	r3, r8
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d13d      	bne.n	8001000 <__aeabi_fmul+0x1a8>
 8000f84:	464a      	mov	r2, r9
 8000f86:	3301      	adds	r3, #1
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4691      	mov	r9, r2
 8000f8c:	469c      	mov	ip, r3
 8000f8e:	e792      	b.n	8000eb6 <__aeabi_fmul+0x5e>
 8000f90:	2c00      	cmp	r4, #0
 8000f92:	d129      	bne.n	8000fe8 <__aeabi_fmul+0x190>
 8000f94:	2304      	movs	r3, #4
 8000f96:	4699      	mov	r9, r3
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	469a      	mov	sl, r3
 8000f9e:	e774      	b.n	8000e8a <__aeabi_fmul+0x32>
 8000fa0:	2c00      	cmp	r4, #0
 8000fa2:	d11b      	bne.n	8000fdc <__aeabi_fmul+0x184>
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	3b06      	subs	r3, #6
 8000faa:	25ff      	movs	r5, #255	; 0xff
 8000fac:	469a      	mov	sl, r3
 8000fae:	e76c      	b.n	8000e8a <__aeabi_fmul+0x32>
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	35ff      	adds	r5, #255	; 0xff
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10b      	bne.n	8000fd0 <__aeabi_fmul+0x178>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	464a      	mov	r2, r9
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	4691      	mov	r9, r2
 8000fc0:	469c      	mov	ip, r3
 8000fc2:	e778      	b.n	8000eb6 <__aeabi_fmul+0x5e>
 8000fc4:	4653      	mov	r3, sl
 8000fc6:	0031      	movs	r1, r6
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d000      	beq.n	8000fce <__aeabi_fmul+0x176>
 8000fcc:	e783      	b.n	8000ed6 <__aeabi_fmul+0x7e>
 8000fce:	e792      	b.n	8000ef6 <__aeabi_fmul+0x9e>
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	4691      	mov	r9, r2
 8000fd8:	469c      	mov	ip, r3
 8000fda:	e76c      	b.n	8000eb6 <__aeabi_fmul+0x5e>
 8000fdc:	230c      	movs	r3, #12
 8000fde:	4699      	mov	r9, r3
 8000fe0:	3b09      	subs	r3, #9
 8000fe2:	25ff      	movs	r5, #255	; 0xff
 8000fe4:	469a      	mov	sl, r3
 8000fe6:	e750      	b.n	8000e8a <__aeabi_fmul+0x32>
 8000fe8:	0020      	movs	r0, r4
 8000fea:	f002 f8c7 	bl	800317c <__clzsi2>
 8000fee:	2576      	movs	r5, #118	; 0x76
 8000ff0:	1f43      	subs	r3, r0, #5
 8000ff2:	409c      	lsls	r4, r3
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	426d      	negs	r5, r5
 8000ff8:	4699      	mov	r9, r3
 8000ffa:	469a      	mov	sl, r3
 8000ffc:	1a2d      	subs	r5, r5, r0
 8000ffe:	e744      	b.n	8000e8a <__aeabi_fmul+0x32>
 8001000:	4640      	mov	r0, r8
 8001002:	f002 f8bb 	bl	800317c <__clzsi2>
 8001006:	4642      	mov	r2, r8
 8001008:	1f43      	subs	r3, r0, #5
 800100a:	409a      	lsls	r2, r3
 800100c:	2300      	movs	r3, #0
 800100e:	1a2d      	subs	r5, r5, r0
 8001010:	4690      	mov	r8, r2
 8001012:	469c      	mov	ip, r3
 8001014:	3d76      	subs	r5, #118	; 0x76
 8001016:	e74e      	b.n	8000eb6 <__aeabi_fmul+0x5e>
 8001018:	2480      	movs	r4, #128	; 0x80
 800101a:	2100      	movs	r1, #0
 800101c:	20ff      	movs	r0, #255	; 0xff
 800101e:	03e4      	lsls	r4, r4, #15
 8001020:	e760      	b.n	8000ee4 <__aeabi_fmul+0x8c>
 8001022:	2301      	movs	r3, #1
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	2b1b      	cmp	r3, #27
 8001028:	dd00      	ble.n	800102c <__aeabi_fmul+0x1d4>
 800102a:	e759      	b.n	8000ee0 <__aeabi_fmul+0x88>
 800102c:	0022      	movs	r2, r4
 800102e:	309e      	adds	r0, #158	; 0x9e
 8001030:	40da      	lsrs	r2, r3
 8001032:	4084      	lsls	r4, r0
 8001034:	0013      	movs	r3, r2
 8001036:	1e62      	subs	r2, r4, #1
 8001038:	4194      	sbcs	r4, r2
 800103a:	431c      	orrs	r4, r3
 800103c:	0763      	lsls	r3, r4, #29
 800103e:	d004      	beq.n	800104a <__aeabi_fmul+0x1f2>
 8001040:	230f      	movs	r3, #15
 8001042:	4023      	ands	r3, r4
 8001044:	2b04      	cmp	r3, #4
 8001046:	d000      	beq.n	800104a <__aeabi_fmul+0x1f2>
 8001048:	3404      	adds	r4, #4
 800104a:	0163      	lsls	r3, r4, #5
 800104c:	d51a      	bpl.n	8001084 <__aeabi_fmul+0x22c>
 800104e:	2001      	movs	r0, #1
 8001050:	2400      	movs	r4, #0
 8001052:	e747      	b.n	8000ee4 <__aeabi_fmul+0x8c>
 8001054:	2080      	movs	r0, #128	; 0x80
 8001056:	03c0      	lsls	r0, r0, #15
 8001058:	4204      	tst	r4, r0
 800105a:	d009      	beq.n	8001070 <__aeabi_fmul+0x218>
 800105c:	4643      	mov	r3, r8
 800105e:	4203      	tst	r3, r0
 8001060:	d106      	bne.n	8001070 <__aeabi_fmul+0x218>
 8001062:	4644      	mov	r4, r8
 8001064:	4304      	orrs	r4, r0
 8001066:	0264      	lsls	r4, r4, #9
 8001068:	0039      	movs	r1, r7
 800106a:	20ff      	movs	r0, #255	; 0xff
 800106c:	0a64      	lsrs	r4, r4, #9
 800106e:	e739      	b.n	8000ee4 <__aeabi_fmul+0x8c>
 8001070:	2080      	movs	r0, #128	; 0x80
 8001072:	03c0      	lsls	r0, r0, #15
 8001074:	4304      	orrs	r4, r0
 8001076:	0264      	lsls	r4, r4, #9
 8001078:	0031      	movs	r1, r6
 800107a:	20ff      	movs	r0, #255	; 0xff
 800107c:	0a64      	lsrs	r4, r4, #9
 800107e:	e731      	b.n	8000ee4 <__aeabi_fmul+0x8c>
 8001080:	0028      	movs	r0, r5
 8001082:	e765      	b.n	8000f50 <__aeabi_fmul+0xf8>
 8001084:	01a4      	lsls	r4, r4, #6
 8001086:	2000      	movs	r0, #0
 8001088:	0a64      	lsrs	r4, r4, #9
 800108a:	e72b      	b.n	8000ee4 <__aeabi_fmul+0x8c>
 800108c:	2080      	movs	r0, #128	; 0x80
 800108e:	03c0      	lsls	r0, r0, #15
 8001090:	4304      	orrs	r4, r0
 8001092:	0264      	lsls	r4, r4, #9
 8001094:	20ff      	movs	r0, #255	; 0xff
 8001096:	0a64      	lsrs	r4, r4, #9
 8001098:	e724      	b.n	8000ee4 <__aeabi_fmul+0x8c>
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	0800b86c 	.word	0x0800b86c
 80010a0:	f7ffffff 	.word	0xf7ffffff

080010a4 <__aeabi_fsub>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	46ce      	mov	lr, r9
 80010a8:	4647      	mov	r7, r8
 80010aa:	0243      	lsls	r3, r0, #9
 80010ac:	0a5b      	lsrs	r3, r3, #9
 80010ae:	024e      	lsls	r6, r1, #9
 80010b0:	00da      	lsls	r2, r3, #3
 80010b2:	4694      	mov	ip, r2
 80010b4:	0a72      	lsrs	r2, r6, #9
 80010b6:	4691      	mov	r9, r2
 80010b8:	0045      	lsls	r5, r0, #1
 80010ba:	004a      	lsls	r2, r1, #1
 80010bc:	b580      	push	{r7, lr}
 80010be:	0e2d      	lsrs	r5, r5, #24
 80010c0:	001f      	movs	r7, r3
 80010c2:	0fc4      	lsrs	r4, r0, #31
 80010c4:	0e12      	lsrs	r2, r2, #24
 80010c6:	0fc9      	lsrs	r1, r1, #31
 80010c8:	09b6      	lsrs	r6, r6, #6
 80010ca:	2aff      	cmp	r2, #255	; 0xff
 80010cc:	d05b      	beq.n	8001186 <__aeabi_fsub+0xe2>
 80010ce:	2001      	movs	r0, #1
 80010d0:	4041      	eors	r1, r0
 80010d2:	428c      	cmp	r4, r1
 80010d4:	d039      	beq.n	800114a <__aeabi_fsub+0xa6>
 80010d6:	1aa8      	subs	r0, r5, r2
 80010d8:	2800      	cmp	r0, #0
 80010da:	dd5a      	ble.n	8001192 <__aeabi_fsub+0xee>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d06a      	beq.n	80011b6 <__aeabi_fsub+0x112>
 80010e0:	2dff      	cmp	r5, #255	; 0xff
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fsub+0x42>
 80010e4:	e0d9      	b.n	800129a <__aeabi_fsub+0x1f6>
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	04d2      	lsls	r2, r2, #19
 80010ea:	4316      	orrs	r6, r2
 80010ec:	281b      	cmp	r0, #27
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_fsub+0x4e>
 80010f0:	e0e9      	b.n	80012c6 <__aeabi_fsub+0x222>
 80010f2:	2001      	movs	r0, #1
 80010f4:	4663      	mov	r3, ip
 80010f6:	1a18      	subs	r0, r3, r0
 80010f8:	0143      	lsls	r3, r0, #5
 80010fa:	d400      	bmi.n	80010fe <__aeabi_fsub+0x5a>
 80010fc:	e0b4      	b.n	8001268 <__aeabi_fsub+0x1c4>
 80010fe:	0180      	lsls	r0, r0, #6
 8001100:	0987      	lsrs	r7, r0, #6
 8001102:	0038      	movs	r0, r7
 8001104:	f002 f83a 	bl	800317c <__clzsi2>
 8001108:	3805      	subs	r0, #5
 800110a:	4087      	lsls	r7, r0
 800110c:	4285      	cmp	r5, r0
 800110e:	dc00      	bgt.n	8001112 <__aeabi_fsub+0x6e>
 8001110:	e0cc      	b.n	80012ac <__aeabi_fsub+0x208>
 8001112:	1a2d      	subs	r5, r5, r0
 8001114:	48b5      	ldr	r0, [pc, #724]	; (80013ec <__aeabi_fsub+0x348>)
 8001116:	4038      	ands	r0, r7
 8001118:	0743      	lsls	r3, r0, #29
 800111a:	d004      	beq.n	8001126 <__aeabi_fsub+0x82>
 800111c:	230f      	movs	r3, #15
 800111e:	4003      	ands	r3, r0
 8001120:	2b04      	cmp	r3, #4
 8001122:	d000      	beq.n	8001126 <__aeabi_fsub+0x82>
 8001124:	3004      	adds	r0, #4
 8001126:	0143      	lsls	r3, r0, #5
 8001128:	d400      	bmi.n	800112c <__aeabi_fsub+0x88>
 800112a:	e0a0      	b.n	800126e <__aeabi_fsub+0x1ca>
 800112c:	1c6a      	adds	r2, r5, #1
 800112e:	2dfe      	cmp	r5, #254	; 0xfe
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x90>
 8001132:	e08d      	b.n	8001250 <__aeabi_fsub+0x1ac>
 8001134:	0180      	lsls	r0, r0, #6
 8001136:	0a47      	lsrs	r7, r0, #9
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	05d0      	lsls	r0, r2, #23
 800113c:	4338      	orrs	r0, r7
 800113e:	07e4      	lsls	r4, r4, #31
 8001140:	4320      	orrs	r0, r4
 8001142:	bcc0      	pop	{r6, r7}
 8001144:	46b9      	mov	r9, r7
 8001146:	46b0      	mov	r8, r6
 8001148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800114a:	1aa8      	subs	r0, r5, r2
 800114c:	4680      	mov	r8, r0
 800114e:	2800      	cmp	r0, #0
 8001150:	dd45      	ble.n	80011de <__aeabi_fsub+0x13a>
 8001152:	2a00      	cmp	r2, #0
 8001154:	d070      	beq.n	8001238 <__aeabi_fsub+0x194>
 8001156:	2dff      	cmp	r5, #255	; 0xff
 8001158:	d100      	bne.n	800115c <__aeabi_fsub+0xb8>
 800115a:	e09e      	b.n	800129a <__aeabi_fsub+0x1f6>
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	04db      	lsls	r3, r3, #19
 8001160:	431e      	orrs	r6, r3
 8001162:	4643      	mov	r3, r8
 8001164:	2b1b      	cmp	r3, #27
 8001166:	dc00      	bgt.n	800116a <__aeabi_fsub+0xc6>
 8001168:	e0d2      	b.n	8001310 <__aeabi_fsub+0x26c>
 800116a:	2001      	movs	r0, #1
 800116c:	4460      	add	r0, ip
 800116e:	0143      	lsls	r3, r0, #5
 8001170:	d57a      	bpl.n	8001268 <__aeabi_fsub+0x1c4>
 8001172:	3501      	adds	r5, #1
 8001174:	2dff      	cmp	r5, #255	; 0xff
 8001176:	d06b      	beq.n	8001250 <__aeabi_fsub+0x1ac>
 8001178:	2301      	movs	r3, #1
 800117a:	4a9d      	ldr	r2, [pc, #628]	; (80013f0 <__aeabi_fsub+0x34c>)
 800117c:	4003      	ands	r3, r0
 800117e:	0840      	lsrs	r0, r0, #1
 8001180:	4010      	ands	r0, r2
 8001182:	4318      	orrs	r0, r3
 8001184:	e7c8      	b.n	8001118 <__aeabi_fsub+0x74>
 8001186:	2e00      	cmp	r6, #0
 8001188:	d020      	beq.n	80011cc <__aeabi_fsub+0x128>
 800118a:	428c      	cmp	r4, r1
 800118c:	d023      	beq.n	80011d6 <__aeabi_fsub+0x132>
 800118e:	0028      	movs	r0, r5
 8001190:	38ff      	subs	r0, #255	; 0xff
 8001192:	2800      	cmp	r0, #0
 8001194:	d039      	beq.n	800120a <__aeabi_fsub+0x166>
 8001196:	1b57      	subs	r7, r2, r5
 8001198:	2d00      	cmp	r5, #0
 800119a:	d000      	beq.n	800119e <__aeabi_fsub+0xfa>
 800119c:	e09d      	b.n	80012da <__aeabi_fsub+0x236>
 800119e:	4663      	mov	r3, ip
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d100      	bne.n	80011a6 <__aeabi_fsub+0x102>
 80011a4:	e0db      	b.n	800135e <__aeabi_fsub+0x2ba>
 80011a6:	1e7b      	subs	r3, r7, #1
 80011a8:	2f01      	cmp	r7, #1
 80011aa:	d100      	bne.n	80011ae <__aeabi_fsub+0x10a>
 80011ac:	e10d      	b.n	80013ca <__aeabi_fsub+0x326>
 80011ae:	2fff      	cmp	r7, #255	; 0xff
 80011b0:	d071      	beq.n	8001296 <__aeabi_fsub+0x1f2>
 80011b2:	001f      	movs	r7, r3
 80011b4:	e098      	b.n	80012e8 <__aeabi_fsub+0x244>
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_fsub+0x118>
 80011ba:	e0a7      	b.n	800130c <__aeabi_fsub+0x268>
 80011bc:	1e42      	subs	r2, r0, #1
 80011be:	2801      	cmp	r0, #1
 80011c0:	d100      	bne.n	80011c4 <__aeabi_fsub+0x120>
 80011c2:	e0e6      	b.n	8001392 <__aeabi_fsub+0x2ee>
 80011c4:	28ff      	cmp	r0, #255	; 0xff
 80011c6:	d068      	beq.n	800129a <__aeabi_fsub+0x1f6>
 80011c8:	0010      	movs	r0, r2
 80011ca:	e78f      	b.n	80010ec <__aeabi_fsub+0x48>
 80011cc:	2001      	movs	r0, #1
 80011ce:	4041      	eors	r1, r0
 80011d0:	42a1      	cmp	r1, r4
 80011d2:	d000      	beq.n	80011d6 <__aeabi_fsub+0x132>
 80011d4:	e77f      	b.n	80010d6 <__aeabi_fsub+0x32>
 80011d6:	20ff      	movs	r0, #255	; 0xff
 80011d8:	4240      	negs	r0, r0
 80011da:	4680      	mov	r8, r0
 80011dc:	44a8      	add	r8, r5
 80011de:	4640      	mov	r0, r8
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d038      	beq.n	8001256 <__aeabi_fsub+0x1b2>
 80011e4:	1b51      	subs	r1, r2, r5
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x148>
 80011ea:	e0ae      	b.n	800134a <__aeabi_fsub+0x2a6>
 80011ec:	2aff      	cmp	r2, #255	; 0xff
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x14e>
 80011f0:	e0df      	b.n	80013b2 <__aeabi_fsub+0x30e>
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	4660      	mov	r0, ip
 80011f6:	04db      	lsls	r3, r3, #19
 80011f8:	4318      	orrs	r0, r3
 80011fa:	4684      	mov	ip, r0
 80011fc:	291b      	cmp	r1, #27
 80011fe:	dc00      	bgt.n	8001202 <__aeabi_fsub+0x15e>
 8001200:	e0d9      	b.n	80013b6 <__aeabi_fsub+0x312>
 8001202:	2001      	movs	r0, #1
 8001204:	0015      	movs	r5, r2
 8001206:	1980      	adds	r0, r0, r6
 8001208:	e7b1      	b.n	800116e <__aeabi_fsub+0xca>
 800120a:	20fe      	movs	r0, #254	; 0xfe
 800120c:	1c6a      	adds	r2, r5, #1
 800120e:	4210      	tst	r0, r2
 8001210:	d171      	bne.n	80012f6 <__aeabi_fsub+0x252>
 8001212:	2d00      	cmp	r5, #0
 8001214:	d000      	beq.n	8001218 <__aeabi_fsub+0x174>
 8001216:	e0a6      	b.n	8001366 <__aeabi_fsub+0x2c2>
 8001218:	4663      	mov	r3, ip
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <__aeabi_fsub+0x17c>
 800121e:	e0d9      	b.n	80013d4 <__aeabi_fsub+0x330>
 8001220:	2200      	movs	r2, #0
 8001222:	2e00      	cmp	r6, #0
 8001224:	d100      	bne.n	8001228 <__aeabi_fsub+0x184>
 8001226:	e788      	b.n	800113a <__aeabi_fsub+0x96>
 8001228:	1b98      	subs	r0, r3, r6
 800122a:	0143      	lsls	r3, r0, #5
 800122c:	d400      	bmi.n	8001230 <__aeabi_fsub+0x18c>
 800122e:	e0e1      	b.n	80013f4 <__aeabi_fsub+0x350>
 8001230:	4663      	mov	r3, ip
 8001232:	000c      	movs	r4, r1
 8001234:	1af0      	subs	r0, r6, r3
 8001236:	e76f      	b.n	8001118 <__aeabi_fsub+0x74>
 8001238:	2e00      	cmp	r6, #0
 800123a:	d100      	bne.n	800123e <__aeabi_fsub+0x19a>
 800123c:	e0b7      	b.n	80013ae <__aeabi_fsub+0x30a>
 800123e:	0002      	movs	r2, r0
 8001240:	3a01      	subs	r2, #1
 8001242:	2801      	cmp	r0, #1
 8001244:	d100      	bne.n	8001248 <__aeabi_fsub+0x1a4>
 8001246:	e09c      	b.n	8001382 <__aeabi_fsub+0x2de>
 8001248:	28ff      	cmp	r0, #255	; 0xff
 800124a:	d026      	beq.n	800129a <__aeabi_fsub+0x1f6>
 800124c:	4690      	mov	r8, r2
 800124e:	e788      	b.n	8001162 <__aeabi_fsub+0xbe>
 8001250:	22ff      	movs	r2, #255	; 0xff
 8001252:	2700      	movs	r7, #0
 8001254:	e771      	b.n	800113a <__aeabi_fsub+0x96>
 8001256:	20fe      	movs	r0, #254	; 0xfe
 8001258:	1c6a      	adds	r2, r5, #1
 800125a:	4210      	tst	r0, r2
 800125c:	d064      	beq.n	8001328 <__aeabi_fsub+0x284>
 800125e:	2aff      	cmp	r2, #255	; 0xff
 8001260:	d0f6      	beq.n	8001250 <__aeabi_fsub+0x1ac>
 8001262:	0015      	movs	r5, r2
 8001264:	4466      	add	r6, ip
 8001266:	0870      	lsrs	r0, r6, #1
 8001268:	0743      	lsls	r3, r0, #29
 800126a:	d000      	beq.n	800126e <__aeabi_fsub+0x1ca>
 800126c:	e756      	b.n	800111c <__aeabi_fsub+0x78>
 800126e:	08c3      	lsrs	r3, r0, #3
 8001270:	2dff      	cmp	r5, #255	; 0xff
 8001272:	d012      	beq.n	800129a <__aeabi_fsub+0x1f6>
 8001274:	025b      	lsls	r3, r3, #9
 8001276:	0a5f      	lsrs	r7, r3, #9
 8001278:	b2ea      	uxtb	r2, r5
 800127a:	e75e      	b.n	800113a <__aeabi_fsub+0x96>
 800127c:	4662      	mov	r2, ip
 800127e:	2a00      	cmp	r2, #0
 8001280:	d100      	bne.n	8001284 <__aeabi_fsub+0x1e0>
 8001282:	e096      	b.n	80013b2 <__aeabi_fsub+0x30e>
 8001284:	2e00      	cmp	r6, #0
 8001286:	d008      	beq.n	800129a <__aeabi_fsub+0x1f6>
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	03d2      	lsls	r2, r2, #15
 800128c:	4213      	tst	r3, r2
 800128e:	d004      	beq.n	800129a <__aeabi_fsub+0x1f6>
 8001290:	4648      	mov	r0, r9
 8001292:	4210      	tst	r0, r2
 8001294:	d101      	bne.n	800129a <__aeabi_fsub+0x1f6>
 8001296:	000c      	movs	r4, r1
 8001298:	464b      	mov	r3, r9
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0d8      	beq.n	8001250 <__aeabi_fsub+0x1ac>
 800129e:	2780      	movs	r7, #128	; 0x80
 80012a0:	03ff      	lsls	r7, r7, #15
 80012a2:	431f      	orrs	r7, r3
 80012a4:	027f      	lsls	r7, r7, #9
 80012a6:	22ff      	movs	r2, #255	; 0xff
 80012a8:	0a7f      	lsrs	r7, r7, #9
 80012aa:	e746      	b.n	800113a <__aeabi_fsub+0x96>
 80012ac:	2320      	movs	r3, #32
 80012ae:	003a      	movs	r2, r7
 80012b0:	1b45      	subs	r5, r0, r5
 80012b2:	0038      	movs	r0, r7
 80012b4:	3501      	adds	r5, #1
 80012b6:	40ea      	lsrs	r2, r5
 80012b8:	1b5d      	subs	r5, r3, r5
 80012ba:	40a8      	lsls	r0, r5
 80012bc:	1e43      	subs	r3, r0, #1
 80012be:	4198      	sbcs	r0, r3
 80012c0:	2500      	movs	r5, #0
 80012c2:	4310      	orrs	r0, r2
 80012c4:	e728      	b.n	8001118 <__aeabi_fsub+0x74>
 80012c6:	2320      	movs	r3, #32
 80012c8:	1a1b      	subs	r3, r3, r0
 80012ca:	0032      	movs	r2, r6
 80012cc:	409e      	lsls	r6, r3
 80012ce:	40c2      	lsrs	r2, r0
 80012d0:	0030      	movs	r0, r6
 80012d2:	1e43      	subs	r3, r0, #1
 80012d4:	4198      	sbcs	r0, r3
 80012d6:	4310      	orrs	r0, r2
 80012d8:	e70c      	b.n	80010f4 <__aeabi_fsub+0x50>
 80012da:	2aff      	cmp	r2, #255	; 0xff
 80012dc:	d0db      	beq.n	8001296 <__aeabi_fsub+0x1f2>
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	4660      	mov	r0, ip
 80012e2:	04db      	lsls	r3, r3, #19
 80012e4:	4318      	orrs	r0, r3
 80012e6:	4684      	mov	ip, r0
 80012e8:	2f1b      	cmp	r7, #27
 80012ea:	dd56      	ble.n	800139a <__aeabi_fsub+0x2f6>
 80012ec:	2001      	movs	r0, #1
 80012ee:	000c      	movs	r4, r1
 80012f0:	0015      	movs	r5, r2
 80012f2:	1a30      	subs	r0, r6, r0
 80012f4:	e700      	b.n	80010f8 <__aeabi_fsub+0x54>
 80012f6:	4663      	mov	r3, ip
 80012f8:	1b9f      	subs	r7, r3, r6
 80012fa:	017b      	lsls	r3, r7, #5
 80012fc:	d43d      	bmi.n	800137a <__aeabi_fsub+0x2d6>
 80012fe:	2f00      	cmp	r7, #0
 8001300:	d000      	beq.n	8001304 <__aeabi_fsub+0x260>
 8001302:	e6fe      	b.n	8001102 <__aeabi_fsub+0x5e>
 8001304:	2400      	movs	r4, #0
 8001306:	2200      	movs	r2, #0
 8001308:	2700      	movs	r7, #0
 800130a:	e716      	b.n	800113a <__aeabi_fsub+0x96>
 800130c:	0005      	movs	r5, r0
 800130e:	e7af      	b.n	8001270 <__aeabi_fsub+0x1cc>
 8001310:	0032      	movs	r2, r6
 8001312:	4643      	mov	r3, r8
 8001314:	4641      	mov	r1, r8
 8001316:	40da      	lsrs	r2, r3
 8001318:	2320      	movs	r3, #32
 800131a:	1a5b      	subs	r3, r3, r1
 800131c:	409e      	lsls	r6, r3
 800131e:	0030      	movs	r0, r6
 8001320:	1e43      	subs	r3, r0, #1
 8001322:	4198      	sbcs	r0, r3
 8001324:	4310      	orrs	r0, r2
 8001326:	e721      	b.n	800116c <__aeabi_fsub+0xc8>
 8001328:	2d00      	cmp	r5, #0
 800132a:	d1a7      	bne.n	800127c <__aeabi_fsub+0x1d8>
 800132c:	4663      	mov	r3, ip
 800132e:	2b00      	cmp	r3, #0
 8001330:	d059      	beq.n	80013e6 <__aeabi_fsub+0x342>
 8001332:	2200      	movs	r2, #0
 8001334:	2e00      	cmp	r6, #0
 8001336:	d100      	bne.n	800133a <__aeabi_fsub+0x296>
 8001338:	e6ff      	b.n	800113a <__aeabi_fsub+0x96>
 800133a:	0030      	movs	r0, r6
 800133c:	4460      	add	r0, ip
 800133e:	0143      	lsls	r3, r0, #5
 8001340:	d592      	bpl.n	8001268 <__aeabi_fsub+0x1c4>
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <__aeabi_fsub+0x348>)
 8001344:	3501      	adds	r5, #1
 8001346:	4018      	ands	r0, r3
 8001348:	e78e      	b.n	8001268 <__aeabi_fsub+0x1c4>
 800134a:	4663      	mov	r3, ip
 800134c:	2b00      	cmp	r3, #0
 800134e:	d047      	beq.n	80013e0 <__aeabi_fsub+0x33c>
 8001350:	1e4b      	subs	r3, r1, #1
 8001352:	2901      	cmp	r1, #1
 8001354:	d015      	beq.n	8001382 <__aeabi_fsub+0x2de>
 8001356:	29ff      	cmp	r1, #255	; 0xff
 8001358:	d02b      	beq.n	80013b2 <__aeabi_fsub+0x30e>
 800135a:	0019      	movs	r1, r3
 800135c:	e74e      	b.n	80011fc <__aeabi_fsub+0x158>
 800135e:	000c      	movs	r4, r1
 8001360:	464b      	mov	r3, r9
 8001362:	003d      	movs	r5, r7
 8001364:	e784      	b.n	8001270 <__aeabi_fsub+0x1cc>
 8001366:	4662      	mov	r2, ip
 8001368:	2a00      	cmp	r2, #0
 800136a:	d18b      	bne.n	8001284 <__aeabi_fsub+0x1e0>
 800136c:	2e00      	cmp	r6, #0
 800136e:	d192      	bne.n	8001296 <__aeabi_fsub+0x1f2>
 8001370:	2780      	movs	r7, #128	; 0x80
 8001372:	2400      	movs	r4, #0
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	03ff      	lsls	r7, r7, #15
 8001378:	e6df      	b.n	800113a <__aeabi_fsub+0x96>
 800137a:	4663      	mov	r3, ip
 800137c:	000c      	movs	r4, r1
 800137e:	1af7      	subs	r7, r6, r3
 8001380:	e6bf      	b.n	8001102 <__aeabi_fsub+0x5e>
 8001382:	0030      	movs	r0, r6
 8001384:	4460      	add	r0, ip
 8001386:	2501      	movs	r5, #1
 8001388:	0143      	lsls	r3, r0, #5
 800138a:	d400      	bmi.n	800138e <__aeabi_fsub+0x2ea>
 800138c:	e76c      	b.n	8001268 <__aeabi_fsub+0x1c4>
 800138e:	2502      	movs	r5, #2
 8001390:	e6f2      	b.n	8001178 <__aeabi_fsub+0xd4>
 8001392:	4663      	mov	r3, ip
 8001394:	2501      	movs	r5, #1
 8001396:	1b98      	subs	r0, r3, r6
 8001398:	e6ae      	b.n	80010f8 <__aeabi_fsub+0x54>
 800139a:	2320      	movs	r3, #32
 800139c:	4664      	mov	r4, ip
 800139e:	4660      	mov	r0, ip
 80013a0:	40fc      	lsrs	r4, r7
 80013a2:	1bdf      	subs	r7, r3, r7
 80013a4:	40b8      	lsls	r0, r7
 80013a6:	1e43      	subs	r3, r0, #1
 80013a8:	4198      	sbcs	r0, r3
 80013aa:	4320      	orrs	r0, r4
 80013ac:	e79f      	b.n	80012ee <__aeabi_fsub+0x24a>
 80013ae:	0005      	movs	r5, r0
 80013b0:	e75e      	b.n	8001270 <__aeabi_fsub+0x1cc>
 80013b2:	464b      	mov	r3, r9
 80013b4:	e771      	b.n	800129a <__aeabi_fsub+0x1f6>
 80013b6:	2320      	movs	r3, #32
 80013b8:	4665      	mov	r5, ip
 80013ba:	4660      	mov	r0, ip
 80013bc:	40cd      	lsrs	r5, r1
 80013be:	1a59      	subs	r1, r3, r1
 80013c0:	4088      	lsls	r0, r1
 80013c2:	1e43      	subs	r3, r0, #1
 80013c4:	4198      	sbcs	r0, r3
 80013c6:	4328      	orrs	r0, r5
 80013c8:	e71c      	b.n	8001204 <__aeabi_fsub+0x160>
 80013ca:	4663      	mov	r3, ip
 80013cc:	000c      	movs	r4, r1
 80013ce:	2501      	movs	r5, #1
 80013d0:	1af0      	subs	r0, r6, r3
 80013d2:	e691      	b.n	80010f8 <__aeabi_fsub+0x54>
 80013d4:	2e00      	cmp	r6, #0
 80013d6:	d095      	beq.n	8001304 <__aeabi_fsub+0x260>
 80013d8:	000c      	movs	r4, r1
 80013da:	464f      	mov	r7, r9
 80013dc:	2200      	movs	r2, #0
 80013de:	e6ac      	b.n	800113a <__aeabi_fsub+0x96>
 80013e0:	464b      	mov	r3, r9
 80013e2:	000d      	movs	r5, r1
 80013e4:	e744      	b.n	8001270 <__aeabi_fsub+0x1cc>
 80013e6:	464f      	mov	r7, r9
 80013e8:	2200      	movs	r2, #0
 80013ea:	e6a6      	b.n	800113a <__aeabi_fsub+0x96>
 80013ec:	fbffffff 	.word	0xfbffffff
 80013f0:	7dffffff 	.word	0x7dffffff
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d000      	beq.n	80013fa <__aeabi_fsub+0x356>
 80013f8:	e736      	b.n	8001268 <__aeabi_fsub+0x1c4>
 80013fa:	2400      	movs	r4, #0
 80013fc:	2700      	movs	r7, #0
 80013fe:	e69c      	b.n	800113a <__aeabi_fsub+0x96>

08001400 <__aeabi_i2f>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	2800      	cmp	r0, #0
 8001404:	d013      	beq.n	800142e <__aeabi_i2f+0x2e>
 8001406:	17c3      	asrs	r3, r0, #31
 8001408:	18c6      	adds	r6, r0, r3
 800140a:	405e      	eors	r6, r3
 800140c:	0fc4      	lsrs	r4, r0, #31
 800140e:	0030      	movs	r0, r6
 8001410:	f001 feb4 	bl	800317c <__clzsi2>
 8001414:	239e      	movs	r3, #158	; 0x9e
 8001416:	0005      	movs	r5, r0
 8001418:	1a1b      	subs	r3, r3, r0
 800141a:	2b96      	cmp	r3, #150	; 0x96
 800141c:	dc0f      	bgt.n	800143e <__aeabi_i2f+0x3e>
 800141e:	2808      	cmp	r0, #8
 8001420:	dd01      	ble.n	8001426 <__aeabi_i2f+0x26>
 8001422:	3d08      	subs	r5, #8
 8001424:	40ae      	lsls	r6, r5
 8001426:	0276      	lsls	r6, r6, #9
 8001428:	0a76      	lsrs	r6, r6, #9
 800142a:	b2d8      	uxtb	r0, r3
 800142c:	e002      	b.n	8001434 <__aeabi_i2f+0x34>
 800142e:	2400      	movs	r4, #0
 8001430:	2000      	movs	r0, #0
 8001432:	2600      	movs	r6, #0
 8001434:	05c0      	lsls	r0, r0, #23
 8001436:	4330      	orrs	r0, r6
 8001438:	07e4      	lsls	r4, r4, #31
 800143a:	4320      	orrs	r0, r4
 800143c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800143e:	2b99      	cmp	r3, #153	; 0x99
 8001440:	dd0c      	ble.n	800145c <__aeabi_i2f+0x5c>
 8001442:	2205      	movs	r2, #5
 8001444:	0031      	movs	r1, r6
 8001446:	1a12      	subs	r2, r2, r0
 8001448:	40d1      	lsrs	r1, r2
 800144a:	000a      	movs	r2, r1
 800144c:	0001      	movs	r1, r0
 800144e:	0030      	movs	r0, r6
 8001450:	311b      	adds	r1, #27
 8001452:	4088      	lsls	r0, r1
 8001454:	1e41      	subs	r1, r0, #1
 8001456:	4188      	sbcs	r0, r1
 8001458:	4302      	orrs	r2, r0
 800145a:	0016      	movs	r6, r2
 800145c:	2d05      	cmp	r5, #5
 800145e:	dc12      	bgt.n	8001486 <__aeabi_i2f+0x86>
 8001460:	0031      	movs	r1, r6
 8001462:	4f0d      	ldr	r7, [pc, #52]	; (8001498 <__aeabi_i2f+0x98>)
 8001464:	4039      	ands	r1, r7
 8001466:	0772      	lsls	r2, r6, #29
 8001468:	d009      	beq.n	800147e <__aeabi_i2f+0x7e>
 800146a:	200f      	movs	r0, #15
 800146c:	4030      	ands	r0, r6
 800146e:	2804      	cmp	r0, #4
 8001470:	d005      	beq.n	800147e <__aeabi_i2f+0x7e>
 8001472:	3104      	adds	r1, #4
 8001474:	014a      	lsls	r2, r1, #5
 8001476:	d502      	bpl.n	800147e <__aeabi_i2f+0x7e>
 8001478:	239f      	movs	r3, #159	; 0x9f
 800147a:	4039      	ands	r1, r7
 800147c:	1b5b      	subs	r3, r3, r5
 800147e:	0189      	lsls	r1, r1, #6
 8001480:	0a4e      	lsrs	r6, r1, #9
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	e7d6      	b.n	8001434 <__aeabi_i2f+0x34>
 8001486:	1f6a      	subs	r2, r5, #5
 8001488:	4096      	lsls	r6, r2
 800148a:	0031      	movs	r1, r6
 800148c:	4f02      	ldr	r7, [pc, #8]	; (8001498 <__aeabi_i2f+0x98>)
 800148e:	4039      	ands	r1, r7
 8001490:	0772      	lsls	r2, r6, #29
 8001492:	d0f4      	beq.n	800147e <__aeabi_i2f+0x7e>
 8001494:	e7e9      	b.n	800146a <__aeabi_i2f+0x6a>
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	fbffffff 	.word	0xfbffffff

0800149c <__aeabi_ui2f>:
 800149c:	b570      	push	{r4, r5, r6, lr}
 800149e:	1e05      	subs	r5, r0, #0
 80014a0:	d00e      	beq.n	80014c0 <__aeabi_ui2f+0x24>
 80014a2:	f001 fe6b 	bl	800317c <__clzsi2>
 80014a6:	239e      	movs	r3, #158	; 0x9e
 80014a8:	0004      	movs	r4, r0
 80014aa:	1a1b      	subs	r3, r3, r0
 80014ac:	2b96      	cmp	r3, #150	; 0x96
 80014ae:	dc0c      	bgt.n	80014ca <__aeabi_ui2f+0x2e>
 80014b0:	2808      	cmp	r0, #8
 80014b2:	dd01      	ble.n	80014b8 <__aeabi_ui2f+0x1c>
 80014b4:	3c08      	subs	r4, #8
 80014b6:	40a5      	lsls	r5, r4
 80014b8:	026d      	lsls	r5, r5, #9
 80014ba:	0a6d      	lsrs	r5, r5, #9
 80014bc:	b2d8      	uxtb	r0, r3
 80014be:	e001      	b.n	80014c4 <__aeabi_ui2f+0x28>
 80014c0:	2000      	movs	r0, #0
 80014c2:	2500      	movs	r5, #0
 80014c4:	05c0      	lsls	r0, r0, #23
 80014c6:	4328      	orrs	r0, r5
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
 80014ca:	2b99      	cmp	r3, #153	; 0x99
 80014cc:	dd09      	ble.n	80014e2 <__aeabi_ui2f+0x46>
 80014ce:	0002      	movs	r2, r0
 80014d0:	0029      	movs	r1, r5
 80014d2:	321b      	adds	r2, #27
 80014d4:	4091      	lsls	r1, r2
 80014d6:	1e4a      	subs	r2, r1, #1
 80014d8:	4191      	sbcs	r1, r2
 80014da:	2205      	movs	r2, #5
 80014dc:	1a12      	subs	r2, r2, r0
 80014de:	40d5      	lsrs	r5, r2
 80014e0:	430d      	orrs	r5, r1
 80014e2:	2c05      	cmp	r4, #5
 80014e4:	dc12      	bgt.n	800150c <__aeabi_ui2f+0x70>
 80014e6:	0029      	movs	r1, r5
 80014e8:	4e0c      	ldr	r6, [pc, #48]	; (800151c <__aeabi_ui2f+0x80>)
 80014ea:	4031      	ands	r1, r6
 80014ec:	076a      	lsls	r2, r5, #29
 80014ee:	d009      	beq.n	8001504 <__aeabi_ui2f+0x68>
 80014f0:	200f      	movs	r0, #15
 80014f2:	4028      	ands	r0, r5
 80014f4:	2804      	cmp	r0, #4
 80014f6:	d005      	beq.n	8001504 <__aeabi_ui2f+0x68>
 80014f8:	3104      	adds	r1, #4
 80014fa:	014a      	lsls	r2, r1, #5
 80014fc:	d502      	bpl.n	8001504 <__aeabi_ui2f+0x68>
 80014fe:	239f      	movs	r3, #159	; 0x9f
 8001500:	4031      	ands	r1, r6
 8001502:	1b1b      	subs	r3, r3, r4
 8001504:	0189      	lsls	r1, r1, #6
 8001506:	0a4d      	lsrs	r5, r1, #9
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	e7db      	b.n	80014c4 <__aeabi_ui2f+0x28>
 800150c:	1f62      	subs	r2, r4, #5
 800150e:	4095      	lsls	r5, r2
 8001510:	0029      	movs	r1, r5
 8001512:	4e02      	ldr	r6, [pc, #8]	; (800151c <__aeabi_ui2f+0x80>)
 8001514:	4031      	ands	r1, r6
 8001516:	076a      	lsls	r2, r5, #29
 8001518:	d0f4      	beq.n	8001504 <__aeabi_ui2f+0x68>
 800151a:	e7e9      	b.n	80014f0 <__aeabi_ui2f+0x54>
 800151c:	fbffffff 	.word	0xfbffffff

08001520 <__aeabi_dadd>:
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	464f      	mov	r7, r9
 8001524:	4646      	mov	r6, r8
 8001526:	46d6      	mov	lr, sl
 8001528:	000d      	movs	r5, r1
 800152a:	0004      	movs	r4, r0
 800152c:	b5c0      	push	{r6, r7, lr}
 800152e:	001f      	movs	r7, r3
 8001530:	0011      	movs	r1, r2
 8001532:	0328      	lsls	r0, r5, #12
 8001534:	0f62      	lsrs	r2, r4, #29
 8001536:	0a40      	lsrs	r0, r0, #9
 8001538:	4310      	orrs	r0, r2
 800153a:	007a      	lsls	r2, r7, #1
 800153c:	0d52      	lsrs	r2, r2, #21
 800153e:	00e3      	lsls	r3, r4, #3
 8001540:	033c      	lsls	r4, r7, #12
 8001542:	4691      	mov	r9, r2
 8001544:	0a64      	lsrs	r4, r4, #9
 8001546:	0ffa      	lsrs	r2, r7, #31
 8001548:	0f4f      	lsrs	r7, r1, #29
 800154a:	006e      	lsls	r6, r5, #1
 800154c:	4327      	orrs	r7, r4
 800154e:	4692      	mov	sl, r2
 8001550:	46b8      	mov	r8, r7
 8001552:	0d76      	lsrs	r6, r6, #21
 8001554:	0fed      	lsrs	r5, r5, #31
 8001556:	00c9      	lsls	r1, r1, #3
 8001558:	4295      	cmp	r5, r2
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x3e>
 800155c:	e099      	b.n	8001692 <__aeabi_dadd+0x172>
 800155e:	464c      	mov	r4, r9
 8001560:	1b34      	subs	r4, r6, r4
 8001562:	46a4      	mov	ip, r4
 8001564:	2c00      	cmp	r4, #0
 8001566:	dc00      	bgt.n	800156a <__aeabi_dadd+0x4a>
 8001568:	e07c      	b.n	8001664 <__aeabi_dadd+0x144>
 800156a:	464a      	mov	r2, r9
 800156c:	2a00      	cmp	r2, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x52>
 8001570:	e0b8      	b.n	80016e4 <__aeabi_dadd+0x1c4>
 8001572:	4ac5      	ldr	r2, [pc, #788]	; (8001888 <__aeabi_dadd+0x368>)
 8001574:	4296      	cmp	r6, r2
 8001576:	d100      	bne.n	800157a <__aeabi_dadd+0x5a>
 8001578:	e11c      	b.n	80017b4 <__aeabi_dadd+0x294>
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	003c      	movs	r4, r7
 800157e:	0412      	lsls	r2, r2, #16
 8001580:	4314      	orrs	r4, r2
 8001582:	46a0      	mov	r8, r4
 8001584:	4662      	mov	r2, ip
 8001586:	2a38      	cmp	r2, #56	; 0x38
 8001588:	dd00      	ble.n	800158c <__aeabi_dadd+0x6c>
 800158a:	e161      	b.n	8001850 <__aeabi_dadd+0x330>
 800158c:	2a1f      	cmp	r2, #31
 800158e:	dd00      	ble.n	8001592 <__aeabi_dadd+0x72>
 8001590:	e1cc      	b.n	800192c <__aeabi_dadd+0x40c>
 8001592:	4664      	mov	r4, ip
 8001594:	2220      	movs	r2, #32
 8001596:	1b12      	subs	r2, r2, r4
 8001598:	4644      	mov	r4, r8
 800159a:	4094      	lsls	r4, r2
 800159c:	000f      	movs	r7, r1
 800159e:	46a1      	mov	r9, r4
 80015a0:	4664      	mov	r4, ip
 80015a2:	4091      	lsls	r1, r2
 80015a4:	40e7      	lsrs	r7, r4
 80015a6:	464c      	mov	r4, r9
 80015a8:	1e4a      	subs	r2, r1, #1
 80015aa:	4191      	sbcs	r1, r2
 80015ac:	433c      	orrs	r4, r7
 80015ae:	4642      	mov	r2, r8
 80015b0:	4321      	orrs	r1, r4
 80015b2:	4664      	mov	r4, ip
 80015b4:	40e2      	lsrs	r2, r4
 80015b6:	1a80      	subs	r0, r0, r2
 80015b8:	1a5c      	subs	r4, r3, r1
 80015ba:	42a3      	cmp	r3, r4
 80015bc:	419b      	sbcs	r3, r3
 80015be:	425f      	negs	r7, r3
 80015c0:	1bc7      	subs	r7, r0, r7
 80015c2:	023b      	lsls	r3, r7, #8
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_dadd+0xa8>
 80015c6:	e0d0      	b.n	800176a <__aeabi_dadd+0x24a>
 80015c8:	027f      	lsls	r7, r7, #9
 80015ca:	0a7f      	lsrs	r7, r7, #9
 80015cc:	2f00      	cmp	r7, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dadd+0xb2>
 80015d0:	e0ff      	b.n	80017d2 <__aeabi_dadd+0x2b2>
 80015d2:	0038      	movs	r0, r7
 80015d4:	f001 fdd2 	bl	800317c <__clzsi2>
 80015d8:	0001      	movs	r1, r0
 80015da:	3908      	subs	r1, #8
 80015dc:	2320      	movs	r3, #32
 80015de:	0022      	movs	r2, r4
 80015e0:	1a5b      	subs	r3, r3, r1
 80015e2:	408f      	lsls	r7, r1
 80015e4:	40da      	lsrs	r2, r3
 80015e6:	408c      	lsls	r4, r1
 80015e8:	4317      	orrs	r7, r2
 80015ea:	42b1      	cmp	r1, r6
 80015ec:	da00      	bge.n	80015f0 <__aeabi_dadd+0xd0>
 80015ee:	e0ff      	b.n	80017f0 <__aeabi_dadd+0x2d0>
 80015f0:	1b89      	subs	r1, r1, r6
 80015f2:	1c4b      	adds	r3, r1, #1
 80015f4:	2b1f      	cmp	r3, #31
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dadd+0xda>
 80015f8:	e0a8      	b.n	800174c <__aeabi_dadd+0x22c>
 80015fa:	2220      	movs	r2, #32
 80015fc:	0039      	movs	r1, r7
 80015fe:	1ad2      	subs	r2, r2, r3
 8001600:	0020      	movs	r0, r4
 8001602:	4094      	lsls	r4, r2
 8001604:	4091      	lsls	r1, r2
 8001606:	40d8      	lsrs	r0, r3
 8001608:	1e62      	subs	r2, r4, #1
 800160a:	4194      	sbcs	r4, r2
 800160c:	40df      	lsrs	r7, r3
 800160e:	2600      	movs	r6, #0
 8001610:	4301      	orrs	r1, r0
 8001612:	430c      	orrs	r4, r1
 8001614:	0763      	lsls	r3, r4, #29
 8001616:	d009      	beq.n	800162c <__aeabi_dadd+0x10c>
 8001618:	230f      	movs	r3, #15
 800161a:	4023      	ands	r3, r4
 800161c:	2b04      	cmp	r3, #4
 800161e:	d005      	beq.n	800162c <__aeabi_dadd+0x10c>
 8001620:	1d23      	adds	r3, r4, #4
 8001622:	42a3      	cmp	r3, r4
 8001624:	41a4      	sbcs	r4, r4
 8001626:	4264      	negs	r4, r4
 8001628:	193f      	adds	r7, r7, r4
 800162a:	001c      	movs	r4, r3
 800162c:	023b      	lsls	r3, r7, #8
 800162e:	d400      	bmi.n	8001632 <__aeabi_dadd+0x112>
 8001630:	e09e      	b.n	8001770 <__aeabi_dadd+0x250>
 8001632:	4b95      	ldr	r3, [pc, #596]	; (8001888 <__aeabi_dadd+0x368>)
 8001634:	3601      	adds	r6, #1
 8001636:	429e      	cmp	r6, r3
 8001638:	d100      	bne.n	800163c <__aeabi_dadd+0x11c>
 800163a:	e0b7      	b.n	80017ac <__aeabi_dadd+0x28c>
 800163c:	4a93      	ldr	r2, [pc, #588]	; (800188c <__aeabi_dadd+0x36c>)
 800163e:	08e4      	lsrs	r4, r4, #3
 8001640:	4017      	ands	r7, r2
 8001642:	077b      	lsls	r3, r7, #29
 8001644:	0571      	lsls	r1, r6, #21
 8001646:	027f      	lsls	r7, r7, #9
 8001648:	4323      	orrs	r3, r4
 800164a:	0b3f      	lsrs	r7, r7, #12
 800164c:	0d4a      	lsrs	r2, r1, #21
 800164e:	0512      	lsls	r2, r2, #20
 8001650:	433a      	orrs	r2, r7
 8001652:	07ed      	lsls	r5, r5, #31
 8001654:	432a      	orrs	r2, r5
 8001656:	0018      	movs	r0, r3
 8001658:	0011      	movs	r1, r2
 800165a:	bce0      	pop	{r5, r6, r7}
 800165c:	46ba      	mov	sl, r7
 800165e:	46b1      	mov	r9, r6
 8001660:	46a8      	mov	r8, r5
 8001662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001664:	2c00      	cmp	r4, #0
 8001666:	d04b      	beq.n	8001700 <__aeabi_dadd+0x1e0>
 8001668:	464c      	mov	r4, r9
 800166a:	1ba4      	subs	r4, r4, r6
 800166c:	46a4      	mov	ip, r4
 800166e:	2e00      	cmp	r6, #0
 8001670:	d000      	beq.n	8001674 <__aeabi_dadd+0x154>
 8001672:	e123      	b.n	80018bc <__aeabi_dadd+0x39c>
 8001674:	0004      	movs	r4, r0
 8001676:	431c      	orrs	r4, r3
 8001678:	d100      	bne.n	800167c <__aeabi_dadd+0x15c>
 800167a:	e1af      	b.n	80019dc <__aeabi_dadd+0x4bc>
 800167c:	4662      	mov	r2, ip
 800167e:	1e54      	subs	r4, r2, #1
 8001680:	2a01      	cmp	r2, #1
 8001682:	d100      	bne.n	8001686 <__aeabi_dadd+0x166>
 8001684:	e215      	b.n	8001ab2 <__aeabi_dadd+0x592>
 8001686:	4d80      	ldr	r5, [pc, #512]	; (8001888 <__aeabi_dadd+0x368>)
 8001688:	45ac      	cmp	ip, r5
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x16e>
 800168c:	e1c8      	b.n	8001a20 <__aeabi_dadd+0x500>
 800168e:	46a4      	mov	ip, r4
 8001690:	e11b      	b.n	80018ca <__aeabi_dadd+0x3aa>
 8001692:	464a      	mov	r2, r9
 8001694:	1ab2      	subs	r2, r6, r2
 8001696:	4694      	mov	ip, r2
 8001698:	2a00      	cmp	r2, #0
 800169a:	dc00      	bgt.n	800169e <__aeabi_dadd+0x17e>
 800169c:	e0ac      	b.n	80017f8 <__aeabi_dadd+0x2d8>
 800169e:	464a      	mov	r2, r9
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	d043      	beq.n	800172c <__aeabi_dadd+0x20c>
 80016a4:	4a78      	ldr	r2, [pc, #480]	; (8001888 <__aeabi_dadd+0x368>)
 80016a6:	4296      	cmp	r6, r2
 80016a8:	d100      	bne.n	80016ac <__aeabi_dadd+0x18c>
 80016aa:	e1af      	b.n	8001a0c <__aeabi_dadd+0x4ec>
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	003c      	movs	r4, r7
 80016b0:	0412      	lsls	r2, r2, #16
 80016b2:	4314      	orrs	r4, r2
 80016b4:	46a0      	mov	r8, r4
 80016b6:	4662      	mov	r2, ip
 80016b8:	2a38      	cmp	r2, #56	; 0x38
 80016ba:	dc67      	bgt.n	800178c <__aeabi_dadd+0x26c>
 80016bc:	2a1f      	cmp	r2, #31
 80016be:	dc00      	bgt.n	80016c2 <__aeabi_dadd+0x1a2>
 80016c0:	e15f      	b.n	8001982 <__aeabi_dadd+0x462>
 80016c2:	4647      	mov	r7, r8
 80016c4:	3a20      	subs	r2, #32
 80016c6:	40d7      	lsrs	r7, r2
 80016c8:	4662      	mov	r2, ip
 80016ca:	2a20      	cmp	r2, #32
 80016cc:	d005      	beq.n	80016da <__aeabi_dadd+0x1ba>
 80016ce:	4664      	mov	r4, ip
 80016d0:	2240      	movs	r2, #64	; 0x40
 80016d2:	1b12      	subs	r2, r2, r4
 80016d4:	4644      	mov	r4, r8
 80016d6:	4094      	lsls	r4, r2
 80016d8:	4321      	orrs	r1, r4
 80016da:	1e4a      	subs	r2, r1, #1
 80016dc:	4191      	sbcs	r1, r2
 80016de:	000c      	movs	r4, r1
 80016e0:	433c      	orrs	r4, r7
 80016e2:	e057      	b.n	8001794 <__aeabi_dadd+0x274>
 80016e4:	003a      	movs	r2, r7
 80016e6:	430a      	orrs	r2, r1
 80016e8:	d100      	bne.n	80016ec <__aeabi_dadd+0x1cc>
 80016ea:	e105      	b.n	80018f8 <__aeabi_dadd+0x3d8>
 80016ec:	0022      	movs	r2, r4
 80016ee:	3a01      	subs	r2, #1
 80016f0:	2c01      	cmp	r4, #1
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0x1d6>
 80016f4:	e182      	b.n	80019fc <__aeabi_dadd+0x4dc>
 80016f6:	4c64      	ldr	r4, [pc, #400]	; (8001888 <__aeabi_dadd+0x368>)
 80016f8:	45a4      	cmp	ip, r4
 80016fa:	d05b      	beq.n	80017b4 <__aeabi_dadd+0x294>
 80016fc:	4694      	mov	ip, r2
 80016fe:	e741      	b.n	8001584 <__aeabi_dadd+0x64>
 8001700:	4c63      	ldr	r4, [pc, #396]	; (8001890 <__aeabi_dadd+0x370>)
 8001702:	1c77      	adds	r7, r6, #1
 8001704:	4227      	tst	r7, r4
 8001706:	d000      	beq.n	800170a <__aeabi_dadd+0x1ea>
 8001708:	e0c4      	b.n	8001894 <__aeabi_dadd+0x374>
 800170a:	0004      	movs	r4, r0
 800170c:	431c      	orrs	r4, r3
 800170e:	2e00      	cmp	r6, #0
 8001710:	d000      	beq.n	8001714 <__aeabi_dadd+0x1f4>
 8001712:	e169      	b.n	80019e8 <__aeabi_dadd+0x4c8>
 8001714:	2c00      	cmp	r4, #0
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x1fa>
 8001718:	e1bf      	b.n	8001a9a <__aeabi_dadd+0x57a>
 800171a:	4644      	mov	r4, r8
 800171c:	430c      	orrs	r4, r1
 800171e:	d000      	beq.n	8001722 <__aeabi_dadd+0x202>
 8001720:	e1d0      	b.n	8001ac4 <__aeabi_dadd+0x5a4>
 8001722:	0742      	lsls	r2, r0, #29
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	4313      	orrs	r3, r2
 8001728:	08c0      	lsrs	r0, r0, #3
 800172a:	e029      	b.n	8001780 <__aeabi_dadd+0x260>
 800172c:	003a      	movs	r2, r7
 800172e:	430a      	orrs	r2, r1
 8001730:	d100      	bne.n	8001734 <__aeabi_dadd+0x214>
 8001732:	e170      	b.n	8001a16 <__aeabi_dadd+0x4f6>
 8001734:	4662      	mov	r2, ip
 8001736:	4664      	mov	r4, ip
 8001738:	3a01      	subs	r2, #1
 800173a:	2c01      	cmp	r4, #1
 800173c:	d100      	bne.n	8001740 <__aeabi_dadd+0x220>
 800173e:	e0e0      	b.n	8001902 <__aeabi_dadd+0x3e2>
 8001740:	4c51      	ldr	r4, [pc, #324]	; (8001888 <__aeabi_dadd+0x368>)
 8001742:	45a4      	cmp	ip, r4
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x228>
 8001746:	e161      	b.n	8001a0c <__aeabi_dadd+0x4ec>
 8001748:	4694      	mov	ip, r2
 800174a:	e7b4      	b.n	80016b6 <__aeabi_dadd+0x196>
 800174c:	003a      	movs	r2, r7
 800174e:	391f      	subs	r1, #31
 8001750:	40ca      	lsrs	r2, r1
 8001752:	0011      	movs	r1, r2
 8001754:	2b20      	cmp	r3, #32
 8001756:	d003      	beq.n	8001760 <__aeabi_dadd+0x240>
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	409f      	lsls	r7, r3
 800175e:	433c      	orrs	r4, r7
 8001760:	1e63      	subs	r3, r4, #1
 8001762:	419c      	sbcs	r4, r3
 8001764:	2700      	movs	r7, #0
 8001766:	2600      	movs	r6, #0
 8001768:	430c      	orrs	r4, r1
 800176a:	0763      	lsls	r3, r4, #29
 800176c:	d000      	beq.n	8001770 <__aeabi_dadd+0x250>
 800176e:	e753      	b.n	8001618 <__aeabi_dadd+0xf8>
 8001770:	46b4      	mov	ip, r6
 8001772:	08e4      	lsrs	r4, r4, #3
 8001774:	077b      	lsls	r3, r7, #29
 8001776:	4323      	orrs	r3, r4
 8001778:	08f8      	lsrs	r0, r7, #3
 800177a:	4a43      	ldr	r2, [pc, #268]	; (8001888 <__aeabi_dadd+0x368>)
 800177c:	4594      	cmp	ip, r2
 800177e:	d01d      	beq.n	80017bc <__aeabi_dadd+0x29c>
 8001780:	4662      	mov	r2, ip
 8001782:	0307      	lsls	r7, r0, #12
 8001784:	0552      	lsls	r2, r2, #21
 8001786:	0b3f      	lsrs	r7, r7, #12
 8001788:	0d52      	lsrs	r2, r2, #21
 800178a:	e760      	b.n	800164e <__aeabi_dadd+0x12e>
 800178c:	4644      	mov	r4, r8
 800178e:	430c      	orrs	r4, r1
 8001790:	1e62      	subs	r2, r4, #1
 8001792:	4194      	sbcs	r4, r2
 8001794:	18e4      	adds	r4, r4, r3
 8001796:	429c      	cmp	r4, r3
 8001798:	419b      	sbcs	r3, r3
 800179a:	425f      	negs	r7, r3
 800179c:	183f      	adds	r7, r7, r0
 800179e:	023b      	lsls	r3, r7, #8
 80017a0:	d5e3      	bpl.n	800176a <__aeabi_dadd+0x24a>
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <__aeabi_dadd+0x368>)
 80017a4:	3601      	adds	r6, #1
 80017a6:	429e      	cmp	r6, r3
 80017a8:	d000      	beq.n	80017ac <__aeabi_dadd+0x28c>
 80017aa:	e0b5      	b.n	8001918 <__aeabi_dadd+0x3f8>
 80017ac:	0032      	movs	r2, r6
 80017ae:	2700      	movs	r7, #0
 80017b0:	2300      	movs	r3, #0
 80017b2:	e74c      	b.n	800164e <__aeabi_dadd+0x12e>
 80017b4:	0742      	lsls	r2, r0, #29
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	08c0      	lsrs	r0, r0, #3
 80017bc:	001a      	movs	r2, r3
 80017be:	4302      	orrs	r2, r0
 80017c0:	d100      	bne.n	80017c4 <__aeabi_dadd+0x2a4>
 80017c2:	e1e1      	b.n	8001b88 <__aeabi_dadd+0x668>
 80017c4:	2780      	movs	r7, #128	; 0x80
 80017c6:	033f      	lsls	r7, r7, #12
 80017c8:	4307      	orrs	r7, r0
 80017ca:	033f      	lsls	r7, r7, #12
 80017cc:	4a2e      	ldr	r2, [pc, #184]	; (8001888 <__aeabi_dadd+0x368>)
 80017ce:	0b3f      	lsrs	r7, r7, #12
 80017d0:	e73d      	b.n	800164e <__aeabi_dadd+0x12e>
 80017d2:	0020      	movs	r0, r4
 80017d4:	f001 fcd2 	bl	800317c <__clzsi2>
 80017d8:	0001      	movs	r1, r0
 80017da:	3118      	adds	r1, #24
 80017dc:	291f      	cmp	r1, #31
 80017de:	dc00      	bgt.n	80017e2 <__aeabi_dadd+0x2c2>
 80017e0:	e6fc      	b.n	80015dc <__aeabi_dadd+0xbc>
 80017e2:	3808      	subs	r0, #8
 80017e4:	4084      	lsls	r4, r0
 80017e6:	0027      	movs	r7, r4
 80017e8:	2400      	movs	r4, #0
 80017ea:	42b1      	cmp	r1, r6
 80017ec:	db00      	blt.n	80017f0 <__aeabi_dadd+0x2d0>
 80017ee:	e6ff      	b.n	80015f0 <__aeabi_dadd+0xd0>
 80017f0:	4a26      	ldr	r2, [pc, #152]	; (800188c <__aeabi_dadd+0x36c>)
 80017f2:	1a76      	subs	r6, r6, r1
 80017f4:	4017      	ands	r7, r2
 80017f6:	e70d      	b.n	8001614 <__aeabi_dadd+0xf4>
 80017f8:	2a00      	cmp	r2, #0
 80017fa:	d02f      	beq.n	800185c <__aeabi_dadd+0x33c>
 80017fc:	464a      	mov	r2, r9
 80017fe:	1b92      	subs	r2, r2, r6
 8001800:	4694      	mov	ip, r2
 8001802:	2e00      	cmp	r6, #0
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x2e8>
 8001806:	e0ad      	b.n	8001964 <__aeabi_dadd+0x444>
 8001808:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <__aeabi_dadd+0x368>)
 800180a:	4591      	cmp	r9, r2
 800180c:	d100      	bne.n	8001810 <__aeabi_dadd+0x2f0>
 800180e:	e10f      	b.n	8001a30 <__aeabi_dadd+0x510>
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	0412      	lsls	r2, r2, #16
 8001814:	4310      	orrs	r0, r2
 8001816:	4662      	mov	r2, ip
 8001818:	2a38      	cmp	r2, #56	; 0x38
 800181a:	dd00      	ble.n	800181e <__aeabi_dadd+0x2fe>
 800181c:	e10f      	b.n	8001a3e <__aeabi_dadd+0x51e>
 800181e:	2a1f      	cmp	r2, #31
 8001820:	dd00      	ble.n	8001824 <__aeabi_dadd+0x304>
 8001822:	e180      	b.n	8001b26 <__aeabi_dadd+0x606>
 8001824:	4664      	mov	r4, ip
 8001826:	2220      	movs	r2, #32
 8001828:	001e      	movs	r6, r3
 800182a:	1b12      	subs	r2, r2, r4
 800182c:	4667      	mov	r7, ip
 800182e:	0004      	movs	r4, r0
 8001830:	4093      	lsls	r3, r2
 8001832:	4094      	lsls	r4, r2
 8001834:	40fe      	lsrs	r6, r7
 8001836:	1e5a      	subs	r2, r3, #1
 8001838:	4193      	sbcs	r3, r2
 800183a:	40f8      	lsrs	r0, r7
 800183c:	4334      	orrs	r4, r6
 800183e:	431c      	orrs	r4, r3
 8001840:	4480      	add	r8, r0
 8001842:	1864      	adds	r4, r4, r1
 8001844:	428c      	cmp	r4, r1
 8001846:	41bf      	sbcs	r7, r7
 8001848:	427f      	negs	r7, r7
 800184a:	464e      	mov	r6, r9
 800184c:	4447      	add	r7, r8
 800184e:	e7a6      	b.n	800179e <__aeabi_dadd+0x27e>
 8001850:	4642      	mov	r2, r8
 8001852:	430a      	orrs	r2, r1
 8001854:	0011      	movs	r1, r2
 8001856:	1e4a      	subs	r2, r1, #1
 8001858:	4191      	sbcs	r1, r2
 800185a:	e6ad      	b.n	80015b8 <__aeabi_dadd+0x98>
 800185c:	4c0c      	ldr	r4, [pc, #48]	; (8001890 <__aeabi_dadd+0x370>)
 800185e:	1c72      	adds	r2, r6, #1
 8001860:	4222      	tst	r2, r4
 8001862:	d000      	beq.n	8001866 <__aeabi_dadd+0x346>
 8001864:	e0a1      	b.n	80019aa <__aeabi_dadd+0x48a>
 8001866:	0002      	movs	r2, r0
 8001868:	431a      	orrs	r2, r3
 800186a:	2e00      	cmp	r6, #0
 800186c:	d000      	beq.n	8001870 <__aeabi_dadd+0x350>
 800186e:	e0fa      	b.n	8001a66 <__aeabi_dadd+0x546>
 8001870:	2a00      	cmp	r2, #0
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x356>
 8001874:	e145      	b.n	8001b02 <__aeabi_dadd+0x5e2>
 8001876:	003a      	movs	r2, r7
 8001878:	430a      	orrs	r2, r1
 800187a:	d000      	beq.n	800187e <__aeabi_dadd+0x35e>
 800187c:	e146      	b.n	8001b0c <__aeabi_dadd+0x5ec>
 800187e:	0742      	lsls	r2, r0, #29
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	4313      	orrs	r3, r2
 8001884:	08c0      	lsrs	r0, r0, #3
 8001886:	e77b      	b.n	8001780 <__aeabi_dadd+0x260>
 8001888:	000007ff 	.word	0x000007ff
 800188c:	ff7fffff 	.word	0xff7fffff
 8001890:	000007fe 	.word	0x000007fe
 8001894:	4647      	mov	r7, r8
 8001896:	1a5c      	subs	r4, r3, r1
 8001898:	1bc2      	subs	r2, r0, r7
 800189a:	42a3      	cmp	r3, r4
 800189c:	41bf      	sbcs	r7, r7
 800189e:	427f      	negs	r7, r7
 80018a0:	46b9      	mov	r9, r7
 80018a2:	0017      	movs	r7, r2
 80018a4:	464a      	mov	r2, r9
 80018a6:	1abf      	subs	r7, r7, r2
 80018a8:	023a      	lsls	r2, r7, #8
 80018aa:	d500      	bpl.n	80018ae <__aeabi_dadd+0x38e>
 80018ac:	e08d      	b.n	80019ca <__aeabi_dadd+0x4aa>
 80018ae:	0023      	movs	r3, r4
 80018b0:	433b      	orrs	r3, r7
 80018b2:	d000      	beq.n	80018b6 <__aeabi_dadd+0x396>
 80018b4:	e68a      	b.n	80015cc <__aeabi_dadd+0xac>
 80018b6:	2000      	movs	r0, #0
 80018b8:	2500      	movs	r5, #0
 80018ba:	e761      	b.n	8001780 <__aeabi_dadd+0x260>
 80018bc:	4cb4      	ldr	r4, [pc, #720]	; (8001b90 <__aeabi_dadd+0x670>)
 80018be:	45a1      	cmp	r9, r4
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dadd+0x3a4>
 80018c2:	e0ad      	b.n	8001a20 <__aeabi_dadd+0x500>
 80018c4:	2480      	movs	r4, #128	; 0x80
 80018c6:	0424      	lsls	r4, r4, #16
 80018c8:	4320      	orrs	r0, r4
 80018ca:	4664      	mov	r4, ip
 80018cc:	2c38      	cmp	r4, #56	; 0x38
 80018ce:	dc3d      	bgt.n	800194c <__aeabi_dadd+0x42c>
 80018d0:	4662      	mov	r2, ip
 80018d2:	2c1f      	cmp	r4, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dadd+0x3b8>
 80018d6:	e0b7      	b.n	8001a48 <__aeabi_dadd+0x528>
 80018d8:	2520      	movs	r5, #32
 80018da:	001e      	movs	r6, r3
 80018dc:	1b2d      	subs	r5, r5, r4
 80018de:	0004      	movs	r4, r0
 80018e0:	40ab      	lsls	r3, r5
 80018e2:	40ac      	lsls	r4, r5
 80018e4:	40d6      	lsrs	r6, r2
 80018e6:	40d0      	lsrs	r0, r2
 80018e8:	4642      	mov	r2, r8
 80018ea:	1e5d      	subs	r5, r3, #1
 80018ec:	41ab      	sbcs	r3, r5
 80018ee:	4334      	orrs	r4, r6
 80018f0:	1a12      	subs	r2, r2, r0
 80018f2:	4690      	mov	r8, r2
 80018f4:	4323      	orrs	r3, r4
 80018f6:	e02c      	b.n	8001952 <__aeabi_dadd+0x432>
 80018f8:	0742      	lsls	r2, r0, #29
 80018fa:	08db      	lsrs	r3, r3, #3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	08c0      	lsrs	r0, r0, #3
 8001900:	e73b      	b.n	800177a <__aeabi_dadd+0x25a>
 8001902:	185c      	adds	r4, r3, r1
 8001904:	429c      	cmp	r4, r3
 8001906:	419b      	sbcs	r3, r3
 8001908:	4440      	add	r0, r8
 800190a:	425b      	negs	r3, r3
 800190c:	18c7      	adds	r7, r0, r3
 800190e:	2601      	movs	r6, #1
 8001910:	023b      	lsls	r3, r7, #8
 8001912:	d400      	bmi.n	8001916 <__aeabi_dadd+0x3f6>
 8001914:	e729      	b.n	800176a <__aeabi_dadd+0x24a>
 8001916:	2602      	movs	r6, #2
 8001918:	4a9e      	ldr	r2, [pc, #632]	; (8001b94 <__aeabi_dadd+0x674>)
 800191a:	0863      	lsrs	r3, r4, #1
 800191c:	4017      	ands	r7, r2
 800191e:	2201      	movs	r2, #1
 8001920:	4014      	ands	r4, r2
 8001922:	431c      	orrs	r4, r3
 8001924:	07fb      	lsls	r3, r7, #31
 8001926:	431c      	orrs	r4, r3
 8001928:	087f      	lsrs	r7, r7, #1
 800192a:	e673      	b.n	8001614 <__aeabi_dadd+0xf4>
 800192c:	4644      	mov	r4, r8
 800192e:	3a20      	subs	r2, #32
 8001930:	40d4      	lsrs	r4, r2
 8001932:	4662      	mov	r2, ip
 8001934:	2a20      	cmp	r2, #32
 8001936:	d005      	beq.n	8001944 <__aeabi_dadd+0x424>
 8001938:	4667      	mov	r7, ip
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	1bd2      	subs	r2, r2, r7
 800193e:	4647      	mov	r7, r8
 8001940:	4097      	lsls	r7, r2
 8001942:	4339      	orrs	r1, r7
 8001944:	1e4a      	subs	r2, r1, #1
 8001946:	4191      	sbcs	r1, r2
 8001948:	4321      	orrs	r1, r4
 800194a:	e635      	b.n	80015b8 <__aeabi_dadd+0x98>
 800194c:	4303      	orrs	r3, r0
 800194e:	1e58      	subs	r0, r3, #1
 8001950:	4183      	sbcs	r3, r0
 8001952:	1acc      	subs	r4, r1, r3
 8001954:	42a1      	cmp	r1, r4
 8001956:	41bf      	sbcs	r7, r7
 8001958:	4643      	mov	r3, r8
 800195a:	427f      	negs	r7, r7
 800195c:	4655      	mov	r5, sl
 800195e:	464e      	mov	r6, r9
 8001960:	1bdf      	subs	r7, r3, r7
 8001962:	e62e      	b.n	80015c2 <__aeabi_dadd+0xa2>
 8001964:	0002      	movs	r2, r0
 8001966:	431a      	orrs	r2, r3
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x44c>
 800196a:	e0bd      	b.n	8001ae8 <__aeabi_dadd+0x5c8>
 800196c:	4662      	mov	r2, ip
 800196e:	4664      	mov	r4, ip
 8001970:	3a01      	subs	r2, #1
 8001972:	2c01      	cmp	r4, #1
 8001974:	d100      	bne.n	8001978 <__aeabi_dadd+0x458>
 8001976:	e0e5      	b.n	8001b44 <__aeabi_dadd+0x624>
 8001978:	4c85      	ldr	r4, [pc, #532]	; (8001b90 <__aeabi_dadd+0x670>)
 800197a:	45a4      	cmp	ip, r4
 800197c:	d058      	beq.n	8001a30 <__aeabi_dadd+0x510>
 800197e:	4694      	mov	ip, r2
 8001980:	e749      	b.n	8001816 <__aeabi_dadd+0x2f6>
 8001982:	4664      	mov	r4, ip
 8001984:	2220      	movs	r2, #32
 8001986:	1b12      	subs	r2, r2, r4
 8001988:	4644      	mov	r4, r8
 800198a:	4094      	lsls	r4, r2
 800198c:	000f      	movs	r7, r1
 800198e:	46a1      	mov	r9, r4
 8001990:	4664      	mov	r4, ip
 8001992:	4091      	lsls	r1, r2
 8001994:	40e7      	lsrs	r7, r4
 8001996:	464c      	mov	r4, r9
 8001998:	1e4a      	subs	r2, r1, #1
 800199a:	4191      	sbcs	r1, r2
 800199c:	433c      	orrs	r4, r7
 800199e:	4642      	mov	r2, r8
 80019a0:	430c      	orrs	r4, r1
 80019a2:	4661      	mov	r1, ip
 80019a4:	40ca      	lsrs	r2, r1
 80019a6:	1880      	adds	r0, r0, r2
 80019a8:	e6f4      	b.n	8001794 <__aeabi_dadd+0x274>
 80019aa:	4c79      	ldr	r4, [pc, #484]	; (8001b90 <__aeabi_dadd+0x670>)
 80019ac:	42a2      	cmp	r2, r4
 80019ae:	d100      	bne.n	80019b2 <__aeabi_dadd+0x492>
 80019b0:	e6fd      	b.n	80017ae <__aeabi_dadd+0x28e>
 80019b2:	1859      	adds	r1, r3, r1
 80019b4:	4299      	cmp	r1, r3
 80019b6:	419b      	sbcs	r3, r3
 80019b8:	4440      	add	r0, r8
 80019ba:	425f      	negs	r7, r3
 80019bc:	19c7      	adds	r7, r0, r7
 80019be:	07fc      	lsls	r4, r7, #31
 80019c0:	0849      	lsrs	r1, r1, #1
 80019c2:	0016      	movs	r6, r2
 80019c4:	430c      	orrs	r4, r1
 80019c6:	087f      	lsrs	r7, r7, #1
 80019c8:	e6cf      	b.n	800176a <__aeabi_dadd+0x24a>
 80019ca:	1acc      	subs	r4, r1, r3
 80019cc:	42a1      	cmp	r1, r4
 80019ce:	41bf      	sbcs	r7, r7
 80019d0:	4643      	mov	r3, r8
 80019d2:	427f      	negs	r7, r7
 80019d4:	1a18      	subs	r0, r3, r0
 80019d6:	4655      	mov	r5, sl
 80019d8:	1bc7      	subs	r7, r0, r7
 80019da:	e5f7      	b.n	80015cc <__aeabi_dadd+0xac>
 80019dc:	08c9      	lsrs	r1, r1, #3
 80019de:	077b      	lsls	r3, r7, #29
 80019e0:	4655      	mov	r5, sl
 80019e2:	430b      	orrs	r3, r1
 80019e4:	08f8      	lsrs	r0, r7, #3
 80019e6:	e6c8      	b.n	800177a <__aeabi_dadd+0x25a>
 80019e8:	2c00      	cmp	r4, #0
 80019ea:	d000      	beq.n	80019ee <__aeabi_dadd+0x4ce>
 80019ec:	e081      	b.n	8001af2 <__aeabi_dadd+0x5d2>
 80019ee:	4643      	mov	r3, r8
 80019f0:	430b      	orrs	r3, r1
 80019f2:	d115      	bne.n	8001a20 <__aeabi_dadd+0x500>
 80019f4:	2080      	movs	r0, #128	; 0x80
 80019f6:	2500      	movs	r5, #0
 80019f8:	0300      	lsls	r0, r0, #12
 80019fa:	e6e3      	b.n	80017c4 <__aeabi_dadd+0x2a4>
 80019fc:	1a5c      	subs	r4, r3, r1
 80019fe:	42a3      	cmp	r3, r4
 8001a00:	419b      	sbcs	r3, r3
 8001a02:	1bc7      	subs	r7, r0, r7
 8001a04:	425b      	negs	r3, r3
 8001a06:	2601      	movs	r6, #1
 8001a08:	1aff      	subs	r7, r7, r3
 8001a0a:	e5da      	b.n	80015c2 <__aeabi_dadd+0xa2>
 8001a0c:	0742      	lsls	r2, r0, #29
 8001a0e:	08db      	lsrs	r3, r3, #3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	08c0      	lsrs	r0, r0, #3
 8001a14:	e6d2      	b.n	80017bc <__aeabi_dadd+0x29c>
 8001a16:	0742      	lsls	r2, r0, #29
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	e6ac      	b.n	800177a <__aeabi_dadd+0x25a>
 8001a20:	4643      	mov	r3, r8
 8001a22:	4642      	mov	r2, r8
 8001a24:	08c9      	lsrs	r1, r1, #3
 8001a26:	075b      	lsls	r3, r3, #29
 8001a28:	4655      	mov	r5, sl
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	08d0      	lsrs	r0, r2, #3
 8001a2e:	e6c5      	b.n	80017bc <__aeabi_dadd+0x29c>
 8001a30:	4643      	mov	r3, r8
 8001a32:	4642      	mov	r2, r8
 8001a34:	075b      	lsls	r3, r3, #29
 8001a36:	08c9      	lsrs	r1, r1, #3
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	08d0      	lsrs	r0, r2, #3
 8001a3c:	e6be      	b.n	80017bc <__aeabi_dadd+0x29c>
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	001c      	movs	r4, r3
 8001a42:	1e63      	subs	r3, r4, #1
 8001a44:	419c      	sbcs	r4, r3
 8001a46:	e6fc      	b.n	8001842 <__aeabi_dadd+0x322>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	3c20      	subs	r4, #32
 8001a4c:	40e2      	lsrs	r2, r4
 8001a4e:	0014      	movs	r4, r2
 8001a50:	4662      	mov	r2, ip
 8001a52:	2a20      	cmp	r2, #32
 8001a54:	d003      	beq.n	8001a5e <__aeabi_dadd+0x53e>
 8001a56:	2540      	movs	r5, #64	; 0x40
 8001a58:	1aad      	subs	r5, r5, r2
 8001a5a:	40a8      	lsls	r0, r5
 8001a5c:	4303      	orrs	r3, r0
 8001a5e:	1e58      	subs	r0, r3, #1
 8001a60:	4183      	sbcs	r3, r0
 8001a62:	4323      	orrs	r3, r4
 8001a64:	e775      	b.n	8001952 <__aeabi_dadd+0x432>
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d0e2      	beq.n	8001a30 <__aeabi_dadd+0x510>
 8001a6a:	003a      	movs	r2, r7
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	d0cd      	beq.n	8001a0c <__aeabi_dadd+0x4ec>
 8001a70:	0742      	lsls	r2, r0, #29
 8001a72:	08db      	lsrs	r3, r3, #3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	08c0      	lsrs	r0, r0, #3
 8001a7a:	0312      	lsls	r2, r2, #12
 8001a7c:	4210      	tst	r0, r2
 8001a7e:	d006      	beq.n	8001a8e <__aeabi_dadd+0x56e>
 8001a80:	08fc      	lsrs	r4, r7, #3
 8001a82:	4214      	tst	r4, r2
 8001a84:	d103      	bne.n	8001a8e <__aeabi_dadd+0x56e>
 8001a86:	0020      	movs	r0, r4
 8001a88:	08cb      	lsrs	r3, r1, #3
 8001a8a:	077a      	lsls	r2, r7, #29
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	0f5a      	lsrs	r2, r3, #29
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	0752      	lsls	r2, r2, #29
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	4313      	orrs	r3, r2
 8001a98:	e690      	b.n	80017bc <__aeabi_dadd+0x29c>
 8001a9a:	4643      	mov	r3, r8
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dadd+0x582>
 8001aa0:	e709      	b.n	80018b6 <__aeabi_dadd+0x396>
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	4642      	mov	r2, r8
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	075b      	lsls	r3, r3, #29
 8001aaa:	4655      	mov	r5, sl
 8001aac:	430b      	orrs	r3, r1
 8001aae:	08d0      	lsrs	r0, r2, #3
 8001ab0:	e666      	b.n	8001780 <__aeabi_dadd+0x260>
 8001ab2:	1acc      	subs	r4, r1, r3
 8001ab4:	42a1      	cmp	r1, r4
 8001ab6:	4189      	sbcs	r1, r1
 8001ab8:	1a3f      	subs	r7, r7, r0
 8001aba:	4249      	negs	r1, r1
 8001abc:	4655      	mov	r5, sl
 8001abe:	2601      	movs	r6, #1
 8001ac0:	1a7f      	subs	r7, r7, r1
 8001ac2:	e57e      	b.n	80015c2 <__aeabi_dadd+0xa2>
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	1a5c      	subs	r4, r3, r1
 8001ac8:	1a87      	subs	r7, r0, r2
 8001aca:	42a3      	cmp	r3, r4
 8001acc:	4192      	sbcs	r2, r2
 8001ace:	4252      	negs	r2, r2
 8001ad0:	1abf      	subs	r7, r7, r2
 8001ad2:	023a      	lsls	r2, r7, #8
 8001ad4:	d53d      	bpl.n	8001b52 <__aeabi_dadd+0x632>
 8001ad6:	1acc      	subs	r4, r1, r3
 8001ad8:	42a1      	cmp	r1, r4
 8001ada:	4189      	sbcs	r1, r1
 8001adc:	4643      	mov	r3, r8
 8001ade:	4249      	negs	r1, r1
 8001ae0:	1a1f      	subs	r7, r3, r0
 8001ae2:	4655      	mov	r5, sl
 8001ae4:	1a7f      	subs	r7, r7, r1
 8001ae6:	e595      	b.n	8001614 <__aeabi_dadd+0xf4>
 8001ae8:	077b      	lsls	r3, r7, #29
 8001aea:	08c9      	lsrs	r1, r1, #3
 8001aec:	430b      	orrs	r3, r1
 8001aee:	08f8      	lsrs	r0, r7, #3
 8001af0:	e643      	b.n	800177a <__aeabi_dadd+0x25a>
 8001af2:	4644      	mov	r4, r8
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	430c      	orrs	r4, r1
 8001af8:	d130      	bne.n	8001b5c <__aeabi_dadd+0x63c>
 8001afa:	0742      	lsls	r2, r0, #29
 8001afc:	4313      	orrs	r3, r2
 8001afe:	08c0      	lsrs	r0, r0, #3
 8001b00:	e65c      	b.n	80017bc <__aeabi_dadd+0x29c>
 8001b02:	077b      	lsls	r3, r7, #29
 8001b04:	08c9      	lsrs	r1, r1, #3
 8001b06:	430b      	orrs	r3, r1
 8001b08:	08f8      	lsrs	r0, r7, #3
 8001b0a:	e639      	b.n	8001780 <__aeabi_dadd+0x260>
 8001b0c:	185c      	adds	r4, r3, r1
 8001b0e:	429c      	cmp	r4, r3
 8001b10:	419b      	sbcs	r3, r3
 8001b12:	4440      	add	r0, r8
 8001b14:	425b      	negs	r3, r3
 8001b16:	18c7      	adds	r7, r0, r3
 8001b18:	023b      	lsls	r3, r7, #8
 8001b1a:	d400      	bmi.n	8001b1e <__aeabi_dadd+0x5fe>
 8001b1c:	e625      	b.n	800176a <__aeabi_dadd+0x24a>
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <__aeabi_dadd+0x674>)
 8001b20:	2601      	movs	r6, #1
 8001b22:	401f      	ands	r7, r3
 8001b24:	e621      	b.n	800176a <__aeabi_dadd+0x24a>
 8001b26:	0004      	movs	r4, r0
 8001b28:	3a20      	subs	r2, #32
 8001b2a:	40d4      	lsrs	r4, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	2a20      	cmp	r2, #32
 8001b30:	d004      	beq.n	8001b3c <__aeabi_dadd+0x61c>
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	4666      	mov	r6, ip
 8001b36:	1b92      	subs	r2, r2, r6
 8001b38:	4090      	lsls	r0, r2
 8001b3a:	4303      	orrs	r3, r0
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	4193      	sbcs	r3, r2
 8001b40:	431c      	orrs	r4, r3
 8001b42:	e67e      	b.n	8001842 <__aeabi_dadd+0x322>
 8001b44:	185c      	adds	r4, r3, r1
 8001b46:	428c      	cmp	r4, r1
 8001b48:	4189      	sbcs	r1, r1
 8001b4a:	4440      	add	r0, r8
 8001b4c:	4249      	negs	r1, r1
 8001b4e:	1847      	adds	r7, r0, r1
 8001b50:	e6dd      	b.n	800190e <__aeabi_dadd+0x3ee>
 8001b52:	0023      	movs	r3, r4
 8001b54:	433b      	orrs	r3, r7
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dadd+0x63a>
 8001b58:	e6ad      	b.n	80018b6 <__aeabi_dadd+0x396>
 8001b5a:	e606      	b.n	800176a <__aeabi_dadd+0x24a>
 8001b5c:	0744      	lsls	r4, r0, #29
 8001b5e:	4323      	orrs	r3, r4
 8001b60:	2480      	movs	r4, #128	; 0x80
 8001b62:	08c0      	lsrs	r0, r0, #3
 8001b64:	0324      	lsls	r4, r4, #12
 8001b66:	4220      	tst	r0, r4
 8001b68:	d008      	beq.n	8001b7c <__aeabi_dadd+0x65c>
 8001b6a:	4642      	mov	r2, r8
 8001b6c:	08d6      	lsrs	r6, r2, #3
 8001b6e:	4226      	tst	r6, r4
 8001b70:	d104      	bne.n	8001b7c <__aeabi_dadd+0x65c>
 8001b72:	4655      	mov	r5, sl
 8001b74:	0030      	movs	r0, r6
 8001b76:	08cb      	lsrs	r3, r1, #3
 8001b78:	0751      	lsls	r1, r2, #29
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	0f5a      	lsrs	r2, r3, #29
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	0752      	lsls	r2, r2, #29
 8001b84:	4313      	orrs	r3, r2
 8001b86:	e619      	b.n	80017bc <__aeabi_dadd+0x29c>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	4a01      	ldr	r2, [pc, #4]	; (8001b90 <__aeabi_dadd+0x670>)
 8001b8c:	001f      	movs	r7, r3
 8001b8e:	e55e      	b.n	800164e <__aeabi_dadd+0x12e>
 8001b90:	000007ff 	.word	0x000007ff
 8001b94:	ff7fffff 	.word	0xff7fffff

08001b98 <__aeabi_ddiv>:
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	4657      	mov	r7, sl
 8001b9c:	464e      	mov	r6, r9
 8001b9e:	4645      	mov	r5, r8
 8001ba0:	46de      	mov	lr, fp
 8001ba2:	b5e0      	push	{r5, r6, r7, lr}
 8001ba4:	4681      	mov	r9, r0
 8001ba6:	0005      	movs	r5, r0
 8001ba8:	030c      	lsls	r4, r1, #12
 8001baa:	0048      	lsls	r0, r1, #1
 8001bac:	4692      	mov	sl, r2
 8001bae:	001f      	movs	r7, r3
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	0d40      	lsrs	r0, r0, #21
 8001bb6:	0fce      	lsrs	r6, r1, #31
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d100      	bne.n	8001bbe <__aeabi_ddiv+0x26>
 8001bbc:	e156      	b.n	8001e6c <__aeabi_ddiv+0x2d4>
 8001bbe:	4bd4      	ldr	r3, [pc, #848]	; (8001f10 <__aeabi_ddiv+0x378>)
 8001bc0:	4298      	cmp	r0, r3
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0x2e>
 8001bc4:	e172      	b.n	8001eac <__aeabi_ddiv+0x314>
 8001bc6:	0f6b      	lsrs	r3, r5, #29
 8001bc8:	00e4      	lsls	r4, r4, #3
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	4698      	mov	r8, r3
 8001bd4:	4bcf      	ldr	r3, [pc, #828]	; (8001f14 <__aeabi_ddiv+0x37c>)
 8001bd6:	00ed      	lsls	r5, r5, #3
 8001bd8:	469b      	mov	fp, r3
 8001bda:	2300      	movs	r3, #0
 8001bdc:	4699      	mov	r9, r3
 8001bde:	4483      	add	fp, r0
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	033c      	lsls	r4, r7, #12
 8001be4:	007b      	lsls	r3, r7, #1
 8001be6:	4650      	mov	r0, sl
 8001be8:	0b24      	lsrs	r4, r4, #12
 8001bea:	0d5b      	lsrs	r3, r3, #21
 8001bec:	0fff      	lsrs	r7, r7, #31
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_ddiv+0x5c>
 8001bf2:	e11f      	b.n	8001e34 <__aeabi_ddiv+0x29c>
 8001bf4:	4ac6      	ldr	r2, [pc, #792]	; (8001f10 <__aeabi_ddiv+0x378>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_ddiv+0x64>
 8001bfa:	e162      	b.n	8001ec2 <__aeabi_ddiv+0x32a>
 8001bfc:	49c5      	ldr	r1, [pc, #788]	; (8001f14 <__aeabi_ddiv+0x37c>)
 8001bfe:	0f42      	lsrs	r2, r0, #29
 8001c00:	468c      	mov	ip, r1
 8001c02:	00e4      	lsls	r4, r4, #3
 8001c04:	4659      	mov	r1, fp
 8001c06:	4314      	orrs	r4, r2
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	4463      	add	r3, ip
 8001c0c:	0412      	lsls	r2, r2, #16
 8001c0e:	1acb      	subs	r3, r1, r3
 8001c10:	4314      	orrs	r4, r2
 8001c12:	469b      	mov	fp, r3
 8001c14:	00c2      	lsls	r2, r0, #3
 8001c16:	2000      	movs	r0, #0
 8001c18:	0033      	movs	r3, r6
 8001c1a:	407b      	eors	r3, r7
 8001c1c:	469a      	mov	sl, r3
 8001c1e:	464b      	mov	r3, r9
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d827      	bhi.n	8001c74 <__aeabi_ddiv+0xdc>
 8001c24:	49bc      	ldr	r1, [pc, #752]	; (8001f18 <__aeabi_ddiv+0x380>)
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	58cb      	ldr	r3, [r1, r3]
 8001c2a:	469f      	mov	pc, r3
 8001c2c:	46b2      	mov	sl, r6
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d016      	beq.n	8001c62 <__aeabi_ddiv+0xca>
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d100      	bne.n	8001c3a <__aeabi_ddiv+0xa2>
 8001c38:	e28e      	b.n	8002158 <__aeabi_ddiv+0x5c0>
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_ddiv+0xa8>
 8001c3e:	e0d9      	b.n	8001df4 <__aeabi_ddiv+0x25c>
 8001c40:	2300      	movs	r3, #0
 8001c42:	2400      	movs	r4, #0
 8001c44:	2500      	movs	r5, #0
 8001c46:	4652      	mov	r2, sl
 8001c48:	051b      	lsls	r3, r3, #20
 8001c4a:	4323      	orrs	r3, r4
 8001c4c:	07d2      	lsls	r2, r2, #31
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	0028      	movs	r0, r5
 8001c52:	0019      	movs	r1, r3
 8001c54:	b005      	add	sp, #20
 8001c56:	bcf0      	pop	{r4, r5, r6, r7}
 8001c58:	46bb      	mov	fp, r7
 8001c5a:	46b2      	mov	sl, r6
 8001c5c:	46a9      	mov	r9, r5
 8001c5e:	46a0      	mov	r8, r4
 8001c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c62:	2400      	movs	r4, #0
 8001c64:	2500      	movs	r5, #0
 8001c66:	4baa      	ldr	r3, [pc, #680]	; (8001f10 <__aeabi_ddiv+0x378>)
 8001c68:	e7ed      	b.n	8001c46 <__aeabi_ddiv+0xae>
 8001c6a:	46ba      	mov	sl, r7
 8001c6c:	46a0      	mov	r8, r4
 8001c6e:	0015      	movs	r5, r2
 8001c70:	9000      	str	r0, [sp, #0]
 8001c72:	e7dc      	b.n	8001c2e <__aeabi_ddiv+0x96>
 8001c74:	4544      	cmp	r4, r8
 8001c76:	d200      	bcs.n	8001c7a <__aeabi_ddiv+0xe2>
 8001c78:	e1c7      	b.n	800200a <__aeabi_ddiv+0x472>
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_ddiv+0xe6>
 8001c7c:	e1c2      	b.n	8002004 <__aeabi_ddiv+0x46c>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	425b      	negs	r3, r3
 8001c82:	469c      	mov	ip, r3
 8001c84:	002e      	movs	r6, r5
 8001c86:	4640      	mov	r0, r8
 8001c88:	2500      	movs	r5, #0
 8001c8a:	44e3      	add	fp, ip
 8001c8c:	0223      	lsls	r3, r4, #8
 8001c8e:	0e14      	lsrs	r4, r2, #24
 8001c90:	431c      	orrs	r4, r3
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	4699      	mov	r9, r3
 8001c96:	0423      	lsls	r3, r4, #16
 8001c98:	0c1f      	lsrs	r7, r3, #16
 8001c9a:	0212      	lsls	r2, r2, #8
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	9200      	str	r2, [sp, #0]
 8001ca0:	9701      	str	r7, [sp, #4]
 8001ca2:	f7fe fad3 	bl	800024c <__aeabi_uidivmod>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	437a      	muls	r2, r7
 8001caa:	040b      	lsls	r3, r1, #16
 8001cac:	0c31      	lsrs	r1, r6, #16
 8001cae:	4680      	mov	r8, r0
 8001cb0:	4319      	orrs	r1, r3
 8001cb2:	428a      	cmp	r2, r1
 8001cb4:	d907      	bls.n	8001cc6 <__aeabi_ddiv+0x12e>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	425b      	negs	r3, r3
 8001cba:	469c      	mov	ip, r3
 8001cbc:	1909      	adds	r1, r1, r4
 8001cbe:	44e0      	add	r8, ip
 8001cc0:	428c      	cmp	r4, r1
 8001cc2:	d800      	bhi.n	8001cc6 <__aeabi_ddiv+0x12e>
 8001cc4:	e207      	b.n	80020d6 <__aeabi_ddiv+0x53e>
 8001cc6:	1a88      	subs	r0, r1, r2
 8001cc8:	4649      	mov	r1, r9
 8001cca:	f7fe fabf 	bl	800024c <__aeabi_uidivmod>
 8001cce:	0409      	lsls	r1, r1, #16
 8001cd0:	468c      	mov	ip, r1
 8001cd2:	0431      	lsls	r1, r6, #16
 8001cd4:	4666      	mov	r6, ip
 8001cd6:	9a01      	ldr	r2, [sp, #4]
 8001cd8:	0c09      	lsrs	r1, r1, #16
 8001cda:	4342      	muls	r2, r0
 8001cdc:	0003      	movs	r3, r0
 8001cde:	4331      	orrs	r1, r6
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	d904      	bls.n	8001cee <__aeabi_ddiv+0x156>
 8001ce4:	1909      	adds	r1, r1, r4
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	428c      	cmp	r4, r1
 8001cea:	d800      	bhi.n	8001cee <__aeabi_ddiv+0x156>
 8001cec:	e1ed      	b.n	80020ca <__aeabi_ddiv+0x532>
 8001cee:	1a88      	subs	r0, r1, r2
 8001cf0:	4642      	mov	r2, r8
 8001cf2:	0412      	lsls	r2, r2, #16
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	4690      	mov	r8, r2
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	9b00      	ldr	r3, [sp, #0]
 8001cfc:	040e      	lsls	r6, r1, #16
 8001cfe:	0c1b      	lsrs	r3, r3, #16
 8001d00:	001f      	movs	r7, r3
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	9b00      	ldr	r3, [sp, #0]
 8001d06:	0c36      	lsrs	r6, r6, #16
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	0c19      	lsrs	r1, r3, #16
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4373      	muls	r3, r6
 8001d10:	0c12      	lsrs	r2, r2, #16
 8001d12:	437e      	muls	r6, r7
 8001d14:	9103      	str	r1, [sp, #12]
 8001d16:	4351      	muls	r1, r2
 8001d18:	437a      	muls	r2, r7
 8001d1a:	0c1f      	lsrs	r7, r3, #16
 8001d1c:	46bc      	mov	ip, r7
 8001d1e:	1876      	adds	r6, r6, r1
 8001d20:	4466      	add	r6, ip
 8001d22:	42b1      	cmp	r1, r6
 8001d24:	d903      	bls.n	8001d2e <__aeabi_ddiv+0x196>
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0249      	lsls	r1, r1, #9
 8001d2a:	468c      	mov	ip, r1
 8001d2c:	4462      	add	r2, ip
 8001d2e:	0c31      	lsrs	r1, r6, #16
 8001d30:	188a      	adds	r2, r1, r2
 8001d32:	0431      	lsls	r1, r6, #16
 8001d34:	041e      	lsls	r6, r3, #16
 8001d36:	0c36      	lsrs	r6, r6, #16
 8001d38:	198e      	adds	r6, r1, r6
 8001d3a:	4290      	cmp	r0, r2
 8001d3c:	d302      	bcc.n	8001d44 <__aeabi_ddiv+0x1ac>
 8001d3e:	d112      	bne.n	8001d66 <__aeabi_ddiv+0x1ce>
 8001d40:	42b5      	cmp	r5, r6
 8001d42:	d210      	bcs.n	8001d66 <__aeabi_ddiv+0x1ce>
 8001d44:	4643      	mov	r3, r8
 8001d46:	1e59      	subs	r1, r3, #1
 8001d48:	9b00      	ldr	r3, [sp, #0]
 8001d4a:	469c      	mov	ip, r3
 8001d4c:	4465      	add	r5, ip
 8001d4e:	001f      	movs	r7, r3
 8001d50:	429d      	cmp	r5, r3
 8001d52:	419b      	sbcs	r3, r3
 8001d54:	425b      	negs	r3, r3
 8001d56:	191b      	adds	r3, r3, r4
 8001d58:	18c0      	adds	r0, r0, r3
 8001d5a:	4284      	cmp	r4, r0
 8001d5c:	d200      	bcs.n	8001d60 <__aeabi_ddiv+0x1c8>
 8001d5e:	e1a0      	b.n	80020a2 <__aeabi_ddiv+0x50a>
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x1cc>
 8001d62:	e19b      	b.n	800209c <__aeabi_ddiv+0x504>
 8001d64:	4688      	mov	r8, r1
 8001d66:	1bae      	subs	r6, r5, r6
 8001d68:	42b5      	cmp	r5, r6
 8001d6a:	41ad      	sbcs	r5, r5
 8001d6c:	1a80      	subs	r0, r0, r2
 8001d6e:	426d      	negs	r5, r5
 8001d70:	1b40      	subs	r0, r0, r5
 8001d72:	4284      	cmp	r4, r0
 8001d74:	d100      	bne.n	8001d78 <__aeabi_ddiv+0x1e0>
 8001d76:	e1d5      	b.n	8002124 <__aeabi_ddiv+0x58c>
 8001d78:	4649      	mov	r1, r9
 8001d7a:	f7fe fa67 	bl	800024c <__aeabi_uidivmod>
 8001d7e:	9a01      	ldr	r2, [sp, #4]
 8001d80:	040b      	lsls	r3, r1, #16
 8001d82:	4342      	muls	r2, r0
 8001d84:	0c31      	lsrs	r1, r6, #16
 8001d86:	0005      	movs	r5, r0
 8001d88:	4319      	orrs	r1, r3
 8001d8a:	428a      	cmp	r2, r1
 8001d8c:	d900      	bls.n	8001d90 <__aeabi_ddiv+0x1f8>
 8001d8e:	e16c      	b.n	800206a <__aeabi_ddiv+0x4d2>
 8001d90:	1a88      	subs	r0, r1, r2
 8001d92:	4649      	mov	r1, r9
 8001d94:	f7fe fa5a 	bl	800024c <__aeabi_uidivmod>
 8001d98:	9a01      	ldr	r2, [sp, #4]
 8001d9a:	0436      	lsls	r6, r6, #16
 8001d9c:	4342      	muls	r2, r0
 8001d9e:	0409      	lsls	r1, r1, #16
 8001da0:	0c36      	lsrs	r6, r6, #16
 8001da2:	0003      	movs	r3, r0
 8001da4:	430e      	orrs	r6, r1
 8001da6:	42b2      	cmp	r2, r6
 8001da8:	d900      	bls.n	8001dac <__aeabi_ddiv+0x214>
 8001daa:	e153      	b.n	8002054 <__aeabi_ddiv+0x4bc>
 8001dac:	9803      	ldr	r0, [sp, #12]
 8001dae:	1ab6      	subs	r6, r6, r2
 8001db0:	0002      	movs	r2, r0
 8001db2:	042d      	lsls	r5, r5, #16
 8001db4:	431d      	orrs	r5, r3
 8001db6:	9f02      	ldr	r7, [sp, #8]
 8001db8:	042b      	lsls	r3, r5, #16
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	435a      	muls	r2, r3
 8001dbe:	437b      	muls	r3, r7
 8001dc0:	469c      	mov	ip, r3
 8001dc2:	0c29      	lsrs	r1, r5, #16
 8001dc4:	4348      	muls	r0, r1
 8001dc6:	0c13      	lsrs	r3, r2, #16
 8001dc8:	4484      	add	ip, r0
 8001dca:	4463      	add	r3, ip
 8001dcc:	4379      	muls	r1, r7
 8001dce:	4298      	cmp	r0, r3
 8001dd0:	d903      	bls.n	8001dda <__aeabi_ddiv+0x242>
 8001dd2:	2080      	movs	r0, #128	; 0x80
 8001dd4:	0240      	lsls	r0, r0, #9
 8001dd6:	4684      	mov	ip, r0
 8001dd8:	4461      	add	r1, ip
 8001dda:	0c18      	lsrs	r0, r3, #16
 8001ddc:	0412      	lsls	r2, r2, #16
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	0c12      	lsrs	r2, r2, #16
 8001de2:	1841      	adds	r1, r0, r1
 8001de4:	189b      	adds	r3, r3, r2
 8001de6:	428e      	cmp	r6, r1
 8001de8:	d200      	bcs.n	8001dec <__aeabi_ddiv+0x254>
 8001dea:	e0ff      	b.n	8001fec <__aeabi_ddiv+0x454>
 8001dec:	d100      	bne.n	8001df0 <__aeabi_ddiv+0x258>
 8001dee:	e0fa      	b.n	8001fe6 <__aeabi_ddiv+0x44e>
 8001df0:	2301      	movs	r3, #1
 8001df2:	431d      	orrs	r5, r3
 8001df4:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <__aeabi_ddiv+0x384>)
 8001df6:	445a      	add	r2, fp
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	dc00      	bgt.n	8001dfe <__aeabi_ddiv+0x266>
 8001dfc:	e0aa      	b.n	8001f54 <__aeabi_ddiv+0x3bc>
 8001dfe:	076b      	lsls	r3, r5, #29
 8001e00:	d000      	beq.n	8001e04 <__aeabi_ddiv+0x26c>
 8001e02:	e13d      	b.n	8002080 <__aeabi_ddiv+0x4e8>
 8001e04:	08ed      	lsrs	r5, r5, #3
 8001e06:	4643      	mov	r3, r8
 8001e08:	01db      	lsls	r3, r3, #7
 8001e0a:	d506      	bpl.n	8001e1a <__aeabi_ddiv+0x282>
 8001e0c:	4642      	mov	r2, r8
 8001e0e:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <__aeabi_ddiv+0x388>)
 8001e10:	401a      	ands	r2, r3
 8001e12:	4690      	mov	r8, r2
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	00d2      	lsls	r2, r2, #3
 8001e18:	445a      	add	r2, fp
 8001e1a:	4b42      	ldr	r3, [pc, #264]	; (8001f24 <__aeabi_ddiv+0x38c>)
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dd00      	ble.n	8001e22 <__aeabi_ddiv+0x28a>
 8001e20:	e71f      	b.n	8001c62 <__aeabi_ddiv+0xca>
 8001e22:	4643      	mov	r3, r8
 8001e24:	075b      	lsls	r3, r3, #29
 8001e26:	431d      	orrs	r5, r3
 8001e28:	4643      	mov	r3, r8
 8001e2a:	0552      	lsls	r2, r2, #21
 8001e2c:	025c      	lsls	r4, r3, #9
 8001e2e:	0b24      	lsrs	r4, r4, #12
 8001e30:	0d53      	lsrs	r3, r2, #21
 8001e32:	e708      	b.n	8001c46 <__aeabi_ddiv+0xae>
 8001e34:	4652      	mov	r2, sl
 8001e36:	4322      	orrs	r2, r4
 8001e38:	d100      	bne.n	8001e3c <__aeabi_ddiv+0x2a4>
 8001e3a:	e07b      	b.n	8001f34 <__aeabi_ddiv+0x39c>
 8001e3c:	2c00      	cmp	r4, #0
 8001e3e:	d100      	bne.n	8001e42 <__aeabi_ddiv+0x2aa>
 8001e40:	e0fa      	b.n	8002038 <__aeabi_ddiv+0x4a0>
 8001e42:	0020      	movs	r0, r4
 8001e44:	f001 f99a 	bl	800317c <__clzsi2>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	3a0b      	subs	r2, #11
 8001e4c:	231d      	movs	r3, #29
 8001e4e:	0001      	movs	r1, r0
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	4652      	mov	r2, sl
 8001e54:	3908      	subs	r1, #8
 8001e56:	40da      	lsrs	r2, r3
 8001e58:	408c      	lsls	r4, r1
 8001e5a:	4314      	orrs	r4, r2
 8001e5c:	4652      	mov	r2, sl
 8001e5e:	408a      	lsls	r2, r1
 8001e60:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <__aeabi_ddiv+0x390>)
 8001e62:	4458      	add	r0, fp
 8001e64:	469b      	mov	fp, r3
 8001e66:	4483      	add	fp, r0
 8001e68:	2000      	movs	r0, #0
 8001e6a:	e6d5      	b.n	8001c18 <__aeabi_ddiv+0x80>
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	4698      	mov	r8, r3
 8001e72:	d044      	beq.n	8001efe <__aeabi_ddiv+0x366>
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	d100      	bne.n	8001e7a <__aeabi_ddiv+0x2e2>
 8001e78:	e0ce      	b.n	8002018 <__aeabi_ddiv+0x480>
 8001e7a:	0020      	movs	r0, r4
 8001e7c:	f001 f97e 	bl	800317c <__clzsi2>
 8001e80:	0001      	movs	r1, r0
 8001e82:	0002      	movs	r2, r0
 8001e84:	390b      	subs	r1, #11
 8001e86:	231d      	movs	r3, #29
 8001e88:	1a5b      	subs	r3, r3, r1
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	0010      	movs	r0, r2
 8001e8e:	40d9      	lsrs	r1, r3
 8001e90:	3808      	subs	r0, #8
 8001e92:	4084      	lsls	r4, r0
 8001e94:	000b      	movs	r3, r1
 8001e96:	464d      	mov	r5, r9
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	4085      	lsls	r5, r0
 8001e9e:	4823      	ldr	r0, [pc, #140]	; (8001f2c <__aeabi_ddiv+0x394>)
 8001ea0:	1a83      	subs	r3, r0, r2
 8001ea2:	469b      	mov	fp, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4699      	mov	r9, r3
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	e69a      	b.n	8001be2 <__aeabi_ddiv+0x4a>
 8001eac:	464b      	mov	r3, r9
 8001eae:	4323      	orrs	r3, r4
 8001eb0:	4698      	mov	r8, r3
 8001eb2:	d11d      	bne.n	8001ef0 <__aeabi_ddiv+0x358>
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	3b06      	subs	r3, #6
 8001eba:	2500      	movs	r5, #0
 8001ebc:	4683      	mov	fp, r0
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	e68f      	b.n	8001be2 <__aeabi_ddiv+0x4a>
 8001ec2:	4652      	mov	r2, sl
 8001ec4:	4322      	orrs	r2, r4
 8001ec6:	d109      	bne.n	8001edc <__aeabi_ddiv+0x344>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	4649      	mov	r1, r9
 8001ecc:	4319      	orrs	r1, r3
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <__aeabi_ddiv+0x398>)
 8001ed0:	4689      	mov	r9, r1
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	44e3      	add	fp, ip
 8001eda:	e69d      	b.n	8001c18 <__aeabi_ddiv+0x80>
 8001edc:	2303      	movs	r3, #3
 8001ede:	464a      	mov	r2, r9
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <__aeabi_ddiv+0x398>)
 8001ee4:	4691      	mov	r9, r2
 8001ee6:	469c      	mov	ip, r3
 8001ee8:	4652      	mov	r2, sl
 8001eea:	2003      	movs	r0, #3
 8001eec:	44e3      	add	fp, ip
 8001eee:	e693      	b.n	8001c18 <__aeabi_ddiv+0x80>
 8001ef0:	230c      	movs	r3, #12
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	3b09      	subs	r3, #9
 8001ef6:	46a0      	mov	r8, r4
 8001ef8:	4683      	mov	fp, r0
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	e671      	b.n	8001be2 <__aeabi_ddiv+0x4a>
 8001efe:	2304      	movs	r3, #4
 8001f00:	4699      	mov	r9, r3
 8001f02:	2300      	movs	r3, #0
 8001f04:	469b      	mov	fp, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	2500      	movs	r5, #0
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	e669      	b.n	8001be2 <__aeabi_ddiv+0x4a>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	000007ff 	.word	0x000007ff
 8001f14:	fffffc01 	.word	0xfffffc01
 8001f18:	0800b8ac 	.word	0x0800b8ac
 8001f1c:	000003ff 	.word	0x000003ff
 8001f20:	feffffff 	.word	0xfeffffff
 8001f24:	000007fe 	.word	0x000007fe
 8001f28:	000003f3 	.word	0x000003f3
 8001f2c:	fffffc0d 	.word	0xfffffc0d
 8001f30:	fffff801 	.word	0xfffff801
 8001f34:	4649      	mov	r1, r9
 8001f36:	2301      	movs	r3, #1
 8001f38:	4319      	orrs	r1, r3
 8001f3a:	4689      	mov	r9, r1
 8001f3c:	2400      	movs	r4, #0
 8001f3e:	2001      	movs	r0, #1
 8001f40:	e66a      	b.n	8001c18 <__aeabi_ddiv+0x80>
 8001f42:	2300      	movs	r3, #0
 8001f44:	2480      	movs	r4, #128	; 0x80
 8001f46:	469a      	mov	sl, r3
 8001f48:	2500      	movs	r5, #0
 8001f4a:	4b8a      	ldr	r3, [pc, #552]	; (8002174 <__aeabi_ddiv+0x5dc>)
 8001f4c:	0324      	lsls	r4, r4, #12
 8001f4e:	e67a      	b.n	8001c46 <__aeabi_ddiv+0xae>
 8001f50:	2501      	movs	r5, #1
 8001f52:	426d      	negs	r5, r5
 8001f54:	2301      	movs	r3, #1
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	2b38      	cmp	r3, #56	; 0x38
 8001f5a:	dd00      	ble.n	8001f5e <__aeabi_ddiv+0x3c6>
 8001f5c:	e670      	b.n	8001c40 <__aeabi_ddiv+0xa8>
 8001f5e:	2b1f      	cmp	r3, #31
 8001f60:	dc00      	bgt.n	8001f64 <__aeabi_ddiv+0x3cc>
 8001f62:	e0bf      	b.n	80020e4 <__aeabi_ddiv+0x54c>
 8001f64:	211f      	movs	r1, #31
 8001f66:	4249      	negs	r1, r1
 8001f68:	1a8a      	subs	r2, r1, r2
 8001f6a:	4641      	mov	r1, r8
 8001f6c:	40d1      	lsrs	r1, r2
 8001f6e:	000a      	movs	r2, r1
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d004      	beq.n	8001f7e <__aeabi_ddiv+0x3e6>
 8001f74:	4641      	mov	r1, r8
 8001f76:	4b80      	ldr	r3, [pc, #512]	; (8002178 <__aeabi_ddiv+0x5e0>)
 8001f78:	445b      	add	r3, fp
 8001f7a:	4099      	lsls	r1, r3
 8001f7c:	430d      	orrs	r5, r1
 8001f7e:	1e6b      	subs	r3, r5, #1
 8001f80:	419d      	sbcs	r5, r3
 8001f82:	2307      	movs	r3, #7
 8001f84:	432a      	orrs	r2, r5
 8001f86:	001d      	movs	r5, r3
 8001f88:	2400      	movs	r4, #0
 8001f8a:	4015      	ands	r5, r2
 8001f8c:	4213      	tst	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_ddiv+0x3fa>
 8001f90:	e0d4      	b.n	800213c <__aeabi_ddiv+0x5a4>
 8001f92:	210f      	movs	r1, #15
 8001f94:	2300      	movs	r3, #0
 8001f96:	4011      	ands	r1, r2
 8001f98:	2904      	cmp	r1, #4
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_ddiv+0x406>
 8001f9c:	e0cb      	b.n	8002136 <__aeabi_ddiv+0x59e>
 8001f9e:	1d11      	adds	r1, r2, #4
 8001fa0:	4291      	cmp	r1, r2
 8001fa2:	4192      	sbcs	r2, r2
 8001fa4:	4252      	negs	r2, r2
 8001fa6:	189b      	adds	r3, r3, r2
 8001fa8:	000a      	movs	r2, r1
 8001faa:	0219      	lsls	r1, r3, #8
 8001fac:	d400      	bmi.n	8001fb0 <__aeabi_ddiv+0x418>
 8001fae:	e0c2      	b.n	8002136 <__aeabi_ddiv+0x59e>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	2400      	movs	r4, #0
 8001fb4:	2500      	movs	r5, #0
 8001fb6:	e646      	b.n	8001c46 <__aeabi_ddiv+0xae>
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	4641      	mov	r1, r8
 8001fbc:	031b      	lsls	r3, r3, #12
 8001fbe:	4219      	tst	r1, r3
 8001fc0:	d008      	beq.n	8001fd4 <__aeabi_ddiv+0x43c>
 8001fc2:	421c      	tst	r4, r3
 8001fc4:	d106      	bne.n	8001fd4 <__aeabi_ddiv+0x43c>
 8001fc6:	431c      	orrs	r4, r3
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	46ba      	mov	sl, r7
 8001fcc:	0015      	movs	r5, r2
 8001fce:	4b69      	ldr	r3, [pc, #420]	; (8002174 <__aeabi_ddiv+0x5dc>)
 8001fd0:	0b24      	lsrs	r4, r4, #12
 8001fd2:	e638      	b.n	8001c46 <__aeabi_ddiv+0xae>
 8001fd4:	2480      	movs	r4, #128	; 0x80
 8001fd6:	4643      	mov	r3, r8
 8001fd8:	0324      	lsls	r4, r4, #12
 8001fda:	431c      	orrs	r4, r3
 8001fdc:	0324      	lsls	r4, r4, #12
 8001fde:	46b2      	mov	sl, r6
 8001fe0:	4b64      	ldr	r3, [pc, #400]	; (8002174 <__aeabi_ddiv+0x5dc>)
 8001fe2:	0b24      	lsrs	r4, r4, #12
 8001fe4:	e62f      	b.n	8001c46 <__aeabi_ddiv+0xae>
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_ddiv+0x454>
 8001fea:	e703      	b.n	8001df4 <__aeabi_ddiv+0x25c>
 8001fec:	19a6      	adds	r6, r4, r6
 8001fee:	1e68      	subs	r0, r5, #1
 8001ff0:	42a6      	cmp	r6, r4
 8001ff2:	d200      	bcs.n	8001ff6 <__aeabi_ddiv+0x45e>
 8001ff4:	e08d      	b.n	8002112 <__aeabi_ddiv+0x57a>
 8001ff6:	428e      	cmp	r6, r1
 8001ff8:	d200      	bcs.n	8001ffc <__aeabi_ddiv+0x464>
 8001ffa:	e0a3      	b.n	8002144 <__aeabi_ddiv+0x5ac>
 8001ffc:	d100      	bne.n	8002000 <__aeabi_ddiv+0x468>
 8001ffe:	e0b3      	b.n	8002168 <__aeabi_ddiv+0x5d0>
 8002000:	0005      	movs	r5, r0
 8002002:	e6f5      	b.n	8001df0 <__aeabi_ddiv+0x258>
 8002004:	42aa      	cmp	r2, r5
 8002006:	d900      	bls.n	800200a <__aeabi_ddiv+0x472>
 8002008:	e639      	b.n	8001c7e <__aeabi_ddiv+0xe6>
 800200a:	4643      	mov	r3, r8
 800200c:	07de      	lsls	r6, r3, #31
 800200e:	0858      	lsrs	r0, r3, #1
 8002010:	086b      	lsrs	r3, r5, #1
 8002012:	431e      	orrs	r6, r3
 8002014:	07ed      	lsls	r5, r5, #31
 8002016:	e639      	b.n	8001c8c <__aeabi_ddiv+0xf4>
 8002018:	4648      	mov	r0, r9
 800201a:	f001 f8af 	bl	800317c <__clzsi2>
 800201e:	0001      	movs	r1, r0
 8002020:	0002      	movs	r2, r0
 8002022:	3115      	adds	r1, #21
 8002024:	3220      	adds	r2, #32
 8002026:	291c      	cmp	r1, #28
 8002028:	dc00      	bgt.n	800202c <__aeabi_ddiv+0x494>
 800202a:	e72c      	b.n	8001e86 <__aeabi_ddiv+0x2ee>
 800202c:	464b      	mov	r3, r9
 800202e:	3808      	subs	r0, #8
 8002030:	4083      	lsls	r3, r0
 8002032:	2500      	movs	r5, #0
 8002034:	4698      	mov	r8, r3
 8002036:	e732      	b.n	8001e9e <__aeabi_ddiv+0x306>
 8002038:	f001 f8a0 	bl	800317c <__clzsi2>
 800203c:	0003      	movs	r3, r0
 800203e:	001a      	movs	r2, r3
 8002040:	3215      	adds	r2, #21
 8002042:	3020      	adds	r0, #32
 8002044:	2a1c      	cmp	r2, #28
 8002046:	dc00      	bgt.n	800204a <__aeabi_ddiv+0x4b2>
 8002048:	e700      	b.n	8001e4c <__aeabi_ddiv+0x2b4>
 800204a:	4654      	mov	r4, sl
 800204c:	3b08      	subs	r3, #8
 800204e:	2200      	movs	r2, #0
 8002050:	409c      	lsls	r4, r3
 8002052:	e705      	b.n	8001e60 <__aeabi_ddiv+0x2c8>
 8002054:	1936      	adds	r6, r6, r4
 8002056:	3b01      	subs	r3, #1
 8002058:	42b4      	cmp	r4, r6
 800205a:	d900      	bls.n	800205e <__aeabi_ddiv+0x4c6>
 800205c:	e6a6      	b.n	8001dac <__aeabi_ddiv+0x214>
 800205e:	42b2      	cmp	r2, r6
 8002060:	d800      	bhi.n	8002064 <__aeabi_ddiv+0x4cc>
 8002062:	e6a3      	b.n	8001dac <__aeabi_ddiv+0x214>
 8002064:	1e83      	subs	r3, r0, #2
 8002066:	1936      	adds	r6, r6, r4
 8002068:	e6a0      	b.n	8001dac <__aeabi_ddiv+0x214>
 800206a:	1909      	adds	r1, r1, r4
 800206c:	3d01      	subs	r5, #1
 800206e:	428c      	cmp	r4, r1
 8002070:	d900      	bls.n	8002074 <__aeabi_ddiv+0x4dc>
 8002072:	e68d      	b.n	8001d90 <__aeabi_ddiv+0x1f8>
 8002074:	428a      	cmp	r2, r1
 8002076:	d800      	bhi.n	800207a <__aeabi_ddiv+0x4e2>
 8002078:	e68a      	b.n	8001d90 <__aeabi_ddiv+0x1f8>
 800207a:	1e85      	subs	r5, r0, #2
 800207c:	1909      	adds	r1, r1, r4
 800207e:	e687      	b.n	8001d90 <__aeabi_ddiv+0x1f8>
 8002080:	230f      	movs	r3, #15
 8002082:	402b      	ands	r3, r5
 8002084:	2b04      	cmp	r3, #4
 8002086:	d100      	bne.n	800208a <__aeabi_ddiv+0x4f2>
 8002088:	e6bc      	b.n	8001e04 <__aeabi_ddiv+0x26c>
 800208a:	2305      	movs	r3, #5
 800208c:	425b      	negs	r3, r3
 800208e:	42ab      	cmp	r3, r5
 8002090:	419b      	sbcs	r3, r3
 8002092:	3504      	adds	r5, #4
 8002094:	425b      	negs	r3, r3
 8002096:	08ed      	lsrs	r5, r5, #3
 8002098:	4498      	add	r8, r3
 800209a:	e6b4      	b.n	8001e06 <__aeabi_ddiv+0x26e>
 800209c:	42af      	cmp	r7, r5
 800209e:	d900      	bls.n	80020a2 <__aeabi_ddiv+0x50a>
 80020a0:	e660      	b.n	8001d64 <__aeabi_ddiv+0x1cc>
 80020a2:	4282      	cmp	r2, r0
 80020a4:	d804      	bhi.n	80020b0 <__aeabi_ddiv+0x518>
 80020a6:	d000      	beq.n	80020aa <__aeabi_ddiv+0x512>
 80020a8:	e65c      	b.n	8001d64 <__aeabi_ddiv+0x1cc>
 80020aa:	42ae      	cmp	r6, r5
 80020ac:	d800      	bhi.n	80020b0 <__aeabi_ddiv+0x518>
 80020ae:	e659      	b.n	8001d64 <__aeabi_ddiv+0x1cc>
 80020b0:	2302      	movs	r3, #2
 80020b2:	425b      	negs	r3, r3
 80020b4:	469c      	mov	ip, r3
 80020b6:	9b00      	ldr	r3, [sp, #0]
 80020b8:	44e0      	add	r8, ip
 80020ba:	469c      	mov	ip, r3
 80020bc:	4465      	add	r5, ip
 80020be:	429d      	cmp	r5, r3
 80020c0:	419b      	sbcs	r3, r3
 80020c2:	425b      	negs	r3, r3
 80020c4:	191b      	adds	r3, r3, r4
 80020c6:	18c0      	adds	r0, r0, r3
 80020c8:	e64d      	b.n	8001d66 <__aeabi_ddiv+0x1ce>
 80020ca:	428a      	cmp	r2, r1
 80020cc:	d800      	bhi.n	80020d0 <__aeabi_ddiv+0x538>
 80020ce:	e60e      	b.n	8001cee <__aeabi_ddiv+0x156>
 80020d0:	1e83      	subs	r3, r0, #2
 80020d2:	1909      	adds	r1, r1, r4
 80020d4:	e60b      	b.n	8001cee <__aeabi_ddiv+0x156>
 80020d6:	428a      	cmp	r2, r1
 80020d8:	d800      	bhi.n	80020dc <__aeabi_ddiv+0x544>
 80020da:	e5f4      	b.n	8001cc6 <__aeabi_ddiv+0x12e>
 80020dc:	1e83      	subs	r3, r0, #2
 80020de:	4698      	mov	r8, r3
 80020e0:	1909      	adds	r1, r1, r4
 80020e2:	e5f0      	b.n	8001cc6 <__aeabi_ddiv+0x12e>
 80020e4:	4925      	ldr	r1, [pc, #148]	; (800217c <__aeabi_ddiv+0x5e4>)
 80020e6:	0028      	movs	r0, r5
 80020e8:	4459      	add	r1, fp
 80020ea:	408d      	lsls	r5, r1
 80020ec:	4642      	mov	r2, r8
 80020ee:	408a      	lsls	r2, r1
 80020f0:	1e69      	subs	r1, r5, #1
 80020f2:	418d      	sbcs	r5, r1
 80020f4:	4641      	mov	r1, r8
 80020f6:	40d8      	lsrs	r0, r3
 80020f8:	40d9      	lsrs	r1, r3
 80020fa:	4302      	orrs	r2, r0
 80020fc:	432a      	orrs	r2, r5
 80020fe:	000b      	movs	r3, r1
 8002100:	0751      	lsls	r1, r2, #29
 8002102:	d100      	bne.n	8002106 <__aeabi_ddiv+0x56e>
 8002104:	e751      	b.n	8001faa <__aeabi_ddiv+0x412>
 8002106:	210f      	movs	r1, #15
 8002108:	4011      	ands	r1, r2
 800210a:	2904      	cmp	r1, #4
 800210c:	d000      	beq.n	8002110 <__aeabi_ddiv+0x578>
 800210e:	e746      	b.n	8001f9e <__aeabi_ddiv+0x406>
 8002110:	e74b      	b.n	8001faa <__aeabi_ddiv+0x412>
 8002112:	0005      	movs	r5, r0
 8002114:	428e      	cmp	r6, r1
 8002116:	d000      	beq.n	800211a <__aeabi_ddiv+0x582>
 8002118:	e66a      	b.n	8001df0 <__aeabi_ddiv+0x258>
 800211a:	9a00      	ldr	r2, [sp, #0]
 800211c:	4293      	cmp	r3, r2
 800211e:	d000      	beq.n	8002122 <__aeabi_ddiv+0x58a>
 8002120:	e666      	b.n	8001df0 <__aeabi_ddiv+0x258>
 8002122:	e667      	b.n	8001df4 <__aeabi_ddiv+0x25c>
 8002124:	4a16      	ldr	r2, [pc, #88]	; (8002180 <__aeabi_ddiv+0x5e8>)
 8002126:	445a      	add	r2, fp
 8002128:	2a00      	cmp	r2, #0
 800212a:	dc00      	bgt.n	800212e <__aeabi_ddiv+0x596>
 800212c:	e710      	b.n	8001f50 <__aeabi_ddiv+0x3b8>
 800212e:	2301      	movs	r3, #1
 8002130:	2500      	movs	r5, #0
 8002132:	4498      	add	r8, r3
 8002134:	e667      	b.n	8001e06 <__aeabi_ddiv+0x26e>
 8002136:	075d      	lsls	r5, r3, #29
 8002138:	025b      	lsls	r3, r3, #9
 800213a:	0b1c      	lsrs	r4, r3, #12
 800213c:	08d2      	lsrs	r2, r2, #3
 800213e:	2300      	movs	r3, #0
 8002140:	4315      	orrs	r5, r2
 8002142:	e580      	b.n	8001c46 <__aeabi_ddiv+0xae>
 8002144:	9800      	ldr	r0, [sp, #0]
 8002146:	3d02      	subs	r5, #2
 8002148:	0042      	lsls	r2, r0, #1
 800214a:	4282      	cmp	r2, r0
 800214c:	41bf      	sbcs	r7, r7
 800214e:	427f      	negs	r7, r7
 8002150:	193c      	adds	r4, r7, r4
 8002152:	1936      	adds	r6, r6, r4
 8002154:	9200      	str	r2, [sp, #0]
 8002156:	e7dd      	b.n	8002114 <__aeabi_ddiv+0x57c>
 8002158:	2480      	movs	r4, #128	; 0x80
 800215a:	4643      	mov	r3, r8
 800215c:	0324      	lsls	r4, r4, #12
 800215e:	431c      	orrs	r4, r3
 8002160:	0324      	lsls	r4, r4, #12
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__aeabi_ddiv+0x5dc>)
 8002164:	0b24      	lsrs	r4, r4, #12
 8002166:	e56e      	b.n	8001c46 <__aeabi_ddiv+0xae>
 8002168:	9a00      	ldr	r2, [sp, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d3ea      	bcc.n	8002144 <__aeabi_ddiv+0x5ac>
 800216e:	0005      	movs	r5, r0
 8002170:	e7d3      	b.n	800211a <__aeabi_ddiv+0x582>
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	000007ff 	.word	0x000007ff
 8002178:	0000043e 	.word	0x0000043e
 800217c:	0000041e 	.word	0x0000041e
 8002180:	000003ff 	.word	0x000003ff

08002184 <__eqdf2>:
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	464e      	mov	r6, r9
 8002188:	4645      	mov	r5, r8
 800218a:	46de      	mov	lr, fp
 800218c:	4657      	mov	r7, sl
 800218e:	4690      	mov	r8, r2
 8002190:	b5e0      	push	{r5, r6, r7, lr}
 8002192:	0017      	movs	r7, r2
 8002194:	031a      	lsls	r2, r3, #12
 8002196:	0b12      	lsrs	r2, r2, #12
 8002198:	0005      	movs	r5, r0
 800219a:	4684      	mov	ip, r0
 800219c:	4819      	ldr	r0, [pc, #100]	; (8002204 <__eqdf2+0x80>)
 800219e:	030e      	lsls	r6, r1, #12
 80021a0:	004c      	lsls	r4, r1, #1
 80021a2:	4691      	mov	r9, r2
 80021a4:	005a      	lsls	r2, r3, #1
 80021a6:	0fdb      	lsrs	r3, r3, #31
 80021a8:	469b      	mov	fp, r3
 80021aa:	0b36      	lsrs	r6, r6, #12
 80021ac:	0d64      	lsrs	r4, r4, #21
 80021ae:	0fc9      	lsrs	r1, r1, #31
 80021b0:	0d52      	lsrs	r2, r2, #21
 80021b2:	4284      	cmp	r4, r0
 80021b4:	d019      	beq.n	80021ea <__eqdf2+0x66>
 80021b6:	4282      	cmp	r2, r0
 80021b8:	d010      	beq.n	80021dc <__eqdf2+0x58>
 80021ba:	2001      	movs	r0, #1
 80021bc:	4294      	cmp	r4, r2
 80021be:	d10e      	bne.n	80021de <__eqdf2+0x5a>
 80021c0:	454e      	cmp	r6, r9
 80021c2:	d10c      	bne.n	80021de <__eqdf2+0x5a>
 80021c4:	2001      	movs	r0, #1
 80021c6:	45c4      	cmp	ip, r8
 80021c8:	d109      	bne.n	80021de <__eqdf2+0x5a>
 80021ca:	4559      	cmp	r1, fp
 80021cc:	d017      	beq.n	80021fe <__eqdf2+0x7a>
 80021ce:	2c00      	cmp	r4, #0
 80021d0:	d105      	bne.n	80021de <__eqdf2+0x5a>
 80021d2:	0030      	movs	r0, r6
 80021d4:	4328      	orrs	r0, r5
 80021d6:	1e43      	subs	r3, r0, #1
 80021d8:	4198      	sbcs	r0, r3
 80021da:	e000      	b.n	80021de <__eqdf2+0x5a>
 80021dc:	2001      	movs	r0, #1
 80021de:	bcf0      	pop	{r4, r5, r6, r7}
 80021e0:	46bb      	mov	fp, r7
 80021e2:	46b2      	mov	sl, r6
 80021e4:	46a9      	mov	r9, r5
 80021e6:	46a0      	mov	r8, r4
 80021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ea:	0033      	movs	r3, r6
 80021ec:	2001      	movs	r0, #1
 80021ee:	432b      	orrs	r3, r5
 80021f0:	d1f5      	bne.n	80021de <__eqdf2+0x5a>
 80021f2:	42a2      	cmp	r2, r4
 80021f4:	d1f3      	bne.n	80021de <__eqdf2+0x5a>
 80021f6:	464b      	mov	r3, r9
 80021f8:	433b      	orrs	r3, r7
 80021fa:	d1f0      	bne.n	80021de <__eqdf2+0x5a>
 80021fc:	e7e2      	b.n	80021c4 <__eqdf2+0x40>
 80021fe:	2000      	movs	r0, #0
 8002200:	e7ed      	b.n	80021de <__eqdf2+0x5a>
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	000007ff 	.word	0x000007ff

08002208 <__gedf2>:
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	4647      	mov	r7, r8
 800220c:	46ce      	mov	lr, r9
 800220e:	0004      	movs	r4, r0
 8002210:	0018      	movs	r0, r3
 8002212:	0016      	movs	r6, r2
 8002214:	031b      	lsls	r3, r3, #12
 8002216:	0b1b      	lsrs	r3, r3, #12
 8002218:	4d2d      	ldr	r5, [pc, #180]	; (80022d0 <__gedf2+0xc8>)
 800221a:	004a      	lsls	r2, r1, #1
 800221c:	4699      	mov	r9, r3
 800221e:	b580      	push	{r7, lr}
 8002220:	0043      	lsls	r3, r0, #1
 8002222:	030f      	lsls	r7, r1, #12
 8002224:	46a4      	mov	ip, r4
 8002226:	46b0      	mov	r8, r6
 8002228:	0b3f      	lsrs	r7, r7, #12
 800222a:	0d52      	lsrs	r2, r2, #21
 800222c:	0fc9      	lsrs	r1, r1, #31
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	0fc0      	lsrs	r0, r0, #31
 8002232:	42aa      	cmp	r2, r5
 8002234:	d021      	beq.n	800227a <__gedf2+0x72>
 8002236:	42ab      	cmp	r3, r5
 8002238:	d013      	beq.n	8002262 <__gedf2+0x5a>
 800223a:	2a00      	cmp	r2, #0
 800223c:	d122      	bne.n	8002284 <__gedf2+0x7c>
 800223e:	433c      	orrs	r4, r7
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <__gedf2+0x42>
 8002244:	464d      	mov	r5, r9
 8002246:	432e      	orrs	r6, r5
 8002248:	d022      	beq.n	8002290 <__gedf2+0x88>
 800224a:	2c00      	cmp	r4, #0
 800224c:	d010      	beq.n	8002270 <__gedf2+0x68>
 800224e:	4281      	cmp	r1, r0
 8002250:	d022      	beq.n	8002298 <__gedf2+0x90>
 8002252:	2002      	movs	r0, #2
 8002254:	3901      	subs	r1, #1
 8002256:	4008      	ands	r0, r1
 8002258:	3801      	subs	r0, #1
 800225a:	bcc0      	pop	{r6, r7}
 800225c:	46b9      	mov	r9, r7
 800225e:	46b0      	mov	r8, r6
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	464d      	mov	r5, r9
 8002264:	432e      	orrs	r6, r5
 8002266:	d129      	bne.n	80022bc <__gedf2+0xb4>
 8002268:	2a00      	cmp	r2, #0
 800226a:	d1f0      	bne.n	800224e <__gedf2+0x46>
 800226c:	433c      	orrs	r4, r7
 800226e:	d1ee      	bne.n	800224e <__gedf2+0x46>
 8002270:	2800      	cmp	r0, #0
 8002272:	d1f2      	bne.n	800225a <__gedf2+0x52>
 8002274:	2001      	movs	r0, #1
 8002276:	4240      	negs	r0, r0
 8002278:	e7ef      	b.n	800225a <__gedf2+0x52>
 800227a:	003d      	movs	r5, r7
 800227c:	4325      	orrs	r5, r4
 800227e:	d11d      	bne.n	80022bc <__gedf2+0xb4>
 8002280:	4293      	cmp	r3, r2
 8002282:	d0ee      	beq.n	8002262 <__gedf2+0x5a>
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e2      	bne.n	800224e <__gedf2+0x46>
 8002288:	464c      	mov	r4, r9
 800228a:	4326      	orrs	r6, r4
 800228c:	d1df      	bne.n	800224e <__gedf2+0x46>
 800228e:	e7e0      	b.n	8002252 <__gedf2+0x4a>
 8002290:	2000      	movs	r0, #0
 8002292:	2c00      	cmp	r4, #0
 8002294:	d0e1      	beq.n	800225a <__gedf2+0x52>
 8002296:	e7dc      	b.n	8002252 <__gedf2+0x4a>
 8002298:	429a      	cmp	r2, r3
 800229a:	dc0a      	bgt.n	80022b2 <__gedf2+0xaa>
 800229c:	dbe8      	blt.n	8002270 <__gedf2+0x68>
 800229e:	454f      	cmp	r7, r9
 80022a0:	d8d7      	bhi.n	8002252 <__gedf2+0x4a>
 80022a2:	d00e      	beq.n	80022c2 <__gedf2+0xba>
 80022a4:	2000      	movs	r0, #0
 80022a6:	454f      	cmp	r7, r9
 80022a8:	d2d7      	bcs.n	800225a <__gedf2+0x52>
 80022aa:	2900      	cmp	r1, #0
 80022ac:	d0e2      	beq.n	8002274 <__gedf2+0x6c>
 80022ae:	0008      	movs	r0, r1
 80022b0:	e7d3      	b.n	800225a <__gedf2+0x52>
 80022b2:	4243      	negs	r3, r0
 80022b4:	4158      	adcs	r0, r3
 80022b6:	0040      	lsls	r0, r0, #1
 80022b8:	3801      	subs	r0, #1
 80022ba:	e7ce      	b.n	800225a <__gedf2+0x52>
 80022bc:	2002      	movs	r0, #2
 80022be:	4240      	negs	r0, r0
 80022c0:	e7cb      	b.n	800225a <__gedf2+0x52>
 80022c2:	45c4      	cmp	ip, r8
 80022c4:	d8c5      	bhi.n	8002252 <__gedf2+0x4a>
 80022c6:	2000      	movs	r0, #0
 80022c8:	45c4      	cmp	ip, r8
 80022ca:	d2c6      	bcs.n	800225a <__gedf2+0x52>
 80022cc:	e7ed      	b.n	80022aa <__gedf2+0xa2>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__ledf2>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4647      	mov	r7, r8
 80022d8:	46ce      	mov	lr, r9
 80022da:	0004      	movs	r4, r0
 80022dc:	0018      	movs	r0, r3
 80022de:	0016      	movs	r6, r2
 80022e0:	031b      	lsls	r3, r3, #12
 80022e2:	0b1b      	lsrs	r3, r3, #12
 80022e4:	4d2c      	ldr	r5, [pc, #176]	; (8002398 <__ledf2+0xc4>)
 80022e6:	004a      	lsls	r2, r1, #1
 80022e8:	4699      	mov	r9, r3
 80022ea:	b580      	push	{r7, lr}
 80022ec:	0043      	lsls	r3, r0, #1
 80022ee:	030f      	lsls	r7, r1, #12
 80022f0:	46a4      	mov	ip, r4
 80022f2:	46b0      	mov	r8, r6
 80022f4:	0b3f      	lsrs	r7, r7, #12
 80022f6:	0d52      	lsrs	r2, r2, #21
 80022f8:	0fc9      	lsrs	r1, r1, #31
 80022fa:	0d5b      	lsrs	r3, r3, #21
 80022fc:	0fc0      	lsrs	r0, r0, #31
 80022fe:	42aa      	cmp	r2, r5
 8002300:	d00d      	beq.n	800231e <__ledf2+0x4a>
 8002302:	42ab      	cmp	r3, r5
 8002304:	d010      	beq.n	8002328 <__ledf2+0x54>
 8002306:	2a00      	cmp	r2, #0
 8002308:	d127      	bne.n	800235a <__ledf2+0x86>
 800230a:	433c      	orrs	r4, r7
 800230c:	2b00      	cmp	r3, #0
 800230e:	d111      	bne.n	8002334 <__ledf2+0x60>
 8002310:	464d      	mov	r5, r9
 8002312:	432e      	orrs	r6, r5
 8002314:	d10e      	bne.n	8002334 <__ledf2+0x60>
 8002316:	2000      	movs	r0, #0
 8002318:	2c00      	cmp	r4, #0
 800231a:	d015      	beq.n	8002348 <__ledf2+0x74>
 800231c:	e00e      	b.n	800233c <__ledf2+0x68>
 800231e:	003d      	movs	r5, r7
 8002320:	4325      	orrs	r5, r4
 8002322:	d110      	bne.n	8002346 <__ledf2+0x72>
 8002324:	4293      	cmp	r3, r2
 8002326:	d118      	bne.n	800235a <__ledf2+0x86>
 8002328:	464d      	mov	r5, r9
 800232a:	432e      	orrs	r6, r5
 800232c:	d10b      	bne.n	8002346 <__ledf2+0x72>
 800232e:	2a00      	cmp	r2, #0
 8002330:	d102      	bne.n	8002338 <__ledf2+0x64>
 8002332:	433c      	orrs	r4, r7
 8002334:	2c00      	cmp	r4, #0
 8002336:	d00b      	beq.n	8002350 <__ledf2+0x7c>
 8002338:	4281      	cmp	r1, r0
 800233a:	d014      	beq.n	8002366 <__ledf2+0x92>
 800233c:	2002      	movs	r0, #2
 800233e:	3901      	subs	r1, #1
 8002340:	4008      	ands	r0, r1
 8002342:	3801      	subs	r0, #1
 8002344:	e000      	b.n	8002348 <__ledf2+0x74>
 8002346:	2002      	movs	r0, #2
 8002348:	bcc0      	pop	{r6, r7}
 800234a:	46b9      	mov	r9, r7
 800234c:	46b0      	mov	r8, r6
 800234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002350:	2800      	cmp	r0, #0
 8002352:	d1f9      	bne.n	8002348 <__ledf2+0x74>
 8002354:	2001      	movs	r0, #1
 8002356:	4240      	negs	r0, r0
 8002358:	e7f6      	b.n	8002348 <__ledf2+0x74>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ec      	bne.n	8002338 <__ledf2+0x64>
 800235e:	464c      	mov	r4, r9
 8002360:	4326      	orrs	r6, r4
 8002362:	d1e9      	bne.n	8002338 <__ledf2+0x64>
 8002364:	e7ea      	b.n	800233c <__ledf2+0x68>
 8002366:	429a      	cmp	r2, r3
 8002368:	dd04      	ble.n	8002374 <__ledf2+0xa0>
 800236a:	4243      	negs	r3, r0
 800236c:	4158      	adcs	r0, r3
 800236e:	0040      	lsls	r0, r0, #1
 8002370:	3801      	subs	r0, #1
 8002372:	e7e9      	b.n	8002348 <__ledf2+0x74>
 8002374:	429a      	cmp	r2, r3
 8002376:	dbeb      	blt.n	8002350 <__ledf2+0x7c>
 8002378:	454f      	cmp	r7, r9
 800237a:	d8df      	bhi.n	800233c <__ledf2+0x68>
 800237c:	d006      	beq.n	800238c <__ledf2+0xb8>
 800237e:	2000      	movs	r0, #0
 8002380:	454f      	cmp	r7, r9
 8002382:	d2e1      	bcs.n	8002348 <__ledf2+0x74>
 8002384:	2900      	cmp	r1, #0
 8002386:	d0e5      	beq.n	8002354 <__ledf2+0x80>
 8002388:	0008      	movs	r0, r1
 800238a:	e7dd      	b.n	8002348 <__ledf2+0x74>
 800238c:	45c4      	cmp	ip, r8
 800238e:	d8d5      	bhi.n	800233c <__ledf2+0x68>
 8002390:	2000      	movs	r0, #0
 8002392:	45c4      	cmp	ip, r8
 8002394:	d2d8      	bcs.n	8002348 <__ledf2+0x74>
 8002396:	e7f5      	b.n	8002384 <__ledf2+0xb0>
 8002398:	000007ff 	.word	0x000007ff

0800239c <__aeabi_dmul>:
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239e:	4657      	mov	r7, sl
 80023a0:	464e      	mov	r6, r9
 80023a2:	4645      	mov	r5, r8
 80023a4:	46de      	mov	lr, fp
 80023a6:	b5e0      	push	{r5, r6, r7, lr}
 80023a8:	4698      	mov	r8, r3
 80023aa:	030c      	lsls	r4, r1, #12
 80023ac:	004b      	lsls	r3, r1, #1
 80023ae:	0006      	movs	r6, r0
 80023b0:	4692      	mov	sl, r2
 80023b2:	b087      	sub	sp, #28
 80023b4:	0b24      	lsrs	r4, r4, #12
 80023b6:	0d5b      	lsrs	r3, r3, #21
 80023b8:	0fcf      	lsrs	r7, r1, #31
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d100      	bne.n	80023c0 <__aeabi_dmul+0x24>
 80023be:	e15c      	b.n	800267a <__aeabi_dmul+0x2de>
 80023c0:	4ad9      	ldr	r2, [pc, #868]	; (8002728 <__aeabi_dmul+0x38c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d100      	bne.n	80023c8 <__aeabi_dmul+0x2c>
 80023c6:	e175      	b.n	80026b4 <__aeabi_dmul+0x318>
 80023c8:	0f42      	lsrs	r2, r0, #29
 80023ca:	00e4      	lsls	r4, r4, #3
 80023cc:	4314      	orrs	r4, r2
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	0412      	lsls	r2, r2, #16
 80023d2:	4314      	orrs	r4, r2
 80023d4:	4ad5      	ldr	r2, [pc, #852]	; (800272c <__aeabi_dmul+0x390>)
 80023d6:	00c5      	lsls	r5, r0, #3
 80023d8:	4694      	mov	ip, r2
 80023da:	4463      	add	r3, ip
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	4699      	mov	r9, r3
 80023e2:	469b      	mov	fp, r3
 80023e4:	4643      	mov	r3, r8
 80023e6:	4642      	mov	r2, r8
 80023e8:	031e      	lsls	r6, r3, #12
 80023ea:	0fd2      	lsrs	r2, r2, #31
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4650      	mov	r0, sl
 80023f0:	4690      	mov	r8, r2
 80023f2:	0b36      	lsrs	r6, r6, #12
 80023f4:	0d5b      	lsrs	r3, r3, #21
 80023f6:	d100      	bne.n	80023fa <__aeabi_dmul+0x5e>
 80023f8:	e120      	b.n	800263c <__aeabi_dmul+0x2a0>
 80023fa:	4acb      	ldr	r2, [pc, #812]	; (8002728 <__aeabi_dmul+0x38c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d100      	bne.n	8002402 <__aeabi_dmul+0x66>
 8002400:	e162      	b.n	80026c8 <__aeabi_dmul+0x32c>
 8002402:	49ca      	ldr	r1, [pc, #808]	; (800272c <__aeabi_dmul+0x390>)
 8002404:	0f42      	lsrs	r2, r0, #29
 8002406:	468c      	mov	ip, r1
 8002408:	9900      	ldr	r1, [sp, #0]
 800240a:	4463      	add	r3, ip
 800240c:	00f6      	lsls	r6, r6, #3
 800240e:	468c      	mov	ip, r1
 8002410:	4316      	orrs	r6, r2
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	449c      	add	ip, r3
 8002416:	0412      	lsls	r2, r2, #16
 8002418:	4663      	mov	r3, ip
 800241a:	4316      	orrs	r6, r2
 800241c:	00c2      	lsls	r2, r0, #3
 800241e:	2000      	movs	r0, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	9900      	ldr	r1, [sp, #0]
 8002424:	4643      	mov	r3, r8
 8002426:	3101      	adds	r1, #1
 8002428:	468c      	mov	ip, r1
 800242a:	4649      	mov	r1, r9
 800242c:	407b      	eors	r3, r7
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	290f      	cmp	r1, #15
 8002432:	d826      	bhi.n	8002482 <__aeabi_dmul+0xe6>
 8002434:	4bbe      	ldr	r3, [pc, #760]	; (8002730 <__aeabi_dmul+0x394>)
 8002436:	0089      	lsls	r1, r1, #2
 8002438:	5859      	ldr	r1, [r3, r1]
 800243a:	468f      	mov	pc, r1
 800243c:	4643      	mov	r3, r8
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	0034      	movs	r4, r6
 8002442:	0015      	movs	r5, r2
 8002444:	4683      	mov	fp, r0
 8002446:	465b      	mov	r3, fp
 8002448:	2b02      	cmp	r3, #2
 800244a:	d016      	beq.n	800247a <__aeabi_dmul+0xde>
 800244c:	2b03      	cmp	r3, #3
 800244e:	d100      	bne.n	8002452 <__aeabi_dmul+0xb6>
 8002450:	e203      	b.n	800285a <__aeabi_dmul+0x4be>
 8002452:	2b01      	cmp	r3, #1
 8002454:	d000      	beq.n	8002458 <__aeabi_dmul+0xbc>
 8002456:	e0cd      	b.n	80025f4 <__aeabi_dmul+0x258>
 8002458:	2200      	movs	r2, #0
 800245a:	2400      	movs	r4, #0
 800245c:	2500      	movs	r5, #0
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	0512      	lsls	r2, r2, #20
 8002462:	4322      	orrs	r2, r4
 8002464:	07db      	lsls	r3, r3, #31
 8002466:	431a      	orrs	r2, r3
 8002468:	0028      	movs	r0, r5
 800246a:	0011      	movs	r1, r2
 800246c:	b007      	add	sp, #28
 800246e:	bcf0      	pop	{r4, r5, r6, r7}
 8002470:	46bb      	mov	fp, r7
 8002472:	46b2      	mov	sl, r6
 8002474:	46a9      	mov	r9, r5
 8002476:	46a0      	mov	r8, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2400      	movs	r4, #0
 800247c:	2500      	movs	r5, #0
 800247e:	4aaa      	ldr	r2, [pc, #680]	; (8002728 <__aeabi_dmul+0x38c>)
 8002480:	e7ed      	b.n	800245e <__aeabi_dmul+0xc2>
 8002482:	0c28      	lsrs	r0, r5, #16
 8002484:	042d      	lsls	r5, r5, #16
 8002486:	0c2d      	lsrs	r5, r5, #16
 8002488:	002b      	movs	r3, r5
 800248a:	0c11      	lsrs	r1, r2, #16
 800248c:	0412      	lsls	r2, r2, #16
 800248e:	0c12      	lsrs	r2, r2, #16
 8002490:	4353      	muls	r3, r2
 8002492:	4698      	mov	r8, r3
 8002494:	0013      	movs	r3, r2
 8002496:	002f      	movs	r7, r5
 8002498:	4343      	muls	r3, r0
 800249a:	4699      	mov	r9, r3
 800249c:	434f      	muls	r7, r1
 800249e:	444f      	add	r7, r9
 80024a0:	46bb      	mov	fp, r7
 80024a2:	4647      	mov	r7, r8
 80024a4:	000b      	movs	r3, r1
 80024a6:	0c3f      	lsrs	r7, r7, #16
 80024a8:	46ba      	mov	sl, r7
 80024aa:	4343      	muls	r3, r0
 80024ac:	44da      	add	sl, fp
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	45d1      	cmp	r9, sl
 80024b2:	d904      	bls.n	80024be <__aeabi_dmul+0x122>
 80024b4:	2780      	movs	r7, #128	; 0x80
 80024b6:	027f      	lsls	r7, r7, #9
 80024b8:	46b9      	mov	r9, r7
 80024ba:	444b      	add	r3, r9
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	4653      	mov	r3, sl
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	469b      	mov	fp, r3
 80024c4:	4653      	mov	r3, sl
 80024c6:	041f      	lsls	r7, r3, #16
 80024c8:	4643      	mov	r3, r8
 80024ca:	041b      	lsls	r3, r3, #16
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	4698      	mov	r8, r3
 80024d0:	003b      	movs	r3, r7
 80024d2:	4443      	add	r3, r8
 80024d4:	9304      	str	r3, [sp, #16]
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	0436      	lsls	r6, r6, #16
 80024da:	0c36      	lsrs	r6, r6, #16
 80024dc:	4698      	mov	r8, r3
 80024de:	0033      	movs	r3, r6
 80024e0:	4343      	muls	r3, r0
 80024e2:	4699      	mov	r9, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	4343      	muls	r3, r0
 80024e8:	002f      	movs	r7, r5
 80024ea:	469a      	mov	sl, r3
 80024ec:	4643      	mov	r3, r8
 80024ee:	4377      	muls	r7, r6
 80024f0:	435d      	muls	r5, r3
 80024f2:	0c38      	lsrs	r0, r7, #16
 80024f4:	444d      	add	r5, r9
 80024f6:	1945      	adds	r5, r0, r5
 80024f8:	45a9      	cmp	r9, r5
 80024fa:	d903      	bls.n	8002504 <__aeabi_dmul+0x168>
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	4699      	mov	r9, r3
 8002502:	44ca      	add	sl, r9
 8002504:	043f      	lsls	r7, r7, #16
 8002506:	0c28      	lsrs	r0, r5, #16
 8002508:	0c3f      	lsrs	r7, r7, #16
 800250a:	042d      	lsls	r5, r5, #16
 800250c:	19ed      	adds	r5, r5, r7
 800250e:	0c27      	lsrs	r7, r4, #16
 8002510:	0424      	lsls	r4, r4, #16
 8002512:	0c24      	lsrs	r4, r4, #16
 8002514:	0003      	movs	r3, r0
 8002516:	0020      	movs	r0, r4
 8002518:	4350      	muls	r0, r2
 800251a:	437a      	muls	r2, r7
 800251c:	4691      	mov	r9, r2
 800251e:	003a      	movs	r2, r7
 8002520:	4453      	add	r3, sl
 8002522:	9305      	str	r3, [sp, #20]
 8002524:	0c03      	lsrs	r3, r0, #16
 8002526:	469a      	mov	sl, r3
 8002528:	434a      	muls	r2, r1
 800252a:	4361      	muls	r1, r4
 800252c:	4449      	add	r1, r9
 800252e:	4451      	add	r1, sl
 8002530:	44ab      	add	fp, r5
 8002532:	4589      	cmp	r9, r1
 8002534:	d903      	bls.n	800253e <__aeabi_dmul+0x1a2>
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	025b      	lsls	r3, r3, #9
 800253a:	4699      	mov	r9, r3
 800253c:	444a      	add	r2, r9
 800253e:	0400      	lsls	r0, r0, #16
 8002540:	0c0b      	lsrs	r3, r1, #16
 8002542:	0c00      	lsrs	r0, r0, #16
 8002544:	0409      	lsls	r1, r1, #16
 8002546:	1809      	adds	r1, r1, r0
 8002548:	0020      	movs	r0, r4
 800254a:	4699      	mov	r9, r3
 800254c:	4643      	mov	r3, r8
 800254e:	4370      	muls	r0, r6
 8002550:	435c      	muls	r4, r3
 8002552:	437e      	muls	r6, r7
 8002554:	435f      	muls	r7, r3
 8002556:	0c03      	lsrs	r3, r0, #16
 8002558:	4698      	mov	r8, r3
 800255a:	19a4      	adds	r4, r4, r6
 800255c:	4444      	add	r4, r8
 800255e:	444a      	add	r2, r9
 8002560:	9703      	str	r7, [sp, #12]
 8002562:	42a6      	cmp	r6, r4
 8002564:	d904      	bls.n	8002570 <__aeabi_dmul+0x1d4>
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	4698      	mov	r8, r3
 800256c:	4447      	add	r7, r8
 800256e:	9703      	str	r7, [sp, #12]
 8002570:	0423      	lsls	r3, r4, #16
 8002572:	9e02      	ldr	r6, [sp, #8]
 8002574:	469a      	mov	sl, r3
 8002576:	9b05      	ldr	r3, [sp, #20]
 8002578:	445e      	add	r6, fp
 800257a:	4698      	mov	r8, r3
 800257c:	42ae      	cmp	r6, r5
 800257e:	41ad      	sbcs	r5, r5
 8002580:	1876      	adds	r6, r6, r1
 8002582:	428e      	cmp	r6, r1
 8002584:	4189      	sbcs	r1, r1
 8002586:	0400      	lsls	r0, r0, #16
 8002588:	0c00      	lsrs	r0, r0, #16
 800258a:	4450      	add	r0, sl
 800258c:	4440      	add	r0, r8
 800258e:	426d      	negs	r5, r5
 8002590:	1947      	adds	r7, r0, r5
 8002592:	46b8      	mov	r8, r7
 8002594:	4693      	mov	fp, r2
 8002596:	4249      	negs	r1, r1
 8002598:	4689      	mov	r9, r1
 800259a:	44c3      	add	fp, r8
 800259c:	44d9      	add	r9, fp
 800259e:	4298      	cmp	r0, r3
 80025a0:	4180      	sbcs	r0, r0
 80025a2:	45a8      	cmp	r8, r5
 80025a4:	41ad      	sbcs	r5, r5
 80025a6:	4593      	cmp	fp, r2
 80025a8:	4192      	sbcs	r2, r2
 80025aa:	4589      	cmp	r9, r1
 80025ac:	4189      	sbcs	r1, r1
 80025ae:	426d      	negs	r5, r5
 80025b0:	4240      	negs	r0, r0
 80025b2:	4328      	orrs	r0, r5
 80025b4:	0c24      	lsrs	r4, r4, #16
 80025b6:	4252      	negs	r2, r2
 80025b8:	4249      	negs	r1, r1
 80025ba:	430a      	orrs	r2, r1
 80025bc:	9b03      	ldr	r3, [sp, #12]
 80025be:	1900      	adds	r0, r0, r4
 80025c0:	1880      	adds	r0, r0, r2
 80025c2:	18c7      	adds	r7, r0, r3
 80025c4:	464b      	mov	r3, r9
 80025c6:	0ddc      	lsrs	r4, r3, #23
 80025c8:	9b04      	ldr	r3, [sp, #16]
 80025ca:	0275      	lsls	r5, r6, #9
 80025cc:	431d      	orrs	r5, r3
 80025ce:	1e6a      	subs	r2, r5, #1
 80025d0:	4195      	sbcs	r5, r2
 80025d2:	464b      	mov	r3, r9
 80025d4:	0df6      	lsrs	r6, r6, #23
 80025d6:	027f      	lsls	r7, r7, #9
 80025d8:	4335      	orrs	r5, r6
 80025da:	025a      	lsls	r2, r3, #9
 80025dc:	433c      	orrs	r4, r7
 80025de:	4315      	orrs	r5, r2
 80025e0:	01fb      	lsls	r3, r7, #7
 80025e2:	d400      	bmi.n	80025e6 <__aeabi_dmul+0x24a>
 80025e4:	e11c      	b.n	8002820 <__aeabi_dmul+0x484>
 80025e6:	2101      	movs	r1, #1
 80025e8:	086a      	lsrs	r2, r5, #1
 80025ea:	400d      	ands	r5, r1
 80025ec:	4315      	orrs	r5, r2
 80025ee:	07e2      	lsls	r2, r4, #31
 80025f0:	4315      	orrs	r5, r2
 80025f2:	0864      	lsrs	r4, r4, #1
 80025f4:	494f      	ldr	r1, [pc, #316]	; (8002734 <__aeabi_dmul+0x398>)
 80025f6:	4461      	add	r1, ip
 80025f8:	2900      	cmp	r1, #0
 80025fa:	dc00      	bgt.n	80025fe <__aeabi_dmul+0x262>
 80025fc:	e0b0      	b.n	8002760 <__aeabi_dmul+0x3c4>
 80025fe:	076b      	lsls	r3, r5, #29
 8002600:	d009      	beq.n	8002616 <__aeabi_dmul+0x27a>
 8002602:	220f      	movs	r2, #15
 8002604:	402a      	ands	r2, r5
 8002606:	2a04      	cmp	r2, #4
 8002608:	d005      	beq.n	8002616 <__aeabi_dmul+0x27a>
 800260a:	1d2a      	adds	r2, r5, #4
 800260c:	42aa      	cmp	r2, r5
 800260e:	41ad      	sbcs	r5, r5
 8002610:	426d      	negs	r5, r5
 8002612:	1964      	adds	r4, r4, r5
 8002614:	0015      	movs	r5, r2
 8002616:	01e3      	lsls	r3, r4, #7
 8002618:	d504      	bpl.n	8002624 <__aeabi_dmul+0x288>
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <__aeabi_dmul+0x39c>)
 800261e:	00c9      	lsls	r1, r1, #3
 8002620:	4014      	ands	r4, r2
 8002622:	4461      	add	r1, ip
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <__aeabi_dmul+0x3a0>)
 8002626:	4291      	cmp	r1, r2
 8002628:	dd00      	ble.n	800262c <__aeabi_dmul+0x290>
 800262a:	e726      	b.n	800247a <__aeabi_dmul+0xde>
 800262c:	0762      	lsls	r2, r4, #29
 800262e:	08ed      	lsrs	r5, r5, #3
 8002630:	0264      	lsls	r4, r4, #9
 8002632:	0549      	lsls	r1, r1, #21
 8002634:	4315      	orrs	r5, r2
 8002636:	0b24      	lsrs	r4, r4, #12
 8002638:	0d4a      	lsrs	r2, r1, #21
 800263a:	e710      	b.n	800245e <__aeabi_dmul+0xc2>
 800263c:	4652      	mov	r2, sl
 800263e:	4332      	orrs	r2, r6
 8002640:	d100      	bne.n	8002644 <__aeabi_dmul+0x2a8>
 8002642:	e07f      	b.n	8002744 <__aeabi_dmul+0x3a8>
 8002644:	2e00      	cmp	r6, #0
 8002646:	d100      	bne.n	800264a <__aeabi_dmul+0x2ae>
 8002648:	e0dc      	b.n	8002804 <__aeabi_dmul+0x468>
 800264a:	0030      	movs	r0, r6
 800264c:	f000 fd96 	bl	800317c <__clzsi2>
 8002650:	0002      	movs	r2, r0
 8002652:	3a0b      	subs	r2, #11
 8002654:	231d      	movs	r3, #29
 8002656:	0001      	movs	r1, r0
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	4652      	mov	r2, sl
 800265c:	3908      	subs	r1, #8
 800265e:	40da      	lsrs	r2, r3
 8002660:	408e      	lsls	r6, r1
 8002662:	4316      	orrs	r6, r2
 8002664:	4652      	mov	r2, sl
 8002666:	408a      	lsls	r2, r1
 8002668:	9b00      	ldr	r3, [sp, #0]
 800266a:	4935      	ldr	r1, [pc, #212]	; (8002740 <__aeabi_dmul+0x3a4>)
 800266c:	1a18      	subs	r0, r3, r0
 800266e:	0003      	movs	r3, r0
 8002670:	468c      	mov	ip, r1
 8002672:	4463      	add	r3, ip
 8002674:	2000      	movs	r0, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	e6d3      	b.n	8002422 <__aeabi_dmul+0x86>
 800267a:	0025      	movs	r5, r4
 800267c:	4305      	orrs	r5, r0
 800267e:	d04a      	beq.n	8002716 <__aeabi_dmul+0x37a>
 8002680:	2c00      	cmp	r4, #0
 8002682:	d100      	bne.n	8002686 <__aeabi_dmul+0x2ea>
 8002684:	e0b0      	b.n	80027e8 <__aeabi_dmul+0x44c>
 8002686:	0020      	movs	r0, r4
 8002688:	f000 fd78 	bl	800317c <__clzsi2>
 800268c:	0001      	movs	r1, r0
 800268e:	0002      	movs	r2, r0
 8002690:	390b      	subs	r1, #11
 8002692:	231d      	movs	r3, #29
 8002694:	0010      	movs	r0, r2
 8002696:	1a5b      	subs	r3, r3, r1
 8002698:	0031      	movs	r1, r6
 800269a:	0035      	movs	r5, r6
 800269c:	3808      	subs	r0, #8
 800269e:	4084      	lsls	r4, r0
 80026a0:	40d9      	lsrs	r1, r3
 80026a2:	4085      	lsls	r5, r0
 80026a4:	430c      	orrs	r4, r1
 80026a6:	4826      	ldr	r0, [pc, #152]	; (8002740 <__aeabi_dmul+0x3a4>)
 80026a8:	1a83      	subs	r3, r0, r2
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	4699      	mov	r9, r3
 80026b0:	469b      	mov	fp, r3
 80026b2:	e697      	b.n	80023e4 <__aeabi_dmul+0x48>
 80026b4:	0005      	movs	r5, r0
 80026b6:	4325      	orrs	r5, r4
 80026b8:	d126      	bne.n	8002708 <__aeabi_dmul+0x36c>
 80026ba:	2208      	movs	r2, #8
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2302      	movs	r3, #2
 80026c0:	2400      	movs	r4, #0
 80026c2:	4691      	mov	r9, r2
 80026c4:	469b      	mov	fp, r3
 80026c6:	e68d      	b.n	80023e4 <__aeabi_dmul+0x48>
 80026c8:	4652      	mov	r2, sl
 80026ca:	9b00      	ldr	r3, [sp, #0]
 80026cc:	4332      	orrs	r2, r6
 80026ce:	d110      	bne.n	80026f2 <__aeabi_dmul+0x356>
 80026d0:	4915      	ldr	r1, [pc, #84]	; (8002728 <__aeabi_dmul+0x38c>)
 80026d2:	2600      	movs	r6, #0
 80026d4:	468c      	mov	ip, r1
 80026d6:	4463      	add	r3, ip
 80026d8:	4649      	mov	r1, r9
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2302      	movs	r3, #2
 80026de:	4319      	orrs	r1, r3
 80026e0:	4689      	mov	r9, r1
 80026e2:	2002      	movs	r0, #2
 80026e4:	e69d      	b.n	8002422 <__aeabi_dmul+0x86>
 80026e6:	465b      	mov	r3, fp
 80026e8:	9701      	str	r7, [sp, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d000      	beq.n	80026f0 <__aeabi_dmul+0x354>
 80026ee:	e6ad      	b.n	800244c <__aeabi_dmul+0xb0>
 80026f0:	e6c3      	b.n	800247a <__aeabi_dmul+0xde>
 80026f2:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <__aeabi_dmul+0x38c>)
 80026f4:	2003      	movs	r0, #3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	464a      	mov	r2, r9
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2303      	movs	r3, #3
 8002700:	431a      	orrs	r2, r3
 8002702:	4691      	mov	r9, r2
 8002704:	4652      	mov	r2, sl
 8002706:	e68c      	b.n	8002422 <__aeabi_dmul+0x86>
 8002708:	220c      	movs	r2, #12
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2303      	movs	r3, #3
 800270e:	0005      	movs	r5, r0
 8002710:	4691      	mov	r9, r2
 8002712:	469b      	mov	fp, r3
 8002714:	e666      	b.n	80023e4 <__aeabi_dmul+0x48>
 8002716:	2304      	movs	r3, #4
 8002718:	4699      	mov	r9, r3
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	2400      	movs	r4, #0
 8002722:	469b      	mov	fp, r3
 8002724:	e65e      	b.n	80023e4 <__aeabi_dmul+0x48>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	000007ff 	.word	0x000007ff
 800272c:	fffffc01 	.word	0xfffffc01
 8002730:	0800b8ec 	.word	0x0800b8ec
 8002734:	000003ff 	.word	0x000003ff
 8002738:	feffffff 	.word	0xfeffffff
 800273c:	000007fe 	.word	0x000007fe
 8002740:	fffffc0d 	.word	0xfffffc0d
 8002744:	4649      	mov	r1, r9
 8002746:	2301      	movs	r3, #1
 8002748:	4319      	orrs	r1, r3
 800274a:	4689      	mov	r9, r1
 800274c:	2600      	movs	r6, #0
 800274e:	2001      	movs	r0, #1
 8002750:	e667      	b.n	8002422 <__aeabi_dmul+0x86>
 8002752:	2300      	movs	r3, #0
 8002754:	2480      	movs	r4, #128	; 0x80
 8002756:	2500      	movs	r5, #0
 8002758:	4a43      	ldr	r2, [pc, #268]	; (8002868 <__aeabi_dmul+0x4cc>)
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	0324      	lsls	r4, r4, #12
 800275e:	e67e      	b.n	800245e <__aeabi_dmul+0xc2>
 8002760:	2001      	movs	r0, #1
 8002762:	1a40      	subs	r0, r0, r1
 8002764:	2838      	cmp	r0, #56	; 0x38
 8002766:	dd00      	ble.n	800276a <__aeabi_dmul+0x3ce>
 8002768:	e676      	b.n	8002458 <__aeabi_dmul+0xbc>
 800276a:	281f      	cmp	r0, #31
 800276c:	dd5b      	ble.n	8002826 <__aeabi_dmul+0x48a>
 800276e:	221f      	movs	r2, #31
 8002770:	0023      	movs	r3, r4
 8002772:	4252      	negs	r2, r2
 8002774:	1a51      	subs	r1, r2, r1
 8002776:	40cb      	lsrs	r3, r1
 8002778:	0019      	movs	r1, r3
 800277a:	2820      	cmp	r0, #32
 800277c:	d003      	beq.n	8002786 <__aeabi_dmul+0x3ea>
 800277e:	4a3b      	ldr	r2, [pc, #236]	; (800286c <__aeabi_dmul+0x4d0>)
 8002780:	4462      	add	r2, ip
 8002782:	4094      	lsls	r4, r2
 8002784:	4325      	orrs	r5, r4
 8002786:	1e6a      	subs	r2, r5, #1
 8002788:	4195      	sbcs	r5, r2
 800278a:	002a      	movs	r2, r5
 800278c:	430a      	orrs	r2, r1
 800278e:	2107      	movs	r1, #7
 8002790:	000d      	movs	r5, r1
 8002792:	2400      	movs	r4, #0
 8002794:	4015      	ands	r5, r2
 8002796:	4211      	tst	r1, r2
 8002798:	d05b      	beq.n	8002852 <__aeabi_dmul+0x4b6>
 800279a:	210f      	movs	r1, #15
 800279c:	2400      	movs	r4, #0
 800279e:	4011      	ands	r1, r2
 80027a0:	2904      	cmp	r1, #4
 80027a2:	d053      	beq.n	800284c <__aeabi_dmul+0x4b0>
 80027a4:	1d11      	adds	r1, r2, #4
 80027a6:	4291      	cmp	r1, r2
 80027a8:	4192      	sbcs	r2, r2
 80027aa:	4252      	negs	r2, r2
 80027ac:	18a4      	adds	r4, r4, r2
 80027ae:	000a      	movs	r2, r1
 80027b0:	0223      	lsls	r3, r4, #8
 80027b2:	d54b      	bpl.n	800284c <__aeabi_dmul+0x4b0>
 80027b4:	2201      	movs	r2, #1
 80027b6:	2400      	movs	r4, #0
 80027b8:	2500      	movs	r5, #0
 80027ba:	e650      	b.n	800245e <__aeabi_dmul+0xc2>
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	031b      	lsls	r3, r3, #12
 80027c0:	421c      	tst	r4, r3
 80027c2:	d009      	beq.n	80027d8 <__aeabi_dmul+0x43c>
 80027c4:	421e      	tst	r6, r3
 80027c6:	d107      	bne.n	80027d8 <__aeabi_dmul+0x43c>
 80027c8:	4333      	orrs	r3, r6
 80027ca:	031c      	lsls	r4, r3, #12
 80027cc:	4643      	mov	r3, r8
 80027ce:	0015      	movs	r5, r2
 80027d0:	0b24      	lsrs	r4, r4, #12
 80027d2:	4a25      	ldr	r2, [pc, #148]	; (8002868 <__aeabi_dmul+0x4cc>)
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	e642      	b.n	800245e <__aeabi_dmul+0xc2>
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	0312      	lsls	r2, r2, #12
 80027dc:	4314      	orrs	r4, r2
 80027de:	0324      	lsls	r4, r4, #12
 80027e0:	4a21      	ldr	r2, [pc, #132]	; (8002868 <__aeabi_dmul+0x4cc>)
 80027e2:	0b24      	lsrs	r4, r4, #12
 80027e4:	9701      	str	r7, [sp, #4]
 80027e6:	e63a      	b.n	800245e <__aeabi_dmul+0xc2>
 80027e8:	f000 fcc8 	bl	800317c <__clzsi2>
 80027ec:	0001      	movs	r1, r0
 80027ee:	0002      	movs	r2, r0
 80027f0:	3115      	adds	r1, #21
 80027f2:	3220      	adds	r2, #32
 80027f4:	291c      	cmp	r1, #28
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x45e>
 80027f8:	e74b      	b.n	8002692 <__aeabi_dmul+0x2f6>
 80027fa:	0034      	movs	r4, r6
 80027fc:	3808      	subs	r0, #8
 80027fe:	2500      	movs	r5, #0
 8002800:	4084      	lsls	r4, r0
 8002802:	e750      	b.n	80026a6 <__aeabi_dmul+0x30a>
 8002804:	f000 fcba 	bl	800317c <__clzsi2>
 8002808:	0003      	movs	r3, r0
 800280a:	001a      	movs	r2, r3
 800280c:	3215      	adds	r2, #21
 800280e:	3020      	adds	r0, #32
 8002810:	2a1c      	cmp	r2, #28
 8002812:	dc00      	bgt.n	8002816 <__aeabi_dmul+0x47a>
 8002814:	e71e      	b.n	8002654 <__aeabi_dmul+0x2b8>
 8002816:	4656      	mov	r6, sl
 8002818:	3b08      	subs	r3, #8
 800281a:	2200      	movs	r2, #0
 800281c:	409e      	lsls	r6, r3
 800281e:	e723      	b.n	8002668 <__aeabi_dmul+0x2cc>
 8002820:	9b00      	ldr	r3, [sp, #0]
 8002822:	469c      	mov	ip, r3
 8002824:	e6e6      	b.n	80025f4 <__aeabi_dmul+0x258>
 8002826:	4912      	ldr	r1, [pc, #72]	; (8002870 <__aeabi_dmul+0x4d4>)
 8002828:	0022      	movs	r2, r4
 800282a:	4461      	add	r1, ip
 800282c:	002e      	movs	r6, r5
 800282e:	408d      	lsls	r5, r1
 8002830:	408a      	lsls	r2, r1
 8002832:	40c6      	lsrs	r6, r0
 8002834:	1e69      	subs	r1, r5, #1
 8002836:	418d      	sbcs	r5, r1
 8002838:	4332      	orrs	r2, r6
 800283a:	432a      	orrs	r2, r5
 800283c:	40c4      	lsrs	r4, r0
 800283e:	0753      	lsls	r3, r2, #29
 8002840:	d0b6      	beq.n	80027b0 <__aeabi_dmul+0x414>
 8002842:	210f      	movs	r1, #15
 8002844:	4011      	ands	r1, r2
 8002846:	2904      	cmp	r1, #4
 8002848:	d1ac      	bne.n	80027a4 <__aeabi_dmul+0x408>
 800284a:	e7b1      	b.n	80027b0 <__aeabi_dmul+0x414>
 800284c:	0765      	lsls	r5, r4, #29
 800284e:	0264      	lsls	r4, r4, #9
 8002850:	0b24      	lsrs	r4, r4, #12
 8002852:	08d2      	lsrs	r2, r2, #3
 8002854:	4315      	orrs	r5, r2
 8002856:	2200      	movs	r2, #0
 8002858:	e601      	b.n	800245e <__aeabi_dmul+0xc2>
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	0312      	lsls	r2, r2, #12
 800285e:	4314      	orrs	r4, r2
 8002860:	0324      	lsls	r4, r4, #12
 8002862:	4a01      	ldr	r2, [pc, #4]	; (8002868 <__aeabi_dmul+0x4cc>)
 8002864:	0b24      	lsrs	r4, r4, #12
 8002866:	e5fa      	b.n	800245e <__aeabi_dmul+0xc2>
 8002868:	000007ff 	.word	0x000007ff
 800286c:	0000043e 	.word	0x0000043e
 8002870:	0000041e 	.word	0x0000041e

08002874 <__aeabi_dsub>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	4657      	mov	r7, sl
 8002878:	464e      	mov	r6, r9
 800287a:	4645      	mov	r5, r8
 800287c:	46de      	mov	lr, fp
 800287e:	b5e0      	push	{r5, r6, r7, lr}
 8002880:	001e      	movs	r6, r3
 8002882:	0017      	movs	r7, r2
 8002884:	004a      	lsls	r2, r1, #1
 8002886:	030b      	lsls	r3, r1, #12
 8002888:	0d52      	lsrs	r2, r2, #21
 800288a:	0a5b      	lsrs	r3, r3, #9
 800288c:	4690      	mov	r8, r2
 800288e:	0f42      	lsrs	r2, r0, #29
 8002890:	431a      	orrs	r2, r3
 8002892:	0fcd      	lsrs	r5, r1, #31
 8002894:	4ccd      	ldr	r4, [pc, #820]	; (8002bcc <__aeabi_dsub+0x358>)
 8002896:	0331      	lsls	r1, r6, #12
 8002898:	00c3      	lsls	r3, r0, #3
 800289a:	4694      	mov	ip, r2
 800289c:	0070      	lsls	r0, r6, #1
 800289e:	0f7a      	lsrs	r2, r7, #29
 80028a0:	0a49      	lsrs	r1, r1, #9
 80028a2:	00ff      	lsls	r7, r7, #3
 80028a4:	469a      	mov	sl, r3
 80028a6:	46b9      	mov	r9, r7
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	0ff6      	lsrs	r6, r6, #31
 80028ac:	4311      	orrs	r1, r2
 80028ae:	42a0      	cmp	r0, r4
 80028b0:	d100      	bne.n	80028b4 <__aeabi_dsub+0x40>
 80028b2:	e0b1      	b.n	8002a18 <__aeabi_dsub+0x1a4>
 80028b4:	2201      	movs	r2, #1
 80028b6:	4056      	eors	r6, r2
 80028b8:	46b3      	mov	fp, r6
 80028ba:	42b5      	cmp	r5, r6
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x4c>
 80028be:	e088      	b.n	80029d2 <__aeabi_dsub+0x15e>
 80028c0:	4642      	mov	r2, r8
 80028c2:	1a12      	subs	r2, r2, r0
 80028c4:	2a00      	cmp	r2, #0
 80028c6:	dc00      	bgt.n	80028ca <__aeabi_dsub+0x56>
 80028c8:	e0ae      	b.n	8002a28 <__aeabi_dsub+0x1b4>
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d100      	bne.n	80028d0 <__aeabi_dsub+0x5c>
 80028ce:	e0c1      	b.n	8002a54 <__aeabi_dsub+0x1e0>
 80028d0:	48be      	ldr	r0, [pc, #760]	; (8002bcc <__aeabi_dsub+0x358>)
 80028d2:	4580      	cmp	r8, r0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x64>
 80028d6:	e151      	b.n	8002b7c <__aeabi_dsub+0x308>
 80028d8:	2080      	movs	r0, #128	; 0x80
 80028da:	0400      	lsls	r0, r0, #16
 80028dc:	4301      	orrs	r1, r0
 80028de:	2a38      	cmp	r2, #56	; 0x38
 80028e0:	dd00      	ble.n	80028e4 <__aeabi_dsub+0x70>
 80028e2:	e17b      	b.n	8002bdc <__aeabi_dsub+0x368>
 80028e4:	2a1f      	cmp	r2, #31
 80028e6:	dd00      	ble.n	80028ea <__aeabi_dsub+0x76>
 80028e8:	e1ee      	b.n	8002cc8 <__aeabi_dsub+0x454>
 80028ea:	2020      	movs	r0, #32
 80028ec:	003e      	movs	r6, r7
 80028ee:	1a80      	subs	r0, r0, r2
 80028f0:	000c      	movs	r4, r1
 80028f2:	40d6      	lsrs	r6, r2
 80028f4:	40d1      	lsrs	r1, r2
 80028f6:	4087      	lsls	r7, r0
 80028f8:	4662      	mov	r2, ip
 80028fa:	4084      	lsls	r4, r0
 80028fc:	1a52      	subs	r2, r2, r1
 80028fe:	1e78      	subs	r0, r7, #1
 8002900:	4187      	sbcs	r7, r0
 8002902:	4694      	mov	ip, r2
 8002904:	4334      	orrs	r4, r6
 8002906:	4327      	orrs	r7, r4
 8002908:	1bdc      	subs	r4, r3, r7
 800290a:	42a3      	cmp	r3, r4
 800290c:	419b      	sbcs	r3, r3
 800290e:	4662      	mov	r2, ip
 8002910:	425b      	negs	r3, r3
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	4699      	mov	r9, r3
 8002916:	464b      	mov	r3, r9
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	d400      	bmi.n	800291e <__aeabi_dsub+0xaa>
 800291c:	e118      	b.n	8002b50 <__aeabi_dsub+0x2dc>
 800291e:	464b      	mov	r3, r9
 8002920:	0258      	lsls	r0, r3, #9
 8002922:	0a43      	lsrs	r3, r0, #9
 8002924:	4699      	mov	r9, r3
 8002926:	464b      	mov	r3, r9
 8002928:	2b00      	cmp	r3, #0
 800292a:	d100      	bne.n	800292e <__aeabi_dsub+0xba>
 800292c:	e137      	b.n	8002b9e <__aeabi_dsub+0x32a>
 800292e:	4648      	mov	r0, r9
 8002930:	f000 fc24 	bl	800317c <__clzsi2>
 8002934:	0001      	movs	r1, r0
 8002936:	3908      	subs	r1, #8
 8002938:	2320      	movs	r3, #32
 800293a:	0022      	movs	r2, r4
 800293c:	4648      	mov	r0, r9
 800293e:	1a5b      	subs	r3, r3, r1
 8002940:	40da      	lsrs	r2, r3
 8002942:	4088      	lsls	r0, r1
 8002944:	408c      	lsls	r4, r1
 8002946:	4643      	mov	r3, r8
 8002948:	4310      	orrs	r0, r2
 800294a:	4588      	cmp	r8, r1
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xdc>
 800294e:	e136      	b.n	8002bbe <__aeabi_dsub+0x34a>
 8002950:	1ac9      	subs	r1, r1, r3
 8002952:	1c4b      	adds	r3, r1, #1
 8002954:	2b1f      	cmp	r3, #31
 8002956:	dd00      	ble.n	800295a <__aeabi_dsub+0xe6>
 8002958:	e0ea      	b.n	8002b30 <__aeabi_dsub+0x2bc>
 800295a:	2220      	movs	r2, #32
 800295c:	0026      	movs	r6, r4
 800295e:	1ad2      	subs	r2, r2, r3
 8002960:	0001      	movs	r1, r0
 8002962:	4094      	lsls	r4, r2
 8002964:	40de      	lsrs	r6, r3
 8002966:	40d8      	lsrs	r0, r3
 8002968:	2300      	movs	r3, #0
 800296a:	4091      	lsls	r1, r2
 800296c:	1e62      	subs	r2, r4, #1
 800296e:	4194      	sbcs	r4, r2
 8002970:	4681      	mov	r9, r0
 8002972:	4698      	mov	r8, r3
 8002974:	4331      	orrs	r1, r6
 8002976:	430c      	orrs	r4, r1
 8002978:	0763      	lsls	r3, r4, #29
 800297a:	d009      	beq.n	8002990 <__aeabi_dsub+0x11c>
 800297c:	230f      	movs	r3, #15
 800297e:	4023      	ands	r3, r4
 8002980:	2b04      	cmp	r3, #4
 8002982:	d005      	beq.n	8002990 <__aeabi_dsub+0x11c>
 8002984:	1d23      	adds	r3, r4, #4
 8002986:	42a3      	cmp	r3, r4
 8002988:	41a4      	sbcs	r4, r4
 800298a:	4264      	negs	r4, r4
 800298c:	44a1      	add	r9, r4
 800298e:	001c      	movs	r4, r3
 8002990:	464b      	mov	r3, r9
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	d400      	bmi.n	8002998 <__aeabi_dsub+0x124>
 8002996:	e0de      	b.n	8002b56 <__aeabi_dsub+0x2e2>
 8002998:	4641      	mov	r1, r8
 800299a:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <__aeabi_dsub+0x358>)
 800299c:	3101      	adds	r1, #1
 800299e:	4299      	cmp	r1, r3
 80029a0:	d100      	bne.n	80029a4 <__aeabi_dsub+0x130>
 80029a2:	e0e7      	b.n	8002b74 <__aeabi_dsub+0x300>
 80029a4:	464b      	mov	r3, r9
 80029a6:	488a      	ldr	r0, [pc, #552]	; (8002bd0 <__aeabi_dsub+0x35c>)
 80029a8:	08e4      	lsrs	r4, r4, #3
 80029aa:	4003      	ands	r3, r0
 80029ac:	0018      	movs	r0, r3
 80029ae:	0549      	lsls	r1, r1, #21
 80029b0:	075b      	lsls	r3, r3, #29
 80029b2:	0240      	lsls	r0, r0, #9
 80029b4:	4323      	orrs	r3, r4
 80029b6:	0d4a      	lsrs	r2, r1, #21
 80029b8:	0b04      	lsrs	r4, r0, #12
 80029ba:	0512      	lsls	r2, r2, #20
 80029bc:	07ed      	lsls	r5, r5, #31
 80029be:	4322      	orrs	r2, r4
 80029c0:	432a      	orrs	r2, r5
 80029c2:	0018      	movs	r0, r3
 80029c4:	0011      	movs	r1, r2
 80029c6:	bcf0      	pop	{r4, r5, r6, r7}
 80029c8:	46bb      	mov	fp, r7
 80029ca:	46b2      	mov	sl, r6
 80029cc:	46a9      	mov	r9, r5
 80029ce:	46a0      	mov	r8, r4
 80029d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029d2:	4642      	mov	r2, r8
 80029d4:	1a12      	subs	r2, r2, r0
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	dd52      	ble.n	8002a80 <__aeabi_dsub+0x20c>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x16c>
 80029de:	e09c      	b.n	8002b1a <__aeabi_dsub+0x2a6>
 80029e0:	45a0      	cmp	r8, r4
 80029e2:	d100      	bne.n	80029e6 <__aeabi_dsub+0x172>
 80029e4:	e0ca      	b.n	8002b7c <__aeabi_dsub+0x308>
 80029e6:	2080      	movs	r0, #128	; 0x80
 80029e8:	0400      	lsls	r0, r0, #16
 80029ea:	4301      	orrs	r1, r0
 80029ec:	2a38      	cmp	r2, #56	; 0x38
 80029ee:	dd00      	ble.n	80029f2 <__aeabi_dsub+0x17e>
 80029f0:	e149      	b.n	8002c86 <__aeabi_dsub+0x412>
 80029f2:	2a1f      	cmp	r2, #31
 80029f4:	dc00      	bgt.n	80029f8 <__aeabi_dsub+0x184>
 80029f6:	e197      	b.n	8002d28 <__aeabi_dsub+0x4b4>
 80029f8:	0010      	movs	r0, r2
 80029fa:	000e      	movs	r6, r1
 80029fc:	3820      	subs	r0, #32
 80029fe:	40c6      	lsrs	r6, r0
 8002a00:	2a20      	cmp	r2, #32
 8002a02:	d004      	beq.n	8002a0e <__aeabi_dsub+0x19a>
 8002a04:	2040      	movs	r0, #64	; 0x40
 8002a06:	1a82      	subs	r2, r0, r2
 8002a08:	4091      	lsls	r1, r2
 8002a0a:	430f      	orrs	r7, r1
 8002a0c:	46b9      	mov	r9, r7
 8002a0e:	464c      	mov	r4, r9
 8002a10:	1e62      	subs	r2, r4, #1
 8002a12:	4194      	sbcs	r4, r2
 8002a14:	4334      	orrs	r4, r6
 8002a16:	e13a      	b.n	8002c8e <__aeabi_dsub+0x41a>
 8002a18:	000a      	movs	r2, r1
 8002a1a:	433a      	orrs	r2, r7
 8002a1c:	d028      	beq.n	8002a70 <__aeabi_dsub+0x1fc>
 8002a1e:	46b3      	mov	fp, r6
 8002a20:	42b5      	cmp	r5, r6
 8002a22:	d02b      	beq.n	8002a7c <__aeabi_dsub+0x208>
 8002a24:	4a6b      	ldr	r2, [pc, #428]	; (8002bd4 <__aeabi_dsub+0x360>)
 8002a26:	4442      	add	r2, r8
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d05d      	beq.n	8002ae8 <__aeabi_dsub+0x274>
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	4644      	mov	r4, r8
 8002a30:	1a82      	subs	r2, r0, r2
 8002a32:	2c00      	cmp	r4, #0
 8002a34:	d000      	beq.n	8002a38 <__aeabi_dsub+0x1c4>
 8002a36:	e0f5      	b.n	8002c24 <__aeabi_dsub+0x3b0>
 8002a38:	4665      	mov	r5, ip
 8002a3a:	431d      	orrs	r5, r3
 8002a3c:	d100      	bne.n	8002a40 <__aeabi_dsub+0x1cc>
 8002a3e:	e19c      	b.n	8002d7a <__aeabi_dsub+0x506>
 8002a40:	1e55      	subs	r5, r2, #1
 8002a42:	2a01      	cmp	r2, #1
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x1d4>
 8002a46:	e1fb      	b.n	8002e40 <__aeabi_dsub+0x5cc>
 8002a48:	4c60      	ldr	r4, [pc, #384]	; (8002bcc <__aeabi_dsub+0x358>)
 8002a4a:	42a2      	cmp	r2, r4
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x1dc>
 8002a4e:	e1bd      	b.n	8002dcc <__aeabi_dsub+0x558>
 8002a50:	002a      	movs	r2, r5
 8002a52:	e0f0      	b.n	8002c36 <__aeabi_dsub+0x3c2>
 8002a54:	0008      	movs	r0, r1
 8002a56:	4338      	orrs	r0, r7
 8002a58:	d100      	bne.n	8002a5c <__aeabi_dsub+0x1e8>
 8002a5a:	e0c3      	b.n	8002be4 <__aeabi_dsub+0x370>
 8002a5c:	1e50      	subs	r0, r2, #1
 8002a5e:	2a01      	cmp	r2, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x1f0>
 8002a62:	e1a8      	b.n	8002db6 <__aeabi_dsub+0x542>
 8002a64:	4c59      	ldr	r4, [pc, #356]	; (8002bcc <__aeabi_dsub+0x358>)
 8002a66:	42a2      	cmp	r2, r4
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x1f8>
 8002a6a:	e087      	b.n	8002b7c <__aeabi_dsub+0x308>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	e736      	b.n	80028de <__aeabi_dsub+0x6a>
 8002a70:	2201      	movs	r2, #1
 8002a72:	4056      	eors	r6, r2
 8002a74:	46b3      	mov	fp, r6
 8002a76:	42b5      	cmp	r5, r6
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x208>
 8002a7a:	e721      	b.n	80028c0 <__aeabi_dsub+0x4c>
 8002a7c:	4a55      	ldr	r2, [pc, #340]	; (8002bd4 <__aeabi_dsub+0x360>)
 8002a7e:	4442      	add	r2, r8
 8002a80:	2a00      	cmp	r2, #0
 8002a82:	d100      	bne.n	8002a86 <__aeabi_dsub+0x212>
 8002a84:	e0b5      	b.n	8002bf2 <__aeabi_dsub+0x37e>
 8002a86:	4642      	mov	r2, r8
 8002a88:	4644      	mov	r4, r8
 8002a8a:	1a82      	subs	r2, r0, r2
 8002a8c:	2c00      	cmp	r4, #0
 8002a8e:	d100      	bne.n	8002a92 <__aeabi_dsub+0x21e>
 8002a90:	e138      	b.n	8002d04 <__aeabi_dsub+0x490>
 8002a92:	4e4e      	ldr	r6, [pc, #312]	; (8002bcc <__aeabi_dsub+0x358>)
 8002a94:	42b0      	cmp	r0, r6
 8002a96:	d100      	bne.n	8002a9a <__aeabi_dsub+0x226>
 8002a98:	e1de      	b.n	8002e58 <__aeabi_dsub+0x5e4>
 8002a9a:	2680      	movs	r6, #128	; 0x80
 8002a9c:	4664      	mov	r4, ip
 8002a9e:	0436      	lsls	r6, r6, #16
 8002aa0:	4334      	orrs	r4, r6
 8002aa2:	46a4      	mov	ip, r4
 8002aa4:	2a38      	cmp	r2, #56	; 0x38
 8002aa6:	dd00      	ble.n	8002aaa <__aeabi_dsub+0x236>
 8002aa8:	e196      	b.n	8002dd8 <__aeabi_dsub+0x564>
 8002aaa:	2a1f      	cmp	r2, #31
 8002aac:	dd00      	ble.n	8002ab0 <__aeabi_dsub+0x23c>
 8002aae:	e224      	b.n	8002efa <__aeabi_dsub+0x686>
 8002ab0:	2620      	movs	r6, #32
 8002ab2:	1ab4      	subs	r4, r6, r2
 8002ab4:	46a2      	mov	sl, r4
 8002ab6:	4664      	mov	r4, ip
 8002ab8:	4656      	mov	r6, sl
 8002aba:	40b4      	lsls	r4, r6
 8002abc:	46a1      	mov	r9, r4
 8002abe:	001c      	movs	r4, r3
 8002ac0:	464e      	mov	r6, r9
 8002ac2:	40d4      	lsrs	r4, r2
 8002ac4:	4326      	orrs	r6, r4
 8002ac6:	0034      	movs	r4, r6
 8002ac8:	4656      	mov	r6, sl
 8002aca:	40b3      	lsls	r3, r6
 8002acc:	1e5e      	subs	r6, r3, #1
 8002ace:	41b3      	sbcs	r3, r6
 8002ad0:	431c      	orrs	r4, r3
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	40d3      	lsrs	r3, r2
 8002ad6:	18c9      	adds	r1, r1, r3
 8002ad8:	19e4      	adds	r4, r4, r7
 8002ada:	42bc      	cmp	r4, r7
 8002adc:	41bf      	sbcs	r7, r7
 8002ade:	427f      	negs	r7, r7
 8002ae0:	46b9      	mov	r9, r7
 8002ae2:	4680      	mov	r8, r0
 8002ae4:	4489      	add	r9, r1
 8002ae6:	e0d8      	b.n	8002c9a <__aeabi_dsub+0x426>
 8002ae8:	4640      	mov	r0, r8
 8002aea:	4c3b      	ldr	r4, [pc, #236]	; (8002bd8 <__aeabi_dsub+0x364>)
 8002aec:	3001      	adds	r0, #1
 8002aee:	4220      	tst	r0, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x280>
 8002af2:	e0b4      	b.n	8002c5e <__aeabi_dsub+0x3ea>
 8002af4:	4640      	mov	r0, r8
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d000      	beq.n	8002afc <__aeabi_dsub+0x288>
 8002afa:	e144      	b.n	8002d86 <__aeabi_dsub+0x512>
 8002afc:	4660      	mov	r0, ip
 8002afe:	4318      	orrs	r0, r3
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x290>
 8002b02:	e190      	b.n	8002e26 <__aeabi_dsub+0x5b2>
 8002b04:	0008      	movs	r0, r1
 8002b06:	4338      	orrs	r0, r7
 8002b08:	d000      	beq.n	8002b0c <__aeabi_dsub+0x298>
 8002b0a:	e1aa      	b.n	8002e62 <__aeabi_dsub+0x5ee>
 8002b0c:	4661      	mov	r1, ip
 8002b0e:	08db      	lsrs	r3, r3, #3
 8002b10:	0749      	lsls	r1, r1, #29
 8002b12:	430b      	orrs	r3, r1
 8002b14:	4661      	mov	r1, ip
 8002b16:	08cc      	lsrs	r4, r1, #3
 8002b18:	e027      	b.n	8002b6a <__aeabi_dsub+0x2f6>
 8002b1a:	0008      	movs	r0, r1
 8002b1c:	4338      	orrs	r0, r7
 8002b1e:	d061      	beq.n	8002be4 <__aeabi_dsub+0x370>
 8002b20:	1e50      	subs	r0, r2, #1
 8002b22:	2a01      	cmp	r2, #1
 8002b24:	d100      	bne.n	8002b28 <__aeabi_dsub+0x2b4>
 8002b26:	e139      	b.n	8002d9c <__aeabi_dsub+0x528>
 8002b28:	42a2      	cmp	r2, r4
 8002b2a:	d027      	beq.n	8002b7c <__aeabi_dsub+0x308>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	e75d      	b.n	80029ec <__aeabi_dsub+0x178>
 8002b30:	0002      	movs	r2, r0
 8002b32:	391f      	subs	r1, #31
 8002b34:	40ca      	lsrs	r2, r1
 8002b36:	0011      	movs	r1, r2
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d003      	beq.n	8002b44 <__aeabi_dsub+0x2d0>
 8002b3c:	2240      	movs	r2, #64	; 0x40
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	4098      	lsls	r0, r3
 8002b42:	4304      	orrs	r4, r0
 8002b44:	1e63      	subs	r3, r4, #1
 8002b46:	419c      	sbcs	r4, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	4699      	mov	r9, r3
 8002b4c:	4698      	mov	r8, r3
 8002b4e:	430c      	orrs	r4, r1
 8002b50:	0763      	lsls	r3, r4, #29
 8002b52:	d000      	beq.n	8002b56 <__aeabi_dsub+0x2e2>
 8002b54:	e712      	b.n	800297c <__aeabi_dsub+0x108>
 8002b56:	464b      	mov	r3, r9
 8002b58:	464a      	mov	r2, r9
 8002b5a:	08e4      	lsrs	r4, r4, #3
 8002b5c:	075b      	lsls	r3, r3, #29
 8002b5e:	4323      	orrs	r3, r4
 8002b60:	08d4      	lsrs	r4, r2, #3
 8002b62:	4642      	mov	r2, r8
 8002b64:	4919      	ldr	r1, [pc, #100]	; (8002bcc <__aeabi_dsub+0x358>)
 8002b66:	428a      	cmp	r2, r1
 8002b68:	d00e      	beq.n	8002b88 <__aeabi_dsub+0x314>
 8002b6a:	0324      	lsls	r4, r4, #12
 8002b6c:	0552      	lsls	r2, r2, #21
 8002b6e:	0b24      	lsrs	r4, r4, #12
 8002b70:	0d52      	lsrs	r2, r2, #21
 8002b72:	e722      	b.n	80029ba <__aeabi_dsub+0x146>
 8002b74:	000a      	movs	r2, r1
 8002b76:	2400      	movs	r4, #0
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e71e      	b.n	80029ba <__aeabi_dsub+0x146>
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	4662      	mov	r2, ip
 8002b80:	0752      	lsls	r2, r2, #29
 8002b82:	4313      	orrs	r3, r2
 8002b84:	4662      	mov	r2, ip
 8002b86:	08d4      	lsrs	r4, r2, #3
 8002b88:	001a      	movs	r2, r3
 8002b8a:	4322      	orrs	r2, r4
 8002b8c:	d100      	bne.n	8002b90 <__aeabi_dsub+0x31c>
 8002b8e:	e1fc      	b.n	8002f8a <__aeabi_dsub+0x716>
 8002b90:	2280      	movs	r2, #128	; 0x80
 8002b92:	0312      	lsls	r2, r2, #12
 8002b94:	4314      	orrs	r4, r2
 8002b96:	0324      	lsls	r4, r4, #12
 8002b98:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <__aeabi_dsub+0x358>)
 8002b9a:	0b24      	lsrs	r4, r4, #12
 8002b9c:	e70d      	b.n	80029ba <__aeabi_dsub+0x146>
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f000 faec 	bl	800317c <__clzsi2>
 8002ba4:	0001      	movs	r1, r0
 8002ba6:	3118      	adds	r1, #24
 8002ba8:	291f      	cmp	r1, #31
 8002baa:	dc00      	bgt.n	8002bae <__aeabi_dsub+0x33a>
 8002bac:	e6c4      	b.n	8002938 <__aeabi_dsub+0xc4>
 8002bae:	3808      	subs	r0, #8
 8002bb0:	4084      	lsls	r4, r0
 8002bb2:	4643      	mov	r3, r8
 8002bb4:	0020      	movs	r0, r4
 8002bb6:	2400      	movs	r4, #0
 8002bb8:	4588      	cmp	r8, r1
 8002bba:	dc00      	bgt.n	8002bbe <__aeabi_dsub+0x34a>
 8002bbc:	e6c8      	b.n	8002950 <__aeabi_dsub+0xdc>
 8002bbe:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <__aeabi_dsub+0x35c>)
 8002bc0:	1a5b      	subs	r3, r3, r1
 8002bc2:	4010      	ands	r0, r2
 8002bc4:	4698      	mov	r8, r3
 8002bc6:	4681      	mov	r9, r0
 8002bc8:	e6d6      	b.n	8002978 <__aeabi_dsub+0x104>
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	000007ff 	.word	0x000007ff
 8002bd0:	ff7fffff 	.word	0xff7fffff
 8002bd4:	fffff801 	.word	0xfffff801
 8002bd8:	000007fe 	.word	0x000007fe
 8002bdc:	430f      	orrs	r7, r1
 8002bde:	1e7a      	subs	r2, r7, #1
 8002be0:	4197      	sbcs	r7, r2
 8002be2:	e691      	b.n	8002908 <__aeabi_dsub+0x94>
 8002be4:	4661      	mov	r1, ip
 8002be6:	08db      	lsrs	r3, r3, #3
 8002be8:	0749      	lsls	r1, r1, #29
 8002bea:	430b      	orrs	r3, r1
 8002bec:	4661      	mov	r1, ip
 8002bee:	08cc      	lsrs	r4, r1, #3
 8002bf0:	e7b8      	b.n	8002b64 <__aeabi_dsub+0x2f0>
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	4cd3      	ldr	r4, [pc, #844]	; (8002f44 <__aeabi_dsub+0x6d0>)
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	4220      	tst	r0, r4
 8002bfa:	d000      	beq.n	8002bfe <__aeabi_dsub+0x38a>
 8002bfc:	e0a2      	b.n	8002d44 <__aeabi_dsub+0x4d0>
 8002bfe:	4640      	mov	r0, r8
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d000      	beq.n	8002c06 <__aeabi_dsub+0x392>
 8002c04:	e101      	b.n	8002e0a <__aeabi_dsub+0x596>
 8002c06:	4660      	mov	r0, ip
 8002c08:	4318      	orrs	r0, r3
 8002c0a:	d100      	bne.n	8002c0e <__aeabi_dsub+0x39a>
 8002c0c:	e15e      	b.n	8002ecc <__aeabi_dsub+0x658>
 8002c0e:	0008      	movs	r0, r1
 8002c10:	4338      	orrs	r0, r7
 8002c12:	d000      	beq.n	8002c16 <__aeabi_dsub+0x3a2>
 8002c14:	e15f      	b.n	8002ed6 <__aeabi_dsub+0x662>
 8002c16:	4661      	mov	r1, ip
 8002c18:	08db      	lsrs	r3, r3, #3
 8002c1a:	0749      	lsls	r1, r1, #29
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	4661      	mov	r1, ip
 8002c20:	08cc      	lsrs	r4, r1, #3
 8002c22:	e7a2      	b.n	8002b6a <__aeabi_dsub+0x2f6>
 8002c24:	4dc8      	ldr	r5, [pc, #800]	; (8002f48 <__aeabi_dsub+0x6d4>)
 8002c26:	42a8      	cmp	r0, r5
 8002c28:	d100      	bne.n	8002c2c <__aeabi_dsub+0x3b8>
 8002c2a:	e0cf      	b.n	8002dcc <__aeabi_dsub+0x558>
 8002c2c:	2580      	movs	r5, #128	; 0x80
 8002c2e:	4664      	mov	r4, ip
 8002c30:	042d      	lsls	r5, r5, #16
 8002c32:	432c      	orrs	r4, r5
 8002c34:	46a4      	mov	ip, r4
 8002c36:	2a38      	cmp	r2, #56	; 0x38
 8002c38:	dc56      	bgt.n	8002ce8 <__aeabi_dsub+0x474>
 8002c3a:	2a1f      	cmp	r2, #31
 8002c3c:	dd00      	ble.n	8002c40 <__aeabi_dsub+0x3cc>
 8002c3e:	e0d1      	b.n	8002de4 <__aeabi_dsub+0x570>
 8002c40:	2520      	movs	r5, #32
 8002c42:	001e      	movs	r6, r3
 8002c44:	1aad      	subs	r5, r5, r2
 8002c46:	4664      	mov	r4, ip
 8002c48:	40ab      	lsls	r3, r5
 8002c4a:	40ac      	lsls	r4, r5
 8002c4c:	40d6      	lsrs	r6, r2
 8002c4e:	1e5d      	subs	r5, r3, #1
 8002c50:	41ab      	sbcs	r3, r5
 8002c52:	4334      	orrs	r4, r6
 8002c54:	4323      	orrs	r3, r4
 8002c56:	4664      	mov	r4, ip
 8002c58:	40d4      	lsrs	r4, r2
 8002c5a:	1b09      	subs	r1, r1, r4
 8002c5c:	e049      	b.n	8002cf2 <__aeabi_dsub+0x47e>
 8002c5e:	4660      	mov	r0, ip
 8002c60:	1bdc      	subs	r4, r3, r7
 8002c62:	1a46      	subs	r6, r0, r1
 8002c64:	42a3      	cmp	r3, r4
 8002c66:	4180      	sbcs	r0, r0
 8002c68:	4240      	negs	r0, r0
 8002c6a:	4681      	mov	r9, r0
 8002c6c:	0030      	movs	r0, r6
 8002c6e:	464e      	mov	r6, r9
 8002c70:	1b80      	subs	r0, r0, r6
 8002c72:	4681      	mov	r9, r0
 8002c74:	0200      	lsls	r0, r0, #8
 8002c76:	d476      	bmi.n	8002d66 <__aeabi_dsub+0x4f2>
 8002c78:	464b      	mov	r3, r9
 8002c7a:	4323      	orrs	r3, r4
 8002c7c:	d000      	beq.n	8002c80 <__aeabi_dsub+0x40c>
 8002c7e:	e652      	b.n	8002926 <__aeabi_dsub+0xb2>
 8002c80:	2400      	movs	r4, #0
 8002c82:	2500      	movs	r5, #0
 8002c84:	e771      	b.n	8002b6a <__aeabi_dsub+0x2f6>
 8002c86:	4339      	orrs	r1, r7
 8002c88:	000c      	movs	r4, r1
 8002c8a:	1e62      	subs	r2, r4, #1
 8002c8c:	4194      	sbcs	r4, r2
 8002c8e:	18e4      	adds	r4, r4, r3
 8002c90:	429c      	cmp	r4, r3
 8002c92:	419b      	sbcs	r3, r3
 8002c94:	425b      	negs	r3, r3
 8002c96:	4463      	add	r3, ip
 8002c98:	4699      	mov	r9, r3
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	d400      	bmi.n	8002ca2 <__aeabi_dsub+0x42e>
 8002ca0:	e756      	b.n	8002b50 <__aeabi_dsub+0x2dc>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	469c      	mov	ip, r3
 8002ca6:	4ba8      	ldr	r3, [pc, #672]	; (8002f48 <__aeabi_dsub+0x6d4>)
 8002ca8:	44e0      	add	r8, ip
 8002caa:	4598      	cmp	r8, r3
 8002cac:	d038      	beq.n	8002d20 <__aeabi_dsub+0x4ac>
 8002cae:	464b      	mov	r3, r9
 8002cb0:	48a6      	ldr	r0, [pc, #664]	; (8002f4c <__aeabi_dsub+0x6d8>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4003      	ands	r3, r0
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	0863      	lsrs	r3, r4, #1
 8002cba:	4014      	ands	r4, r2
 8002cbc:	431c      	orrs	r4, r3
 8002cbe:	07c3      	lsls	r3, r0, #31
 8002cc0:	431c      	orrs	r4, r3
 8002cc2:	0843      	lsrs	r3, r0, #1
 8002cc4:	4699      	mov	r9, r3
 8002cc6:	e657      	b.n	8002978 <__aeabi_dsub+0x104>
 8002cc8:	0010      	movs	r0, r2
 8002cca:	000e      	movs	r6, r1
 8002ccc:	3820      	subs	r0, #32
 8002cce:	40c6      	lsrs	r6, r0
 8002cd0:	2a20      	cmp	r2, #32
 8002cd2:	d004      	beq.n	8002cde <__aeabi_dsub+0x46a>
 8002cd4:	2040      	movs	r0, #64	; 0x40
 8002cd6:	1a82      	subs	r2, r0, r2
 8002cd8:	4091      	lsls	r1, r2
 8002cda:	430f      	orrs	r7, r1
 8002cdc:	46b9      	mov	r9, r7
 8002cde:	464f      	mov	r7, r9
 8002ce0:	1e7a      	subs	r2, r7, #1
 8002ce2:	4197      	sbcs	r7, r2
 8002ce4:	4337      	orrs	r7, r6
 8002ce6:	e60f      	b.n	8002908 <__aeabi_dsub+0x94>
 8002ce8:	4662      	mov	r2, ip
 8002cea:	431a      	orrs	r2, r3
 8002cec:	0013      	movs	r3, r2
 8002cee:	1e5a      	subs	r2, r3, #1
 8002cf0:	4193      	sbcs	r3, r2
 8002cf2:	1afc      	subs	r4, r7, r3
 8002cf4:	42a7      	cmp	r7, r4
 8002cf6:	41bf      	sbcs	r7, r7
 8002cf8:	427f      	negs	r7, r7
 8002cfa:	1bcb      	subs	r3, r1, r7
 8002cfc:	4699      	mov	r9, r3
 8002cfe:	465d      	mov	r5, fp
 8002d00:	4680      	mov	r8, r0
 8002d02:	e608      	b.n	8002916 <__aeabi_dsub+0xa2>
 8002d04:	4666      	mov	r6, ip
 8002d06:	431e      	orrs	r6, r3
 8002d08:	d100      	bne.n	8002d0c <__aeabi_dsub+0x498>
 8002d0a:	e0be      	b.n	8002e8a <__aeabi_dsub+0x616>
 8002d0c:	1e56      	subs	r6, r2, #1
 8002d0e:	2a01      	cmp	r2, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x4a0>
 8002d12:	e109      	b.n	8002f28 <__aeabi_dsub+0x6b4>
 8002d14:	4c8c      	ldr	r4, [pc, #560]	; (8002f48 <__aeabi_dsub+0x6d4>)
 8002d16:	42a2      	cmp	r2, r4
 8002d18:	d100      	bne.n	8002d1c <__aeabi_dsub+0x4a8>
 8002d1a:	e119      	b.n	8002f50 <__aeabi_dsub+0x6dc>
 8002d1c:	0032      	movs	r2, r6
 8002d1e:	e6c1      	b.n	8002aa4 <__aeabi_dsub+0x230>
 8002d20:	4642      	mov	r2, r8
 8002d22:	2400      	movs	r4, #0
 8002d24:	2300      	movs	r3, #0
 8002d26:	e648      	b.n	80029ba <__aeabi_dsub+0x146>
 8002d28:	2020      	movs	r0, #32
 8002d2a:	000c      	movs	r4, r1
 8002d2c:	1a80      	subs	r0, r0, r2
 8002d2e:	003e      	movs	r6, r7
 8002d30:	4087      	lsls	r7, r0
 8002d32:	4084      	lsls	r4, r0
 8002d34:	40d6      	lsrs	r6, r2
 8002d36:	1e78      	subs	r0, r7, #1
 8002d38:	4187      	sbcs	r7, r0
 8002d3a:	40d1      	lsrs	r1, r2
 8002d3c:	4334      	orrs	r4, r6
 8002d3e:	433c      	orrs	r4, r7
 8002d40:	448c      	add	ip, r1
 8002d42:	e7a4      	b.n	8002c8e <__aeabi_dsub+0x41a>
 8002d44:	4a80      	ldr	r2, [pc, #512]	; (8002f48 <__aeabi_dsub+0x6d4>)
 8002d46:	4290      	cmp	r0, r2
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x4d8>
 8002d4a:	e0e9      	b.n	8002f20 <__aeabi_dsub+0x6ac>
 8002d4c:	19df      	adds	r7, r3, r7
 8002d4e:	429f      	cmp	r7, r3
 8002d50:	419b      	sbcs	r3, r3
 8002d52:	4461      	add	r1, ip
 8002d54:	425b      	negs	r3, r3
 8002d56:	18c9      	adds	r1, r1, r3
 8002d58:	07cc      	lsls	r4, r1, #31
 8002d5a:	087f      	lsrs	r7, r7, #1
 8002d5c:	084b      	lsrs	r3, r1, #1
 8002d5e:	4699      	mov	r9, r3
 8002d60:	4680      	mov	r8, r0
 8002d62:	433c      	orrs	r4, r7
 8002d64:	e6f4      	b.n	8002b50 <__aeabi_dsub+0x2dc>
 8002d66:	1afc      	subs	r4, r7, r3
 8002d68:	42a7      	cmp	r7, r4
 8002d6a:	41bf      	sbcs	r7, r7
 8002d6c:	4663      	mov	r3, ip
 8002d6e:	427f      	negs	r7, r7
 8002d70:	1ac9      	subs	r1, r1, r3
 8002d72:	1bcb      	subs	r3, r1, r7
 8002d74:	4699      	mov	r9, r3
 8002d76:	465d      	mov	r5, fp
 8002d78:	e5d5      	b.n	8002926 <__aeabi_dsub+0xb2>
 8002d7a:	08ff      	lsrs	r7, r7, #3
 8002d7c:	074b      	lsls	r3, r1, #29
 8002d7e:	465d      	mov	r5, fp
 8002d80:	433b      	orrs	r3, r7
 8002d82:	08cc      	lsrs	r4, r1, #3
 8002d84:	e6ee      	b.n	8002b64 <__aeabi_dsub+0x2f0>
 8002d86:	4662      	mov	r2, ip
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	d000      	beq.n	8002d8e <__aeabi_dsub+0x51a>
 8002d8c:	e082      	b.n	8002e94 <__aeabi_dsub+0x620>
 8002d8e:	000b      	movs	r3, r1
 8002d90:	433b      	orrs	r3, r7
 8002d92:	d11b      	bne.n	8002dcc <__aeabi_dsub+0x558>
 8002d94:	2480      	movs	r4, #128	; 0x80
 8002d96:	2500      	movs	r5, #0
 8002d98:	0324      	lsls	r4, r4, #12
 8002d9a:	e6f9      	b.n	8002b90 <__aeabi_dsub+0x31c>
 8002d9c:	19dc      	adds	r4, r3, r7
 8002d9e:	429c      	cmp	r4, r3
 8002da0:	419b      	sbcs	r3, r3
 8002da2:	4461      	add	r1, ip
 8002da4:	4689      	mov	r9, r1
 8002da6:	425b      	negs	r3, r3
 8002da8:	4499      	add	r9, r3
 8002daa:	464b      	mov	r3, r9
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	d444      	bmi.n	8002e3a <__aeabi_dsub+0x5c6>
 8002db0:	2301      	movs	r3, #1
 8002db2:	4698      	mov	r8, r3
 8002db4:	e6cc      	b.n	8002b50 <__aeabi_dsub+0x2dc>
 8002db6:	1bdc      	subs	r4, r3, r7
 8002db8:	4662      	mov	r2, ip
 8002dba:	42a3      	cmp	r3, r4
 8002dbc:	419b      	sbcs	r3, r3
 8002dbe:	1a51      	subs	r1, r2, r1
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	1acb      	subs	r3, r1, r3
 8002dc4:	4699      	mov	r9, r3
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	4698      	mov	r8, r3
 8002dca:	e5a4      	b.n	8002916 <__aeabi_dsub+0xa2>
 8002dcc:	08ff      	lsrs	r7, r7, #3
 8002dce:	074b      	lsls	r3, r1, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	433b      	orrs	r3, r7
 8002dd4:	08cc      	lsrs	r4, r1, #3
 8002dd6:	e6d7      	b.n	8002b88 <__aeabi_dsub+0x314>
 8002dd8:	4662      	mov	r2, ip
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	0014      	movs	r4, r2
 8002dde:	1e63      	subs	r3, r4, #1
 8002de0:	419c      	sbcs	r4, r3
 8002de2:	e679      	b.n	8002ad8 <__aeabi_dsub+0x264>
 8002de4:	0015      	movs	r5, r2
 8002de6:	4664      	mov	r4, ip
 8002de8:	3d20      	subs	r5, #32
 8002dea:	40ec      	lsrs	r4, r5
 8002dec:	46a0      	mov	r8, r4
 8002dee:	2a20      	cmp	r2, #32
 8002df0:	d005      	beq.n	8002dfe <__aeabi_dsub+0x58a>
 8002df2:	2540      	movs	r5, #64	; 0x40
 8002df4:	4664      	mov	r4, ip
 8002df6:	1aaa      	subs	r2, r5, r2
 8002df8:	4094      	lsls	r4, r2
 8002dfa:	4323      	orrs	r3, r4
 8002dfc:	469a      	mov	sl, r3
 8002dfe:	4654      	mov	r4, sl
 8002e00:	1e63      	subs	r3, r4, #1
 8002e02:	419c      	sbcs	r4, r3
 8002e04:	4643      	mov	r3, r8
 8002e06:	4323      	orrs	r3, r4
 8002e08:	e773      	b.n	8002cf2 <__aeabi_dsub+0x47e>
 8002e0a:	4662      	mov	r2, ip
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	d023      	beq.n	8002e58 <__aeabi_dsub+0x5e4>
 8002e10:	000a      	movs	r2, r1
 8002e12:	433a      	orrs	r2, r7
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x5a4>
 8002e16:	e0a0      	b.n	8002f5a <__aeabi_dsub+0x6e6>
 8002e18:	4662      	mov	r2, ip
 8002e1a:	08db      	lsrs	r3, r3, #3
 8002e1c:	0752      	lsls	r2, r2, #29
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	4662      	mov	r2, ip
 8002e22:	08d4      	lsrs	r4, r2, #3
 8002e24:	e6b0      	b.n	8002b88 <__aeabi_dsub+0x314>
 8002e26:	000b      	movs	r3, r1
 8002e28:	433b      	orrs	r3, r7
 8002e2a:	d100      	bne.n	8002e2e <__aeabi_dsub+0x5ba>
 8002e2c:	e728      	b.n	8002c80 <__aeabi_dsub+0x40c>
 8002e2e:	08ff      	lsrs	r7, r7, #3
 8002e30:	074b      	lsls	r3, r1, #29
 8002e32:	465d      	mov	r5, fp
 8002e34:	433b      	orrs	r3, r7
 8002e36:	08cc      	lsrs	r4, r1, #3
 8002e38:	e697      	b.n	8002b6a <__aeabi_dsub+0x2f6>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	4698      	mov	r8, r3
 8002e3e:	e736      	b.n	8002cae <__aeabi_dsub+0x43a>
 8002e40:	1afc      	subs	r4, r7, r3
 8002e42:	42a7      	cmp	r7, r4
 8002e44:	41bf      	sbcs	r7, r7
 8002e46:	4663      	mov	r3, ip
 8002e48:	427f      	negs	r7, r7
 8002e4a:	1ac9      	subs	r1, r1, r3
 8002e4c:	1bcb      	subs	r3, r1, r7
 8002e4e:	4699      	mov	r9, r3
 8002e50:	2301      	movs	r3, #1
 8002e52:	465d      	mov	r5, fp
 8002e54:	4698      	mov	r8, r3
 8002e56:	e55e      	b.n	8002916 <__aeabi_dsub+0xa2>
 8002e58:	074b      	lsls	r3, r1, #29
 8002e5a:	08ff      	lsrs	r7, r7, #3
 8002e5c:	433b      	orrs	r3, r7
 8002e5e:	08cc      	lsrs	r4, r1, #3
 8002e60:	e692      	b.n	8002b88 <__aeabi_dsub+0x314>
 8002e62:	1bdc      	subs	r4, r3, r7
 8002e64:	4660      	mov	r0, ip
 8002e66:	42a3      	cmp	r3, r4
 8002e68:	41b6      	sbcs	r6, r6
 8002e6a:	1a40      	subs	r0, r0, r1
 8002e6c:	4276      	negs	r6, r6
 8002e6e:	1b80      	subs	r0, r0, r6
 8002e70:	4681      	mov	r9, r0
 8002e72:	0200      	lsls	r0, r0, #8
 8002e74:	d560      	bpl.n	8002f38 <__aeabi_dsub+0x6c4>
 8002e76:	1afc      	subs	r4, r7, r3
 8002e78:	42a7      	cmp	r7, r4
 8002e7a:	41bf      	sbcs	r7, r7
 8002e7c:	4663      	mov	r3, ip
 8002e7e:	427f      	negs	r7, r7
 8002e80:	1ac9      	subs	r1, r1, r3
 8002e82:	1bcb      	subs	r3, r1, r7
 8002e84:	4699      	mov	r9, r3
 8002e86:	465d      	mov	r5, fp
 8002e88:	e576      	b.n	8002978 <__aeabi_dsub+0x104>
 8002e8a:	08ff      	lsrs	r7, r7, #3
 8002e8c:	074b      	lsls	r3, r1, #29
 8002e8e:	433b      	orrs	r3, r7
 8002e90:	08cc      	lsrs	r4, r1, #3
 8002e92:	e667      	b.n	8002b64 <__aeabi_dsub+0x2f0>
 8002e94:	000a      	movs	r2, r1
 8002e96:	08db      	lsrs	r3, r3, #3
 8002e98:	433a      	orrs	r2, r7
 8002e9a:	d100      	bne.n	8002e9e <__aeabi_dsub+0x62a>
 8002e9c:	e66f      	b.n	8002b7e <__aeabi_dsub+0x30a>
 8002e9e:	4662      	mov	r2, ip
 8002ea0:	0752      	lsls	r2, r2, #29
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	4662      	mov	r2, ip
 8002ea6:	08d4      	lsrs	r4, r2, #3
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	0312      	lsls	r2, r2, #12
 8002eac:	4214      	tst	r4, r2
 8002eae:	d007      	beq.n	8002ec0 <__aeabi_dsub+0x64c>
 8002eb0:	08c8      	lsrs	r0, r1, #3
 8002eb2:	4210      	tst	r0, r2
 8002eb4:	d104      	bne.n	8002ec0 <__aeabi_dsub+0x64c>
 8002eb6:	465d      	mov	r5, fp
 8002eb8:	0004      	movs	r4, r0
 8002eba:	08fb      	lsrs	r3, r7, #3
 8002ebc:	0749      	lsls	r1, r1, #29
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	0f5a      	lsrs	r2, r3, #29
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	0752      	lsls	r2, r2, #29
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	e65d      	b.n	8002b88 <__aeabi_dsub+0x314>
 8002ecc:	074b      	lsls	r3, r1, #29
 8002ece:	08ff      	lsrs	r7, r7, #3
 8002ed0:	433b      	orrs	r3, r7
 8002ed2:	08cc      	lsrs	r4, r1, #3
 8002ed4:	e649      	b.n	8002b6a <__aeabi_dsub+0x2f6>
 8002ed6:	19dc      	adds	r4, r3, r7
 8002ed8:	429c      	cmp	r4, r3
 8002eda:	419b      	sbcs	r3, r3
 8002edc:	4461      	add	r1, ip
 8002ede:	4689      	mov	r9, r1
 8002ee0:	425b      	negs	r3, r3
 8002ee2:	4499      	add	r9, r3
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	d400      	bmi.n	8002eec <__aeabi_dsub+0x678>
 8002eea:	e631      	b.n	8002b50 <__aeabi_dsub+0x2dc>
 8002eec:	464a      	mov	r2, r9
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <__aeabi_dsub+0x6d8>)
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	4691      	mov	r9, r2
 8002ef6:	4698      	mov	r8, r3
 8002ef8:	e62a      	b.n	8002b50 <__aeabi_dsub+0x2dc>
 8002efa:	0016      	movs	r6, r2
 8002efc:	4664      	mov	r4, ip
 8002efe:	3e20      	subs	r6, #32
 8002f00:	40f4      	lsrs	r4, r6
 8002f02:	46a0      	mov	r8, r4
 8002f04:	2a20      	cmp	r2, #32
 8002f06:	d005      	beq.n	8002f14 <__aeabi_dsub+0x6a0>
 8002f08:	2640      	movs	r6, #64	; 0x40
 8002f0a:	4664      	mov	r4, ip
 8002f0c:	1ab2      	subs	r2, r6, r2
 8002f0e:	4094      	lsls	r4, r2
 8002f10:	4323      	orrs	r3, r4
 8002f12:	469a      	mov	sl, r3
 8002f14:	4654      	mov	r4, sl
 8002f16:	1e63      	subs	r3, r4, #1
 8002f18:	419c      	sbcs	r4, r3
 8002f1a:	4643      	mov	r3, r8
 8002f1c:	431c      	orrs	r4, r3
 8002f1e:	e5db      	b.n	8002ad8 <__aeabi_dsub+0x264>
 8002f20:	0002      	movs	r2, r0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2300      	movs	r3, #0
 8002f26:	e548      	b.n	80029ba <__aeabi_dsub+0x146>
 8002f28:	19dc      	adds	r4, r3, r7
 8002f2a:	42bc      	cmp	r4, r7
 8002f2c:	41bf      	sbcs	r7, r7
 8002f2e:	4461      	add	r1, ip
 8002f30:	4689      	mov	r9, r1
 8002f32:	427f      	negs	r7, r7
 8002f34:	44b9      	add	r9, r7
 8002f36:	e738      	b.n	8002daa <__aeabi_dsub+0x536>
 8002f38:	464b      	mov	r3, r9
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6cc>
 8002f3e:	e69f      	b.n	8002c80 <__aeabi_dsub+0x40c>
 8002f40:	e606      	b.n	8002b50 <__aeabi_dsub+0x2dc>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007fe 	.word	0x000007fe
 8002f48:	000007ff 	.word	0x000007ff
 8002f4c:	ff7fffff 	.word	0xff7fffff
 8002f50:	08ff      	lsrs	r7, r7, #3
 8002f52:	074b      	lsls	r3, r1, #29
 8002f54:	433b      	orrs	r3, r7
 8002f56:	08cc      	lsrs	r4, r1, #3
 8002f58:	e616      	b.n	8002b88 <__aeabi_dsub+0x314>
 8002f5a:	4662      	mov	r2, ip
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	0752      	lsls	r2, r2, #29
 8002f60:	4313      	orrs	r3, r2
 8002f62:	4662      	mov	r2, ip
 8002f64:	08d4      	lsrs	r4, r2, #3
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	0312      	lsls	r2, r2, #12
 8002f6a:	4214      	tst	r4, r2
 8002f6c:	d007      	beq.n	8002f7e <__aeabi_dsub+0x70a>
 8002f6e:	08c8      	lsrs	r0, r1, #3
 8002f70:	4210      	tst	r0, r2
 8002f72:	d104      	bne.n	8002f7e <__aeabi_dsub+0x70a>
 8002f74:	465d      	mov	r5, fp
 8002f76:	0004      	movs	r4, r0
 8002f78:	08fb      	lsrs	r3, r7, #3
 8002f7a:	0749      	lsls	r1, r1, #29
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	0f5a      	lsrs	r2, r3, #29
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	0752      	lsls	r2, r2, #29
 8002f84:	08db      	lsrs	r3, r3, #3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	e5fe      	b.n	8002b88 <__aeabi_dsub+0x314>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	4a01      	ldr	r2, [pc, #4]	; (8002f94 <__aeabi_dsub+0x720>)
 8002f8e:	001c      	movs	r4, r3
 8002f90:	e513      	b.n	80029ba <__aeabi_dsub+0x146>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_dcmpun>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	0005      	movs	r5, r0
 8002f9c:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <__aeabi_dcmpun+0x38>)
 8002f9e:	031c      	lsls	r4, r3, #12
 8002fa0:	0016      	movs	r6, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	030a      	lsls	r2, r1, #12
 8002fa6:	0049      	lsls	r1, r1, #1
 8002fa8:	0b12      	lsrs	r2, r2, #12
 8002faa:	0d49      	lsrs	r1, r1, #21
 8002fac:	0b24      	lsrs	r4, r4, #12
 8002fae:	0d5b      	lsrs	r3, r3, #21
 8002fb0:	4281      	cmp	r1, r0
 8002fb2:	d008      	beq.n	8002fc6 <__aeabi_dcmpun+0x2e>
 8002fb4:	4a06      	ldr	r2, [pc, #24]	; (8002fd0 <__aeabi_dcmpun+0x38>)
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d103      	bne.n	8002fc4 <__aeabi_dcmpun+0x2c>
 8002fbc:	0020      	movs	r0, r4
 8002fbe:	4330      	orrs	r0, r6
 8002fc0:	1e43      	subs	r3, r0, #1
 8002fc2:	4198      	sbcs	r0, r3
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	432a      	orrs	r2, r5
 8002fca:	d1fb      	bne.n	8002fc4 <__aeabi_dcmpun+0x2c>
 8002fcc:	e7f2      	b.n	8002fb4 <__aeabi_dcmpun+0x1c>
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	000007ff 	.word	0x000007ff

08002fd4 <__aeabi_d2iz>:
 8002fd4:	000a      	movs	r2, r1
 8002fd6:	b530      	push	{r4, r5, lr}
 8002fd8:	4c13      	ldr	r4, [pc, #76]	; (8003028 <__aeabi_d2iz+0x54>)
 8002fda:	0053      	lsls	r3, r2, #1
 8002fdc:	0309      	lsls	r1, r1, #12
 8002fde:	0005      	movs	r5, r0
 8002fe0:	0b09      	lsrs	r1, r1, #12
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	0d5b      	lsrs	r3, r3, #21
 8002fe6:	0fd2      	lsrs	r2, r2, #31
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	dd04      	ble.n	8002ff6 <__aeabi_d2iz+0x22>
 8002fec:	480f      	ldr	r0, [pc, #60]	; (800302c <__aeabi_d2iz+0x58>)
 8002fee:	4283      	cmp	r3, r0
 8002ff0:	dd02      	ble.n	8002ff8 <__aeabi_d2iz+0x24>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <__aeabi_d2iz+0x5c>)
 8002ff4:	18d0      	adds	r0, r2, r3
 8002ff6:	bd30      	pop	{r4, r5, pc}
 8002ff8:	2080      	movs	r0, #128	; 0x80
 8002ffa:	0340      	lsls	r0, r0, #13
 8002ffc:	4301      	orrs	r1, r0
 8002ffe:	480d      	ldr	r0, [pc, #52]	; (8003034 <__aeabi_d2iz+0x60>)
 8003000:	1ac0      	subs	r0, r0, r3
 8003002:	281f      	cmp	r0, #31
 8003004:	dd08      	ble.n	8003018 <__aeabi_d2iz+0x44>
 8003006:	480c      	ldr	r0, [pc, #48]	; (8003038 <__aeabi_d2iz+0x64>)
 8003008:	1ac3      	subs	r3, r0, r3
 800300a:	40d9      	lsrs	r1, r3
 800300c:	000b      	movs	r3, r1
 800300e:	4258      	negs	r0, r3
 8003010:	2a00      	cmp	r2, #0
 8003012:	d1f0      	bne.n	8002ff6 <__aeabi_d2iz+0x22>
 8003014:	0018      	movs	r0, r3
 8003016:	e7ee      	b.n	8002ff6 <__aeabi_d2iz+0x22>
 8003018:	4c08      	ldr	r4, [pc, #32]	; (800303c <__aeabi_d2iz+0x68>)
 800301a:	40c5      	lsrs	r5, r0
 800301c:	46a4      	mov	ip, r4
 800301e:	4463      	add	r3, ip
 8003020:	4099      	lsls	r1, r3
 8003022:	000b      	movs	r3, r1
 8003024:	432b      	orrs	r3, r5
 8003026:	e7f2      	b.n	800300e <__aeabi_d2iz+0x3a>
 8003028:	000003fe 	.word	0x000003fe
 800302c:	0000041d 	.word	0x0000041d
 8003030:	7fffffff 	.word	0x7fffffff
 8003034:	00000433 	.word	0x00000433
 8003038:	00000413 	.word	0x00000413
 800303c:	fffffbed 	.word	0xfffffbed

08003040 <__aeabi_i2d>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	2800      	cmp	r0, #0
 8003044:	d016      	beq.n	8003074 <__aeabi_i2d+0x34>
 8003046:	17c3      	asrs	r3, r0, #31
 8003048:	18c5      	adds	r5, r0, r3
 800304a:	405d      	eors	r5, r3
 800304c:	0fc4      	lsrs	r4, r0, #31
 800304e:	0028      	movs	r0, r5
 8003050:	f000 f894 	bl	800317c <__clzsi2>
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <__aeabi_i2d+0x5c>)
 8003056:	1a12      	subs	r2, r2, r0
 8003058:	280a      	cmp	r0, #10
 800305a:	dc16      	bgt.n	800308a <__aeabi_i2d+0x4a>
 800305c:	0003      	movs	r3, r0
 800305e:	002e      	movs	r6, r5
 8003060:	3315      	adds	r3, #21
 8003062:	409e      	lsls	r6, r3
 8003064:	230b      	movs	r3, #11
 8003066:	1a18      	subs	r0, r3, r0
 8003068:	40c5      	lsrs	r5, r0
 800306a:	0552      	lsls	r2, r2, #21
 800306c:	032d      	lsls	r5, r5, #12
 800306e:	0b2d      	lsrs	r5, r5, #12
 8003070:	0d53      	lsrs	r3, r2, #21
 8003072:	e003      	b.n	800307c <__aeabi_i2d+0x3c>
 8003074:	2400      	movs	r4, #0
 8003076:	2300      	movs	r3, #0
 8003078:	2500      	movs	r5, #0
 800307a:	2600      	movs	r6, #0
 800307c:	051b      	lsls	r3, r3, #20
 800307e:	432b      	orrs	r3, r5
 8003080:	07e4      	lsls	r4, r4, #31
 8003082:	4323      	orrs	r3, r4
 8003084:	0030      	movs	r0, r6
 8003086:	0019      	movs	r1, r3
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	380b      	subs	r0, #11
 800308c:	4085      	lsls	r5, r0
 800308e:	0552      	lsls	r2, r2, #21
 8003090:	032d      	lsls	r5, r5, #12
 8003092:	2600      	movs	r6, #0
 8003094:	0b2d      	lsrs	r5, r5, #12
 8003096:	0d53      	lsrs	r3, r2, #21
 8003098:	e7f0      	b.n	800307c <__aeabi_i2d+0x3c>
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	0000041e 	.word	0x0000041e

080030a0 <__aeabi_ui2d>:
 80030a0:	b510      	push	{r4, lr}
 80030a2:	1e04      	subs	r4, r0, #0
 80030a4:	d010      	beq.n	80030c8 <__aeabi_ui2d+0x28>
 80030a6:	f000 f869 	bl	800317c <__clzsi2>
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <__aeabi_ui2d+0x48>)
 80030ac:	1a1b      	subs	r3, r3, r0
 80030ae:	280a      	cmp	r0, #10
 80030b0:	dc11      	bgt.n	80030d6 <__aeabi_ui2d+0x36>
 80030b2:	220b      	movs	r2, #11
 80030b4:	0021      	movs	r1, r4
 80030b6:	1a12      	subs	r2, r2, r0
 80030b8:	40d1      	lsrs	r1, r2
 80030ba:	3015      	adds	r0, #21
 80030bc:	030a      	lsls	r2, r1, #12
 80030be:	055b      	lsls	r3, r3, #21
 80030c0:	4084      	lsls	r4, r0
 80030c2:	0b12      	lsrs	r2, r2, #12
 80030c4:	0d5b      	lsrs	r3, r3, #21
 80030c6:	e001      	b.n	80030cc <__aeabi_ui2d+0x2c>
 80030c8:	2300      	movs	r3, #0
 80030ca:	2200      	movs	r2, #0
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	4313      	orrs	r3, r2
 80030d0:	0020      	movs	r0, r4
 80030d2:	0019      	movs	r1, r3
 80030d4:	bd10      	pop	{r4, pc}
 80030d6:	0022      	movs	r2, r4
 80030d8:	380b      	subs	r0, #11
 80030da:	4082      	lsls	r2, r0
 80030dc:	055b      	lsls	r3, r3, #21
 80030de:	0312      	lsls	r2, r2, #12
 80030e0:	2400      	movs	r4, #0
 80030e2:	0b12      	lsrs	r2, r2, #12
 80030e4:	0d5b      	lsrs	r3, r3, #21
 80030e6:	e7f1      	b.n	80030cc <__aeabi_ui2d+0x2c>
 80030e8:	0000041e 	.word	0x0000041e

080030ec <__aeabi_f2d>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	0043      	lsls	r3, r0, #1
 80030f0:	0246      	lsls	r6, r0, #9
 80030f2:	0fc4      	lsrs	r4, r0, #31
 80030f4:	20fe      	movs	r0, #254	; 0xfe
 80030f6:	0e1b      	lsrs	r3, r3, #24
 80030f8:	1c59      	adds	r1, r3, #1
 80030fa:	0a75      	lsrs	r5, r6, #9
 80030fc:	4208      	tst	r0, r1
 80030fe:	d00c      	beq.n	800311a <__aeabi_f2d+0x2e>
 8003100:	22e0      	movs	r2, #224	; 0xe0
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4694      	mov	ip, r2
 8003106:	076d      	lsls	r5, r5, #29
 8003108:	0b36      	lsrs	r6, r6, #12
 800310a:	4463      	add	r3, ip
 800310c:	051b      	lsls	r3, r3, #20
 800310e:	4333      	orrs	r3, r6
 8003110:	07e4      	lsls	r4, r4, #31
 8003112:	4323      	orrs	r3, r4
 8003114:	0028      	movs	r0, r5
 8003116:	0019      	movs	r1, r3
 8003118:	bd70      	pop	{r4, r5, r6, pc}
 800311a:	2b00      	cmp	r3, #0
 800311c:	d114      	bne.n	8003148 <__aeabi_f2d+0x5c>
 800311e:	2d00      	cmp	r5, #0
 8003120:	d01b      	beq.n	800315a <__aeabi_f2d+0x6e>
 8003122:	0028      	movs	r0, r5
 8003124:	f000 f82a 	bl	800317c <__clzsi2>
 8003128:	280a      	cmp	r0, #10
 800312a:	dc1c      	bgt.n	8003166 <__aeabi_f2d+0x7a>
 800312c:	230b      	movs	r3, #11
 800312e:	002e      	movs	r6, r5
 8003130:	1a1b      	subs	r3, r3, r0
 8003132:	40de      	lsrs	r6, r3
 8003134:	0003      	movs	r3, r0
 8003136:	3315      	adds	r3, #21
 8003138:	409d      	lsls	r5, r3
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <__aeabi_f2d+0x88>)
 800313c:	0336      	lsls	r6, r6, #12
 800313e:	1a12      	subs	r2, r2, r0
 8003140:	0552      	lsls	r2, r2, #21
 8003142:	0b36      	lsrs	r6, r6, #12
 8003144:	0d53      	lsrs	r3, r2, #21
 8003146:	e7e1      	b.n	800310c <__aeabi_f2d+0x20>
 8003148:	2d00      	cmp	r5, #0
 800314a:	d009      	beq.n	8003160 <__aeabi_f2d+0x74>
 800314c:	2280      	movs	r2, #128	; 0x80
 800314e:	0b36      	lsrs	r6, r6, #12
 8003150:	0312      	lsls	r2, r2, #12
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <__aeabi_f2d+0x8c>)
 8003154:	076d      	lsls	r5, r5, #29
 8003156:	4316      	orrs	r6, r2
 8003158:	e7d8      	b.n	800310c <__aeabi_f2d+0x20>
 800315a:	2300      	movs	r3, #0
 800315c:	2600      	movs	r6, #0
 800315e:	e7d5      	b.n	800310c <__aeabi_f2d+0x20>
 8003160:	2600      	movs	r6, #0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <__aeabi_f2d+0x8c>)
 8003164:	e7d2      	b.n	800310c <__aeabi_f2d+0x20>
 8003166:	0003      	movs	r3, r0
 8003168:	3b0b      	subs	r3, #11
 800316a:	409d      	lsls	r5, r3
 800316c:	002e      	movs	r6, r5
 800316e:	2500      	movs	r5, #0
 8003170:	e7e3      	b.n	800313a <__aeabi_f2d+0x4e>
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	00000389 	.word	0x00000389
 8003178:	000007ff 	.word	0x000007ff

0800317c <__clzsi2>:
 800317c:	211c      	movs	r1, #28
 800317e:	2301      	movs	r3, #1
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	4298      	cmp	r0, r3
 8003184:	d301      	bcc.n	800318a <__clzsi2+0xe>
 8003186:	0c00      	lsrs	r0, r0, #16
 8003188:	3910      	subs	r1, #16
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	4298      	cmp	r0, r3
 800318e:	d301      	bcc.n	8003194 <__clzsi2+0x18>
 8003190:	0a00      	lsrs	r0, r0, #8
 8003192:	3908      	subs	r1, #8
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	4298      	cmp	r0, r3
 8003198:	d301      	bcc.n	800319e <__clzsi2+0x22>
 800319a:	0900      	lsrs	r0, r0, #4
 800319c:	3904      	subs	r1, #4
 800319e:	a202      	add	r2, pc, #8	; (adr r2, 80031a8 <__clzsi2+0x2c>)
 80031a0:	5c10      	ldrb	r0, [r2, r0]
 80031a2:	1840      	adds	r0, r0, r1
 80031a4:	4770      	bx	lr
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	02020304 	.word	0x02020304
 80031ac:	01010101 	.word	0x01010101
	...

080031b8 <__clzdi2>:
 80031b8:	b510      	push	{r4, lr}
 80031ba:	2900      	cmp	r1, #0
 80031bc:	d103      	bne.n	80031c6 <__clzdi2+0xe>
 80031be:	f7ff ffdd 	bl	800317c <__clzsi2>
 80031c2:	3020      	adds	r0, #32
 80031c4:	e002      	b.n	80031cc <__clzdi2+0x14>
 80031c6:	0008      	movs	r0, r1
 80031c8:	f7ff ffd8 	bl	800317c <__clzsi2>
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)

080031d0 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	0002      	movs	r2, r0
 80031d8:	1dbb      	adds	r3, r7, #6
 80031da:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80031dc:	230f      	movs	r3, #15
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 80031e4:	210e      	movs	r1, #14
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	222d      	movs	r2, #45	; 0x2d
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e01a      	b.n	800322a <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80031f4:	240e      	movs	r4, #14
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b299      	uxth	r1, r3
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	3b2d      	subs	r3, #45	; 0x2d
 8003202:	4a3e      	ldr	r2, [pc, #248]	; (80032fc <VL53L1X_SensorInit+0x12c>)
 8003204:	5cd2      	ldrb	r2, [r2, r3]
 8003206:	1dbb      	adds	r3, r7, #6
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	0018      	movs	r0, r3
 800320c:	f001 fbe0 	bl	80049d0 <VL53L1_WrByte>
 8003210:	0003      	movs	r3, r0
 8003212:	0019      	movs	r1, r3
 8003214:	220f      	movs	r2, #15
 8003216:	18bb      	adds	r3, r7, r2
 8003218:	18ba      	adds	r2, r7, r2
 800321a:	7812      	ldrb	r2, [r2, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003220:	193b      	adds	r3, r7, r4
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	193b      	adds	r3, r7, r4
 8003226:	3201      	adds	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	230e      	movs	r3, #14
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b87      	cmp	r3, #135	; 0x87
 8003232:	d9df      	bls.n	80031f4 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8003234:	1dbb      	adds	r3, r7, #6
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	0018      	movs	r0, r3
 800323a:	f000 f8b3 	bl	80033a4 <VL53L1X_StartRanging>
 800323e:	0003      	movs	r3, r0
 8003240:	0019      	movs	r1, r3
 8003242:	220f      	movs	r2, #15
 8003244:	18bb      	adds	r3, r7, r2
 8003246:	18ba      	adds	r2, r7, r2
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 800324e:	230d      	movs	r3, #13
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8003256:	e00f      	b.n	8003278 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8003258:	230d      	movs	r3, #13
 800325a:	18fa      	adds	r2, r7, r3
 800325c:	1dbb      	adds	r3, r7, #6
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	0011      	movs	r1, r2
 8003262:	0018      	movs	r0, r3
 8003264:	f000 f8dc 	bl	8003420 <VL53L1X_CheckForDataReady>
 8003268:	0003      	movs	r3, r0
 800326a:	0019      	movs	r1, r3
 800326c:	220f      	movs	r2, #15
 800326e:	18bb      	adds	r3, r7, r2
 8003270:	18ba      	adds	r2, r7, r2
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8003278:	230d      	movs	r3, #13
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ea      	beq.n	8003258 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8003282:	1dbb      	adds	r3, r7, #6
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	0018      	movs	r0, r3
 8003288:	f000 f83a 	bl	8003300 <VL53L1X_ClearInterrupt>
 800328c:	0003      	movs	r3, r0
 800328e:	0019      	movs	r1, r3
 8003290:	240f      	movs	r4, #15
 8003292:	193b      	adds	r3, r7, r4
 8003294:	193a      	adds	r2, r7, r4
 8003296:	7812      	ldrb	r2, [r2, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 800329c:	1dbb      	adds	r3, r7, #6
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 f89e 	bl	80033e2 <VL53L1X_StopRanging>
 80032a6:	0003      	movs	r3, r0
 80032a8:	0019      	movs	r1, r3
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	193a      	adds	r2, r7, r4
 80032ae:	7812      	ldrb	r2, [r2, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80032b4:	1dbb      	adds	r3, r7, #6
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	2209      	movs	r2, #9
 80032ba:	2108      	movs	r1, #8
 80032bc:	0018      	movs	r0, r3
 80032be:	f001 fb87 	bl	80049d0 <VL53L1_WrByte>
 80032c2:	0003      	movs	r3, r0
 80032c4:	0019      	movs	r1, r3
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	193a      	adds	r2, r7, r4
 80032ca:	7812      	ldrb	r2, [r2, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80032d0:	1dbb      	adds	r3, r7, #6
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	210b      	movs	r1, #11
 80032d8:	0018      	movs	r0, r3
 80032da:	f001 fb79 	bl	80049d0 <VL53L1_WrByte>
 80032de:	0003      	movs	r3, r0
 80032e0:	0019      	movs	r1, r3
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	193a      	adds	r2, r7, r4
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	701a      	strb	r2, [r3, #0]
	return status;
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b25b      	sxtb	r3, r3
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b005      	add	sp, #20
 80032f8:	bd90      	pop	{r4, r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	0800b92c 	.word	0x0800b92c

08003300 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	0002      	movs	r2, r0
 8003308:	1dbb      	adds	r3, r7, #6
 800330a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800330c:	240f      	movs	r4, #15
 800330e:	193b      	adds	r3, r7, r4
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8003314:	1dbb      	adds	r3, r7, #6
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	2186      	movs	r1, #134	; 0x86
 800331c:	0018      	movs	r0, r3
 800331e:	f001 fb57 	bl	80049d0 <VL53L1_WrByte>
 8003322:	0003      	movs	r3, r0
 8003324:	0019      	movs	r1, r3
 8003326:	193b      	adds	r3, r7, r4
 8003328:	193a      	adds	r2, r7, r4
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	701a      	strb	r2, [r3, #0]
	return status;
 8003330:	193b      	adds	r3, r7, r4
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b25b      	sxtb	r3, r3
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b005      	add	sp, #20
 800333c:	bd90      	pop	{r4, r7, pc}

0800333e <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800333e:	b5b0      	push	{r4, r5, r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	0002      	movs	r2, r0
 8003346:	6039      	str	r1, [r7, #0]
 8003348:	1dbb      	adds	r3, r7, #6
 800334a:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800334c:	240f      	movs	r4, #15
 800334e:	193b      	adds	r3, r7, r4
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8003354:	250e      	movs	r5, #14
 8003356:	197a      	adds	r2, r7, r5
 8003358:	1dbb      	adds	r3, r7, #6
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	2130      	movs	r1, #48	; 0x30
 800335e:	0018      	movs	r0, r3
 8003360:	f001 fbfc 	bl	8004b5c <VL53L1_RdByte>
 8003364:	0003      	movs	r3, r0
 8003366:	0019      	movs	r1, r3
 8003368:	0020      	movs	r0, r4
 800336a:	183b      	adds	r3, r7, r0
 800336c:	183a      	adds	r2, r7, r0
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8003374:	197b      	adds	r3, r7, r5
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2210      	movs	r2, #16
 800337a:	4013      	ands	r3, r2
 800337c:	b2da      	uxtb	r2, r3
 800337e:	197b      	adds	r3, r7, r5
 8003380:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8003382:	197b      	adds	r3, r7, r5
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	b2db      	uxtb	r3, r3
 800338a:	425a      	negs	r2, r3
 800338c:	4153      	adcs	r3, r2
 800338e:	b2db      	uxtb	r3, r3
 8003390:	001a      	movs	r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	701a      	strb	r2, [r3, #0]
	return status;
 8003396:	183b      	adds	r3, r7, r0
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b25b      	sxtb	r3, r3
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b004      	add	sp, #16
 80033a2:	bdb0      	pop	{r4, r5, r7, pc}

080033a4 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	0002      	movs	r2, r0
 80033ac:	1dbb      	adds	r3, r7, #6
 80033ae:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80033b0:	240f      	movs	r4, #15
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80033b8:	1dbb      	adds	r3, r7, #6
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	2240      	movs	r2, #64	; 0x40
 80033be:	2187      	movs	r1, #135	; 0x87
 80033c0:	0018      	movs	r0, r3
 80033c2:	f001 fb05 	bl	80049d0 <VL53L1_WrByte>
 80033c6:	0003      	movs	r3, r0
 80033c8:	0019      	movs	r1, r3
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	193a      	adds	r2, r7, r4
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	701a      	strb	r2, [r3, #0]
	return status;
 80033d4:	193b      	adds	r3, r7, r4
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b25b      	sxtb	r3, r3
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b005      	add	sp, #20
 80033e0:	bd90      	pop	{r4, r7, pc}

080033e2 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80033e2:	b590      	push	{r4, r7, lr}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	0002      	movs	r2, r0
 80033ea:	1dbb      	adds	r3, r7, #6
 80033ec:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80033ee:	240f      	movs	r4, #15
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80033f6:	1dbb      	adds	r3, r7, #6
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	2187      	movs	r1, #135	; 0x87
 80033fe:	0018      	movs	r0, r3
 8003400:	f001 fae6 	bl	80049d0 <VL53L1_WrByte>
 8003404:	0003      	movs	r3, r0
 8003406:	0019      	movs	r1, r3
 8003408:	193b      	adds	r3, r7, r4
 800340a:	193a      	adds	r2, r7, r4
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	701a      	strb	r2, [r3, #0]
	return status;
 8003412:	193b      	adds	r3, r7, r4
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b25b      	sxtb	r3, r3
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b005      	add	sp, #20
 800341e:	bd90      	pop	{r4, r7, pc}

08003420 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8003420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	0002      	movs	r2, r0
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	1dbb      	adds	r3, r7, #6
 800342c:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800342e:	240f      	movs	r4, #15
 8003430:	193b      	adds	r3, r7, r4
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8003436:	250d      	movs	r5, #13
 8003438:	197a      	adds	r2, r7, r5
 800343a:	1dbb      	adds	r3, r7, #6
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	0011      	movs	r1, r2
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff ff7c 	bl	800333e <VL53L1X_GetInterruptPolarity>
 8003446:	0003      	movs	r3, r0
 8003448:	0019      	movs	r1, r3
 800344a:	193b      	adds	r3, r7, r4
 800344c:	193a      	adds	r2, r7, r4
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8003454:	260e      	movs	r6, #14
 8003456:	19ba      	adds	r2, r7, r6
 8003458:	1dbb      	adds	r3, r7, #6
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	2131      	movs	r1, #49	; 0x31
 800345e:	0018      	movs	r0, r3
 8003460:	f001 fb7c 	bl	8004b5c <VL53L1_RdByte>
 8003464:	0003      	movs	r3, r0
 8003466:	0019      	movs	r1, r3
 8003468:	193b      	adds	r3, r7, r4
 800346a:	193a      	adds	r2, r7, r4
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8003472:	193b      	adds	r3, r7, r4
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b25b      	sxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 800347c:	19bb      	adds	r3, r7, r6
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	001a      	movs	r2, r3
 8003482:	2301      	movs	r3, #1
 8003484:	4013      	ands	r3, r2
 8003486:	197a      	adds	r2, r7, r5
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	4293      	cmp	r3, r2
 800348c:	d103      	bne.n	8003496 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
 8003494:	e002      	b.n	800349c <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800349c:	230f      	movs	r3, #15
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b25b      	sxtb	r3, r3
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b005      	add	sp, #20
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034ac <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 80034ac:	b5b0      	push	{r4, r5, r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	0002      	movs	r2, r0
 80034b4:	1dbb      	adds	r3, r7, #6
 80034b6:	801a      	strh	r2, [r3, #0]
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	1c0a      	adds	r2, r1, #0
 80034bc:	801a      	strh	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 80034be:	240f      	movs	r4, #15
 80034c0:	193b      	adds	r3, r7, r4
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 80034c6:	250c      	movs	r5, #12
 80034c8:	197a      	adds	r2, r7, r5
 80034ca:	1dbb      	adds	r3, r7, #6
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	0011      	movs	r1, r2
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 faa5 	bl	8003a20 <VL53L1X_GetDistanceMode>
 80034d6:	0003      	movs	r3, r0
 80034d8:	0019      	movs	r1, r3
 80034da:	193b      	adds	r3, r7, r4
 80034dc:	193a      	adds	r2, r7, r4
 80034de:	7812      	ldrb	r2, [r2, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	701a      	strb	r2, [r3, #0]
	if (DM == 0)
 80034e4:	197b      	adds	r3, r7, r5
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <VL53L1X_SetTimingBudgetInMs+0x44>
		return 1;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e11a      	b.n	8003726 <VL53L1X_SetTimingBudgetInMs+0x27a>
	else if (DM == 1) {	/* Short DistanceMode */
 80034f0:	230c      	movs	r3, #12
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d000      	beq.n	80034fc <VL53L1X_SetTimingBudgetInMs+0x50>
 80034fa:	e092      	b.n	8003622 <VL53L1X_SetTimingBudgetInMs+0x176>
		switch (TimingBudgetInMs) {
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	22fa      	movs	r2, #250	; 0xfa
 8003502:	0052      	lsls	r2, r2, #1
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <VL53L1X_SetTimingBudgetInMs+0x5e>
 8003508:	e077      	b.n	80035fa <VL53L1X_SetTimingBudgetInMs+0x14e>
 800350a:	22fa      	movs	r2, #250	; 0xfa
 800350c:	0052      	lsls	r2, r2, #1
 800350e:	4293      	cmp	r3, r2
 8003510:	dd00      	ble.n	8003514 <VL53L1X_SetTimingBudgetInMs+0x68>
 8003512:	e081      	b.n	8003618 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8003514:	2bc8      	cmp	r3, #200	; 0xc8
 8003516:	d100      	bne.n	800351a <VL53L1X_SetTimingBudgetInMs+0x6e>
 8003518:	e060      	b.n	80035dc <VL53L1X_SetTimingBudgetInMs+0x130>
 800351a:	dd00      	ble.n	800351e <VL53L1X_SetTimingBudgetInMs+0x72>
 800351c:	e07c      	b.n	8003618 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d04c      	beq.n	80035bc <VL53L1X_SetTimingBudgetInMs+0x110>
 8003522:	dd00      	ble.n	8003526 <VL53L1X_SetTimingBudgetInMs+0x7a>
 8003524:	e078      	b.n	8003618 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8003526:	2b32      	cmp	r3, #50	; 0x32
 8003528:	d037      	beq.n	800359a <VL53L1X_SetTimingBudgetInMs+0xee>
 800352a:	dd00      	ble.n	800352e <VL53L1X_SetTimingBudgetInMs+0x82>
 800352c:	e074      	b.n	8003618 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800352e:	2b21      	cmp	r3, #33	; 0x21
 8003530:	d024      	beq.n	800357c <VL53L1X_SetTimingBudgetInMs+0xd0>
 8003532:	dd00      	ble.n	8003536 <VL53L1X_SetTimingBudgetInMs+0x8a>
 8003534:	e070      	b.n	8003618 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8003536:	2b0f      	cmp	r3, #15
 8003538:	d002      	beq.n	8003540 <VL53L1X_SetTimingBudgetInMs+0x94>
 800353a:	2b14      	cmp	r3, #20
 800353c:	d00f      	beq.n	800355e <VL53L1X_SetTimingBudgetInMs+0xb2>
 800353e:	e06b      	b.n	8003618 <VL53L1X_SetTimingBudgetInMs+0x16c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003540:	1dbb      	adds	r3, r7, #6
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	221d      	movs	r2, #29
 8003546:	215e      	movs	r1, #94	; 0x5e
 8003548:	0018      	movs	r0, r3
 800354a:	f001 fa7d 	bl	8004a48 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800354e:	1dbb      	adds	r3, r7, #6
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	2227      	movs	r2, #39	; 0x27
 8003554:	2161      	movs	r1, #97	; 0x61
 8003556:	0018      	movs	r0, r3
 8003558:	f001 fa76 	bl	8004a48 <VL53L1_WrWord>
					0x0027);
			break;
 800355c:	e0df      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800355e:	1dbb      	adds	r3, r7, #6
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	2251      	movs	r2, #81	; 0x51
 8003564:	215e      	movs	r1, #94	; 0x5e
 8003566:	0018      	movs	r0, r3
 8003568:	f001 fa6e 	bl	8004a48 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800356c:	1dbb      	adds	r3, r7, #6
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	226e      	movs	r2, #110	; 0x6e
 8003572:	2161      	movs	r1, #97	; 0x61
 8003574:	0018      	movs	r0, r3
 8003576:	f001 fa67 	bl	8004a48 <VL53L1_WrWord>
					0x006E);
			break;
 800357a:	e0d0      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800357c:	1dbb      	adds	r3, r7, #6
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	22d6      	movs	r2, #214	; 0xd6
 8003582:	215e      	movs	r1, #94	; 0x5e
 8003584:	0018      	movs	r0, r3
 8003586:	f001 fa5f 	bl	8004a48 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800358a:	1dbb      	adds	r3, r7, #6
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	226e      	movs	r2, #110	; 0x6e
 8003590:	2161      	movs	r1, #97	; 0x61
 8003592:	0018      	movs	r0, r3
 8003594:	f001 fa58 	bl	8004a48 <VL53L1_WrWord>
					0x006E);
			break;
 8003598:	e0c1      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800359a:	23d7      	movs	r3, #215	; 0xd7
 800359c:	005a      	lsls	r2, r3, #1
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	215e      	movs	r1, #94	; 0x5e
 80035a4:	0018      	movs	r0, r3
 80035a6:	f001 fa4f 	bl	8004a48 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80035aa:	23f4      	movs	r3, #244	; 0xf4
 80035ac:	005a      	lsls	r2, r3, #1
 80035ae:	1dbb      	adds	r3, r7, #6
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	2161      	movs	r1, #97	; 0x61
 80035b4:	0018      	movs	r0, r3
 80035b6:	f001 fa47 	bl	8004a48 <VL53L1_WrWord>
					0x01E8);
			break;
 80035ba:	e0b0      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80035bc:	4a5c      	ldr	r2, [pc, #368]	; (8003730 <VL53L1X_SetTimingBudgetInMs+0x284>)
 80035be:	1dbb      	adds	r3, r7, #6
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	215e      	movs	r1, #94	; 0x5e
 80035c4:	0018      	movs	r0, r3
 80035c6:	f001 fa3f 	bl	8004a48 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80035ca:	23e2      	movs	r3, #226	; 0xe2
 80035cc:	009a      	lsls	r2, r3, #2
 80035ce:	1dbb      	adds	r3, r7, #6
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	2161      	movs	r1, #97	; 0x61
 80035d4:	0018      	movs	r0, r3
 80035d6:	f001 fa37 	bl	8004a48 <VL53L1_WrWord>
					0x0388);
			break;
 80035da:	e0a0      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80035dc:	4a55      	ldr	r2, [pc, #340]	; (8003734 <VL53L1X_SetTimingBudgetInMs+0x288>)
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	215e      	movs	r1, #94	; 0x5e
 80035e4:	0018      	movs	r0, r3
 80035e6:	f001 fa2f 	bl	8004a48 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80035ea:	4a53      	ldr	r2, [pc, #332]	; (8003738 <VL53L1X_SetTimingBudgetInMs+0x28c>)
 80035ec:	1dbb      	adds	r3, r7, #6
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	2161      	movs	r1, #97	; 0x61
 80035f2:	0018      	movs	r0, r3
 80035f4:	f001 fa28 	bl	8004a48 <VL53L1_WrWord>
					0x0496);
			break;
 80035f8:	e091      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80035fa:	4a50      	ldr	r2, [pc, #320]	; (800373c <VL53L1X_SetTimingBudgetInMs+0x290>)
 80035fc:	1dbb      	adds	r3, r7, #6
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	215e      	movs	r1, #94	; 0x5e
 8003602:	0018      	movs	r0, r3
 8003604:	f001 fa20 	bl	8004a48 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003608:	4a4d      	ldr	r2, [pc, #308]	; (8003740 <VL53L1X_SetTimingBudgetInMs+0x294>)
 800360a:	1dbb      	adds	r3, r7, #6
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	2161      	movs	r1, #97	; 0x61
 8003610:	0018      	movs	r0, r3
 8003612:	f001 fa19 	bl	8004a48 <VL53L1_WrWord>
					0x05C1);
			break;
 8003616:	e082      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8003618:	230f      	movs	r3, #15
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
			break;
 8003620:	e07d      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		}
	} else {
		switch (TimingBudgetInMs) {
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	22fa      	movs	r2, #250	; 0xfa
 8003628:	0052      	lsls	r2, r2, #1
 800362a:	4293      	cmp	r3, r2
 800362c:	d100      	bne.n	8003630 <VL53L1X_SetTimingBudgetInMs+0x184>
 800362e:	e062      	b.n	80036f6 <VL53L1X_SetTimingBudgetInMs+0x24a>
 8003630:	22fa      	movs	r2, #250	; 0xfa
 8003632:	0052      	lsls	r2, r2, #1
 8003634:	4293      	cmp	r3, r2
 8003636:	dd00      	ble.n	800363a <VL53L1X_SetTimingBudgetInMs+0x18e>
 8003638:	e06c      	b.n	8003714 <VL53L1X_SetTimingBudgetInMs+0x268>
 800363a:	2bc8      	cmp	r3, #200	; 0xc8
 800363c:	d04b      	beq.n	80036d6 <VL53L1X_SetTimingBudgetInMs+0x22a>
 800363e:	dd00      	ble.n	8003642 <VL53L1X_SetTimingBudgetInMs+0x196>
 8003640:	e068      	b.n	8003714 <VL53L1X_SetTimingBudgetInMs+0x268>
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d036      	beq.n	80036b4 <VL53L1X_SetTimingBudgetInMs+0x208>
 8003646:	dd00      	ble.n	800364a <VL53L1X_SetTimingBudgetInMs+0x19e>
 8003648:	e064      	b.n	8003714 <VL53L1X_SetTimingBudgetInMs+0x268>
 800364a:	2b32      	cmp	r3, #50	; 0x32
 800364c:	d023      	beq.n	8003696 <VL53L1X_SetTimingBudgetInMs+0x1ea>
 800364e:	dc61      	bgt.n	8003714 <VL53L1X_SetTimingBudgetInMs+0x268>
 8003650:	2b14      	cmp	r3, #20
 8003652:	d002      	beq.n	800365a <VL53L1X_SetTimingBudgetInMs+0x1ae>
 8003654:	2b21      	cmp	r3, #33	; 0x21
 8003656:	d00f      	beq.n	8003678 <VL53L1X_SetTimingBudgetInMs+0x1cc>
 8003658:	e05c      	b.n	8003714 <VL53L1X_SetTimingBudgetInMs+0x268>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	221e      	movs	r2, #30
 8003660:	215e      	movs	r1, #94	; 0x5e
 8003662:	0018      	movs	r0, r3
 8003664:	f001 f9f0 	bl	8004a48 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003668:	1dbb      	adds	r3, r7, #6
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	2222      	movs	r2, #34	; 0x22
 800366e:	2161      	movs	r1, #97	; 0x61
 8003670:	0018      	movs	r0, r3
 8003672:	f001 f9e9 	bl	8004a48 <VL53L1_WrWord>
					0x0022);
			break;
 8003676:	e052      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003678:	1dbb      	adds	r3, r7, #6
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	2260      	movs	r2, #96	; 0x60
 800367e:	215e      	movs	r1, #94	; 0x5e
 8003680:	0018      	movs	r0, r3
 8003682:	f001 f9e1 	bl	8004a48 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003686:	1dbb      	adds	r3, r7, #6
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	226e      	movs	r2, #110	; 0x6e
 800368c:	2161      	movs	r1, #97	; 0x61
 800368e:	0018      	movs	r0, r3
 8003690:	f001 f9da 	bl	8004a48 <VL53L1_WrWord>
					0x006E);
			break;
 8003694:	e043      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003696:	1dbb      	adds	r3, r7, #6
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	22ad      	movs	r2, #173	; 0xad
 800369c:	215e      	movs	r1, #94	; 0x5e
 800369e:	0018      	movs	r0, r3
 80036a0:	f001 f9d2 	bl	8004a48 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80036a4:	1dbb      	adds	r3, r7, #6
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	22c6      	movs	r2, #198	; 0xc6
 80036aa:	2161      	movs	r1, #97	; 0x61
 80036ac:	0018      	movs	r0, r3
 80036ae:	f001 f9cb 	bl	8004a48 <VL53L1_WrWord>
					0x00C6);
			break;
 80036b2:	e034      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80036b4:	23e6      	movs	r3, #230	; 0xe6
 80036b6:	005a      	lsls	r2, r3, #1
 80036b8:	1dbb      	adds	r3, r7, #6
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	215e      	movs	r1, #94	; 0x5e
 80036be:	0018      	movs	r0, r3
 80036c0:	f001 f9c2 	bl	8004a48 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80036c4:	23f5      	movs	r3, #245	; 0xf5
 80036c6:	005a      	lsls	r2, r3, #1
 80036c8:	1dbb      	adds	r3, r7, #6
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	2161      	movs	r1, #97	; 0x61
 80036ce:	0018      	movs	r0, r3
 80036d0:	f001 f9ba 	bl	8004a48 <VL53L1_WrWord>
					0x01EA);
			break;
 80036d4:	e023      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80036d6:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <VL53L1X_SetTimingBudgetInMs+0x298>)
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	215e      	movs	r1, #94	; 0x5e
 80036de:	0018      	movs	r0, r3
 80036e0:	f001 f9b2 	bl	8004a48 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80036e4:	23be      	movs	r3, #190	; 0xbe
 80036e6:	009a      	lsls	r2, r3, #2
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	2161      	movs	r1, #97	; 0x61
 80036ee:	0018      	movs	r0, r3
 80036f0:	f001 f9aa 	bl	8004a48 <VL53L1_WrWord>
					0x02F8);
			break;
 80036f4:	e013      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <VL53L1X_SetTimingBudgetInMs+0x29c>)
 80036f8:	1dbb      	adds	r3, r7, #6
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	215e      	movs	r1, #94	; 0x5e
 80036fe:	0018      	movs	r0, r3
 8003700:	f001 f9a2 	bl	8004a48 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003704:	4a11      	ldr	r2, [pc, #68]	; (800374c <VL53L1X_SetTimingBudgetInMs+0x2a0>)
 8003706:	1dbb      	adds	r3, r7, #6
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	2161      	movs	r1, #97	; 0x61
 800370c:	0018      	movs	r0, r3
 800370e:	f001 f99b 	bl	8004a48 <VL53L1_WrWord>
					0x04A4);
			break;
 8003712:	e004      	b.n	800371e <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8003714:	230f      	movs	r3, #15
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
			break;
 800371c:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 800371e:	230f      	movs	r3, #15
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b25b      	sxtb	r3, r3
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bdb0      	pop	{r4, r5, r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	000002e1 	.word	0x000002e1
 8003734:	000003e1 	.word	0x000003e1
 8003738:	00000496 	.word	0x00000496
 800373c:	00000591 	.word	0x00000591
 8003740:	000005c1 	.word	0x000005c1
 8003744:	000002d9 	.word	0x000002d9
 8003748:	0000048f 	.word	0x0000048f
 800374c:	000004a4 	.word	0x000004a4

08003750 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8003750:	b5b0      	push	{r4, r5, r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	0002      	movs	r2, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	1dbb      	adds	r3, r7, #6
 800375c:	801a      	strh	r2, [r3, #0]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 800375e:	240f      	movs	r4, #15
 8003760:	193b      	adds	r3, r7, r4
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8003766:	250c      	movs	r5, #12
 8003768:	197a      	adds	r2, r7, r5
 800376a:	1dbb      	adds	r3, r7, #6
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	215e      	movs	r1, #94	; 0x5e
 8003770:	0018      	movs	r0, r3
 8003772:	f001 fa39 	bl	8004be8 <VL53L1_RdWord>
 8003776:	0003      	movs	r3, r0
 8003778:	0019      	movs	r1, r3
 800377a:	193b      	adds	r3, r7, r4
 800377c:	193a      	adds	r2, r7, r4
 800377e:	7812      	ldrb	r2, [r2, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	701a      	strb	r2, [r3, #0]
	switch (Temp) {
 8003784:	197b      	adds	r3, r7, r5
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	4a37      	ldr	r2, [pc, #220]	; (8003868 <VL53L1X_GetTimingBudgetInMs+0x118>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d100      	bne.n	8003790 <VL53L1X_GetTimingBudgetInMs+0x40>
 800378e:	e057      	b.n	8003840 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8003790:	4a35      	ldr	r2, [pc, #212]	; (8003868 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8003792:	4293      	cmp	r3, r2
 8003794:	dd00      	ble.n	8003798 <VL53L1X_GetTimingBudgetInMs+0x48>
 8003796:	e058      	b.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003798:	4a34      	ldr	r2, [pc, #208]	; (800386c <VL53L1X_GetTimingBudgetInMs+0x11c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d100      	bne.n	80037a0 <VL53L1X_GetTimingBudgetInMs+0x50>
 800379e:	e04f      	b.n	8003840 <VL53L1X_GetTimingBudgetInMs+0xf0>
 80037a0:	2292      	movs	r2, #146	; 0x92
 80037a2:	00d2      	lsls	r2, r2, #3
 80037a4:	4293      	cmp	r3, r2
 80037a6:	db00      	blt.n	80037aa <VL53L1X_GetTimingBudgetInMs+0x5a>
 80037a8:	e04f      	b.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80037aa:	4a31      	ldr	r2, [pc, #196]	; (8003870 <VL53L1X_GetTimingBudgetInMs+0x120>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d043      	beq.n	8003838 <VL53L1X_GetTimingBudgetInMs+0xe8>
 80037b0:	4a2f      	ldr	r2, [pc, #188]	; (8003870 <VL53L1X_GetTimingBudgetInMs+0x120>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	dc49      	bgt.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80037b6:	4a2f      	ldr	r2, [pc, #188]	; (8003874 <VL53L1X_GetTimingBudgetInMs+0x124>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d039      	beq.n	8003830 <VL53L1X_GetTimingBudgetInMs+0xe0>
 80037bc:	4a2d      	ldr	r2, [pc, #180]	; (8003874 <VL53L1X_GetTimingBudgetInMs+0x124>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	dc43      	bgt.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80037c2:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <VL53L1X_GetTimingBudgetInMs+0x128>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d037      	beq.n	8003838 <VL53L1X_GetTimingBudgetInMs+0xe8>
 80037c8:	4a2b      	ldr	r2, [pc, #172]	; (8003878 <VL53L1X_GetTimingBudgetInMs+0x128>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	dc3d      	bgt.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80037ce:	22e6      	movs	r2, #230	; 0xe6
 80037d0:	0052      	lsls	r2, r2, #1
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d02c      	beq.n	8003830 <VL53L1X_GetTimingBudgetInMs+0xe0>
 80037d6:	22e6      	movs	r2, #230	; 0xe6
 80037d8:	0052      	lsls	r2, r2, #1
 80037da:	4293      	cmp	r3, r2
 80037dc:	dc35      	bgt.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80037de:	22d7      	movs	r2, #215	; 0xd7
 80037e0:	0052      	lsls	r2, r2, #1
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d020      	beq.n	8003828 <VL53L1X_GetTimingBudgetInMs+0xd8>
 80037e6:	22d7      	movs	r2, #215	; 0xd7
 80037e8:	0052      	lsls	r2, r2, #1
 80037ea:	4293      	cmp	r3, r2
 80037ec:	dc2d      	bgt.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80037ee:	2bd6      	cmp	r3, #214	; 0xd6
 80037f0:	d016      	beq.n	8003820 <VL53L1X_GetTimingBudgetInMs+0xd0>
 80037f2:	dc2a      	bgt.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80037f4:	2bad      	cmp	r3, #173	; 0xad
 80037f6:	d017      	beq.n	8003828 <VL53L1X_GetTimingBudgetInMs+0xd8>
 80037f8:	dc27      	bgt.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 80037fa:	2b60      	cmp	r3, #96	; 0x60
 80037fc:	d010      	beq.n	8003820 <VL53L1X_GetTimingBudgetInMs+0xd0>
 80037fe:	dc24      	bgt.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003800:	2b51      	cmp	r3, #81	; 0x51
 8003802:	d009      	beq.n	8003818 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8003804:	dc21      	bgt.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003806:	2b1d      	cmp	r3, #29
 8003808:	d002      	beq.n	8003810 <VL53L1X_GetTimingBudgetInMs+0xc0>
 800380a:	2b1e      	cmp	r3, #30
 800380c:	d004      	beq.n	8003818 <VL53L1X_GetTimingBudgetInMs+0xc8>
 800380e:	e01c      	b.n	800384a <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x001D :
			*pTimingBudget = 15;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	220f      	movs	r2, #15
 8003814:	801a      	strh	r2, [r3, #0]
			break;
 8003816:	e01f      	b.n	8003858 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2214      	movs	r2, #20
 800381c:	801a      	strh	r2, [r3, #0]
			break;
 800381e:	e01b      	b.n	8003858 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2221      	movs	r2, #33	; 0x21
 8003824:	801a      	strh	r2, [r3, #0]
			break;
 8003826:	e017      	b.n	8003858 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2232      	movs	r2, #50	; 0x32
 800382c:	801a      	strh	r2, [r3, #0]
			break;
 800382e:	e013      	b.n	8003858 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2264      	movs	r2, #100	; 0x64
 8003834:	801a      	strh	r2, [r3, #0]
			break;
 8003836:	e00f      	b.n	8003858 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	22c8      	movs	r2, #200	; 0xc8
 800383c:	801a      	strh	r2, [r3, #0]
			break;
 800383e:	e00b      	b.n	8003858 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	22fa      	movs	r2, #250	; 0xfa
 8003844:	0052      	lsls	r2, r2, #1
 8003846:	801a      	strh	r2, [r3, #0]
			break;
 8003848:	e006      	b.n	8003858 <VL53L1X_GetTimingBudgetInMs+0x108>
		default:
			status = 1;
 800384a:	230f      	movs	r3, #15
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
			*pTimingBudget = 0;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2200      	movs	r2, #0
 8003856:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8003858:	230f      	movs	r3, #15
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	b25b      	sxtb	r3, r3
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b004      	add	sp, #16
 8003866:	bdb0      	pop	{r4, r5, r7, pc}
 8003868:	00000591 	.word	0x00000591
 800386c:	0000048f 	.word	0x0000048f
 8003870:	000003e1 	.word	0x000003e1
 8003874:	000002e1 	.word	0x000002e1
 8003878:	000002d9 	.word	0x000002d9

0800387c <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 800387c:	b5b0      	push	{r4, r5, r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	0002      	movs	r2, r0
 8003884:	1dbb      	adds	r3, r7, #6
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	1c0a      	adds	r2, r1, #0
 800388c:	801a      	strh	r2, [r3, #0]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 800388e:	240f      	movs	r4, #15
 8003890:	193b      	adds	r3, r7, r4
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8003896:	230c      	movs	r3, #12
 8003898:	18fa      	adds	r2, r7, r3
 800389a:	1dbb      	adds	r3, r7, #6
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7ff ff55 	bl	8003750 <VL53L1X_GetTimingBudgetInMs>
 80038a6:	0003      	movs	r3, r0
 80038a8:	0019      	movs	r1, r3
 80038aa:	193b      	adds	r3, r7, r4
 80038ac:	193a      	adds	r2, r7, r4
 80038ae:	7812      	ldrb	r2, [r2, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	701a      	strb	r2, [r3, #0]
	if (status != 0)
 80038b4:	193b      	adds	r3, r7, r4
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b25b      	sxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <VL53L1X_SetDistanceMode+0x46>
		return 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0a1      	b.n	8003a06 <VL53L1X_SetDistanceMode+0x18a>
	switch (DM) {
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d002      	beq.n	80038d0 <VL53L1X_SetDistanceMode+0x54>
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d03e      	beq.n	800394c <VL53L1X_SetDistanceMode+0xd0>
 80038ce:	e07b      	b.n	80039c8 <VL53L1X_SetDistanceMode+0x14c>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 80038d0:	250f      	movs	r5, #15
 80038d2:	197c      	adds	r4, r7, r5
 80038d4:	1dbb      	adds	r3, r7, #6
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	2214      	movs	r2, #20
 80038da:	214b      	movs	r1, #75	; 0x4b
 80038dc:	0018      	movs	r0, r3
 80038de:	f001 f877 	bl	80049d0 <VL53L1_WrByte>
 80038e2:	0003      	movs	r3, r0
 80038e4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 80038e6:	197c      	adds	r4, r7, r5
 80038e8:	1dbb      	adds	r3, r7, #6
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	2207      	movs	r2, #7
 80038ee:	2160      	movs	r1, #96	; 0x60
 80038f0:	0018      	movs	r0, r3
 80038f2:	f001 f86d 	bl	80049d0 <VL53L1_WrByte>
 80038f6:	0003      	movs	r3, r0
 80038f8:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 80038fa:	197c      	adds	r4, r7, r5
 80038fc:	1dbb      	adds	r3, r7, #6
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	2205      	movs	r2, #5
 8003902:	2163      	movs	r1, #99	; 0x63
 8003904:	0018      	movs	r0, r3
 8003906:	f001 f863 	bl	80049d0 <VL53L1_WrByte>
 800390a:	0003      	movs	r3, r0
 800390c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 800390e:	197c      	adds	r4, r7, r5
 8003910:	1dbb      	adds	r3, r7, #6
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	2238      	movs	r2, #56	; 0x38
 8003916:	2169      	movs	r1, #105	; 0x69
 8003918:	0018      	movs	r0, r3
 800391a:	f001 f859 	bl	80049d0 <VL53L1_WrByte>
 800391e:	0003      	movs	r3, r0
 8003920:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8003922:	197c      	adds	r4, r7, r5
 8003924:	4a3a      	ldr	r2, [pc, #232]	; (8003a10 <VL53L1X_SetDistanceMode+0x194>)
 8003926:	1dbb      	adds	r3, r7, #6
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	2178      	movs	r1, #120	; 0x78
 800392c:	0018      	movs	r0, r3
 800392e:	f001 f88b 	bl	8004a48 <VL53L1_WrWord>
 8003932:	0003      	movs	r3, r0
 8003934:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8003936:	197c      	adds	r4, r7, r5
 8003938:	4a36      	ldr	r2, [pc, #216]	; (8003a14 <VL53L1X_SetDistanceMode+0x198>)
 800393a:	1dbb      	adds	r3, r7, #6
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	217a      	movs	r1, #122	; 0x7a
 8003940:	0018      	movs	r0, r3
 8003942:	f001 f881 	bl	8004a48 <VL53L1_WrWord>
 8003946:	0003      	movs	r3, r0
 8003948:	7023      	strb	r3, [r4, #0]
		break;
 800394a:	e042      	b.n	80039d2 <VL53L1X_SetDistanceMode+0x156>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 800394c:	250f      	movs	r5, #15
 800394e:	197c      	adds	r4, r7, r5
 8003950:	1dbb      	adds	r3, r7, #6
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	220a      	movs	r2, #10
 8003956:	214b      	movs	r1, #75	; 0x4b
 8003958:	0018      	movs	r0, r3
 800395a:	f001 f839 	bl	80049d0 <VL53L1_WrByte>
 800395e:	0003      	movs	r3, r0
 8003960:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8003962:	197c      	adds	r4, r7, r5
 8003964:	1dbb      	adds	r3, r7, #6
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	220f      	movs	r2, #15
 800396a:	2160      	movs	r1, #96	; 0x60
 800396c:	0018      	movs	r0, r3
 800396e:	f001 f82f 	bl	80049d0 <VL53L1_WrByte>
 8003972:	0003      	movs	r3, r0
 8003974:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8003976:	197c      	adds	r4, r7, r5
 8003978:	1dbb      	adds	r3, r7, #6
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	220d      	movs	r2, #13
 800397e:	2163      	movs	r1, #99	; 0x63
 8003980:	0018      	movs	r0, r3
 8003982:	f001 f825 	bl	80049d0 <VL53L1_WrByte>
 8003986:	0003      	movs	r3, r0
 8003988:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 800398a:	197c      	adds	r4, r7, r5
 800398c:	1dbb      	adds	r3, r7, #6
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	22b8      	movs	r2, #184	; 0xb8
 8003992:	2169      	movs	r1, #105	; 0x69
 8003994:	0018      	movs	r0, r3
 8003996:	f001 f81b 	bl	80049d0 <VL53L1_WrByte>
 800399a:	0003      	movs	r3, r0
 800399c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 800399e:	197c      	adds	r4, r7, r5
 80039a0:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <VL53L1X_SetDistanceMode+0x19c>)
 80039a2:	1dbb      	adds	r3, r7, #6
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	2178      	movs	r1, #120	; 0x78
 80039a8:	0018      	movs	r0, r3
 80039aa:	f001 f84d 	bl	8004a48 <VL53L1_WrWord>
 80039ae:	0003      	movs	r3, r0
 80039b0:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 80039b2:	197c      	adds	r4, r7, r5
 80039b4:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <VL53L1X_SetDistanceMode+0x1a0>)
 80039b6:	1dbb      	adds	r3, r7, #6
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	217a      	movs	r1, #122	; 0x7a
 80039bc:	0018      	movs	r0, r3
 80039be:	f001 f843 	bl	8004a48 <VL53L1_WrWord>
 80039c2:	0003      	movs	r3, r0
 80039c4:	7023      	strb	r3, [r4, #0]
		break;
 80039c6:	e004      	b.n	80039d2 <VL53L1X_SetDistanceMode+0x156>
	default:
		status = 1;
 80039c8:	230f      	movs	r3, #15
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
		break;
 80039d0:	46c0      	nop			; (mov r8, r8)
	}

	if (status == 0)
 80039d2:	240f      	movs	r4, #15
 80039d4:	193b      	adds	r3, r7, r4
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <VL53L1X_SetDistanceMode+0x182>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 80039de:	230c      	movs	r3, #12
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	1dbb      	adds	r3, r7, #6
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff fd5e 	bl	80034ac <VL53L1X_SetTimingBudgetInMs>
 80039f0:	0003      	movs	r3, r0
 80039f2:	0019      	movs	r1, r3
 80039f4:	193b      	adds	r3, r7, r4
 80039f6:	193a      	adds	r2, r7, r4
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	701a      	strb	r2, [r3, #0]
	return status;
 80039fe:	230f      	movs	r3, #15
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b25b      	sxtb	r3, r3
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	00000705 	.word	0x00000705
 8003a14:	00000606 	.word	0x00000606
 8003a18:	00000f0d 	.word	0x00000f0d
 8003a1c:	00000e0e 	.word	0x00000e0e

08003a20 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	0002      	movs	r2, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	1dbb      	adds	r3, r7, #6
 8003a2c:	801a      	strh	r2, [r3, #0]
	uint8_t TempDM, status=0;
 8003a2e:	240f      	movs	r4, #15
 8003a30:	193b      	adds	r3, r7, r4
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8003a36:	250e      	movs	r5, #14
 8003a38:	197a      	adds	r2, r7, r5
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	214b      	movs	r1, #75	; 0x4b
 8003a40:	0018      	movs	r0, r3
 8003a42:	f001 f88b 	bl	8004b5c <VL53L1_RdByte>
 8003a46:	0003      	movs	r3, r0
 8003a48:	001a      	movs	r2, r3
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b25b      	sxtb	r3, r3
 8003a50:	4313      	orrs	r3, r2
 8003a52:	b25a      	sxtb	r2, r3
 8003a54:	193b      	adds	r3, r7, r4
 8003a56:	701a      	strb	r2, [r3, #0]
	if (TempDM == 0x14)
 8003a58:	197b      	adds	r3, r7, r5
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b14      	cmp	r3, #20
 8003a5e:	d102      	bne.n	8003a66 <VL53L1X_GetDistanceMode+0x46>
		*DM=1;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2201      	movs	r2, #1
 8003a64:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8003a66:	230e      	movs	r3, #14
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b0a      	cmp	r3, #10
 8003a6e:	d102      	bne.n	8003a76 <VL53L1X_GetDistanceMode+0x56>
		*DM=2;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2202      	movs	r2, #2
 8003a74:	801a      	strh	r2, [r3, #0]
	return status;
 8003a76:	230f      	movs	r3, #15
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b25b      	sxtb	r3, r3
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b004      	add	sp, #16
 8003a84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a88 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8003a88:	b5b0      	push	{r4, r5, r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	0002      	movs	r2, r0
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	1dbb      	adds	r3, r7, #6
 8003a94:	801a      	strh	r2, [r3, #0]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8003a96:	240f      	movs	r4, #15
 8003a98:	193b      	adds	r3, r7, r4
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8003a9e:	250c      	movs	r5, #12
 8003aa0:	197a      	adds	r2, r7, r5
 8003aa2:	1dbb      	adds	r3, r7, #6
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	21de      	movs	r1, #222	; 0xde
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f001 f89d 	bl	8004be8 <VL53L1_RdWord>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	193a      	adds	r2, r7, r4
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	701a      	strb	r2, [r3, #0]
	ClockPLL = ClockPLL&0x3FF;
 8003abc:	197b      	adds	r3, r7, r5
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	059b      	lsls	r3, r3, #22
 8003ac2:	0d9b      	lsrs	r3, r3, #22
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	197b      	adds	r3, r7, r5
 8003ac8:	801a      	strh	r2, [r3, #0]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8003aca:	197b      	adds	r3, r7, r5
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	001a      	movs	r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	4353      	muls	r3, r2
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7ff fae3 	bl	80030a0 <__aeabi_ui2d>
 8003ada:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <VL53L1X_SetInterMeasurementInMs+0x84>)
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <VL53L1X_SetInterMeasurementInMs+0x88>)
 8003ade:	f7fe fc5d 	bl	800239c <__aeabi_dmul>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	000b      	movs	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	f7fc fd65 	bl	80005b8 <__aeabi_d2uiz>
 8003aee:	0002      	movs	r2, r0
 8003af0:	1dbb      	adds	r3, r7, #6
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	216c      	movs	r1, #108	; 0x6c
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 ffea 	bl	8004ad0 <VL53L1_WrDWord>
	return status;
 8003afc:	193b      	adds	r3, r7, r4
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b25b      	sxtb	r3, r3

}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b004      	add	sp, #16
 8003b08:	bdb0      	pop	{r4, r5, r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	33333333 	.word	0x33333333
 8003b10:	3ff13333 	.word	0x3ff13333

08003b14 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	1dbb      	adds	r3, r7, #6
 8003b20:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003b22:	240f      	movs	r4, #15
 8003b24:	193b      	adds	r3, r7, r4
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 8003b2a:	250e      	movs	r5, #14
 8003b2c:	197b      	adds	r3, r7, r5
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8003b32:	197a      	adds	r2, r7, r5
 8003b34:	1dbb      	adds	r3, r7, #6
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	21e5      	movs	r1, #229	; 0xe5
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f001 f80e 	bl	8004b5c <VL53L1_RdByte>
 8003b40:	0003      	movs	r3, r0
 8003b42:	0019      	movs	r1, r3
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	193a      	adds	r2, r7, r4
 8003b48:	7812      	ldrb	r2, [r2, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	701a      	strb	r2, [r3, #0]
	*state = tmp;
 8003b4e:	197b      	adds	r3, r7, r5
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	701a      	strb	r2, [r3, #0]
	return status;
 8003b56:	193b      	adds	r3, r7, r4
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b25b      	sxtb	r3, r3
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b004      	add	sp, #16
 8003b62:	bdb0      	pop	{r4, r5, r7, pc}

08003b64 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8003b64:	b5b0      	push	{r4, r5, r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	1dbb      	adds	r3, r7, #6
 8003b70:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003b72:	240f      	movs	r4, #15
 8003b74:	193b      	adds	r3, r7, r4
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8003b7a:	250c      	movs	r5, #12
 8003b7c:	197a      	adds	r2, r7, r5
 8003b7e:	1dbb      	adds	r3, r7, #6
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	2196      	movs	r1, #150	; 0x96
 8003b84:	0018      	movs	r0, r3
 8003b86:	f001 f82f 	bl	8004be8 <VL53L1_RdWord>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	0020      	movs	r0, r4
 8003b90:	183b      	adds	r3, r7, r0
 8003b92:	183a      	adds	r2, r7, r0
 8003b94:	7812      	ldrb	r2, [r2, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8003b9a:	197b      	adds	r3, r7, r5
 8003b9c:	881a      	ldrh	r2, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	801a      	strh	r2, [r3, #0]
	return status;
 8003ba2:	183b      	adds	r3, r7, r0
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b25b      	sxtb	r3, r3
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b004      	add	sp, #16
 8003bae:	bdb0      	pop	{r4, r5, r7, pc}

08003bb0 <bma_write>:
#include "akcelerometr.h"


void bma_write (uint8_t reg, uint8_t value)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	1dbb      	adds	r3, r7, #6
 8003bbe:	1c0a      	adds	r2, r1, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = reg;
 8003bc2:	210c      	movs	r1, #12
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	1dfa      	adds	r2, r7, #7
 8003bc8:	7812      	ldrb	r2, [r2, #0]
 8003bca:	701a      	strb	r2, [r3, #0]
	data[1] = value;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	1dba      	adds	r2, r7, #6
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&I2C_NO, bma_adr, data, 2, 10);
 8003bd4:	187a      	adds	r2, r7, r1
 8003bd6:	4805      	ldr	r0, [pc, #20]	; (8003bec <bma_write+0x3c>)
 8003bd8:	230a      	movs	r3, #10
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2302      	movs	r3, #2
 8003bde:	2114      	movs	r1, #20
 8003be0:	f001 fc22 	bl	8005428 <HAL_I2C_Master_Transmit>

}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b004      	add	sp, #16
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200001fc 	.word	0x200001fc

08003bf0 <bma_read>:


int8_t bma_read (uint8_t reg, uint8_t numberofbytes)
{
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b089      	sub	sp, #36	; 0x24
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	1dbb      	adds	r3, r7, #6
 8003bfe:	1c0a      	adds	r2, r1, #0
 8003c00:	701a      	strb	r2, [r3, #0]
	int8_t odakcel;

	int8_t temp_data_rec[1];
	temp_data_rec[0] = 0;
 8003c02:	240c      	movs	r4, #12
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&I2C_NO, bma_adr, reg, 1, temp_data_rec, numberofbytes, 100);
 8003c0a:	1dfb      	adds	r3, r7, #7
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	1dbb      	adds	r3, r7, #6
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	480c      	ldr	r0, [pc, #48]	; (8003c48 <bma_read+0x58>)
 8003c18:	2164      	movs	r1, #100	; 0x64
 8003c1a:	9102      	str	r1, [sp, #8]
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	193b      	adds	r3, r7, r4
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2301      	movs	r3, #1
 8003c24:	2114      	movs	r1, #20
 8003c26:	f001 fe0f 	bl	8005848 <HAL_I2C_Mem_Read>
	odakcel = (temp_data_rec[0] >> 2);
 8003c2a:	193b      	adds	r3, r7, r4
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	569a      	ldrsb	r2, [r3, r2]
 8003c30:	210f      	movs	r1, #15
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	1092      	asrs	r2, r2, #2
 8003c36:	701a      	strb	r2, [r3, #0]
	return odakcel;
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	b25b      	sxtb	r3, r3
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b005      	add	sp, #20
 8003c44:	bd90      	pop	{r4, r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	200001fc 	.word	0x200001fc

08003c4c <bma_init>:


void bma_init (void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0

	bma_write(0x22,0x00);
 8003c50:	2100      	movs	r1, #0
 8003c52:	2022      	movs	r0, #34	; 0x22
 8003c54:	f7ff ffac 	bl	8003bb0 <bma_write>

	bma_write(0x20,0x05);
 8003c58:	2105      	movs	r1, #5
 8003c5a:	2020      	movs	r0, #32
 8003c5c:	f7ff ffa8 	bl	8003bb0 <bma_write>

	bma_write(0x1A,0x04);
 8003c60:	2104      	movs	r1, #4
 8003c62:	201a      	movs	r0, #26
 8003c64:	f7ff ffa4 	bl	8003bb0 <bma_write>

}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <IR_Init>:
#define dev 0x52  // address of IR distance sensor



void IR_Init()
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
	uint8_t sensorState=0;
 8003c74:	1dfb      	adds	r3, r7, #7
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]
	 while(sensorState==0){
 8003c7a:	e007      	b.n	8003c8c <IR_Init+0x1e>
			VL53L1X_BootState(dev, &sensorState);
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	0019      	movs	r1, r3
 8003c80:	2052      	movs	r0, #82	; 0x52
 8003c82:	f7ff ff47 	bl	8003b14 <VL53L1X_BootState>
		HAL_Delay(2);
 8003c86:	2002      	movs	r0, #2
 8003c88:	f001 f89a 	bl	8004dc0 <HAL_Delay>
	 while(sensorState==0){
 8003c8c:	1dfb      	adds	r3, r7, #7
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f3      	beq.n	8003c7c <IR_Init+0xe>
	  }


	  /* This function must to be called to initialize the sensor with the default setting  */
	  VL53L1X_SensorInit(dev);
 8003c94:	2052      	movs	r0, #82	; 0x52
 8003c96:	f7ff fa9b 	bl	80031d0 <VL53L1X_SensorInit>
	  /* Optional functions to be used to change the main ranging parameters according the application requirements to get the best ranging performances */
	  VL53L1X_SetDistanceMode(dev, 1); /* 1=short, 2=long */
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	2052      	movs	r0, #82	; 0x52
 8003c9e:	f7ff fded 	bl	800387c <VL53L1X_SetDistanceMode>
	  VL53L1X_SetTimingBudgetInMs(dev, 100); /* in ms possible values [20, 50, 100, 200, 500] */
 8003ca2:	2164      	movs	r1, #100	; 0x64
 8003ca4:	2052      	movs	r0, #82	; 0x52
 8003ca6:	f7ff fc01 	bl	80034ac <VL53L1X_SetTimingBudgetInMs>
	  VL53L1X_SetInterMeasurementInMs(dev, 100); /* in ms, IM must be > = TB */
 8003caa:	2164      	movs	r1, #100	; 0x64
 8003cac:	2052      	movs	r0, #82	; 0x52
 8003cae:	f7ff feeb 	bl	8003a88 <VL53L1X_SetInterMeasurementInMs>
	//  status = VL53L1X_SetOffset(dev,20); /* offset compensation in mm */
	//  status = VL53L1X_SetROI(dev, 16, 16); /* minimum ROI 4,4 */
	//	status = VL53L1X_CalibrateOffset(dev, 140, &offset); /* may take few second to perform the offset cal*/
	//	status = VL53L1X_CalibrateXtalk(dev, 1000, &xtalk); /* may take few second to perform the xtalk cal */
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b002      	add	sp, #8
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <IR_Get_Distance>:


uint16_t IR_Get_Distance()
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
	uint8_t sensorState=0;
 8003cc0:	1dfb      	adds	r3, r7, #7
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
//	if(VL53L1X_BootState(dev, &sensorState)==0)
//	{
//		return 1;
//	}

	VL53L1X_StartRanging(dev);
 8003cc6:	2052      	movs	r0, #82	; 0x52
 8003cc8:	f7ff fb6c 	bl	80033a4 <VL53L1X_StartRanging>

	while (dataReady == 0){
 8003ccc:	e007      	b.n	8003cde <IR_Get_Distance+0x24>
			  VL53L1X_CheckForDataReady(dev, &dataReady);
 8003cce:	1cfb      	adds	r3, r7, #3
 8003cd0:	0019      	movs	r1, r3
 8003cd2:	2052      	movs	r0, #82	; 0x52
 8003cd4:	f7ff fba4 	bl	8003420 <VL53L1X_CheckForDataReady>
			  HAL_Delay(2);
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f001 f871 	bl	8004dc0 <HAL_Delay>
	while (dataReady == 0){
 8003cde:	1cfb      	adds	r3, r7, #3
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f3      	beq.n	8003cce <IR_Get_Distance+0x14>
		  }
		  dataReady = 0;
 8003ce6:	1cfb      	adds	r3, r7, #3
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
		  VL53L1X_GetDistance(dev, &Distance);
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	0019      	movs	r1, r3
 8003cf0:	2052      	movs	r0, #82	; 0x52
 8003cf2:	f7ff ff37 	bl	8003b64 <VL53L1X_GetDistance>

		  VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt*/
 8003cf6:	2052      	movs	r0, #82	; 0x52
 8003cf8:	f7ff fb02 	bl	8003300 <VL53L1X_ClearInterrupt>
		  VL53L1X_StopRanging(dev);
 8003cfc:	2052      	movs	r0, #82	; 0x52
 8003cfe:	f7ff fb70 	bl	80033e2 <VL53L1X_StopRanging>
		  return Distance;
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	881b      	ldrh	r3, [r3, #0]
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d16:	240c      	movs	r4, #12
 8003d18:	193b      	adds	r3, r7, r4
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	2314      	movs	r3, #20
 8003d1e:	001a      	movs	r2, r3
 8003d20:	2100      	movs	r1, #0
 8003d22:	f004 fdaa 	bl	800887a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <MX_GPIO_Init+0xc0>)
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <MX_GPIO_Init+0xc0>)
 8003d2c:	2104      	movs	r1, #4
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <MX_GPIO_Init+0xc0>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	2204      	movs	r2, #4
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <MX_GPIO_Init+0xc0>)
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <MX_GPIO_Init+0xc0>)
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	430a      	orrs	r2, r1
 8003d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <MX_GPIO_Init+0xc0>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	4013      	ands	r3, r2
 8003d52:	607b      	str	r3, [r7, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <MX_GPIO_Init+0xc0>)
 8003d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <MX_GPIO_Init+0xc0>)
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <MX_GPIO_Init+0xc0>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	2201      	movs	r2, #1
 8003d68:	4013      	ands	r3, r2
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003d6e:	23a0      	movs	r3, #160	; 0xa0
 8003d70:	05db      	lsls	r3, r3, #23
 8003d72:	2200      	movs	r2, #0
 8003d74:	2120      	movs	r1, #32
 8003d76:	0018      	movs	r0, r3
 8003d78:	f001 faa2 	bl	80052c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d7c:	193b      	adds	r3, r7, r4
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	0192      	lsls	r2, r2, #6
 8003d82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d84:	193b      	adds	r3, r7, r4
 8003d86:	2284      	movs	r2, #132	; 0x84
 8003d88:	0392      	lsls	r2, r2, #14
 8003d8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d92:	193b      	adds	r3, r7, r4
 8003d94:	4a0f      	ldr	r2, [pc, #60]	; (8003dd4 <MX_GPIO_Init+0xc4>)
 8003d96:	0019      	movs	r1, r3
 8003d98:	0010      	movs	r0, r2
 8003d9a:	f001 f913 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003d9e:	0021      	movs	r1, r4
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	2220      	movs	r2, #32
 8003da4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	2201      	movs	r2, #1
 8003daa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	2200      	movs	r2, #0
 8003db6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003db8:	187a      	adds	r2, r7, r1
 8003dba:	23a0      	movs	r3, #160	; 0xa0
 8003dbc:	05db      	lsls	r3, r3, #23
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f001 f8ff 	bl	8004fc4 <HAL_GPIO_Init>

}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b009      	add	sp, #36	; 0x24
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	50000800 	.word	0x50000800

08003dd8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <MX_I2C1_Init+0x78>)
 8003de0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003de2:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003de4:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <MX_I2C1_Init+0x7c>)
 8003de6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dee:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003df4:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e12:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003e14:	0018      	movs	r0, r3
 8003e16:	f001 fa71 	bl	80052fc <HAL_I2C_Init>
 8003e1a:	1e03      	subs	r3, r0, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003e1e:	f000 fa7f 	bl	8004320 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003e24:	2100      	movs	r1, #0
 8003e26:	0018      	movs	r0, r3
 8003e28:	f002 f89c 	bl	8005f64 <HAL_I2CEx_ConfigAnalogFilter>
 8003e2c:	1e03      	subs	r3, r0, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003e30:	f000 fa76 	bl	8004320 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <MX_I2C1_Init+0x74>)
 8003e36:	2100      	movs	r1, #0
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f002 f8df 	bl	8005ffc <HAL_I2CEx_ConfigDigitalFilter>
 8003e3e:	1e03      	subs	r3, r0, #0
 8003e40:	d001      	beq.n	8003e46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003e42:	f000 fa6d 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	200001fc 	.word	0x200001fc
 8003e50:	40005400 	.word	0x40005400
 8003e54:	00707cbb 	.word	0x00707cbb

08003e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e60:	240c      	movs	r4, #12
 8003e62:	193b      	adds	r3, r7, r4
 8003e64:	0018      	movs	r0, r3
 8003e66:	2314      	movs	r3, #20
 8003e68:	001a      	movs	r2, r3
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f004 fd05 	bl	800887a <memset>
  if(i2cHandle->Instance==I2C1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_I2C_MspInit+0x80>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d12a      	bne.n	8003ed0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_I2C_MspInit+0x84>)
 8003e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <HAL_I2C_MspInit+0x84>)
 8003e80:	2101      	movs	r1, #1
 8003e82:	430a      	orrs	r2, r1
 8003e84:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <HAL_I2C_MspInit+0x84>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e92:	193b      	adds	r3, r7, r4
 8003e94:	22c0      	movs	r2, #192	; 0xc0
 8003e96:	00d2      	lsls	r2, r2, #3
 8003e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e9a:	0021      	movs	r1, r4
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	2212      	movs	r2, #18
 8003ea0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2206      	movs	r2, #6
 8003eb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb4:	187a      	adds	r2, r7, r1
 8003eb6:	23a0      	movs	r3, #160	; 0xa0
 8003eb8:	05db      	lsls	r3, r3, #23
 8003eba:	0011      	movs	r1, r2
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f001 f881 	bl	8004fc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_I2C_MspInit+0x84>)
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_I2C_MspInit+0x84>)
 8003ec8:	2180      	movs	r1, #128	; 0x80
 8003eca:	0389      	lsls	r1, r1, #14
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b009      	add	sp, #36	; 0x24
 8003ed6:	bd90      	pop	{r4, r7, pc}
 8003ed8:	40005400 	.word	0x40005400
 8003edc:	40021000 	.word	0x40021000

08003ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ee0:	b5b0      	push	{r4, r5, r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ee6:	f000 fefb 	bl	8004ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eea:	f000 f88f 	bl	800400c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003eee:	f7ff ff0f 	bl	8003d10 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003ef2:	f7ff ff71 	bl	8003dd8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003ef6:	f000 fcb1 	bl	800485c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003efa:	f000 fb41 	bl	8004580 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003efe:	f000 fbbb 	bl	8004678 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003f02:	4b3a      	ldr	r3, [pc, #232]	; (8003fec <main+0x10c>)
 8003f04:	2100      	movs	r1, #0
 8003f06:	0018      	movs	r0, r3
 8003f08:	f003 f900 	bl	800710c <HAL_TIM_PWM_Start>
  set_ang(940);
 8003f0c:	23eb      	movs	r3, #235	; 0xeb
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 fa0b 	bl	800432c <set_ang>

  bma_init();
 8003f16:	f7ff fe99 	bl	8003c4c <bma_init>
  IR_Init();
 8003f1a:	f7ff fea8 	bl	8003c6e <IR_Init>

  //PID VARIABLES INIT
  PID.Kd =0.0;
 8003f1e:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <main+0x110>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  PID.Ki = 0.0;
 8003f24:	4b32      	ldr	r3, [pc, #200]	; (8003ff0 <main+0x110>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	60da      	str	r2, [r3, #12]
  PID.Kp = 2; // 0.5 ustawione bylo
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <main+0x110>)
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	05d2      	lsls	r2, r2, #23
 8003f30:	605a      	str	r2, [r3, #4]
  PID.time_old = HAL_GetTick();
 8003f32:	f000 ff3b 	bl	8004dac <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <main+0x110>)
 8003f3a:	611a      	str	r2, [r3, #16]
  PID.set_point = 185;
 8003f3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <main+0x110>)
 8003f3e:	22b9      	movs	r2, #185	; 0xb9
 8003f40:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 data_recdist = IR_Get_Distance();
 8003f42:	f7ff feba 	bl	8003cba <IR_Get_Distance>
 8003f46:	0003      	movs	r3, r0
 8003f48:	001a      	movs	r2, r3
 8003f4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <main+0x114>)
 8003f4c:	801a      	strh	r2, [r3, #0]
	 data_recangle = 5.625*bma_read(bma_x,1);
 8003f4e:	2101      	movs	r1, #1
 8003f50:	2004      	movs	r0, #4
 8003f52:	f7ff fe4d 	bl	8003bf0 <bma_read>
 8003f56:	0003      	movs	r3, r0
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff f871 	bl	8003040 <__aeabi_i2d>
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <main+0x118>)
 8003f62:	f7fe fa1b 	bl	800239c <__aeabi_dmul>
 8003f66:	0002      	movs	r2, r0
 8003f68:	000b      	movs	r3, r1
 8003f6a:	0010      	movs	r0, r2
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	f7ff f831 	bl	8002fd4 <__aeabi_d2iz>
 8003f72:	0003      	movs	r3, r0
 8003f74:	b25a      	sxtb	r2, r3
 8003f76:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <main+0x11c>)
 8003f78:	701a      	strb	r2, [r3, #0]
	// dist_sample = (float) IR_Get_Distance();

	// dist_avg_new = ((n-1)/n) * dist_avg_old + ((1/n) * dist_sample);

	// dist_avg_old = dist_avg_new;
	 PIDRegulator(data_recdist, &PID);
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <main+0x114>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <main+0x110>)
 8003f80:	0011      	movs	r1, r2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f000 f8b8 	bl	80040f8 <PIDRegulator>
	// PIDRegulator((uint16_t)dist_avg_new, &PID);
	// temp = PID.PID_total;

	temp = CalculateAngle(PID.PID_total);
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <main+0x110>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	1dbc      	adds	r4, r7, #6
 8003f8e:	1c18      	adds	r0, r3, #0
 8003f90:	f000 f95c 	bl	800424c <CalculateAngle>
 8003f94:	0003      	movs	r3, r0
 8003f96:	8023      	strh	r3, [r4, #0]
	 //
	 // uart test
	 sprintf((char*)msg," angle %d  PID_total %f  , Dist %d\n",temp,  PID.PID_total, data_recdist);
 8003f98:	1dbb      	adds	r3, r7, #6
 8003f9a:	881c      	ldrh	r4, [r3, #0]
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <main+0x110>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	1c18      	adds	r0, r3, #0
 8003fa2:	f7ff f8a3 	bl	80030ec <__aeabi_f2d>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	000b      	movs	r3, r1
 8003faa:	4912      	ldr	r1, [pc, #72]	; (8003ff4 <main+0x114>)
 8003fac:	8809      	ldrh	r1, [r1, #0]
 8003fae:	000d      	movs	r5, r1
 8003fb0:	4913      	ldr	r1, [pc, #76]	; (8004000 <main+0x120>)
 8003fb2:	4814      	ldr	r0, [pc, #80]	; (8004004 <main+0x124>)
 8003fb4:	9502      	str	r5, [sp, #8]
 8003fb6:	9200      	str	r2, [sp, #0]
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	0022      	movs	r2, r4
 8003fbc:	f005 f8d4 	bl	8009168 <siprintf>


	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),1000);
 8003fc0:	4b10      	ldr	r3, [pc, #64]	; (8004004 <main+0x124>)
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7fc f8a0 	bl	8000108 <strlen>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	23fa      	movs	r3, #250	; 0xfa
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	490c      	ldr	r1, [pc, #48]	; (8004004 <main+0x124>)
 8003fd2:	480d      	ldr	r0, [pc, #52]	; (8004008 <main+0x128>)
 8003fd4:	f003 ff16 	bl	8007e04 <HAL_UART_Transmit>

	 //uarttest
	 set_ang(CalculateAngle(PID.PID_total));
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <main+0x110>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	1c18      	adds	r0, r3, #0
 8003fde:	f000 f935 	bl	800424c <CalculateAngle>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 f9a1 	bl	800432c <set_ang>
  {
 8003fea:	e7aa      	b.n	8003f42 <main+0x62>
 8003fec:	20000304 	.word	0x20000304
 8003ff0:	2000024c 	.word	0x2000024c
 8003ff4:	20000248 	.word	0x20000248
 8003ff8:	40168000 	.word	0x40168000
 8003ffc:	2000024a 	.word	0x2000024a
 8004000:	0800b7c8 	.word	0x0800b7c8
 8004004:	20000280 	.word	0x20000280
 8004008:	20000344 	.word	0x20000344

0800400c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b09f      	sub	sp, #124	; 0x7c
 8004010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004012:	2440      	movs	r4, #64	; 0x40
 8004014:	193b      	adds	r3, r7, r4
 8004016:	0018      	movs	r0, r3
 8004018:	2338      	movs	r3, #56	; 0x38
 800401a:	001a      	movs	r2, r3
 800401c:	2100      	movs	r1, #0
 800401e:	f004 fc2c 	bl	800887a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004022:	232c      	movs	r3, #44	; 0x2c
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	0018      	movs	r0, r3
 8004028:	2314      	movs	r3, #20
 800402a:	001a      	movs	r2, r3
 800402c:	2100      	movs	r1, #0
 800402e:	f004 fc24 	bl	800887a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	0018      	movs	r0, r3
 8004036:	2328      	movs	r3, #40	; 0x28
 8004038:	001a      	movs	r2, r3
 800403a:	2100      	movs	r1, #0
 800403c:	f004 fc1d 	bl	800887a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <SystemClock_Config+0xe4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a2b      	ldr	r2, [pc, #172]	; (80040f4 <SystemClock_Config+0xe8>)
 8004046:	401a      	ands	r2, r3
 8004048:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <SystemClock_Config+0xe4>)
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	0109      	lsls	r1, r1, #4
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004052:	0021      	movs	r1, r4
 8004054:	187b      	adds	r3, r7, r1
 8004056:	2202      	movs	r2, #2
 8004058:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800405a:	187b      	adds	r3, r7, r1
 800405c:	2201      	movs	r2, #1
 800405e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004060:	187b      	adds	r3, r7, r1
 8004062:	2210      	movs	r2, #16
 8004064:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004066:	187b      	adds	r3, r7, r1
 8004068:	2202      	movs	r2, #2
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800406c:	187b      	adds	r3, r7, r1
 800406e:	2200      	movs	r2, #0
 8004070:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8004072:	187b      	adds	r3, r7, r1
 8004074:	2280      	movs	r2, #128	; 0x80
 8004076:	02d2      	lsls	r2, r2, #11
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800407a:	187b      	adds	r3, r7, r1
 800407c:	2280      	movs	r2, #128	; 0x80
 800407e:	03d2      	lsls	r2, r2, #15
 8004080:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004082:	187b      	adds	r3, r7, r1
 8004084:	0018      	movs	r0, r3
 8004086:	f002 f805 	bl	8006094 <HAL_RCC_OscConfig>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d001      	beq.n	8004092 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800408e:	f000 f947 	bl	8004320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004092:	212c      	movs	r1, #44	; 0x2c
 8004094:	187b      	adds	r3, r7, r1
 8004096:	220f      	movs	r2, #15
 8004098:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800409a:	187b      	adds	r3, r7, r1
 800409c:	2203      	movs	r2, #3
 800409e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	2200      	movs	r2, #0
 80040aa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	2200      	movs	r2, #0
 80040b0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	2101      	movs	r1, #1
 80040b6:	0018      	movs	r0, r3
 80040b8:	f002 fbc0 	bl	800683c <HAL_RCC_ClockConfig>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80040c0:	f000 f92e 	bl	8004320 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	220a      	movs	r2, #10
 80040c8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	2200      	movs	r2, #0
 80040ce:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	2200      	movs	r2, #0
 80040d4:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	0018      	movs	r0, r3
 80040da:	f002 fdd3 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 80040de:	1e03      	subs	r3, r0, #0
 80040e0:	d001      	beq.n	80040e6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80040e2:	f000 f91d 	bl	8004320 <Error_Handler>
  }
}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b01f      	add	sp, #124	; 0x7c
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	40007000 	.word	0x40007000
 80040f4:	ffffe7ff 	.word	0xffffe7ff

080040f8 <PIDRegulator>:

/* USER CODE BEGIN 4 */
void PIDRegulator( uint16_t distance,  PIDStruct *PID)
{
 80040f8:	b5b0      	push	{r4, r5, r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	0002      	movs	r2, r0
 8004100:	6039      	str	r1, [r7, #0]
 8004102:	1dbb      	adds	r3, r7, #6
 8004104:	801a      	strh	r2, [r3, #0]
	PID->time_new = HAL_GetTick();
 8004106:	f000 fe51 	bl	8004dac <HAL_GetTick>
 800410a:	0002      	movs	r2, r0
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	615a      	str	r2, [r3, #20]
	PID->period = PID->time_new - PID->time_old;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	1ad2      	subs	r2, r2, r3
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	619a      	str	r2, [r3, #24]
	PID->time_old = PID->time_new;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	611a      	str	r2, [r3, #16]

	PID->distance_error = PID->set_point - distance;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	1dbb      	adds	r3, r7, #6
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	b29b      	uxth	r3, r3
 8004132:	b21a      	sxth	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	839a      	strh	r2, [r3, #28]

	PID->PID_p = PID->Kp * PID->distance_error;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685c      	ldr	r4, [r3, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	221c      	movs	r2, #28
 8004140:	5e9b      	ldrsh	r3, [r3, r2]
 8004142:	0018      	movs	r0, r3
 8004144:	f7fd f95c 	bl	8001400 <__aeabi_i2f>
 8004148:	1c03      	adds	r3, r0, #0
 800414a:	1c19      	adds	r1, r3, #0
 800414c:	1c20      	adds	r0, r4, #0
 800414e:	f7fc fe83 	bl	8000e58 <__aeabi_fmul>
 8004152:	1c03      	adds	r3, r0, #0
 8004154:	1c1a      	adds	r2, r3, #0
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24

	PID->dist_diference = PID->distance_error - PID->distance_previous_error;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	221c      	movs	r2, #28
 800415e:	5e9b      	ldrsh	r3, [r3, r2]
 8004160:	b29a      	uxth	r2, r3
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	211e      	movs	r1, #30
 8004166:	5e5b      	ldrsh	r3, [r3, r1]
 8004168:	b29b      	uxth	r3, r3
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	b29b      	uxth	r3, r3
 800416e:	b21a      	sxth	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	841a      	strh	r2, [r3, #32]

	PID->PID_d = PID->Kd*(((float)PID->distance_error - (float)PID->distance_previous_error)/(float)PID->period);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689c      	ldr	r4, [r3, #8]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	221c      	movs	r2, #28
 800417c:	5e9b      	ldrsh	r3, [r3, r2]
 800417e:	0018      	movs	r0, r3
 8004180:	f7fd f93e 	bl	8001400 <__aeabi_i2f>
 8004184:	1c05      	adds	r5, r0, #0
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	221e      	movs	r2, #30
 800418a:	5e9b      	ldrsh	r3, [r3, r2]
 800418c:	0018      	movs	r0, r3
 800418e:	f7fd f937 	bl	8001400 <__aeabi_i2f>
 8004192:	1c03      	adds	r3, r0, #0
 8004194:	1c19      	adds	r1, r3, #0
 8004196:	1c28      	adds	r0, r5, #0
 8004198:	f7fc ff84 	bl	80010a4 <__aeabi_fsub>
 800419c:	1c03      	adds	r3, r0, #0
 800419e:	1c1d      	adds	r5, r3, #0
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7fd f979 	bl	800149c <__aeabi_ui2f>
 80041aa:	1c03      	adds	r3, r0, #0
 80041ac:	1c19      	adds	r1, r3, #0
 80041ae:	1c28      	adds	r0, r5, #0
 80041b0:	f7fc fc8a 	bl	8000ac8 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c19      	adds	r1, r3, #0
 80041b8:	1c20      	adds	r0, r4, #0
 80041ba:	f7fc fe4d 	bl	8000e58 <__aeabi_fmul>
 80041be:	1c03      	adds	r3, r0, #0
 80041c0:	1c1a      	adds	r2, r3, #0
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	62da      	str	r2, [r3, #44]	; 0x2c

	if(-3 < PID->distance_error && PID->distance_error < 3)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	221c      	movs	r2, #28
 80041ca:	5e9b      	ldrsh	r3, [r3, r2]
 80041cc:	3302      	adds	r3, #2
 80041ce:	db1d      	blt.n	800420c <PIDRegulator+0x114>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	221c      	movs	r2, #28
 80041d4:	5e9b      	ldrsh	r3, [r3, r2]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	dc18      	bgt.n	800420c <PIDRegulator+0x114>
	    {
			PID->PID_i = PID->PID_i + (PID->Ki * PID->distance_error);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68dd      	ldr	r5, [r3, #12]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	221c      	movs	r2, #28
 80041e6:	5e9b      	ldrsh	r3, [r3, r2]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7fd f909 	bl	8001400 <__aeabi_i2f>
 80041ee:	1c03      	adds	r3, r0, #0
 80041f0:	1c19      	adds	r1, r3, #0
 80041f2:	1c28      	adds	r0, r5, #0
 80041f4:	f7fc fe30 	bl	8000e58 <__aeabi_fmul>
 80041f8:	1c03      	adds	r3, r0, #0
 80041fa:	1c19      	adds	r1, r3, #0
 80041fc:	1c20      	adds	r0, r4, #0
 80041fe:	f7fc fac5 	bl	800078c <__aeabi_fadd>
 8004202:	1c03      	adds	r3, r0, #0
 8004204:	1c1a      	adds	r2, r3, #0
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
 800420a:	e002      	b.n	8004212 <PIDRegulator+0x11a>
	    }
	else
	    {
	    	PID->PID_i = 0;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
	    }
	PID->PID_total = PID->PID_p + PID->PID_i + PID->PID_d;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	1c19      	adds	r1, r3, #0
 800421c:	1c10      	adds	r0, r2, #0
 800421e:	f7fc fab5 	bl	800078c <__aeabi_fadd>
 8004222:	1c03      	adds	r3, r0, #0
 8004224:	1c1a      	adds	r2, r3, #0
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	1c19      	adds	r1, r3, #0
 800422c:	1c10      	adds	r0, r2, #0
 800422e:	f7fc faad 	bl	800078c <__aeabi_fadd>
 8004232:	1c03      	adds	r3, r0, #0
 8004234:	1c1a      	adds	r2, r3, #0
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
	PID->distance_previous_error =  PID->distance_error;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	221c      	movs	r2, #28
 800423e:	5e9a      	ldrsh	r2, [r3, r2]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	83da      	strh	r2, [r3, #30]
	return;
 8004244:	46c0      	nop			; (mov r8, r8)
}
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bdb0      	pop	{r4, r5, r7, pc}

0800424c <CalculateAngle>:

uint16_t CalculateAngle(float PID_value)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]


	if(PID_value < 0 && PID_value >-320){
 8004254:	2100      	movs	r1, #0
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc f938 	bl	80004cc <__aeabi_fcmplt>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d023      	beq.n	80042a8 <CalculateAngle+0x5c>
 8004260:	4926      	ldr	r1, [pc, #152]	; (80042fc <CalculateAngle+0xb0>)
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc f946 	bl	80004f4 <__aeabi_fcmpgt>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d01d      	beq.n	80042a8 <CalculateAngle+0x5c>
		servo_angle = ANGLE_MID + 1.875*(-PID_value);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2280      	movs	r2, #128	; 0x80
 8004270:	0612      	lsls	r2, r2, #24
 8004272:	4053      	eors	r3, r2
 8004274:	1c18      	adds	r0, r3, #0
 8004276:	f7fe ff39 	bl	80030ec <__aeabi_f2d>
 800427a:	2200      	movs	r2, #0
 800427c:	4b20      	ldr	r3, [pc, #128]	; (8004300 <CalculateAngle+0xb4>)
 800427e:	f7fe f88d 	bl	800239c <__aeabi_dmul>
 8004282:	0002      	movs	r2, r0
 8004284:	000b      	movs	r3, r1
 8004286:	0010      	movs	r0, r2
 8004288:	0019      	movs	r1, r3
 800428a:	2200      	movs	r2, #0
 800428c:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <CalculateAngle+0xb8>)
 800428e:	f7fd f947 	bl	8001520 <__aeabi_dadd>
 8004292:	0002      	movs	r2, r0
 8004294:	000b      	movs	r3, r1
 8004296:	0010      	movs	r0, r2
 8004298:	0019      	movs	r1, r3
 800429a:	f7fc f98d 	bl	80005b8 <__aeabi_d2uiz>
 800429e:	0003      	movs	r3, r0
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	4b19      	ldr	r3, [pc, #100]	; (8004308 <CalculateAngle+0xbc>)
 80042a4:	801a      	strh	r2, [r3, #0]
 80042a6:	e022      	b.n	80042ee <CalculateAngle+0xa2>
	}
	else if(PID_value > 0 && PID_value < 320){
 80042a8:	2100      	movs	r1, #0
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fc f922 	bl	80004f4 <__aeabi_fcmpgt>
 80042b0:	1e03      	subs	r3, r0, #0
 80042b2:	d01c      	beq.n	80042ee <CalculateAngle+0xa2>
 80042b4:	4915      	ldr	r1, [pc, #84]	; (800430c <CalculateAngle+0xc0>)
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc f908 	bl	80004cc <__aeabi_fcmplt>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d016      	beq.n	80042ee <CalculateAngle+0xa2>
		servo_angle =  ANGLE_MID - 1.875*PID_value;
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fe ff13 	bl	80030ec <__aeabi_f2d>
 80042c6:	2200      	movs	r2, #0
 80042c8:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <CalculateAngle+0xb4>)
 80042ca:	f7fe f867 	bl	800239c <__aeabi_dmul>
 80042ce:	0002      	movs	r2, r0
 80042d0:	000b      	movs	r3, r1
 80042d2:	2000      	movs	r0, #0
 80042d4:	490b      	ldr	r1, [pc, #44]	; (8004304 <CalculateAngle+0xb8>)
 80042d6:	f7fe facd 	bl	8002874 <__aeabi_dsub>
 80042da:	0002      	movs	r2, r0
 80042dc:	000b      	movs	r3, r1
 80042de:	0010      	movs	r0, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	f7fc f969 	bl	80005b8 <__aeabi_d2uiz>
 80042e6:	0003      	movs	r3, r0
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <CalculateAngle+0xbc>)
 80042ec:	801a      	strh	r2, [r3, #0]
	}
	else {

	}

	return servo_angle;
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <CalculateAngle+0xbc>)
 80042f0:	881b      	ldrh	r3, [r3, #0]
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b002      	add	sp, #8
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	c3a00000 	.word	0xc3a00000
 8004300:	3ffe0000 	.word	0x3ffe0000
 8004304:	408d3800 	.word	0x408d3800
 8004308:	20000000 	.word	0x20000000
 800430c:	43a00000 	.word	0x43a00000

08004310 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2)
	{
		//set_ang(CalculateAngle(PID.PID_total));
	}

}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}

08004320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004324:	b672      	cpsid	i
}
 8004326:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004328:	e7fe      	b.n	8004328 <Error_Handler+0x8>
	...

0800432c <set_ang>:
/*
 * ang - kat obrotu walu serwomechanizmu
 * mode - tryb obrotu zgodnie/przeciwnie do wskazowek zegara
 */
void set_ang(uint16_t ang)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	0002      	movs	r2, r0
 8004334:	1dbb      	adds	r3, r7, #6
 8004336:	801a      	strh	r2, [r3, #0]
	uint16_t val;

	if(ang > ANGLE_MAX)
 8004338:	1dbb      	adds	r3, r7, #6
 800433a:	881a      	ldrh	r2, [r3, #0]
 800433c:	23e1      	movs	r3, #225	; 0xe1
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	429a      	cmp	r2, r3
 8004342:	d903      	bls.n	800434c <set_ang+0x20>
	{
		ang = ANGLE_MAX;
 8004344:	1dbb      	adds	r3, r7, #6
 8004346:	22e1      	movs	r2, #225	; 0xe1
 8004348:	00d2      	lsls	r2, r2, #3
 800434a:	801a      	strh	r2, [r3, #0]
	}
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}
	val = PWM_MIN + (ang * STEP) / 1000;
 800434c:	1dbb      	adds	r3, r7, #6
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <set_ang+0x54>)
 8004352:	4353      	muls	r3, r2
 8004354:	22fa      	movs	r2, #250	; 0xfa
 8004356:	0091      	lsls	r1, r2, #2
 8004358:	0018      	movs	r0, r3
 800435a:	f7fb ff7b 	bl	8000254 <__divsi3>
 800435e:	0003      	movs	r3, r0
 8004360:	b29a      	uxth	r2, r3
 8004362:	210e      	movs	r1, #14
 8004364:	187b      	adds	r3, r7, r1
 8004366:	32f5      	adds	r2, #245	; 0xf5
 8004368:	32ff      	adds	r2, #255	; 0xff
 800436a:	801a      	strh	r2, [r3, #0]


	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <set_ang+0x58>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	187a      	adds	r2, r7, r1
 8004372:	8812      	ldrh	r2, [r2, #0]
 8004374:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	46bd      	mov	sp, r7
 800437a:	b004      	add	sp, #16
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	00000457 	.word	0x00000457
 8004384:	20000304 	.word	0x20000304

08004388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438c:	4b07      	ldr	r3, [pc, #28]	; (80043ac <HAL_MspInit+0x24>)
 800438e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_MspInit+0x24>)
 8004392:	2101      	movs	r1, #1
 8004394:	430a      	orrs	r2, r1
 8004396:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <HAL_MspInit+0x24>)
 800439a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_MspInit+0x24>)
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	0549      	lsls	r1, r1, #21
 80043a2:	430a      	orrs	r2, r1
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000

080043b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043b4:	e7fe      	b.n	80043b4 <NMI_Handler+0x4>

080043b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043ba:	e7fe      	b.n	80043ba <HardFault_Handler+0x4>

080043bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043d4:	f000 fcd8 	bl	8004d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043d8:	46c0      	nop			; (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <TIM2_IRQHandler+0x14>)
 80043e6:	0018      	movs	r0, r3
 80043e8:	f002 ff22 	bl	8007230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	200002c4 	.word	0x200002c4

080043f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
	return 1;
 80043fc:	2301      	movs	r3, #1
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <_kill>:

int _kill(int pid, int sig)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800440e:	f004 fa01 	bl	8008814 <__errno>
 8004412:	0003      	movs	r3, r0
 8004414:	2216      	movs	r2, #22
 8004416:	601a      	str	r2, [r3, #0]
	return -1;
 8004418:	2301      	movs	r3, #1
 800441a:	425b      	negs	r3, r3
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b002      	add	sp, #8
 8004422:	bd80      	pop	{r7, pc}

08004424 <_exit>:

void _exit (int status)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800442c:	2301      	movs	r3, #1
 800442e:	425a      	negs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	0011      	movs	r1, r2
 8004434:	0018      	movs	r0, r3
 8004436:	f7ff ffe5 	bl	8004404 <_kill>
	while (1) {}		/* Make sure we hang here */
 800443a:	e7fe      	b.n	800443a <_exit+0x16>

0800443c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e00a      	b.n	8004464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800444e:	e000      	b.n	8004452 <_read+0x16>
 8004450:	bf00      	nop
 8004452:	0001      	movs	r1, r0
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	60ba      	str	r2, [r7, #8]
 800445a:	b2ca      	uxtb	r2, r1
 800445c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	3301      	adds	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	dbf0      	blt.n	800444e <_read+0x12>
	}

return len;
 800446c:	687b      	ldr	r3, [r7, #4]
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b006      	add	sp, #24
 8004474:	bd80      	pop	{r7, pc}

08004476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e009      	b.n	800449c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	60ba      	str	r2, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	0018      	movs	r0, r3
 8004492:	e000      	b.n	8004496 <_write+0x20>
 8004494:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	3301      	adds	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	dbf1      	blt.n	8004488 <_write+0x12>
	}
	return len;
 80044a4:	687b      	ldr	r3, [r7, #4]
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b006      	add	sp, #24
 80044ac:	bd80      	pop	{r7, pc}

080044ae <_close>:

int _close(int file)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
	return -1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	425b      	negs	r3, r3
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b002      	add	sp, #8
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	0192      	lsls	r2, r2, #6
 80044d2:	605a      	str	r2, [r3, #4]
	return 0;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b002      	add	sp, #8
 80044dc:	bd80      	pop	{r7, pc}

080044de <_isatty>:

int _isatty(int file)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
	return 1;
 80044e6:	2301      	movs	r3, #1
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
	return 0;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <_sbrk+0x5c>)
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <_sbrk+0x60>)
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <_sbrk+0x64>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004524:	4b11      	ldr	r3, [pc, #68]	; (800456c <_sbrk+0x64>)
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <_sbrk+0x68>)
 8004528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <_sbrk+0x64>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	18d3      	adds	r3, r2, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	429a      	cmp	r2, r3
 8004536:	d207      	bcs.n	8004548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004538:	f004 f96c 	bl	8008814 <__errno>
 800453c:	0003      	movs	r3, r0
 800453e:	220c      	movs	r2, #12
 8004540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004542:	2301      	movs	r3, #1
 8004544:	425b      	negs	r3, r3
 8004546:	e009      	b.n	800455c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004548:	4b08      	ldr	r3, [pc, #32]	; (800456c <_sbrk+0x64>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <_sbrk+0x64>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	18d2      	adds	r2, r2, r3
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <_sbrk+0x64>)
 8004558:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800455a:	68fb      	ldr	r3, [r7, #12]
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b006      	add	sp, #24
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20005000 	.word	0x20005000
 8004568:	00000400 	.word	0x00000400
 800456c:	200002c0 	.word	0x200002c0
 8004570:	200004e0 	.word	0x200004e0

08004574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004586:	2318      	movs	r3, #24
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	0018      	movs	r0, r3
 800458c:	2310      	movs	r3, #16
 800458e:	001a      	movs	r2, r3
 8004590:	2100      	movs	r1, #0
 8004592:	f004 f972 	bl	800887a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004596:	2310      	movs	r3, #16
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	0018      	movs	r0, r3
 800459c:	2308      	movs	r3, #8
 800459e:	001a      	movs	r2, r3
 80045a0:	2100      	movs	r1, #0
 80045a2:	f004 f96a 	bl	800887a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045a6:	003b      	movs	r3, r7
 80045a8:	0018      	movs	r0, r3
 80045aa:	2310      	movs	r3, #16
 80045ac:	001a      	movs	r2, r3
 80045ae:	2100      	movs	r1, #0
 80045b0:	f004 f963 	bl	800887a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80045b4:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <MX_TIM2_Init+0xf0>)
 80045b6:	2280      	movs	r2, #128	; 0x80
 80045b8:	05d2      	lsls	r2, r2, #23
 80045ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 80045bc:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <MX_TIM2_Init+0xf0>)
 80045be:	4a2d      	ldr	r2, [pc, #180]	; (8004674 <MX_TIM2_Init+0xf4>)
 80045c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c2:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <MX_TIM2_Init+0xf0>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80045c8:	4b29      	ldr	r3, [pc, #164]	; (8004670 <MX_TIM2_Init+0xf0>)
 80045ca:	2263      	movs	r2, #99	; 0x63
 80045cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045ce:	4b28      	ldr	r3, [pc, #160]	; (8004670 <MX_TIM2_Init+0xf0>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045d4:	4b26      	ldr	r3, [pc, #152]	; (8004670 <MX_TIM2_Init+0xf0>)
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045da:	4b25      	ldr	r3, [pc, #148]	; (8004670 <MX_TIM2_Init+0xf0>)
 80045dc:	0018      	movs	r0, r3
 80045de:	f002 fcc5 	bl	8006f6c <HAL_TIM_Base_Init>
 80045e2:	1e03      	subs	r3, r0, #0
 80045e4:	d001      	beq.n	80045ea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80045e6:	f7ff fe9b 	bl	8004320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045ea:	2118      	movs	r1, #24
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	2280      	movs	r2, #128	; 0x80
 80045f0:	0152      	lsls	r2, r2, #5
 80045f2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045f4:	187a      	adds	r2, r7, r1
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <MX_TIM2_Init+0xf0>)
 80045f8:	0011      	movs	r1, r2
 80045fa:	0018      	movs	r0, r3
 80045fc:	f003 f81e 	bl	800763c <HAL_TIM_ConfigClockSource>
 8004600:	1e03      	subs	r3, r0, #0
 8004602:	d001      	beq.n	8004608 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8004604:	f7ff fe8c 	bl	8004320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <MX_TIM2_Init+0xf0>)
 800460a:	0018      	movs	r0, r3
 800460c:	f002 fcee 	bl	8006fec <HAL_TIM_OC_Init>
 8004610:	1e03      	subs	r3, r0, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8004614:	f7ff fe84 	bl	8004320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004618:	2110      	movs	r1, #16
 800461a:	187b      	adds	r3, r7, r1
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004620:	187b      	adds	r3, r7, r1
 8004622:	2200      	movs	r2, #0
 8004624:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004626:	187a      	adds	r2, r7, r1
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <MX_TIM2_Init+0xf0>)
 800462a:	0011      	movs	r1, r2
 800462c:	0018      	movs	r0, r3
 800462e:	f003 fb19 	bl	8007c64 <HAL_TIMEx_MasterConfigSynchronization>
 8004632:	1e03      	subs	r3, r0, #0
 8004634:	d001      	beq.n	800463a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8004636:	f7ff fe73 	bl	8004320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800463a:	003b      	movs	r3, r7
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004640:	003b      	movs	r3, r7
 8004642:	2200      	movs	r2, #0
 8004644:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004646:	003b      	movs	r3, r7
 8004648:	2200      	movs	r2, #0
 800464a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800464c:	003b      	movs	r3, r7
 800464e:	2200      	movs	r2, #0
 8004650:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004652:	0039      	movs	r1, r7
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <MX_TIM2_Init+0xf0>)
 8004656:	2200      	movs	r2, #0
 8004658:	0018      	movs	r0, r3
 800465a:	f002 fed1 	bl	8007400 <HAL_TIM_OC_ConfigChannel>
 800465e:	1e03      	subs	r3, r0, #0
 8004660:	d001      	beq.n	8004666 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8004662:	f7ff fe5d 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b00a      	add	sp, #40	; 0x28
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	200002c4 	.word	0x200002c4
 8004674:	00007cff 	.word	0x00007cff

08004678 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800467e:	2318      	movs	r3, #24
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	0018      	movs	r0, r3
 8004684:	2310      	movs	r3, #16
 8004686:	001a      	movs	r2, r3
 8004688:	2100      	movs	r1, #0
 800468a:	f004 f8f6 	bl	800887a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800468e:	2310      	movs	r3, #16
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	0018      	movs	r0, r3
 8004694:	2308      	movs	r3, #8
 8004696:	001a      	movs	r2, r3
 8004698:	2100      	movs	r1, #0
 800469a:	f004 f8ee 	bl	800887a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800469e:	003b      	movs	r3, r7
 80046a0:	0018      	movs	r0, r3
 80046a2:	2310      	movs	r3, #16
 80046a4:	001a      	movs	r2, r3
 80046a6:	2100      	movs	r1, #0
 80046a8:	f004 f8e7 	bl	800887a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046ac:	4b34      	ldr	r3, [pc, #208]	; (8004780 <MX_TIM3_Init+0x108>)
 80046ae:	4a35      	ldr	r2, [pc, #212]	; (8004784 <MX_TIM3_Init+0x10c>)
 80046b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 80046b2:	4b33      	ldr	r3, [pc, #204]	; (8004780 <MX_TIM3_Init+0x108>)
 80046b4:	221f      	movs	r2, #31
 80046b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046b8:	4b31      	ldr	r3, [pc, #196]	; (8004780 <MX_TIM3_Init+0x108>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80046be:	4b30      	ldr	r3, [pc, #192]	; (8004780 <MX_TIM3_Init+0x108>)
 80046c0:	4a31      	ldr	r2, [pc, #196]	; (8004788 <MX_TIM3_Init+0x110>)
 80046c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046c4:	4b2e      	ldr	r3, [pc, #184]	; (8004780 <MX_TIM3_Init+0x108>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046ca:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <MX_TIM3_Init+0x108>)
 80046cc:	2280      	movs	r2, #128	; 0x80
 80046ce:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <MX_TIM3_Init+0x108>)
 80046d2:	0018      	movs	r0, r3
 80046d4:	f002 fc4a 	bl	8006f6c <HAL_TIM_Base_Init>
 80046d8:	1e03      	subs	r3, r0, #0
 80046da:	d001      	beq.n	80046e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80046dc:	f7ff fe20 	bl	8004320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046e0:	2118      	movs	r1, #24
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	2280      	movs	r2, #128	; 0x80
 80046e6:	0152      	lsls	r2, r2, #5
 80046e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046ea:	187a      	adds	r2, r7, r1
 80046ec:	4b24      	ldr	r3, [pc, #144]	; (8004780 <MX_TIM3_Init+0x108>)
 80046ee:	0011      	movs	r1, r2
 80046f0:	0018      	movs	r0, r3
 80046f2:	f002 ffa3 	bl	800763c <HAL_TIM_ConfigClockSource>
 80046f6:	1e03      	subs	r3, r0, #0
 80046f8:	d001      	beq.n	80046fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80046fa:	f7ff fe11 	bl	8004320 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <MX_TIM3_Init+0x108>)
 8004700:	0018      	movs	r0, r3
 8004702:	f002 fcbb 	bl	800707c <HAL_TIM_PWM_Init>
 8004706:	1e03      	subs	r3, r0, #0
 8004708:	d001      	beq.n	800470e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800470a:	f7ff fe09 	bl	8004320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800470e:	2110      	movs	r1, #16
 8004710:	187b      	adds	r3, r7, r1
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004716:	187b      	adds	r3, r7, r1
 8004718:	2200      	movs	r2, #0
 800471a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800471c:	187a      	adds	r2, r7, r1
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <MX_TIM3_Init+0x108>)
 8004720:	0011      	movs	r1, r2
 8004722:	0018      	movs	r0, r3
 8004724:	f003 fa9e 	bl	8007c64 <HAL_TIMEx_MasterConfigSynchronization>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d001      	beq.n	8004730 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800472c:	f7ff fdf8 	bl	8004320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004730:	003b      	movs	r3, r7
 8004732:	2260      	movs	r2, #96	; 0x60
 8004734:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004736:	003b      	movs	r3, r7
 8004738:	2200      	movs	r2, #0
 800473a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800473c:	003b      	movs	r3, r7
 800473e:	2200      	movs	r2, #0
 8004740:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004742:	003b      	movs	r3, r7
 8004744:	2200      	movs	r2, #0
 8004746:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004748:	0039      	movs	r1, r7
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <MX_TIM3_Init+0x108>)
 800474c:	2200      	movs	r2, #0
 800474e:	0018      	movs	r0, r3
 8004750:	f002 feae 	bl	80074b0 <HAL_TIM_PWM_ConfigChannel>
 8004754:	1e03      	subs	r3, r0, #0
 8004756:	d001      	beq.n	800475c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004758:	f7ff fde2 	bl	8004320 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800475c:	4b08      	ldr	r3, [pc, #32]	; (8004780 <MX_TIM3_Init+0x108>)
 800475e:	2104      	movs	r1, #4
 8004760:	0018      	movs	r0, r3
 8004762:	f003 fadd 	bl	8007d20 <HAL_TIMEx_RemapConfig>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d001      	beq.n	800476e <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800476a:	f7ff fdd9 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800476e:	4b04      	ldr	r3, [pc, #16]	; (8004780 <MX_TIM3_Init+0x108>)
 8004770:	0018      	movs	r0, r3
 8004772:	f000 f837 	bl	80047e4 <HAL_TIM_MspPostInit>

}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	b00a      	add	sp, #40	; 0x28
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	20000304 	.word	0x20000304
 8004784:	40000400 	.word	0x40000400
 8004788:	00004e1f 	.word	0x00004e1f

0800478c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	05db      	lsls	r3, r3, #23
 800479c:	429a      	cmp	r2, r3
 800479e:	d10e      	bne.n	80047be <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <HAL_TIM_Base_MspInit+0x50>)
 80047a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a4:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <HAL_TIM_Base_MspInit+0x50>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	430a      	orrs	r2, r1
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80047ac:	2200      	movs	r2, #0
 80047ae:	2100      	movs	r1, #0
 80047b0:	200f      	movs	r0, #15
 80047b2:	f000 fbd5 	bl	8004f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047b6:	200f      	movs	r0, #15
 80047b8:	f000 fbe7 	bl	8004f8a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80047bc:	e00a      	b.n	80047d4 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM3)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <HAL_TIM_Base_MspInit+0x54>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d105      	bne.n	80047d4 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <HAL_TIM_Base_MspInit+0x50>)
 80047ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_TIM_Base_MspInit+0x50>)
 80047ce:	2102      	movs	r1, #2
 80047d0:	430a      	orrs	r2, r1
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b002      	add	sp, #8
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40000400 	.word	0x40000400

080047e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047e4:	b590      	push	{r4, r7, lr}
 80047e6:	b089      	sub	sp, #36	; 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ec:	240c      	movs	r4, #12
 80047ee:	193b      	adds	r3, r7, r4
 80047f0:	0018      	movs	r0, r3
 80047f2:	2314      	movs	r3, #20
 80047f4:	001a      	movs	r2, r3
 80047f6:	2100      	movs	r1, #0
 80047f8:	f004 f83f 	bl	800887a <memset>
  if(timHandle->Instance==TIM3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a14      	ldr	r2, [pc, #80]	; (8004854 <HAL_TIM_MspPostInit+0x70>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d122      	bne.n	800484c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <HAL_TIM_MspPostInit+0x74>)
 8004808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <HAL_TIM_MspPostInit+0x74>)
 800480c:	2101      	movs	r1, #1
 800480e:	430a      	orrs	r2, r1
 8004810:	62da      	str	r2, [r3, #44]	; 0x2c
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <HAL_TIM_MspPostInit+0x74>)
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	2201      	movs	r2, #1
 8004818:	4013      	ands	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800481e:	0021      	movs	r1, r4
 8004820:	187b      	adds	r3, r7, r1
 8004822:	2240      	movs	r2, #64	; 0x40
 8004824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004826:	187b      	adds	r3, r7, r1
 8004828:	2202      	movs	r2, #2
 800482a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	187b      	adds	r3, r7, r1
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004832:	187b      	adds	r3, r7, r1
 8004834:	2200      	movs	r2, #0
 8004836:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004838:	187b      	adds	r3, r7, r1
 800483a:	2202      	movs	r2, #2
 800483c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483e:	187a      	adds	r2, r7, r1
 8004840:	23a0      	movs	r3, #160	; 0xa0
 8004842:	05db      	lsls	r3, r3, #23
 8004844:	0011      	movs	r1, r2
 8004846:	0018      	movs	r0, r3
 8004848:	f000 fbbc 	bl	8004fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800484c:	46c0      	nop			; (mov r8, r8)
 800484e:	46bd      	mov	sp, r7
 8004850:	b009      	add	sp, #36	; 0x24
 8004852:	bd90      	pop	{r4, r7, pc}
 8004854:	40000400 	.word	0x40000400
 8004858:	40021000 	.word	0x40021000

0800485c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004860:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 8004862:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <MX_USART2_UART_Init+0x5c>)
 8004864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004866:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 8004868:	22e1      	movs	r2, #225	; 0xe1
 800486a:	0252      	lsls	r2, r2, #9
 800486c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 8004870:	2200      	movs	r2, #0
 8004872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 8004876:	2200      	movs	r2, #0
 8004878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 800487c:	2200      	movs	r2, #0
 800487e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004880:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 8004882:	220c      	movs	r2, #12
 8004884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 8004888:	2200      	movs	r2, #0
 800488a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 800488e:	2200      	movs	r2, #0
 8004890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 8004894:	2200      	movs	r2, #0
 8004896:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 800489a:	2200      	movs	r2, #0
 800489c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <MX_USART2_UART_Init+0x58>)
 80048a0:	0018      	movs	r0, r3
 80048a2:	f003 fa5b 	bl	8007d5c <HAL_UART_Init>
 80048a6:	1e03      	subs	r3, r0, #0
 80048a8:	d001      	beq.n	80048ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80048aa:	f7ff fd39 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000344 	.word	0x20000344
 80048b8:	40004400 	.word	0x40004400

080048bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b089      	sub	sp, #36	; 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c4:	240c      	movs	r4, #12
 80048c6:	193b      	adds	r3, r7, r4
 80048c8:	0018      	movs	r0, r3
 80048ca:	2314      	movs	r3, #20
 80048cc:	001a      	movs	r2, r3
 80048ce:	2100      	movs	r1, #0
 80048d0:	f003 ffd3 	bl	800887a <memset>
  if(uartHandle->Instance==USART2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_UART_MspInit+0x80>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d129      	bne.n	8004932 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048de:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_UART_MspInit+0x84>)
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <HAL_UART_MspInit+0x84>)
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	0289      	lsls	r1, r1, #10
 80048e8:	430a      	orrs	r2, r1
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <HAL_UART_MspInit+0x84>)
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_UART_MspInit+0x84>)
 80048f2:	2101      	movs	r1, #1
 80048f4:	430a      	orrs	r2, r1
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80048f8:	4b11      	ldr	r3, [pc, #68]	; (8004940 <HAL_UART_MspInit+0x84>)
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	2201      	movs	r2, #1
 80048fe:	4013      	ands	r3, r2
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004904:	0021      	movs	r1, r4
 8004906:	187b      	adds	r3, r7, r1
 8004908:	220c      	movs	r2, #12
 800490a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490c:	187b      	adds	r3, r7, r1
 800490e:	2202      	movs	r2, #2
 8004910:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	187b      	adds	r3, r7, r1
 8004914:	2200      	movs	r2, #0
 8004916:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004918:	187b      	adds	r3, r7, r1
 800491a:	2203      	movs	r2, #3
 800491c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800491e:	187b      	adds	r3, r7, r1
 8004920:	2204      	movs	r2, #4
 8004922:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004924:	187a      	adds	r2, r7, r1
 8004926:	23a0      	movs	r3, #160	; 0xa0
 8004928:	05db      	lsls	r3, r3, #23
 800492a:	0011      	movs	r1, r2
 800492c:	0018      	movs	r0, r3
 800492e:	f000 fb49 	bl	8004fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b009      	add	sp, #36	; 0x24
 8004938:	bd90      	pop	{r4, r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	40004400 	.word	0x40004400
 8004940:	40021000 	.word	0x40021000

08004944 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8004944:	b5b0      	push	{r4, r5, r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af02      	add	r7, sp, #8
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	210e      	movs	r1, #14
 8004950:	187b      	adds	r3, r7, r1
 8004952:	1c02      	adds	r2, r0, #0
 8004954:	801a      	strh	r2, [r3, #0]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	330a      	adds	r3, #10
 800495a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	b29d      	uxth	r5, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	68bc      	ldr	r4, [r7, #8]
 8004964:	187a      	adds	r2, r7, r1
 8004966:	8811      	ldrh	r1, [r2, #0]
 8004968:	4806      	ldr	r0, [pc, #24]	; (8004984 <_I2CWrite+0x40>)
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	002b      	movs	r3, r5
 800496e:	0022      	movs	r2, r4
 8004970:	f000 fd5a 	bl	8005428 <HAL_I2C_Master_Transmit>
 8004974:	0003      	movs	r3, r0
 8004976:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8004978:	693b      	ldr	r3, [r7, #16]
}
 800497a:	0018      	movs	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	b006      	add	sp, #24
 8004980:	bdb0      	pop	{r4, r5, r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	200001fc 	.word	0x200001fc

08004988 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b089      	sub	sp, #36	; 0x24
 800498c:	af02      	add	r7, sp, #8
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	210e      	movs	r1, #14
 8004994:	187b      	adds	r3, r7, r1
 8004996:	1c02      	adds	r2, r0, #0
 8004998:	801a      	strh	r2, [r3, #0]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	330a      	adds	r3, #10
 800499e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	2201      	movs	r2, #1
 80049a6:	4313      	orrs	r3, r2
 80049a8:	b299      	uxth	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	b29c      	uxth	r4, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	4806      	ldr	r0, [pc, #24]	; (80049cc <_I2CRead+0x44>)
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	0023      	movs	r3, r4
 80049b8:	f000 fe3e 	bl	8005638 <HAL_I2C_Master_Receive>
 80049bc:	0003      	movs	r3, r0
 80049be:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80049c0:	693b      	ldr	r3, [r7, #16]
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b007      	add	sp, #28
 80049c8:	bd90      	pop	{r4, r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	200001fc 	.word	0x200001fc

080049d0 <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	0004      	movs	r4, r0
 80049d8:	0008      	movs	r0, r1
 80049da:	0011      	movs	r1, r2
 80049dc:	1dbb      	adds	r3, r7, #6
 80049de:	1c22      	adds	r2, r4, #0
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	1c02      	adds	r2, r0, #0
 80049e6:	801a      	strh	r2, [r3, #0]
 80049e8:	1cfb      	adds	r3, r7, #3
 80049ea:	1c0a      	adds	r2, r1, #0
 80049ec:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80049ee:	240f      	movs	r4, #15
 80049f0:	193b      	adds	r3, r7, r4
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80049f6:	1d3b      	adds	r3, r7, #4
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <VL53L1_WrByte+0x74>)
 8004a02:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8004a04:	1d3b      	adds	r3, r7, #4
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <VL53L1_WrByte+0x74>)
 8004a0c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <VL53L1_WrByte+0x74>)
 8004a10:	1cfa      	adds	r2, r7, #3
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	709a      	strb	r2, [r3, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8004a16:	490b      	ldr	r1, [pc, #44]	; (8004a44 <VL53L1_WrByte+0x74>)
 8004a18:	1dbb      	adds	r3, r7, #6
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7ff ff90 	bl	8004944 <_I2CWrite>
 8004a24:	0003      	movs	r3, r0
 8004a26:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <VL53L1_WrByte+0x64>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004a2e:	193b      	adds	r3, r7, r4
 8004a30:	22f3      	movs	r2, #243	; 0xf3
 8004a32:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 8004a34:	230f      	movs	r3, #15
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	b25b      	sxtb	r3, r3
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b005      	add	sp, #20
 8004a42:	bd90      	pop	{r4, r7, pc}
 8004a44:	200003c8 	.word	0x200003c8

08004a48 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data) {
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	0004      	movs	r4, r0
 8004a50:	0008      	movs	r0, r1
 8004a52:	0011      	movs	r1, r2
 8004a54:	1dbb      	adds	r3, r7, #6
 8004a56:	1c22      	adds	r2, r4, #0
 8004a58:	801a      	strh	r2, [r3, #0]
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	1c02      	adds	r2, r0, #0
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	1cbb      	adds	r3, r7, #2
 8004a62:	1c0a      	adds	r2, r1, #0
 8004a64:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a66:	240f      	movs	r4, #15
 8004a68:	193b      	adds	r3, r7, r4
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <VL53L1_WrWord+0x84>)
 8004a7a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8004a7c:	1d3b      	adds	r3, r7, #4
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	4b12      	ldr	r3, [pc, #72]	; (8004acc <VL53L1_WrWord+0x84>)
 8004a84:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8004a86:	1cbb      	adds	r3, r7, #2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <VL53L1_WrWord+0x84>)
 8004a92:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8004a94:	1cbb      	adds	r3, r7, #2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <VL53L1_WrWord+0x84>)
 8004a9c:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8004a9e:	490b      	ldr	r1, [pc, #44]	; (8004acc <VL53L1_WrWord+0x84>)
 8004aa0:	1dbb      	adds	r3, r7, #6
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7ff ff4c 	bl	8004944 <_I2CWrite>
 8004aac:	0003      	movs	r3, r0
 8004aae:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <VL53L1_WrWord+0x74>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004ab6:	193b      	adds	r3, r7, r4
 8004ab8:	22f3      	movs	r2, #243	; 0xf3
 8004aba:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 8004abc:	230f      	movs	r3, #15
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b25b      	sxtb	r3, r3
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b005      	add	sp, #20
 8004aca:	bd90      	pop	{r4, r7, pc}
 8004acc:	200003c8 	.word	0x200003c8

08004ad0 <VL53L1_WrDWord>:

VL53L1_Error VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data) {
 8004ad0:	b590      	push	{r4, r7, lr}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	603a      	str	r2, [r7, #0]
 8004ad8:	1dbb      	adds	r3, r7, #6
 8004ada:	1c02      	adds	r2, r0, #0
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	1c0a      	adds	r2, r1, #0
 8004ae2:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004ae4:	240f      	movs	r4, #15
 8004ae6:	193b      	adds	r3, r7, r4
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <VL53L1_WrDWord+0x88>)
 8004af8:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <VL53L1_WrDWord+0x88>)
 8004b02:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	0e1b      	lsrs	r3, r3, #24
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <VL53L1_WrDWord+0x88>)
 8004b0c:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <VL53L1_WrDWord+0x88>)
 8004b16:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <VL53L1_WrDWord+0x88>)
 8004b20:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <VL53L1_WrDWord+0x88>)
 8004b28:	715a      	strb	r2, [r3, #5]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 8004b2a:	490b      	ldr	r1, [pc, #44]	; (8004b58 <VL53L1_WrDWord+0x88>)
 8004b2c:	1dbb      	adds	r3, r7, #6
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	2206      	movs	r2, #6
 8004b32:	0018      	movs	r0, r3
 8004b34:	f7ff ff06 	bl	8004944 <_I2CWrite>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <VL53L1_WrDWord+0x78>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004b42:	193b      	adds	r3, r7, r4
 8004b44:	22f3      	movs	r2, #243	; 0xf3
 8004b46:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 8004b48:	230f      	movs	r3, #15
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b25b      	sxtb	r3, r3
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b005      	add	sp, #20
 8004b56:	bd90      	pop	{r4, r7, pc}
 8004b58:	200003c8 	.word	0x200003c8

08004b5c <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	603a      	str	r2, [r7, #0]
 8004b64:	1dbb      	adds	r3, r7, #6
 8004b66:	1c02      	adds	r2, r0, #0
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	1c0a      	adds	r2, r1, #0
 8004b6e:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004b70:	240f      	movs	r4, #15
 8004b72:	193b      	adds	r3, r7, r4
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <VL53L1_RdByte+0x88>)
 8004b84:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <VL53L1_RdByte+0x88>)
 8004b8e:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004b90:	4914      	ldr	r1, [pc, #80]	; (8004be4 <VL53L1_RdByte+0x88>)
 8004b92:	1dbb      	adds	r3, r7, #6
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	2202      	movs	r2, #2
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f7ff fed3 	bl	8004944 <_I2CWrite>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	60bb      	str	r3, [r7, #8]
    if( status_int ){
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004ba8:	193b      	adds	r3, r7, r4
 8004baa:	22f3      	movs	r2, #243	; 0xf3
 8004bac:	701a      	strb	r2, [r3, #0]
        goto done;
 8004bae:	e011      	b.n	8004bd4 <VL53L1_RdByte+0x78>
    }
    status_int = _I2CRead(Dev, data, 1);
 8004bb0:	6839      	ldr	r1, [r7, #0]
 8004bb2:	1dbb      	adds	r3, r7, #6
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7ff fee5 	bl	8004988 <_I2CRead>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <VL53L1_RdByte+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	22f3      	movs	r2, #243	; 0xf3
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	e000      	b.n	8004bd4 <VL53L1_RdByte+0x78>
    }
done:
 8004bd2:	46c0      	nop			; (mov r8, r8)
    VL53L1_PutI2cBus();
    return Status;
 8004bd4:	230f      	movs	r3, #15
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b25b      	sxtb	r3, r3
}
 8004bdc:	0018      	movs	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b005      	add	sp, #20
 8004be2:	bd90      	pop	{r4, r7, pc}
 8004be4:	200003c8 	.word	0x200003c8

08004be8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	603a      	str	r2, [r7, #0]
 8004bf0:	1dbb      	adds	r3, r7, #6
 8004bf2:	1c02      	adds	r2, r0, #0
 8004bf4:	801a      	strh	r2, [r3, #0]
 8004bf6:	1d3b      	adds	r3, r7, #4
 8004bf8:	1c0a      	adds	r2, r1, #0
 8004bfa:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004bfc:	240f      	movs	r4, #15
 8004bfe:	193b      	adds	r3, r7, r4
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004c04:	1d3b      	adds	r3, r7, #4
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <VL53L1_RdWord+0xa0>)
 8004c10:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <VL53L1_RdWord+0xa0>)
 8004c1a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004c1c:	491a      	ldr	r1, [pc, #104]	; (8004c88 <VL53L1_RdWord+0xa0>)
 8004c1e:	1dbb      	adds	r3, r7, #6
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	2202      	movs	r2, #2
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7ff fe8d 	bl	8004944 <_I2CWrite>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	60bb      	str	r3, [r7, #8]

    if( status_int ){
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <VL53L1_RdWord+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004c34:	193b      	adds	r3, r7, r4
 8004c36:	22f3      	movs	r2, #243	; 0xf3
 8004c38:	701a      	strb	r2, [r3, #0]
        goto done;
 8004c3a:	e01c      	b.n	8004c76 <VL53L1_RdWord+0x8e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004c3c:	4912      	ldr	r1, [pc, #72]	; (8004c88 <VL53L1_RdWord+0xa0>)
 8004c3e:	1dbb      	adds	r3, r7, #6
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	2202      	movs	r2, #2
 8004c44:	0018      	movs	r0, r3
 8004c46:	f7ff fe9f 	bl	8004988 <_I2CRead>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <VL53L1_RdWord+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004c54:	230f      	movs	r3, #15
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	22f3      	movs	r2, #243	; 0xf3
 8004c5a:	701a      	strb	r2, [r3, #0]
        goto done;
 8004c5c:	e00b      	b.n	8004c76 <VL53L1_RdWord+0x8e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <VL53L1_RdWord+0xa0>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <VL53L1_RdWord+0xa0>)
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	18d3      	adds	r3, r2, r3
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8004c76:	230f      	movs	r3, #15
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	b25b      	sxtb	r3, r3
 }
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b005      	add	sp, #20
 8004c84:	bd90      	pop	{r4, r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	200003c8 	.word	0x200003c8

08004c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
      ldr   r0, =_estack
 8004c8c:	480d      	ldr	r0, [pc, #52]	; (8004cc4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004c8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c90:	480d      	ldr	r0, [pc, #52]	; (8004cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c92:	490e      	ldr	r1, [pc, #56]	; (8004ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c94:	4a0e      	ldr	r2, [pc, #56]	; (8004cd0 <LoopForever+0xe>)
  movs r3, #0
 8004c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c98:	e002      	b.n	8004ca0 <LoopCopyDataInit>

08004c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c9e:	3304      	adds	r3, #4

08004ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ca4:	d3f9      	bcc.n	8004c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ca6:	4a0b      	ldr	r2, [pc, #44]	; (8004cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ca8:	4c0b      	ldr	r4, [pc, #44]	; (8004cd8 <LoopForever+0x16>)
  movs r3, #0
 8004caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cac:	e001      	b.n	8004cb2 <LoopFillZerobss>

08004cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cb0:	3204      	adds	r2, #4

08004cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cb4:	d3fb      	bcc.n	8004cae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004cb6:	f7ff fc5d 	bl	8004574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cba:	f003 fdb1 	bl	8008820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cbe:	f7ff f90f 	bl	8003ee0 <main>

08004cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8004cc2:	e7fe      	b.n	8004cc2 <LoopForever>
      ldr   r0, =_estack
 8004cc4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ccc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004cd0:	0800bddc 	.word	0x0800bddc
  ldr r2, =_sbss
 8004cd4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004cd8:	200004dc 	.word	0x200004dc

08004cdc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cdc:	e7fe      	b.n	8004cdc <ADC1_COMP_IRQHandler>
	...

08004ce0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ce6:	1dfb      	adds	r3, r7, #7
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_Init+0x3c>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <HAL_Init+0x3c>)
 8004cf2:	2140      	movs	r1, #64	; 0x40
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	f000 f811 	bl	8004d20 <HAL_InitTick>
 8004cfe:	1e03      	subs	r3, r0, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004d02:	1dfb      	adds	r3, r7, #7
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e001      	b.n	8004d0e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d0a:	f7ff fb3d 	bl	8004388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d0e:	1dfb      	adds	r3, r7, #7
 8004d10:	781b      	ldrb	r3, [r3, #0]
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	40022000 	.word	0x40022000

08004d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <HAL_InitTick+0x5c>)
 8004d2a:	681c      	ldr	r4, [r3, #0]
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <HAL_InitTick+0x60>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	0019      	movs	r1, r3
 8004d32:	23fa      	movs	r3, #250	; 0xfa
 8004d34:	0098      	lsls	r0, r3, #2
 8004d36:	f7fb fa03 	bl	8000140 <__udivsi3>
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	0020      	movs	r0, r4
 8004d40:	f7fb f9fe 	bl	8000140 <__udivsi3>
 8004d44:	0003      	movs	r3, r0
 8004d46:	0018      	movs	r0, r3
 8004d48:	f000 f92f 	bl	8004faa <HAL_SYSTICK_Config>
 8004d4c:	1e03      	subs	r3, r0, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e00f      	b.n	8004d74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d80b      	bhi.n	8004d72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	425b      	negs	r3, r3
 8004d60:	2200      	movs	r2, #0
 8004d62:	0018      	movs	r0, r3
 8004d64:	f000 f8fc 	bl	8004f60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_InitTick+0x64>)
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e000      	b.n	8004d74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
}
 8004d74:	0018      	movs	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b003      	add	sp, #12
 8004d7a:	bd90      	pop	{r4, r7, pc}
 8004d7c:	20000004 	.word	0x20000004
 8004d80:	2000000c 	.word	0x2000000c
 8004d84:	20000008 	.word	0x20000008

08004d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_IncTick+0x1c>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	001a      	movs	r2, r3
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_IncTick+0x20>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	18d2      	adds	r2, r2, r3
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_IncTick+0x20>)
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	200004c8 	.word	0x200004c8

08004dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  return uwTick;
 8004db0:	4b02      	ldr	r3, [pc, #8]	; (8004dbc <HAL_GetTick+0x10>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	200004c8 	.word	0x200004c8

08004dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dc8:	f7ff fff0 	bl	8004dac <HAL_GetTick>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	d005      	beq.n	8004de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dda:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <HAL_Delay+0x44>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	001a      	movs	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	189b      	adds	r3, r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	f7ff ffe0 	bl	8004dac <HAL_GetTick>
 8004dec:	0002      	movs	r2, r0
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d8f7      	bhi.n	8004de8 <HAL_Delay+0x28>
  {
  }
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b004      	add	sp, #16
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	2000000c 	.word	0x2000000c

08004e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	0002      	movs	r2, r0
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e14:	1dfb      	adds	r3, r7, #7
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b7f      	cmp	r3, #127	; 0x7f
 8004e1a:	d809      	bhi.n	8004e30 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e1c:	1dfb      	adds	r3, r7, #7
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	001a      	movs	r2, r3
 8004e22:	231f      	movs	r3, #31
 8004e24:	401a      	ands	r2, r3
 8004e26:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <__NVIC_EnableIRQ+0x30>)
 8004e28:	2101      	movs	r1, #1
 8004e2a:	4091      	lsls	r1, r2
 8004e2c:	000a      	movs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]
  }
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b002      	add	sp, #8
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	e000e100 	.word	0xe000e100

08004e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	0002      	movs	r2, r0
 8004e44:	6039      	str	r1, [r7, #0]
 8004e46:	1dfb      	adds	r3, r7, #7
 8004e48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e4a:	1dfb      	adds	r3, r7, #7
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e50:	d828      	bhi.n	8004ea4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e52:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <__NVIC_SetPriority+0xd4>)
 8004e54:	1dfb      	adds	r3, r7, #7
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	b25b      	sxtb	r3, r3
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	33c0      	adds	r3, #192	; 0xc0
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	589b      	ldr	r3, [r3, r2]
 8004e62:	1dfa      	adds	r2, r7, #7
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	0011      	movs	r1, r2
 8004e68:	2203      	movs	r2, #3
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	00d2      	lsls	r2, r2, #3
 8004e6e:	21ff      	movs	r1, #255	; 0xff
 8004e70:	4091      	lsls	r1, r2
 8004e72:	000a      	movs	r2, r1
 8004e74:	43d2      	mvns	r2, r2
 8004e76:	401a      	ands	r2, r3
 8004e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	019b      	lsls	r3, r3, #6
 8004e7e:	22ff      	movs	r2, #255	; 0xff
 8004e80:	401a      	ands	r2, r3
 8004e82:	1dfb      	adds	r3, r7, #7
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	0018      	movs	r0, r3
 8004e88:	2303      	movs	r3, #3
 8004e8a:	4003      	ands	r3, r0
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e90:	481f      	ldr	r0, [pc, #124]	; (8004f10 <__NVIC_SetPriority+0xd4>)
 8004e92:	1dfb      	adds	r3, r7, #7
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	089b      	lsrs	r3, r3, #2
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	33c0      	adds	r3, #192	; 0xc0
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004ea2:	e031      	b.n	8004f08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <__NVIC_SetPriority+0xd8>)
 8004ea6:	1dfb      	adds	r3, r7, #7
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	0019      	movs	r1, r3
 8004eac:	230f      	movs	r3, #15
 8004eae:	400b      	ands	r3, r1
 8004eb0:	3b08      	subs	r3, #8
 8004eb2:	089b      	lsrs	r3, r3, #2
 8004eb4:	3306      	adds	r3, #6
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	3304      	adds	r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	1dfa      	adds	r2, r7, #7
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	0011      	movs	r1, r2
 8004ec4:	2203      	movs	r2, #3
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	00d2      	lsls	r2, r2, #3
 8004eca:	21ff      	movs	r1, #255	; 0xff
 8004ecc:	4091      	lsls	r1, r2
 8004ece:	000a      	movs	r2, r1
 8004ed0:	43d2      	mvns	r2, r2
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	019b      	lsls	r3, r3, #6
 8004eda:	22ff      	movs	r2, #255	; 0xff
 8004edc:	401a      	ands	r2, r3
 8004ede:	1dfb      	adds	r3, r7, #7
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	4003      	ands	r3, r0
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004eec:	4809      	ldr	r0, [pc, #36]	; (8004f14 <__NVIC_SetPriority+0xd8>)
 8004eee:	1dfb      	adds	r3, r7, #7
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	001c      	movs	r4, r3
 8004ef4:	230f      	movs	r3, #15
 8004ef6:	4023      	ands	r3, r4
 8004ef8:	3b08      	subs	r3, #8
 8004efa:	089b      	lsrs	r3, r3, #2
 8004efc:	430a      	orrs	r2, r1
 8004efe:	3306      	adds	r3, #6
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	18c3      	adds	r3, r0, r3
 8004f04:	3304      	adds	r3, #4
 8004f06:	601a      	str	r2, [r3, #0]
}
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b003      	add	sp, #12
 8004f0e:	bd90      	pop	{r4, r7, pc}
 8004f10:	e000e100 	.word	0xe000e100
 8004f14:	e000ed00 	.word	0xe000ed00

08004f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	1e5a      	subs	r2, r3, #1
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	045b      	lsls	r3, r3, #17
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d301      	bcc.n	8004f30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e010      	b.n	8004f52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <SysTick_Config+0x44>)
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	3a01      	subs	r2, #1
 8004f36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f38:	2301      	movs	r3, #1
 8004f3a:	425b      	negs	r3, r3
 8004f3c:	2103      	movs	r1, #3
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f7ff ff7c 	bl	8004e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <SysTick_Config+0x44>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <SysTick_Config+0x44>)
 8004f4c:	2207      	movs	r2, #7
 8004f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	0018      	movs	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b002      	add	sp, #8
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	e000e010 	.word	0xe000e010

08004f60 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	210f      	movs	r1, #15
 8004f6c:	187b      	adds	r3, r7, r1
 8004f6e:	1c02      	adds	r2, r0, #0
 8004f70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	187b      	adds	r3, r7, r1
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	0011      	movs	r1, r2
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f7ff ff5d 	bl	8004e3c <__NVIC_SetPriority>
}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b004      	add	sp, #16
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	0002      	movs	r2, r0
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7ff ff33 	bl	8004e08 <__NVIC_EnableIRQ>
}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b002      	add	sp, #8
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7ff ffaf 	bl	8004f18 <SysTick_Config>
 8004fba:	0003      	movs	r3, r0
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004fda:	e155      	b.n	8005288 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4091      	lsls	r1, r2
 8004fe6:	000a      	movs	r2, r1
 8004fe8:	4013      	ands	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d100      	bne.n	8004ff4 <HAL_GPIO_Init+0x30>
 8004ff2:	e146      	b.n	8005282 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d005      	beq.n	800500c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2203      	movs	r2, #3
 8005006:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005008:	2b02      	cmp	r3, #2
 800500a:	d130      	bne.n	800506e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	2203      	movs	r2, #3
 8005018:	409a      	lsls	r2, r3
 800501a:	0013      	movs	r3, r2
 800501c:	43da      	mvns	r2, r3
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4013      	ands	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	409a      	lsls	r2, r3
 800502e:	0013      	movs	r3, r2
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005042:	2201      	movs	r2, #1
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	409a      	lsls	r2, r3
 8005048:	0013      	movs	r3, r2
 800504a:	43da      	mvns	r2, r3
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4013      	ands	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	2201      	movs	r2, #1
 800505a:	401a      	ands	r2, r3
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	409a      	lsls	r2, r3
 8005060:	0013      	movs	r3, r2
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2203      	movs	r2, #3
 8005074:	4013      	ands	r3, r2
 8005076:	2b03      	cmp	r3, #3
 8005078:	d017      	beq.n	80050aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	2203      	movs	r2, #3
 8005086:	409a      	lsls	r2, r3
 8005088:	0013      	movs	r3, r2
 800508a:	43da      	mvns	r2, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4013      	ands	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	409a      	lsls	r2, r3
 800509c:	0013      	movs	r3, r2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2203      	movs	r2, #3
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d123      	bne.n	80050fe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	08da      	lsrs	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3208      	adds	r2, #8
 80050be:	0092      	lsls	r2, r2, #2
 80050c0:	58d3      	ldr	r3, [r2, r3]
 80050c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2207      	movs	r2, #7
 80050c8:	4013      	ands	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	220f      	movs	r2, #15
 80050ce:	409a      	lsls	r2, r3
 80050d0:	0013      	movs	r3, r2
 80050d2:	43da      	mvns	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4013      	ands	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2107      	movs	r1, #7
 80050e2:	400b      	ands	r3, r1
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	409a      	lsls	r2, r3
 80050e8:	0013      	movs	r3, r2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	08da      	lsrs	r2, r3, #3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3208      	adds	r2, #8
 80050f8:	0092      	lsls	r2, r2, #2
 80050fa:	6939      	ldr	r1, [r7, #16]
 80050fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	2203      	movs	r2, #3
 800510a:	409a      	lsls	r2, r3
 800510c:	0013      	movs	r3, r2
 800510e:	43da      	mvns	r2, r3
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4013      	ands	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2203      	movs	r2, #3
 800511c:	401a      	ands	r2, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	409a      	lsls	r2, r3
 8005124:	0013      	movs	r3, r2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	23c0      	movs	r3, #192	; 0xc0
 8005138:	029b      	lsls	r3, r3, #10
 800513a:	4013      	ands	r3, r2
 800513c:	d100      	bne.n	8005140 <HAL_GPIO_Init+0x17c>
 800513e:	e0a0      	b.n	8005282 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005140:	4b57      	ldr	r3, [pc, #348]	; (80052a0 <HAL_GPIO_Init+0x2dc>)
 8005142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005144:	4b56      	ldr	r3, [pc, #344]	; (80052a0 <HAL_GPIO_Init+0x2dc>)
 8005146:	2101      	movs	r1, #1
 8005148:	430a      	orrs	r2, r1
 800514a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800514c:	4a55      	ldr	r2, [pc, #340]	; (80052a4 <HAL_GPIO_Init+0x2e0>)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	089b      	lsrs	r3, r3, #2
 8005152:	3302      	adds	r3, #2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	589b      	ldr	r3, [r3, r2]
 8005158:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2203      	movs	r2, #3
 800515e:	4013      	ands	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	220f      	movs	r2, #15
 8005164:	409a      	lsls	r2, r3
 8005166:	0013      	movs	r3, r2
 8005168:	43da      	mvns	r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4013      	ands	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	23a0      	movs	r3, #160	; 0xa0
 8005174:	05db      	lsls	r3, r3, #23
 8005176:	429a      	cmp	r2, r3
 8005178:	d01f      	beq.n	80051ba <HAL_GPIO_Init+0x1f6>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a4a      	ldr	r2, [pc, #296]	; (80052a8 <HAL_GPIO_Init+0x2e4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d019      	beq.n	80051b6 <HAL_GPIO_Init+0x1f2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a49      	ldr	r2, [pc, #292]	; (80052ac <HAL_GPIO_Init+0x2e8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <HAL_GPIO_Init+0x1ee>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a48      	ldr	r2, [pc, #288]	; (80052b0 <HAL_GPIO_Init+0x2ec>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00d      	beq.n	80051ae <HAL_GPIO_Init+0x1ea>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a47      	ldr	r2, [pc, #284]	; (80052b4 <HAL_GPIO_Init+0x2f0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <HAL_GPIO_Init+0x1e6>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a46      	ldr	r2, [pc, #280]	; (80052b8 <HAL_GPIO_Init+0x2f4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_GPIO_Init+0x1e2>
 80051a2:	2305      	movs	r3, #5
 80051a4:	e00a      	b.n	80051bc <HAL_GPIO_Init+0x1f8>
 80051a6:	2306      	movs	r3, #6
 80051a8:	e008      	b.n	80051bc <HAL_GPIO_Init+0x1f8>
 80051aa:	2304      	movs	r3, #4
 80051ac:	e006      	b.n	80051bc <HAL_GPIO_Init+0x1f8>
 80051ae:	2303      	movs	r3, #3
 80051b0:	e004      	b.n	80051bc <HAL_GPIO_Init+0x1f8>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e002      	b.n	80051bc <HAL_GPIO_Init+0x1f8>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <HAL_GPIO_Init+0x1f8>
 80051ba:	2300      	movs	r3, #0
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	2103      	movs	r1, #3
 80051c0:	400a      	ands	r2, r1
 80051c2:	0092      	lsls	r2, r2, #2
 80051c4:	4093      	lsls	r3, r2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051cc:	4935      	ldr	r1, [pc, #212]	; (80052a4 <HAL_GPIO_Init+0x2e0>)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	3302      	adds	r3, #2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051da:	4b38      	ldr	r3, [pc, #224]	; (80052bc <HAL_GPIO_Init+0x2f8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	43da      	mvns	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4013      	ands	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	025b      	lsls	r3, r3, #9
 80051f2:	4013      	ands	r3, r2
 80051f4:	d003      	beq.n	80051fe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80051fe:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <HAL_GPIO_Init+0x2f8>)
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005204:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <HAL_GPIO_Init+0x2f8>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	43da      	mvns	r2, r3
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4013      	ands	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	029b      	lsls	r3, r3, #10
 800521c:	4013      	ands	r3, r2
 800521e:	d003      	beq.n	8005228 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005228:	4b24      	ldr	r3, [pc, #144]	; (80052bc <HAL_GPIO_Init+0x2f8>)
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800522e:	4b23      	ldr	r3, [pc, #140]	; (80052bc <HAL_GPIO_Init+0x2f8>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	43da      	mvns	r2, r3
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4013      	ands	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	035b      	lsls	r3, r3, #13
 8005246:	4013      	ands	r3, r2
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005252:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <HAL_GPIO_Init+0x2f8>)
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005258:	4b18      	ldr	r3, [pc, #96]	; (80052bc <HAL_GPIO_Init+0x2f8>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	43da      	mvns	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4013      	ands	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	039b      	lsls	r3, r3, #14
 8005270:	4013      	ands	r3, r2
 8005272:	d003      	beq.n	800527c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <HAL_GPIO_Init+0x2f8>)
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	3301      	adds	r3, #1
 8005286:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	40da      	lsrs	r2, r3
 8005290:	1e13      	subs	r3, r2, #0
 8005292:	d000      	beq.n	8005296 <HAL_GPIO_Init+0x2d2>
 8005294:	e6a2      	b.n	8004fdc <HAL_GPIO_Init+0x18>
  }
}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	46c0      	nop			; (mov r8, r8)
 800529a:	46bd      	mov	sp, r7
 800529c:	b006      	add	sp, #24
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40010000 	.word	0x40010000
 80052a8:	50000400 	.word	0x50000400
 80052ac:	50000800 	.word	0x50000800
 80052b0:	50000c00 	.word	0x50000c00
 80052b4:	50001000 	.word	0x50001000
 80052b8:	50001c00 	.word	0x50001c00
 80052bc:	40010400 	.word	0x40010400

080052c0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	0008      	movs	r0, r1
 80052ca:	0011      	movs	r1, r2
 80052cc:	1cbb      	adds	r3, r7, #2
 80052ce:	1c02      	adds	r2, r0, #0
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	1c7b      	adds	r3, r7, #1
 80052d4:	1c0a      	adds	r2, r1, #0
 80052d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052d8:	1c7b      	adds	r3, r7, #1
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052e0:	1cbb      	adds	r3, r7, #2
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80052e8:	e003      	b.n	80052f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80052ea:	1cbb      	adds	r3, r7, #2
 80052ec:	881a      	ldrh	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b002      	add	sp, #8
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e082      	b.n	8005414 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2241      	movs	r2, #65	; 0x41
 8005312:	5c9b      	ldrb	r3, [r3, r2]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d107      	bne.n	800532a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2240      	movs	r2, #64	; 0x40
 800531e:	2100      	movs	r1, #0
 8005320:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	0018      	movs	r0, r3
 8005326:	f7fe fd97 	bl	8003e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2241      	movs	r2, #65	; 0x41
 800532e:	2124      	movs	r1, #36	; 0x24
 8005330:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2101      	movs	r1, #1
 800533e:	438a      	bics	r2, r1
 8005340:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4934      	ldr	r1, [pc, #208]	; (800541c <HAL_I2C_Init+0x120>)
 800534c:	400a      	ands	r2, r1
 800534e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4931      	ldr	r1, [pc, #196]	; (8005420 <HAL_I2C_Init+0x124>)
 800535c:	400a      	ands	r2, r1
 800535e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d108      	bne.n	800537a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	0209      	lsls	r1, r1, #8
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	e007      	b.n	800538a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2184      	movs	r1, #132	; 0x84
 8005384:	0209      	lsls	r1, r1, #8
 8005386:	430a      	orrs	r2, r1
 8005388:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d104      	bne.n	800539c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2280      	movs	r2, #128	; 0x80
 8005398:	0112      	lsls	r2, r2, #4
 800539a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	491f      	ldr	r1, [pc, #124]	; (8005424 <HAL_I2C_Init+0x128>)
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	491a      	ldr	r1, [pc, #104]	; (8005420 <HAL_I2C_Init+0x124>)
 80053b8:	400a      	ands	r2, r1
 80053ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69d9      	ldr	r1, [r3, #28]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2101      	movs	r1, #1
 80053f2:	430a      	orrs	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2241      	movs	r2, #65	; 0x41
 8005400:	2120      	movs	r1, #32
 8005402:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2242      	movs	r2, #66	; 0x42
 800540e:	2100      	movs	r1, #0
 8005410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	0018      	movs	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	b002      	add	sp, #8
 800541a:	bd80      	pop	{r7, pc}
 800541c:	f0ffffff 	.word	0xf0ffffff
 8005420:	ffff7fff 	.word	0xffff7fff
 8005424:	02008000 	.word	0x02008000

08005428 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b089      	sub	sp, #36	; 0x24
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	0008      	movs	r0, r1
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	0019      	movs	r1, r3
 8005436:	230a      	movs	r3, #10
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	1c02      	adds	r2, r0, #0
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	2308      	movs	r3, #8
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	1c0a      	adds	r2, r1, #0
 8005444:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2241      	movs	r2, #65	; 0x41
 800544a:	5c9b      	ldrb	r3, [r3, r2]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b20      	cmp	r3, #32
 8005450:	d000      	beq.n	8005454 <HAL_I2C_Master_Transmit+0x2c>
 8005452:	e0e7      	b.n	8005624 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2240      	movs	r2, #64	; 0x40
 8005458:	5c9b      	ldrb	r3, [r3, r2]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_I2C_Master_Transmit+0x3a>
 800545e:	2302      	movs	r3, #2
 8005460:	e0e1      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1fe>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2240      	movs	r2, #64	; 0x40
 8005466:	2101      	movs	r1, #1
 8005468:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800546a:	f7ff fc9f 	bl	8004dac <HAL_GetTick>
 800546e:	0003      	movs	r3, r0
 8005470:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	0219      	lsls	r1, r3, #8
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	2319      	movs	r3, #25
 800547e:	2201      	movs	r2, #1
 8005480:	f000 fb9a 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005484:	1e03      	subs	r3, r0, #0
 8005486:	d001      	beq.n	800548c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0cc      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2241      	movs	r2, #65	; 0x41
 8005490:	2121      	movs	r1, #33	; 0x21
 8005492:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2242      	movs	r2, #66	; 0x42
 8005498:	2110      	movs	r1, #16
 800549a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2208      	movs	r2, #8
 80054ac:	18ba      	adds	r2, r7, r2
 80054ae:	8812      	ldrh	r2, [r2, #0]
 80054b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2bff      	cmp	r3, #255	; 0xff
 80054c0:	d911      	bls.n	80054e6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	045c      	lsls	r4, r3, #17
 80054d2:	230a      	movs	r3, #10
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	8819      	ldrh	r1, [r3, #0]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	4b55      	ldr	r3, [pc, #340]	; (8005630 <HAL_I2C_Master_Transmit+0x208>)
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	0023      	movs	r3, r4
 80054e0:	f000 fd0a 	bl	8005ef8 <I2C_TransferConfig>
 80054e4:	e075      	b.n	80055d2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	049c      	lsls	r4, r3, #18
 80054fa:	230a      	movs	r3, #10
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	8819      	ldrh	r1, [r3, #0]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	4b4b      	ldr	r3, [pc, #300]	; (8005630 <HAL_I2C_Master_Transmit+0x208>)
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	0023      	movs	r3, r4
 8005508:	f000 fcf6 	bl	8005ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800550c:	e061      	b.n	80055d2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	0018      	movs	r0, r3
 8005516:	f000 fb8e 	bl	8005c36 <I2C_WaitOnTXISFlagUntilTimeout>
 800551a:	1e03      	subs	r3, r0, #0
 800551c:	d001      	beq.n	8005522 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e081      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d03a      	beq.n	80055d2 <HAL_I2C_Master_Transmit+0x1aa>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d136      	bne.n	80055d2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	0013      	movs	r3, r2
 800556e:	2200      	movs	r2, #0
 8005570:	2180      	movs	r1, #128	; 0x80
 8005572:	f000 fb21 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005576:	1e03      	subs	r3, r0, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e053      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005582:	b29b      	uxth	r3, r3
 8005584:	2bff      	cmp	r3, #255	; 0xff
 8005586:	d911      	bls.n	80055ac <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	22ff      	movs	r2, #255	; 0xff
 800558c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005592:	b2da      	uxtb	r2, r3
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	045c      	lsls	r4, r3, #17
 8005598:	230a      	movs	r3, #10
 800559a:	18fb      	adds	r3, r7, r3
 800559c:	8819      	ldrh	r1, [r3, #0]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	2300      	movs	r3, #0
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	0023      	movs	r3, r4
 80055a6:	f000 fca7 	bl	8005ef8 <I2C_TransferConfig>
 80055aa:	e012      	b.n	80055d2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	049c      	lsls	r4, r3, #18
 80055c0:	230a      	movs	r3, #10
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	8819      	ldrh	r1, [r3, #0]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	2300      	movs	r3, #0
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	0023      	movs	r3, r4
 80055ce:	f000 fc93 	bl	8005ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d198      	bne.n	800550e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	0018      	movs	r0, r3
 80055e4:	f000 fb66 	bl	8005cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055e8:	1e03      	subs	r3, r0, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e01a      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2220      	movs	r2, #32
 80055f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	490c      	ldr	r1, [pc, #48]	; (8005634 <HAL_I2C_Master_Transmit+0x20c>)
 8005604:	400a      	ands	r2, r1
 8005606:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2241      	movs	r2, #65	; 0x41
 800560c:	2120      	movs	r1, #32
 800560e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2242      	movs	r2, #66	; 0x42
 8005614:	2100      	movs	r1, #0
 8005616:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2240      	movs	r2, #64	; 0x40
 800561c:	2100      	movs	r1, #0
 800561e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	0018      	movs	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	b007      	add	sp, #28
 800562c:	bd90      	pop	{r4, r7, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	80002000 	.word	0x80002000
 8005634:	fe00e800 	.word	0xfe00e800

08005638 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	0008      	movs	r0, r1
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	0019      	movs	r1, r3
 8005646:	230a      	movs	r3, #10
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	1c02      	adds	r2, r0, #0
 800564c:	801a      	strh	r2, [r3, #0]
 800564e:	2308      	movs	r3, #8
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	1c0a      	adds	r2, r1, #0
 8005654:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2241      	movs	r2, #65	; 0x41
 800565a:	5c9b      	ldrb	r3, [r3, r2]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b20      	cmp	r3, #32
 8005660:	d000      	beq.n	8005664 <HAL_I2C_Master_Receive+0x2c>
 8005662:	e0e8      	b.n	8005836 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2240      	movs	r2, #64	; 0x40
 8005668:	5c9b      	ldrb	r3, [r3, r2]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_I2C_Master_Receive+0x3a>
 800566e:	2302      	movs	r3, #2
 8005670:	e0e2      	b.n	8005838 <HAL_I2C_Master_Receive+0x200>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2240      	movs	r2, #64	; 0x40
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800567a:	f7ff fb97 	bl	8004dac <HAL_GetTick>
 800567e:	0003      	movs	r3, r0
 8005680:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005682:	2380      	movs	r3, #128	; 0x80
 8005684:	0219      	lsls	r1, r3, #8
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	2319      	movs	r3, #25
 800568e:	2201      	movs	r2, #1
 8005690:	f000 fa92 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005694:	1e03      	subs	r3, r0, #0
 8005696:	d001      	beq.n	800569c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0cd      	b.n	8005838 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2241      	movs	r2, #65	; 0x41
 80056a0:	2122      	movs	r1, #34	; 0x22
 80056a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2242      	movs	r2, #66	; 0x42
 80056a8:	2110      	movs	r1, #16
 80056aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2208      	movs	r2, #8
 80056bc:	18ba      	adds	r2, r7, r2
 80056be:	8812      	ldrh	r2, [r2, #0]
 80056c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2bff      	cmp	r3, #255	; 0xff
 80056d0:	d911      	bls.n	80056f6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	22ff      	movs	r2, #255	; 0xff
 80056d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	045c      	lsls	r4, r3, #17
 80056e2:	230a      	movs	r3, #10
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	8819      	ldrh	r1, [r3, #0]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	4b55      	ldr	r3, [pc, #340]	; (8005840 <HAL_I2C_Master_Receive+0x208>)
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	0023      	movs	r3, r4
 80056f0:	f000 fc02 	bl	8005ef8 <I2C_TransferConfig>
 80056f4:	e076      	b.n	80057e4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005704:	b2da      	uxtb	r2, r3
 8005706:	2380      	movs	r3, #128	; 0x80
 8005708:	049c      	lsls	r4, r3, #18
 800570a:	230a      	movs	r3, #10
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	8819      	ldrh	r1, [r3, #0]
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	4b4b      	ldr	r3, [pc, #300]	; (8005840 <HAL_I2C_Master_Receive+0x208>)
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	0023      	movs	r3, r4
 8005718:	f000 fbee 	bl	8005ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800571c:	e062      	b.n	80057e4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	0018      	movs	r0, r3
 8005726:	f000 fb01 	bl	8005d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800572a:	1e03      	subs	r3, r0, #0
 800572c:	d001      	beq.n	8005732 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e082      	b.n	8005838 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d03a      	beq.n	80057e4 <HAL_I2C_Master_Receive+0x1ac>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d136      	bne.n	80057e4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	0013      	movs	r3, r2
 8005780:	2200      	movs	r2, #0
 8005782:	2180      	movs	r1, #128	; 0x80
 8005784:	f000 fa18 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005788:	1e03      	subs	r3, r0, #0
 800578a:	d001      	beq.n	8005790 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e053      	b.n	8005838 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2bff      	cmp	r3, #255	; 0xff
 8005798:	d911      	bls.n	80057be <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	22ff      	movs	r2, #255	; 0xff
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	045c      	lsls	r4, r3, #17
 80057aa:	230a      	movs	r3, #10
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	8819      	ldrh	r1, [r3, #0]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	2300      	movs	r3, #0
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	0023      	movs	r3, r4
 80057b8:	f000 fb9e 	bl	8005ef8 <I2C_TransferConfig>
 80057bc:	e012      	b.n	80057e4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	049c      	lsls	r4, r3, #18
 80057d2:	230a      	movs	r3, #10
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	8819      	ldrh	r1, [r3, #0]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	2300      	movs	r3, #0
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	0023      	movs	r3, r4
 80057e0:	f000 fb8a 	bl	8005ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d197      	bne.n	800571e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 fa5d 	bl	8005cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057fa:	1e03      	subs	r3, r0, #0
 80057fc:	d001      	beq.n	8005802 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e01a      	b.n	8005838 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2220      	movs	r2, #32
 8005808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	490b      	ldr	r1, [pc, #44]	; (8005844 <HAL_I2C_Master_Receive+0x20c>)
 8005816:	400a      	ands	r2, r1
 8005818:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2241      	movs	r2, #65	; 0x41
 800581e:	2120      	movs	r1, #32
 8005820:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2242      	movs	r2, #66	; 0x42
 8005826:	2100      	movs	r1, #0
 8005828:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2240      	movs	r2, #64	; 0x40
 800582e:	2100      	movs	r1, #0
 8005830:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e000      	b.n	8005838 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005836:	2302      	movs	r3, #2
  }
}
 8005838:	0018      	movs	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	b007      	add	sp, #28
 800583e:	bd90      	pop	{r4, r7, pc}
 8005840:	80002400 	.word	0x80002400
 8005844:	fe00e800 	.word	0xfe00e800

08005848 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b089      	sub	sp, #36	; 0x24
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	000c      	movs	r4, r1
 8005852:	0010      	movs	r0, r2
 8005854:	0019      	movs	r1, r3
 8005856:	230a      	movs	r3, #10
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	1c22      	adds	r2, r4, #0
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	2308      	movs	r3, #8
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	1c02      	adds	r2, r0, #0
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	1dbb      	adds	r3, r7, #6
 8005868:	1c0a      	adds	r2, r1, #0
 800586a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2241      	movs	r2, #65	; 0x41
 8005870:	5c9b      	ldrb	r3, [r3, r2]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b20      	cmp	r3, #32
 8005876:	d000      	beq.n	800587a <HAL_I2C_Mem_Read+0x32>
 8005878:	e110      	b.n	8005a9c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <HAL_I2C_Mem_Read+0x42>
 8005880:	232c      	movs	r3, #44	; 0x2c
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d105      	bne.n	8005896 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2280      	movs	r2, #128	; 0x80
 800588e:	0092      	lsls	r2, r2, #2
 8005890:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e103      	b.n	8005a9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2240      	movs	r2, #64	; 0x40
 800589a:	5c9b      	ldrb	r3, [r3, r2]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_I2C_Mem_Read+0x5c>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e0fc      	b.n	8005a9e <HAL_I2C_Mem_Read+0x256>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2240      	movs	r2, #64	; 0x40
 80058a8:	2101      	movs	r1, #1
 80058aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058ac:	f7ff fa7e 	bl	8004dac <HAL_GetTick>
 80058b0:	0003      	movs	r3, r0
 80058b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058b4:	2380      	movs	r3, #128	; 0x80
 80058b6:	0219      	lsls	r1, r3, #8
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	2319      	movs	r3, #25
 80058c0:	2201      	movs	r2, #1
 80058c2:	f000 f979 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 80058c6:	1e03      	subs	r3, r0, #0
 80058c8:	d001      	beq.n	80058ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0e7      	b.n	8005a9e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2241      	movs	r2, #65	; 0x41
 80058d2:	2122      	movs	r1, #34	; 0x22
 80058d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2242      	movs	r2, #66	; 0x42
 80058da:	2140      	movs	r1, #64	; 0x40
 80058dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	222c      	movs	r2, #44	; 0x2c
 80058ee:	18ba      	adds	r2, r7, r2
 80058f0:	8812      	ldrh	r2, [r2, #0]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058fa:	1dbb      	adds	r3, r7, #6
 80058fc:	881c      	ldrh	r4, [r3, #0]
 80058fe:	2308      	movs	r3, #8
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	881a      	ldrh	r2, [r3, #0]
 8005904:	230a      	movs	r3, #10
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	8819      	ldrh	r1, [r3, #0]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	0023      	movs	r3, r4
 8005916:	f000 f8cb 	bl	8005ab0 <I2C_RequestMemoryRead>
 800591a:	1e03      	subs	r3, r0, #0
 800591c:	d005      	beq.n	800592a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2240      	movs	r2, #64	; 0x40
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e0b9      	b.n	8005a9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	2bff      	cmp	r3, #255	; 0xff
 8005932:	d911      	bls.n	8005958 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	22ff      	movs	r2, #255	; 0xff
 8005938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593e:	b2da      	uxtb	r2, r3
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	045c      	lsls	r4, r3, #17
 8005944:	230a      	movs	r3, #10
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	8819      	ldrh	r1, [r3, #0]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	4b56      	ldr	r3, [pc, #344]	; (8005aa8 <HAL_I2C_Mem_Read+0x260>)
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	0023      	movs	r3, r4
 8005952:	f000 fad1 	bl	8005ef8 <I2C_TransferConfig>
 8005956:	e012      	b.n	800597e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005966:	b2da      	uxtb	r2, r3
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	049c      	lsls	r4, r3, #18
 800596c:	230a      	movs	r3, #10
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	8819      	ldrh	r1, [r3, #0]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	4b4c      	ldr	r3, [pc, #304]	; (8005aa8 <HAL_I2C_Mem_Read+0x260>)
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	0023      	movs	r3, r4
 800597a:	f000 fabd 	bl	8005ef8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800597e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	0013      	movs	r3, r2
 8005988:	2200      	movs	r2, #0
 800598a:	2104      	movs	r1, #4
 800598c:	f000 f914 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005990:	1e03      	subs	r3, r0, #0
 8005992:	d001      	beq.n	8005998 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e082      	b.n	8005a9e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d03a      	beq.n	8005a4a <HAL_I2C_Mem_Read+0x202>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d136      	bne.n	8005a4a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	0013      	movs	r3, r2
 80059e6:	2200      	movs	r2, #0
 80059e8:	2180      	movs	r1, #128	; 0x80
 80059ea:	f000 f8e5 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 80059ee:	1e03      	subs	r3, r0, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e053      	b.n	8005a9e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2bff      	cmp	r3, #255	; 0xff
 80059fe:	d911      	bls.n	8005a24 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	22ff      	movs	r2, #255	; 0xff
 8005a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	2380      	movs	r3, #128	; 0x80
 8005a0e:	045c      	lsls	r4, r3, #17
 8005a10:	230a      	movs	r3, #10
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	8819      	ldrh	r1, [r3, #0]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	0023      	movs	r3, r4
 8005a1e:	f000 fa6b 	bl	8005ef8 <I2C_TransferConfig>
 8005a22:	e012      	b.n	8005a4a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	049c      	lsls	r4, r3, #18
 8005a38:	230a      	movs	r3, #10
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	8819      	ldrh	r1, [r3, #0]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	2300      	movs	r3, #0
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	0023      	movs	r3, r4
 8005a46:	f000 fa57 	bl	8005ef8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d194      	bne.n	800597e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 f92a 	bl	8005cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a60:	1e03      	subs	r3, r0, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e01a      	b.n	8005a9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	490c      	ldr	r1, [pc, #48]	; (8005aac <HAL_I2C_Mem_Read+0x264>)
 8005a7c:	400a      	ands	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2241      	movs	r2, #65	; 0x41
 8005a84:	2120      	movs	r1, #32
 8005a86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2242      	movs	r2, #66	; 0x42
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2240      	movs	r2, #64	; 0x40
 8005a94:	2100      	movs	r1, #0
 8005a96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e000      	b.n	8005a9e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
  }
}
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b007      	add	sp, #28
 8005aa4:	bd90      	pop	{r4, r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	80002400 	.word	0x80002400
 8005aac:	fe00e800 	.word	0xfe00e800

08005ab0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ab0:	b5b0      	push	{r4, r5, r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	000c      	movs	r4, r1
 8005aba:	0010      	movs	r0, r2
 8005abc:	0019      	movs	r1, r3
 8005abe:	250a      	movs	r5, #10
 8005ac0:	197b      	adds	r3, r7, r5
 8005ac2:	1c22      	adds	r2, r4, #0
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	1c02      	adds	r2, r0, #0
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	1dbb      	adds	r3, r7, #6
 8005ad0:	1c0a      	adds	r2, r1, #0
 8005ad2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ad4:	1dbb      	adds	r3, r7, #6
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	197b      	adds	r3, r7, r5
 8005adc:	8819      	ldrh	r1, [r3, #0]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <I2C_RequestMemoryRead+0xc0>)
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f000 fa07 	bl	8005ef8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f000 f8a0 	bl	8005c36 <I2C_WaitOnTXISFlagUntilTimeout>
 8005af6:	1e03      	subs	r3, r0, #0
 8005af8:	d001      	beq.n	8005afe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e033      	b.n	8005b66 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005afe:	1dbb      	adds	r3, r7, #6
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d107      	bne.n	8005b16 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b06:	2308      	movs	r3, #8
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28
 8005b14:	e019      	b.n	8005b4a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b16:	2308      	movs	r3, #8
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2a:	6a39      	ldr	r1, [r7, #32]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f000 f881 	bl	8005c36 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b34:	1e03      	subs	r3, r0, #0
 8005b36:	d001      	beq.n	8005b3c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e014      	b.n	8005b66 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4a:	6a3a      	ldr	r2, [r7, #32]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	0013      	movs	r3, r2
 8005b54:	2200      	movs	r2, #0
 8005b56:	2140      	movs	r1, #64	; 0x40
 8005b58:	f000 f82e 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005b5c:	1e03      	subs	r3, r0, #0
 8005b5e:	d001      	beq.n	8005b64 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	0018      	movs	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	b004      	add	sp, #16
 8005b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	80002000 	.word	0x80002000

08005b74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	2202      	movs	r2, #2
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d103      	bne.n	8005b92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d007      	beq.n	8005bb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2101      	movs	r1, #1
 8005bac:	430a      	orrs	r2, r1
 8005bae:	619a      	str	r2, [r3, #24]
  }
}
 8005bb0:	46c0      	nop			; (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b002      	add	sp, #8
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	1dfb      	adds	r3, r7, #7
 8005bc6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc8:	e021      	b.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	d01e      	beq.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd0:	f7ff f8ec 	bl	8004dac <HAL_GetTick>
 8005bd4:	0002      	movs	r2, r0
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d302      	bcc.n	8005be6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d113      	bne.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	2220      	movs	r2, #32
 8005bec:	431a      	orrs	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2241      	movs	r2, #65	; 0x41
 8005bf6:	2120      	movs	r1, #32
 8005bf8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2242      	movs	r2, #66	; 0x42
 8005bfe:	2100      	movs	r1, #0
 8005c00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2240      	movs	r2, #64	; 0x40
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e00f      	b.n	8005c2e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	4013      	ands	r3, r2
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	425a      	negs	r2, r3
 8005c1e:	4153      	adcs	r3, r2
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	001a      	movs	r2, r3
 8005c24:	1dfb      	adds	r3, r7, #7
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d0ce      	beq.n	8005bca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	0018      	movs	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	b004      	add	sp, #16
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c42:	e02b      	b.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f000 f8da 	bl	8005e04 <I2C_IsAcknowledgeFailed>
 8005c50:	1e03      	subs	r3, r0, #0
 8005c52:	d001      	beq.n	8005c58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e029      	b.n	8005cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	d01e      	beq.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5e:	f7ff f8a5 	bl	8004dac <HAL_GetTick>
 8005c62:	0002      	movs	r2, r0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d113      	bne.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c78:	2220      	movs	r2, #32
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2241      	movs	r2, #65	; 0x41
 8005c84:	2120      	movs	r1, #32
 8005c86:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2242      	movs	r2, #66	; 0x42
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2240      	movs	r2, #64	; 0x40
 8005c94:	2100      	movs	r1, #0
 8005c96:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e007      	b.n	8005cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d1cc      	bne.n	8005c44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b004      	add	sp, #16
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cc0:	e028      	b.n	8005d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 f89b 	bl	8005e04 <I2C_IsAcknowledgeFailed>
 8005cce:	1e03      	subs	r3, r0, #0
 8005cd0:	d001      	beq.n	8005cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e026      	b.n	8005d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd6:	f7ff f869 	bl	8004dac <HAL_GetTick>
 8005cda:	0002      	movs	r2, r0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d113      	bne.n	8005d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2241      	movs	r2, #65	; 0x41
 8005cfc:	2120      	movs	r1, #32
 8005cfe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2242      	movs	r2, #66	; 0x42
 8005d04:	2100      	movs	r1, #0
 8005d06:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2240      	movs	r2, #64	; 0x40
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e007      	b.n	8005d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d1cf      	bne.n	8005cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b004      	add	sp, #16
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d38:	e055      	b.n	8005de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 f85f 	bl	8005e04 <I2C_IsAcknowledgeFailed>
 8005d46:	1e03      	subs	r3, r0, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e053      	b.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2220      	movs	r2, #32
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d129      	bne.n	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2204      	movs	r2, #4
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d105      	bne.n	8005d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e03f      	b.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	491d      	ldr	r1, [pc, #116]	; (8005e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2241      	movs	r2, #65	; 0x41
 8005d98:	2120      	movs	r1, #32
 8005d9a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2242      	movs	r2, #66	; 0x42
 8005da0:	2100      	movs	r1, #0
 8005da2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2240      	movs	r2, #64	; 0x40
 8005da8:	2100      	movs	r1, #0
 8005daa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e022      	b.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db0:	f7fe fffc 	bl	8004dac <HAL_GetTick>
 8005db4:	0002      	movs	r2, r0
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d302      	bcc.n	8005dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10f      	bne.n	8005de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	2220      	movs	r2, #32
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2241      	movs	r2, #65	; 0x41
 8005dd6:	2120      	movs	r1, #32
 8005dd8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2240      	movs	r2, #64	; 0x40
 8005dde:	2100      	movs	r1, #0
 8005de0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e007      	b.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	2204      	movs	r2, #4
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d1a2      	bne.n	8005d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	0018      	movs	r0, r3
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b004      	add	sp, #16
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	fe00e800 	.word	0xfe00e800

08005e04 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	2210      	movs	r2, #16
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d164      	bne.n	8005ee8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	049b      	lsls	r3, r3, #18
 8005e28:	401a      	ands	r2, r3
 8005e2a:	2380      	movs	r3, #128	; 0x80
 8005e2c:	049b      	lsls	r3, r3, #18
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d02b      	beq.n	8005e8a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2180      	movs	r1, #128	; 0x80
 8005e3e:	01c9      	lsls	r1, r1, #7
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e44:	e021      	b.n	8005e8a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	d01e      	beq.n	8005e8a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4c:	f7fe ffae 	bl	8004dac <HAL_GetTick>
 8005e50:	0002      	movs	r2, r0
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d302      	bcc.n	8005e62 <I2C_IsAcknowledgeFailed+0x5e>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d113      	bne.n	8005e8a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	2220      	movs	r2, #32
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2241      	movs	r2, #65	; 0x41
 8005e72:	2120      	movs	r1, #32
 8005e74:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2242      	movs	r2, #66	; 0x42
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2240      	movs	r2, #64	; 0x40
 8005e82:	2100      	movs	r1, #0
 8005e84:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e02f      	b.n	8005eea <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2220      	movs	r2, #32
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d1d6      	bne.n	8005e46 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2210      	movs	r2, #16
 8005e9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f7ff fe62 	bl	8005b74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	490e      	ldr	r1, [pc, #56]	; (8005ef4 <I2C_IsAcknowledgeFailed+0xf0>)
 8005ebc:	400a      	ands	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2241      	movs	r2, #65	; 0x41
 8005ed0:	2120      	movs	r1, #32
 8005ed2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2242      	movs	r2, #66	; 0x42
 8005ed8:	2100      	movs	r1, #0
 8005eda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2240      	movs	r2, #64	; 0x40
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	0018      	movs	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b004      	add	sp, #16
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	fe00e800 	.word	0xfe00e800

08005ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	0008      	movs	r0, r1
 8005f02:	0011      	movs	r1, r2
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	240a      	movs	r4, #10
 8005f08:	193b      	adds	r3, r7, r4
 8005f0a:	1c02      	adds	r2, r0, #0
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	2009      	movs	r0, #9
 8005f10:	183b      	adds	r3, r7, r0
 8005f12:	1c0a      	adds	r2, r1, #0
 8005f14:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	0d51      	lsrs	r1, r2, #21
 8005f20:	2280      	movs	r2, #128	; 0x80
 8005f22:	00d2      	lsls	r2, r2, #3
 8005f24:	400a      	ands	r2, r1
 8005f26:	490e      	ldr	r1, [pc, #56]	; (8005f60 <I2C_TransferConfig+0x68>)
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	43d2      	mvns	r2, r2
 8005f2c:	401a      	ands	r2, r3
 8005f2e:	0011      	movs	r1, r2
 8005f30:	193b      	adds	r3, r7, r4
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	059b      	lsls	r3, r3, #22
 8005f36:	0d9a      	lsrs	r2, r3, #22
 8005f38:	183b      	adds	r3, r7, r0
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	0418      	lsls	r0, r3, #16
 8005f3e:	23ff      	movs	r3, #255	; 0xff
 8005f40:	041b      	lsls	r3, r3, #16
 8005f42:	4003      	ands	r3, r0
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b005      	add	sp, #20
 8005f5c:	bd90      	pop	{r4, r7, pc}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	03ff63ff 	.word	0x03ff63ff

08005f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2241      	movs	r2, #65	; 0x41
 8005f72:	5c9b      	ldrb	r3, [r3, r2]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d138      	bne.n	8005fec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2240      	movs	r2, #64	; 0x40
 8005f7e:	5c9b      	ldrb	r3, [r3, r2]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e032      	b.n	8005fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2240      	movs	r2, #64	; 0x40
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2241      	movs	r2, #65	; 0x41
 8005f94:	2124      	movs	r1, #36	; 0x24
 8005f96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	438a      	bics	r2, r1
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4911      	ldr	r1, [pc, #68]	; (8005ff8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005fb4:	400a      	ands	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2241      	movs	r2, #65	; 0x41
 8005fdc:	2120      	movs	r1, #32
 8005fde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2240      	movs	r2, #64	; 0x40
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	0018      	movs	r0, r3
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	b002      	add	sp, #8
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	ffffefff 	.word	0xffffefff

08005ffc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2241      	movs	r2, #65	; 0x41
 800600a:	5c9b      	ldrb	r3, [r3, r2]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b20      	cmp	r3, #32
 8006010:	d139      	bne.n	8006086 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2240      	movs	r2, #64	; 0x40
 8006016:	5c9b      	ldrb	r3, [r3, r2]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800601c:	2302      	movs	r3, #2
 800601e:	e033      	b.n	8006088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2240      	movs	r2, #64	; 0x40
 8006024:	2101      	movs	r1, #1
 8006026:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2241      	movs	r2, #65	; 0x41
 800602c:	2124      	movs	r1, #36	; 0x24
 800602e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2101      	movs	r1, #1
 800603c:	438a      	bics	r2, r1
 800603e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a11      	ldr	r2, [pc, #68]	; (8006090 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800604c:	4013      	ands	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	430a      	orrs	r2, r1
 8006070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2241      	movs	r2, #65	; 0x41
 8006076:	2120      	movs	r1, #32
 8006078:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2240      	movs	r2, #64	; 0x40
 800607e:	2100      	movs	r1, #0
 8006080:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e000      	b.n	8006088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
  }
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b004      	add	sp, #16
 800608e:	bd80      	pop	{r7, pc}
 8006090:	fffff0ff 	.word	0xfffff0ff

08006094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006094:	b5b0      	push	{r4, r5, r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d102      	bne.n	80060a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f000 fbbf 	bl	8006826 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060a8:	4bc9      	ldr	r3, [pc, #804]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	220c      	movs	r2, #12
 80060ae:	4013      	ands	r3, r2
 80060b0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060b2:	4bc7      	ldr	r3, [pc, #796]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	2380      	movs	r3, #128	; 0x80
 80060b8:	025b      	lsls	r3, r3, #9
 80060ba:	4013      	ands	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2201      	movs	r2, #1
 80060c4:	4013      	ands	r3, r2
 80060c6:	d100      	bne.n	80060ca <HAL_RCC_OscConfig+0x36>
 80060c8:	e07e      	b.n	80061c8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d007      	beq.n	80060e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b0c      	cmp	r3, #12
 80060d4:	d112      	bne.n	80060fc <HAL_RCC_OscConfig+0x68>
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	2380      	movs	r3, #128	; 0x80
 80060da:	025b      	lsls	r3, r3, #9
 80060dc:	429a      	cmp	r2, r3
 80060de:	d10d      	bne.n	80060fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e0:	4bbb      	ldr	r3, [pc, #748]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	029b      	lsls	r3, r3, #10
 80060e8:	4013      	ands	r3, r2
 80060ea:	d100      	bne.n	80060ee <HAL_RCC_OscConfig+0x5a>
 80060ec:	e06b      	b.n	80061c6 <HAL_RCC_OscConfig+0x132>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d167      	bne.n	80061c6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f000 fb95 	bl	8006826 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	025b      	lsls	r3, r3, #9
 8006104:	429a      	cmp	r2, r3
 8006106:	d107      	bne.n	8006118 <HAL_RCC_OscConfig+0x84>
 8006108:	4bb1      	ldr	r3, [pc, #708]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	4bb0      	ldr	r3, [pc, #704]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800610e:	2180      	movs	r1, #128	; 0x80
 8006110:	0249      	lsls	r1, r1, #9
 8006112:	430a      	orrs	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e027      	b.n	8006168 <HAL_RCC_OscConfig+0xd4>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	23a0      	movs	r3, #160	; 0xa0
 800611e:	02db      	lsls	r3, r3, #11
 8006120:	429a      	cmp	r2, r3
 8006122:	d10e      	bne.n	8006142 <HAL_RCC_OscConfig+0xae>
 8006124:	4baa      	ldr	r3, [pc, #680]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4ba9      	ldr	r3, [pc, #676]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800612a:	2180      	movs	r1, #128	; 0x80
 800612c:	02c9      	lsls	r1, r1, #11
 800612e:	430a      	orrs	r2, r1
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	4ba7      	ldr	r3, [pc, #668]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4ba6      	ldr	r3, [pc, #664]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006138:	2180      	movs	r1, #128	; 0x80
 800613a:	0249      	lsls	r1, r1, #9
 800613c:	430a      	orrs	r2, r1
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	e012      	b.n	8006168 <HAL_RCC_OscConfig+0xd4>
 8006142:	4ba3      	ldr	r3, [pc, #652]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4ba2      	ldr	r3, [pc, #648]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006148:	49a2      	ldr	r1, [pc, #648]	; (80063d4 <HAL_RCC_OscConfig+0x340>)
 800614a:	400a      	ands	r2, r1
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	4ba0      	ldr	r3, [pc, #640]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	025b      	lsls	r3, r3, #9
 8006156:	4013      	ands	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4b9c      	ldr	r3, [pc, #624]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4b9b      	ldr	r3, [pc, #620]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006162:	499d      	ldr	r1, [pc, #628]	; (80063d8 <HAL_RCC_OscConfig+0x344>)
 8006164:	400a      	ands	r2, r1
 8006166:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d015      	beq.n	800619c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f7fe fe1c 	bl	8004dac <HAL_GetTick>
 8006174:	0003      	movs	r3, r0
 8006176:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006178:	e009      	b.n	800618e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800617a:	f7fe fe17 	bl	8004dac <HAL_GetTick>
 800617e:	0002      	movs	r2, r0
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b64      	cmp	r3, #100	; 0x64
 8006186:	d902      	bls.n	800618e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	f000 fb4c 	bl	8006826 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800618e:	4b90      	ldr	r3, [pc, #576]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	029b      	lsls	r3, r3, #10
 8006196:	4013      	ands	r3, r2
 8006198:	d0ef      	beq.n	800617a <HAL_RCC_OscConfig+0xe6>
 800619a:	e015      	b.n	80061c8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619c:	f7fe fe06 	bl	8004dac <HAL_GetTick>
 80061a0:	0003      	movs	r3, r0
 80061a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061a6:	f7fe fe01 	bl	8004dac <HAL_GetTick>
 80061aa:	0002      	movs	r2, r0
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b64      	cmp	r3, #100	; 0x64
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e336      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061b8:	4b85      	ldr	r3, [pc, #532]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	2380      	movs	r3, #128	; 0x80
 80061be:	029b      	lsls	r3, r3, #10
 80061c0:	4013      	ands	r3, r2
 80061c2:	d1f0      	bne.n	80061a6 <HAL_RCC_OscConfig+0x112>
 80061c4:	e000      	b.n	80061c8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2202      	movs	r2, #2
 80061ce:	4013      	ands	r3, r2
 80061d0:	d100      	bne.n	80061d4 <HAL_RCC_OscConfig+0x140>
 80061d2:	e099      	b.n	8006308 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	2220      	movs	r2, #32
 80061de:	4013      	ands	r3, r2
 80061e0:	d009      	beq.n	80061f6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80061e2:	4b7b      	ldr	r3, [pc, #492]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b7a      	ldr	r3, [pc, #488]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80061e8:	2120      	movs	r1, #32
 80061ea:	430a      	orrs	r2, r1
 80061ec:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	2220      	movs	r2, #32
 80061f2:	4393      	bics	r3, r2
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d005      	beq.n	8006208 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b0c      	cmp	r3, #12
 8006200:	d13e      	bne.n	8006280 <HAL_RCC_OscConfig+0x1ec>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d13b      	bne.n	8006280 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006208:	4b71      	ldr	r3, [pc, #452]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2204      	movs	r2, #4
 800620e:	4013      	ands	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_RCC_OscConfig+0x188>
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e304      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800621c:	4b6c      	ldr	r3, [pc, #432]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a6e      	ldr	r2, [pc, #440]	; (80063dc <HAL_RCC_OscConfig+0x348>)
 8006222:	4013      	ands	r3, r2
 8006224:	0019      	movs	r1, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	4b68      	ldr	r3, [pc, #416]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006232:	4b67      	ldr	r3, [pc, #412]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2209      	movs	r2, #9
 8006238:	4393      	bics	r3, r2
 800623a:	0019      	movs	r1, r3
 800623c:	4b64      	ldr	r3, [pc, #400]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006240:	430a      	orrs	r2, r1
 8006242:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006244:	f000 fc42 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8006248:	0001      	movs	r1, r0
 800624a:	4b61      	ldr	r3, [pc, #388]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	220f      	movs	r2, #15
 8006252:	4013      	ands	r3, r2
 8006254:	4a62      	ldr	r2, [pc, #392]	; (80063e0 <HAL_RCC_OscConfig+0x34c>)
 8006256:	5cd3      	ldrb	r3, [r2, r3]
 8006258:	000a      	movs	r2, r1
 800625a:	40da      	lsrs	r2, r3
 800625c:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <HAL_RCC_OscConfig+0x350>)
 800625e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006260:	4b61      	ldr	r3, [pc, #388]	; (80063e8 <HAL_RCC_OscConfig+0x354>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2513      	movs	r5, #19
 8006266:	197c      	adds	r4, r7, r5
 8006268:	0018      	movs	r0, r3
 800626a:	f7fe fd59 	bl	8004d20 <HAL_InitTick>
 800626e:	0003      	movs	r3, r0
 8006270:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006272:	197b      	adds	r3, r7, r5
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d046      	beq.n	8006308 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800627a:	197b      	adds	r3, r7, r5
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	e2d2      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d027      	beq.n	80062d6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006286:	4b52      	ldr	r3, [pc, #328]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2209      	movs	r2, #9
 800628c:	4393      	bics	r3, r2
 800628e:	0019      	movs	r1, r3
 8006290:	4b4f      	ldr	r3, [pc, #316]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006294:	430a      	orrs	r2, r1
 8006296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006298:	f7fe fd88 	bl	8004dac <HAL_GetTick>
 800629c:	0003      	movs	r3, r0
 800629e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062a0:	e008      	b.n	80062b4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a2:	f7fe fd83 	bl	8004dac <HAL_GetTick>
 80062a6:	0002      	movs	r2, r0
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e2b8      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062b4:	4b46      	ldr	r3, [pc, #280]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2204      	movs	r2, #4
 80062ba:	4013      	ands	r3, r2
 80062bc:	d0f1      	beq.n	80062a2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062be:	4b44      	ldr	r3, [pc, #272]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4a46      	ldr	r2, [pc, #280]	; (80063dc <HAL_RCC_OscConfig+0x348>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	0019      	movs	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	021a      	lsls	r2, r3, #8
 80062ce:	4b40      	ldr	r3, [pc, #256]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	e018      	b.n	8006308 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062d6:	4b3e      	ldr	r3, [pc, #248]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4b3d      	ldr	r3, [pc, #244]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80062dc:	2101      	movs	r1, #1
 80062de:	438a      	bics	r2, r1
 80062e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e2:	f7fe fd63 	bl	8004dac <HAL_GetTick>
 80062e6:	0003      	movs	r3, r0
 80062e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062ec:	f7fe fd5e 	bl	8004dac <HAL_GetTick>
 80062f0:	0002      	movs	r2, r0
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e293      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062fe:	4b34      	ldr	r3, [pc, #208]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2204      	movs	r2, #4
 8006304:	4013      	ands	r3, r2
 8006306:	d1f1      	bne.n	80062ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2210      	movs	r2, #16
 800630e:	4013      	ands	r3, r2
 8006310:	d100      	bne.n	8006314 <HAL_RCC_OscConfig+0x280>
 8006312:	e0a2      	b.n	800645a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d140      	bne.n	800639c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800631a:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4013      	ands	r3, r2
 8006324:	d005      	beq.n	8006332 <HAL_RCC_OscConfig+0x29e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e279      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006332:	4b27      	ldr	r3, [pc, #156]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	4a2d      	ldr	r2, [pc, #180]	; (80063ec <HAL_RCC_OscConfig+0x358>)
 8006338:	4013      	ands	r3, r2
 800633a:	0019      	movs	r1, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006340:	4b23      	ldr	r3, [pc, #140]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006346:	4b22      	ldr	r3, [pc, #136]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	0a19      	lsrs	r1, r3, #8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	061a      	lsls	r2, r3, #24
 8006354:	4b1e      	ldr	r3, [pc, #120]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	0b5b      	lsrs	r3, r3, #13
 8006360:	3301      	adds	r3, #1
 8006362:	2280      	movs	r2, #128	; 0x80
 8006364:	0212      	lsls	r2, r2, #8
 8006366:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006368:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	091b      	lsrs	r3, r3, #4
 800636e:	210f      	movs	r1, #15
 8006370:	400b      	ands	r3, r1
 8006372:	491b      	ldr	r1, [pc, #108]	; (80063e0 <HAL_RCC_OscConfig+0x34c>)
 8006374:	5ccb      	ldrb	r3, [r1, r3]
 8006376:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006378:	4b1a      	ldr	r3, [pc, #104]	; (80063e4 <HAL_RCC_OscConfig+0x350>)
 800637a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800637c:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <HAL_RCC_OscConfig+0x354>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2513      	movs	r5, #19
 8006382:	197c      	adds	r4, r7, r5
 8006384:	0018      	movs	r0, r3
 8006386:	f7fe fccb 	bl	8004d20 <HAL_InitTick>
 800638a:	0003      	movs	r3, r0
 800638c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800638e:	197b      	adds	r3, r7, r5
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d061      	beq.n	800645a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8006396:	197b      	adds	r3, r7, r5
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	e244      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d040      	beq.n	8006426 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 80063aa:	2180      	movs	r1, #128	; 0x80
 80063ac:	0049      	lsls	r1, r1, #1
 80063ae:	430a      	orrs	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b2:	f7fe fcfb 	bl	8004dac <HAL_GetTick>
 80063b6:	0003      	movs	r3, r0
 80063b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80063ba:	e019      	b.n	80063f0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063bc:	f7fe fcf6 	bl	8004dac <HAL_GetTick>
 80063c0:	0002      	movs	r2, r0
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d912      	bls.n	80063f0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e22b      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
 80063ce:	46c0      	nop			; (mov r8, r8)
 80063d0:	40021000 	.word	0x40021000
 80063d4:	fffeffff 	.word	0xfffeffff
 80063d8:	fffbffff 	.word	0xfffbffff
 80063dc:	ffffe0ff 	.word	0xffffe0ff
 80063e0:	0800b988 	.word	0x0800b988
 80063e4:	20000004 	.word	0x20000004
 80063e8:	20000008 	.word	0x20000008
 80063ec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80063f0:	4bca      	ldr	r3, [pc, #808]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4013      	ands	r3, r2
 80063fa:	d0df      	beq.n	80063bc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063fc:	4bc7      	ldr	r3, [pc, #796]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4ac7      	ldr	r2, [pc, #796]	; (8006720 <HAL_RCC_OscConfig+0x68c>)
 8006402:	4013      	ands	r3, r2
 8006404:	0019      	movs	r1, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800640a:	4bc4      	ldr	r3, [pc, #784]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800640c:	430a      	orrs	r2, r1
 800640e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006410:	4bc2      	ldr	r3, [pc, #776]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	021b      	lsls	r3, r3, #8
 8006416:	0a19      	lsrs	r1, r3, #8
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	061a      	lsls	r2, r3, #24
 800641e:	4bbf      	ldr	r3, [pc, #764]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
 8006424:	e019      	b.n	800645a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006426:	4bbd      	ldr	r3, [pc, #756]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4bbc      	ldr	r3, [pc, #752]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800642c:	49bd      	ldr	r1, [pc, #756]	; (8006724 <HAL_RCC_OscConfig+0x690>)
 800642e:	400a      	ands	r2, r1
 8006430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006432:	f7fe fcbb 	bl	8004dac <HAL_GetTick>
 8006436:	0003      	movs	r3, r0
 8006438:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800643c:	f7fe fcb6 	bl	8004dac <HAL_GetTick>
 8006440:	0002      	movs	r2, r0
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e1eb      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800644e:	4bb3      	ldr	r3, [pc, #716]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	2380      	movs	r3, #128	; 0x80
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4013      	ands	r3, r2
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2208      	movs	r2, #8
 8006460:	4013      	ands	r3, r2
 8006462:	d036      	beq.n	80064d2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d019      	beq.n	80064a0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800646c:	4bab      	ldr	r3, [pc, #684]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800646e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006470:	4baa      	ldr	r3, [pc, #680]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006472:	2101      	movs	r1, #1
 8006474:	430a      	orrs	r2, r1
 8006476:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006478:	f7fe fc98 	bl	8004dac <HAL_GetTick>
 800647c:	0003      	movs	r3, r0
 800647e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006482:	f7fe fc93 	bl	8004dac <HAL_GetTick>
 8006486:	0002      	movs	r2, r0
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e1c8      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006494:	4ba1      	ldr	r3, [pc, #644]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006498:	2202      	movs	r2, #2
 800649a:	4013      	ands	r3, r2
 800649c:	d0f1      	beq.n	8006482 <HAL_RCC_OscConfig+0x3ee>
 800649e:	e018      	b.n	80064d2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064a0:	4b9e      	ldr	r3, [pc, #632]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80064a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064a4:	4b9d      	ldr	r3, [pc, #628]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80064a6:	2101      	movs	r1, #1
 80064a8:	438a      	bics	r2, r1
 80064aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ac:	f7fe fc7e 	bl	8004dac <HAL_GetTick>
 80064b0:	0003      	movs	r3, r0
 80064b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064b6:	f7fe fc79 	bl	8004dac <HAL_GetTick>
 80064ba:	0002      	movs	r2, r0
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e1ae      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064c8:	4b94      	ldr	r3, [pc, #592]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	2202      	movs	r2, #2
 80064ce:	4013      	ands	r3, r2
 80064d0:	d1f1      	bne.n	80064b6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2204      	movs	r2, #4
 80064d8:	4013      	ands	r3, r2
 80064da:	d100      	bne.n	80064de <HAL_RCC_OscConfig+0x44a>
 80064dc:	e0ae      	b.n	800663c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064de:	2023      	movs	r0, #35	; 0x23
 80064e0:	183b      	adds	r3, r7, r0
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064e6:	4b8d      	ldr	r3, [pc, #564]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80064e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	055b      	lsls	r3, r3, #21
 80064ee:	4013      	ands	r3, r2
 80064f0:	d109      	bne.n	8006506 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f2:	4b8a      	ldr	r3, [pc, #552]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80064f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064f6:	4b89      	ldr	r3, [pc, #548]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80064f8:	2180      	movs	r1, #128	; 0x80
 80064fa:	0549      	lsls	r1, r1, #21
 80064fc:	430a      	orrs	r2, r1
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006500:	183b      	adds	r3, r7, r0
 8006502:	2201      	movs	r2, #1
 8006504:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006506:	4b88      	ldr	r3, [pc, #544]	; (8006728 <HAL_RCC_OscConfig+0x694>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	4013      	ands	r3, r2
 8006510:	d11a      	bne.n	8006548 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006512:	4b85      	ldr	r3, [pc, #532]	; (8006728 <HAL_RCC_OscConfig+0x694>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b84      	ldr	r3, [pc, #528]	; (8006728 <HAL_RCC_OscConfig+0x694>)
 8006518:	2180      	movs	r1, #128	; 0x80
 800651a:	0049      	lsls	r1, r1, #1
 800651c:	430a      	orrs	r2, r1
 800651e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006520:	f7fe fc44 	bl	8004dac <HAL_GetTick>
 8006524:	0003      	movs	r3, r0
 8006526:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652a:	f7fe fc3f 	bl	8004dac <HAL_GetTick>
 800652e:	0002      	movs	r2, r0
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b64      	cmp	r3, #100	; 0x64
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e174      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800653c:	4b7a      	ldr	r3, [pc, #488]	; (8006728 <HAL_RCC_OscConfig+0x694>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	4013      	ands	r3, r2
 8006546:	d0f0      	beq.n	800652a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	2380      	movs	r3, #128	; 0x80
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	429a      	cmp	r2, r3
 8006552:	d107      	bne.n	8006564 <HAL_RCC_OscConfig+0x4d0>
 8006554:	4b71      	ldr	r3, [pc, #452]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006558:	4b70      	ldr	r3, [pc, #448]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	0049      	lsls	r1, r1, #1
 800655e:	430a      	orrs	r2, r1
 8006560:	651a      	str	r2, [r3, #80]	; 0x50
 8006562:	e031      	b.n	80065c8 <HAL_RCC_OscConfig+0x534>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10c      	bne.n	8006586 <HAL_RCC_OscConfig+0x4f2>
 800656c:	4b6b      	ldr	r3, [pc, #428]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800656e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006570:	4b6a      	ldr	r3, [pc, #424]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006572:	496c      	ldr	r1, [pc, #432]	; (8006724 <HAL_RCC_OscConfig+0x690>)
 8006574:	400a      	ands	r2, r1
 8006576:	651a      	str	r2, [r3, #80]	; 0x50
 8006578:	4b68      	ldr	r3, [pc, #416]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800657a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800657c:	4b67      	ldr	r3, [pc, #412]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800657e:	496b      	ldr	r1, [pc, #428]	; (800672c <HAL_RCC_OscConfig+0x698>)
 8006580:	400a      	ands	r2, r1
 8006582:	651a      	str	r2, [r3, #80]	; 0x50
 8006584:	e020      	b.n	80065c8 <HAL_RCC_OscConfig+0x534>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	23a0      	movs	r3, #160	; 0xa0
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	429a      	cmp	r2, r3
 8006590:	d10e      	bne.n	80065b0 <HAL_RCC_OscConfig+0x51c>
 8006592:	4b62      	ldr	r3, [pc, #392]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006596:	4b61      	ldr	r3, [pc, #388]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006598:	2180      	movs	r1, #128	; 0x80
 800659a:	00c9      	lsls	r1, r1, #3
 800659c:	430a      	orrs	r2, r1
 800659e:	651a      	str	r2, [r3, #80]	; 0x50
 80065a0:	4b5e      	ldr	r3, [pc, #376]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80065a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065a4:	4b5d      	ldr	r3, [pc, #372]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80065a6:	2180      	movs	r1, #128	; 0x80
 80065a8:	0049      	lsls	r1, r1, #1
 80065aa:	430a      	orrs	r2, r1
 80065ac:	651a      	str	r2, [r3, #80]	; 0x50
 80065ae:	e00b      	b.n	80065c8 <HAL_RCC_OscConfig+0x534>
 80065b0:	4b5a      	ldr	r3, [pc, #360]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80065b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065b4:	4b59      	ldr	r3, [pc, #356]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80065b6:	495b      	ldr	r1, [pc, #364]	; (8006724 <HAL_RCC_OscConfig+0x690>)
 80065b8:	400a      	ands	r2, r1
 80065ba:	651a      	str	r2, [r3, #80]	; 0x50
 80065bc:	4b57      	ldr	r3, [pc, #348]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80065be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065c0:	4b56      	ldr	r3, [pc, #344]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80065c2:	495a      	ldr	r1, [pc, #360]	; (800672c <HAL_RCC_OscConfig+0x698>)
 80065c4:	400a      	ands	r2, r1
 80065c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d015      	beq.n	80065fc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d0:	f7fe fbec 	bl	8004dac <HAL_GetTick>
 80065d4:	0003      	movs	r3, r0
 80065d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065d8:	e009      	b.n	80065ee <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065da:	f7fe fbe7 	bl	8004dac <HAL_GetTick>
 80065de:	0002      	movs	r2, r0
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	4a52      	ldr	r2, [pc, #328]	; (8006730 <HAL_RCC_OscConfig+0x69c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e11b      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065ee:	4b4b      	ldr	r3, [pc, #300]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80065f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4013      	ands	r3, r2
 80065f8:	d0ef      	beq.n	80065da <HAL_RCC_OscConfig+0x546>
 80065fa:	e014      	b.n	8006626 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065fc:	f7fe fbd6 	bl	8004dac <HAL_GetTick>
 8006600:	0003      	movs	r3, r0
 8006602:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006604:	e009      	b.n	800661a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006606:	f7fe fbd1 	bl	8004dac <HAL_GetTick>
 800660a:	0002      	movs	r2, r0
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	4a47      	ldr	r2, [pc, #284]	; (8006730 <HAL_RCC_OscConfig+0x69c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e105      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800661a:	4b40      	ldr	r3, [pc, #256]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800661c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4013      	ands	r3, r2
 8006624:	d1ef      	bne.n	8006606 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006626:	2323      	movs	r3, #35	; 0x23
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d105      	bne.n	800663c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006630:	4b3a      	ldr	r3, [pc, #232]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006634:	4b39      	ldr	r3, [pc, #228]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006636:	493f      	ldr	r1, [pc, #252]	; (8006734 <HAL_RCC_OscConfig+0x6a0>)
 8006638:	400a      	ands	r2, r1
 800663a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2220      	movs	r2, #32
 8006642:	4013      	ands	r3, r2
 8006644:	d049      	beq.n	80066da <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d026      	beq.n	800669c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800664e:	4b33      	ldr	r3, [pc, #204]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	4b32      	ldr	r3, [pc, #200]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006654:	2101      	movs	r1, #1
 8006656:	430a      	orrs	r2, r1
 8006658:	609a      	str	r2, [r3, #8]
 800665a:	4b30      	ldr	r3, [pc, #192]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800665c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800665e:	4b2f      	ldr	r3, [pc, #188]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006660:	2101      	movs	r1, #1
 8006662:	430a      	orrs	r2, r1
 8006664:	635a      	str	r2, [r3, #52]	; 0x34
 8006666:	4b34      	ldr	r3, [pc, #208]	; (8006738 <HAL_RCC_OscConfig+0x6a4>)
 8006668:	6a1a      	ldr	r2, [r3, #32]
 800666a:	4b33      	ldr	r3, [pc, #204]	; (8006738 <HAL_RCC_OscConfig+0x6a4>)
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	0189      	lsls	r1, r1, #6
 8006670:	430a      	orrs	r2, r1
 8006672:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006674:	f7fe fb9a 	bl	8004dac <HAL_GetTick>
 8006678:	0003      	movs	r3, r0
 800667a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800667e:	f7fe fb95 	bl	8004dac <HAL_GetTick>
 8006682:	0002      	movs	r2, r0
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e0ca      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006690:	4b22      	ldr	r3, [pc, #136]	; (800671c <HAL_RCC_OscConfig+0x688>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2202      	movs	r2, #2
 8006696:	4013      	ands	r3, r2
 8006698:	d0f1      	beq.n	800667e <HAL_RCC_OscConfig+0x5ea>
 800669a:	e01e      	b.n	80066da <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800669c:	4b1f      	ldr	r3, [pc, #124]	; (800671c <HAL_RCC_OscConfig+0x688>)
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	4b1e      	ldr	r3, [pc, #120]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80066a2:	2101      	movs	r1, #1
 80066a4:	438a      	bics	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
 80066a8:	4b23      	ldr	r3, [pc, #140]	; (8006738 <HAL_RCC_OscConfig+0x6a4>)
 80066aa:	6a1a      	ldr	r2, [r3, #32]
 80066ac:	4b22      	ldr	r3, [pc, #136]	; (8006738 <HAL_RCC_OscConfig+0x6a4>)
 80066ae:	4923      	ldr	r1, [pc, #140]	; (800673c <HAL_RCC_OscConfig+0x6a8>)
 80066b0:	400a      	ands	r2, r1
 80066b2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fe fb7a 	bl	8004dac <HAL_GetTick>
 80066b8:	0003      	movs	r3, r0
 80066ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066be:	f7fe fb75 	bl	8004dac <HAL_GetTick>
 80066c2:	0002      	movs	r2, r0
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0aa      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066d0:	4b12      	ldr	r3, [pc, #72]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2202      	movs	r2, #2
 80066d6:	4013      	ands	r3, r2
 80066d8:	d1f1      	bne.n	80066be <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d100      	bne.n	80066e4 <HAL_RCC_OscConfig+0x650>
 80066e2:	e09f      	b.n	8006824 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2b0c      	cmp	r3, #12
 80066e8:	d100      	bne.n	80066ec <HAL_RCC_OscConfig+0x658>
 80066ea:	e078      	b.n	80067de <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d159      	bne.n	80067a8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b08      	ldr	r3, [pc, #32]	; (800671c <HAL_RCC_OscConfig+0x688>)
 80066fa:	4911      	ldr	r1, [pc, #68]	; (8006740 <HAL_RCC_OscConfig+0x6ac>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006700:	f7fe fb54 	bl	8004dac <HAL_GetTick>
 8006704:	0003      	movs	r3, r0
 8006706:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006708:	e01c      	b.n	8006744 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800670a:	f7fe fb4f 	bl	8004dac <HAL_GetTick>
 800670e:	0002      	movs	r2, r0
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d915      	bls.n	8006744 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e084      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
 800671c:	40021000 	.word	0x40021000
 8006720:	ffff1fff 	.word	0xffff1fff
 8006724:	fffffeff 	.word	0xfffffeff
 8006728:	40007000 	.word	0x40007000
 800672c:	fffffbff 	.word	0xfffffbff
 8006730:	00001388 	.word	0x00001388
 8006734:	efffffff 	.word	0xefffffff
 8006738:	40010000 	.word	0x40010000
 800673c:	ffffdfff 	.word	0xffffdfff
 8006740:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006744:	4b3a      	ldr	r3, [pc, #232]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	049b      	lsls	r3, r3, #18
 800674c:	4013      	ands	r3, r2
 800674e:	d1dc      	bne.n	800670a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006750:	4b37      	ldr	r3, [pc, #220]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	4a37      	ldr	r2, [pc, #220]	; (8006834 <HAL_RCC_OscConfig+0x7a0>)
 8006756:	4013      	ands	r3, r2
 8006758:	0019      	movs	r1, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	431a      	orrs	r2, r3
 800676a:	4b31      	ldr	r3, [pc, #196]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 800676c:	430a      	orrs	r2, r1
 800676e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006770:	4b2f      	ldr	r3, [pc, #188]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	4b2e      	ldr	r3, [pc, #184]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 8006776:	2180      	movs	r1, #128	; 0x80
 8006778:	0449      	lsls	r1, r1, #17
 800677a:	430a      	orrs	r2, r1
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fe fb15 	bl	8004dac <HAL_GetTick>
 8006782:	0003      	movs	r3, r0
 8006784:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006788:	f7fe fb10 	bl	8004dac <HAL_GetTick>
 800678c:	0002      	movs	r2, r0
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e045      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800679a:	4b25      	ldr	r3, [pc, #148]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	049b      	lsls	r3, r3, #18
 80067a2:	4013      	ands	r3, r2
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0x6f4>
 80067a6:	e03d      	b.n	8006824 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a8:	4b21      	ldr	r3, [pc, #132]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b20      	ldr	r3, [pc, #128]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 80067ae:	4922      	ldr	r1, [pc, #136]	; (8006838 <HAL_RCC_OscConfig+0x7a4>)
 80067b0:	400a      	ands	r2, r1
 80067b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b4:	f7fe fafa 	bl	8004dac <HAL_GetTick>
 80067b8:	0003      	movs	r3, r0
 80067ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067be:	f7fe faf5 	bl	8004dac <HAL_GetTick>
 80067c2:	0002      	movs	r2, r0
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e02a      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80067d0:	4b17      	ldr	r3, [pc, #92]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	2380      	movs	r3, #128	; 0x80
 80067d6:	049b      	lsls	r3, r3, #18
 80067d8:	4013      	ands	r3, r2
 80067da:	d1f0      	bne.n	80067be <HAL_RCC_OscConfig+0x72a>
 80067dc:	e022      	b.n	8006824 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e01d      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067ea:	4b11      	ldr	r3, [pc, #68]	; (8006830 <HAL_RCC_OscConfig+0x79c>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	2380      	movs	r3, #128	; 0x80
 80067f4:	025b      	lsls	r3, r3, #9
 80067f6:	401a      	ands	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d10f      	bne.n	8006820 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	23f0      	movs	r3, #240	; 0xf0
 8006804:	039b      	lsls	r3, r3, #14
 8006806:	401a      	ands	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d107      	bne.n	8006820 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	23c0      	movs	r3, #192	; 0xc0
 8006814:	041b      	lsls	r3, r3, #16
 8006816:	401a      	ands	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	0018      	movs	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	b00a      	add	sp, #40	; 0x28
 800682c:	bdb0      	pop	{r4, r5, r7, pc}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	40021000 	.word	0x40021000
 8006834:	ff02ffff 	.word	0xff02ffff
 8006838:	feffffff 	.word	0xfeffffff

0800683c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800683c:	b5b0      	push	{r4, r5, r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e128      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006850:	4b96      	ldr	r3, [pc, #600]	; (8006aac <HAL_RCC_ClockConfig+0x270>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2201      	movs	r2, #1
 8006856:	4013      	ands	r3, r2
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d91e      	bls.n	800689c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b93      	ldr	r3, [pc, #588]	; (8006aac <HAL_RCC_ClockConfig+0x270>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2201      	movs	r2, #1
 8006864:	4393      	bics	r3, r2
 8006866:	0019      	movs	r1, r3
 8006868:	4b90      	ldr	r3, [pc, #576]	; (8006aac <HAL_RCC_ClockConfig+0x270>)
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006870:	f7fe fa9c 	bl	8004dac <HAL_GetTick>
 8006874:	0003      	movs	r3, r0
 8006876:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006878:	e009      	b.n	800688e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800687a:	f7fe fa97 	bl	8004dac <HAL_GetTick>
 800687e:	0002      	movs	r2, r0
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	4a8a      	ldr	r2, [pc, #552]	; (8006ab0 <HAL_RCC_ClockConfig+0x274>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d901      	bls.n	800688e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e109      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b87      	ldr	r3, [pc, #540]	; (8006aac <HAL_RCC_ClockConfig+0x270>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2201      	movs	r2, #1
 8006894:	4013      	ands	r3, r2
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d1ee      	bne.n	800687a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2202      	movs	r2, #2
 80068a2:	4013      	ands	r3, r2
 80068a4:	d009      	beq.n	80068ba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068a6:	4b83      	ldr	r3, [pc, #524]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	22f0      	movs	r2, #240	; 0xf0
 80068ac:	4393      	bics	r3, r2
 80068ae:	0019      	movs	r1, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	4b7f      	ldr	r3, [pc, #508]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 80068b6:	430a      	orrs	r2, r1
 80068b8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2201      	movs	r2, #1
 80068c0:	4013      	ands	r3, r2
 80068c2:	d100      	bne.n	80068c6 <HAL_RCC_ClockConfig+0x8a>
 80068c4:	e089      	b.n	80069da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d107      	bne.n	80068de <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068ce:	4b79      	ldr	r3, [pc, #484]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	2380      	movs	r3, #128	; 0x80
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	4013      	ands	r3, r2
 80068d8:	d120      	bne.n	800691c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e0e1      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d107      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068e6:	4b73      	ldr	r3, [pc, #460]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	2380      	movs	r3, #128	; 0x80
 80068ec:	049b      	lsls	r3, r3, #18
 80068ee:	4013      	ands	r3, r2
 80068f0:	d114      	bne.n	800691c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e0d5      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d106      	bne.n	800690c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068fe:	4b6d      	ldr	r3, [pc, #436]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2204      	movs	r2, #4
 8006904:	4013      	ands	r3, r2
 8006906:	d109      	bne.n	800691c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0ca      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800690c:	4b69      	ldr	r3, [pc, #420]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4013      	ands	r3, r2
 8006916:	d101      	bne.n	800691c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e0c2      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800691c:	4b65      	ldr	r3, [pc, #404]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2203      	movs	r2, #3
 8006922:	4393      	bics	r3, r2
 8006924:	0019      	movs	r1, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	4b62      	ldr	r3, [pc, #392]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 800692c:	430a      	orrs	r2, r1
 800692e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006930:	f7fe fa3c 	bl	8004dac <HAL_GetTick>
 8006934:	0003      	movs	r3, r0
 8006936:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d111      	bne.n	8006964 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006940:	e009      	b.n	8006956 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006942:	f7fe fa33 	bl	8004dac <HAL_GetTick>
 8006946:	0002      	movs	r2, r0
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	4a58      	ldr	r2, [pc, #352]	; (8006ab0 <HAL_RCC_ClockConfig+0x274>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e0a5      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006956:	4b57      	ldr	r3, [pc, #348]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	220c      	movs	r2, #12
 800695c:	4013      	ands	r3, r2
 800695e:	2b08      	cmp	r3, #8
 8006960:	d1ef      	bne.n	8006942 <HAL_RCC_ClockConfig+0x106>
 8006962:	e03a      	b.n	80069da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d111      	bne.n	8006990 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800696c:	e009      	b.n	8006982 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800696e:	f7fe fa1d 	bl	8004dac <HAL_GetTick>
 8006972:	0002      	movs	r2, r0
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	4a4d      	ldr	r2, [pc, #308]	; (8006ab0 <HAL_RCC_ClockConfig+0x274>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e08f      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006982:	4b4c      	ldr	r3, [pc, #304]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	220c      	movs	r2, #12
 8006988:	4013      	ands	r3, r2
 800698a:	2b0c      	cmp	r3, #12
 800698c:	d1ef      	bne.n	800696e <HAL_RCC_ClockConfig+0x132>
 800698e:	e024      	b.n	80069da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d11b      	bne.n	80069d0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006998:	e009      	b.n	80069ae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800699a:	f7fe fa07 	bl	8004dac <HAL_GetTick>
 800699e:	0002      	movs	r2, r0
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	4a42      	ldr	r2, [pc, #264]	; (8006ab0 <HAL_RCC_ClockConfig+0x274>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e079      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80069ae:	4b41      	ldr	r3, [pc, #260]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	220c      	movs	r2, #12
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d1ef      	bne.n	800699a <HAL_RCC_ClockConfig+0x15e>
 80069ba:	e00e      	b.n	80069da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069bc:	f7fe f9f6 	bl	8004dac <HAL_GetTick>
 80069c0:	0002      	movs	r2, r0
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	4a3a      	ldr	r2, [pc, #232]	; (8006ab0 <HAL_RCC_ClockConfig+0x274>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e068      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80069d0:	4b38      	ldr	r3, [pc, #224]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	220c      	movs	r2, #12
 80069d6:	4013      	ands	r3, r2
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069da:	4b34      	ldr	r3, [pc, #208]	; (8006aac <HAL_RCC_ClockConfig+0x270>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2201      	movs	r2, #1
 80069e0:	4013      	ands	r3, r2
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d21e      	bcs.n	8006a26 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e8:	4b30      	ldr	r3, [pc, #192]	; (8006aac <HAL_RCC_ClockConfig+0x270>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2201      	movs	r2, #1
 80069ee:	4393      	bics	r3, r2
 80069f0:	0019      	movs	r1, r3
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <HAL_RCC_ClockConfig+0x270>)
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069fa:	f7fe f9d7 	bl	8004dac <HAL_GetTick>
 80069fe:	0003      	movs	r3, r0
 8006a00:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a02:	e009      	b.n	8006a18 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a04:	f7fe f9d2 	bl	8004dac <HAL_GetTick>
 8006a08:	0002      	movs	r2, r0
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	4a28      	ldr	r2, [pc, #160]	; (8006ab0 <HAL_RCC_ClockConfig+0x274>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e044      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a18:	4b24      	ldr	r3, [pc, #144]	; (8006aac <HAL_RCC_ClockConfig+0x270>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4013      	ands	r3, r2
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d1ee      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a30:	4b20      	ldr	r3, [pc, #128]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <HAL_RCC_ClockConfig+0x27c>)
 8006a36:	4013      	ands	r3, r2
 8006a38:	0019      	movs	r1, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 8006a40:	430a      	orrs	r2, r1
 8006a42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	d00a      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a4e:	4b19      	ldr	r3, [pc, #100]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	4a1a      	ldr	r2, [pc, #104]	; (8006abc <HAL_RCC_ClockConfig+0x280>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	0019      	movs	r1, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	00da      	lsls	r2, r3, #3
 8006a5e:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 8006a60:	430a      	orrs	r2, r1
 8006a62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a64:	f000 f832 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8006a68:	0001      	movs	r1, r0
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <HAL_RCC_ClockConfig+0x278>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	220f      	movs	r2, #15
 8006a72:	4013      	ands	r3, r2
 8006a74:	4a12      	ldr	r2, [pc, #72]	; (8006ac0 <HAL_RCC_ClockConfig+0x284>)
 8006a76:	5cd3      	ldrb	r3, [r2, r3]
 8006a78:	000a      	movs	r2, r1
 8006a7a:	40da      	lsrs	r2, r3
 8006a7c:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <HAL_RCC_ClockConfig+0x288>)
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a80:	4b11      	ldr	r3, [pc, #68]	; (8006ac8 <HAL_RCC_ClockConfig+0x28c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	250b      	movs	r5, #11
 8006a86:	197c      	adds	r4, r7, r5
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7fe f949 	bl	8004d20 <HAL_InitTick>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006a92:	197b      	adds	r3, r7, r5
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006a9a:	197b      	adds	r3, r7, r5
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b004      	add	sp, #16
 8006aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	40022000 	.word	0x40022000
 8006ab0:	00001388 	.word	0x00001388
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	fffff8ff 	.word	0xfffff8ff
 8006abc:	ffffc7ff 	.word	0xffffc7ff
 8006ac0:	0800b988 	.word	0x0800b988
 8006ac4:	20000004 	.word	0x20000004
 8006ac8:	20000008 	.word	0x20000008

08006acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006acc:	b5b0      	push	{r4, r5, r7, lr}
 8006ace:	b08e      	sub	sp, #56	; 0x38
 8006ad0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006ad2:	4b4c      	ldr	r3, [pc, #304]	; (8006c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ada:	230c      	movs	r3, #12
 8006adc:	4013      	ands	r3, r2
 8006ade:	2b0c      	cmp	r3, #12
 8006ae0:	d014      	beq.n	8006b0c <HAL_RCC_GetSysClockFreq+0x40>
 8006ae2:	d900      	bls.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x1a>
 8006ae4:	e07b      	b.n	8006bde <HAL_RCC_GetSysClockFreq+0x112>
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d002      	beq.n	8006af0 <HAL_RCC_GetSysClockFreq+0x24>
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d00b      	beq.n	8006b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8006aee:	e076      	b.n	8006bde <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006af0:	4b44      	ldr	r3, [pc, #272]	; (8006c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2210      	movs	r2, #16
 8006af6:	4013      	ands	r3, r2
 8006af8:	d002      	beq.n	8006b00 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006afa:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006afc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006afe:	e07c      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006b00:	4b42      	ldr	r3, [pc, #264]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x140>)
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b04:	e079      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b06:	4b42      	ldr	r3, [pc, #264]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x144>)
 8006b08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b0a:	e076      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	0c9a      	lsrs	r2, r3, #18
 8006b10:	230f      	movs	r3, #15
 8006b12:	401a      	ands	r2, r3
 8006b14:	4b3f      	ldr	r3, [pc, #252]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x148>)
 8006b16:	5c9b      	ldrb	r3, [r3, r2]
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	0d9a      	lsrs	r2, r3, #22
 8006b1e:	2303      	movs	r3, #3
 8006b20:	4013      	ands	r3, r2
 8006b22:	3301      	adds	r3, #1
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b26:	4b37      	ldr	r3, [pc, #220]	; (8006c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	2380      	movs	r3, #128	; 0x80
 8006b2c:	025b      	lsls	r3, r3, #9
 8006b2e:	4013      	ands	r3, r2
 8006b30:	d01a      	beq.n	8006b68 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	4a35      	ldr	r2, [pc, #212]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x144>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	69b8      	ldr	r0, [r7, #24]
 8006b40:	69f9      	ldr	r1, [r7, #28]
 8006b42:	f7f9 fd0b 	bl	800055c <__aeabi_lmul>
 8006b46:	0002      	movs	r2, r0
 8006b48:	000b      	movs	r3, r1
 8006b4a:	0010      	movs	r0, r2
 8006b4c:	0019      	movs	r1, r3
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f7f9 fcdf 	bl	800051c <__aeabi_uldivmod>
 8006b5e:	0002      	movs	r2, r0
 8006b60:	000b      	movs	r3, r1
 8006b62:	0013      	movs	r3, r2
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
 8006b66:	e037      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006b68:	4b26      	ldr	r3, [pc, #152]	; (8006c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2210      	movs	r2, #16
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d01a      	beq.n	8006ba8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	4a23      	ldr	r2, [pc, #140]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	68b8      	ldr	r0, [r7, #8]
 8006b80:	68f9      	ldr	r1, [r7, #12]
 8006b82:	f7f9 fceb 	bl	800055c <__aeabi_lmul>
 8006b86:	0002      	movs	r2, r0
 8006b88:	000b      	movs	r3, r1
 8006b8a:	0010      	movs	r0, r2
 8006b8c:	0019      	movs	r1, r3
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	603b      	str	r3, [r7, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	607b      	str	r3, [r7, #4]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f7f9 fcbf 	bl	800051c <__aeabi_uldivmod>
 8006b9e:	0002      	movs	r2, r0
 8006ba0:	000b      	movs	r3, r1
 8006ba2:	0013      	movs	r3, r2
 8006ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba6:	e017      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	0018      	movs	r0, r3
 8006bac:	2300      	movs	r3, #0
 8006bae:	0019      	movs	r1, r3
 8006bb0:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x140>)
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f7f9 fcd2 	bl	800055c <__aeabi_lmul>
 8006bb8:	0002      	movs	r2, r0
 8006bba:	000b      	movs	r3, r1
 8006bbc:	0010      	movs	r0, r2
 8006bbe:	0019      	movs	r1, r3
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	001c      	movs	r4, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	001d      	movs	r5, r3
 8006bc8:	0022      	movs	r2, r4
 8006bca:	002b      	movs	r3, r5
 8006bcc:	f7f9 fca6 	bl	800051c <__aeabi_uldivmod>
 8006bd0:	0002      	movs	r2, r0
 8006bd2:	000b      	movs	r3, r1
 8006bd4:	0013      	movs	r3, r2
 8006bd6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bdc:	e00d      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	0b5b      	lsrs	r3, r3, #13
 8006be4:	2207      	movs	r2, #7
 8006be6:	4013      	ands	r3, r2
 8006be8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	3301      	adds	r3, #1
 8006bee:	2280      	movs	r2, #128	; 0x80
 8006bf0:	0212      	lsls	r2, r2, #8
 8006bf2:	409a      	lsls	r2, r3
 8006bf4:	0013      	movs	r3, r2
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bf8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b00e      	add	sp, #56	; 0x38
 8006c02:	bdb0      	pop	{r4, r5, r7, pc}
 8006c04:	40021000 	.word	0x40021000
 8006c08:	003d0900 	.word	0x003d0900
 8006c0c:	00f42400 	.word	0x00f42400
 8006c10:	007a1200 	.word	0x007a1200
 8006c14:	0800b9a0 	.word	0x0800b9a0

08006c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c1c:	4b02      	ldr	r3, [pc, #8]	; (8006c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
}
 8006c20:	0018      	movs	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	20000004 	.word	0x20000004

08006c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c30:	f7ff fff2 	bl	8006c18 <HAL_RCC_GetHCLKFreq>
 8006c34:	0001      	movs	r1, r0
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	2207      	movs	r2, #7
 8006c3e:	4013      	ands	r3, r2
 8006c40:	4a04      	ldr	r2, [pc, #16]	; (8006c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c42:	5cd3      	ldrb	r3, [r2, r3]
 8006c44:	40d9      	lsrs	r1, r3
 8006c46:	000b      	movs	r3, r1
}
 8006c48:	0018      	movs	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	40021000 	.word	0x40021000
 8006c54:	0800b998 	.word	0x0800b998

08006c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c5c:	f7ff ffdc 	bl	8006c18 <HAL_RCC_GetHCLKFreq>
 8006c60:	0001      	movs	r1, r0
 8006c62:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	0adb      	lsrs	r3, r3, #11
 8006c68:	2207      	movs	r2, #7
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	4a04      	ldr	r2, [pc, #16]	; (8006c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c6e:	5cd3      	ldrb	r3, [r2, r3]
 8006c70:	40d9      	lsrs	r1, r3
 8006c72:	000b      	movs	r3, r1
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	0800b998 	.word	0x0800b998

08006c84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006c8c:	2317      	movs	r3, #23
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d106      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	2380      	movs	r3, #128	; 0x80
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d100      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006caa:	e0d9      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cac:	4ba4      	ldr	r3, [pc, #656]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb0:	2380      	movs	r3, #128	; 0x80
 8006cb2:	055b      	lsls	r3, r3, #21
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d10a      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cb8:	4ba1      	ldr	r3, [pc, #644]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbc:	4ba0      	ldr	r3, [pc, #640]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006cbe:	2180      	movs	r1, #128	; 0x80
 8006cc0:	0549      	lsls	r1, r1, #21
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006cc6:	2317      	movs	r3, #23
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	2201      	movs	r2, #1
 8006ccc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cce:	4b9d      	ldr	r3, [pc, #628]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	2380      	movs	r3, #128	; 0x80
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d11a      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cda:	4b9a      	ldr	r3, [pc, #616]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b99      	ldr	r3, [pc, #612]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006ce0:	2180      	movs	r1, #128	; 0x80
 8006ce2:	0049      	lsls	r1, r1, #1
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ce8:	f7fe f860 	bl	8004dac <HAL_GetTick>
 8006cec:	0003      	movs	r3, r0
 8006cee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf0:	e008      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf2:	f7fe f85b 	bl	8004dac <HAL_GetTick>
 8006cf6:	0002      	movs	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b64      	cmp	r3, #100	; 0x64
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e118      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d04:	4b8f      	ldr	r3, [pc, #572]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	2380      	movs	r3, #128	; 0x80
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d0f0      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006d10:	4b8b      	ldr	r3, [pc, #556]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	23c0      	movs	r3, #192	; 0xc0
 8006d16:	039b      	lsls	r3, r3, #14
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	23c0      	movs	r3, #192	; 0xc0
 8006d22:	039b      	lsls	r3, r3, #14
 8006d24:	4013      	ands	r3, r2
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d107      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	23c0      	movs	r3, #192	; 0xc0
 8006d32:	039b      	lsls	r3, r3, #14
 8006d34:	4013      	ands	r3, r2
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d013      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	23c0      	movs	r3, #192	; 0xc0
 8006d42:	029b      	lsls	r3, r3, #10
 8006d44:	401a      	ands	r2, r3
 8006d46:	23c0      	movs	r3, #192	; 0xc0
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d10a      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d4e:	4b7c      	ldr	r3, [pc, #496]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	2380      	movs	r3, #128	; 0x80
 8006d54:	029b      	lsls	r3, r3, #10
 8006d56:	401a      	ands	r2, r3
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	029b      	lsls	r3, r3, #10
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d101      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e0e8      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006d64:	4b76      	ldr	r3, [pc, #472]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006d66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d68:	23c0      	movs	r3, #192	; 0xc0
 8006d6a:	029b      	lsls	r3, r3, #10
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d049      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	23c0      	movs	r3, #192	; 0xc0
 8006d7c:	029b      	lsls	r3, r3, #10
 8006d7e:	4013      	ands	r3, r2
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d004      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	d10d      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	23c0      	movs	r3, #192	; 0xc0
 8006d96:	029b      	lsls	r3, r3, #10
 8006d98:	4013      	ands	r3, r2
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d034      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	2380      	movs	r3, #128	; 0x80
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	4013      	ands	r3, r2
 8006daa:	d02e      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006dac:	4b64      	ldr	r3, [pc, #400]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db0:	4a65      	ldr	r2, [pc, #404]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006db6:	4b62      	ldr	r3, [pc, #392]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dba:	4b61      	ldr	r3, [pc, #388]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006dbc:	2180      	movs	r1, #128	; 0x80
 8006dbe:	0309      	lsls	r1, r1, #12
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dc4:	4b5e      	ldr	r3, [pc, #376]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dc8:	4b5d      	ldr	r3, [pc, #372]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006dca:	4960      	ldr	r1, [pc, #384]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006dcc:	400a      	ands	r2, r1
 8006dce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006dd0:	4b5b      	ldr	r3, [pc, #364]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	2380      	movs	r3, #128	; 0x80
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d014      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de0:	f7fd ffe4 	bl	8004dac <HAL_GetTick>
 8006de4:	0003      	movs	r3, r0
 8006de6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006de8:	e009      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dea:	f7fd ffdf 	bl	8004dac <HAL_GetTick>
 8006dee:	0002      	movs	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	4a56      	ldr	r2, [pc, #344]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e09b      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dfe:	4b50      	ldr	r3, [pc, #320]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e02:	2380      	movs	r3, #128	; 0x80
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4013      	ands	r3, r2
 8006e08:	d0ef      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	23c0      	movs	r3, #192	; 0xc0
 8006e10:	029b      	lsls	r3, r3, #10
 8006e12:	401a      	ands	r2, r3
 8006e14:	23c0      	movs	r3, #192	; 0xc0
 8006e16:	029b      	lsls	r3, r3, #10
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d10c      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006e1c:	4b48      	ldr	r3, [pc, #288]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a4c      	ldr	r2, [pc, #304]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	0019      	movs	r1, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	23c0      	movs	r3, #192	; 0xc0
 8006e2c:	039b      	lsls	r3, r3, #14
 8006e2e:	401a      	ands	r2, r3
 8006e30:	4b43      	ldr	r3, [pc, #268]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e32:	430a      	orrs	r2, r1
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	23c0      	movs	r3, #192	; 0xc0
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	401a      	ands	r2, r3
 8006e44:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e46:	430a      	orrs	r2, r1
 8006e48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e4a:	2317      	movs	r3, #23
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d105      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e54:	4b3a      	ldr	r3, [pc, #232]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e58:	4b39      	ldr	r3, [pc, #228]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e5a:	493f      	ldr	r1, [pc, #252]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	4013      	ands	r3, r2
 8006e68:	d009      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e6a:	4b35      	ldr	r3, [pc, #212]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6e:	2203      	movs	r2, #3
 8006e70:	4393      	bics	r3, r2
 8006e72:	0019      	movs	r1, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	4b31      	ldr	r3, [pc, #196]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2202      	movs	r2, #2
 8006e84:	4013      	ands	r3, r2
 8006e86:	d009      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e88:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8c:	220c      	movs	r2, #12
 8006e8e:	4393      	bics	r3, r2
 8006e90:	0019      	movs	r1, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691a      	ldr	r2, [r3, #16]
 8006e96:	4b2a      	ldr	r3, [pc, #168]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ea6:	4b26      	ldr	r3, [pc, #152]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eaa:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	0019      	movs	r1, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	695a      	ldr	r2, [r3, #20]
 8006eb4:	4b22      	ldr	r3, [pc, #136]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	d009      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ec4:	4b1e      	ldr	r3, [pc, #120]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec8:	4a25      	ldr	r2, [pc, #148]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	0019      	movs	r1, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	2380      	movs	r3, #128	; 0x80
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	d009      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ee4:	4b16      	ldr	r3, [pc, #88]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee8:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	0019      	movs	r1, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69da      	ldr	r2, [r3, #28]
 8006ef2:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2240      	movs	r2, #64	; 0x40
 8006efe:	4013      	ands	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f02:	4b0f      	ldr	r3, [pc, #60]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f06:	4a17      	ldr	r2, [pc, #92]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	0019      	movs	r1, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f12:	430a      	orrs	r2, r1
 8006f14:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2280      	movs	r2, #128	; 0x80
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d009      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006f20:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f24:	4a10      	ldr	r2, [pc, #64]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	0019      	movs	r1, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1a      	ldr	r2, [r3, #32]
 8006f2e:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f30:	430a      	orrs	r2, r1
 8006f32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	0018      	movs	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b006      	add	sp, #24
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	46c0      	nop			; (mov r8, r8)
 8006f40:	40021000 	.word	0x40021000
 8006f44:	40007000 	.word	0x40007000
 8006f48:	fffcffff 	.word	0xfffcffff
 8006f4c:	fff7ffff 	.word	0xfff7ffff
 8006f50:	00001388 	.word	0x00001388
 8006f54:	ffcfffff 	.word	0xffcfffff
 8006f58:	efffffff 	.word	0xefffffff
 8006f5c:	fffff3ff 	.word	0xfffff3ff
 8006f60:	ffffcfff 	.word	0xffffcfff
 8006f64:	fbffffff 	.word	0xfbffffff
 8006f68:	fff3ffff 	.word	0xfff3ffff

08006f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e032      	b.n	8006fe4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2239      	movs	r2, #57	; 0x39
 8006f82:	5c9b      	ldrb	r3, [r3, r2]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d107      	bne.n	8006f9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2238      	movs	r2, #56	; 0x38
 8006f8e:	2100      	movs	r1, #0
 8006f90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	0018      	movs	r0, r3
 8006f96:	f7fd fbf9 	bl	800478c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2239      	movs	r2, #57	; 0x39
 8006f9e:	2102      	movs	r1, #2
 8006fa0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	0019      	movs	r1, r3
 8006fac:	0010      	movs	r0, r2
 8006fae:	f000 fc39 	bl	8007824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	223e      	movs	r2, #62	; 0x3e
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	223a      	movs	r2, #58	; 0x3a
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	5499      	strb	r1, [r3, r2]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	223b      	movs	r2, #59	; 0x3b
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	5499      	strb	r1, [r3, r2]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	223c      	movs	r2, #60	; 0x3c
 8006fce:	2101      	movs	r1, #1
 8006fd0:	5499      	strb	r1, [r3, r2]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	223d      	movs	r2, #61	; 0x3d
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2239      	movs	r2, #57	; 0x39
 8006fde:	2101      	movs	r1, #1
 8006fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b002      	add	sp, #8
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e032      	b.n	8007064 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2239      	movs	r2, #57	; 0x39
 8007002:	5c9b      	ldrb	r3, [r3, r2]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d107      	bne.n	800701a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2238      	movs	r2, #56	; 0x38
 800700e:	2100      	movs	r1, #0
 8007010:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	0018      	movs	r0, r3
 8007016:	f000 f829 	bl	800706c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2239      	movs	r2, #57	; 0x39
 800701e:	2102      	movs	r1, #2
 8007020:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3304      	adds	r3, #4
 800702a:	0019      	movs	r1, r3
 800702c:	0010      	movs	r0, r2
 800702e:	f000 fbf9 	bl	8007824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	223e      	movs	r2, #62	; 0x3e
 8007036:	2101      	movs	r1, #1
 8007038:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	223a      	movs	r2, #58	; 0x3a
 800703e:	2101      	movs	r1, #1
 8007040:	5499      	strb	r1, [r3, r2]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	223b      	movs	r2, #59	; 0x3b
 8007046:	2101      	movs	r1, #1
 8007048:	5499      	strb	r1, [r3, r2]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	223c      	movs	r2, #60	; 0x3c
 800704e:	2101      	movs	r1, #1
 8007050:	5499      	strb	r1, [r3, r2]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	223d      	movs	r2, #61	; 0x3d
 8007056:	2101      	movs	r1, #1
 8007058:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2239      	movs	r2, #57	; 0x39
 800705e:	2101      	movs	r1, #1
 8007060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	0018      	movs	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	b002      	add	sp, #8
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007074:	46c0      	nop			; (mov r8, r8)
 8007076:	46bd      	mov	sp, r7
 8007078:	b002      	add	sp, #8
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e032      	b.n	80070f4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2239      	movs	r2, #57	; 0x39
 8007092:	5c9b      	ldrb	r3, [r3, r2]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d107      	bne.n	80070aa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2238      	movs	r2, #56	; 0x38
 800709e:	2100      	movs	r1, #0
 80070a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	0018      	movs	r0, r3
 80070a6:	f000 f829 	bl	80070fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2239      	movs	r2, #57	; 0x39
 80070ae:	2102      	movs	r1, #2
 80070b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3304      	adds	r3, #4
 80070ba:	0019      	movs	r1, r3
 80070bc:	0010      	movs	r0, r2
 80070be:	f000 fbb1 	bl	8007824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	223e      	movs	r2, #62	; 0x3e
 80070c6:	2101      	movs	r1, #1
 80070c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	223a      	movs	r2, #58	; 0x3a
 80070ce:	2101      	movs	r1, #1
 80070d0:	5499      	strb	r1, [r3, r2]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	223b      	movs	r2, #59	; 0x3b
 80070d6:	2101      	movs	r1, #1
 80070d8:	5499      	strb	r1, [r3, r2]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	223c      	movs	r2, #60	; 0x3c
 80070de:	2101      	movs	r1, #1
 80070e0:	5499      	strb	r1, [r3, r2]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	223d      	movs	r2, #61	; 0x3d
 80070e6:	2101      	movs	r1, #1
 80070e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2239      	movs	r2, #57	; 0x39
 80070ee:	2101      	movs	r1, #1
 80070f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	0018      	movs	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b002      	add	sp, #8
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007104:	46c0      	nop			; (mov r8, r8)
 8007106:	46bd      	mov	sp, r7
 8007108:	b002      	add	sp, #8
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d108      	bne.n	800712e <HAL_TIM_PWM_Start+0x22>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	223a      	movs	r2, #58	; 0x3a
 8007120:	5c9b      	ldrb	r3, [r3, r2]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	1e5a      	subs	r2, r3, #1
 8007128:	4193      	sbcs	r3, r2
 800712a:	b2db      	uxtb	r3, r3
 800712c:	e01f      	b.n	800716e <HAL_TIM_PWM_Start+0x62>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b04      	cmp	r3, #4
 8007132:	d108      	bne.n	8007146 <HAL_TIM_PWM_Start+0x3a>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	223b      	movs	r2, #59	; 0x3b
 8007138:	5c9b      	ldrb	r3, [r3, r2]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	1e5a      	subs	r2, r3, #1
 8007140:	4193      	sbcs	r3, r2
 8007142:	b2db      	uxtb	r3, r3
 8007144:	e013      	b.n	800716e <HAL_TIM_PWM_Start+0x62>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b08      	cmp	r3, #8
 800714a:	d108      	bne.n	800715e <HAL_TIM_PWM_Start+0x52>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	223c      	movs	r2, #60	; 0x3c
 8007150:	5c9b      	ldrb	r3, [r3, r2]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	1e5a      	subs	r2, r3, #1
 8007158:	4193      	sbcs	r3, r2
 800715a:	b2db      	uxtb	r3, r3
 800715c:	e007      	b.n	800716e <HAL_TIM_PWM_Start+0x62>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	223d      	movs	r2, #61	; 0x3d
 8007162:	5c9b      	ldrb	r3, [r3, r2]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	1e5a      	subs	r2, r3, #1
 800716a:	4193      	sbcs	r3, r2
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e052      	b.n	800721c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <HAL_TIM_PWM_Start+0x7a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	223a      	movs	r2, #58	; 0x3a
 8007180:	2102      	movs	r1, #2
 8007182:	5499      	strb	r1, [r3, r2]
 8007184:	e013      	b.n	80071ae <HAL_TIM_PWM_Start+0xa2>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b04      	cmp	r3, #4
 800718a:	d104      	bne.n	8007196 <HAL_TIM_PWM_Start+0x8a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	223b      	movs	r2, #59	; 0x3b
 8007190:	2102      	movs	r1, #2
 8007192:	5499      	strb	r1, [r3, r2]
 8007194:	e00b      	b.n	80071ae <HAL_TIM_PWM_Start+0xa2>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b08      	cmp	r3, #8
 800719a:	d104      	bne.n	80071a6 <HAL_TIM_PWM_Start+0x9a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	223c      	movs	r2, #60	; 0x3c
 80071a0:	2102      	movs	r1, #2
 80071a2:	5499      	strb	r1, [r3, r2]
 80071a4:	e003      	b.n	80071ae <HAL_TIM_PWM_Start+0xa2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	223d      	movs	r2, #61	; 0x3d
 80071aa:	2102      	movs	r1, #2
 80071ac:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	2201      	movs	r2, #1
 80071b6:	0018      	movs	r0, r3
 80071b8:	f000 fd30 	bl	8007c1c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	2380      	movs	r3, #128	; 0x80
 80071c2:	05db      	lsls	r3, r3, #23
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d00e      	beq.n	80071e6 <HAL_TIM_PWM_Start+0xda>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a15      	ldr	r2, [pc, #84]	; (8007224 <HAL_TIM_PWM_Start+0x118>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d009      	beq.n	80071e6 <HAL_TIM_PWM_Start+0xda>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a14      	ldr	r2, [pc, #80]	; (8007228 <HAL_TIM_PWM_Start+0x11c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d004      	beq.n	80071e6 <HAL_TIM_PWM_Start+0xda>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a12      	ldr	r2, [pc, #72]	; (800722c <HAL_TIM_PWM_Start+0x120>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d111      	bne.n	800720a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	2207      	movs	r2, #7
 80071ee:	4013      	ands	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b06      	cmp	r3, #6
 80071f6:	d010      	beq.n	800721a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2101      	movs	r1, #1
 8007204:	430a      	orrs	r2, r1
 8007206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007208:	e007      	b.n	800721a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2101      	movs	r1, #1
 8007216:	430a      	orrs	r2, r1
 8007218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	0018      	movs	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	b004      	add	sp, #16
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40000400 	.word	0x40000400
 8007228:	40010800 	.word	0x40010800
 800722c:	40011400 	.word	0x40011400

08007230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2202      	movs	r2, #2
 8007240:	4013      	ands	r3, r2
 8007242:	2b02      	cmp	r3, #2
 8007244:	d124      	bne.n	8007290 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	2202      	movs	r2, #2
 800724e:	4013      	ands	r3, r2
 8007250:	2b02      	cmp	r3, #2
 8007252:	d11d      	bne.n	8007290 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2203      	movs	r2, #3
 800725a:	4252      	negs	r2, r2
 800725c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	2203      	movs	r2, #3
 800726c:	4013      	ands	r3, r2
 800726e:	d004      	beq.n	800727a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	0018      	movs	r0, r3
 8007274:	f000 fabe 	bl	80077f4 <HAL_TIM_IC_CaptureCallback>
 8007278:	e007      	b.n	800728a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	0018      	movs	r0, r3
 800727e:	f000 fab1 	bl	80077e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	0018      	movs	r0, r3
 8007286:	f000 fabd 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2204      	movs	r2, #4
 8007298:	4013      	ands	r3, r2
 800729a:	2b04      	cmp	r3, #4
 800729c:	d125      	bne.n	80072ea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	2204      	movs	r2, #4
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d11e      	bne.n	80072ea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2205      	movs	r2, #5
 80072b2:	4252      	negs	r2, r2
 80072b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2202      	movs	r2, #2
 80072ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	23c0      	movs	r3, #192	; 0xc0
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4013      	ands	r3, r2
 80072c8:	d004      	beq.n	80072d4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	0018      	movs	r0, r3
 80072ce:	f000 fa91 	bl	80077f4 <HAL_TIM_IC_CaptureCallback>
 80072d2:	e007      	b.n	80072e4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	0018      	movs	r0, r3
 80072d8:	f000 fa84 	bl	80077e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	0018      	movs	r0, r3
 80072e0:	f000 fa90 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	2208      	movs	r2, #8
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d124      	bne.n	8007342 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	2208      	movs	r2, #8
 8007300:	4013      	ands	r3, r2
 8007302:	2b08      	cmp	r3, #8
 8007304:	d11d      	bne.n	8007342 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2209      	movs	r2, #9
 800730c:	4252      	negs	r2, r2
 800730e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2204      	movs	r2, #4
 8007314:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	2203      	movs	r2, #3
 800731e:	4013      	ands	r3, r2
 8007320:	d004      	beq.n	800732c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	0018      	movs	r0, r3
 8007326:	f000 fa65 	bl	80077f4 <HAL_TIM_IC_CaptureCallback>
 800732a:	e007      	b.n	800733c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	0018      	movs	r0, r3
 8007330:	f000 fa58 	bl	80077e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	0018      	movs	r0, r3
 8007338:	f000 fa64 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2210      	movs	r2, #16
 800734a:	4013      	ands	r3, r2
 800734c:	2b10      	cmp	r3, #16
 800734e:	d125      	bne.n	800739c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	2210      	movs	r2, #16
 8007358:	4013      	ands	r3, r2
 800735a:	2b10      	cmp	r3, #16
 800735c:	d11e      	bne.n	800739c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2211      	movs	r2, #17
 8007364:	4252      	negs	r2, r2
 8007366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2208      	movs	r2, #8
 800736c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69da      	ldr	r2, [r3, #28]
 8007374:	23c0      	movs	r3, #192	; 0xc0
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4013      	ands	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	0018      	movs	r0, r3
 8007380:	f000 fa38 	bl	80077f4 <HAL_TIM_IC_CaptureCallback>
 8007384:	e007      	b.n	8007396 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0018      	movs	r0, r3
 800738a:	f000 fa2b 	bl	80077e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	0018      	movs	r0, r3
 8007392:	f000 fa37 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2201      	movs	r2, #1
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d10f      	bne.n	80073ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d108      	bne.n	80073ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2202      	movs	r2, #2
 80073be:	4252      	negs	r2, r2
 80073c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f7fc ffa3 	bl	8004310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	2240      	movs	r2, #64	; 0x40
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	d10f      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	2240      	movs	r2, #64	; 0x40
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d108      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2241      	movs	r2, #65	; 0x41
 80073ec:	4252      	negs	r2, r2
 80073ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	0018      	movs	r0, r3
 80073f4:	f000 fa0e 	bl	8007814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073f8:	46c0      	nop			; (mov r8, r8)
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b002      	add	sp, #8
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800740c:	2317      	movs	r3, #23
 800740e:	18fb      	adds	r3, r7, r3
 8007410:	2200      	movs	r2, #0
 8007412:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2238      	movs	r2, #56	; 0x38
 8007418:	5c9b      	ldrb	r3, [r3, r2]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d101      	bne.n	8007422 <HAL_TIM_OC_ConfigChannel+0x22>
 800741e:	2302      	movs	r3, #2
 8007420:	e042      	b.n	80074a8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2238      	movs	r2, #56	; 0x38
 8007426:	2101      	movs	r1, #1
 8007428:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d027      	beq.n	8007480 <HAL_TIM_OC_ConfigChannel+0x80>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b0c      	cmp	r3, #12
 8007434:	d82c      	bhi.n	8007490 <HAL_TIM_OC_ConfigChannel+0x90>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b08      	cmp	r3, #8
 800743a:	d019      	beq.n	8007470 <HAL_TIM_OC_ConfigChannel+0x70>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b08      	cmp	r3, #8
 8007440:	d826      	bhi.n	8007490 <HAL_TIM_OC_ConfigChannel+0x90>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_TIM_OC_ConfigChannel+0x50>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b04      	cmp	r3, #4
 800744c:	d008      	beq.n	8007460 <HAL_TIM_OC_ConfigChannel+0x60>
 800744e:	e01f      	b.n	8007490 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	0011      	movs	r1, r2
 8007458:	0018      	movs	r0, r3
 800745a:	f000 fa41 	bl	80078e0 <TIM_OC1_SetConfig>
      break;
 800745e:	e01c      	b.n	800749a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	0011      	movs	r1, r2
 8007468:	0018      	movs	r0, r3
 800746a:	f000 fa75 	bl	8007958 <TIM_OC2_SetConfig>
      break;
 800746e:	e014      	b.n	800749a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	0011      	movs	r1, r2
 8007478:	0018      	movs	r0, r3
 800747a:	f000 faaf 	bl	80079dc <TIM_OC3_SetConfig>
      break;
 800747e:	e00c      	b.n	800749a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	0011      	movs	r1, r2
 8007488:	0018      	movs	r0, r3
 800748a:	f000 fae7 	bl	8007a5c <TIM_OC4_SetConfig>
      break;
 800748e:	e004      	b.n	800749a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007490:	2317      	movs	r3, #23
 8007492:	18fb      	adds	r3, r7, r3
 8007494:	2201      	movs	r2, #1
 8007496:	701a      	strb	r2, [r3, #0]
      break;
 8007498:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2238      	movs	r2, #56	; 0x38
 800749e:	2100      	movs	r1, #0
 80074a0:	5499      	strb	r1, [r3, r2]

  return status;
 80074a2:	2317      	movs	r3, #23
 80074a4:	18fb      	adds	r3, r7, r3
 80074a6:	781b      	ldrb	r3, [r3, #0]
}
 80074a8:	0018      	movs	r0, r3
 80074aa:	46bd      	mov	sp, r7
 80074ac:	b006      	add	sp, #24
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074bc:	2317      	movs	r3, #23
 80074be:	18fb      	adds	r3, r7, r3
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2238      	movs	r2, #56	; 0x38
 80074c8:	5c9b      	ldrb	r3, [r3, r2]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e0ad      	b.n	800762e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2238      	movs	r2, #56	; 0x38
 80074d6:	2101      	movs	r1, #1
 80074d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b0c      	cmp	r3, #12
 80074de:	d100      	bne.n	80074e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80074e0:	e076      	b.n	80075d0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b0c      	cmp	r3, #12
 80074e6:	d900      	bls.n	80074ea <HAL_TIM_PWM_ConfigChannel+0x3a>
 80074e8:	e095      	b.n	8007616 <HAL_TIM_PWM_ConfigChannel+0x166>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d04e      	beq.n	800758e <HAL_TIM_PWM_ConfigChannel+0xde>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d900      	bls.n	80074f8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80074f6:	e08e      	b.n	8007616 <HAL_TIM_PWM_ConfigChannel+0x166>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_TIM_PWM_ConfigChannel+0x56>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b04      	cmp	r3, #4
 8007502:	d021      	beq.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x98>
 8007504:	e087      	b.n	8007616 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	0011      	movs	r1, r2
 800750e:	0018      	movs	r0, r3
 8007510:	f000 f9e6 	bl	80078e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2108      	movs	r1, #8
 8007520:	430a      	orrs	r2, r1
 8007522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2104      	movs	r1, #4
 8007530:	438a      	bics	r2, r1
 8007532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6999      	ldr	r1, [r3, #24]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	619a      	str	r2, [r3, #24]
      break;
 8007546:	e06b      	b.n	8007620 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	0011      	movs	r1, r2
 8007550:	0018      	movs	r0, r3
 8007552:	f000 fa01 	bl	8007958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699a      	ldr	r2, [r3, #24]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2180      	movs	r1, #128	; 0x80
 8007562:	0109      	lsls	r1, r1, #4
 8007564:	430a      	orrs	r2, r1
 8007566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4931      	ldr	r1, [pc, #196]	; (8007638 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007574:	400a      	ands	r2, r1
 8007576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6999      	ldr	r1, [r3, #24]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	021a      	lsls	r2, r3, #8
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	619a      	str	r2, [r3, #24]
      break;
 800758c:	e048      	b.n	8007620 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	0011      	movs	r1, r2
 8007596:	0018      	movs	r0, r3
 8007598:	f000 fa20 	bl	80079dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	69da      	ldr	r2, [r3, #28]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2108      	movs	r1, #8
 80075a8:	430a      	orrs	r2, r1
 80075aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69da      	ldr	r2, [r3, #28]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2104      	movs	r1, #4
 80075b8:	438a      	bics	r2, r1
 80075ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69d9      	ldr	r1, [r3, #28]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	61da      	str	r2, [r3, #28]
      break;
 80075ce:	e027      	b.n	8007620 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	0011      	movs	r1, r2
 80075d8:	0018      	movs	r0, r3
 80075da:	f000 fa3f 	bl	8007a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2180      	movs	r1, #128	; 0x80
 80075ea:	0109      	lsls	r1, r1, #4
 80075ec:	430a      	orrs	r2, r1
 80075ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69da      	ldr	r2, [r3, #28]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	490f      	ldr	r1, [pc, #60]	; (8007638 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80075fc:	400a      	ands	r2, r1
 80075fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69d9      	ldr	r1, [r3, #28]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	021a      	lsls	r2, r3, #8
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	61da      	str	r2, [r3, #28]
      break;
 8007614:	e004      	b.n	8007620 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007616:	2317      	movs	r3, #23
 8007618:	18fb      	adds	r3, r7, r3
 800761a:	2201      	movs	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
      break;
 800761e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2238      	movs	r2, #56	; 0x38
 8007624:	2100      	movs	r1, #0
 8007626:	5499      	strb	r1, [r3, r2]

  return status;
 8007628:	2317      	movs	r3, #23
 800762a:	18fb      	adds	r3, r7, r3
 800762c:	781b      	ldrb	r3, [r3, #0]
}
 800762e:	0018      	movs	r0, r3
 8007630:	46bd      	mov	sp, r7
 8007632:	b006      	add	sp, #24
 8007634:	bd80      	pop	{r7, pc}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	fffffbff 	.word	0xfffffbff

0800763c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007646:	230f      	movs	r3, #15
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2238      	movs	r2, #56	; 0x38
 8007652:	5c9b      	ldrb	r3, [r3, r2]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_TIM_ConfigClockSource+0x20>
 8007658:	2302      	movs	r3, #2
 800765a:	e0bc      	b.n	80077d6 <HAL_TIM_ConfigClockSource+0x19a>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2238      	movs	r2, #56	; 0x38
 8007660:	2101      	movs	r1, #1
 8007662:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2239      	movs	r2, #57	; 0x39
 8007668:	2102      	movs	r1, #2
 800766a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2277      	movs	r2, #119	; 0x77
 8007678:	4393      	bics	r3, r2
 800767a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4a58      	ldr	r2, [pc, #352]	; (80077e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007680:	4013      	ands	r3, r2
 8007682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2280      	movs	r2, #128	; 0x80
 8007692:	0192      	lsls	r2, r2, #6
 8007694:	4293      	cmp	r3, r2
 8007696:	d040      	beq.n	800771a <HAL_TIM_ConfigClockSource+0xde>
 8007698:	2280      	movs	r2, #128	; 0x80
 800769a:	0192      	lsls	r2, r2, #6
 800769c:	4293      	cmp	r3, r2
 800769e:	d900      	bls.n	80076a2 <HAL_TIM_ConfigClockSource+0x66>
 80076a0:	e088      	b.n	80077b4 <HAL_TIM_ConfigClockSource+0x178>
 80076a2:	2280      	movs	r2, #128	; 0x80
 80076a4:	0152      	lsls	r2, r2, #5
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d100      	bne.n	80076ac <HAL_TIM_ConfigClockSource+0x70>
 80076aa:	e088      	b.n	80077be <HAL_TIM_ConfigClockSource+0x182>
 80076ac:	2280      	movs	r2, #128	; 0x80
 80076ae:	0152      	lsls	r2, r2, #5
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d900      	bls.n	80076b6 <HAL_TIM_ConfigClockSource+0x7a>
 80076b4:	e07e      	b.n	80077b4 <HAL_TIM_ConfigClockSource+0x178>
 80076b6:	2b70      	cmp	r3, #112	; 0x70
 80076b8:	d018      	beq.n	80076ec <HAL_TIM_ConfigClockSource+0xb0>
 80076ba:	d900      	bls.n	80076be <HAL_TIM_ConfigClockSource+0x82>
 80076bc:	e07a      	b.n	80077b4 <HAL_TIM_ConfigClockSource+0x178>
 80076be:	2b60      	cmp	r3, #96	; 0x60
 80076c0:	d04f      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x126>
 80076c2:	d900      	bls.n	80076c6 <HAL_TIM_ConfigClockSource+0x8a>
 80076c4:	e076      	b.n	80077b4 <HAL_TIM_ConfigClockSource+0x178>
 80076c6:	2b50      	cmp	r3, #80	; 0x50
 80076c8:	d03b      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x106>
 80076ca:	d900      	bls.n	80076ce <HAL_TIM_ConfigClockSource+0x92>
 80076cc:	e072      	b.n	80077b4 <HAL_TIM_ConfigClockSource+0x178>
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d057      	beq.n	8007782 <HAL_TIM_ConfigClockSource+0x146>
 80076d2:	d900      	bls.n	80076d6 <HAL_TIM_ConfigClockSource+0x9a>
 80076d4:	e06e      	b.n	80077b4 <HAL_TIM_ConfigClockSource+0x178>
 80076d6:	2b30      	cmp	r3, #48	; 0x30
 80076d8:	d063      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x166>
 80076da:	d86b      	bhi.n	80077b4 <HAL_TIM_ConfigClockSource+0x178>
 80076dc:	2b20      	cmp	r3, #32
 80076de:	d060      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x166>
 80076e0:	d868      	bhi.n	80077b4 <HAL_TIM_ConfigClockSource+0x178>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d05d      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x166>
 80076e6:	2b10      	cmp	r3, #16
 80076e8:	d05b      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x166>
 80076ea:	e063      	b.n	80077b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	6899      	ldr	r1, [r3, #8]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f000 fa6e 	bl	8007bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2277      	movs	r2, #119	; 0x77
 800770c:	4313      	orrs	r3, r2
 800770e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	609a      	str	r2, [r3, #8]
      break;
 8007718:	e052      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6899      	ldr	r1, [r3, #8]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f000 fa57 	bl	8007bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2180      	movs	r1, #128	; 0x80
 800773a:	01c9      	lsls	r1, r1, #7
 800773c:	430a      	orrs	r2, r1
 800773e:	609a      	str	r2, [r3, #8]
      break;
 8007740:	e03e      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6859      	ldr	r1, [r3, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	001a      	movs	r2, r3
 8007750:	f000 f9ca 	bl	8007ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2150      	movs	r1, #80	; 0x50
 800775a:	0018      	movs	r0, r3
 800775c:	f000 fa24 	bl	8007ba8 <TIM_ITRx_SetConfig>
      break;
 8007760:	e02e      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6859      	ldr	r1, [r3, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	001a      	movs	r2, r3
 8007770:	f000 f9e8 	bl	8007b44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2160      	movs	r1, #96	; 0x60
 800777a:	0018      	movs	r0, r3
 800777c:	f000 fa14 	bl	8007ba8 <TIM_ITRx_SetConfig>
      break;
 8007780:	e01e      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	6859      	ldr	r1, [r3, #4]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	001a      	movs	r2, r3
 8007790:	f000 f9aa 	bl	8007ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2140      	movs	r1, #64	; 0x40
 800779a:	0018      	movs	r0, r3
 800779c:	f000 fa04 	bl	8007ba8 <TIM_ITRx_SetConfig>
      break;
 80077a0:	e00e      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	0019      	movs	r1, r3
 80077ac:	0010      	movs	r0, r2
 80077ae:	f000 f9fb 	bl	8007ba8 <TIM_ITRx_SetConfig>
      break;
 80077b2:	e005      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80077b4:	230f      	movs	r3, #15
 80077b6:	18fb      	adds	r3, r7, r3
 80077b8:	2201      	movs	r2, #1
 80077ba:	701a      	strb	r2, [r3, #0]
      break;
 80077bc:	e000      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80077be:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2239      	movs	r2, #57	; 0x39
 80077c4:	2101      	movs	r1, #1
 80077c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2238      	movs	r2, #56	; 0x38
 80077cc:	2100      	movs	r1, #0
 80077ce:	5499      	strb	r1, [r3, r2]

  return status;
 80077d0:	230f      	movs	r3, #15
 80077d2:	18fb      	adds	r3, r7, r3
 80077d4:	781b      	ldrb	r3, [r3, #0]
}
 80077d6:	0018      	movs	r0, r3
 80077d8:	46bd      	mov	sp, r7
 80077da:	b004      	add	sp, #16
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	ffff00ff 	.word	0xffff00ff

080077e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077ec:	46c0      	nop			; (mov r8, r8)
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b002      	add	sp, #8
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077fc:	46c0      	nop			; (mov r8, r8)
 80077fe:	46bd      	mov	sp, r7
 8007800:	b002      	add	sp, #8
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800780c:	46c0      	nop			; (mov r8, r8)
 800780e:	46bd      	mov	sp, r7
 8007810:	b002      	add	sp, #8
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800781c:	46c0      	nop			; (mov r8, r8)
 800781e:	46bd      	mov	sp, r7
 8007820:	b002      	add	sp, #8
 8007822:	bd80      	pop	{r7, pc}

08007824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	2380      	movs	r3, #128	; 0x80
 8007838:	05db      	lsls	r3, r3, #23
 800783a:	429a      	cmp	r2, r3
 800783c:	d00b      	beq.n	8007856 <TIM_Base_SetConfig+0x32>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a23      	ldr	r2, [pc, #140]	; (80078d0 <TIM_Base_SetConfig+0xac>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d007      	beq.n	8007856 <TIM_Base_SetConfig+0x32>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a22      	ldr	r2, [pc, #136]	; (80078d4 <TIM_Base_SetConfig+0xb0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d003      	beq.n	8007856 <TIM_Base_SetConfig+0x32>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <TIM_Base_SetConfig+0xb4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d108      	bne.n	8007868 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2270      	movs	r2, #112	; 0x70
 800785a:	4393      	bics	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	2380      	movs	r3, #128	; 0x80
 800786c:	05db      	lsls	r3, r3, #23
 800786e:	429a      	cmp	r2, r3
 8007870:	d00b      	beq.n	800788a <TIM_Base_SetConfig+0x66>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a16      	ldr	r2, [pc, #88]	; (80078d0 <TIM_Base_SetConfig+0xac>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d007      	beq.n	800788a <TIM_Base_SetConfig+0x66>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <TIM_Base_SetConfig+0xb0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d003      	beq.n	800788a <TIM_Base_SetConfig+0x66>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a14      	ldr	r2, [pc, #80]	; (80078d8 <TIM_Base_SetConfig+0xb4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d108      	bne.n	800789c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4a13      	ldr	r2, [pc, #76]	; (80078dc <TIM_Base_SetConfig+0xb8>)
 800788e:	4013      	ands	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2280      	movs	r2, #128	; 0x80
 80078a0:	4393      	bics	r3, r2
 80078a2:	001a      	movs	r2, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	615a      	str	r2, [r3, #20]
}
 80078c8:	46c0      	nop			; (mov r8, r8)
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b004      	add	sp, #16
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	40000400 	.word	0x40000400
 80078d4:	40010800 	.word	0x40010800
 80078d8:	40011400 	.word	0x40011400
 80078dc:	fffffcff 	.word	0xfffffcff

080078e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	2201      	movs	r2, #1
 80078f0:	4393      	bics	r3, r2
 80078f2:	001a      	movs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2270      	movs	r2, #112	; 0x70
 800790e:	4393      	bics	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2203      	movs	r2, #3
 8007916:	4393      	bics	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	4313      	orrs	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2202      	movs	r2, #2
 8007928:	4393      	bics	r3, r2
 800792a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	621a      	str	r2, [r3, #32]
}
 8007950:	46c0      	nop			; (mov r8, r8)
 8007952:	46bd      	mov	sp, r7
 8007954:	b006      	add	sp, #24
 8007956:	bd80      	pop	{r7, pc}

08007958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	2210      	movs	r2, #16
 8007968:	4393      	bics	r3, r2
 800796a:	001a      	movs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4a13      	ldr	r2, [pc, #76]	; (80079d4 <TIM_OC2_SetConfig+0x7c>)
 8007986:	4013      	ands	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4a12      	ldr	r2, [pc, #72]	; (80079d8 <TIM_OC2_SetConfig+0x80>)
 800798e:	4013      	ands	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2220      	movs	r2, #32
 80079a2:	4393      	bics	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	621a      	str	r2, [r3, #32]
}
 80079cc:	46c0      	nop			; (mov r8, r8)
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b006      	add	sp, #24
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	ffff8fff 	.word	0xffff8fff
 80079d8:	fffffcff 	.word	0xfffffcff

080079dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	4a1a      	ldr	r2, [pc, #104]	; (8007a54 <TIM_OC3_SetConfig+0x78>)
 80079ec:	401a      	ands	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2270      	movs	r2, #112	; 0x70
 8007a08:	4393      	bics	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	4393      	bics	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	4a0d      	ldr	r2, [pc, #52]	; (8007a58 <TIM_OC3_SetConfig+0x7c>)
 8007a22:	4013      	ands	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	621a      	str	r2, [r3, #32]
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b006      	add	sp, #24
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	fffffeff 	.word	0xfffffeff
 8007a58:	fffffdff 	.word	0xfffffdff

08007a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	4a1b      	ldr	r2, [pc, #108]	; (8007ad8 <TIM_OC4_SetConfig+0x7c>)
 8007a6c:	401a      	ands	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4a15      	ldr	r2, [pc, #84]	; (8007adc <TIM_OC4_SetConfig+0x80>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4a14      	ldr	r2, [pc, #80]	; (8007ae0 <TIM_OC4_SetConfig+0x84>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	4a10      	ldr	r2, [pc, #64]	; (8007ae4 <TIM_OC4_SetConfig+0x88>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	031b      	lsls	r3, r3, #12
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	621a      	str	r2, [r3, #32]
}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	b006      	add	sp, #24
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	ffffefff 	.word	0xffffefff
 8007adc:	ffff8fff 	.word	0xffff8fff
 8007ae0:	fffffcff 	.word	0xfffffcff
 8007ae4:	ffffdfff 	.word	0xffffdfff

08007ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	2201      	movs	r2, #1
 8007b00:	4393      	bics	r3, r2
 8007b02:	001a      	movs	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	22f0      	movs	r2, #240	; 0xf0
 8007b12:	4393      	bics	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	220a      	movs	r2, #10
 8007b24:	4393      	bics	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	621a      	str	r2, [r3, #32]
}
 8007b3c:	46c0      	nop			; (mov r8, r8)
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	b006      	add	sp, #24
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	2210      	movs	r2, #16
 8007b56:	4393      	bics	r3, r2
 8007b58:	001a      	movs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ba4 <TIM_TI2_ConfigInputStage+0x60>)
 8007b6e:	4013      	ands	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	031b      	lsls	r3, r3, #12
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	22a0      	movs	r2, #160	; 0xa0
 8007b80:	4393      	bics	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	621a      	str	r2, [r3, #32]
}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	b006      	add	sp, #24
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	ffff0fff 	.word	0xffff0fff

08007ba8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2270      	movs	r2, #112	; 0x70
 8007bbc:	4393      	bics	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	2207      	movs	r2, #7
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	609a      	str	r2, [r3, #8]
}
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	b004      	add	sp, #16
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	4a09      	ldr	r2, [pc, #36]	; (8007c18 <TIM_ETR_SetConfig+0x3c>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	021a      	lsls	r2, r3, #8
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	609a      	str	r2, [r3, #8]
}
 8007c10:	46c0      	nop			; (mov r8, r8)
 8007c12:	46bd      	mov	sp, r7
 8007c14:	b006      	add	sp, #24
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	ffff00ff 	.word	0xffff00ff

08007c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	221f      	movs	r2, #31
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	2201      	movs	r2, #1
 8007c30:	409a      	lsls	r2, r3
 8007c32:	0013      	movs	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	43d2      	mvns	r2, r2
 8007c3e:	401a      	ands	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a1a      	ldr	r2, [r3, #32]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	211f      	movs	r1, #31
 8007c4c:	400b      	ands	r3, r1
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4099      	lsls	r1, r3
 8007c52:	000b      	movs	r3, r1
 8007c54:	431a      	orrs	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	621a      	str	r2, [r3, #32]
}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	b006      	add	sp, #24
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2238      	movs	r2, #56	; 0x38
 8007c72:	5c9b      	ldrb	r3, [r3, r2]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e047      	b.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2238      	movs	r2, #56	; 0x38
 8007c80:	2101      	movs	r1, #1
 8007c82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2239      	movs	r2, #57	; 0x39
 8007c88:	2102      	movs	r1, #2
 8007c8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2270      	movs	r2, #112	; 0x70
 8007ca0:	4393      	bics	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	2380      	movs	r3, #128	; 0x80
 8007cbc:	05db      	lsls	r3, r3, #23
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d00e      	beq.n	8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d009      	beq.n	8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a11      	ldr	r2, [pc, #68]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d004      	beq.n	8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a10      	ldr	r2, [pc, #64]	; (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10c      	bne.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2280      	movs	r2, #128	; 0x80
 8007ce4:	4393      	bics	r3, r2
 8007ce6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2239      	movs	r2, #57	; 0x39
 8007cfe:	2101      	movs	r1, #1
 8007d00:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2238      	movs	r2, #56	; 0x38
 8007d06:	2100      	movs	r1, #0
 8007d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b004      	add	sp, #16
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40000400 	.word	0x40000400
 8007d18:	40010800 	.word	0x40010800
 8007d1c:	40011400 	.word	0x40011400

08007d20 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2238      	movs	r2, #56	; 0x38
 8007d2e:	5c9b      	ldrb	r3, [r3, r2]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_TIMEx_RemapConfig+0x18>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e00c      	b.n	8007d52 <HAL_TIMEx_RemapConfig+0x32>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2238      	movs	r2, #56	; 0x38
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2238      	movs	r2, #56	; 0x38
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	0018      	movs	r0, r3
 8007d54:	46bd      	mov	sp, r7
 8007d56:	b002      	add	sp, #8
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e044      	b.n	8007df8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d107      	bne.n	8007d86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2274      	movs	r2, #116	; 0x74
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	0018      	movs	r0, r3
 8007d82:	f7fc fd9b 	bl	80048bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2224      	movs	r2, #36	; 0x24
 8007d8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2101      	movs	r1, #1
 8007d98:	438a      	bics	r2, r1
 8007d9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	0018      	movs	r0, r3
 8007da0:	f000 f8d8 	bl	8007f54 <UART_SetConfig>
 8007da4:	0003      	movs	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d101      	bne.n	8007dae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e024      	b.n	8007df8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	0018      	movs	r0, r3
 8007dba:	f000 fb6b 	bl	8008494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	490d      	ldr	r1, [pc, #52]	; (8007e00 <HAL_UART_Init+0xa4>)
 8007dca:	400a      	ands	r2, r1
 8007dcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	212a      	movs	r1, #42	; 0x2a
 8007dda:	438a      	bics	r2, r1
 8007ddc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2101      	movs	r1, #1
 8007dea:	430a      	orrs	r2, r1
 8007dec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f000 fc03 	bl	80085fc <UART_CheckIdleState>
 8007df6:	0003      	movs	r3, r0
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b002      	add	sp, #8
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	ffffb7ff 	.word	0xffffb7ff

08007e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	1dbb      	adds	r3, r7, #6
 8007e12:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d000      	beq.n	8007e1e <HAL_UART_Transmit+0x1a>
 8007e1c:	e095      	b.n	8007f4a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_UART_Transmit+0x28>
 8007e24:	1dbb      	adds	r3, r7, #6
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e08d      	b.n	8007f4c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	015b      	lsls	r3, r3, #5
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d109      	bne.n	8007e50 <HAL_UART_Transmit+0x4c>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d105      	bne.n	8007e50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2201      	movs	r2, #1
 8007e48:	4013      	ands	r3, r2
 8007e4a:	d001      	beq.n	8007e50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e07d      	b.n	8007f4c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2274      	movs	r2, #116	; 0x74
 8007e54:	5c9b      	ldrb	r3, [r3, r2]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_UART_Transmit+0x5a>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e076      	b.n	8007f4c <HAL_UART_Transmit+0x148>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2274      	movs	r2, #116	; 0x74
 8007e62:	2101      	movs	r1, #1
 8007e64:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2280      	movs	r2, #128	; 0x80
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2221      	movs	r2, #33	; 0x21
 8007e72:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e74:	f7fc ff9a 	bl	8004dac <HAL_GetTick>
 8007e78:	0003      	movs	r3, r0
 8007e7a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	1dba      	adds	r2, r7, #6
 8007e80:	2150      	movs	r1, #80	; 0x50
 8007e82:	8812      	ldrh	r2, [r2, #0]
 8007e84:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	1dba      	adds	r2, r7, #6
 8007e8a:	2152      	movs	r1, #82	; 0x52
 8007e8c:	8812      	ldrh	r2, [r2, #0]
 8007e8e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	2380      	movs	r3, #128	; 0x80
 8007e96:	015b      	lsls	r3, r3, #5
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d108      	bne.n	8007eae <HAL_UART_Transmit+0xaa>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d104      	bne.n	8007eae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	61bb      	str	r3, [r7, #24]
 8007eac:	e003      	b.n	8007eb6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2274      	movs	r2, #116	; 0x74
 8007eba:	2100      	movs	r1, #0
 8007ebc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007ebe:	e02c      	b.n	8007f1a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	0013      	movs	r3, r2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2180      	movs	r1, #128	; 0x80
 8007ece:	f000 fbdd 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 8007ed2:	1e03      	subs	r3, r0, #0
 8007ed4:	d001      	beq.n	8007eda <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e038      	b.n	8007f4c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10b      	bne.n	8007ef8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	001a      	movs	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	05d2      	lsls	r2, r2, #23
 8007eec:	0dd2      	lsrs	r2, r2, #23
 8007eee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	e007      	b.n	8007f08 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	3301      	adds	r3, #1
 8007f06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2252      	movs	r2, #82	; 0x52
 8007f0c:	5a9b      	ldrh	r3, [r3, r2]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b299      	uxth	r1, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2252      	movs	r2, #82	; 0x52
 8007f18:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2252      	movs	r2, #82	; 0x52
 8007f1e:	5a9b      	ldrh	r3, [r3, r2]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1cc      	bne.n	8007ec0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	0013      	movs	r3, r2
 8007f30:	2200      	movs	r2, #0
 8007f32:	2140      	movs	r1, #64	; 0x40
 8007f34:	f000 fbaa 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 8007f38:	1e03      	subs	r3, r0, #0
 8007f3a:	d001      	beq.n	8007f40 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e005      	b.n	8007f4c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	e000      	b.n	8007f4c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8007f4a:	2302      	movs	r3, #2
  }
}
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	b008      	add	sp, #32
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f54:	b5b0      	push	{r4, r5, r7, lr}
 8007f56:	b08e      	sub	sp, #56	; 0x38
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f5c:	231a      	movs	r3, #26
 8007f5e:	2218      	movs	r2, #24
 8007f60:	189b      	adds	r3, r3, r2
 8007f62:	19db      	adds	r3, r3, r7
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	431a      	orrs	r2, r3
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	431a      	orrs	r2, r3
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4ac3      	ldr	r2, [pc, #780]	; (8008294 <UART_SetConfig+0x340>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	0019      	movs	r1, r3
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f92:	430a      	orrs	r2, r1
 8007f94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4abe      	ldr	r2, [pc, #760]	; (8008298 <UART_SetConfig+0x344>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	0019      	movs	r1, r3
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4ab8      	ldr	r2, [pc, #736]	; (800829c <UART_SetConfig+0x348>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	4ab4      	ldr	r2, [pc, #720]	; (80082a0 <UART_SetConfig+0x34c>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	0019      	movs	r1, r3
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4ab0      	ldr	r2, [pc, #704]	; (80082a4 <UART_SetConfig+0x350>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d131      	bne.n	800804c <UART_SetConfig+0xf8>
 8007fe8:	4baf      	ldr	r3, [pc, #700]	; (80082a8 <UART_SetConfig+0x354>)
 8007fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fec:	2203      	movs	r2, #3
 8007fee:	4013      	ands	r3, r2
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d01d      	beq.n	8008030 <UART_SetConfig+0xdc>
 8007ff4:	d823      	bhi.n	800803e <UART_SetConfig+0xea>
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d00c      	beq.n	8008014 <UART_SetConfig+0xc0>
 8007ffa:	d820      	bhi.n	800803e <UART_SetConfig+0xea>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <UART_SetConfig+0xb2>
 8008000:	2b01      	cmp	r3, #1
 8008002:	d00e      	beq.n	8008022 <UART_SetConfig+0xce>
 8008004:	e01b      	b.n	800803e <UART_SetConfig+0xea>
 8008006:	231b      	movs	r3, #27
 8008008:	2218      	movs	r2, #24
 800800a:	189b      	adds	r3, r3, r2
 800800c:	19db      	adds	r3, r3, r7
 800800e:	2201      	movs	r2, #1
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	e0b4      	b.n	800817e <UART_SetConfig+0x22a>
 8008014:	231b      	movs	r3, #27
 8008016:	2218      	movs	r2, #24
 8008018:	189b      	adds	r3, r3, r2
 800801a:	19db      	adds	r3, r3, r7
 800801c:	2202      	movs	r2, #2
 800801e:	701a      	strb	r2, [r3, #0]
 8008020:	e0ad      	b.n	800817e <UART_SetConfig+0x22a>
 8008022:	231b      	movs	r3, #27
 8008024:	2218      	movs	r2, #24
 8008026:	189b      	adds	r3, r3, r2
 8008028:	19db      	adds	r3, r3, r7
 800802a:	2204      	movs	r2, #4
 800802c:	701a      	strb	r2, [r3, #0]
 800802e:	e0a6      	b.n	800817e <UART_SetConfig+0x22a>
 8008030:	231b      	movs	r3, #27
 8008032:	2218      	movs	r2, #24
 8008034:	189b      	adds	r3, r3, r2
 8008036:	19db      	adds	r3, r3, r7
 8008038:	2208      	movs	r2, #8
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	e09f      	b.n	800817e <UART_SetConfig+0x22a>
 800803e:	231b      	movs	r3, #27
 8008040:	2218      	movs	r2, #24
 8008042:	189b      	adds	r3, r3, r2
 8008044:	19db      	adds	r3, r3, r7
 8008046:	2210      	movs	r2, #16
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	e098      	b.n	800817e <UART_SetConfig+0x22a>
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a96      	ldr	r2, [pc, #600]	; (80082ac <UART_SetConfig+0x358>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d131      	bne.n	80080ba <UART_SetConfig+0x166>
 8008056:	4b94      	ldr	r3, [pc, #592]	; (80082a8 <UART_SetConfig+0x354>)
 8008058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805a:	220c      	movs	r2, #12
 800805c:	4013      	ands	r3, r2
 800805e:	2b0c      	cmp	r3, #12
 8008060:	d01d      	beq.n	800809e <UART_SetConfig+0x14a>
 8008062:	d823      	bhi.n	80080ac <UART_SetConfig+0x158>
 8008064:	2b08      	cmp	r3, #8
 8008066:	d00c      	beq.n	8008082 <UART_SetConfig+0x12e>
 8008068:	d820      	bhi.n	80080ac <UART_SetConfig+0x158>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <UART_SetConfig+0x120>
 800806e:	2b04      	cmp	r3, #4
 8008070:	d00e      	beq.n	8008090 <UART_SetConfig+0x13c>
 8008072:	e01b      	b.n	80080ac <UART_SetConfig+0x158>
 8008074:	231b      	movs	r3, #27
 8008076:	2218      	movs	r2, #24
 8008078:	189b      	adds	r3, r3, r2
 800807a:	19db      	adds	r3, r3, r7
 800807c:	2200      	movs	r2, #0
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	e07d      	b.n	800817e <UART_SetConfig+0x22a>
 8008082:	231b      	movs	r3, #27
 8008084:	2218      	movs	r2, #24
 8008086:	189b      	adds	r3, r3, r2
 8008088:	19db      	adds	r3, r3, r7
 800808a:	2202      	movs	r2, #2
 800808c:	701a      	strb	r2, [r3, #0]
 800808e:	e076      	b.n	800817e <UART_SetConfig+0x22a>
 8008090:	231b      	movs	r3, #27
 8008092:	2218      	movs	r2, #24
 8008094:	189b      	adds	r3, r3, r2
 8008096:	19db      	adds	r3, r3, r7
 8008098:	2204      	movs	r2, #4
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	e06f      	b.n	800817e <UART_SetConfig+0x22a>
 800809e:	231b      	movs	r3, #27
 80080a0:	2218      	movs	r2, #24
 80080a2:	189b      	adds	r3, r3, r2
 80080a4:	19db      	adds	r3, r3, r7
 80080a6:	2208      	movs	r2, #8
 80080a8:	701a      	strb	r2, [r3, #0]
 80080aa:	e068      	b.n	800817e <UART_SetConfig+0x22a>
 80080ac:	231b      	movs	r3, #27
 80080ae:	2218      	movs	r2, #24
 80080b0:	189b      	adds	r3, r3, r2
 80080b2:	19db      	adds	r3, r3, r7
 80080b4:	2210      	movs	r2, #16
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	e061      	b.n	800817e <UART_SetConfig+0x22a>
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a7c      	ldr	r2, [pc, #496]	; (80082b0 <UART_SetConfig+0x35c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d106      	bne.n	80080d2 <UART_SetConfig+0x17e>
 80080c4:	231b      	movs	r3, #27
 80080c6:	2218      	movs	r2, #24
 80080c8:	189b      	adds	r3, r3, r2
 80080ca:	19db      	adds	r3, r3, r7
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
 80080d0:	e055      	b.n	800817e <UART_SetConfig+0x22a>
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a77      	ldr	r2, [pc, #476]	; (80082b4 <UART_SetConfig+0x360>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d106      	bne.n	80080ea <UART_SetConfig+0x196>
 80080dc:	231b      	movs	r3, #27
 80080de:	2218      	movs	r2, #24
 80080e0:	189b      	adds	r3, r3, r2
 80080e2:	19db      	adds	r3, r3, r7
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	e049      	b.n	800817e <UART_SetConfig+0x22a>
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a6b      	ldr	r2, [pc, #428]	; (800829c <UART_SetConfig+0x348>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d13e      	bne.n	8008172 <UART_SetConfig+0x21e>
 80080f4:	4b6c      	ldr	r3, [pc, #432]	; (80082a8 <UART_SetConfig+0x354>)
 80080f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080f8:	23c0      	movs	r3, #192	; 0xc0
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	4013      	ands	r3, r2
 80080fe:	22c0      	movs	r2, #192	; 0xc0
 8008100:	0112      	lsls	r2, r2, #4
 8008102:	4293      	cmp	r3, r2
 8008104:	d027      	beq.n	8008156 <UART_SetConfig+0x202>
 8008106:	22c0      	movs	r2, #192	; 0xc0
 8008108:	0112      	lsls	r2, r2, #4
 800810a:	4293      	cmp	r3, r2
 800810c:	d82a      	bhi.n	8008164 <UART_SetConfig+0x210>
 800810e:	2280      	movs	r2, #128	; 0x80
 8008110:	0112      	lsls	r2, r2, #4
 8008112:	4293      	cmp	r3, r2
 8008114:	d011      	beq.n	800813a <UART_SetConfig+0x1e6>
 8008116:	2280      	movs	r2, #128	; 0x80
 8008118:	0112      	lsls	r2, r2, #4
 800811a:	4293      	cmp	r3, r2
 800811c:	d822      	bhi.n	8008164 <UART_SetConfig+0x210>
 800811e:	2b00      	cmp	r3, #0
 8008120:	d004      	beq.n	800812c <UART_SetConfig+0x1d8>
 8008122:	2280      	movs	r2, #128	; 0x80
 8008124:	00d2      	lsls	r2, r2, #3
 8008126:	4293      	cmp	r3, r2
 8008128:	d00e      	beq.n	8008148 <UART_SetConfig+0x1f4>
 800812a:	e01b      	b.n	8008164 <UART_SetConfig+0x210>
 800812c:	231b      	movs	r3, #27
 800812e:	2218      	movs	r2, #24
 8008130:	189b      	adds	r3, r3, r2
 8008132:	19db      	adds	r3, r3, r7
 8008134:	2200      	movs	r2, #0
 8008136:	701a      	strb	r2, [r3, #0]
 8008138:	e021      	b.n	800817e <UART_SetConfig+0x22a>
 800813a:	231b      	movs	r3, #27
 800813c:	2218      	movs	r2, #24
 800813e:	189b      	adds	r3, r3, r2
 8008140:	19db      	adds	r3, r3, r7
 8008142:	2202      	movs	r2, #2
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	e01a      	b.n	800817e <UART_SetConfig+0x22a>
 8008148:	231b      	movs	r3, #27
 800814a:	2218      	movs	r2, #24
 800814c:	189b      	adds	r3, r3, r2
 800814e:	19db      	adds	r3, r3, r7
 8008150:	2204      	movs	r2, #4
 8008152:	701a      	strb	r2, [r3, #0]
 8008154:	e013      	b.n	800817e <UART_SetConfig+0x22a>
 8008156:	231b      	movs	r3, #27
 8008158:	2218      	movs	r2, #24
 800815a:	189b      	adds	r3, r3, r2
 800815c:	19db      	adds	r3, r3, r7
 800815e:	2208      	movs	r2, #8
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	e00c      	b.n	800817e <UART_SetConfig+0x22a>
 8008164:	231b      	movs	r3, #27
 8008166:	2218      	movs	r2, #24
 8008168:	189b      	adds	r3, r3, r2
 800816a:	19db      	adds	r3, r3, r7
 800816c:	2210      	movs	r2, #16
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	e005      	b.n	800817e <UART_SetConfig+0x22a>
 8008172:	231b      	movs	r3, #27
 8008174:	2218      	movs	r2, #24
 8008176:	189b      	adds	r3, r3, r2
 8008178:	19db      	adds	r3, r3, r7
 800817a:	2210      	movs	r2, #16
 800817c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a46      	ldr	r2, [pc, #280]	; (800829c <UART_SetConfig+0x348>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d000      	beq.n	800818a <UART_SetConfig+0x236>
 8008188:	e09a      	b.n	80082c0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800818a:	231b      	movs	r3, #27
 800818c:	2218      	movs	r2, #24
 800818e:	189b      	adds	r3, r3, r2
 8008190:	19db      	adds	r3, r3, r7
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b08      	cmp	r3, #8
 8008196:	d01d      	beq.n	80081d4 <UART_SetConfig+0x280>
 8008198:	dc20      	bgt.n	80081dc <UART_SetConfig+0x288>
 800819a:	2b04      	cmp	r3, #4
 800819c:	d015      	beq.n	80081ca <UART_SetConfig+0x276>
 800819e:	dc1d      	bgt.n	80081dc <UART_SetConfig+0x288>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <UART_SetConfig+0x256>
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d005      	beq.n	80081b4 <UART_SetConfig+0x260>
 80081a8:	e018      	b.n	80081dc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081aa:	f7fe fd3f 	bl	8006c2c <HAL_RCC_GetPCLK1Freq>
 80081ae:	0003      	movs	r3, r0
 80081b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081b2:	e01c      	b.n	80081ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081b4:	4b3c      	ldr	r3, [pc, #240]	; (80082a8 <UART_SetConfig+0x354>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2210      	movs	r2, #16
 80081ba:	4013      	ands	r3, r2
 80081bc:	d002      	beq.n	80081c4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80081be:	4b3e      	ldr	r3, [pc, #248]	; (80082b8 <UART_SetConfig+0x364>)
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081c2:	e014      	b.n	80081ee <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80081c4:	4b3d      	ldr	r3, [pc, #244]	; (80082bc <UART_SetConfig+0x368>)
 80081c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081c8:	e011      	b.n	80081ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ca:	f7fe fc7f 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 80081ce:	0003      	movs	r3, r0
 80081d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081d2:	e00c      	b.n	80081ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d4:	2380      	movs	r3, #128	; 0x80
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081da:	e008      	b.n	80081ee <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80081e0:	231a      	movs	r3, #26
 80081e2:	2218      	movs	r2, #24
 80081e4:	189b      	adds	r3, r3, r2
 80081e6:	19db      	adds	r3, r3, r7
 80081e8:	2201      	movs	r2, #1
 80081ea:	701a      	strb	r2, [r3, #0]
        break;
 80081ec:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d100      	bne.n	80081f6 <UART_SetConfig+0x2a2>
 80081f4:	e134      	b.n	8008460 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	0013      	movs	r3, r2
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008202:	429a      	cmp	r2, r3
 8008204:	d305      	bcc.n	8008212 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800820c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820e:	429a      	cmp	r2, r3
 8008210:	d906      	bls.n	8008220 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8008212:	231a      	movs	r3, #26
 8008214:	2218      	movs	r2, #24
 8008216:	189b      	adds	r3, r3, r2
 8008218:	19db      	adds	r3, r3, r7
 800821a:	2201      	movs	r2, #1
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	e11f      	b.n	8008460 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	6939      	ldr	r1, [r7, #16]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	000b      	movs	r3, r1
 800822e:	0e1b      	lsrs	r3, r3, #24
 8008230:	0010      	movs	r0, r2
 8008232:	0205      	lsls	r5, r0, #8
 8008234:	431d      	orrs	r5, r3
 8008236:	000b      	movs	r3, r1
 8008238:	021c      	lsls	r4, r3, #8
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	60bb      	str	r3, [r7, #8]
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	68b8      	ldr	r0, [r7, #8]
 8008248:	68f9      	ldr	r1, [r7, #12]
 800824a:	1900      	adds	r0, r0, r4
 800824c:	4169      	adcs	r1, r5
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	607b      	str	r3, [r7, #4]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f7f8 f95e 	bl	800051c <__aeabi_uldivmod>
 8008260:	0002      	movs	r2, r0
 8008262:	000b      	movs	r3, r1
 8008264:	0013      	movs	r3, r2
 8008266:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800826a:	23c0      	movs	r3, #192	; 0xc0
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	429a      	cmp	r2, r3
 8008270:	d309      	bcc.n	8008286 <UART_SetConfig+0x332>
 8008272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008274:	2380      	movs	r3, #128	; 0x80
 8008276:	035b      	lsls	r3, r3, #13
 8008278:	429a      	cmp	r2, r3
 800827a:	d204      	bcs.n	8008286 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008282:	60da      	str	r2, [r3, #12]
 8008284:	e0ec      	b.n	8008460 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8008286:	231a      	movs	r3, #26
 8008288:	2218      	movs	r2, #24
 800828a:	189b      	adds	r3, r3, r2
 800828c:	19db      	adds	r3, r3, r7
 800828e:	2201      	movs	r2, #1
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e0e5      	b.n	8008460 <UART_SetConfig+0x50c>
 8008294:	efff69f3 	.word	0xefff69f3
 8008298:	ffffcfff 	.word	0xffffcfff
 800829c:	40004800 	.word	0x40004800
 80082a0:	fffff4ff 	.word	0xfffff4ff
 80082a4:	40013800 	.word	0x40013800
 80082a8:	40021000 	.word	0x40021000
 80082ac:	40004400 	.word	0x40004400
 80082b0:	40004c00 	.word	0x40004c00
 80082b4:	40005000 	.word	0x40005000
 80082b8:	003d0900 	.word	0x003d0900
 80082bc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	2380      	movs	r3, #128	; 0x80
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d000      	beq.n	80082ce <UART_SetConfig+0x37a>
 80082cc:	e071      	b.n	80083b2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80082ce:	231b      	movs	r3, #27
 80082d0:	2218      	movs	r2, #24
 80082d2:	189b      	adds	r3, r3, r2
 80082d4:	19db      	adds	r3, r3, r7
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d822      	bhi.n	8008322 <UART_SetConfig+0x3ce>
 80082dc:	009a      	lsls	r2, r3, #2
 80082de:	4b68      	ldr	r3, [pc, #416]	; (8008480 <UART_SetConfig+0x52c>)
 80082e0:	18d3      	adds	r3, r2, r3
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082e6:	f7fe fca1 	bl	8006c2c <HAL_RCC_GetPCLK1Freq>
 80082ea:	0003      	movs	r3, r0
 80082ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082ee:	e021      	b.n	8008334 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f0:	f7fe fcb2 	bl	8006c58 <HAL_RCC_GetPCLK2Freq>
 80082f4:	0003      	movs	r3, r0
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082f8:	e01c      	b.n	8008334 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082fa:	4b62      	ldr	r3, [pc, #392]	; (8008484 <UART_SetConfig+0x530>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2210      	movs	r2, #16
 8008300:	4013      	ands	r3, r2
 8008302:	d002      	beq.n	800830a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008304:	4b60      	ldr	r3, [pc, #384]	; (8008488 <UART_SetConfig+0x534>)
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008308:	e014      	b.n	8008334 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800830a:	4b60      	ldr	r3, [pc, #384]	; (800848c <UART_SetConfig+0x538>)
 800830c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800830e:	e011      	b.n	8008334 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008310:	f7fe fbdc 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8008314:	0003      	movs	r3, r0
 8008316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008318:	e00c      	b.n	8008334 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800831a:	2380      	movs	r3, #128	; 0x80
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008320:	e008      	b.n	8008334 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008326:	231a      	movs	r3, #26
 8008328:	2218      	movs	r2, #24
 800832a:	189b      	adds	r3, r3, r2
 800832c:	19db      	adds	r3, r3, r7
 800832e:	2201      	movs	r2, #1
 8008330:	701a      	strb	r2, [r3, #0]
        break;
 8008332:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d100      	bne.n	800833c <UART_SetConfig+0x3e8>
 800833a:	e091      	b.n	8008460 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	005a      	lsls	r2, r3, #1
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	18d2      	adds	r2, r2, r3
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	0019      	movs	r1, r3
 800834e:	0010      	movs	r0, r2
 8008350:	f7f7 fef6 	bl	8000140 <__udivsi3>
 8008354:	0003      	movs	r3, r0
 8008356:	b29b      	uxth	r3, r3
 8008358:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	2b0f      	cmp	r3, #15
 800835e:	d921      	bls.n	80083a4 <UART_SetConfig+0x450>
 8008360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008362:	2380      	movs	r3, #128	; 0x80
 8008364:	025b      	lsls	r3, r3, #9
 8008366:	429a      	cmp	r2, r3
 8008368:	d21c      	bcs.n	80083a4 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	b29a      	uxth	r2, r3
 800836e:	200e      	movs	r0, #14
 8008370:	2418      	movs	r4, #24
 8008372:	1903      	adds	r3, r0, r4
 8008374:	19db      	adds	r3, r3, r7
 8008376:	210f      	movs	r1, #15
 8008378:	438a      	bics	r2, r1
 800837a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	b29b      	uxth	r3, r3
 8008382:	2207      	movs	r2, #7
 8008384:	4013      	ands	r3, r2
 8008386:	b299      	uxth	r1, r3
 8008388:	1903      	adds	r3, r0, r4
 800838a:	19db      	adds	r3, r3, r7
 800838c:	1902      	adds	r2, r0, r4
 800838e:	19d2      	adds	r2, r2, r7
 8008390:	8812      	ldrh	r2, [r2, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	1902      	adds	r2, r0, r4
 800839c:	19d2      	adds	r2, r2, r7
 800839e:	8812      	ldrh	r2, [r2, #0]
 80083a0:	60da      	str	r2, [r3, #12]
 80083a2:	e05d      	b.n	8008460 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80083a4:	231a      	movs	r3, #26
 80083a6:	2218      	movs	r2, #24
 80083a8:	189b      	adds	r3, r3, r2
 80083aa:	19db      	adds	r3, r3, r7
 80083ac:	2201      	movs	r2, #1
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	e056      	b.n	8008460 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083b2:	231b      	movs	r3, #27
 80083b4:	2218      	movs	r2, #24
 80083b6:	189b      	adds	r3, r3, r2
 80083b8:	19db      	adds	r3, r3, r7
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d822      	bhi.n	8008406 <UART_SetConfig+0x4b2>
 80083c0:	009a      	lsls	r2, r3, #2
 80083c2:	4b33      	ldr	r3, [pc, #204]	; (8008490 <UART_SetConfig+0x53c>)
 80083c4:	18d3      	adds	r3, r2, r3
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ca:	f7fe fc2f 	bl	8006c2c <HAL_RCC_GetPCLK1Freq>
 80083ce:	0003      	movs	r3, r0
 80083d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083d2:	e021      	b.n	8008418 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083d4:	f7fe fc40 	bl	8006c58 <HAL_RCC_GetPCLK2Freq>
 80083d8:	0003      	movs	r3, r0
 80083da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083dc:	e01c      	b.n	8008418 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083de:	4b29      	ldr	r3, [pc, #164]	; (8008484 <UART_SetConfig+0x530>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2210      	movs	r2, #16
 80083e4:	4013      	ands	r3, r2
 80083e6:	d002      	beq.n	80083ee <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80083e8:	4b27      	ldr	r3, [pc, #156]	; (8008488 <UART_SetConfig+0x534>)
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083ec:	e014      	b.n	8008418 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80083ee:	4b27      	ldr	r3, [pc, #156]	; (800848c <UART_SetConfig+0x538>)
 80083f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083f2:	e011      	b.n	8008418 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083f4:	f7fe fb6a 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 80083f8:	0003      	movs	r3, r0
 80083fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083fc:	e00c      	b.n	8008418 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083fe:	2380      	movs	r3, #128	; 0x80
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008404:	e008      	b.n	8008418 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800840a:	231a      	movs	r3, #26
 800840c:	2218      	movs	r2, #24
 800840e:	189b      	adds	r3, r3, r2
 8008410:	19db      	adds	r3, r3, r7
 8008412:	2201      	movs	r2, #1
 8008414:	701a      	strb	r2, [r3, #0]
        break;
 8008416:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d020      	beq.n	8008460 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	085a      	lsrs	r2, r3, #1
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	18d2      	adds	r2, r2, r3
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	0019      	movs	r1, r3
 800842e:	0010      	movs	r0, r2
 8008430:	f7f7 fe86 	bl	8000140 <__udivsi3>
 8008434:	0003      	movs	r3, r0
 8008436:	b29b      	uxth	r3, r3
 8008438:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	2b0f      	cmp	r3, #15
 800843e:	d909      	bls.n	8008454 <UART_SetConfig+0x500>
 8008440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008442:	2380      	movs	r3, #128	; 0x80
 8008444:	025b      	lsls	r3, r3, #9
 8008446:	429a      	cmp	r2, r3
 8008448:	d204      	bcs.n	8008454 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008450:	60da      	str	r2, [r3, #12]
 8008452:	e005      	b.n	8008460 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8008454:	231a      	movs	r3, #26
 8008456:	2218      	movs	r2, #24
 8008458:	189b      	adds	r3, r3, r2
 800845a:	19db      	adds	r3, r3, r7
 800845c:	2201      	movs	r2, #1
 800845e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2200      	movs	r2, #0
 8008464:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	2200      	movs	r2, #0
 800846a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800846c:	231a      	movs	r3, #26
 800846e:	2218      	movs	r2, #24
 8008470:	189b      	adds	r3, r3, r2
 8008472:	19db      	adds	r3, r3, r7
 8008474:	781b      	ldrb	r3, [r3, #0]
}
 8008476:	0018      	movs	r0, r3
 8008478:	46bd      	mov	sp, r7
 800847a:	b00e      	add	sp, #56	; 0x38
 800847c:	bdb0      	pop	{r4, r5, r7, pc}
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	0800b9ac 	.word	0x0800b9ac
 8008484:	40021000 	.word	0x40021000
 8008488:	003d0900 	.word	0x003d0900
 800848c:	00f42400 	.word	0x00f42400
 8008490:	0800b9d0 	.word	0x0800b9d0

08008494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2201      	movs	r2, #1
 80084a2:	4013      	ands	r3, r2
 80084a4:	d00b      	beq.n	80084be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	4a4a      	ldr	r2, [pc, #296]	; (80085d8 <UART_AdvFeatureConfig+0x144>)
 80084ae:	4013      	ands	r3, r2
 80084b0:	0019      	movs	r1, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2202      	movs	r2, #2
 80084c4:	4013      	ands	r3, r2
 80084c6:	d00b      	beq.n	80084e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	4a43      	ldr	r2, [pc, #268]	; (80085dc <UART_AdvFeatureConfig+0x148>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	0019      	movs	r1, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	2204      	movs	r2, #4
 80084e6:	4013      	ands	r3, r2
 80084e8:	d00b      	beq.n	8008502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	4a3b      	ldr	r2, [pc, #236]	; (80085e0 <UART_AdvFeatureConfig+0x14c>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	0019      	movs	r1, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	2208      	movs	r2, #8
 8008508:	4013      	ands	r3, r2
 800850a:	d00b      	beq.n	8008524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4a34      	ldr	r2, [pc, #208]	; (80085e4 <UART_AdvFeatureConfig+0x150>)
 8008514:	4013      	ands	r3, r2
 8008516:	0019      	movs	r1, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	2210      	movs	r2, #16
 800852a:	4013      	ands	r3, r2
 800852c:	d00b      	beq.n	8008546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	4a2c      	ldr	r2, [pc, #176]	; (80085e8 <UART_AdvFeatureConfig+0x154>)
 8008536:	4013      	ands	r3, r2
 8008538:	0019      	movs	r1, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	2220      	movs	r2, #32
 800854c:	4013      	ands	r3, r2
 800854e:	d00b      	beq.n	8008568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	4a25      	ldr	r2, [pc, #148]	; (80085ec <UART_AdvFeatureConfig+0x158>)
 8008558:	4013      	ands	r3, r2
 800855a:	0019      	movs	r1, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	2240      	movs	r2, #64	; 0x40
 800856e:	4013      	ands	r3, r2
 8008570:	d01d      	beq.n	80085ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	4a1d      	ldr	r2, [pc, #116]	; (80085f0 <UART_AdvFeatureConfig+0x15c>)
 800857a:	4013      	ands	r3, r2
 800857c:	0019      	movs	r1, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800858e:	2380      	movs	r3, #128	; 0x80
 8008590:	035b      	lsls	r3, r3, #13
 8008592:	429a      	cmp	r2, r3
 8008594:	d10b      	bne.n	80085ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	4a15      	ldr	r2, [pc, #84]	; (80085f4 <UART_AdvFeatureConfig+0x160>)
 800859e:	4013      	ands	r3, r2
 80085a0:	0019      	movs	r1, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	2280      	movs	r2, #128	; 0x80
 80085b4:	4013      	ands	r3, r2
 80085b6:	d00b      	beq.n	80085d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	4a0e      	ldr	r2, [pc, #56]	; (80085f8 <UART_AdvFeatureConfig+0x164>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	0019      	movs	r1, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	430a      	orrs	r2, r1
 80085ce:	605a      	str	r2, [r3, #4]
  }
}
 80085d0:	46c0      	nop			; (mov r8, r8)
 80085d2:	46bd      	mov	sp, r7
 80085d4:	b002      	add	sp, #8
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	fffdffff 	.word	0xfffdffff
 80085dc:	fffeffff 	.word	0xfffeffff
 80085e0:	fffbffff 	.word	0xfffbffff
 80085e4:	ffff7fff 	.word	0xffff7fff
 80085e8:	ffffefff 	.word	0xffffefff
 80085ec:	ffffdfff 	.word	0xffffdfff
 80085f0:	ffefffff 	.word	0xffefffff
 80085f4:	ff9fffff 	.word	0xff9fffff
 80085f8:	fff7ffff 	.word	0xfff7ffff

080085fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af02      	add	r7, sp, #8
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2280      	movs	r2, #128	; 0x80
 8008608:	2100      	movs	r1, #0
 800860a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800860c:	f7fc fbce 	bl	8004dac <HAL_GetTick>
 8008610:	0003      	movs	r3, r0
 8008612:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2208      	movs	r2, #8
 800861c:	4013      	ands	r3, r2
 800861e:	2b08      	cmp	r3, #8
 8008620:	d10c      	bne.n	800863c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2280      	movs	r2, #128	; 0x80
 8008626:	0391      	lsls	r1, r2, #14
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	4a17      	ldr	r2, [pc, #92]	; (8008688 <UART_CheckIdleState+0x8c>)
 800862c:	9200      	str	r2, [sp, #0]
 800862e:	2200      	movs	r2, #0
 8008630:	f000 f82c 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 8008634:	1e03      	subs	r3, r0, #0
 8008636:	d001      	beq.n	800863c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e021      	b.n	8008680 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2204      	movs	r2, #4
 8008644:	4013      	ands	r3, r2
 8008646:	2b04      	cmp	r3, #4
 8008648:	d10c      	bne.n	8008664 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2280      	movs	r2, #128	; 0x80
 800864e:	03d1      	lsls	r1, r2, #15
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4a0d      	ldr	r2, [pc, #52]	; (8008688 <UART_CheckIdleState+0x8c>)
 8008654:	9200      	str	r2, [sp, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	f000 f818 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 800865c:	1e03      	subs	r3, r0, #0
 800865e:	d001      	beq.n	8008664 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e00d      	b.n	8008680 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2220      	movs	r2, #32
 8008668:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2274      	movs	r2, #116	; 0x74
 800867a:	2100      	movs	r1, #0
 800867c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	0018      	movs	r0, r3
 8008682:	46bd      	mov	sp, r7
 8008684:	b004      	add	sp, #16
 8008686:	bd80      	pop	{r7, pc}
 8008688:	01ffffff 	.word	0x01ffffff

0800868c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b094      	sub	sp, #80	; 0x50
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	1dfb      	adds	r3, r7, #7
 800869a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800869c:	e0a3      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800869e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086a0:	3301      	adds	r3, #1
 80086a2:	d100      	bne.n	80086a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80086a4:	e09f      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a6:	f7fc fb81 	bl	8004dac <HAL_GetTick>
 80086aa:	0002      	movs	r2, r0
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d302      	bcc.n	80086bc <UART_WaitOnFlagUntilTimeout+0x30>
 80086b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d13d      	bne.n	8008738 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086bc:	f3ef 8310 	mrs	r3, PRIMASK
 80086c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80086c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086c4:	647b      	str	r3, [r7, #68]	; 0x44
 80086c6:	2301      	movs	r3, #1
 80086c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	f383 8810 	msr	PRIMASK, r3
}
 80086d0:	46c0      	nop			; (mov r8, r8)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	494c      	ldr	r1, [pc, #304]	; (8008810 <UART_WaitOnFlagUntilTimeout+0x184>)
 80086de:	400a      	ands	r2, r1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	f383 8810 	msr	PRIMASK, r3
}
 80086ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ee:	f3ef 8310 	mrs	r3, PRIMASK
 80086f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80086f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f6:	643b      	str	r3, [r7, #64]	; 0x40
 80086f8:	2301      	movs	r3, #1
 80086fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	f383 8810 	msr	PRIMASK, r3
}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2101      	movs	r1, #1
 8008710:	438a      	bics	r2, r1
 8008712:	609a      	str	r2, [r3, #8]
 8008714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008716:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871a:	f383 8810 	msr	PRIMASK, r3
}
 800871e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2220      	movs	r2, #32
 8008724:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2220      	movs	r2, #32
 800872a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2274      	movs	r2, #116	; 0x74
 8008730:	2100      	movs	r1, #0
 8008732:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e067      	b.n	8008808 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2204      	movs	r2, #4
 8008740:	4013      	ands	r3, r2
 8008742:	d050      	beq.n	80087e6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69da      	ldr	r2, [r3, #28]
 800874a:	2380      	movs	r3, #128	; 0x80
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	401a      	ands	r2, r3
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	429a      	cmp	r2, r3
 8008756:	d146      	bne.n	80087e6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2280      	movs	r2, #128	; 0x80
 800875e:	0112      	lsls	r2, r2, #4
 8008760:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008762:	f3ef 8310 	mrs	r3, PRIMASK
 8008766:	613b      	str	r3, [r7, #16]
  return(result);
 8008768:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800876a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800876c:	2301      	movs	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f383 8810 	msr	PRIMASK, r3
}
 8008776:	46c0      	nop			; (mov r8, r8)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4923      	ldr	r1, [pc, #140]	; (8008810 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008784:	400a      	ands	r2, r1
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	f383 8810 	msr	PRIMASK, r3
}
 8008792:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008794:	f3ef 8310 	mrs	r3, PRIMASK
 8008798:	61fb      	str	r3, [r7, #28]
  return(result);
 800879a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879c:	64bb      	str	r3, [r7, #72]	; 0x48
 800879e:	2301      	movs	r3, #1
 80087a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	f383 8810 	msr	PRIMASK, r3
}
 80087a8:	46c0      	nop			; (mov r8, r8)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2101      	movs	r1, #1
 80087b6:	438a      	bics	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]
 80087ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	f383 8810 	msr	PRIMASK, r3
}
 80087c4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2220      	movs	r2, #32
 80087ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2280      	movs	r2, #128	; 0x80
 80087d6:	2120      	movs	r1, #32
 80087d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2274      	movs	r2, #116	; 0x74
 80087de:	2100      	movs	r1, #0
 80087e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e010      	b.n	8008808 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	4013      	ands	r3, r2
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	425a      	negs	r2, r3
 80087f6:	4153      	adcs	r3, r2
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	001a      	movs	r2, r3
 80087fc:	1dfb      	adds	r3, r7, #7
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d100      	bne.n	8008806 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008804:	e74b      	b.n	800869e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	0018      	movs	r0, r3
 800880a:	46bd      	mov	sp, r7
 800880c:	b014      	add	sp, #80	; 0x50
 800880e:	bd80      	pop	{r7, pc}
 8008810:	fffffe5f 	.word	0xfffffe5f

08008814 <__errno>:
 8008814:	4b01      	ldr	r3, [pc, #4]	; (800881c <__errno+0x8>)
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	4770      	bx	lr
 800881a:	46c0      	nop			; (mov r8, r8)
 800881c:	20000010 	.word	0x20000010

08008820 <__libc_init_array>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	2600      	movs	r6, #0
 8008824:	4d0c      	ldr	r5, [pc, #48]	; (8008858 <__libc_init_array+0x38>)
 8008826:	4c0d      	ldr	r4, [pc, #52]	; (800885c <__libc_init_array+0x3c>)
 8008828:	1b64      	subs	r4, r4, r5
 800882a:	10a4      	asrs	r4, r4, #2
 800882c:	42a6      	cmp	r6, r4
 800882e:	d109      	bne.n	8008844 <__libc_init_array+0x24>
 8008830:	2600      	movs	r6, #0
 8008832:	f002 ffbd 	bl	800b7b0 <_init>
 8008836:	4d0a      	ldr	r5, [pc, #40]	; (8008860 <__libc_init_array+0x40>)
 8008838:	4c0a      	ldr	r4, [pc, #40]	; (8008864 <__libc_init_array+0x44>)
 800883a:	1b64      	subs	r4, r4, r5
 800883c:	10a4      	asrs	r4, r4, #2
 800883e:	42a6      	cmp	r6, r4
 8008840:	d105      	bne.n	800884e <__libc_init_array+0x2e>
 8008842:	bd70      	pop	{r4, r5, r6, pc}
 8008844:	00b3      	lsls	r3, r6, #2
 8008846:	58eb      	ldr	r3, [r5, r3]
 8008848:	4798      	blx	r3
 800884a:	3601      	adds	r6, #1
 800884c:	e7ee      	b.n	800882c <__libc_init_array+0xc>
 800884e:	00b3      	lsls	r3, r6, #2
 8008850:	58eb      	ldr	r3, [r5, r3]
 8008852:	4798      	blx	r3
 8008854:	3601      	adds	r6, #1
 8008856:	e7f2      	b.n	800883e <__libc_init_array+0x1e>
 8008858:	0800bdd4 	.word	0x0800bdd4
 800885c:	0800bdd4 	.word	0x0800bdd4
 8008860:	0800bdd4 	.word	0x0800bdd4
 8008864:	0800bdd8 	.word	0x0800bdd8

08008868 <memcpy>:
 8008868:	2300      	movs	r3, #0
 800886a:	b510      	push	{r4, lr}
 800886c:	429a      	cmp	r2, r3
 800886e:	d100      	bne.n	8008872 <memcpy+0xa>
 8008870:	bd10      	pop	{r4, pc}
 8008872:	5ccc      	ldrb	r4, [r1, r3]
 8008874:	54c4      	strb	r4, [r0, r3]
 8008876:	3301      	adds	r3, #1
 8008878:	e7f8      	b.n	800886c <memcpy+0x4>

0800887a <memset>:
 800887a:	0003      	movs	r3, r0
 800887c:	1882      	adds	r2, r0, r2
 800887e:	4293      	cmp	r3, r2
 8008880:	d100      	bne.n	8008884 <memset+0xa>
 8008882:	4770      	bx	lr
 8008884:	7019      	strb	r1, [r3, #0]
 8008886:	3301      	adds	r3, #1
 8008888:	e7f9      	b.n	800887e <memset+0x4>

0800888a <__cvt>:
 800888a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800888c:	001e      	movs	r6, r3
 800888e:	2300      	movs	r3, #0
 8008890:	0014      	movs	r4, r2
 8008892:	b08b      	sub	sp, #44	; 0x2c
 8008894:	429e      	cmp	r6, r3
 8008896:	da04      	bge.n	80088a2 <__cvt+0x18>
 8008898:	2180      	movs	r1, #128	; 0x80
 800889a:	0609      	lsls	r1, r1, #24
 800889c:	1873      	adds	r3, r6, r1
 800889e:	001e      	movs	r6, r3
 80088a0:	232d      	movs	r3, #45	; 0x2d
 80088a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088a4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80088a6:	7013      	strb	r3, [r2, #0]
 80088a8:	2320      	movs	r3, #32
 80088aa:	2203      	movs	r2, #3
 80088ac:	439f      	bics	r7, r3
 80088ae:	2f46      	cmp	r7, #70	; 0x46
 80088b0:	d007      	beq.n	80088c2 <__cvt+0x38>
 80088b2:	003b      	movs	r3, r7
 80088b4:	3b45      	subs	r3, #69	; 0x45
 80088b6:	4259      	negs	r1, r3
 80088b8:	414b      	adcs	r3, r1
 80088ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80088bc:	3a01      	subs	r2, #1
 80088be:	18cb      	adds	r3, r1, r3
 80088c0:	9310      	str	r3, [sp, #64]	; 0x40
 80088c2:	ab09      	add	r3, sp, #36	; 0x24
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	ab08      	add	r3, sp, #32
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088cc:	9200      	str	r2, [sp, #0]
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088d2:	0022      	movs	r2, r4
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	0033      	movs	r3, r6
 80088d8:	f000 fcf2 	bl	80092c0 <_dtoa_r>
 80088dc:	0005      	movs	r5, r0
 80088de:	2f47      	cmp	r7, #71	; 0x47
 80088e0:	d102      	bne.n	80088e8 <__cvt+0x5e>
 80088e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088e4:	07db      	lsls	r3, r3, #31
 80088e6:	d528      	bpl.n	800893a <__cvt+0xb0>
 80088e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088ea:	18eb      	adds	r3, r5, r3
 80088ec:	9307      	str	r3, [sp, #28]
 80088ee:	2f46      	cmp	r7, #70	; 0x46
 80088f0:	d114      	bne.n	800891c <__cvt+0x92>
 80088f2:	782b      	ldrb	r3, [r5, #0]
 80088f4:	2b30      	cmp	r3, #48	; 0x30
 80088f6:	d10c      	bne.n	8008912 <__cvt+0x88>
 80088f8:	2200      	movs	r2, #0
 80088fa:	2300      	movs	r3, #0
 80088fc:	0020      	movs	r0, r4
 80088fe:	0031      	movs	r1, r6
 8008900:	f7f7 fda4 	bl	800044c <__aeabi_dcmpeq>
 8008904:	2800      	cmp	r0, #0
 8008906:	d104      	bne.n	8008912 <__cvt+0x88>
 8008908:	2301      	movs	r3, #1
 800890a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008914:	9a07      	ldr	r2, [sp, #28]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	18d3      	adds	r3, r2, r3
 800891a:	9307      	str	r3, [sp, #28]
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	0020      	movs	r0, r4
 8008922:	0031      	movs	r1, r6
 8008924:	f7f7 fd92 	bl	800044c <__aeabi_dcmpeq>
 8008928:	2800      	cmp	r0, #0
 800892a:	d001      	beq.n	8008930 <__cvt+0xa6>
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	9309      	str	r3, [sp, #36]	; 0x24
 8008930:	2230      	movs	r2, #48	; 0x30
 8008932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008934:	9907      	ldr	r1, [sp, #28]
 8008936:	428b      	cmp	r3, r1
 8008938:	d306      	bcc.n	8008948 <__cvt+0xbe>
 800893a:	0028      	movs	r0, r5
 800893c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008940:	1b5b      	subs	r3, r3, r5
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	b00b      	add	sp, #44	; 0x2c
 8008946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008948:	1c59      	adds	r1, r3, #1
 800894a:	9109      	str	r1, [sp, #36]	; 0x24
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	e7f0      	b.n	8008932 <__cvt+0xa8>

08008950 <__exponent>:
 8008950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008952:	1c83      	adds	r3, r0, #2
 8008954:	b087      	sub	sp, #28
 8008956:	9303      	str	r3, [sp, #12]
 8008958:	0005      	movs	r5, r0
 800895a:	000c      	movs	r4, r1
 800895c:	232b      	movs	r3, #43	; 0x2b
 800895e:	7002      	strb	r2, [r0, #0]
 8008960:	2900      	cmp	r1, #0
 8008962:	da01      	bge.n	8008968 <__exponent+0x18>
 8008964:	424c      	negs	r4, r1
 8008966:	3302      	adds	r3, #2
 8008968:	706b      	strb	r3, [r5, #1]
 800896a:	2c09      	cmp	r4, #9
 800896c:	dd31      	ble.n	80089d2 <__exponent+0x82>
 800896e:	270a      	movs	r7, #10
 8008970:	ab04      	add	r3, sp, #16
 8008972:	1dde      	adds	r6, r3, #7
 8008974:	0020      	movs	r0, r4
 8008976:	0039      	movs	r1, r7
 8008978:	9601      	str	r6, [sp, #4]
 800897a:	f7f7 fd51 	bl	8000420 <__aeabi_idivmod>
 800897e:	3e01      	subs	r6, #1
 8008980:	3130      	adds	r1, #48	; 0x30
 8008982:	0020      	movs	r0, r4
 8008984:	7031      	strb	r1, [r6, #0]
 8008986:	0039      	movs	r1, r7
 8008988:	9402      	str	r4, [sp, #8]
 800898a:	f7f7 fc63 	bl	8000254 <__divsi3>
 800898e:	9b02      	ldr	r3, [sp, #8]
 8008990:	0004      	movs	r4, r0
 8008992:	2b63      	cmp	r3, #99	; 0x63
 8008994:	dcee      	bgt.n	8008974 <__exponent+0x24>
 8008996:	9b01      	ldr	r3, [sp, #4]
 8008998:	3430      	adds	r4, #48	; 0x30
 800899a:	1e9a      	subs	r2, r3, #2
 800899c:	0013      	movs	r3, r2
 800899e:	9903      	ldr	r1, [sp, #12]
 80089a0:	7014      	strb	r4, [r2, #0]
 80089a2:	a804      	add	r0, sp, #16
 80089a4:	3007      	adds	r0, #7
 80089a6:	4298      	cmp	r0, r3
 80089a8:	d80e      	bhi.n	80089c8 <__exponent+0x78>
 80089aa:	ab04      	add	r3, sp, #16
 80089ac:	3307      	adds	r3, #7
 80089ae:	2000      	movs	r0, #0
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d804      	bhi.n	80089be <__exponent+0x6e>
 80089b4:	ab04      	add	r3, sp, #16
 80089b6:	3009      	adds	r0, #9
 80089b8:	18c0      	adds	r0, r0, r3
 80089ba:	9b01      	ldr	r3, [sp, #4]
 80089bc:	1ac0      	subs	r0, r0, r3
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	1818      	adds	r0, r3, r0
 80089c2:	1b40      	subs	r0, r0, r5
 80089c4:	b007      	add	sp, #28
 80089c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c8:	7818      	ldrb	r0, [r3, #0]
 80089ca:	3301      	adds	r3, #1
 80089cc:	7008      	strb	r0, [r1, #0]
 80089ce:	3101      	adds	r1, #1
 80089d0:	e7e7      	b.n	80089a2 <__exponent+0x52>
 80089d2:	2330      	movs	r3, #48	; 0x30
 80089d4:	18e4      	adds	r4, r4, r3
 80089d6:	70ab      	strb	r3, [r5, #2]
 80089d8:	1d28      	adds	r0, r5, #4
 80089da:	70ec      	strb	r4, [r5, #3]
 80089dc:	e7f1      	b.n	80089c2 <__exponent+0x72>
	...

080089e0 <_printf_float>:
 80089e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e2:	b095      	sub	sp, #84	; 0x54
 80089e4:	000c      	movs	r4, r1
 80089e6:	9209      	str	r2, [sp, #36]	; 0x24
 80089e8:	001e      	movs	r6, r3
 80089ea:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80089ec:	0007      	movs	r7, r0
 80089ee:	f001 fa81 	bl	8009ef4 <_localeconv_r>
 80089f2:	6803      	ldr	r3, [r0, #0]
 80089f4:	0018      	movs	r0, r3
 80089f6:	930c      	str	r3, [sp, #48]	; 0x30
 80089f8:	f7f7 fb86 	bl	8000108 <strlen>
 80089fc:	2300      	movs	r3, #0
 80089fe:	9312      	str	r3, [sp, #72]	; 0x48
 8008a00:	7e23      	ldrb	r3, [r4, #24]
 8008a02:	2207      	movs	r2, #7
 8008a04:	930a      	str	r3, [sp, #40]	; 0x28
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	900e      	str	r0, [sp, #56]	; 0x38
 8008a0a:	930d      	str	r3, [sp, #52]	; 0x34
 8008a0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a0e:	682b      	ldr	r3, [r5, #0]
 8008a10:	05c9      	lsls	r1, r1, #23
 8008a12:	d547      	bpl.n	8008aa4 <_printf_float+0xc4>
 8008a14:	189b      	adds	r3, r3, r2
 8008a16:	4393      	bics	r3, r2
 8008a18:	001a      	movs	r2, r3
 8008a1a:	3208      	adds	r2, #8
 8008a1c:	602a      	str	r2, [r5, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	64a2      	str	r2, [r4, #72]	; 0x48
 8008a24:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008a26:	2201      	movs	r2, #1
 8008a28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008a2a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008a2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a2e:	006b      	lsls	r3, r5, #1
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a36:	4ba7      	ldr	r3, [pc, #668]	; (8008cd4 <_printf_float+0x2f4>)
 8008a38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a3a:	4252      	negs	r2, r2
 8008a3c:	f7fa faac 	bl	8002f98 <__aeabi_dcmpun>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d131      	bne.n	8008aa8 <_printf_float+0xc8>
 8008a44:	2201      	movs	r2, #1
 8008a46:	4ba3      	ldr	r3, [pc, #652]	; (8008cd4 <_printf_float+0x2f4>)
 8008a48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a4c:	4252      	negs	r2, r2
 8008a4e:	f7f7 fd0d 	bl	800046c <__aeabi_dcmple>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d128      	bne.n	8008aa8 <_printf_float+0xc8>
 8008a56:	2200      	movs	r2, #0
 8008a58:	2300      	movs	r3, #0
 8008a5a:	0029      	movs	r1, r5
 8008a5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a5e:	f7f7 fcfb 	bl	8000458 <__aeabi_dcmplt>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d003      	beq.n	8008a6e <_printf_float+0x8e>
 8008a66:	0023      	movs	r3, r4
 8008a68:	222d      	movs	r2, #45	; 0x2d
 8008a6a:	3343      	adds	r3, #67	; 0x43
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a70:	4d99      	ldr	r5, [pc, #612]	; (8008cd8 <_printf_float+0x2f8>)
 8008a72:	2b47      	cmp	r3, #71	; 0x47
 8008a74:	d900      	bls.n	8008a78 <_printf_float+0x98>
 8008a76:	4d99      	ldr	r5, [pc, #612]	; (8008cdc <_printf_float+0x2fc>)
 8008a78:	2303      	movs	r3, #3
 8008a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	439a      	bics	r2, r3
 8008a82:	2300      	movs	r3, #0
 8008a84:	6022      	str	r2, [r4, #0]
 8008a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8a:	0021      	movs	r1, r4
 8008a8c:	0038      	movs	r0, r7
 8008a8e:	9600      	str	r6, [sp, #0]
 8008a90:	aa13      	add	r2, sp, #76	; 0x4c
 8008a92:	f000 f9e7 	bl	8008e64 <_printf_common>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d000      	beq.n	8008a9c <_printf_float+0xbc>
 8008a9a:	e0a2      	b.n	8008be2 <_printf_float+0x202>
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	4240      	negs	r0, r0
 8008aa0:	b015      	add	sp, #84	; 0x54
 8008aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa4:	3307      	adds	r3, #7
 8008aa6:	e7b6      	b.n	8008a16 <_printf_float+0x36>
 8008aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aaa:	002b      	movs	r3, r5
 8008aac:	0010      	movs	r0, r2
 8008aae:	0029      	movs	r1, r5
 8008ab0:	f7fa fa72 	bl	8002f98 <__aeabi_dcmpun>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d00b      	beq.n	8008ad0 <_printf_float+0xf0>
 8008ab8:	2d00      	cmp	r5, #0
 8008aba:	da03      	bge.n	8008ac4 <_printf_float+0xe4>
 8008abc:	0023      	movs	r3, r4
 8008abe:	222d      	movs	r2, #45	; 0x2d
 8008ac0:	3343      	adds	r3, #67	; 0x43
 8008ac2:	701a      	strb	r2, [r3, #0]
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac6:	4d86      	ldr	r5, [pc, #536]	; (8008ce0 <_printf_float+0x300>)
 8008ac8:	2b47      	cmp	r3, #71	; 0x47
 8008aca:	d9d5      	bls.n	8008a78 <_printf_float+0x98>
 8008acc:	4d85      	ldr	r5, [pc, #532]	; (8008ce4 <_printf_float+0x304>)
 8008ace:	e7d3      	b.n	8008a78 <_printf_float+0x98>
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ad4:	6863      	ldr	r3, [r4, #4]
 8008ad6:	4391      	bics	r1, r2
 8008ad8:	910f      	str	r1, [sp, #60]	; 0x3c
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	d149      	bne.n	8008b72 <_printf_float+0x192>
 8008ade:	3307      	adds	r3, #7
 8008ae0:	6063      	str	r3, [r4, #4]
 8008ae2:	2380      	movs	r3, #128	; 0x80
 8008ae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	2200      	movs	r2, #0
 8008aec:	9206      	str	r2, [sp, #24]
 8008aee:	aa12      	add	r2, sp, #72	; 0x48
 8008af0:	9205      	str	r2, [sp, #20]
 8008af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af4:	a908      	add	r1, sp, #32
 8008af6:	9204      	str	r2, [sp, #16]
 8008af8:	aa11      	add	r2, sp, #68	; 0x44
 8008afa:	9203      	str	r2, [sp, #12]
 8008afc:	2223      	movs	r2, #35	; 0x23
 8008afe:	6023      	str	r3, [r4, #0]
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	6863      	ldr	r3, [r4, #4]
 8008b04:	1852      	adds	r2, r2, r1
 8008b06:	9202      	str	r2, [sp, #8]
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	0038      	movs	r0, r7
 8008b0c:	002b      	movs	r3, r5
 8008b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b10:	f7ff febb 	bl	800888a <__cvt>
 8008b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b16:	0005      	movs	r5, r0
 8008b18:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008b1a:	2b47      	cmp	r3, #71	; 0x47
 8008b1c:	d108      	bne.n	8008b30 <_printf_float+0x150>
 8008b1e:	1ccb      	adds	r3, r1, #3
 8008b20:	db02      	blt.n	8008b28 <_printf_float+0x148>
 8008b22:	6863      	ldr	r3, [r4, #4]
 8008b24:	4299      	cmp	r1, r3
 8008b26:	dd48      	ble.n	8008bba <_printf_float+0x1da>
 8008b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2a:	3b02      	subs	r3, #2
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b32:	2b65      	cmp	r3, #101	; 0x65
 8008b34:	d824      	bhi.n	8008b80 <_printf_float+0x1a0>
 8008b36:	0020      	movs	r0, r4
 8008b38:	001a      	movs	r2, r3
 8008b3a:	3901      	subs	r1, #1
 8008b3c:	3050      	adds	r0, #80	; 0x50
 8008b3e:	9111      	str	r1, [sp, #68]	; 0x44
 8008b40:	f7ff ff06 	bl	8008950 <__exponent>
 8008b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b46:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b48:	1813      	adds	r3, r2, r0
 8008b4a:	6123      	str	r3, [r4, #16]
 8008b4c:	2a01      	cmp	r2, #1
 8008b4e:	dc02      	bgt.n	8008b56 <_printf_float+0x176>
 8008b50:	6822      	ldr	r2, [r4, #0]
 8008b52:	07d2      	lsls	r2, r2, #31
 8008b54:	d501      	bpl.n	8008b5a <_printf_float+0x17a>
 8008b56:	3301      	adds	r3, #1
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	2323      	movs	r3, #35	; 0x23
 8008b5c:	aa08      	add	r2, sp, #32
 8008b5e:	189b      	adds	r3, r3, r2
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d100      	bne.n	8008b68 <_printf_float+0x188>
 8008b66:	e78f      	b.n	8008a88 <_printf_float+0xa8>
 8008b68:	0023      	movs	r3, r4
 8008b6a:	222d      	movs	r2, #45	; 0x2d
 8008b6c:	3343      	adds	r3, #67	; 0x43
 8008b6e:	701a      	strb	r2, [r3, #0]
 8008b70:	e78a      	b.n	8008a88 <_printf_float+0xa8>
 8008b72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b74:	2a47      	cmp	r2, #71	; 0x47
 8008b76:	d1b4      	bne.n	8008ae2 <_printf_float+0x102>
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1b2      	bne.n	8008ae2 <_printf_float+0x102>
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	e7af      	b.n	8008ae0 <_printf_float+0x100>
 8008b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b82:	2b66      	cmp	r3, #102	; 0x66
 8008b84:	d11b      	bne.n	8008bbe <_printf_float+0x1de>
 8008b86:	6863      	ldr	r3, [r4, #4]
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	dd0d      	ble.n	8008ba8 <_printf_float+0x1c8>
 8008b8c:	6121      	str	r1, [r4, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d102      	bne.n	8008b98 <_printf_float+0x1b8>
 8008b92:	6822      	ldr	r2, [r4, #0]
 8008b94:	07d2      	lsls	r2, r2, #31
 8008b96:	d502      	bpl.n	8008b9e <_printf_float+0x1be>
 8008b98:	3301      	adds	r3, #1
 8008b9a:	1859      	adds	r1, r3, r1
 8008b9c:	6121      	str	r1, [r4, #16]
 8008b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ba0:	65a3      	str	r3, [r4, #88]	; 0x58
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba6:	e7d8      	b.n	8008b5a <_printf_float+0x17a>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d103      	bne.n	8008bb4 <_printf_float+0x1d4>
 8008bac:	2201      	movs	r2, #1
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	4211      	tst	r1, r2
 8008bb2:	d000      	beq.n	8008bb6 <_printf_float+0x1d6>
 8008bb4:	1c9a      	adds	r2, r3, #2
 8008bb6:	6122      	str	r2, [r4, #16]
 8008bb8:	e7f1      	b.n	8008b9e <_printf_float+0x1be>
 8008bba:	2367      	movs	r3, #103	; 0x67
 8008bbc:	930a      	str	r3, [sp, #40]	; 0x28
 8008bbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	db06      	blt.n	8008bd4 <_printf_float+0x1f4>
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	07d2      	lsls	r2, r2, #31
 8008bcc:	d5e7      	bpl.n	8008b9e <_printf_float+0x1be>
 8008bce:	3301      	adds	r3, #1
 8008bd0:	6123      	str	r3, [r4, #16]
 8008bd2:	e7e4      	b.n	8008b9e <_printf_float+0x1be>
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dc01      	bgt.n	8008bde <_printf_float+0x1fe>
 8008bda:	1849      	adds	r1, r1, r1
 8008bdc:	1ac9      	subs	r1, r1, r3
 8008bde:	1852      	adds	r2, r2, r1
 8008be0:	e7e9      	b.n	8008bb6 <_printf_float+0x1d6>
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	0553      	lsls	r3, r2, #21
 8008be6:	d407      	bmi.n	8008bf8 <_printf_float+0x218>
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	002a      	movs	r2, r5
 8008bec:	0038      	movs	r0, r7
 8008bee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bf0:	47b0      	blx	r6
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	d128      	bne.n	8008c48 <_printf_float+0x268>
 8008bf6:	e751      	b.n	8008a9c <_printf_float+0xbc>
 8008bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfa:	2b65      	cmp	r3, #101	; 0x65
 8008bfc:	d800      	bhi.n	8008c00 <_printf_float+0x220>
 8008bfe:	e0e1      	b.n	8008dc4 <_printf_float+0x3e4>
 8008c00:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008c02:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008c04:	2200      	movs	r2, #0
 8008c06:	2300      	movs	r3, #0
 8008c08:	f7f7 fc20 	bl	800044c <__aeabi_dcmpeq>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d031      	beq.n	8008c74 <_printf_float+0x294>
 8008c10:	2301      	movs	r3, #1
 8008c12:	0038      	movs	r0, r7
 8008c14:	4a34      	ldr	r2, [pc, #208]	; (8008ce8 <_printf_float+0x308>)
 8008c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c18:	47b0      	blx	r6
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	d100      	bne.n	8008c20 <_printf_float+0x240>
 8008c1e:	e73d      	b.n	8008a9c <_printf_float+0xbc>
 8008c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c24:	4293      	cmp	r3, r2
 8008c26:	db02      	blt.n	8008c2e <_printf_float+0x24e>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	07db      	lsls	r3, r3, #31
 8008c2c:	d50c      	bpl.n	8008c48 <_printf_float+0x268>
 8008c2e:	0038      	movs	r0, r7
 8008c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c36:	47b0      	blx	r6
 8008c38:	2500      	movs	r5, #0
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d100      	bne.n	8008c40 <_printf_float+0x260>
 8008c3e:	e72d      	b.n	8008a9c <_printf_float+0xbc>
 8008c40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c42:	3b01      	subs	r3, #1
 8008c44:	42ab      	cmp	r3, r5
 8008c46:	dc0a      	bgt.n	8008c5e <_printf_float+0x27e>
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	079b      	lsls	r3, r3, #30
 8008c4c:	d500      	bpl.n	8008c50 <_printf_float+0x270>
 8008c4e:	e106      	b.n	8008e5e <_printf_float+0x47e>
 8008c50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c52:	68e0      	ldr	r0, [r4, #12]
 8008c54:	4298      	cmp	r0, r3
 8008c56:	db00      	blt.n	8008c5a <_printf_float+0x27a>
 8008c58:	e722      	b.n	8008aa0 <_printf_float+0xc0>
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	e720      	b.n	8008aa0 <_printf_float+0xc0>
 8008c5e:	0022      	movs	r2, r4
 8008c60:	2301      	movs	r3, #1
 8008c62:	0038      	movs	r0, r7
 8008c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c66:	321a      	adds	r2, #26
 8008c68:	47b0      	blx	r6
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	d100      	bne.n	8008c70 <_printf_float+0x290>
 8008c6e:	e715      	b.n	8008a9c <_printf_float+0xbc>
 8008c70:	3501      	adds	r5, #1
 8008c72:	e7e5      	b.n	8008c40 <_printf_float+0x260>
 8008c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dc38      	bgt.n	8008cec <_printf_float+0x30c>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	0038      	movs	r0, r7
 8008c7e:	4a1a      	ldr	r2, [pc, #104]	; (8008ce8 <_printf_float+0x308>)
 8008c80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c82:	47b0      	blx	r6
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d100      	bne.n	8008c8a <_printf_float+0x2aa>
 8008c88:	e708      	b.n	8008a9c <_printf_float+0xbc>
 8008c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	d102      	bne.n	8008c98 <_printf_float+0x2b8>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	07db      	lsls	r3, r3, #31
 8008c96:	d5d7      	bpl.n	8008c48 <_printf_float+0x268>
 8008c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c9a:	0038      	movs	r0, r7
 8008c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ca0:	47b0      	blx	r6
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	d100      	bne.n	8008ca8 <_printf_float+0x2c8>
 8008ca6:	e6f9      	b.n	8008a9c <_printf_float+0xbc>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	930a      	str	r3, [sp, #40]	; 0x28
 8008cac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cb0:	425b      	negs	r3, r3
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	dc01      	bgt.n	8008cba <_printf_float+0x2da>
 8008cb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cb8:	e797      	b.n	8008bea <_printf_float+0x20a>
 8008cba:	0022      	movs	r2, r4
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	0038      	movs	r0, r7
 8008cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cc2:	321a      	adds	r2, #26
 8008cc4:	47b0      	blx	r6
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	d100      	bne.n	8008ccc <_printf_float+0x2ec>
 8008cca:	e6e7      	b.n	8008a9c <_printf_float+0xbc>
 8008ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cce:	3301      	adds	r3, #1
 8008cd0:	e7eb      	b.n	8008caa <_printf_float+0x2ca>
 8008cd2:	46c0      	nop			; (mov r8, r8)
 8008cd4:	7fefffff 	.word	0x7fefffff
 8008cd8:	0800b9f8 	.word	0x0800b9f8
 8008cdc:	0800b9fc 	.word	0x0800b9fc
 8008ce0:	0800ba00 	.word	0x0800ba00
 8008ce4:	0800ba04 	.word	0x0800ba04
 8008ce8:	0800ba08 	.word	0x0800ba08
 8008cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cf0:	920a      	str	r2, [sp, #40]	; 0x28
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	dd00      	ble.n	8008cf8 <_printf_float+0x318>
 8008cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dc3c      	bgt.n	8008d78 <_printf_float+0x398>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	930d      	str	r3, [sp, #52]	; 0x34
 8008d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d04:	43db      	mvns	r3, r3
 8008d06:	17db      	asrs	r3, r3, #31
 8008d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d12:	4013      	ands	r3, r2
 8008d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	dc34      	bgt.n	8008d88 <_printf_float+0x3a8>
 8008d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d22:	4293      	cmp	r3, r2
 8008d24:	db3d      	blt.n	8008da2 <_printf_float+0x3c2>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	07db      	lsls	r3, r3, #31
 8008d2a:	d43a      	bmi.n	8008da2 <_printf_float+0x3c2>
 8008d2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d30:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	1a52      	subs	r2, r2, r1
 8008d36:	920a      	str	r2, [sp, #40]	; 0x28
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	dd00      	ble.n	8008d3e <_printf_float+0x35e>
 8008d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	dc36      	bgt.n	8008db2 <_printf_float+0x3d2>
 8008d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d46:	2500      	movs	r5, #0
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	17db      	asrs	r3, r3, #31
 8008d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d58:	400a      	ands	r2, r1
 8008d5a:	1a9b      	subs	r3, r3, r2
 8008d5c:	42ab      	cmp	r3, r5
 8008d5e:	dc00      	bgt.n	8008d62 <_printf_float+0x382>
 8008d60:	e772      	b.n	8008c48 <_printf_float+0x268>
 8008d62:	0022      	movs	r2, r4
 8008d64:	2301      	movs	r3, #1
 8008d66:	0038      	movs	r0, r7
 8008d68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d6a:	321a      	adds	r2, #26
 8008d6c:	47b0      	blx	r6
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	d100      	bne.n	8008d74 <_printf_float+0x394>
 8008d72:	e693      	b.n	8008a9c <_printf_float+0xbc>
 8008d74:	3501      	adds	r5, #1
 8008d76:	e7ea      	b.n	8008d4e <_printf_float+0x36e>
 8008d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7a:	002a      	movs	r2, r5
 8008d7c:	0038      	movs	r0, r7
 8008d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d80:	47b0      	blx	r6
 8008d82:	1c43      	adds	r3, r0, #1
 8008d84:	d1bb      	bne.n	8008cfe <_printf_float+0x31e>
 8008d86:	e689      	b.n	8008a9c <_printf_float+0xbc>
 8008d88:	0022      	movs	r2, r4
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	0038      	movs	r0, r7
 8008d8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d90:	321a      	adds	r2, #26
 8008d92:	47b0      	blx	r6
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d100      	bne.n	8008d9a <_printf_float+0x3ba>
 8008d98:	e680      	b.n	8008a9c <_printf_float+0xbc>
 8008d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	930d      	str	r3, [sp, #52]	; 0x34
 8008da0:	e7b3      	b.n	8008d0a <_printf_float+0x32a>
 8008da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008da4:	0038      	movs	r0, r7
 8008da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008daa:	47b0      	blx	r6
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d1bd      	bne.n	8008d2c <_printf_float+0x34c>
 8008db0:	e674      	b.n	8008a9c <_printf_float+0xbc>
 8008db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db4:	0038      	movs	r0, r7
 8008db6:	18ea      	adds	r2, r5, r3
 8008db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dbc:	47b0      	blx	r6
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	d1c0      	bne.n	8008d44 <_printf_float+0x364>
 8008dc2:	e66b      	b.n	8008a9c <_printf_float+0xbc>
 8008dc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	dc02      	bgt.n	8008dd0 <_printf_float+0x3f0>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	421a      	tst	r2, r3
 8008dce:	d034      	beq.n	8008e3a <_printf_float+0x45a>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	002a      	movs	r2, r5
 8008dd4:	0038      	movs	r0, r7
 8008dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dd8:	47b0      	blx	r6
 8008dda:	1c43      	adds	r3, r0, #1
 8008ddc:	d100      	bne.n	8008de0 <_printf_float+0x400>
 8008dde:	e65d      	b.n	8008a9c <_printf_float+0xbc>
 8008de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008de2:	0038      	movs	r0, r7
 8008de4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008de8:	47b0      	blx	r6
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	d100      	bne.n	8008df0 <_printf_float+0x410>
 8008dee:	e655      	b.n	8008a9c <_printf_float+0xbc>
 8008df0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008df2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008df4:	2200      	movs	r2, #0
 8008df6:	2300      	movs	r3, #0
 8008df8:	f7f7 fb28 	bl	800044c <__aeabi_dcmpeq>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d11a      	bne.n	8008e36 <_printf_float+0x456>
 8008e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e02:	1c6a      	adds	r2, r5, #1
 8008e04:	3b01      	subs	r3, #1
 8008e06:	0038      	movs	r0, r7
 8008e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e0a:	47b0      	blx	r6
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d10e      	bne.n	8008e2e <_printf_float+0x44e>
 8008e10:	e644      	b.n	8008a9c <_printf_float+0xbc>
 8008e12:	0022      	movs	r2, r4
 8008e14:	2301      	movs	r3, #1
 8008e16:	0038      	movs	r0, r7
 8008e18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e1a:	321a      	adds	r2, #26
 8008e1c:	47b0      	blx	r6
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	d100      	bne.n	8008e24 <_printf_float+0x444>
 8008e22:	e63b      	b.n	8008a9c <_printf_float+0xbc>
 8008e24:	3501      	adds	r5, #1
 8008e26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	42ab      	cmp	r3, r5
 8008e2c:	dcf1      	bgt.n	8008e12 <_printf_float+0x432>
 8008e2e:	0022      	movs	r2, r4
 8008e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e32:	3250      	adds	r2, #80	; 0x50
 8008e34:	e6da      	b.n	8008bec <_printf_float+0x20c>
 8008e36:	2500      	movs	r5, #0
 8008e38:	e7f5      	b.n	8008e26 <_printf_float+0x446>
 8008e3a:	002a      	movs	r2, r5
 8008e3c:	e7e3      	b.n	8008e06 <_printf_float+0x426>
 8008e3e:	0022      	movs	r2, r4
 8008e40:	2301      	movs	r3, #1
 8008e42:	0038      	movs	r0, r7
 8008e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e46:	3219      	adds	r2, #25
 8008e48:	47b0      	blx	r6
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	d100      	bne.n	8008e50 <_printf_float+0x470>
 8008e4e:	e625      	b.n	8008a9c <_printf_float+0xbc>
 8008e50:	3501      	adds	r5, #1
 8008e52:	68e3      	ldr	r3, [r4, #12]
 8008e54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e56:	1a9b      	subs	r3, r3, r2
 8008e58:	42ab      	cmp	r3, r5
 8008e5a:	dcf0      	bgt.n	8008e3e <_printf_float+0x45e>
 8008e5c:	e6f8      	b.n	8008c50 <_printf_float+0x270>
 8008e5e:	2500      	movs	r5, #0
 8008e60:	e7f7      	b.n	8008e52 <_printf_float+0x472>
 8008e62:	46c0      	nop			; (mov r8, r8)

08008e64 <_printf_common>:
 8008e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e66:	0015      	movs	r5, r2
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	688a      	ldr	r2, [r1, #8]
 8008e6c:	690b      	ldr	r3, [r1, #16]
 8008e6e:	000c      	movs	r4, r1
 8008e70:	9000      	str	r0, [sp, #0]
 8008e72:	4293      	cmp	r3, r2
 8008e74:	da00      	bge.n	8008e78 <_printf_common+0x14>
 8008e76:	0013      	movs	r3, r2
 8008e78:	0022      	movs	r2, r4
 8008e7a:	602b      	str	r3, [r5, #0]
 8008e7c:	3243      	adds	r2, #67	; 0x43
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	2a00      	cmp	r2, #0
 8008e82:	d001      	beq.n	8008e88 <_printf_common+0x24>
 8008e84:	3301      	adds	r3, #1
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	069b      	lsls	r3, r3, #26
 8008e8c:	d502      	bpl.n	8008e94 <_printf_common+0x30>
 8008e8e:	682b      	ldr	r3, [r5, #0]
 8008e90:	3302      	adds	r3, #2
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	6822      	ldr	r2, [r4, #0]
 8008e96:	2306      	movs	r3, #6
 8008e98:	0017      	movs	r7, r2
 8008e9a:	401f      	ands	r7, r3
 8008e9c:	421a      	tst	r2, r3
 8008e9e:	d027      	beq.n	8008ef0 <_printf_common+0x8c>
 8008ea0:	0023      	movs	r3, r4
 8008ea2:	3343      	adds	r3, #67	; 0x43
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	1e5a      	subs	r2, r3, #1
 8008ea8:	4193      	sbcs	r3, r2
 8008eaa:	6822      	ldr	r2, [r4, #0]
 8008eac:	0692      	lsls	r2, r2, #26
 8008eae:	d430      	bmi.n	8008f12 <_printf_common+0xae>
 8008eb0:	0022      	movs	r2, r4
 8008eb2:	9901      	ldr	r1, [sp, #4]
 8008eb4:	9800      	ldr	r0, [sp, #0]
 8008eb6:	9e08      	ldr	r6, [sp, #32]
 8008eb8:	3243      	adds	r2, #67	; 0x43
 8008eba:	47b0      	blx	r6
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d025      	beq.n	8008f0c <_printf_common+0xa8>
 8008ec0:	2306      	movs	r3, #6
 8008ec2:	6820      	ldr	r0, [r4, #0]
 8008ec4:	682a      	ldr	r2, [r5, #0]
 8008ec6:	68e1      	ldr	r1, [r4, #12]
 8008ec8:	2500      	movs	r5, #0
 8008eca:	4003      	ands	r3, r0
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d103      	bne.n	8008ed8 <_printf_common+0x74>
 8008ed0:	1a8d      	subs	r5, r1, r2
 8008ed2:	43eb      	mvns	r3, r5
 8008ed4:	17db      	asrs	r3, r3, #31
 8008ed6:	401d      	ands	r5, r3
 8008ed8:	68a3      	ldr	r3, [r4, #8]
 8008eda:	6922      	ldr	r2, [r4, #16]
 8008edc:	4293      	cmp	r3, r2
 8008ede:	dd01      	ble.n	8008ee4 <_printf_common+0x80>
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	18ed      	adds	r5, r5, r3
 8008ee4:	2700      	movs	r7, #0
 8008ee6:	42bd      	cmp	r5, r7
 8008ee8:	d120      	bne.n	8008f2c <_printf_common+0xc8>
 8008eea:	2000      	movs	r0, #0
 8008eec:	e010      	b.n	8008f10 <_printf_common+0xac>
 8008eee:	3701      	adds	r7, #1
 8008ef0:	68e3      	ldr	r3, [r4, #12]
 8008ef2:	682a      	ldr	r2, [r5, #0]
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	42bb      	cmp	r3, r7
 8008ef8:	ddd2      	ble.n	8008ea0 <_printf_common+0x3c>
 8008efa:	0022      	movs	r2, r4
 8008efc:	2301      	movs	r3, #1
 8008efe:	9901      	ldr	r1, [sp, #4]
 8008f00:	9800      	ldr	r0, [sp, #0]
 8008f02:	9e08      	ldr	r6, [sp, #32]
 8008f04:	3219      	adds	r2, #25
 8008f06:	47b0      	blx	r6
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d1f0      	bne.n	8008eee <_printf_common+0x8a>
 8008f0c:	2001      	movs	r0, #1
 8008f0e:	4240      	negs	r0, r0
 8008f10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f12:	2030      	movs	r0, #48	; 0x30
 8008f14:	18e1      	adds	r1, r4, r3
 8008f16:	3143      	adds	r1, #67	; 0x43
 8008f18:	7008      	strb	r0, [r1, #0]
 8008f1a:	0021      	movs	r1, r4
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	3145      	adds	r1, #69	; 0x45
 8008f20:	7809      	ldrb	r1, [r1, #0]
 8008f22:	18a2      	adds	r2, r4, r2
 8008f24:	3243      	adds	r2, #67	; 0x43
 8008f26:	3302      	adds	r3, #2
 8008f28:	7011      	strb	r1, [r2, #0]
 8008f2a:	e7c1      	b.n	8008eb0 <_printf_common+0x4c>
 8008f2c:	0022      	movs	r2, r4
 8008f2e:	2301      	movs	r3, #1
 8008f30:	9901      	ldr	r1, [sp, #4]
 8008f32:	9800      	ldr	r0, [sp, #0]
 8008f34:	9e08      	ldr	r6, [sp, #32]
 8008f36:	321a      	adds	r2, #26
 8008f38:	47b0      	blx	r6
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	d0e6      	beq.n	8008f0c <_printf_common+0xa8>
 8008f3e:	3701      	adds	r7, #1
 8008f40:	e7d1      	b.n	8008ee6 <_printf_common+0x82>
	...

08008f44 <_printf_i>:
 8008f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f46:	b08b      	sub	sp, #44	; 0x2c
 8008f48:	9206      	str	r2, [sp, #24]
 8008f4a:	000a      	movs	r2, r1
 8008f4c:	3243      	adds	r2, #67	; 0x43
 8008f4e:	9307      	str	r3, [sp, #28]
 8008f50:	9005      	str	r0, [sp, #20]
 8008f52:	9204      	str	r2, [sp, #16]
 8008f54:	7e0a      	ldrb	r2, [r1, #24]
 8008f56:	000c      	movs	r4, r1
 8008f58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f5a:	2a78      	cmp	r2, #120	; 0x78
 8008f5c:	d807      	bhi.n	8008f6e <_printf_i+0x2a>
 8008f5e:	2a62      	cmp	r2, #98	; 0x62
 8008f60:	d809      	bhi.n	8008f76 <_printf_i+0x32>
 8008f62:	2a00      	cmp	r2, #0
 8008f64:	d100      	bne.n	8008f68 <_printf_i+0x24>
 8008f66:	e0c1      	b.n	80090ec <_printf_i+0x1a8>
 8008f68:	2a58      	cmp	r2, #88	; 0x58
 8008f6a:	d100      	bne.n	8008f6e <_printf_i+0x2a>
 8008f6c:	e08c      	b.n	8009088 <_printf_i+0x144>
 8008f6e:	0026      	movs	r6, r4
 8008f70:	3642      	adds	r6, #66	; 0x42
 8008f72:	7032      	strb	r2, [r6, #0]
 8008f74:	e022      	b.n	8008fbc <_printf_i+0x78>
 8008f76:	0010      	movs	r0, r2
 8008f78:	3863      	subs	r0, #99	; 0x63
 8008f7a:	2815      	cmp	r0, #21
 8008f7c:	d8f7      	bhi.n	8008f6e <_printf_i+0x2a>
 8008f7e:	f7f7 f8d5 	bl	800012c <__gnu_thumb1_case_shi>
 8008f82:	0016      	.short	0x0016
 8008f84:	fff6001f 	.word	0xfff6001f
 8008f88:	fff6fff6 	.word	0xfff6fff6
 8008f8c:	001ffff6 	.word	0x001ffff6
 8008f90:	fff6fff6 	.word	0xfff6fff6
 8008f94:	fff6fff6 	.word	0xfff6fff6
 8008f98:	003600a8 	.word	0x003600a8
 8008f9c:	fff6009a 	.word	0xfff6009a
 8008fa0:	00b9fff6 	.word	0x00b9fff6
 8008fa4:	0036fff6 	.word	0x0036fff6
 8008fa8:	fff6fff6 	.word	0xfff6fff6
 8008fac:	009e      	.short	0x009e
 8008fae:	0026      	movs	r6, r4
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	3642      	adds	r6, #66	; 0x42
 8008fb4:	1d11      	adds	r1, r2, #4
 8008fb6:	6019      	str	r1, [r3, #0]
 8008fb8:	6813      	ldr	r3, [r2, #0]
 8008fba:	7033      	strb	r3, [r6, #0]
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e0a7      	b.n	8009110 <_printf_i+0x1cc>
 8008fc0:	6808      	ldr	r0, [r1, #0]
 8008fc2:	6819      	ldr	r1, [r3, #0]
 8008fc4:	1d0a      	adds	r2, r1, #4
 8008fc6:	0605      	lsls	r5, r0, #24
 8008fc8:	d50b      	bpl.n	8008fe2 <_printf_i+0x9e>
 8008fca:	680d      	ldr	r5, [r1, #0]
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	2d00      	cmp	r5, #0
 8008fd0:	da03      	bge.n	8008fda <_printf_i+0x96>
 8008fd2:	232d      	movs	r3, #45	; 0x2d
 8008fd4:	9a04      	ldr	r2, [sp, #16]
 8008fd6:	426d      	negs	r5, r5
 8008fd8:	7013      	strb	r3, [r2, #0]
 8008fda:	4b61      	ldr	r3, [pc, #388]	; (8009160 <_printf_i+0x21c>)
 8008fdc:	270a      	movs	r7, #10
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	e01b      	b.n	800901a <_printf_i+0xd6>
 8008fe2:	680d      	ldr	r5, [r1, #0]
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	0641      	lsls	r1, r0, #25
 8008fe8:	d5f1      	bpl.n	8008fce <_printf_i+0x8a>
 8008fea:	b22d      	sxth	r5, r5
 8008fec:	e7ef      	b.n	8008fce <_printf_i+0x8a>
 8008fee:	680d      	ldr	r5, [r1, #0]
 8008ff0:	6819      	ldr	r1, [r3, #0]
 8008ff2:	1d08      	adds	r0, r1, #4
 8008ff4:	6018      	str	r0, [r3, #0]
 8008ff6:	062e      	lsls	r6, r5, #24
 8008ff8:	d501      	bpl.n	8008ffe <_printf_i+0xba>
 8008ffa:	680d      	ldr	r5, [r1, #0]
 8008ffc:	e003      	b.n	8009006 <_printf_i+0xc2>
 8008ffe:	066d      	lsls	r5, r5, #25
 8009000:	d5fb      	bpl.n	8008ffa <_printf_i+0xb6>
 8009002:	680d      	ldr	r5, [r1, #0]
 8009004:	b2ad      	uxth	r5, r5
 8009006:	4b56      	ldr	r3, [pc, #344]	; (8009160 <_printf_i+0x21c>)
 8009008:	2708      	movs	r7, #8
 800900a:	9303      	str	r3, [sp, #12]
 800900c:	2a6f      	cmp	r2, #111	; 0x6f
 800900e:	d000      	beq.n	8009012 <_printf_i+0xce>
 8009010:	3702      	adds	r7, #2
 8009012:	0023      	movs	r3, r4
 8009014:	2200      	movs	r2, #0
 8009016:	3343      	adds	r3, #67	; 0x43
 8009018:	701a      	strb	r2, [r3, #0]
 800901a:	6863      	ldr	r3, [r4, #4]
 800901c:	60a3      	str	r3, [r4, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	db03      	blt.n	800902a <_printf_i+0xe6>
 8009022:	2204      	movs	r2, #4
 8009024:	6821      	ldr	r1, [r4, #0]
 8009026:	4391      	bics	r1, r2
 8009028:	6021      	str	r1, [r4, #0]
 800902a:	2d00      	cmp	r5, #0
 800902c:	d102      	bne.n	8009034 <_printf_i+0xf0>
 800902e:	9e04      	ldr	r6, [sp, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00c      	beq.n	800904e <_printf_i+0x10a>
 8009034:	9e04      	ldr	r6, [sp, #16]
 8009036:	0028      	movs	r0, r5
 8009038:	0039      	movs	r1, r7
 800903a:	f7f7 f907 	bl	800024c <__aeabi_uidivmod>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	3e01      	subs	r6, #1
 8009042:	5c5b      	ldrb	r3, [r3, r1]
 8009044:	7033      	strb	r3, [r6, #0]
 8009046:	002b      	movs	r3, r5
 8009048:	0005      	movs	r5, r0
 800904a:	429f      	cmp	r7, r3
 800904c:	d9f3      	bls.n	8009036 <_printf_i+0xf2>
 800904e:	2f08      	cmp	r7, #8
 8009050:	d109      	bne.n	8009066 <_printf_i+0x122>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	07db      	lsls	r3, r3, #31
 8009056:	d506      	bpl.n	8009066 <_printf_i+0x122>
 8009058:	6863      	ldr	r3, [r4, #4]
 800905a:	6922      	ldr	r2, [r4, #16]
 800905c:	4293      	cmp	r3, r2
 800905e:	dc02      	bgt.n	8009066 <_printf_i+0x122>
 8009060:	2330      	movs	r3, #48	; 0x30
 8009062:	3e01      	subs	r6, #1
 8009064:	7033      	strb	r3, [r6, #0]
 8009066:	9b04      	ldr	r3, [sp, #16]
 8009068:	1b9b      	subs	r3, r3, r6
 800906a:	6123      	str	r3, [r4, #16]
 800906c:	9b07      	ldr	r3, [sp, #28]
 800906e:	0021      	movs	r1, r4
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	9805      	ldr	r0, [sp, #20]
 8009074:	9b06      	ldr	r3, [sp, #24]
 8009076:	aa09      	add	r2, sp, #36	; 0x24
 8009078:	f7ff fef4 	bl	8008e64 <_printf_common>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d14c      	bne.n	800911a <_printf_i+0x1d6>
 8009080:	2001      	movs	r0, #1
 8009082:	4240      	negs	r0, r0
 8009084:	b00b      	add	sp, #44	; 0x2c
 8009086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009088:	3145      	adds	r1, #69	; 0x45
 800908a:	700a      	strb	r2, [r1, #0]
 800908c:	4a34      	ldr	r2, [pc, #208]	; (8009160 <_printf_i+0x21c>)
 800908e:	9203      	str	r2, [sp, #12]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	6821      	ldr	r1, [r4, #0]
 8009094:	ca20      	ldmia	r2!, {r5}
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	0608      	lsls	r0, r1, #24
 800909a:	d516      	bpl.n	80090ca <_printf_i+0x186>
 800909c:	07cb      	lsls	r3, r1, #31
 800909e:	d502      	bpl.n	80090a6 <_printf_i+0x162>
 80090a0:	2320      	movs	r3, #32
 80090a2:	4319      	orrs	r1, r3
 80090a4:	6021      	str	r1, [r4, #0]
 80090a6:	2710      	movs	r7, #16
 80090a8:	2d00      	cmp	r5, #0
 80090aa:	d1b2      	bne.n	8009012 <_printf_i+0xce>
 80090ac:	2320      	movs	r3, #32
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	439a      	bics	r2, r3
 80090b2:	6022      	str	r2, [r4, #0]
 80090b4:	e7ad      	b.n	8009012 <_printf_i+0xce>
 80090b6:	2220      	movs	r2, #32
 80090b8:	6809      	ldr	r1, [r1, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	6022      	str	r2, [r4, #0]
 80090be:	0022      	movs	r2, r4
 80090c0:	2178      	movs	r1, #120	; 0x78
 80090c2:	3245      	adds	r2, #69	; 0x45
 80090c4:	7011      	strb	r1, [r2, #0]
 80090c6:	4a27      	ldr	r2, [pc, #156]	; (8009164 <_printf_i+0x220>)
 80090c8:	e7e1      	b.n	800908e <_printf_i+0x14a>
 80090ca:	0648      	lsls	r0, r1, #25
 80090cc:	d5e6      	bpl.n	800909c <_printf_i+0x158>
 80090ce:	b2ad      	uxth	r5, r5
 80090d0:	e7e4      	b.n	800909c <_printf_i+0x158>
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	680d      	ldr	r5, [r1, #0]
 80090d6:	1d10      	adds	r0, r2, #4
 80090d8:	6949      	ldr	r1, [r1, #20]
 80090da:	6018      	str	r0, [r3, #0]
 80090dc:	6813      	ldr	r3, [r2, #0]
 80090de:	062e      	lsls	r6, r5, #24
 80090e0:	d501      	bpl.n	80090e6 <_printf_i+0x1a2>
 80090e2:	6019      	str	r1, [r3, #0]
 80090e4:	e002      	b.n	80090ec <_printf_i+0x1a8>
 80090e6:	066d      	lsls	r5, r5, #25
 80090e8:	d5fb      	bpl.n	80090e2 <_printf_i+0x19e>
 80090ea:	8019      	strh	r1, [r3, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	9e04      	ldr	r6, [sp, #16]
 80090f0:	6123      	str	r3, [r4, #16]
 80090f2:	e7bb      	b.n	800906c <_printf_i+0x128>
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	1d11      	adds	r1, r2, #4
 80090f8:	6019      	str	r1, [r3, #0]
 80090fa:	6816      	ldr	r6, [r2, #0]
 80090fc:	2100      	movs	r1, #0
 80090fe:	0030      	movs	r0, r6
 8009100:	6862      	ldr	r2, [r4, #4]
 8009102:	f000 ff05 	bl	8009f10 <memchr>
 8009106:	2800      	cmp	r0, #0
 8009108:	d001      	beq.n	800910e <_printf_i+0x1ca>
 800910a:	1b80      	subs	r0, r0, r6
 800910c:	6060      	str	r0, [r4, #4]
 800910e:	6863      	ldr	r3, [r4, #4]
 8009110:	6123      	str	r3, [r4, #16]
 8009112:	2300      	movs	r3, #0
 8009114:	9a04      	ldr	r2, [sp, #16]
 8009116:	7013      	strb	r3, [r2, #0]
 8009118:	e7a8      	b.n	800906c <_printf_i+0x128>
 800911a:	6923      	ldr	r3, [r4, #16]
 800911c:	0032      	movs	r2, r6
 800911e:	9906      	ldr	r1, [sp, #24]
 8009120:	9805      	ldr	r0, [sp, #20]
 8009122:	9d07      	ldr	r5, [sp, #28]
 8009124:	47a8      	blx	r5
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d0aa      	beq.n	8009080 <_printf_i+0x13c>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	079b      	lsls	r3, r3, #30
 800912e:	d415      	bmi.n	800915c <_printf_i+0x218>
 8009130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009132:	68e0      	ldr	r0, [r4, #12]
 8009134:	4298      	cmp	r0, r3
 8009136:	daa5      	bge.n	8009084 <_printf_i+0x140>
 8009138:	0018      	movs	r0, r3
 800913a:	e7a3      	b.n	8009084 <_printf_i+0x140>
 800913c:	0022      	movs	r2, r4
 800913e:	2301      	movs	r3, #1
 8009140:	9906      	ldr	r1, [sp, #24]
 8009142:	9805      	ldr	r0, [sp, #20]
 8009144:	9e07      	ldr	r6, [sp, #28]
 8009146:	3219      	adds	r2, #25
 8009148:	47b0      	blx	r6
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d098      	beq.n	8009080 <_printf_i+0x13c>
 800914e:	3501      	adds	r5, #1
 8009150:	68e3      	ldr	r3, [r4, #12]
 8009152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	42ab      	cmp	r3, r5
 8009158:	dcf0      	bgt.n	800913c <_printf_i+0x1f8>
 800915a:	e7e9      	b.n	8009130 <_printf_i+0x1ec>
 800915c:	2500      	movs	r5, #0
 800915e:	e7f7      	b.n	8009150 <_printf_i+0x20c>
 8009160:	0800ba0a 	.word	0x0800ba0a
 8009164:	0800ba1b 	.word	0x0800ba1b

08009168 <siprintf>:
 8009168:	b40e      	push	{r1, r2, r3}
 800916a:	b500      	push	{lr}
 800916c:	490b      	ldr	r1, [pc, #44]	; (800919c <siprintf+0x34>)
 800916e:	b09c      	sub	sp, #112	; 0x70
 8009170:	ab1d      	add	r3, sp, #116	; 0x74
 8009172:	9002      	str	r0, [sp, #8]
 8009174:	9006      	str	r0, [sp, #24]
 8009176:	9107      	str	r1, [sp, #28]
 8009178:	9104      	str	r1, [sp, #16]
 800917a:	4809      	ldr	r0, [pc, #36]	; (80091a0 <siprintf+0x38>)
 800917c:	4909      	ldr	r1, [pc, #36]	; (80091a4 <siprintf+0x3c>)
 800917e:	cb04      	ldmia	r3!, {r2}
 8009180:	9105      	str	r1, [sp, #20]
 8009182:	6800      	ldr	r0, [r0, #0]
 8009184:	a902      	add	r1, sp, #8
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	f001 fbda 	bl	800a940 <_svfiprintf_r>
 800918c:	2300      	movs	r3, #0
 800918e:	9a02      	ldr	r2, [sp, #8]
 8009190:	7013      	strb	r3, [r2, #0]
 8009192:	b01c      	add	sp, #112	; 0x70
 8009194:	bc08      	pop	{r3}
 8009196:	b003      	add	sp, #12
 8009198:	4718      	bx	r3
 800919a:	46c0      	nop			; (mov r8, r8)
 800919c:	7fffffff 	.word	0x7fffffff
 80091a0:	20000010 	.word	0x20000010
 80091a4:	ffff0208 	.word	0xffff0208

080091a8 <quorem>:
 80091a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091aa:	0006      	movs	r6, r0
 80091ac:	690b      	ldr	r3, [r1, #16]
 80091ae:	6932      	ldr	r2, [r6, #16]
 80091b0:	b087      	sub	sp, #28
 80091b2:	2000      	movs	r0, #0
 80091b4:	9103      	str	r1, [sp, #12]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	db65      	blt.n	8009286 <quorem+0xde>
 80091ba:	3b01      	subs	r3, #1
 80091bc:	009c      	lsls	r4, r3, #2
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	000b      	movs	r3, r1
 80091c2:	3314      	adds	r3, #20
 80091c4:	9305      	str	r3, [sp, #20]
 80091c6:	191b      	adds	r3, r3, r4
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	0033      	movs	r3, r6
 80091cc:	3314      	adds	r3, #20
 80091ce:	9302      	str	r3, [sp, #8]
 80091d0:	191c      	adds	r4, r3, r4
 80091d2:	9b04      	ldr	r3, [sp, #16]
 80091d4:	6827      	ldr	r7, [r4, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	0038      	movs	r0, r7
 80091da:	1c5d      	adds	r5, r3, #1
 80091dc:	0029      	movs	r1, r5
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	f7f6 ffae 	bl	8000140 <__udivsi3>
 80091e4:	9001      	str	r0, [sp, #4]
 80091e6:	42af      	cmp	r7, r5
 80091e8:	d324      	bcc.n	8009234 <quorem+0x8c>
 80091ea:	2500      	movs	r5, #0
 80091ec:	46ac      	mov	ip, r5
 80091ee:	9802      	ldr	r0, [sp, #8]
 80091f0:	9f05      	ldr	r7, [sp, #20]
 80091f2:	cf08      	ldmia	r7!, {r3}
 80091f4:	9a01      	ldr	r2, [sp, #4]
 80091f6:	b299      	uxth	r1, r3
 80091f8:	4351      	muls	r1, r2
 80091fa:	0c1b      	lsrs	r3, r3, #16
 80091fc:	4353      	muls	r3, r2
 80091fe:	1949      	adds	r1, r1, r5
 8009200:	0c0a      	lsrs	r2, r1, #16
 8009202:	189b      	adds	r3, r3, r2
 8009204:	6802      	ldr	r2, [r0, #0]
 8009206:	b289      	uxth	r1, r1
 8009208:	b292      	uxth	r2, r2
 800920a:	4462      	add	r2, ip
 800920c:	1a52      	subs	r2, r2, r1
 800920e:	6801      	ldr	r1, [r0, #0]
 8009210:	0c1d      	lsrs	r5, r3, #16
 8009212:	0c09      	lsrs	r1, r1, #16
 8009214:	b29b      	uxth	r3, r3
 8009216:	1acb      	subs	r3, r1, r3
 8009218:	1411      	asrs	r1, r2, #16
 800921a:	185b      	adds	r3, r3, r1
 800921c:	1419      	asrs	r1, r3, #16
 800921e:	b292      	uxth	r2, r2
 8009220:	041b      	lsls	r3, r3, #16
 8009222:	431a      	orrs	r2, r3
 8009224:	9b04      	ldr	r3, [sp, #16]
 8009226:	468c      	mov	ip, r1
 8009228:	c004      	stmia	r0!, {r2}
 800922a:	42bb      	cmp	r3, r7
 800922c:	d2e1      	bcs.n	80091f2 <quorem+0x4a>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d030      	beq.n	8009296 <quorem+0xee>
 8009234:	0030      	movs	r0, r6
 8009236:	9903      	ldr	r1, [sp, #12]
 8009238:	f001 f8fa 	bl	800a430 <__mcmp>
 800923c:	2800      	cmp	r0, #0
 800923e:	db21      	blt.n	8009284 <quorem+0xdc>
 8009240:	0030      	movs	r0, r6
 8009242:	2400      	movs	r4, #0
 8009244:	9b01      	ldr	r3, [sp, #4]
 8009246:	9903      	ldr	r1, [sp, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	3014      	adds	r0, #20
 800924e:	3114      	adds	r1, #20
 8009250:	6803      	ldr	r3, [r0, #0]
 8009252:	c920      	ldmia	r1!, {r5}
 8009254:	b29a      	uxth	r2, r3
 8009256:	1914      	adds	r4, r2, r4
 8009258:	b2aa      	uxth	r2, r5
 800925a:	1aa2      	subs	r2, r4, r2
 800925c:	0c1b      	lsrs	r3, r3, #16
 800925e:	0c2d      	lsrs	r5, r5, #16
 8009260:	1414      	asrs	r4, r2, #16
 8009262:	1b5b      	subs	r3, r3, r5
 8009264:	191b      	adds	r3, r3, r4
 8009266:	141c      	asrs	r4, r3, #16
 8009268:	b292      	uxth	r2, r2
 800926a:	041b      	lsls	r3, r3, #16
 800926c:	4313      	orrs	r3, r2
 800926e:	c008      	stmia	r0!, {r3}
 8009270:	9b04      	ldr	r3, [sp, #16]
 8009272:	428b      	cmp	r3, r1
 8009274:	d2ec      	bcs.n	8009250 <quorem+0xa8>
 8009276:	9b00      	ldr	r3, [sp, #0]
 8009278:	9a02      	ldr	r2, [sp, #8]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	18d3      	adds	r3, r2, r3
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	2a00      	cmp	r2, #0
 8009282:	d015      	beq.n	80092b0 <quorem+0x108>
 8009284:	9801      	ldr	r0, [sp, #4]
 8009286:	b007      	add	sp, #28
 8009288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d106      	bne.n	800929e <quorem+0xf6>
 8009290:	9b00      	ldr	r3, [sp, #0]
 8009292:	3b01      	subs	r3, #1
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	9b02      	ldr	r3, [sp, #8]
 8009298:	3c04      	subs	r4, #4
 800929a:	42a3      	cmp	r3, r4
 800929c:	d3f5      	bcc.n	800928a <quorem+0xe2>
 800929e:	9b00      	ldr	r3, [sp, #0]
 80092a0:	6133      	str	r3, [r6, #16]
 80092a2:	e7c7      	b.n	8009234 <quorem+0x8c>
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	2a00      	cmp	r2, #0
 80092a8:	d106      	bne.n	80092b8 <quorem+0x110>
 80092aa:	9a00      	ldr	r2, [sp, #0]
 80092ac:	3a01      	subs	r2, #1
 80092ae:	9200      	str	r2, [sp, #0]
 80092b0:	9a02      	ldr	r2, [sp, #8]
 80092b2:	3b04      	subs	r3, #4
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d3f5      	bcc.n	80092a4 <quorem+0xfc>
 80092b8:	9b00      	ldr	r3, [sp, #0]
 80092ba:	6133      	str	r3, [r6, #16]
 80092bc:	e7e2      	b.n	8009284 <quorem+0xdc>
	...

080092c0 <_dtoa_r>:
 80092c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092c2:	b09d      	sub	sp, #116	; 0x74
 80092c4:	9202      	str	r2, [sp, #8]
 80092c6:	9303      	str	r3, [sp, #12]
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	9c03      	ldr	r4, [sp, #12]
 80092cc:	9308      	str	r3, [sp, #32]
 80092ce:	9409      	str	r4, [sp, #36]	; 0x24
 80092d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80092d2:	0007      	movs	r7, r0
 80092d4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80092d6:	2c00      	cmp	r4, #0
 80092d8:	d10e      	bne.n	80092f8 <_dtoa_r+0x38>
 80092da:	2010      	movs	r0, #16
 80092dc:	f000 fe0e 	bl	8009efc <malloc>
 80092e0:	1e02      	subs	r2, r0, #0
 80092e2:	6278      	str	r0, [r7, #36]	; 0x24
 80092e4:	d104      	bne.n	80092f0 <_dtoa_r+0x30>
 80092e6:	21ea      	movs	r1, #234	; 0xea
 80092e8:	4bc7      	ldr	r3, [pc, #796]	; (8009608 <_dtoa_r+0x348>)
 80092ea:	48c8      	ldr	r0, [pc, #800]	; (800960c <_dtoa_r+0x34c>)
 80092ec:	f001 fc3a 	bl	800ab64 <__assert_func>
 80092f0:	6044      	str	r4, [r0, #4]
 80092f2:	6084      	str	r4, [r0, #8]
 80092f4:	6004      	str	r4, [r0, #0]
 80092f6:	60c4      	str	r4, [r0, #12]
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	6819      	ldr	r1, [r3, #0]
 80092fc:	2900      	cmp	r1, #0
 80092fe:	d00a      	beq.n	8009316 <_dtoa_r+0x56>
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	2301      	movs	r3, #1
 8009304:	4093      	lsls	r3, r2
 8009306:	604a      	str	r2, [r1, #4]
 8009308:	608b      	str	r3, [r1, #8]
 800930a:	0038      	movs	r0, r7
 800930c:	f000 fe50 	bl	8009fb0 <_Bfree>
 8009310:	2200      	movs	r2, #0
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	da20      	bge.n	800935e <_dtoa_r+0x9e>
 800931c:	2301      	movs	r3, #1
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	085b      	lsrs	r3, r3, #1
 8009326:	9309      	str	r3, [sp, #36]	; 0x24
 8009328:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800932a:	4bb9      	ldr	r3, [pc, #740]	; (8009610 <_dtoa_r+0x350>)
 800932c:	4ab8      	ldr	r2, [pc, #736]	; (8009610 <_dtoa_r+0x350>)
 800932e:	402b      	ands	r3, r5
 8009330:	4293      	cmp	r3, r2
 8009332:	d117      	bne.n	8009364 <_dtoa_r+0xa4>
 8009334:	4bb7      	ldr	r3, [pc, #732]	; (8009614 <_dtoa_r+0x354>)
 8009336:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009338:	0328      	lsls	r0, r5, #12
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	9b02      	ldr	r3, [sp, #8]
 800933e:	0b00      	lsrs	r0, r0, #12
 8009340:	4318      	orrs	r0, r3
 8009342:	d101      	bne.n	8009348 <_dtoa_r+0x88>
 8009344:	f000 fdbf 	bl	8009ec6 <_dtoa_r+0xc06>
 8009348:	48b3      	ldr	r0, [pc, #716]	; (8009618 <_dtoa_r+0x358>)
 800934a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800934c:	9006      	str	r0, [sp, #24]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <_dtoa_r+0x98>
 8009352:	4bb2      	ldr	r3, [pc, #712]	; (800961c <_dtoa_r+0x35c>)
 8009354:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	9806      	ldr	r0, [sp, #24]
 800935a:	b01d      	add	sp, #116	; 0x74
 800935c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935e:	2300      	movs	r3, #0
 8009360:	602b      	str	r3, [r5, #0]
 8009362:	e7e1      	b.n	8009328 <_dtoa_r+0x68>
 8009364:	9b08      	ldr	r3, [sp, #32]
 8009366:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009368:	9312      	str	r3, [sp, #72]	; 0x48
 800936a:	9413      	str	r4, [sp, #76]	; 0x4c
 800936c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800936e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009370:	2200      	movs	r2, #0
 8009372:	2300      	movs	r3, #0
 8009374:	f7f7 f86a 	bl	800044c <__aeabi_dcmpeq>
 8009378:	1e04      	subs	r4, r0, #0
 800937a:	d009      	beq.n	8009390 <_dtoa_r+0xd0>
 800937c:	2301      	movs	r3, #1
 800937e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	4ba7      	ldr	r3, [pc, #668]	; (8009620 <_dtoa_r+0x360>)
 8009384:	9306      	str	r3, [sp, #24]
 8009386:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0e5      	beq.n	8009358 <_dtoa_r+0x98>
 800938c:	4ba5      	ldr	r3, [pc, #660]	; (8009624 <_dtoa_r+0x364>)
 800938e:	e7e1      	b.n	8009354 <_dtoa_r+0x94>
 8009390:	ab1a      	add	r3, sp, #104	; 0x68
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	ab1b      	add	r3, sp, #108	; 0x6c
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	0038      	movs	r0, r7
 800939a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800939c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800939e:	f001 f8fb 	bl	800a598 <__d2b>
 80093a2:	006e      	lsls	r6, r5, #1
 80093a4:	9005      	str	r0, [sp, #20]
 80093a6:	0d76      	lsrs	r6, r6, #21
 80093a8:	d100      	bne.n	80093ac <_dtoa_r+0xec>
 80093aa:	e07c      	b.n	80094a6 <_dtoa_r+0x1e6>
 80093ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80093ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80093b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093b2:	4a9d      	ldr	r2, [pc, #628]	; (8009628 <_dtoa_r+0x368>)
 80093b4:	031b      	lsls	r3, r3, #12
 80093b6:	0b1b      	lsrs	r3, r3, #12
 80093b8:	431a      	orrs	r2, r3
 80093ba:	0011      	movs	r1, r2
 80093bc:	4b9b      	ldr	r3, [pc, #620]	; (800962c <_dtoa_r+0x36c>)
 80093be:	9418      	str	r4, [sp, #96]	; 0x60
 80093c0:	18f6      	adds	r6, r6, r3
 80093c2:	2200      	movs	r2, #0
 80093c4:	4b9a      	ldr	r3, [pc, #616]	; (8009630 <_dtoa_r+0x370>)
 80093c6:	f7f9 fa55 	bl	8002874 <__aeabi_dsub>
 80093ca:	4a9a      	ldr	r2, [pc, #616]	; (8009634 <_dtoa_r+0x374>)
 80093cc:	4b9a      	ldr	r3, [pc, #616]	; (8009638 <_dtoa_r+0x378>)
 80093ce:	f7f8 ffe5 	bl	800239c <__aeabi_dmul>
 80093d2:	4a9a      	ldr	r2, [pc, #616]	; (800963c <_dtoa_r+0x37c>)
 80093d4:	4b9a      	ldr	r3, [pc, #616]	; (8009640 <_dtoa_r+0x380>)
 80093d6:	f7f8 f8a3 	bl	8001520 <__aeabi_dadd>
 80093da:	0004      	movs	r4, r0
 80093dc:	0030      	movs	r0, r6
 80093de:	000d      	movs	r5, r1
 80093e0:	f7f9 fe2e 	bl	8003040 <__aeabi_i2d>
 80093e4:	4a97      	ldr	r2, [pc, #604]	; (8009644 <_dtoa_r+0x384>)
 80093e6:	4b98      	ldr	r3, [pc, #608]	; (8009648 <_dtoa_r+0x388>)
 80093e8:	f7f8 ffd8 	bl	800239c <__aeabi_dmul>
 80093ec:	0002      	movs	r2, r0
 80093ee:	000b      	movs	r3, r1
 80093f0:	0020      	movs	r0, r4
 80093f2:	0029      	movs	r1, r5
 80093f4:	f7f8 f894 	bl	8001520 <__aeabi_dadd>
 80093f8:	0004      	movs	r4, r0
 80093fa:	000d      	movs	r5, r1
 80093fc:	f7f9 fdea 	bl	8002fd4 <__aeabi_d2iz>
 8009400:	2200      	movs	r2, #0
 8009402:	9002      	str	r0, [sp, #8]
 8009404:	2300      	movs	r3, #0
 8009406:	0020      	movs	r0, r4
 8009408:	0029      	movs	r1, r5
 800940a:	f7f7 f825 	bl	8000458 <__aeabi_dcmplt>
 800940e:	2800      	cmp	r0, #0
 8009410:	d00b      	beq.n	800942a <_dtoa_r+0x16a>
 8009412:	9802      	ldr	r0, [sp, #8]
 8009414:	f7f9 fe14 	bl	8003040 <__aeabi_i2d>
 8009418:	002b      	movs	r3, r5
 800941a:	0022      	movs	r2, r4
 800941c:	f7f7 f816 	bl	800044c <__aeabi_dcmpeq>
 8009420:	4243      	negs	r3, r0
 8009422:	4158      	adcs	r0, r3
 8009424:	9b02      	ldr	r3, [sp, #8]
 8009426:	1a1b      	subs	r3, r3, r0
 8009428:	9302      	str	r3, [sp, #8]
 800942a:	2301      	movs	r3, #1
 800942c:	9316      	str	r3, [sp, #88]	; 0x58
 800942e:	9b02      	ldr	r3, [sp, #8]
 8009430:	2b16      	cmp	r3, #22
 8009432:	d80f      	bhi.n	8009454 <_dtoa_r+0x194>
 8009434:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009436:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009438:	00da      	lsls	r2, r3, #3
 800943a:	4b84      	ldr	r3, [pc, #528]	; (800964c <_dtoa_r+0x38c>)
 800943c:	189b      	adds	r3, r3, r2
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f7f7 f809 	bl	8000458 <__aeabi_dcmplt>
 8009446:	2800      	cmp	r0, #0
 8009448:	d049      	beq.n	80094de <_dtoa_r+0x21e>
 800944a:	9b02      	ldr	r3, [sp, #8]
 800944c:	3b01      	subs	r3, #1
 800944e:	9302      	str	r3, [sp, #8]
 8009450:	2300      	movs	r3, #0
 8009452:	9316      	str	r3, [sp, #88]	; 0x58
 8009454:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009456:	1b9e      	subs	r6, r3, r6
 8009458:	2300      	movs	r3, #0
 800945a:	930a      	str	r3, [sp, #40]	; 0x28
 800945c:	0033      	movs	r3, r6
 800945e:	3b01      	subs	r3, #1
 8009460:	930d      	str	r3, [sp, #52]	; 0x34
 8009462:	d504      	bpl.n	800946e <_dtoa_r+0x1ae>
 8009464:	2301      	movs	r3, #1
 8009466:	1b9b      	subs	r3, r3, r6
 8009468:	930a      	str	r3, [sp, #40]	; 0x28
 800946a:	2300      	movs	r3, #0
 800946c:	930d      	str	r3, [sp, #52]	; 0x34
 800946e:	9b02      	ldr	r3, [sp, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	db36      	blt.n	80094e2 <_dtoa_r+0x222>
 8009474:	9a02      	ldr	r2, [sp, #8]
 8009476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009478:	4694      	mov	ip, r2
 800947a:	4463      	add	r3, ip
 800947c:	930d      	str	r3, [sp, #52]	; 0x34
 800947e:	2300      	movs	r3, #0
 8009480:	9215      	str	r2, [sp, #84]	; 0x54
 8009482:	930e      	str	r3, [sp, #56]	; 0x38
 8009484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009486:	2401      	movs	r4, #1
 8009488:	2b09      	cmp	r3, #9
 800948a:	d864      	bhi.n	8009556 <_dtoa_r+0x296>
 800948c:	2b05      	cmp	r3, #5
 800948e:	dd02      	ble.n	8009496 <_dtoa_r+0x1d6>
 8009490:	2400      	movs	r4, #0
 8009492:	3b04      	subs	r3, #4
 8009494:	9322      	str	r3, [sp, #136]	; 0x88
 8009496:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009498:	1e98      	subs	r0, r3, #2
 800949a:	2803      	cmp	r0, #3
 800949c:	d864      	bhi.n	8009568 <_dtoa_r+0x2a8>
 800949e:	f7f6 fe3b 	bl	8000118 <__gnu_thumb1_case_uqi>
 80094a2:	3829      	.short	0x3829
 80094a4:	5836      	.short	0x5836
 80094a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80094a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80094aa:	189e      	adds	r6, r3, r2
 80094ac:	4b68      	ldr	r3, [pc, #416]	; (8009650 <_dtoa_r+0x390>)
 80094ae:	18f2      	adds	r2, r6, r3
 80094b0:	2a20      	cmp	r2, #32
 80094b2:	dd0f      	ble.n	80094d4 <_dtoa_r+0x214>
 80094b4:	2340      	movs	r3, #64	; 0x40
 80094b6:	1a9b      	subs	r3, r3, r2
 80094b8:	409d      	lsls	r5, r3
 80094ba:	4b66      	ldr	r3, [pc, #408]	; (8009654 <_dtoa_r+0x394>)
 80094bc:	9802      	ldr	r0, [sp, #8]
 80094be:	18f3      	adds	r3, r6, r3
 80094c0:	40d8      	lsrs	r0, r3
 80094c2:	4328      	orrs	r0, r5
 80094c4:	f7f9 fdec 	bl	80030a0 <__aeabi_ui2d>
 80094c8:	2301      	movs	r3, #1
 80094ca:	4c63      	ldr	r4, [pc, #396]	; (8009658 <_dtoa_r+0x398>)
 80094cc:	3e01      	subs	r6, #1
 80094ce:	1909      	adds	r1, r1, r4
 80094d0:	9318      	str	r3, [sp, #96]	; 0x60
 80094d2:	e776      	b.n	80093c2 <_dtoa_r+0x102>
 80094d4:	2320      	movs	r3, #32
 80094d6:	9802      	ldr	r0, [sp, #8]
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	4098      	lsls	r0, r3
 80094dc:	e7f2      	b.n	80094c4 <_dtoa_r+0x204>
 80094de:	9016      	str	r0, [sp, #88]	; 0x58
 80094e0:	e7b8      	b.n	8009454 <_dtoa_r+0x194>
 80094e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e4:	9a02      	ldr	r2, [sp, #8]
 80094e6:	1a9b      	subs	r3, r3, r2
 80094e8:	930a      	str	r3, [sp, #40]	; 0x28
 80094ea:	4253      	negs	r3, r2
 80094ec:	930e      	str	r3, [sp, #56]	; 0x38
 80094ee:	2300      	movs	r3, #0
 80094f0:	9315      	str	r3, [sp, #84]	; 0x54
 80094f2:	e7c7      	b.n	8009484 <_dtoa_r+0x1c4>
 80094f4:	2300      	movs	r3, #0
 80094f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80094f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094fa:	930c      	str	r3, [sp, #48]	; 0x30
 80094fc:	9307      	str	r3, [sp, #28]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dc13      	bgt.n	800952a <_dtoa_r+0x26a>
 8009502:	2301      	movs	r3, #1
 8009504:	001a      	movs	r2, r3
 8009506:	930c      	str	r3, [sp, #48]	; 0x30
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	9223      	str	r2, [sp, #140]	; 0x8c
 800950c:	e00d      	b.n	800952a <_dtoa_r+0x26a>
 800950e:	2301      	movs	r3, #1
 8009510:	e7f1      	b.n	80094f6 <_dtoa_r+0x236>
 8009512:	2300      	movs	r3, #0
 8009514:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009516:	930f      	str	r3, [sp, #60]	; 0x3c
 8009518:	4694      	mov	ip, r2
 800951a:	9b02      	ldr	r3, [sp, #8]
 800951c:	4463      	add	r3, ip
 800951e:	930c      	str	r3, [sp, #48]	; 0x30
 8009520:	3301      	adds	r3, #1
 8009522:	9307      	str	r3, [sp, #28]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dc00      	bgt.n	800952a <_dtoa_r+0x26a>
 8009528:	2301      	movs	r3, #1
 800952a:	2200      	movs	r2, #0
 800952c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800952e:	6042      	str	r2, [r0, #4]
 8009530:	3204      	adds	r2, #4
 8009532:	0015      	movs	r5, r2
 8009534:	3514      	adds	r5, #20
 8009536:	6841      	ldr	r1, [r0, #4]
 8009538:	429d      	cmp	r5, r3
 800953a:	d919      	bls.n	8009570 <_dtoa_r+0x2b0>
 800953c:	0038      	movs	r0, r7
 800953e:	f000 fcf3 	bl	8009f28 <_Balloc>
 8009542:	9006      	str	r0, [sp, #24]
 8009544:	2800      	cmp	r0, #0
 8009546:	d117      	bne.n	8009578 <_dtoa_r+0x2b8>
 8009548:	21d5      	movs	r1, #213	; 0xd5
 800954a:	0002      	movs	r2, r0
 800954c:	4b43      	ldr	r3, [pc, #268]	; (800965c <_dtoa_r+0x39c>)
 800954e:	0049      	lsls	r1, r1, #1
 8009550:	e6cb      	b.n	80092ea <_dtoa_r+0x2a>
 8009552:	2301      	movs	r3, #1
 8009554:	e7de      	b.n	8009514 <_dtoa_r+0x254>
 8009556:	2300      	movs	r3, #0
 8009558:	940f      	str	r4, [sp, #60]	; 0x3c
 800955a:	9322      	str	r3, [sp, #136]	; 0x88
 800955c:	3b01      	subs	r3, #1
 800955e:	930c      	str	r3, [sp, #48]	; 0x30
 8009560:	9307      	str	r3, [sp, #28]
 8009562:	2200      	movs	r2, #0
 8009564:	3313      	adds	r3, #19
 8009566:	e7d0      	b.n	800950a <_dtoa_r+0x24a>
 8009568:	2301      	movs	r3, #1
 800956a:	930f      	str	r3, [sp, #60]	; 0x3c
 800956c:	3b02      	subs	r3, #2
 800956e:	e7f6      	b.n	800955e <_dtoa_r+0x29e>
 8009570:	3101      	adds	r1, #1
 8009572:	6041      	str	r1, [r0, #4]
 8009574:	0052      	lsls	r2, r2, #1
 8009576:	e7dc      	b.n	8009532 <_dtoa_r+0x272>
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	9a06      	ldr	r2, [sp, #24]
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	9b07      	ldr	r3, [sp, #28]
 8009580:	2b0e      	cmp	r3, #14
 8009582:	d900      	bls.n	8009586 <_dtoa_r+0x2c6>
 8009584:	e0eb      	b.n	800975e <_dtoa_r+0x49e>
 8009586:	2c00      	cmp	r4, #0
 8009588:	d100      	bne.n	800958c <_dtoa_r+0x2cc>
 800958a:	e0e8      	b.n	800975e <_dtoa_r+0x49e>
 800958c:	9b02      	ldr	r3, [sp, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	dd68      	ble.n	8009664 <_dtoa_r+0x3a4>
 8009592:	001a      	movs	r2, r3
 8009594:	210f      	movs	r1, #15
 8009596:	4b2d      	ldr	r3, [pc, #180]	; (800964c <_dtoa_r+0x38c>)
 8009598:	400a      	ands	r2, r1
 800959a:	00d2      	lsls	r2, r2, #3
 800959c:	189b      	adds	r3, r3, r2
 800959e:	681d      	ldr	r5, [r3, #0]
 80095a0:	685e      	ldr	r6, [r3, #4]
 80095a2:	9b02      	ldr	r3, [sp, #8]
 80095a4:	111c      	asrs	r4, r3, #4
 80095a6:	2302      	movs	r3, #2
 80095a8:	9310      	str	r3, [sp, #64]	; 0x40
 80095aa:	9b02      	ldr	r3, [sp, #8]
 80095ac:	05db      	lsls	r3, r3, #23
 80095ae:	d50b      	bpl.n	80095c8 <_dtoa_r+0x308>
 80095b0:	4b2b      	ldr	r3, [pc, #172]	; (8009660 <_dtoa_r+0x3a0>)
 80095b2:	400c      	ands	r4, r1
 80095b4:	6a1a      	ldr	r2, [r3, #32]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80095ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80095bc:	f7f8 faec 	bl	8001b98 <__aeabi_ddiv>
 80095c0:	2303      	movs	r3, #3
 80095c2:	9008      	str	r0, [sp, #32]
 80095c4:	9109      	str	r1, [sp, #36]	; 0x24
 80095c6:	9310      	str	r3, [sp, #64]	; 0x40
 80095c8:	4b25      	ldr	r3, [pc, #148]	; (8009660 <_dtoa_r+0x3a0>)
 80095ca:	9314      	str	r3, [sp, #80]	; 0x50
 80095cc:	2c00      	cmp	r4, #0
 80095ce:	d108      	bne.n	80095e2 <_dtoa_r+0x322>
 80095d0:	9808      	ldr	r0, [sp, #32]
 80095d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095d4:	002a      	movs	r2, r5
 80095d6:	0033      	movs	r3, r6
 80095d8:	f7f8 fade 	bl	8001b98 <__aeabi_ddiv>
 80095dc:	9008      	str	r0, [sp, #32]
 80095de:	9109      	str	r1, [sp, #36]	; 0x24
 80095e0:	e05c      	b.n	800969c <_dtoa_r+0x3dc>
 80095e2:	2301      	movs	r3, #1
 80095e4:	421c      	tst	r4, r3
 80095e6:	d00b      	beq.n	8009600 <_dtoa_r+0x340>
 80095e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095ea:	0028      	movs	r0, r5
 80095ec:	3301      	adds	r3, #1
 80095ee:	9310      	str	r3, [sp, #64]	; 0x40
 80095f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095f2:	0031      	movs	r1, r6
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f7f8 fed0 	bl	800239c <__aeabi_dmul>
 80095fc:	0005      	movs	r5, r0
 80095fe:	000e      	movs	r6, r1
 8009600:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009602:	1064      	asrs	r4, r4, #1
 8009604:	3308      	adds	r3, #8
 8009606:	e7e0      	b.n	80095ca <_dtoa_r+0x30a>
 8009608:	0800ba39 	.word	0x0800ba39
 800960c:	0800ba50 	.word	0x0800ba50
 8009610:	7ff00000 	.word	0x7ff00000
 8009614:	0000270f 	.word	0x0000270f
 8009618:	0800ba35 	.word	0x0800ba35
 800961c:	0800ba38 	.word	0x0800ba38
 8009620:	0800ba08 	.word	0x0800ba08
 8009624:	0800ba09 	.word	0x0800ba09
 8009628:	3ff00000 	.word	0x3ff00000
 800962c:	fffffc01 	.word	0xfffffc01
 8009630:	3ff80000 	.word	0x3ff80000
 8009634:	636f4361 	.word	0x636f4361
 8009638:	3fd287a7 	.word	0x3fd287a7
 800963c:	8b60c8b3 	.word	0x8b60c8b3
 8009640:	3fc68a28 	.word	0x3fc68a28
 8009644:	509f79fb 	.word	0x509f79fb
 8009648:	3fd34413 	.word	0x3fd34413
 800964c:	0800bb40 	.word	0x0800bb40
 8009650:	00000432 	.word	0x00000432
 8009654:	00000412 	.word	0x00000412
 8009658:	fe100000 	.word	0xfe100000
 800965c:	0800baab 	.word	0x0800baab
 8009660:	0800bb18 	.word	0x0800bb18
 8009664:	2302      	movs	r3, #2
 8009666:	9310      	str	r3, [sp, #64]	; 0x40
 8009668:	9b02      	ldr	r3, [sp, #8]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d016      	beq.n	800969c <_dtoa_r+0x3dc>
 800966e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009670:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009672:	425c      	negs	r4, r3
 8009674:	230f      	movs	r3, #15
 8009676:	4ab6      	ldr	r2, [pc, #728]	; (8009950 <_dtoa_r+0x690>)
 8009678:	4023      	ands	r3, r4
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	18d3      	adds	r3, r2, r3
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f7f8 fe8b 	bl	800239c <__aeabi_dmul>
 8009686:	2601      	movs	r6, #1
 8009688:	2300      	movs	r3, #0
 800968a:	9008      	str	r0, [sp, #32]
 800968c:	9109      	str	r1, [sp, #36]	; 0x24
 800968e:	4db1      	ldr	r5, [pc, #708]	; (8009954 <_dtoa_r+0x694>)
 8009690:	1124      	asrs	r4, r4, #4
 8009692:	2c00      	cmp	r4, #0
 8009694:	d000      	beq.n	8009698 <_dtoa_r+0x3d8>
 8009696:	e094      	b.n	80097c2 <_dtoa_r+0x502>
 8009698:	2b00      	cmp	r3, #0
 800969a:	d19f      	bne.n	80095dc <_dtoa_r+0x31c>
 800969c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d100      	bne.n	80096a4 <_dtoa_r+0x3e4>
 80096a2:	e09b      	b.n	80097dc <_dtoa_r+0x51c>
 80096a4:	9c08      	ldr	r4, [sp, #32]
 80096a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80096a8:	2200      	movs	r2, #0
 80096aa:	0020      	movs	r0, r4
 80096ac:	0029      	movs	r1, r5
 80096ae:	4baa      	ldr	r3, [pc, #680]	; (8009958 <_dtoa_r+0x698>)
 80096b0:	f7f6 fed2 	bl	8000458 <__aeabi_dcmplt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d100      	bne.n	80096ba <_dtoa_r+0x3fa>
 80096b8:	e090      	b.n	80097dc <_dtoa_r+0x51c>
 80096ba:	9b07      	ldr	r3, [sp, #28]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d100      	bne.n	80096c2 <_dtoa_r+0x402>
 80096c0:	e08c      	b.n	80097dc <_dtoa_r+0x51c>
 80096c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dd46      	ble.n	8009756 <_dtoa_r+0x496>
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	2200      	movs	r2, #0
 80096cc:	0020      	movs	r0, r4
 80096ce:	0029      	movs	r1, r5
 80096d0:	1e5e      	subs	r6, r3, #1
 80096d2:	4ba2      	ldr	r3, [pc, #648]	; (800995c <_dtoa_r+0x69c>)
 80096d4:	f7f8 fe62 	bl	800239c <__aeabi_dmul>
 80096d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096da:	9008      	str	r0, [sp, #32]
 80096dc:	9109      	str	r1, [sp, #36]	; 0x24
 80096de:	3301      	adds	r3, #1
 80096e0:	9310      	str	r3, [sp, #64]	; 0x40
 80096e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80096e6:	9c08      	ldr	r4, [sp, #32]
 80096e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80096ea:	9314      	str	r3, [sp, #80]	; 0x50
 80096ec:	f7f9 fca8 	bl	8003040 <__aeabi_i2d>
 80096f0:	0022      	movs	r2, r4
 80096f2:	002b      	movs	r3, r5
 80096f4:	f7f8 fe52 	bl	800239c <__aeabi_dmul>
 80096f8:	2200      	movs	r2, #0
 80096fa:	4b99      	ldr	r3, [pc, #612]	; (8009960 <_dtoa_r+0x6a0>)
 80096fc:	f7f7 ff10 	bl	8001520 <__aeabi_dadd>
 8009700:	9010      	str	r0, [sp, #64]	; 0x40
 8009702:	9111      	str	r1, [sp, #68]	; 0x44
 8009704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009708:	9208      	str	r2, [sp, #32]
 800970a:	9309      	str	r3, [sp, #36]	; 0x24
 800970c:	4a95      	ldr	r2, [pc, #596]	; (8009964 <_dtoa_r+0x6a4>)
 800970e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009710:	4694      	mov	ip, r2
 8009712:	4463      	add	r3, ip
 8009714:	9317      	str	r3, [sp, #92]	; 0x5c
 8009716:	9309      	str	r3, [sp, #36]	; 0x24
 8009718:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800971a:	2b00      	cmp	r3, #0
 800971c:	d161      	bne.n	80097e2 <_dtoa_r+0x522>
 800971e:	2200      	movs	r2, #0
 8009720:	0020      	movs	r0, r4
 8009722:	0029      	movs	r1, r5
 8009724:	4b90      	ldr	r3, [pc, #576]	; (8009968 <_dtoa_r+0x6a8>)
 8009726:	f7f9 f8a5 	bl	8002874 <__aeabi_dsub>
 800972a:	9a08      	ldr	r2, [sp, #32]
 800972c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800972e:	0004      	movs	r4, r0
 8009730:	000d      	movs	r5, r1
 8009732:	f7f6 fea5 	bl	8000480 <__aeabi_dcmpgt>
 8009736:	2800      	cmp	r0, #0
 8009738:	d000      	beq.n	800973c <_dtoa_r+0x47c>
 800973a:	e2af      	b.n	8009c9c <_dtoa_r+0x9dc>
 800973c:	488b      	ldr	r0, [pc, #556]	; (800996c <_dtoa_r+0x6ac>)
 800973e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009740:	4684      	mov	ip, r0
 8009742:	4461      	add	r1, ip
 8009744:	000b      	movs	r3, r1
 8009746:	0020      	movs	r0, r4
 8009748:	0029      	movs	r1, r5
 800974a:	9a08      	ldr	r2, [sp, #32]
 800974c:	f7f6 fe84 	bl	8000458 <__aeabi_dcmplt>
 8009750:	2800      	cmp	r0, #0
 8009752:	d000      	beq.n	8009756 <_dtoa_r+0x496>
 8009754:	e29f      	b.n	8009c96 <_dtoa_r+0x9d6>
 8009756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009758:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800975a:	9308      	str	r3, [sp, #32]
 800975c:	9409      	str	r4, [sp, #36]	; 0x24
 800975e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009760:	2b00      	cmp	r3, #0
 8009762:	da00      	bge.n	8009766 <_dtoa_r+0x4a6>
 8009764:	e172      	b.n	8009a4c <_dtoa_r+0x78c>
 8009766:	9a02      	ldr	r2, [sp, #8]
 8009768:	2a0e      	cmp	r2, #14
 800976a:	dd00      	ble.n	800976e <_dtoa_r+0x4ae>
 800976c:	e16e      	b.n	8009a4c <_dtoa_r+0x78c>
 800976e:	4b78      	ldr	r3, [pc, #480]	; (8009950 <_dtoa_r+0x690>)
 8009770:	00d2      	lsls	r2, r2, #3
 8009772:	189b      	adds	r3, r3, r2
 8009774:	685c      	ldr	r4, [r3, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	930a      	str	r3, [sp, #40]	; 0x28
 800977a:	940b      	str	r4, [sp, #44]	; 0x2c
 800977c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800977e:	2b00      	cmp	r3, #0
 8009780:	db00      	blt.n	8009784 <_dtoa_r+0x4c4>
 8009782:	e0f7      	b.n	8009974 <_dtoa_r+0x6b4>
 8009784:	9b07      	ldr	r3, [sp, #28]
 8009786:	2b00      	cmp	r3, #0
 8009788:	dd00      	ble.n	800978c <_dtoa_r+0x4cc>
 800978a:	e0f3      	b.n	8009974 <_dtoa_r+0x6b4>
 800978c:	d000      	beq.n	8009790 <_dtoa_r+0x4d0>
 800978e:	e282      	b.n	8009c96 <_dtoa_r+0x9d6>
 8009790:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009794:	2200      	movs	r2, #0
 8009796:	4b74      	ldr	r3, [pc, #464]	; (8009968 <_dtoa_r+0x6a8>)
 8009798:	f7f8 fe00 	bl	800239c <__aeabi_dmul>
 800979c:	9a08      	ldr	r2, [sp, #32]
 800979e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a0:	f7f6 fe78 	bl	8000494 <__aeabi_dcmpge>
 80097a4:	9e07      	ldr	r6, [sp, #28]
 80097a6:	0035      	movs	r5, r6
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d000      	beq.n	80097ae <_dtoa_r+0x4ee>
 80097ac:	e259      	b.n	8009c62 <_dtoa_r+0x9a2>
 80097ae:	9b06      	ldr	r3, [sp, #24]
 80097b0:	9a06      	ldr	r2, [sp, #24]
 80097b2:	3301      	adds	r3, #1
 80097b4:	9308      	str	r3, [sp, #32]
 80097b6:	2331      	movs	r3, #49	; 0x31
 80097b8:	7013      	strb	r3, [r2, #0]
 80097ba:	9b02      	ldr	r3, [sp, #8]
 80097bc:	3301      	adds	r3, #1
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	e254      	b.n	8009c6c <_dtoa_r+0x9ac>
 80097c2:	4234      	tst	r4, r6
 80097c4:	d007      	beq.n	80097d6 <_dtoa_r+0x516>
 80097c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097c8:	3301      	adds	r3, #1
 80097ca:	9310      	str	r3, [sp, #64]	; 0x40
 80097cc:	682a      	ldr	r2, [r5, #0]
 80097ce:	686b      	ldr	r3, [r5, #4]
 80097d0:	f7f8 fde4 	bl	800239c <__aeabi_dmul>
 80097d4:	0033      	movs	r3, r6
 80097d6:	1064      	asrs	r4, r4, #1
 80097d8:	3508      	adds	r5, #8
 80097da:	e75a      	b.n	8009692 <_dtoa_r+0x3d2>
 80097dc:	9e02      	ldr	r6, [sp, #8]
 80097de:	9b07      	ldr	r3, [sp, #28]
 80097e0:	e780      	b.n	80096e4 <_dtoa_r+0x424>
 80097e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80097e6:	1e5a      	subs	r2, r3, #1
 80097e8:	4b59      	ldr	r3, [pc, #356]	; (8009950 <_dtoa_r+0x690>)
 80097ea:	00d2      	lsls	r2, r2, #3
 80097ec:	189b      	adds	r3, r3, r2
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	2900      	cmp	r1, #0
 80097f4:	d051      	beq.n	800989a <_dtoa_r+0x5da>
 80097f6:	2000      	movs	r0, #0
 80097f8:	495d      	ldr	r1, [pc, #372]	; (8009970 <_dtoa_r+0x6b0>)
 80097fa:	f7f8 f9cd 	bl	8001b98 <__aeabi_ddiv>
 80097fe:	9a08      	ldr	r2, [sp, #32]
 8009800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009802:	f7f9 f837 	bl	8002874 <__aeabi_dsub>
 8009806:	9a06      	ldr	r2, [sp, #24]
 8009808:	9b06      	ldr	r3, [sp, #24]
 800980a:	4694      	mov	ip, r2
 800980c:	9317      	str	r3, [sp, #92]	; 0x5c
 800980e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009810:	9010      	str	r0, [sp, #64]	; 0x40
 8009812:	9111      	str	r1, [sp, #68]	; 0x44
 8009814:	4463      	add	r3, ip
 8009816:	9319      	str	r3, [sp, #100]	; 0x64
 8009818:	0029      	movs	r1, r5
 800981a:	0020      	movs	r0, r4
 800981c:	f7f9 fbda 	bl	8002fd4 <__aeabi_d2iz>
 8009820:	9014      	str	r0, [sp, #80]	; 0x50
 8009822:	f7f9 fc0d 	bl	8003040 <__aeabi_i2d>
 8009826:	0002      	movs	r2, r0
 8009828:	000b      	movs	r3, r1
 800982a:	0020      	movs	r0, r4
 800982c:	0029      	movs	r1, r5
 800982e:	f7f9 f821 	bl	8002874 <__aeabi_dsub>
 8009832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009834:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009836:	3301      	adds	r3, #1
 8009838:	9308      	str	r3, [sp, #32]
 800983a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800983c:	0004      	movs	r4, r0
 800983e:	3330      	adds	r3, #48	; 0x30
 8009840:	7013      	strb	r3, [r2, #0]
 8009842:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009844:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009846:	000d      	movs	r5, r1
 8009848:	f7f6 fe06 	bl	8000458 <__aeabi_dcmplt>
 800984c:	2800      	cmp	r0, #0
 800984e:	d175      	bne.n	800993c <_dtoa_r+0x67c>
 8009850:	0022      	movs	r2, r4
 8009852:	002b      	movs	r3, r5
 8009854:	2000      	movs	r0, #0
 8009856:	4940      	ldr	r1, [pc, #256]	; (8009958 <_dtoa_r+0x698>)
 8009858:	f7f9 f80c 	bl	8002874 <__aeabi_dsub>
 800985c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800985e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009860:	f7f6 fdfa 	bl	8000458 <__aeabi_dcmplt>
 8009864:	2800      	cmp	r0, #0
 8009866:	d000      	beq.n	800986a <_dtoa_r+0x5aa>
 8009868:	e0d2      	b.n	8009a10 <_dtoa_r+0x750>
 800986a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800986c:	9a08      	ldr	r2, [sp, #32]
 800986e:	4293      	cmp	r3, r2
 8009870:	d100      	bne.n	8009874 <_dtoa_r+0x5b4>
 8009872:	e770      	b.n	8009756 <_dtoa_r+0x496>
 8009874:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009876:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009878:	2200      	movs	r2, #0
 800987a:	4b38      	ldr	r3, [pc, #224]	; (800995c <_dtoa_r+0x69c>)
 800987c:	f7f8 fd8e 	bl	800239c <__aeabi_dmul>
 8009880:	4b36      	ldr	r3, [pc, #216]	; (800995c <_dtoa_r+0x69c>)
 8009882:	9010      	str	r0, [sp, #64]	; 0x40
 8009884:	9111      	str	r1, [sp, #68]	; 0x44
 8009886:	2200      	movs	r2, #0
 8009888:	0020      	movs	r0, r4
 800988a:	0029      	movs	r1, r5
 800988c:	f7f8 fd86 	bl	800239c <__aeabi_dmul>
 8009890:	9b08      	ldr	r3, [sp, #32]
 8009892:	0004      	movs	r4, r0
 8009894:	000d      	movs	r5, r1
 8009896:	9317      	str	r3, [sp, #92]	; 0x5c
 8009898:	e7be      	b.n	8009818 <_dtoa_r+0x558>
 800989a:	9808      	ldr	r0, [sp, #32]
 800989c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800989e:	f7f8 fd7d 	bl	800239c <__aeabi_dmul>
 80098a2:	9a06      	ldr	r2, [sp, #24]
 80098a4:	9b06      	ldr	r3, [sp, #24]
 80098a6:	4694      	mov	ip, r2
 80098a8:	9308      	str	r3, [sp, #32]
 80098aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098ac:	9010      	str	r0, [sp, #64]	; 0x40
 80098ae:	9111      	str	r1, [sp, #68]	; 0x44
 80098b0:	4463      	add	r3, ip
 80098b2:	9319      	str	r3, [sp, #100]	; 0x64
 80098b4:	0029      	movs	r1, r5
 80098b6:	0020      	movs	r0, r4
 80098b8:	f7f9 fb8c 	bl	8002fd4 <__aeabi_d2iz>
 80098bc:	9017      	str	r0, [sp, #92]	; 0x5c
 80098be:	f7f9 fbbf 	bl	8003040 <__aeabi_i2d>
 80098c2:	0002      	movs	r2, r0
 80098c4:	000b      	movs	r3, r1
 80098c6:	0020      	movs	r0, r4
 80098c8:	0029      	movs	r1, r5
 80098ca:	f7f8 ffd3 	bl	8002874 <__aeabi_dsub>
 80098ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098d0:	9a08      	ldr	r2, [sp, #32]
 80098d2:	3330      	adds	r3, #48	; 0x30
 80098d4:	7013      	strb	r3, [r2, #0]
 80098d6:	0013      	movs	r3, r2
 80098d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098da:	3301      	adds	r3, #1
 80098dc:	0004      	movs	r4, r0
 80098de:	000d      	movs	r5, r1
 80098e0:	9308      	str	r3, [sp, #32]
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d12c      	bne.n	8009940 <_dtoa_r+0x680>
 80098e6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80098e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80098ea:	9a06      	ldr	r2, [sp, #24]
 80098ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098ee:	4694      	mov	ip, r2
 80098f0:	4463      	add	r3, ip
 80098f2:	2200      	movs	r2, #0
 80098f4:	9308      	str	r3, [sp, #32]
 80098f6:	4b1e      	ldr	r3, [pc, #120]	; (8009970 <_dtoa_r+0x6b0>)
 80098f8:	f7f7 fe12 	bl	8001520 <__aeabi_dadd>
 80098fc:	0002      	movs	r2, r0
 80098fe:	000b      	movs	r3, r1
 8009900:	0020      	movs	r0, r4
 8009902:	0029      	movs	r1, r5
 8009904:	f7f6 fdbc 	bl	8000480 <__aeabi_dcmpgt>
 8009908:	2800      	cmp	r0, #0
 800990a:	d000      	beq.n	800990e <_dtoa_r+0x64e>
 800990c:	e080      	b.n	8009a10 <_dtoa_r+0x750>
 800990e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009912:	2000      	movs	r0, #0
 8009914:	4916      	ldr	r1, [pc, #88]	; (8009970 <_dtoa_r+0x6b0>)
 8009916:	f7f8 ffad 	bl	8002874 <__aeabi_dsub>
 800991a:	0002      	movs	r2, r0
 800991c:	000b      	movs	r3, r1
 800991e:	0020      	movs	r0, r4
 8009920:	0029      	movs	r1, r5
 8009922:	f7f6 fd99 	bl	8000458 <__aeabi_dcmplt>
 8009926:	2800      	cmp	r0, #0
 8009928:	d100      	bne.n	800992c <_dtoa_r+0x66c>
 800992a:	e714      	b.n	8009756 <_dtoa_r+0x496>
 800992c:	9b08      	ldr	r3, [sp, #32]
 800992e:	001a      	movs	r2, r3
 8009930:	3a01      	subs	r2, #1
 8009932:	9208      	str	r2, [sp, #32]
 8009934:	7812      	ldrb	r2, [r2, #0]
 8009936:	2a30      	cmp	r2, #48	; 0x30
 8009938:	d0f8      	beq.n	800992c <_dtoa_r+0x66c>
 800993a:	9308      	str	r3, [sp, #32]
 800993c:	9602      	str	r6, [sp, #8]
 800993e:	e055      	b.n	80099ec <_dtoa_r+0x72c>
 8009940:	2200      	movs	r2, #0
 8009942:	4b06      	ldr	r3, [pc, #24]	; (800995c <_dtoa_r+0x69c>)
 8009944:	f7f8 fd2a 	bl	800239c <__aeabi_dmul>
 8009948:	0004      	movs	r4, r0
 800994a:	000d      	movs	r5, r1
 800994c:	e7b2      	b.n	80098b4 <_dtoa_r+0x5f4>
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	0800bb40 	.word	0x0800bb40
 8009954:	0800bb18 	.word	0x0800bb18
 8009958:	3ff00000 	.word	0x3ff00000
 800995c:	40240000 	.word	0x40240000
 8009960:	401c0000 	.word	0x401c0000
 8009964:	fcc00000 	.word	0xfcc00000
 8009968:	40140000 	.word	0x40140000
 800996c:	7cc00000 	.word	0x7cc00000
 8009970:	3fe00000 	.word	0x3fe00000
 8009974:	9b07      	ldr	r3, [sp, #28]
 8009976:	9e06      	ldr	r6, [sp, #24]
 8009978:	3b01      	subs	r3, #1
 800997a:	199b      	adds	r3, r3, r6
 800997c:	930c      	str	r3, [sp, #48]	; 0x30
 800997e:	9c08      	ldr	r4, [sp, #32]
 8009980:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009986:	0020      	movs	r0, r4
 8009988:	0029      	movs	r1, r5
 800998a:	f7f8 f905 	bl	8001b98 <__aeabi_ddiv>
 800998e:	f7f9 fb21 	bl	8002fd4 <__aeabi_d2iz>
 8009992:	9007      	str	r0, [sp, #28]
 8009994:	f7f9 fb54 	bl	8003040 <__aeabi_i2d>
 8009998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800999a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800999c:	f7f8 fcfe 	bl	800239c <__aeabi_dmul>
 80099a0:	0002      	movs	r2, r0
 80099a2:	000b      	movs	r3, r1
 80099a4:	0020      	movs	r0, r4
 80099a6:	0029      	movs	r1, r5
 80099a8:	f7f8 ff64 	bl	8002874 <__aeabi_dsub>
 80099ac:	0033      	movs	r3, r6
 80099ae:	9a07      	ldr	r2, [sp, #28]
 80099b0:	3601      	adds	r6, #1
 80099b2:	3230      	adds	r2, #48	; 0x30
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099b8:	9608      	str	r6, [sp, #32]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d139      	bne.n	8009a32 <_dtoa_r+0x772>
 80099be:	0002      	movs	r2, r0
 80099c0:	000b      	movs	r3, r1
 80099c2:	f7f7 fdad 	bl	8001520 <__aeabi_dadd>
 80099c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ca:	0004      	movs	r4, r0
 80099cc:	000d      	movs	r5, r1
 80099ce:	f7f6 fd57 	bl	8000480 <__aeabi_dcmpgt>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d11b      	bne.n	8009a0e <_dtoa_r+0x74e>
 80099d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099da:	0020      	movs	r0, r4
 80099dc:	0029      	movs	r1, r5
 80099de:	f7f6 fd35 	bl	800044c <__aeabi_dcmpeq>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d002      	beq.n	80099ec <_dtoa_r+0x72c>
 80099e6:	9b07      	ldr	r3, [sp, #28]
 80099e8:	07db      	lsls	r3, r3, #31
 80099ea:	d410      	bmi.n	8009a0e <_dtoa_r+0x74e>
 80099ec:	0038      	movs	r0, r7
 80099ee:	9905      	ldr	r1, [sp, #20]
 80099f0:	f000 fade 	bl	8009fb0 <_Bfree>
 80099f4:	2300      	movs	r3, #0
 80099f6:	9a08      	ldr	r2, [sp, #32]
 80099f8:	9802      	ldr	r0, [sp, #8]
 80099fa:	7013      	strb	r3, [r2, #0]
 80099fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80099fe:	3001      	adds	r0, #1
 8009a00:	6018      	str	r0, [r3, #0]
 8009a02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d100      	bne.n	8009a0a <_dtoa_r+0x74a>
 8009a08:	e4a6      	b.n	8009358 <_dtoa_r+0x98>
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	e4a4      	b.n	8009358 <_dtoa_r+0x98>
 8009a0e:	9e02      	ldr	r6, [sp, #8]
 8009a10:	9b08      	ldr	r3, [sp, #32]
 8009a12:	9308      	str	r3, [sp, #32]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	781a      	ldrb	r2, [r3, #0]
 8009a18:	2a39      	cmp	r2, #57	; 0x39
 8009a1a:	d106      	bne.n	8009a2a <_dtoa_r+0x76a>
 8009a1c:	9a06      	ldr	r2, [sp, #24]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d1f7      	bne.n	8009a12 <_dtoa_r+0x752>
 8009a22:	2230      	movs	r2, #48	; 0x30
 8009a24:	9906      	ldr	r1, [sp, #24]
 8009a26:	3601      	adds	r6, #1
 8009a28:	700a      	strb	r2, [r1, #0]
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	3201      	adds	r2, #1
 8009a2e:	701a      	strb	r2, [r3, #0]
 8009a30:	e784      	b.n	800993c <_dtoa_r+0x67c>
 8009a32:	2200      	movs	r2, #0
 8009a34:	4baa      	ldr	r3, [pc, #680]	; (8009ce0 <_dtoa_r+0xa20>)
 8009a36:	f7f8 fcb1 	bl	800239c <__aeabi_dmul>
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	0004      	movs	r4, r0
 8009a40:	000d      	movs	r5, r1
 8009a42:	f7f6 fd03 	bl	800044c <__aeabi_dcmpeq>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d09b      	beq.n	8009982 <_dtoa_r+0x6c2>
 8009a4a:	e7cf      	b.n	80099ec <_dtoa_r+0x72c>
 8009a4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a4e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009a50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a52:	2d00      	cmp	r5, #0
 8009a54:	d012      	beq.n	8009a7c <_dtoa_r+0x7bc>
 8009a56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a58:	2a01      	cmp	r2, #1
 8009a5a:	dc66      	bgt.n	8009b2a <_dtoa_r+0x86a>
 8009a5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	d05d      	beq.n	8009b1e <_dtoa_r+0x85e>
 8009a62:	4aa0      	ldr	r2, [pc, #640]	; (8009ce4 <_dtoa_r+0xa24>)
 8009a64:	189b      	adds	r3, r3, r2
 8009a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a68:	2101      	movs	r1, #1
 8009a6a:	18d2      	adds	r2, r2, r3
 8009a6c:	920a      	str	r2, [sp, #40]	; 0x28
 8009a6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a70:	0038      	movs	r0, r7
 8009a72:	18d3      	adds	r3, r2, r3
 8009a74:	930d      	str	r3, [sp, #52]	; 0x34
 8009a76:	f000 fb4b 	bl	800a110 <__i2b>
 8009a7a:	0005      	movs	r5, r0
 8009a7c:	2c00      	cmp	r4, #0
 8009a7e:	dd0e      	ble.n	8009a9e <_dtoa_r+0x7de>
 8009a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	dd0b      	ble.n	8009a9e <_dtoa_r+0x7de>
 8009a86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a88:	0023      	movs	r3, r4
 8009a8a:	4294      	cmp	r4, r2
 8009a8c:	dd00      	ble.n	8009a90 <_dtoa_r+0x7d0>
 8009a8e:	0013      	movs	r3, r2
 8009a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a92:	1ae4      	subs	r4, r4, r3
 8009a94:	1ad2      	subs	r2, r2, r3
 8009a96:	920a      	str	r2, [sp, #40]	; 0x28
 8009a98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01f      	beq.n	8009ae4 <_dtoa_r+0x824>
 8009aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d054      	beq.n	8009b54 <_dtoa_r+0x894>
 8009aaa:	2e00      	cmp	r6, #0
 8009aac:	dd11      	ble.n	8009ad2 <_dtoa_r+0x812>
 8009aae:	0029      	movs	r1, r5
 8009ab0:	0032      	movs	r2, r6
 8009ab2:	0038      	movs	r0, r7
 8009ab4:	f000 fbf2 	bl	800a29c <__pow5mult>
 8009ab8:	9a05      	ldr	r2, [sp, #20]
 8009aba:	0001      	movs	r1, r0
 8009abc:	0005      	movs	r5, r0
 8009abe:	0038      	movs	r0, r7
 8009ac0:	f000 fb3c 	bl	800a13c <__multiply>
 8009ac4:	9905      	ldr	r1, [sp, #20]
 8009ac6:	9014      	str	r0, [sp, #80]	; 0x50
 8009ac8:	0038      	movs	r0, r7
 8009aca:	f000 fa71 	bl	8009fb0 <_Bfree>
 8009ace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ad0:	9305      	str	r3, [sp, #20]
 8009ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ad4:	1b9a      	subs	r2, r3, r6
 8009ad6:	42b3      	cmp	r3, r6
 8009ad8:	d004      	beq.n	8009ae4 <_dtoa_r+0x824>
 8009ada:	0038      	movs	r0, r7
 8009adc:	9905      	ldr	r1, [sp, #20]
 8009ade:	f000 fbdd 	bl	800a29c <__pow5mult>
 8009ae2:	9005      	str	r0, [sp, #20]
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	0038      	movs	r0, r7
 8009ae8:	f000 fb12 	bl	800a110 <__i2b>
 8009aec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aee:	0006      	movs	r6, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dd31      	ble.n	8009b58 <_dtoa_r+0x898>
 8009af4:	001a      	movs	r2, r3
 8009af6:	0001      	movs	r1, r0
 8009af8:	0038      	movs	r0, r7
 8009afa:	f000 fbcf 	bl	800a29c <__pow5mult>
 8009afe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b00:	0006      	movs	r6, r0
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	dd2d      	ble.n	8009b62 <_dtoa_r+0x8a2>
 8009b06:	2300      	movs	r3, #0
 8009b08:	930e      	str	r3, [sp, #56]	; 0x38
 8009b0a:	6933      	ldr	r3, [r6, #16]
 8009b0c:	3303      	adds	r3, #3
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	18f3      	adds	r3, r6, r3
 8009b12:	6858      	ldr	r0, [r3, #4]
 8009b14:	f000 fab4 	bl	800a080 <__hi0bits>
 8009b18:	2320      	movs	r3, #32
 8009b1a:	1a18      	subs	r0, r3, r0
 8009b1c:	e039      	b.n	8009b92 <_dtoa_r+0x8d2>
 8009b1e:	2336      	movs	r3, #54	; 0x36
 8009b20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009b24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b26:	1a9b      	subs	r3, r3, r2
 8009b28:	e79d      	b.n	8009a66 <_dtoa_r+0x7a6>
 8009b2a:	9b07      	ldr	r3, [sp, #28]
 8009b2c:	1e5e      	subs	r6, r3, #1
 8009b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b30:	42b3      	cmp	r3, r6
 8009b32:	db07      	blt.n	8009b44 <_dtoa_r+0x884>
 8009b34:	1b9e      	subs	r6, r3, r6
 8009b36:	9b07      	ldr	r3, [sp, #28]
 8009b38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	da93      	bge.n	8009a66 <_dtoa_r+0x7a6>
 8009b3e:	1ae4      	subs	r4, r4, r3
 8009b40:	2300      	movs	r3, #0
 8009b42:	e790      	b.n	8009a66 <_dtoa_r+0x7a6>
 8009b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b48:	1af3      	subs	r3, r6, r3
 8009b4a:	18d3      	adds	r3, r2, r3
 8009b4c:	960e      	str	r6, [sp, #56]	; 0x38
 8009b4e:	9315      	str	r3, [sp, #84]	; 0x54
 8009b50:	2600      	movs	r6, #0
 8009b52:	e7f0      	b.n	8009b36 <_dtoa_r+0x876>
 8009b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b56:	e7c0      	b.n	8009ada <_dtoa_r+0x81a>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8009b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	dc13      	bgt.n	8009b8a <_dtoa_r+0x8ca>
 8009b62:	2300      	movs	r3, #0
 8009b64:	930e      	str	r3, [sp, #56]	; 0x38
 8009b66:	9b08      	ldr	r3, [sp, #32]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10e      	bne.n	8009b8a <_dtoa_r+0x8ca>
 8009b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6e:	031b      	lsls	r3, r3, #12
 8009b70:	d10b      	bne.n	8009b8a <_dtoa_r+0x8ca>
 8009b72:	4b5d      	ldr	r3, [pc, #372]	; (8009ce8 <_dtoa_r+0xa28>)
 8009b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b76:	4213      	tst	r3, r2
 8009b78:	d007      	beq.n	8009b8a <_dtoa_r+0x8ca>
 8009b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b82:	3301      	adds	r3, #1
 8009b84:	930d      	str	r3, [sp, #52]	; 0x34
 8009b86:	2301      	movs	r3, #1
 8009b88:	930e      	str	r3, [sp, #56]	; 0x38
 8009b8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1bb      	bne.n	8009b0a <_dtoa_r+0x84a>
 8009b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b94:	221f      	movs	r2, #31
 8009b96:	1818      	adds	r0, r3, r0
 8009b98:	0003      	movs	r3, r0
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	4210      	tst	r0, r2
 8009b9e:	d046      	beq.n	8009c2e <_dtoa_r+0x96e>
 8009ba0:	3201      	adds	r2, #1
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	2a04      	cmp	r2, #4
 8009ba6:	dd3f      	ble.n	8009c28 <_dtoa_r+0x968>
 8009ba8:	221c      	movs	r2, #28
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bae:	18e4      	adds	r4, r4, r3
 8009bb0:	18d2      	adds	r2, r2, r3
 8009bb2:	920a      	str	r2, [sp, #40]	; 0x28
 8009bb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bb6:	18d3      	adds	r3, r2, r3
 8009bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8009bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	dd05      	ble.n	8009bcc <_dtoa_r+0x90c>
 8009bc0:	001a      	movs	r2, r3
 8009bc2:	0038      	movs	r0, r7
 8009bc4:	9905      	ldr	r1, [sp, #20]
 8009bc6:	f000 fbc5 	bl	800a354 <__lshift>
 8009bca:	9005      	str	r0, [sp, #20]
 8009bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	dd05      	ble.n	8009bde <_dtoa_r+0x91e>
 8009bd2:	0031      	movs	r1, r6
 8009bd4:	001a      	movs	r2, r3
 8009bd6:	0038      	movs	r0, r7
 8009bd8:	f000 fbbc 	bl	800a354 <__lshift>
 8009bdc:	0006      	movs	r6, r0
 8009bde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d026      	beq.n	8009c32 <_dtoa_r+0x972>
 8009be4:	0031      	movs	r1, r6
 8009be6:	9805      	ldr	r0, [sp, #20]
 8009be8:	f000 fc22 	bl	800a430 <__mcmp>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	da20      	bge.n	8009c32 <_dtoa_r+0x972>
 8009bf0:	9b02      	ldr	r3, [sp, #8]
 8009bf2:	220a      	movs	r2, #10
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	9302      	str	r3, [sp, #8]
 8009bf8:	0038      	movs	r0, r7
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9905      	ldr	r1, [sp, #20]
 8009bfe:	f000 f9fb 	bl	8009ff8 <__multadd>
 8009c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c04:	9005      	str	r0, [sp, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d100      	bne.n	8009c0c <_dtoa_r+0x94c>
 8009c0a:	e166      	b.n	8009eda <_dtoa_r+0xc1a>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	0029      	movs	r1, r5
 8009c10:	220a      	movs	r2, #10
 8009c12:	0038      	movs	r0, r7
 8009c14:	f000 f9f0 	bl	8009ff8 <__multadd>
 8009c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c1a:	0005      	movs	r5, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dc47      	bgt.n	8009cb0 <_dtoa_r+0x9f0>
 8009c20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	dc0d      	bgt.n	8009c42 <_dtoa_r+0x982>
 8009c26:	e043      	b.n	8009cb0 <_dtoa_r+0x9f0>
 8009c28:	2a04      	cmp	r2, #4
 8009c2a:	d0c6      	beq.n	8009bba <_dtoa_r+0x8fa>
 8009c2c:	0013      	movs	r3, r2
 8009c2e:	331c      	adds	r3, #28
 8009c30:	e7bc      	b.n	8009bac <_dtoa_r+0x8ec>
 8009c32:	9b07      	ldr	r3, [sp, #28]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	dc35      	bgt.n	8009ca4 <_dtoa_r+0x9e4>
 8009c38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	dd32      	ble.n	8009ca4 <_dtoa_r+0x9e4>
 8009c3e:	9b07      	ldr	r3, [sp, #28]
 8009c40:	930c      	str	r3, [sp, #48]	; 0x30
 8009c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10c      	bne.n	8009c62 <_dtoa_r+0x9a2>
 8009c48:	0031      	movs	r1, r6
 8009c4a:	2205      	movs	r2, #5
 8009c4c:	0038      	movs	r0, r7
 8009c4e:	f000 f9d3 	bl	8009ff8 <__multadd>
 8009c52:	0006      	movs	r6, r0
 8009c54:	0001      	movs	r1, r0
 8009c56:	9805      	ldr	r0, [sp, #20]
 8009c58:	f000 fbea 	bl	800a430 <__mcmp>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	dd00      	ble.n	8009c62 <_dtoa_r+0x9a2>
 8009c60:	e5a5      	b.n	80097ae <_dtoa_r+0x4ee>
 8009c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c64:	43db      	mvns	r3, r3
 8009c66:	9302      	str	r3, [sp, #8]
 8009c68:	9b06      	ldr	r3, [sp, #24]
 8009c6a:	9308      	str	r3, [sp, #32]
 8009c6c:	2400      	movs	r4, #0
 8009c6e:	0031      	movs	r1, r6
 8009c70:	0038      	movs	r0, r7
 8009c72:	f000 f99d 	bl	8009fb0 <_Bfree>
 8009c76:	2d00      	cmp	r5, #0
 8009c78:	d100      	bne.n	8009c7c <_dtoa_r+0x9bc>
 8009c7a:	e6b7      	b.n	80099ec <_dtoa_r+0x72c>
 8009c7c:	2c00      	cmp	r4, #0
 8009c7e:	d005      	beq.n	8009c8c <_dtoa_r+0x9cc>
 8009c80:	42ac      	cmp	r4, r5
 8009c82:	d003      	beq.n	8009c8c <_dtoa_r+0x9cc>
 8009c84:	0021      	movs	r1, r4
 8009c86:	0038      	movs	r0, r7
 8009c88:	f000 f992 	bl	8009fb0 <_Bfree>
 8009c8c:	0029      	movs	r1, r5
 8009c8e:	0038      	movs	r0, r7
 8009c90:	f000 f98e 	bl	8009fb0 <_Bfree>
 8009c94:	e6aa      	b.n	80099ec <_dtoa_r+0x72c>
 8009c96:	2600      	movs	r6, #0
 8009c98:	0035      	movs	r5, r6
 8009c9a:	e7e2      	b.n	8009c62 <_dtoa_r+0x9a2>
 8009c9c:	9602      	str	r6, [sp, #8]
 8009c9e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009ca0:	0035      	movs	r5, r6
 8009ca2:	e584      	b.n	80097ae <_dtoa_r+0x4ee>
 8009ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d100      	bne.n	8009cac <_dtoa_r+0x9ec>
 8009caa:	e0ce      	b.n	8009e4a <_dtoa_r+0xb8a>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	930c      	str	r3, [sp, #48]	; 0x30
 8009cb0:	2c00      	cmp	r4, #0
 8009cb2:	dd05      	ble.n	8009cc0 <_dtoa_r+0xa00>
 8009cb4:	0029      	movs	r1, r5
 8009cb6:	0022      	movs	r2, r4
 8009cb8:	0038      	movs	r0, r7
 8009cba:	f000 fb4b 	bl	800a354 <__lshift>
 8009cbe:	0005      	movs	r5, r0
 8009cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cc2:	0028      	movs	r0, r5
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d022      	beq.n	8009d0e <_dtoa_r+0xa4e>
 8009cc8:	0038      	movs	r0, r7
 8009cca:	6869      	ldr	r1, [r5, #4]
 8009ccc:	f000 f92c 	bl	8009f28 <_Balloc>
 8009cd0:	1e04      	subs	r4, r0, #0
 8009cd2:	d10f      	bne.n	8009cf4 <_dtoa_r+0xa34>
 8009cd4:	0002      	movs	r2, r0
 8009cd6:	4b05      	ldr	r3, [pc, #20]	; (8009cec <_dtoa_r+0xa2c>)
 8009cd8:	4905      	ldr	r1, [pc, #20]	; (8009cf0 <_dtoa_r+0xa30>)
 8009cda:	f7ff fb06 	bl	80092ea <_dtoa_r+0x2a>
 8009cde:	46c0      	nop			; (mov r8, r8)
 8009ce0:	40240000 	.word	0x40240000
 8009ce4:	00000433 	.word	0x00000433
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	0800baab 	.word	0x0800baab
 8009cf0:	000002ea 	.word	0x000002ea
 8009cf4:	0029      	movs	r1, r5
 8009cf6:	692b      	ldr	r3, [r5, #16]
 8009cf8:	310c      	adds	r1, #12
 8009cfa:	1c9a      	adds	r2, r3, #2
 8009cfc:	0092      	lsls	r2, r2, #2
 8009cfe:	300c      	adds	r0, #12
 8009d00:	f7fe fdb2 	bl	8008868 <memcpy>
 8009d04:	2201      	movs	r2, #1
 8009d06:	0021      	movs	r1, r4
 8009d08:	0038      	movs	r0, r7
 8009d0a:	f000 fb23 	bl	800a354 <__lshift>
 8009d0e:	9b06      	ldr	r3, [sp, #24]
 8009d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d12:	930a      	str	r3, [sp, #40]	; 0x28
 8009d14:	3b01      	subs	r3, #1
 8009d16:	189b      	adds	r3, r3, r2
 8009d18:	2201      	movs	r2, #1
 8009d1a:	002c      	movs	r4, r5
 8009d1c:	0005      	movs	r5, r0
 8009d1e:	9314      	str	r3, [sp, #80]	; 0x50
 8009d20:	9b08      	ldr	r3, [sp, #32]
 8009d22:	4013      	ands	r3, r2
 8009d24:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d26:	0031      	movs	r1, r6
 8009d28:	9805      	ldr	r0, [sp, #20]
 8009d2a:	f7ff fa3d 	bl	80091a8 <quorem>
 8009d2e:	0003      	movs	r3, r0
 8009d30:	0021      	movs	r1, r4
 8009d32:	3330      	adds	r3, #48	; 0x30
 8009d34:	900d      	str	r0, [sp, #52]	; 0x34
 8009d36:	9805      	ldr	r0, [sp, #20]
 8009d38:	9307      	str	r3, [sp, #28]
 8009d3a:	f000 fb79 	bl	800a430 <__mcmp>
 8009d3e:	002a      	movs	r2, r5
 8009d40:	900e      	str	r0, [sp, #56]	; 0x38
 8009d42:	0031      	movs	r1, r6
 8009d44:	0038      	movs	r0, r7
 8009d46:	f000 fb8f 	bl	800a468 <__mdiff>
 8009d4a:	68c3      	ldr	r3, [r0, #12]
 8009d4c:	9008      	str	r0, [sp, #32]
 8009d4e:	9310      	str	r3, [sp, #64]	; 0x40
 8009d50:	2301      	movs	r3, #1
 8009d52:	930c      	str	r3, [sp, #48]	; 0x30
 8009d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d104      	bne.n	8009d64 <_dtoa_r+0xaa4>
 8009d5a:	0001      	movs	r1, r0
 8009d5c:	9805      	ldr	r0, [sp, #20]
 8009d5e:	f000 fb67 	bl	800a430 <__mcmp>
 8009d62:	900c      	str	r0, [sp, #48]	; 0x30
 8009d64:	0038      	movs	r0, r7
 8009d66:	9908      	ldr	r1, [sp, #32]
 8009d68:	f000 f922 	bl	8009fb0 <_Bfree>
 8009d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d70:	3301      	adds	r3, #1
 8009d72:	9308      	str	r3, [sp, #32]
 8009d74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d76:	4313      	orrs	r3, r2
 8009d78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	d10c      	bne.n	8009d98 <_dtoa_r+0xad8>
 8009d7e:	9b07      	ldr	r3, [sp, #28]
 8009d80:	2b39      	cmp	r3, #57	; 0x39
 8009d82:	d026      	beq.n	8009dd2 <_dtoa_r+0xb12>
 8009d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	dd02      	ble.n	8009d90 <_dtoa_r+0xad0>
 8009d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8c:	3331      	adds	r3, #49	; 0x31
 8009d8e:	9307      	str	r3, [sp, #28]
 8009d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d92:	9a07      	ldr	r2, [sp, #28]
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	e76a      	b.n	8009c6e <_dtoa_r+0x9ae>
 8009d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	db04      	blt.n	8009da8 <_dtoa_r+0xae8>
 8009d9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009da0:	4313      	orrs	r3, r2
 8009da2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009da4:	4313      	orrs	r3, r2
 8009da6:	d11f      	bne.n	8009de8 <_dtoa_r+0xb28>
 8009da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	ddf0      	ble.n	8009d90 <_dtoa_r+0xad0>
 8009dae:	9905      	ldr	r1, [sp, #20]
 8009db0:	2201      	movs	r2, #1
 8009db2:	0038      	movs	r0, r7
 8009db4:	f000 face 	bl	800a354 <__lshift>
 8009db8:	0031      	movs	r1, r6
 8009dba:	9005      	str	r0, [sp, #20]
 8009dbc:	f000 fb38 	bl	800a430 <__mcmp>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	dc03      	bgt.n	8009dcc <_dtoa_r+0xb0c>
 8009dc4:	d1e4      	bne.n	8009d90 <_dtoa_r+0xad0>
 8009dc6:	9b07      	ldr	r3, [sp, #28]
 8009dc8:	07db      	lsls	r3, r3, #31
 8009dca:	d5e1      	bpl.n	8009d90 <_dtoa_r+0xad0>
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	2b39      	cmp	r3, #57	; 0x39
 8009dd0:	d1db      	bne.n	8009d8a <_dtoa_r+0xaca>
 8009dd2:	2339      	movs	r3, #57	; 0x39
 8009dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dd6:	7013      	strb	r3, [r2, #0]
 8009dd8:	9b08      	ldr	r3, [sp, #32]
 8009dda:	9308      	str	r3, [sp, #32]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	781a      	ldrb	r2, [r3, #0]
 8009de0:	2a39      	cmp	r2, #57	; 0x39
 8009de2:	d068      	beq.n	8009eb6 <_dtoa_r+0xbf6>
 8009de4:	3201      	adds	r2, #1
 8009de6:	e7d5      	b.n	8009d94 <_dtoa_r+0xad4>
 8009de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dd07      	ble.n	8009dfe <_dtoa_r+0xb3e>
 8009dee:	9b07      	ldr	r3, [sp, #28]
 8009df0:	2b39      	cmp	r3, #57	; 0x39
 8009df2:	d0ee      	beq.n	8009dd2 <_dtoa_r+0xb12>
 8009df4:	9b07      	ldr	r3, [sp, #28]
 8009df6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009df8:	3301      	adds	r3, #1
 8009dfa:	7013      	strb	r3, [r2, #0]
 8009dfc:	e737      	b.n	8009c6e <_dtoa_r+0x9ae>
 8009dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e00:	9a07      	ldr	r2, [sp, #28]
 8009e02:	701a      	strb	r2, [r3, #0]
 8009e04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d03e      	beq.n	8009e8a <_dtoa_r+0xbca>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	220a      	movs	r2, #10
 8009e10:	9905      	ldr	r1, [sp, #20]
 8009e12:	0038      	movs	r0, r7
 8009e14:	f000 f8f0 	bl	8009ff8 <__multadd>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9005      	str	r0, [sp, #20]
 8009e1c:	220a      	movs	r2, #10
 8009e1e:	0021      	movs	r1, r4
 8009e20:	0038      	movs	r0, r7
 8009e22:	42ac      	cmp	r4, r5
 8009e24:	d106      	bne.n	8009e34 <_dtoa_r+0xb74>
 8009e26:	f000 f8e7 	bl	8009ff8 <__multadd>
 8009e2a:	0004      	movs	r4, r0
 8009e2c:	0005      	movs	r5, r0
 8009e2e:	9b08      	ldr	r3, [sp, #32]
 8009e30:	930a      	str	r3, [sp, #40]	; 0x28
 8009e32:	e778      	b.n	8009d26 <_dtoa_r+0xa66>
 8009e34:	f000 f8e0 	bl	8009ff8 <__multadd>
 8009e38:	0029      	movs	r1, r5
 8009e3a:	0004      	movs	r4, r0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	220a      	movs	r2, #10
 8009e40:	0038      	movs	r0, r7
 8009e42:	f000 f8d9 	bl	8009ff8 <__multadd>
 8009e46:	0005      	movs	r5, r0
 8009e48:	e7f1      	b.n	8009e2e <_dtoa_r+0xb6e>
 8009e4a:	9b07      	ldr	r3, [sp, #28]
 8009e4c:	930c      	str	r3, [sp, #48]	; 0x30
 8009e4e:	2400      	movs	r4, #0
 8009e50:	0031      	movs	r1, r6
 8009e52:	9805      	ldr	r0, [sp, #20]
 8009e54:	f7ff f9a8 	bl	80091a8 <quorem>
 8009e58:	9b06      	ldr	r3, [sp, #24]
 8009e5a:	3030      	adds	r0, #48	; 0x30
 8009e5c:	5518      	strb	r0, [r3, r4]
 8009e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e60:	3401      	adds	r4, #1
 8009e62:	9007      	str	r0, [sp, #28]
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	dd07      	ble.n	8009e78 <_dtoa_r+0xbb8>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	220a      	movs	r2, #10
 8009e6c:	0038      	movs	r0, r7
 8009e6e:	9905      	ldr	r1, [sp, #20]
 8009e70:	f000 f8c2 	bl	8009ff8 <__multadd>
 8009e74:	9005      	str	r0, [sp, #20]
 8009e76:	e7eb      	b.n	8009e50 <_dtoa_r+0xb90>
 8009e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dd00      	ble.n	8009e82 <_dtoa_r+0xbc2>
 8009e80:	0018      	movs	r0, r3
 8009e82:	2400      	movs	r4, #0
 8009e84:	9b06      	ldr	r3, [sp, #24]
 8009e86:	181b      	adds	r3, r3, r0
 8009e88:	9308      	str	r3, [sp, #32]
 8009e8a:	9905      	ldr	r1, [sp, #20]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	0038      	movs	r0, r7
 8009e90:	f000 fa60 	bl	800a354 <__lshift>
 8009e94:	0031      	movs	r1, r6
 8009e96:	9005      	str	r0, [sp, #20]
 8009e98:	f000 faca 	bl	800a430 <__mcmp>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	dc9b      	bgt.n	8009dd8 <_dtoa_r+0xb18>
 8009ea0:	d102      	bne.n	8009ea8 <_dtoa_r+0xbe8>
 8009ea2:	9b07      	ldr	r3, [sp, #28]
 8009ea4:	07db      	lsls	r3, r3, #31
 8009ea6:	d497      	bmi.n	8009dd8 <_dtoa_r+0xb18>
 8009ea8:	9b08      	ldr	r3, [sp, #32]
 8009eaa:	9308      	str	r3, [sp, #32]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	781a      	ldrb	r2, [r3, #0]
 8009eb0:	2a30      	cmp	r2, #48	; 0x30
 8009eb2:	d0fa      	beq.n	8009eaa <_dtoa_r+0xbea>
 8009eb4:	e6db      	b.n	8009c6e <_dtoa_r+0x9ae>
 8009eb6:	9a06      	ldr	r2, [sp, #24]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d18e      	bne.n	8009dda <_dtoa_r+0xb1a>
 8009ebc:	9b02      	ldr	r3, [sp, #8]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	9302      	str	r3, [sp, #8]
 8009ec2:	2331      	movs	r3, #49	; 0x31
 8009ec4:	e799      	b.n	8009dfa <_dtoa_r+0xb3a>
 8009ec6:	4b09      	ldr	r3, [pc, #36]	; (8009eec <_dtoa_r+0xc2c>)
 8009ec8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009eca:	9306      	str	r3, [sp, #24]
 8009ecc:	4b08      	ldr	r3, [pc, #32]	; (8009ef0 <_dtoa_r+0xc30>)
 8009ece:	2a00      	cmp	r2, #0
 8009ed0:	d001      	beq.n	8009ed6 <_dtoa_r+0xc16>
 8009ed2:	f7ff fa3f 	bl	8009354 <_dtoa_r+0x94>
 8009ed6:	f7ff fa3f 	bl	8009358 <_dtoa_r+0x98>
 8009eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dcb6      	bgt.n	8009e4e <_dtoa_r+0xb8e>
 8009ee0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	dd00      	ble.n	8009ee8 <_dtoa_r+0xc28>
 8009ee6:	e6ac      	b.n	8009c42 <_dtoa_r+0x982>
 8009ee8:	e7b1      	b.n	8009e4e <_dtoa_r+0xb8e>
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	0800ba2c 	.word	0x0800ba2c
 8009ef0:	0800ba34 	.word	0x0800ba34

08009ef4 <_localeconv_r>:
 8009ef4:	4800      	ldr	r0, [pc, #0]	; (8009ef8 <_localeconv_r+0x4>)
 8009ef6:	4770      	bx	lr
 8009ef8:	20000164 	.word	0x20000164

08009efc <malloc>:
 8009efc:	b510      	push	{r4, lr}
 8009efe:	4b03      	ldr	r3, [pc, #12]	; (8009f0c <malloc+0x10>)
 8009f00:	0001      	movs	r1, r0
 8009f02:	6818      	ldr	r0, [r3, #0]
 8009f04:	f000 fc44 	bl	800a790 <_malloc_r>
 8009f08:	bd10      	pop	{r4, pc}
 8009f0a:	46c0      	nop			; (mov r8, r8)
 8009f0c:	20000010 	.word	0x20000010

08009f10 <memchr>:
 8009f10:	b2c9      	uxtb	r1, r1
 8009f12:	1882      	adds	r2, r0, r2
 8009f14:	4290      	cmp	r0, r2
 8009f16:	d101      	bne.n	8009f1c <memchr+0xc>
 8009f18:	2000      	movs	r0, #0
 8009f1a:	4770      	bx	lr
 8009f1c:	7803      	ldrb	r3, [r0, #0]
 8009f1e:	428b      	cmp	r3, r1
 8009f20:	d0fb      	beq.n	8009f1a <memchr+0xa>
 8009f22:	3001      	adds	r0, #1
 8009f24:	e7f6      	b.n	8009f14 <memchr+0x4>
	...

08009f28 <_Balloc>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f2c:	0006      	movs	r6, r0
 8009f2e:	000c      	movs	r4, r1
 8009f30:	2d00      	cmp	r5, #0
 8009f32:	d10e      	bne.n	8009f52 <_Balloc+0x2a>
 8009f34:	2010      	movs	r0, #16
 8009f36:	f7ff ffe1 	bl	8009efc <malloc>
 8009f3a:	1e02      	subs	r2, r0, #0
 8009f3c:	6270      	str	r0, [r6, #36]	; 0x24
 8009f3e:	d104      	bne.n	8009f4a <_Balloc+0x22>
 8009f40:	2166      	movs	r1, #102	; 0x66
 8009f42:	4b19      	ldr	r3, [pc, #100]	; (8009fa8 <_Balloc+0x80>)
 8009f44:	4819      	ldr	r0, [pc, #100]	; (8009fac <_Balloc+0x84>)
 8009f46:	f000 fe0d 	bl	800ab64 <__assert_func>
 8009f4a:	6045      	str	r5, [r0, #4]
 8009f4c:	6085      	str	r5, [r0, #8]
 8009f4e:	6005      	str	r5, [r0, #0]
 8009f50:	60c5      	str	r5, [r0, #12]
 8009f52:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009f54:	68eb      	ldr	r3, [r5, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d013      	beq.n	8009f82 <_Balloc+0x5a>
 8009f5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f5c:	00a2      	lsls	r2, r4, #2
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	189b      	adds	r3, r3, r2
 8009f62:	6818      	ldr	r0, [r3, #0]
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d118      	bne.n	8009f9a <_Balloc+0x72>
 8009f68:	2101      	movs	r1, #1
 8009f6a:	000d      	movs	r5, r1
 8009f6c:	40a5      	lsls	r5, r4
 8009f6e:	1d6a      	adds	r2, r5, #5
 8009f70:	0030      	movs	r0, r6
 8009f72:	0092      	lsls	r2, r2, #2
 8009f74:	f000 fb74 	bl	800a660 <_calloc_r>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d00c      	beq.n	8009f96 <_Balloc+0x6e>
 8009f7c:	6044      	str	r4, [r0, #4]
 8009f7e:	6085      	str	r5, [r0, #8]
 8009f80:	e00d      	b.n	8009f9e <_Balloc+0x76>
 8009f82:	2221      	movs	r2, #33	; 0x21
 8009f84:	2104      	movs	r1, #4
 8009f86:	0030      	movs	r0, r6
 8009f88:	f000 fb6a 	bl	800a660 <_calloc_r>
 8009f8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f8e:	60e8      	str	r0, [r5, #12]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1e1      	bne.n	8009f5a <_Balloc+0x32>
 8009f96:	2000      	movs	r0, #0
 8009f98:	bd70      	pop	{r4, r5, r6, pc}
 8009f9a:	6802      	ldr	r2, [r0, #0]
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6103      	str	r3, [r0, #16]
 8009fa2:	60c3      	str	r3, [r0, #12]
 8009fa4:	e7f8      	b.n	8009f98 <_Balloc+0x70>
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	0800ba39 	.word	0x0800ba39
 8009fac:	0800babc 	.word	0x0800babc

08009fb0 <_Bfree>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fb4:	0005      	movs	r5, r0
 8009fb6:	000c      	movs	r4, r1
 8009fb8:	2e00      	cmp	r6, #0
 8009fba:	d10e      	bne.n	8009fda <_Bfree+0x2a>
 8009fbc:	2010      	movs	r0, #16
 8009fbe:	f7ff ff9d 	bl	8009efc <malloc>
 8009fc2:	1e02      	subs	r2, r0, #0
 8009fc4:	6268      	str	r0, [r5, #36]	; 0x24
 8009fc6:	d104      	bne.n	8009fd2 <_Bfree+0x22>
 8009fc8:	218a      	movs	r1, #138	; 0x8a
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <_Bfree+0x40>)
 8009fcc:	4809      	ldr	r0, [pc, #36]	; (8009ff4 <_Bfree+0x44>)
 8009fce:	f000 fdc9 	bl	800ab64 <__assert_func>
 8009fd2:	6046      	str	r6, [r0, #4]
 8009fd4:	6086      	str	r6, [r0, #8]
 8009fd6:	6006      	str	r6, [r0, #0]
 8009fd8:	60c6      	str	r6, [r0, #12]
 8009fda:	2c00      	cmp	r4, #0
 8009fdc:	d007      	beq.n	8009fee <_Bfree+0x3e>
 8009fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fe0:	6862      	ldr	r2, [r4, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	0092      	lsls	r2, r2, #2
 8009fe6:	189b      	adds	r3, r3, r2
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	6022      	str	r2, [r4, #0]
 8009fec:	601c      	str	r4, [r3, #0]
 8009fee:	bd70      	pop	{r4, r5, r6, pc}
 8009ff0:	0800ba39 	.word	0x0800ba39
 8009ff4:	0800babc 	.word	0x0800babc

08009ff8 <__multadd>:
 8009ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ffa:	000e      	movs	r6, r1
 8009ffc:	9001      	str	r0, [sp, #4]
 8009ffe:	000c      	movs	r4, r1
 800a000:	001d      	movs	r5, r3
 800a002:	2000      	movs	r0, #0
 800a004:	690f      	ldr	r7, [r1, #16]
 800a006:	3614      	adds	r6, #20
 800a008:	6833      	ldr	r3, [r6, #0]
 800a00a:	3001      	adds	r0, #1
 800a00c:	b299      	uxth	r1, r3
 800a00e:	4351      	muls	r1, r2
 800a010:	0c1b      	lsrs	r3, r3, #16
 800a012:	4353      	muls	r3, r2
 800a014:	1949      	adds	r1, r1, r5
 800a016:	0c0d      	lsrs	r5, r1, #16
 800a018:	195b      	adds	r3, r3, r5
 800a01a:	0c1d      	lsrs	r5, r3, #16
 800a01c:	b289      	uxth	r1, r1
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	185b      	adds	r3, r3, r1
 800a022:	c608      	stmia	r6!, {r3}
 800a024:	4287      	cmp	r7, r0
 800a026:	dcef      	bgt.n	800a008 <__multadd+0x10>
 800a028:	2d00      	cmp	r5, #0
 800a02a:	d022      	beq.n	800a072 <__multadd+0x7a>
 800a02c:	68a3      	ldr	r3, [r4, #8]
 800a02e:	42bb      	cmp	r3, r7
 800a030:	dc19      	bgt.n	800a066 <__multadd+0x6e>
 800a032:	6863      	ldr	r3, [r4, #4]
 800a034:	9801      	ldr	r0, [sp, #4]
 800a036:	1c59      	adds	r1, r3, #1
 800a038:	f7ff ff76 	bl	8009f28 <_Balloc>
 800a03c:	1e06      	subs	r6, r0, #0
 800a03e:	d105      	bne.n	800a04c <__multadd+0x54>
 800a040:	0002      	movs	r2, r0
 800a042:	21b5      	movs	r1, #181	; 0xb5
 800a044:	4b0c      	ldr	r3, [pc, #48]	; (800a078 <__multadd+0x80>)
 800a046:	480d      	ldr	r0, [pc, #52]	; (800a07c <__multadd+0x84>)
 800a048:	f000 fd8c 	bl	800ab64 <__assert_func>
 800a04c:	0021      	movs	r1, r4
 800a04e:	6923      	ldr	r3, [r4, #16]
 800a050:	310c      	adds	r1, #12
 800a052:	1c9a      	adds	r2, r3, #2
 800a054:	0092      	lsls	r2, r2, #2
 800a056:	300c      	adds	r0, #12
 800a058:	f7fe fc06 	bl	8008868 <memcpy>
 800a05c:	0021      	movs	r1, r4
 800a05e:	9801      	ldr	r0, [sp, #4]
 800a060:	f7ff ffa6 	bl	8009fb0 <_Bfree>
 800a064:	0034      	movs	r4, r6
 800a066:	1d3b      	adds	r3, r7, #4
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	18e3      	adds	r3, r4, r3
 800a06c:	605d      	str	r5, [r3, #4]
 800a06e:	1c7b      	adds	r3, r7, #1
 800a070:	6123      	str	r3, [r4, #16]
 800a072:	0020      	movs	r0, r4
 800a074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a076:	46c0      	nop			; (mov r8, r8)
 800a078:	0800baab 	.word	0x0800baab
 800a07c:	0800babc 	.word	0x0800babc

0800a080 <__hi0bits>:
 800a080:	0003      	movs	r3, r0
 800a082:	0c02      	lsrs	r2, r0, #16
 800a084:	2000      	movs	r0, #0
 800a086:	4282      	cmp	r2, r0
 800a088:	d101      	bne.n	800a08e <__hi0bits+0xe>
 800a08a:	041b      	lsls	r3, r3, #16
 800a08c:	3010      	adds	r0, #16
 800a08e:	0e1a      	lsrs	r2, r3, #24
 800a090:	d101      	bne.n	800a096 <__hi0bits+0x16>
 800a092:	3008      	adds	r0, #8
 800a094:	021b      	lsls	r3, r3, #8
 800a096:	0f1a      	lsrs	r2, r3, #28
 800a098:	d101      	bne.n	800a09e <__hi0bits+0x1e>
 800a09a:	3004      	adds	r0, #4
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	0f9a      	lsrs	r2, r3, #30
 800a0a0:	d101      	bne.n	800a0a6 <__hi0bits+0x26>
 800a0a2:	3002      	adds	r0, #2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	db03      	blt.n	800a0b2 <__hi0bits+0x32>
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	d400      	bmi.n	800a0b2 <__hi0bits+0x32>
 800a0b0:	2020      	movs	r0, #32
 800a0b2:	4770      	bx	lr

0800a0b4 <__lo0bits>:
 800a0b4:	6803      	ldr	r3, [r0, #0]
 800a0b6:	0002      	movs	r2, r0
 800a0b8:	2107      	movs	r1, #7
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	4008      	ands	r0, r1
 800a0be:	420b      	tst	r3, r1
 800a0c0:	d00d      	beq.n	800a0de <__lo0bits+0x2a>
 800a0c2:	3906      	subs	r1, #6
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	420b      	tst	r3, r1
 800a0c8:	d105      	bne.n	800a0d6 <__lo0bits+0x22>
 800a0ca:	3002      	adds	r0, #2
 800a0cc:	4203      	tst	r3, r0
 800a0ce:	d003      	beq.n	800a0d8 <__lo0bits+0x24>
 800a0d0:	40cb      	lsrs	r3, r1
 800a0d2:	0008      	movs	r0, r1
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	4770      	bx	lr
 800a0d8:	089b      	lsrs	r3, r3, #2
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	e7fb      	b.n	800a0d6 <__lo0bits+0x22>
 800a0de:	b299      	uxth	r1, r3
 800a0e0:	2900      	cmp	r1, #0
 800a0e2:	d101      	bne.n	800a0e8 <__lo0bits+0x34>
 800a0e4:	2010      	movs	r0, #16
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	b2d9      	uxtb	r1, r3
 800a0ea:	2900      	cmp	r1, #0
 800a0ec:	d101      	bne.n	800a0f2 <__lo0bits+0x3e>
 800a0ee:	3008      	adds	r0, #8
 800a0f0:	0a1b      	lsrs	r3, r3, #8
 800a0f2:	0719      	lsls	r1, r3, #28
 800a0f4:	d101      	bne.n	800a0fa <__lo0bits+0x46>
 800a0f6:	3004      	adds	r0, #4
 800a0f8:	091b      	lsrs	r3, r3, #4
 800a0fa:	0799      	lsls	r1, r3, #30
 800a0fc:	d101      	bne.n	800a102 <__lo0bits+0x4e>
 800a0fe:	3002      	adds	r0, #2
 800a100:	089b      	lsrs	r3, r3, #2
 800a102:	07d9      	lsls	r1, r3, #31
 800a104:	d4e9      	bmi.n	800a0da <__lo0bits+0x26>
 800a106:	3001      	adds	r0, #1
 800a108:	085b      	lsrs	r3, r3, #1
 800a10a:	d1e6      	bne.n	800a0da <__lo0bits+0x26>
 800a10c:	2020      	movs	r0, #32
 800a10e:	e7e2      	b.n	800a0d6 <__lo0bits+0x22>

0800a110 <__i2b>:
 800a110:	b510      	push	{r4, lr}
 800a112:	000c      	movs	r4, r1
 800a114:	2101      	movs	r1, #1
 800a116:	f7ff ff07 	bl	8009f28 <_Balloc>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d106      	bne.n	800a12c <__i2b+0x1c>
 800a11e:	21a0      	movs	r1, #160	; 0xa0
 800a120:	0002      	movs	r2, r0
 800a122:	4b04      	ldr	r3, [pc, #16]	; (800a134 <__i2b+0x24>)
 800a124:	4804      	ldr	r0, [pc, #16]	; (800a138 <__i2b+0x28>)
 800a126:	0049      	lsls	r1, r1, #1
 800a128:	f000 fd1c 	bl	800ab64 <__assert_func>
 800a12c:	2301      	movs	r3, #1
 800a12e:	6144      	str	r4, [r0, #20]
 800a130:	6103      	str	r3, [r0, #16]
 800a132:	bd10      	pop	{r4, pc}
 800a134:	0800baab 	.word	0x0800baab
 800a138:	0800babc 	.word	0x0800babc

0800a13c <__multiply>:
 800a13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a13e:	690b      	ldr	r3, [r1, #16]
 800a140:	0014      	movs	r4, r2
 800a142:	6912      	ldr	r2, [r2, #16]
 800a144:	000d      	movs	r5, r1
 800a146:	b089      	sub	sp, #36	; 0x24
 800a148:	4293      	cmp	r3, r2
 800a14a:	da01      	bge.n	800a150 <__multiply+0x14>
 800a14c:	0025      	movs	r5, r4
 800a14e:	000c      	movs	r4, r1
 800a150:	692f      	ldr	r7, [r5, #16]
 800a152:	6926      	ldr	r6, [r4, #16]
 800a154:	6869      	ldr	r1, [r5, #4]
 800a156:	19bb      	adds	r3, r7, r6
 800a158:	9302      	str	r3, [sp, #8]
 800a15a:	68ab      	ldr	r3, [r5, #8]
 800a15c:	19ba      	adds	r2, r7, r6
 800a15e:	4293      	cmp	r3, r2
 800a160:	da00      	bge.n	800a164 <__multiply+0x28>
 800a162:	3101      	adds	r1, #1
 800a164:	f7ff fee0 	bl	8009f28 <_Balloc>
 800a168:	9001      	str	r0, [sp, #4]
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d106      	bne.n	800a17c <__multiply+0x40>
 800a16e:	215e      	movs	r1, #94	; 0x5e
 800a170:	0002      	movs	r2, r0
 800a172:	4b48      	ldr	r3, [pc, #288]	; (800a294 <__multiply+0x158>)
 800a174:	4848      	ldr	r0, [pc, #288]	; (800a298 <__multiply+0x15c>)
 800a176:	31ff      	adds	r1, #255	; 0xff
 800a178:	f000 fcf4 	bl	800ab64 <__assert_func>
 800a17c:	9b01      	ldr	r3, [sp, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	3314      	adds	r3, #20
 800a182:	469c      	mov	ip, r3
 800a184:	19bb      	adds	r3, r7, r6
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4463      	add	r3, ip
 800a18a:	9303      	str	r3, [sp, #12]
 800a18c:	4663      	mov	r3, ip
 800a18e:	9903      	ldr	r1, [sp, #12]
 800a190:	428b      	cmp	r3, r1
 800a192:	d32c      	bcc.n	800a1ee <__multiply+0xb2>
 800a194:	002b      	movs	r3, r5
 800a196:	0022      	movs	r2, r4
 800a198:	3314      	adds	r3, #20
 800a19a:	00bf      	lsls	r7, r7, #2
 800a19c:	3214      	adds	r2, #20
 800a19e:	9306      	str	r3, [sp, #24]
 800a1a0:	00b6      	lsls	r6, r6, #2
 800a1a2:	19db      	adds	r3, r3, r7
 800a1a4:	9304      	str	r3, [sp, #16]
 800a1a6:	1993      	adds	r3, r2, r6
 800a1a8:	9307      	str	r3, [sp, #28]
 800a1aa:	2304      	movs	r3, #4
 800a1ac:	9305      	str	r3, [sp, #20]
 800a1ae:	002b      	movs	r3, r5
 800a1b0:	9904      	ldr	r1, [sp, #16]
 800a1b2:	3315      	adds	r3, #21
 800a1b4:	9200      	str	r2, [sp, #0]
 800a1b6:	4299      	cmp	r1, r3
 800a1b8:	d305      	bcc.n	800a1c6 <__multiply+0x8a>
 800a1ba:	1b4b      	subs	r3, r1, r5
 800a1bc:	3b15      	subs	r3, #21
 800a1be:	089b      	lsrs	r3, r3, #2
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	9305      	str	r3, [sp, #20]
 800a1c6:	9b07      	ldr	r3, [sp, #28]
 800a1c8:	9a00      	ldr	r2, [sp, #0]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d311      	bcc.n	800a1f2 <__multiply+0xb6>
 800a1ce:	9b02      	ldr	r3, [sp, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	dd06      	ble.n	800a1e2 <__multiply+0xa6>
 800a1d4:	9b03      	ldr	r3, [sp, #12]
 800a1d6:	3b04      	subs	r3, #4
 800a1d8:	9303      	str	r3, [sp, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d053      	beq.n	800a28a <__multiply+0x14e>
 800a1e2:	9b01      	ldr	r3, [sp, #4]
 800a1e4:	9a02      	ldr	r2, [sp, #8]
 800a1e6:	0018      	movs	r0, r3
 800a1e8:	611a      	str	r2, [r3, #16]
 800a1ea:	b009      	add	sp, #36	; 0x24
 800a1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1ee:	c304      	stmia	r3!, {r2}
 800a1f0:	e7cd      	b.n	800a18e <__multiply+0x52>
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	b298      	uxth	r0, r3
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d01b      	beq.n	800a234 <__multiply+0xf8>
 800a1fc:	4667      	mov	r7, ip
 800a1fe:	2400      	movs	r4, #0
 800a200:	9e06      	ldr	r6, [sp, #24]
 800a202:	ce02      	ldmia	r6!, {r1}
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	b28b      	uxth	r3, r1
 800a208:	4343      	muls	r3, r0
 800a20a:	b292      	uxth	r2, r2
 800a20c:	189b      	adds	r3, r3, r2
 800a20e:	191b      	adds	r3, r3, r4
 800a210:	0c0c      	lsrs	r4, r1, #16
 800a212:	4344      	muls	r4, r0
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	0c11      	lsrs	r1, r2, #16
 800a218:	1861      	adds	r1, r4, r1
 800a21a:	0c1c      	lsrs	r4, r3, #16
 800a21c:	1909      	adds	r1, r1, r4
 800a21e:	0c0c      	lsrs	r4, r1, #16
 800a220:	b29b      	uxth	r3, r3
 800a222:	0409      	lsls	r1, r1, #16
 800a224:	430b      	orrs	r3, r1
 800a226:	c708      	stmia	r7!, {r3}
 800a228:	9b04      	ldr	r3, [sp, #16]
 800a22a:	42b3      	cmp	r3, r6
 800a22c:	d8e9      	bhi.n	800a202 <__multiply+0xc6>
 800a22e:	4663      	mov	r3, ip
 800a230:	9a05      	ldr	r2, [sp, #20]
 800a232:	509c      	str	r4, [r3, r2]
 800a234:	9b00      	ldr	r3, [sp, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	0c1e      	lsrs	r6, r3, #16
 800a23a:	d020      	beq.n	800a27e <__multiply+0x142>
 800a23c:	4663      	mov	r3, ip
 800a23e:	002c      	movs	r4, r5
 800a240:	4660      	mov	r0, ip
 800a242:	2700      	movs	r7, #0
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3414      	adds	r4, #20
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	b291      	uxth	r1, r2
 800a24e:	4371      	muls	r1, r6
 800a250:	6802      	ldr	r2, [r0, #0]
 800a252:	0c12      	lsrs	r2, r2, #16
 800a254:	1889      	adds	r1, r1, r2
 800a256:	19cf      	adds	r7, r1, r7
 800a258:	0439      	lsls	r1, r7, #16
 800a25a:	430b      	orrs	r3, r1
 800a25c:	6003      	str	r3, [r0, #0]
 800a25e:	cc02      	ldmia	r4!, {r1}
 800a260:	6843      	ldr	r3, [r0, #4]
 800a262:	0c09      	lsrs	r1, r1, #16
 800a264:	4371      	muls	r1, r6
 800a266:	b29b      	uxth	r3, r3
 800a268:	0c3f      	lsrs	r7, r7, #16
 800a26a:	18cb      	adds	r3, r1, r3
 800a26c:	9a04      	ldr	r2, [sp, #16]
 800a26e:	19db      	adds	r3, r3, r7
 800a270:	0c1f      	lsrs	r7, r3, #16
 800a272:	3004      	adds	r0, #4
 800a274:	42a2      	cmp	r2, r4
 800a276:	d8e7      	bhi.n	800a248 <__multiply+0x10c>
 800a278:	4662      	mov	r2, ip
 800a27a:	9905      	ldr	r1, [sp, #20]
 800a27c:	5053      	str	r3, [r2, r1]
 800a27e:	9b00      	ldr	r3, [sp, #0]
 800a280:	3304      	adds	r3, #4
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	2304      	movs	r3, #4
 800a286:	449c      	add	ip, r3
 800a288:	e79d      	b.n	800a1c6 <__multiply+0x8a>
 800a28a:	9b02      	ldr	r3, [sp, #8]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	e79d      	b.n	800a1ce <__multiply+0x92>
 800a292:	46c0      	nop			; (mov r8, r8)
 800a294:	0800baab 	.word	0x0800baab
 800a298:	0800babc 	.word	0x0800babc

0800a29c <__pow5mult>:
 800a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29e:	2303      	movs	r3, #3
 800a2a0:	0015      	movs	r5, r2
 800a2a2:	0007      	movs	r7, r0
 800a2a4:	000e      	movs	r6, r1
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	421d      	tst	r5, r3
 800a2aa:	d008      	beq.n	800a2be <__pow5mult+0x22>
 800a2ac:	4925      	ldr	r1, [pc, #148]	; (800a344 <__pow5mult+0xa8>)
 800a2ae:	3a01      	subs	r2, #1
 800a2b0:	0092      	lsls	r2, r2, #2
 800a2b2:	5852      	ldr	r2, [r2, r1]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	0031      	movs	r1, r6
 800a2b8:	f7ff fe9e 	bl	8009ff8 <__multadd>
 800a2bc:	0006      	movs	r6, r0
 800a2be:	10ad      	asrs	r5, r5, #2
 800a2c0:	d03d      	beq.n	800a33e <__pow5mult+0xa2>
 800a2c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a2c4:	2c00      	cmp	r4, #0
 800a2c6:	d10f      	bne.n	800a2e8 <__pow5mult+0x4c>
 800a2c8:	2010      	movs	r0, #16
 800a2ca:	f7ff fe17 	bl	8009efc <malloc>
 800a2ce:	1e02      	subs	r2, r0, #0
 800a2d0:	6278      	str	r0, [r7, #36]	; 0x24
 800a2d2:	d105      	bne.n	800a2e0 <__pow5mult+0x44>
 800a2d4:	21d7      	movs	r1, #215	; 0xd7
 800a2d6:	4b1c      	ldr	r3, [pc, #112]	; (800a348 <__pow5mult+0xac>)
 800a2d8:	481c      	ldr	r0, [pc, #112]	; (800a34c <__pow5mult+0xb0>)
 800a2da:	0049      	lsls	r1, r1, #1
 800a2dc:	f000 fc42 	bl	800ab64 <__assert_func>
 800a2e0:	6044      	str	r4, [r0, #4]
 800a2e2:	6084      	str	r4, [r0, #8]
 800a2e4:	6004      	str	r4, [r0, #0]
 800a2e6:	60c4      	str	r4, [r0, #12]
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	689c      	ldr	r4, [r3, #8]
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	2c00      	cmp	r4, #0
 800a2f0:	d108      	bne.n	800a304 <__pow5mult+0x68>
 800a2f2:	0038      	movs	r0, r7
 800a2f4:	4916      	ldr	r1, [pc, #88]	; (800a350 <__pow5mult+0xb4>)
 800a2f6:	f7ff ff0b 	bl	800a110 <__i2b>
 800a2fa:	9b01      	ldr	r3, [sp, #4]
 800a2fc:	0004      	movs	r4, r0
 800a2fe:	6098      	str	r0, [r3, #8]
 800a300:	2300      	movs	r3, #0
 800a302:	6003      	str	r3, [r0, #0]
 800a304:	2301      	movs	r3, #1
 800a306:	421d      	tst	r5, r3
 800a308:	d00a      	beq.n	800a320 <__pow5mult+0x84>
 800a30a:	0031      	movs	r1, r6
 800a30c:	0022      	movs	r2, r4
 800a30e:	0038      	movs	r0, r7
 800a310:	f7ff ff14 	bl	800a13c <__multiply>
 800a314:	0031      	movs	r1, r6
 800a316:	9001      	str	r0, [sp, #4]
 800a318:	0038      	movs	r0, r7
 800a31a:	f7ff fe49 	bl	8009fb0 <_Bfree>
 800a31e:	9e01      	ldr	r6, [sp, #4]
 800a320:	106d      	asrs	r5, r5, #1
 800a322:	d00c      	beq.n	800a33e <__pow5mult+0xa2>
 800a324:	6820      	ldr	r0, [r4, #0]
 800a326:	2800      	cmp	r0, #0
 800a328:	d107      	bne.n	800a33a <__pow5mult+0x9e>
 800a32a:	0022      	movs	r2, r4
 800a32c:	0021      	movs	r1, r4
 800a32e:	0038      	movs	r0, r7
 800a330:	f7ff ff04 	bl	800a13c <__multiply>
 800a334:	2300      	movs	r3, #0
 800a336:	6020      	str	r0, [r4, #0]
 800a338:	6003      	str	r3, [r0, #0]
 800a33a:	0004      	movs	r4, r0
 800a33c:	e7e2      	b.n	800a304 <__pow5mult+0x68>
 800a33e:	0030      	movs	r0, r6
 800a340:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a342:	46c0      	nop			; (mov r8, r8)
 800a344:	0800bc08 	.word	0x0800bc08
 800a348:	0800ba39 	.word	0x0800ba39
 800a34c:	0800babc 	.word	0x0800babc
 800a350:	00000271 	.word	0x00000271

0800a354 <__lshift>:
 800a354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a356:	000c      	movs	r4, r1
 800a358:	0017      	movs	r7, r2
 800a35a:	6923      	ldr	r3, [r4, #16]
 800a35c:	1155      	asrs	r5, r2, #5
 800a35e:	b087      	sub	sp, #28
 800a360:	18eb      	adds	r3, r5, r3
 800a362:	9302      	str	r3, [sp, #8]
 800a364:	3301      	adds	r3, #1
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	6849      	ldr	r1, [r1, #4]
 800a36a:	68a3      	ldr	r3, [r4, #8]
 800a36c:	9004      	str	r0, [sp, #16]
 800a36e:	9a01      	ldr	r2, [sp, #4]
 800a370:	4293      	cmp	r3, r2
 800a372:	db10      	blt.n	800a396 <__lshift+0x42>
 800a374:	9804      	ldr	r0, [sp, #16]
 800a376:	f7ff fdd7 	bl	8009f28 <_Balloc>
 800a37a:	2300      	movs	r3, #0
 800a37c:	0002      	movs	r2, r0
 800a37e:	0006      	movs	r6, r0
 800a380:	0019      	movs	r1, r3
 800a382:	3214      	adds	r2, #20
 800a384:	4298      	cmp	r0, r3
 800a386:	d10c      	bne.n	800a3a2 <__lshift+0x4e>
 800a388:	21da      	movs	r1, #218	; 0xda
 800a38a:	0002      	movs	r2, r0
 800a38c:	4b26      	ldr	r3, [pc, #152]	; (800a428 <__lshift+0xd4>)
 800a38e:	4827      	ldr	r0, [pc, #156]	; (800a42c <__lshift+0xd8>)
 800a390:	31ff      	adds	r1, #255	; 0xff
 800a392:	f000 fbe7 	bl	800ab64 <__assert_func>
 800a396:	3101      	adds	r1, #1
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	e7e8      	b.n	800a36e <__lshift+0x1a>
 800a39c:	0098      	lsls	r0, r3, #2
 800a39e:	5011      	str	r1, [r2, r0]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	42ab      	cmp	r3, r5
 800a3a4:	dbfa      	blt.n	800a39c <__lshift+0x48>
 800a3a6:	43eb      	mvns	r3, r5
 800a3a8:	17db      	asrs	r3, r3, #31
 800a3aa:	401d      	ands	r5, r3
 800a3ac:	211f      	movs	r1, #31
 800a3ae:	0023      	movs	r3, r4
 800a3b0:	0038      	movs	r0, r7
 800a3b2:	00ad      	lsls	r5, r5, #2
 800a3b4:	1955      	adds	r5, r2, r5
 800a3b6:	6922      	ldr	r2, [r4, #16]
 800a3b8:	3314      	adds	r3, #20
 800a3ba:	0092      	lsls	r2, r2, #2
 800a3bc:	4008      	ands	r0, r1
 800a3be:	4684      	mov	ip, r0
 800a3c0:	189a      	adds	r2, r3, r2
 800a3c2:	420f      	tst	r7, r1
 800a3c4:	d02a      	beq.n	800a41c <__lshift+0xc8>
 800a3c6:	3101      	adds	r1, #1
 800a3c8:	1a09      	subs	r1, r1, r0
 800a3ca:	9105      	str	r1, [sp, #20]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	9503      	str	r5, [sp, #12]
 800a3d0:	4667      	mov	r7, ip
 800a3d2:	6818      	ldr	r0, [r3, #0]
 800a3d4:	40b8      	lsls	r0, r7
 800a3d6:	4301      	orrs	r1, r0
 800a3d8:	9803      	ldr	r0, [sp, #12]
 800a3da:	c002      	stmia	r0!, {r1}
 800a3dc:	cb02      	ldmia	r3!, {r1}
 800a3de:	9003      	str	r0, [sp, #12]
 800a3e0:	9805      	ldr	r0, [sp, #20]
 800a3e2:	40c1      	lsrs	r1, r0
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d8f3      	bhi.n	800a3d0 <__lshift+0x7c>
 800a3e8:	0020      	movs	r0, r4
 800a3ea:	3015      	adds	r0, #21
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	4282      	cmp	r2, r0
 800a3f0:	d304      	bcc.n	800a3fc <__lshift+0xa8>
 800a3f2:	1b13      	subs	r3, r2, r4
 800a3f4:	3b15      	subs	r3, #21
 800a3f6:	089b      	lsrs	r3, r3, #2
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	50e9      	str	r1, [r5, r3]
 800a3fe:	2900      	cmp	r1, #0
 800a400:	d002      	beq.n	800a408 <__lshift+0xb4>
 800a402:	9b02      	ldr	r3, [sp, #8]
 800a404:	3302      	adds	r3, #2
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	9b01      	ldr	r3, [sp, #4]
 800a40a:	9804      	ldr	r0, [sp, #16]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	0021      	movs	r1, r4
 800a410:	6133      	str	r3, [r6, #16]
 800a412:	f7ff fdcd 	bl	8009fb0 <_Bfree>
 800a416:	0030      	movs	r0, r6
 800a418:	b007      	add	sp, #28
 800a41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a41c:	cb02      	ldmia	r3!, {r1}
 800a41e:	c502      	stmia	r5!, {r1}
 800a420:	429a      	cmp	r2, r3
 800a422:	d8fb      	bhi.n	800a41c <__lshift+0xc8>
 800a424:	e7f0      	b.n	800a408 <__lshift+0xb4>
 800a426:	46c0      	nop			; (mov r8, r8)
 800a428:	0800baab 	.word	0x0800baab
 800a42c:	0800babc 	.word	0x0800babc

0800a430 <__mcmp>:
 800a430:	6902      	ldr	r2, [r0, #16]
 800a432:	690b      	ldr	r3, [r1, #16]
 800a434:	b530      	push	{r4, r5, lr}
 800a436:	0004      	movs	r4, r0
 800a438:	1ad0      	subs	r0, r2, r3
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d10d      	bne.n	800a45a <__mcmp+0x2a>
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	3414      	adds	r4, #20
 800a442:	3114      	adds	r1, #20
 800a444:	18e2      	adds	r2, r4, r3
 800a446:	18c9      	adds	r1, r1, r3
 800a448:	3a04      	subs	r2, #4
 800a44a:	3904      	subs	r1, #4
 800a44c:	6815      	ldr	r5, [r2, #0]
 800a44e:	680b      	ldr	r3, [r1, #0]
 800a450:	429d      	cmp	r5, r3
 800a452:	d003      	beq.n	800a45c <__mcmp+0x2c>
 800a454:	2001      	movs	r0, #1
 800a456:	429d      	cmp	r5, r3
 800a458:	d303      	bcc.n	800a462 <__mcmp+0x32>
 800a45a:	bd30      	pop	{r4, r5, pc}
 800a45c:	4294      	cmp	r4, r2
 800a45e:	d3f3      	bcc.n	800a448 <__mcmp+0x18>
 800a460:	e7fb      	b.n	800a45a <__mcmp+0x2a>
 800a462:	4240      	negs	r0, r0
 800a464:	e7f9      	b.n	800a45a <__mcmp+0x2a>
	...

0800a468 <__mdiff>:
 800a468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a46a:	000e      	movs	r6, r1
 800a46c:	0007      	movs	r7, r0
 800a46e:	0011      	movs	r1, r2
 800a470:	0030      	movs	r0, r6
 800a472:	b087      	sub	sp, #28
 800a474:	0014      	movs	r4, r2
 800a476:	f7ff ffdb 	bl	800a430 <__mcmp>
 800a47a:	1e05      	subs	r5, r0, #0
 800a47c:	d110      	bne.n	800a4a0 <__mdiff+0x38>
 800a47e:	0001      	movs	r1, r0
 800a480:	0038      	movs	r0, r7
 800a482:	f7ff fd51 	bl	8009f28 <_Balloc>
 800a486:	1e02      	subs	r2, r0, #0
 800a488:	d104      	bne.n	800a494 <__mdiff+0x2c>
 800a48a:	4b40      	ldr	r3, [pc, #256]	; (800a58c <__mdiff+0x124>)
 800a48c:	4940      	ldr	r1, [pc, #256]	; (800a590 <__mdiff+0x128>)
 800a48e:	4841      	ldr	r0, [pc, #260]	; (800a594 <__mdiff+0x12c>)
 800a490:	f000 fb68 	bl	800ab64 <__assert_func>
 800a494:	2301      	movs	r3, #1
 800a496:	6145      	str	r5, [r0, #20]
 800a498:	6103      	str	r3, [r0, #16]
 800a49a:	0010      	movs	r0, r2
 800a49c:	b007      	add	sp, #28
 800a49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	9301      	str	r3, [sp, #4]
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	db04      	blt.n	800a4b2 <__mdiff+0x4a>
 800a4a8:	0023      	movs	r3, r4
 800a4aa:	0034      	movs	r4, r6
 800a4ac:	001e      	movs	r6, r3
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	0038      	movs	r0, r7
 800a4b4:	6861      	ldr	r1, [r4, #4]
 800a4b6:	f7ff fd37 	bl	8009f28 <_Balloc>
 800a4ba:	1e02      	subs	r2, r0, #0
 800a4bc:	d103      	bne.n	800a4c6 <__mdiff+0x5e>
 800a4be:	2190      	movs	r1, #144	; 0x90
 800a4c0:	4b32      	ldr	r3, [pc, #200]	; (800a58c <__mdiff+0x124>)
 800a4c2:	0089      	lsls	r1, r1, #2
 800a4c4:	e7e3      	b.n	800a48e <__mdiff+0x26>
 800a4c6:	9b01      	ldr	r3, [sp, #4]
 800a4c8:	2700      	movs	r7, #0
 800a4ca:	60c3      	str	r3, [r0, #12]
 800a4cc:	6920      	ldr	r0, [r4, #16]
 800a4ce:	3414      	adds	r4, #20
 800a4d0:	9401      	str	r4, [sp, #4]
 800a4d2:	9b01      	ldr	r3, [sp, #4]
 800a4d4:	0084      	lsls	r4, r0, #2
 800a4d6:	191b      	adds	r3, r3, r4
 800a4d8:	0034      	movs	r4, r6
 800a4da:	9302      	str	r3, [sp, #8]
 800a4dc:	6933      	ldr	r3, [r6, #16]
 800a4de:	3414      	adds	r4, #20
 800a4e0:	0099      	lsls	r1, r3, #2
 800a4e2:	1863      	adds	r3, r4, r1
 800a4e4:	9303      	str	r3, [sp, #12]
 800a4e6:	0013      	movs	r3, r2
 800a4e8:	3314      	adds	r3, #20
 800a4ea:	469c      	mov	ip, r3
 800a4ec:	9305      	str	r3, [sp, #20]
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	9304      	str	r3, [sp, #16]
 800a4f2:	9b04      	ldr	r3, [sp, #16]
 800a4f4:	cc02      	ldmia	r4!, {r1}
 800a4f6:	cb20      	ldmia	r3!, {r5}
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	b2ab      	uxth	r3, r5
 800a4fc:	19df      	adds	r7, r3, r7
 800a4fe:	b28b      	uxth	r3, r1
 800a500:	1afb      	subs	r3, r7, r3
 800a502:	0c09      	lsrs	r1, r1, #16
 800a504:	0c2d      	lsrs	r5, r5, #16
 800a506:	1a6d      	subs	r5, r5, r1
 800a508:	1419      	asrs	r1, r3, #16
 800a50a:	186d      	adds	r5, r5, r1
 800a50c:	4661      	mov	r1, ip
 800a50e:	142f      	asrs	r7, r5, #16
 800a510:	b29b      	uxth	r3, r3
 800a512:	042d      	lsls	r5, r5, #16
 800a514:	432b      	orrs	r3, r5
 800a516:	c108      	stmia	r1!, {r3}
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	468c      	mov	ip, r1
 800a51c:	42a3      	cmp	r3, r4
 800a51e:	d8e8      	bhi.n	800a4f2 <__mdiff+0x8a>
 800a520:	0031      	movs	r1, r6
 800a522:	9c03      	ldr	r4, [sp, #12]
 800a524:	3115      	adds	r1, #21
 800a526:	2304      	movs	r3, #4
 800a528:	428c      	cmp	r4, r1
 800a52a:	d304      	bcc.n	800a536 <__mdiff+0xce>
 800a52c:	1ba3      	subs	r3, r4, r6
 800a52e:	3b15      	subs	r3, #21
 800a530:	089b      	lsrs	r3, r3, #2
 800a532:	3301      	adds	r3, #1
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	9901      	ldr	r1, [sp, #4]
 800a538:	18cc      	adds	r4, r1, r3
 800a53a:	9905      	ldr	r1, [sp, #20]
 800a53c:	0026      	movs	r6, r4
 800a53e:	18cb      	adds	r3, r1, r3
 800a540:	469c      	mov	ip, r3
 800a542:	9902      	ldr	r1, [sp, #8]
 800a544:	428e      	cmp	r6, r1
 800a546:	d310      	bcc.n	800a56a <__mdiff+0x102>
 800a548:	9e02      	ldr	r6, [sp, #8]
 800a54a:	1ee1      	subs	r1, r4, #3
 800a54c:	2500      	movs	r5, #0
 800a54e:	428e      	cmp	r6, r1
 800a550:	d304      	bcc.n	800a55c <__mdiff+0xf4>
 800a552:	0031      	movs	r1, r6
 800a554:	3103      	adds	r1, #3
 800a556:	1b0c      	subs	r4, r1, r4
 800a558:	08a4      	lsrs	r4, r4, #2
 800a55a:	00a5      	lsls	r5, r4, #2
 800a55c:	195b      	adds	r3, r3, r5
 800a55e:	3b04      	subs	r3, #4
 800a560:	6819      	ldr	r1, [r3, #0]
 800a562:	2900      	cmp	r1, #0
 800a564:	d00f      	beq.n	800a586 <__mdiff+0x11e>
 800a566:	6110      	str	r0, [r2, #16]
 800a568:	e797      	b.n	800a49a <__mdiff+0x32>
 800a56a:	ce02      	ldmia	r6!, {r1}
 800a56c:	b28d      	uxth	r5, r1
 800a56e:	19ed      	adds	r5, r5, r7
 800a570:	0c0f      	lsrs	r7, r1, #16
 800a572:	1429      	asrs	r1, r5, #16
 800a574:	1879      	adds	r1, r7, r1
 800a576:	140f      	asrs	r7, r1, #16
 800a578:	b2ad      	uxth	r5, r5
 800a57a:	0409      	lsls	r1, r1, #16
 800a57c:	430d      	orrs	r5, r1
 800a57e:	4661      	mov	r1, ip
 800a580:	c120      	stmia	r1!, {r5}
 800a582:	468c      	mov	ip, r1
 800a584:	e7dd      	b.n	800a542 <__mdiff+0xda>
 800a586:	3801      	subs	r0, #1
 800a588:	e7e9      	b.n	800a55e <__mdiff+0xf6>
 800a58a:	46c0      	nop			; (mov r8, r8)
 800a58c:	0800baab 	.word	0x0800baab
 800a590:	00000232 	.word	0x00000232
 800a594:	0800babc 	.word	0x0800babc

0800a598 <__d2b>:
 800a598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a59a:	2101      	movs	r1, #1
 800a59c:	0014      	movs	r4, r2
 800a59e:	001e      	movs	r6, r3
 800a5a0:	9f08      	ldr	r7, [sp, #32]
 800a5a2:	f7ff fcc1 	bl	8009f28 <_Balloc>
 800a5a6:	1e05      	subs	r5, r0, #0
 800a5a8:	d105      	bne.n	800a5b6 <__d2b+0x1e>
 800a5aa:	0002      	movs	r2, r0
 800a5ac:	4b26      	ldr	r3, [pc, #152]	; (800a648 <__d2b+0xb0>)
 800a5ae:	4927      	ldr	r1, [pc, #156]	; (800a64c <__d2b+0xb4>)
 800a5b0:	4827      	ldr	r0, [pc, #156]	; (800a650 <__d2b+0xb8>)
 800a5b2:	f000 fad7 	bl	800ab64 <__assert_func>
 800a5b6:	0333      	lsls	r3, r6, #12
 800a5b8:	0076      	lsls	r6, r6, #1
 800a5ba:	0b1b      	lsrs	r3, r3, #12
 800a5bc:	0d76      	lsrs	r6, r6, #21
 800a5be:	d124      	bne.n	800a60a <__d2b+0x72>
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	2c00      	cmp	r4, #0
 800a5c4:	d027      	beq.n	800a616 <__d2b+0x7e>
 800a5c6:	4668      	mov	r0, sp
 800a5c8:	9400      	str	r4, [sp, #0]
 800a5ca:	f7ff fd73 	bl	800a0b4 <__lo0bits>
 800a5ce:	9c00      	ldr	r4, [sp, #0]
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d01e      	beq.n	800a612 <__d2b+0x7a>
 800a5d4:	9b01      	ldr	r3, [sp, #4]
 800a5d6:	2120      	movs	r1, #32
 800a5d8:	001a      	movs	r2, r3
 800a5da:	1a09      	subs	r1, r1, r0
 800a5dc:	408a      	lsls	r2, r1
 800a5de:	40c3      	lsrs	r3, r0
 800a5e0:	4322      	orrs	r2, r4
 800a5e2:	616a      	str	r2, [r5, #20]
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	9c01      	ldr	r4, [sp, #4]
 800a5e8:	61ac      	str	r4, [r5, #24]
 800a5ea:	1e63      	subs	r3, r4, #1
 800a5ec:	419c      	sbcs	r4, r3
 800a5ee:	3401      	adds	r4, #1
 800a5f0:	612c      	str	r4, [r5, #16]
 800a5f2:	2e00      	cmp	r6, #0
 800a5f4:	d018      	beq.n	800a628 <__d2b+0x90>
 800a5f6:	4b17      	ldr	r3, [pc, #92]	; (800a654 <__d2b+0xbc>)
 800a5f8:	18f6      	adds	r6, r6, r3
 800a5fa:	2335      	movs	r3, #53	; 0x35
 800a5fc:	1836      	adds	r6, r6, r0
 800a5fe:	1a18      	subs	r0, r3, r0
 800a600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a602:	603e      	str	r6, [r7, #0]
 800a604:	6018      	str	r0, [r3, #0]
 800a606:	0028      	movs	r0, r5
 800a608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a60a:	2280      	movs	r2, #128	; 0x80
 800a60c:	0352      	lsls	r2, r2, #13
 800a60e:	4313      	orrs	r3, r2
 800a610:	e7d6      	b.n	800a5c0 <__d2b+0x28>
 800a612:	616c      	str	r4, [r5, #20]
 800a614:	e7e7      	b.n	800a5e6 <__d2b+0x4e>
 800a616:	a801      	add	r0, sp, #4
 800a618:	f7ff fd4c 	bl	800a0b4 <__lo0bits>
 800a61c:	2401      	movs	r4, #1
 800a61e:	9b01      	ldr	r3, [sp, #4]
 800a620:	612c      	str	r4, [r5, #16]
 800a622:	616b      	str	r3, [r5, #20]
 800a624:	3020      	adds	r0, #32
 800a626:	e7e4      	b.n	800a5f2 <__d2b+0x5a>
 800a628:	4b0b      	ldr	r3, [pc, #44]	; (800a658 <__d2b+0xc0>)
 800a62a:	18c0      	adds	r0, r0, r3
 800a62c:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <__d2b+0xc4>)
 800a62e:	6038      	str	r0, [r7, #0]
 800a630:	18e3      	adds	r3, r4, r3
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	18eb      	adds	r3, r5, r3
 800a636:	6958      	ldr	r0, [r3, #20]
 800a638:	f7ff fd22 	bl	800a080 <__hi0bits>
 800a63c:	0164      	lsls	r4, r4, #5
 800a63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a640:	1a24      	subs	r4, r4, r0
 800a642:	601c      	str	r4, [r3, #0]
 800a644:	e7df      	b.n	800a606 <__d2b+0x6e>
 800a646:	46c0      	nop			; (mov r8, r8)
 800a648:	0800baab 	.word	0x0800baab
 800a64c:	0000030a 	.word	0x0000030a
 800a650:	0800babc 	.word	0x0800babc
 800a654:	fffffbcd 	.word	0xfffffbcd
 800a658:	fffffbce 	.word	0xfffffbce
 800a65c:	3fffffff 	.word	0x3fffffff

0800a660 <_calloc_r>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	0c13      	lsrs	r3, r2, #16
 800a664:	0c0d      	lsrs	r5, r1, #16
 800a666:	d11e      	bne.n	800a6a6 <_calloc_r+0x46>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10c      	bne.n	800a686 <_calloc_r+0x26>
 800a66c:	b289      	uxth	r1, r1
 800a66e:	b294      	uxth	r4, r2
 800a670:	434c      	muls	r4, r1
 800a672:	0021      	movs	r1, r4
 800a674:	f000 f88c 	bl	800a790 <_malloc_r>
 800a678:	1e05      	subs	r5, r0, #0
 800a67a:	d01b      	beq.n	800a6b4 <_calloc_r+0x54>
 800a67c:	0022      	movs	r2, r4
 800a67e:	2100      	movs	r1, #0
 800a680:	f7fe f8fb 	bl	800887a <memset>
 800a684:	e016      	b.n	800a6b4 <_calloc_r+0x54>
 800a686:	1c1d      	adds	r5, r3, #0
 800a688:	1c0b      	adds	r3, r1, #0
 800a68a:	b292      	uxth	r2, r2
 800a68c:	b289      	uxth	r1, r1
 800a68e:	b29c      	uxth	r4, r3
 800a690:	4351      	muls	r1, r2
 800a692:	b2ab      	uxth	r3, r5
 800a694:	4363      	muls	r3, r4
 800a696:	0c0c      	lsrs	r4, r1, #16
 800a698:	191c      	adds	r4, r3, r4
 800a69a:	0c22      	lsrs	r2, r4, #16
 800a69c:	d107      	bne.n	800a6ae <_calloc_r+0x4e>
 800a69e:	0424      	lsls	r4, r4, #16
 800a6a0:	b289      	uxth	r1, r1
 800a6a2:	430c      	orrs	r4, r1
 800a6a4:	e7e5      	b.n	800a672 <_calloc_r+0x12>
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <_calloc_r+0x4e>
 800a6aa:	1c13      	adds	r3, r2, #0
 800a6ac:	e7ed      	b.n	800a68a <_calloc_r+0x2a>
 800a6ae:	230c      	movs	r3, #12
 800a6b0:	2500      	movs	r5, #0
 800a6b2:	6003      	str	r3, [r0, #0]
 800a6b4:	0028      	movs	r0, r5
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}

0800a6b8 <_free_r>:
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	0005      	movs	r5, r0
 800a6bc:	2900      	cmp	r1, #0
 800a6be:	d010      	beq.n	800a6e2 <_free_r+0x2a>
 800a6c0:	1f0c      	subs	r4, r1, #4
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	da00      	bge.n	800a6ca <_free_r+0x12>
 800a6c8:	18e4      	adds	r4, r4, r3
 800a6ca:	0028      	movs	r0, r5
 800a6cc:	f000 fa9e 	bl	800ac0c <__malloc_lock>
 800a6d0:	4a1d      	ldr	r2, [pc, #116]	; (800a748 <_free_r+0x90>)
 800a6d2:	6813      	ldr	r3, [r2, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d105      	bne.n	800a6e4 <_free_r+0x2c>
 800a6d8:	6063      	str	r3, [r4, #4]
 800a6da:	6014      	str	r4, [r2, #0]
 800a6dc:	0028      	movs	r0, r5
 800a6de:	f000 fa9d 	bl	800ac1c <__malloc_unlock>
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	42a3      	cmp	r3, r4
 800a6e6:	d908      	bls.n	800a6fa <_free_r+0x42>
 800a6e8:	6821      	ldr	r1, [r4, #0]
 800a6ea:	1860      	adds	r0, r4, r1
 800a6ec:	4283      	cmp	r3, r0
 800a6ee:	d1f3      	bne.n	800a6d8 <_free_r+0x20>
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	1841      	adds	r1, r0, r1
 800a6f6:	6021      	str	r1, [r4, #0]
 800a6f8:	e7ee      	b.n	800a6d8 <_free_r+0x20>
 800a6fa:	001a      	movs	r2, r3
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <_free_r+0x4e>
 800a702:	42a3      	cmp	r3, r4
 800a704:	d9f9      	bls.n	800a6fa <_free_r+0x42>
 800a706:	6811      	ldr	r1, [r2, #0]
 800a708:	1850      	adds	r0, r2, r1
 800a70a:	42a0      	cmp	r0, r4
 800a70c:	d10b      	bne.n	800a726 <_free_r+0x6e>
 800a70e:	6820      	ldr	r0, [r4, #0]
 800a710:	1809      	adds	r1, r1, r0
 800a712:	1850      	adds	r0, r2, r1
 800a714:	6011      	str	r1, [r2, #0]
 800a716:	4283      	cmp	r3, r0
 800a718:	d1e0      	bne.n	800a6dc <_free_r+0x24>
 800a71a:	6818      	ldr	r0, [r3, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	1841      	adds	r1, r0, r1
 800a720:	6011      	str	r1, [r2, #0]
 800a722:	6053      	str	r3, [r2, #4]
 800a724:	e7da      	b.n	800a6dc <_free_r+0x24>
 800a726:	42a0      	cmp	r0, r4
 800a728:	d902      	bls.n	800a730 <_free_r+0x78>
 800a72a:	230c      	movs	r3, #12
 800a72c:	602b      	str	r3, [r5, #0]
 800a72e:	e7d5      	b.n	800a6dc <_free_r+0x24>
 800a730:	6821      	ldr	r1, [r4, #0]
 800a732:	1860      	adds	r0, r4, r1
 800a734:	4283      	cmp	r3, r0
 800a736:	d103      	bne.n	800a740 <_free_r+0x88>
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	1841      	adds	r1, r0, r1
 800a73e:	6021      	str	r1, [r4, #0]
 800a740:	6063      	str	r3, [r4, #4]
 800a742:	6054      	str	r4, [r2, #4]
 800a744:	e7ca      	b.n	800a6dc <_free_r+0x24>
 800a746:	46c0      	nop			; (mov r8, r8)
 800a748:	200004cc 	.word	0x200004cc

0800a74c <sbrk_aligned>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	4e0f      	ldr	r6, [pc, #60]	; (800a78c <sbrk_aligned+0x40>)
 800a750:	000d      	movs	r5, r1
 800a752:	6831      	ldr	r1, [r6, #0]
 800a754:	0004      	movs	r4, r0
 800a756:	2900      	cmp	r1, #0
 800a758:	d102      	bne.n	800a760 <sbrk_aligned+0x14>
 800a75a:	f000 f9f1 	bl	800ab40 <_sbrk_r>
 800a75e:	6030      	str	r0, [r6, #0]
 800a760:	0029      	movs	r1, r5
 800a762:	0020      	movs	r0, r4
 800a764:	f000 f9ec 	bl	800ab40 <_sbrk_r>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d00a      	beq.n	800a782 <sbrk_aligned+0x36>
 800a76c:	2303      	movs	r3, #3
 800a76e:	1cc5      	adds	r5, r0, #3
 800a770:	439d      	bics	r5, r3
 800a772:	42a8      	cmp	r0, r5
 800a774:	d007      	beq.n	800a786 <sbrk_aligned+0x3a>
 800a776:	1a29      	subs	r1, r5, r0
 800a778:	0020      	movs	r0, r4
 800a77a:	f000 f9e1 	bl	800ab40 <_sbrk_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d101      	bne.n	800a786 <sbrk_aligned+0x3a>
 800a782:	2501      	movs	r5, #1
 800a784:	426d      	negs	r5, r5
 800a786:	0028      	movs	r0, r5
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	200004d0 	.word	0x200004d0

0800a790 <_malloc_r>:
 800a790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a792:	2203      	movs	r2, #3
 800a794:	1ccb      	adds	r3, r1, #3
 800a796:	4393      	bics	r3, r2
 800a798:	3308      	adds	r3, #8
 800a79a:	0006      	movs	r6, r0
 800a79c:	001f      	movs	r7, r3
 800a79e:	2b0c      	cmp	r3, #12
 800a7a0:	d232      	bcs.n	800a808 <_malloc_r+0x78>
 800a7a2:	270c      	movs	r7, #12
 800a7a4:	42b9      	cmp	r1, r7
 800a7a6:	d831      	bhi.n	800a80c <_malloc_r+0x7c>
 800a7a8:	0030      	movs	r0, r6
 800a7aa:	f000 fa2f 	bl	800ac0c <__malloc_lock>
 800a7ae:	4d32      	ldr	r5, [pc, #200]	; (800a878 <_malloc_r+0xe8>)
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	001c      	movs	r4, r3
 800a7b4:	2c00      	cmp	r4, #0
 800a7b6:	d12e      	bne.n	800a816 <_malloc_r+0x86>
 800a7b8:	0039      	movs	r1, r7
 800a7ba:	0030      	movs	r0, r6
 800a7bc:	f7ff ffc6 	bl	800a74c <sbrk_aligned>
 800a7c0:	0004      	movs	r4, r0
 800a7c2:	1c43      	adds	r3, r0, #1
 800a7c4:	d11e      	bne.n	800a804 <_malloc_r+0x74>
 800a7c6:	682c      	ldr	r4, [r5, #0]
 800a7c8:	0025      	movs	r5, r4
 800a7ca:	2d00      	cmp	r5, #0
 800a7cc:	d14a      	bne.n	800a864 <_malloc_r+0xd4>
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	0029      	movs	r1, r5
 800a7d2:	18e3      	adds	r3, r4, r3
 800a7d4:	0030      	movs	r0, r6
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	f000 f9b2 	bl	800ab40 <_sbrk_r>
 800a7dc:	9b01      	ldr	r3, [sp, #4]
 800a7de:	4283      	cmp	r3, r0
 800a7e0:	d143      	bne.n	800a86a <_malloc_r+0xda>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	3703      	adds	r7, #3
 800a7e6:	1aff      	subs	r7, r7, r3
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	439f      	bics	r7, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	2f0c      	cmp	r7, #12
 800a7f0:	d200      	bcs.n	800a7f4 <_malloc_r+0x64>
 800a7f2:	270c      	movs	r7, #12
 800a7f4:	0039      	movs	r1, r7
 800a7f6:	0030      	movs	r0, r6
 800a7f8:	f7ff ffa8 	bl	800a74c <sbrk_aligned>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d034      	beq.n	800a86a <_malloc_r+0xda>
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	19df      	adds	r7, r3, r7
 800a804:	6027      	str	r7, [r4, #0]
 800a806:	e013      	b.n	800a830 <_malloc_r+0xa0>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dacb      	bge.n	800a7a4 <_malloc_r+0x14>
 800a80c:	230c      	movs	r3, #12
 800a80e:	2500      	movs	r5, #0
 800a810:	6033      	str	r3, [r6, #0]
 800a812:	0028      	movs	r0, r5
 800a814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	1bd1      	subs	r1, r2, r7
 800a81a:	d420      	bmi.n	800a85e <_malloc_r+0xce>
 800a81c:	290b      	cmp	r1, #11
 800a81e:	d917      	bls.n	800a850 <_malloc_r+0xc0>
 800a820:	19e2      	adds	r2, r4, r7
 800a822:	6027      	str	r7, [r4, #0]
 800a824:	42a3      	cmp	r3, r4
 800a826:	d111      	bne.n	800a84c <_malloc_r+0xbc>
 800a828:	602a      	str	r2, [r5, #0]
 800a82a:	6863      	ldr	r3, [r4, #4]
 800a82c:	6011      	str	r1, [r2, #0]
 800a82e:	6053      	str	r3, [r2, #4]
 800a830:	0030      	movs	r0, r6
 800a832:	0025      	movs	r5, r4
 800a834:	f000 f9f2 	bl	800ac1c <__malloc_unlock>
 800a838:	2207      	movs	r2, #7
 800a83a:	350b      	adds	r5, #11
 800a83c:	1d23      	adds	r3, r4, #4
 800a83e:	4395      	bics	r5, r2
 800a840:	1aea      	subs	r2, r5, r3
 800a842:	429d      	cmp	r5, r3
 800a844:	d0e5      	beq.n	800a812 <_malloc_r+0x82>
 800a846:	1b5b      	subs	r3, r3, r5
 800a848:	50a3      	str	r3, [r4, r2]
 800a84a:	e7e2      	b.n	800a812 <_malloc_r+0x82>
 800a84c:	605a      	str	r2, [r3, #4]
 800a84e:	e7ec      	b.n	800a82a <_malloc_r+0x9a>
 800a850:	6862      	ldr	r2, [r4, #4]
 800a852:	42a3      	cmp	r3, r4
 800a854:	d101      	bne.n	800a85a <_malloc_r+0xca>
 800a856:	602a      	str	r2, [r5, #0]
 800a858:	e7ea      	b.n	800a830 <_malloc_r+0xa0>
 800a85a:	605a      	str	r2, [r3, #4]
 800a85c:	e7e8      	b.n	800a830 <_malloc_r+0xa0>
 800a85e:	0023      	movs	r3, r4
 800a860:	6864      	ldr	r4, [r4, #4]
 800a862:	e7a7      	b.n	800a7b4 <_malloc_r+0x24>
 800a864:	002c      	movs	r4, r5
 800a866:	686d      	ldr	r5, [r5, #4]
 800a868:	e7af      	b.n	800a7ca <_malloc_r+0x3a>
 800a86a:	230c      	movs	r3, #12
 800a86c:	0030      	movs	r0, r6
 800a86e:	6033      	str	r3, [r6, #0]
 800a870:	f000 f9d4 	bl	800ac1c <__malloc_unlock>
 800a874:	e7cd      	b.n	800a812 <_malloc_r+0x82>
 800a876:	46c0      	nop			; (mov r8, r8)
 800a878:	200004cc 	.word	0x200004cc

0800a87c <__ssputs_r>:
 800a87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a87e:	688e      	ldr	r6, [r1, #8]
 800a880:	b085      	sub	sp, #20
 800a882:	0007      	movs	r7, r0
 800a884:	000c      	movs	r4, r1
 800a886:	9203      	str	r2, [sp, #12]
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	429e      	cmp	r6, r3
 800a88c:	d83c      	bhi.n	800a908 <__ssputs_r+0x8c>
 800a88e:	2390      	movs	r3, #144	; 0x90
 800a890:	898a      	ldrh	r2, [r1, #12]
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	421a      	tst	r2, r3
 800a896:	d034      	beq.n	800a902 <__ssputs_r+0x86>
 800a898:	6909      	ldr	r1, [r1, #16]
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	6960      	ldr	r0, [r4, #20]
 800a89e:	1a5b      	subs	r3, r3, r1
 800a8a0:	9302      	str	r3, [sp, #8]
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	4343      	muls	r3, r0
 800a8a6:	0fdd      	lsrs	r5, r3, #31
 800a8a8:	18ed      	adds	r5, r5, r3
 800a8aa:	9b01      	ldr	r3, [sp, #4]
 800a8ac:	9802      	ldr	r0, [sp, #8]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	181b      	adds	r3, r3, r0
 800a8b2:	106d      	asrs	r5, r5, #1
 800a8b4:	42ab      	cmp	r3, r5
 800a8b6:	d900      	bls.n	800a8ba <__ssputs_r+0x3e>
 800a8b8:	001d      	movs	r5, r3
 800a8ba:	0553      	lsls	r3, r2, #21
 800a8bc:	d532      	bpl.n	800a924 <__ssputs_r+0xa8>
 800a8be:	0029      	movs	r1, r5
 800a8c0:	0038      	movs	r0, r7
 800a8c2:	f7ff ff65 	bl	800a790 <_malloc_r>
 800a8c6:	1e06      	subs	r6, r0, #0
 800a8c8:	d109      	bne.n	800a8de <__ssputs_r+0x62>
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	603b      	str	r3, [r7, #0]
 800a8ce:	2340      	movs	r3, #64	; 0x40
 800a8d0:	2001      	movs	r0, #1
 800a8d2:	89a2      	ldrh	r2, [r4, #12]
 800a8d4:	4240      	negs	r0, r0
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	b005      	add	sp, #20
 800a8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8de:	9a02      	ldr	r2, [sp, #8]
 800a8e0:	6921      	ldr	r1, [r4, #16]
 800a8e2:	f7fd ffc1 	bl	8008868 <memcpy>
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	4a14      	ldr	r2, [pc, #80]	; (800a93c <__ssputs_r+0xc0>)
 800a8ea:	401a      	ands	r2, r3
 800a8ec:	2380      	movs	r3, #128	; 0x80
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	9b02      	ldr	r3, [sp, #8]
 800a8f4:	6126      	str	r6, [r4, #16]
 800a8f6:	18f6      	adds	r6, r6, r3
 800a8f8:	6026      	str	r6, [r4, #0]
 800a8fa:	6165      	str	r5, [r4, #20]
 800a8fc:	9e01      	ldr	r6, [sp, #4]
 800a8fe:	1aed      	subs	r5, r5, r3
 800a900:	60a5      	str	r5, [r4, #8]
 800a902:	9b01      	ldr	r3, [sp, #4]
 800a904:	429e      	cmp	r6, r3
 800a906:	d900      	bls.n	800a90a <__ssputs_r+0x8e>
 800a908:	9e01      	ldr	r6, [sp, #4]
 800a90a:	0032      	movs	r2, r6
 800a90c:	9903      	ldr	r1, [sp, #12]
 800a90e:	6820      	ldr	r0, [r4, #0]
 800a910:	f000 f968 	bl	800abe4 <memmove>
 800a914:	68a3      	ldr	r3, [r4, #8]
 800a916:	2000      	movs	r0, #0
 800a918:	1b9b      	subs	r3, r3, r6
 800a91a:	60a3      	str	r3, [r4, #8]
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	199e      	adds	r6, r3, r6
 800a920:	6026      	str	r6, [r4, #0]
 800a922:	e7da      	b.n	800a8da <__ssputs_r+0x5e>
 800a924:	002a      	movs	r2, r5
 800a926:	0038      	movs	r0, r7
 800a928:	f000 f980 	bl	800ac2c <_realloc_r>
 800a92c:	1e06      	subs	r6, r0, #0
 800a92e:	d1e0      	bne.n	800a8f2 <__ssputs_r+0x76>
 800a930:	0038      	movs	r0, r7
 800a932:	6921      	ldr	r1, [r4, #16]
 800a934:	f7ff fec0 	bl	800a6b8 <_free_r>
 800a938:	e7c7      	b.n	800a8ca <__ssputs_r+0x4e>
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	fffffb7f 	.word	0xfffffb7f

0800a940 <_svfiprintf_r>:
 800a940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a942:	b0a1      	sub	sp, #132	; 0x84
 800a944:	9003      	str	r0, [sp, #12]
 800a946:	001d      	movs	r5, r3
 800a948:	898b      	ldrh	r3, [r1, #12]
 800a94a:	000f      	movs	r7, r1
 800a94c:	0016      	movs	r6, r2
 800a94e:	061b      	lsls	r3, r3, #24
 800a950:	d511      	bpl.n	800a976 <_svfiprintf_r+0x36>
 800a952:	690b      	ldr	r3, [r1, #16]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10e      	bne.n	800a976 <_svfiprintf_r+0x36>
 800a958:	2140      	movs	r1, #64	; 0x40
 800a95a:	f7ff ff19 	bl	800a790 <_malloc_r>
 800a95e:	6038      	str	r0, [r7, #0]
 800a960:	6138      	str	r0, [r7, #16]
 800a962:	2800      	cmp	r0, #0
 800a964:	d105      	bne.n	800a972 <_svfiprintf_r+0x32>
 800a966:	230c      	movs	r3, #12
 800a968:	9a03      	ldr	r2, [sp, #12]
 800a96a:	3801      	subs	r0, #1
 800a96c:	6013      	str	r3, [r2, #0]
 800a96e:	b021      	add	sp, #132	; 0x84
 800a970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a972:	2340      	movs	r3, #64	; 0x40
 800a974:	617b      	str	r3, [r7, #20]
 800a976:	2300      	movs	r3, #0
 800a978:	ac08      	add	r4, sp, #32
 800a97a:	6163      	str	r3, [r4, #20]
 800a97c:	3320      	adds	r3, #32
 800a97e:	7663      	strb	r3, [r4, #25]
 800a980:	3310      	adds	r3, #16
 800a982:	76a3      	strb	r3, [r4, #26]
 800a984:	9507      	str	r5, [sp, #28]
 800a986:	0035      	movs	r5, r6
 800a988:	782b      	ldrb	r3, [r5, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <_svfiprintf_r+0x52>
 800a98e:	2b25      	cmp	r3, #37	; 0x25
 800a990:	d147      	bne.n	800aa22 <_svfiprintf_r+0xe2>
 800a992:	1bab      	subs	r3, r5, r6
 800a994:	9305      	str	r3, [sp, #20]
 800a996:	42b5      	cmp	r5, r6
 800a998:	d00c      	beq.n	800a9b4 <_svfiprintf_r+0x74>
 800a99a:	0032      	movs	r2, r6
 800a99c:	0039      	movs	r1, r7
 800a99e:	9803      	ldr	r0, [sp, #12]
 800a9a0:	f7ff ff6c 	bl	800a87c <__ssputs_r>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d100      	bne.n	800a9aa <_svfiprintf_r+0x6a>
 800a9a8:	e0ae      	b.n	800ab08 <_svfiprintf_r+0x1c8>
 800a9aa:	6962      	ldr	r2, [r4, #20]
 800a9ac:	9b05      	ldr	r3, [sp, #20]
 800a9ae:	4694      	mov	ip, r2
 800a9b0:	4463      	add	r3, ip
 800a9b2:	6163      	str	r3, [r4, #20]
 800a9b4:	782b      	ldrb	r3, [r5, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d100      	bne.n	800a9bc <_svfiprintf_r+0x7c>
 800a9ba:	e0a5      	b.n	800ab08 <_svfiprintf_r+0x1c8>
 800a9bc:	2201      	movs	r2, #1
 800a9be:	2300      	movs	r3, #0
 800a9c0:	4252      	negs	r2, r2
 800a9c2:	6062      	str	r2, [r4, #4]
 800a9c4:	a904      	add	r1, sp, #16
 800a9c6:	3254      	adds	r2, #84	; 0x54
 800a9c8:	1852      	adds	r2, r2, r1
 800a9ca:	1c6e      	adds	r6, r5, #1
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	60e3      	str	r3, [r4, #12]
 800a9d0:	60a3      	str	r3, [r4, #8]
 800a9d2:	7013      	strb	r3, [r2, #0]
 800a9d4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a9d6:	2205      	movs	r2, #5
 800a9d8:	7831      	ldrb	r1, [r6, #0]
 800a9da:	4854      	ldr	r0, [pc, #336]	; (800ab2c <_svfiprintf_r+0x1ec>)
 800a9dc:	f7ff fa98 	bl	8009f10 <memchr>
 800a9e0:	1c75      	adds	r5, r6, #1
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d11f      	bne.n	800aa26 <_svfiprintf_r+0xe6>
 800a9e6:	6822      	ldr	r2, [r4, #0]
 800a9e8:	06d3      	lsls	r3, r2, #27
 800a9ea:	d504      	bpl.n	800a9f6 <_svfiprintf_r+0xb6>
 800a9ec:	2353      	movs	r3, #83	; 0x53
 800a9ee:	a904      	add	r1, sp, #16
 800a9f0:	185b      	adds	r3, r3, r1
 800a9f2:	2120      	movs	r1, #32
 800a9f4:	7019      	strb	r1, [r3, #0]
 800a9f6:	0713      	lsls	r3, r2, #28
 800a9f8:	d504      	bpl.n	800aa04 <_svfiprintf_r+0xc4>
 800a9fa:	2353      	movs	r3, #83	; 0x53
 800a9fc:	a904      	add	r1, sp, #16
 800a9fe:	185b      	adds	r3, r3, r1
 800aa00:	212b      	movs	r1, #43	; 0x2b
 800aa02:	7019      	strb	r1, [r3, #0]
 800aa04:	7833      	ldrb	r3, [r6, #0]
 800aa06:	2b2a      	cmp	r3, #42	; 0x2a
 800aa08:	d016      	beq.n	800aa38 <_svfiprintf_r+0xf8>
 800aa0a:	0035      	movs	r5, r6
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	200a      	movs	r0, #10
 800aa10:	68e3      	ldr	r3, [r4, #12]
 800aa12:	782a      	ldrb	r2, [r5, #0]
 800aa14:	1c6e      	adds	r6, r5, #1
 800aa16:	3a30      	subs	r2, #48	; 0x30
 800aa18:	2a09      	cmp	r2, #9
 800aa1a:	d94e      	bls.n	800aaba <_svfiprintf_r+0x17a>
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	d111      	bne.n	800aa44 <_svfiprintf_r+0x104>
 800aa20:	e017      	b.n	800aa52 <_svfiprintf_r+0x112>
 800aa22:	3501      	adds	r5, #1
 800aa24:	e7b0      	b.n	800a988 <_svfiprintf_r+0x48>
 800aa26:	4b41      	ldr	r3, [pc, #260]	; (800ab2c <_svfiprintf_r+0x1ec>)
 800aa28:	6822      	ldr	r2, [r4, #0]
 800aa2a:	1ac0      	subs	r0, r0, r3
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	4083      	lsls	r3, r0
 800aa30:	4313      	orrs	r3, r2
 800aa32:	002e      	movs	r6, r5
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	e7ce      	b.n	800a9d6 <_svfiprintf_r+0x96>
 800aa38:	9b07      	ldr	r3, [sp, #28]
 800aa3a:	1d19      	adds	r1, r3, #4
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	9107      	str	r1, [sp, #28]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	db01      	blt.n	800aa48 <_svfiprintf_r+0x108>
 800aa44:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa46:	e004      	b.n	800aa52 <_svfiprintf_r+0x112>
 800aa48:	425b      	negs	r3, r3
 800aa4a:	60e3      	str	r3, [r4, #12]
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	782b      	ldrb	r3, [r5, #0]
 800aa54:	2b2e      	cmp	r3, #46	; 0x2e
 800aa56:	d10a      	bne.n	800aa6e <_svfiprintf_r+0x12e>
 800aa58:	786b      	ldrb	r3, [r5, #1]
 800aa5a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa5c:	d135      	bne.n	800aaca <_svfiprintf_r+0x18a>
 800aa5e:	9b07      	ldr	r3, [sp, #28]
 800aa60:	3502      	adds	r5, #2
 800aa62:	1d1a      	adds	r2, r3, #4
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	9207      	str	r2, [sp, #28]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	db2b      	blt.n	800aac4 <_svfiprintf_r+0x184>
 800aa6c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6e:	4e30      	ldr	r6, [pc, #192]	; (800ab30 <_svfiprintf_r+0x1f0>)
 800aa70:	2203      	movs	r2, #3
 800aa72:	0030      	movs	r0, r6
 800aa74:	7829      	ldrb	r1, [r5, #0]
 800aa76:	f7ff fa4b 	bl	8009f10 <memchr>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d006      	beq.n	800aa8c <_svfiprintf_r+0x14c>
 800aa7e:	2340      	movs	r3, #64	; 0x40
 800aa80:	1b80      	subs	r0, r0, r6
 800aa82:	4083      	lsls	r3, r0
 800aa84:	6822      	ldr	r2, [r4, #0]
 800aa86:	3501      	adds	r5, #1
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	7829      	ldrb	r1, [r5, #0]
 800aa8e:	2206      	movs	r2, #6
 800aa90:	4828      	ldr	r0, [pc, #160]	; (800ab34 <_svfiprintf_r+0x1f4>)
 800aa92:	1c6e      	adds	r6, r5, #1
 800aa94:	7621      	strb	r1, [r4, #24]
 800aa96:	f7ff fa3b 	bl	8009f10 <memchr>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d03c      	beq.n	800ab18 <_svfiprintf_r+0x1d8>
 800aa9e:	4b26      	ldr	r3, [pc, #152]	; (800ab38 <_svfiprintf_r+0x1f8>)
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d125      	bne.n	800aaf0 <_svfiprintf_r+0x1b0>
 800aaa4:	2207      	movs	r2, #7
 800aaa6:	9b07      	ldr	r3, [sp, #28]
 800aaa8:	3307      	adds	r3, #7
 800aaaa:	4393      	bics	r3, r2
 800aaac:	3308      	adds	r3, #8
 800aaae:	9307      	str	r3, [sp, #28]
 800aab0:	6963      	ldr	r3, [r4, #20]
 800aab2:	9a04      	ldr	r2, [sp, #16]
 800aab4:	189b      	adds	r3, r3, r2
 800aab6:	6163      	str	r3, [r4, #20]
 800aab8:	e765      	b.n	800a986 <_svfiprintf_r+0x46>
 800aaba:	4343      	muls	r3, r0
 800aabc:	0035      	movs	r5, r6
 800aabe:	2101      	movs	r1, #1
 800aac0:	189b      	adds	r3, r3, r2
 800aac2:	e7a6      	b.n	800aa12 <_svfiprintf_r+0xd2>
 800aac4:	2301      	movs	r3, #1
 800aac6:	425b      	negs	r3, r3
 800aac8:	e7d0      	b.n	800aa6c <_svfiprintf_r+0x12c>
 800aaca:	2300      	movs	r3, #0
 800aacc:	200a      	movs	r0, #10
 800aace:	001a      	movs	r2, r3
 800aad0:	3501      	adds	r5, #1
 800aad2:	6063      	str	r3, [r4, #4]
 800aad4:	7829      	ldrb	r1, [r5, #0]
 800aad6:	1c6e      	adds	r6, r5, #1
 800aad8:	3930      	subs	r1, #48	; 0x30
 800aada:	2909      	cmp	r1, #9
 800aadc:	d903      	bls.n	800aae6 <_svfiprintf_r+0x1a6>
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d0c5      	beq.n	800aa6e <_svfiprintf_r+0x12e>
 800aae2:	9209      	str	r2, [sp, #36]	; 0x24
 800aae4:	e7c3      	b.n	800aa6e <_svfiprintf_r+0x12e>
 800aae6:	4342      	muls	r2, r0
 800aae8:	0035      	movs	r5, r6
 800aaea:	2301      	movs	r3, #1
 800aaec:	1852      	adds	r2, r2, r1
 800aaee:	e7f1      	b.n	800aad4 <_svfiprintf_r+0x194>
 800aaf0:	ab07      	add	r3, sp, #28
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	003a      	movs	r2, r7
 800aaf6:	0021      	movs	r1, r4
 800aaf8:	4b10      	ldr	r3, [pc, #64]	; (800ab3c <_svfiprintf_r+0x1fc>)
 800aafa:	9803      	ldr	r0, [sp, #12]
 800aafc:	f7fd ff70 	bl	80089e0 <_printf_float>
 800ab00:	9004      	str	r0, [sp, #16]
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	3301      	adds	r3, #1
 800ab06:	d1d3      	bne.n	800aab0 <_svfiprintf_r+0x170>
 800ab08:	89bb      	ldrh	r3, [r7, #12]
 800ab0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ab0c:	065b      	lsls	r3, r3, #25
 800ab0e:	d400      	bmi.n	800ab12 <_svfiprintf_r+0x1d2>
 800ab10:	e72d      	b.n	800a96e <_svfiprintf_r+0x2e>
 800ab12:	2001      	movs	r0, #1
 800ab14:	4240      	negs	r0, r0
 800ab16:	e72a      	b.n	800a96e <_svfiprintf_r+0x2e>
 800ab18:	ab07      	add	r3, sp, #28
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	003a      	movs	r2, r7
 800ab1e:	0021      	movs	r1, r4
 800ab20:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <_svfiprintf_r+0x1fc>)
 800ab22:	9803      	ldr	r0, [sp, #12]
 800ab24:	f7fe fa0e 	bl	8008f44 <_printf_i>
 800ab28:	e7ea      	b.n	800ab00 <_svfiprintf_r+0x1c0>
 800ab2a:	46c0      	nop			; (mov r8, r8)
 800ab2c:	0800bc14 	.word	0x0800bc14
 800ab30:	0800bc1a 	.word	0x0800bc1a
 800ab34:	0800bc1e 	.word	0x0800bc1e
 800ab38:	080089e1 	.word	0x080089e1
 800ab3c:	0800a87d 	.word	0x0800a87d

0800ab40 <_sbrk_r>:
 800ab40:	2300      	movs	r3, #0
 800ab42:	b570      	push	{r4, r5, r6, lr}
 800ab44:	4d06      	ldr	r5, [pc, #24]	; (800ab60 <_sbrk_r+0x20>)
 800ab46:	0004      	movs	r4, r0
 800ab48:	0008      	movs	r0, r1
 800ab4a:	602b      	str	r3, [r5, #0]
 800ab4c:	f7f9 fcdc 	bl	8004508 <_sbrk>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d103      	bne.n	800ab5c <_sbrk_r+0x1c>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d000      	beq.n	800ab5c <_sbrk_r+0x1c>
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	bd70      	pop	{r4, r5, r6, pc}
 800ab5e:	46c0      	nop			; (mov r8, r8)
 800ab60:	200004d4 	.word	0x200004d4

0800ab64 <__assert_func>:
 800ab64:	b530      	push	{r4, r5, lr}
 800ab66:	0014      	movs	r4, r2
 800ab68:	001a      	movs	r2, r3
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <__assert_func+0x2c>)
 800ab6c:	0005      	movs	r5, r0
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	b085      	sub	sp, #20
 800ab72:	68d8      	ldr	r0, [r3, #12]
 800ab74:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <__assert_func+0x30>)
 800ab76:	2c00      	cmp	r4, #0
 800ab78:	d101      	bne.n	800ab7e <__assert_func+0x1a>
 800ab7a:	4b07      	ldr	r3, [pc, #28]	; (800ab98 <__assert_func+0x34>)
 800ab7c:	001c      	movs	r4, r3
 800ab7e:	9301      	str	r3, [sp, #4]
 800ab80:	9100      	str	r1, [sp, #0]
 800ab82:	002b      	movs	r3, r5
 800ab84:	4905      	ldr	r1, [pc, #20]	; (800ab9c <__assert_func+0x38>)
 800ab86:	9402      	str	r4, [sp, #8]
 800ab88:	f000 f80a 	bl	800aba0 <fiprintf>
 800ab8c:	f000 faba 	bl	800b104 <abort>
 800ab90:	20000010 	.word	0x20000010
 800ab94:	0800bc25 	.word	0x0800bc25
 800ab98:	0800bc60 	.word	0x0800bc60
 800ab9c:	0800bc32 	.word	0x0800bc32

0800aba0 <fiprintf>:
 800aba0:	b40e      	push	{r1, r2, r3}
 800aba2:	b503      	push	{r0, r1, lr}
 800aba4:	0001      	movs	r1, r0
 800aba6:	ab03      	add	r3, sp, #12
 800aba8:	4804      	ldr	r0, [pc, #16]	; (800abbc <fiprintf+0x1c>)
 800abaa:	cb04      	ldmia	r3!, {r2}
 800abac:	6800      	ldr	r0, [r0, #0]
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	f000 f892 	bl	800acd8 <_vfiprintf_r>
 800abb4:	b002      	add	sp, #8
 800abb6:	bc08      	pop	{r3}
 800abb8:	b003      	add	sp, #12
 800abba:	4718      	bx	r3
 800abbc:	20000010 	.word	0x20000010

0800abc0 <__ascii_mbtowc>:
 800abc0:	b082      	sub	sp, #8
 800abc2:	2900      	cmp	r1, #0
 800abc4:	d100      	bne.n	800abc8 <__ascii_mbtowc+0x8>
 800abc6:	a901      	add	r1, sp, #4
 800abc8:	1e10      	subs	r0, r2, #0
 800abca:	d006      	beq.n	800abda <__ascii_mbtowc+0x1a>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d006      	beq.n	800abde <__ascii_mbtowc+0x1e>
 800abd0:	7813      	ldrb	r3, [r2, #0]
 800abd2:	600b      	str	r3, [r1, #0]
 800abd4:	7810      	ldrb	r0, [r2, #0]
 800abd6:	1e43      	subs	r3, r0, #1
 800abd8:	4198      	sbcs	r0, r3
 800abda:	b002      	add	sp, #8
 800abdc:	4770      	bx	lr
 800abde:	2002      	movs	r0, #2
 800abe0:	4240      	negs	r0, r0
 800abe2:	e7fa      	b.n	800abda <__ascii_mbtowc+0x1a>

0800abe4 <memmove>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	4288      	cmp	r0, r1
 800abe8:	d902      	bls.n	800abf0 <memmove+0xc>
 800abea:	188b      	adds	r3, r1, r2
 800abec:	4298      	cmp	r0, r3
 800abee:	d303      	bcc.n	800abf8 <memmove+0x14>
 800abf0:	2300      	movs	r3, #0
 800abf2:	e007      	b.n	800ac04 <memmove+0x20>
 800abf4:	5c8b      	ldrb	r3, [r1, r2]
 800abf6:	5483      	strb	r3, [r0, r2]
 800abf8:	3a01      	subs	r2, #1
 800abfa:	d2fb      	bcs.n	800abf4 <memmove+0x10>
 800abfc:	bd10      	pop	{r4, pc}
 800abfe:	5ccc      	ldrb	r4, [r1, r3]
 800ac00:	54c4      	strb	r4, [r0, r3]
 800ac02:	3301      	adds	r3, #1
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d1fa      	bne.n	800abfe <memmove+0x1a>
 800ac08:	e7f8      	b.n	800abfc <memmove+0x18>
	...

0800ac0c <__malloc_lock>:
 800ac0c:	b510      	push	{r4, lr}
 800ac0e:	4802      	ldr	r0, [pc, #8]	; (800ac18 <__malloc_lock+0xc>)
 800ac10:	f000 fc4f 	bl	800b4b2 <__retarget_lock_acquire_recursive>
 800ac14:	bd10      	pop	{r4, pc}
 800ac16:	46c0      	nop			; (mov r8, r8)
 800ac18:	200004d8 	.word	0x200004d8

0800ac1c <__malloc_unlock>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	4802      	ldr	r0, [pc, #8]	; (800ac28 <__malloc_unlock+0xc>)
 800ac20:	f000 fc48 	bl	800b4b4 <__retarget_lock_release_recursive>
 800ac24:	bd10      	pop	{r4, pc}
 800ac26:	46c0      	nop			; (mov r8, r8)
 800ac28:	200004d8 	.word	0x200004d8

0800ac2c <_realloc_r>:
 800ac2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac2e:	0007      	movs	r7, r0
 800ac30:	000e      	movs	r6, r1
 800ac32:	0014      	movs	r4, r2
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d105      	bne.n	800ac44 <_realloc_r+0x18>
 800ac38:	0011      	movs	r1, r2
 800ac3a:	f7ff fda9 	bl	800a790 <_malloc_r>
 800ac3e:	0005      	movs	r5, r0
 800ac40:	0028      	movs	r0, r5
 800ac42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	d103      	bne.n	800ac50 <_realloc_r+0x24>
 800ac48:	f7ff fd36 	bl	800a6b8 <_free_r>
 800ac4c:	0025      	movs	r5, r4
 800ac4e:	e7f7      	b.n	800ac40 <_realloc_r+0x14>
 800ac50:	f000 fc9e 	bl	800b590 <_malloc_usable_size_r>
 800ac54:	9001      	str	r0, [sp, #4]
 800ac56:	4284      	cmp	r4, r0
 800ac58:	d803      	bhi.n	800ac62 <_realloc_r+0x36>
 800ac5a:	0035      	movs	r5, r6
 800ac5c:	0843      	lsrs	r3, r0, #1
 800ac5e:	42a3      	cmp	r3, r4
 800ac60:	d3ee      	bcc.n	800ac40 <_realloc_r+0x14>
 800ac62:	0021      	movs	r1, r4
 800ac64:	0038      	movs	r0, r7
 800ac66:	f7ff fd93 	bl	800a790 <_malloc_r>
 800ac6a:	1e05      	subs	r5, r0, #0
 800ac6c:	d0e8      	beq.n	800ac40 <_realloc_r+0x14>
 800ac6e:	9b01      	ldr	r3, [sp, #4]
 800ac70:	0022      	movs	r2, r4
 800ac72:	429c      	cmp	r4, r3
 800ac74:	d900      	bls.n	800ac78 <_realloc_r+0x4c>
 800ac76:	001a      	movs	r2, r3
 800ac78:	0031      	movs	r1, r6
 800ac7a:	0028      	movs	r0, r5
 800ac7c:	f7fd fdf4 	bl	8008868 <memcpy>
 800ac80:	0031      	movs	r1, r6
 800ac82:	0038      	movs	r0, r7
 800ac84:	f7ff fd18 	bl	800a6b8 <_free_r>
 800ac88:	e7da      	b.n	800ac40 <_realloc_r+0x14>

0800ac8a <__sfputc_r>:
 800ac8a:	6893      	ldr	r3, [r2, #8]
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	6093      	str	r3, [r2, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	da04      	bge.n	800aca0 <__sfputc_r+0x16>
 800ac96:	6994      	ldr	r4, [r2, #24]
 800ac98:	42a3      	cmp	r3, r4
 800ac9a:	db07      	blt.n	800acac <__sfputc_r+0x22>
 800ac9c:	290a      	cmp	r1, #10
 800ac9e:	d005      	beq.n	800acac <__sfputc_r+0x22>
 800aca0:	6813      	ldr	r3, [r2, #0]
 800aca2:	1c58      	adds	r0, r3, #1
 800aca4:	6010      	str	r0, [r2, #0]
 800aca6:	7019      	strb	r1, [r3, #0]
 800aca8:	0008      	movs	r0, r1
 800acaa:	bd10      	pop	{r4, pc}
 800acac:	f000 f94e 	bl	800af4c <__swbuf_r>
 800acb0:	0001      	movs	r1, r0
 800acb2:	e7f9      	b.n	800aca8 <__sfputc_r+0x1e>

0800acb4 <__sfputs_r>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	0006      	movs	r6, r0
 800acb8:	000f      	movs	r7, r1
 800acba:	0014      	movs	r4, r2
 800acbc:	18d5      	adds	r5, r2, r3
 800acbe:	42ac      	cmp	r4, r5
 800acc0:	d101      	bne.n	800acc6 <__sfputs_r+0x12>
 800acc2:	2000      	movs	r0, #0
 800acc4:	e007      	b.n	800acd6 <__sfputs_r+0x22>
 800acc6:	7821      	ldrb	r1, [r4, #0]
 800acc8:	003a      	movs	r2, r7
 800acca:	0030      	movs	r0, r6
 800accc:	f7ff ffdd 	bl	800ac8a <__sfputc_r>
 800acd0:	3401      	adds	r4, #1
 800acd2:	1c43      	adds	r3, r0, #1
 800acd4:	d1f3      	bne.n	800acbe <__sfputs_r+0xa>
 800acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800acd8 <_vfiprintf_r>:
 800acd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acda:	b0a1      	sub	sp, #132	; 0x84
 800acdc:	0006      	movs	r6, r0
 800acde:	000c      	movs	r4, r1
 800ace0:	001f      	movs	r7, r3
 800ace2:	9203      	str	r2, [sp, #12]
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d004      	beq.n	800acf2 <_vfiprintf_r+0x1a>
 800ace8:	6983      	ldr	r3, [r0, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d101      	bne.n	800acf2 <_vfiprintf_r+0x1a>
 800acee:	f000 fb3f 	bl	800b370 <__sinit>
 800acf2:	4b8e      	ldr	r3, [pc, #568]	; (800af2c <_vfiprintf_r+0x254>)
 800acf4:	429c      	cmp	r4, r3
 800acf6:	d11c      	bne.n	800ad32 <_vfiprintf_r+0x5a>
 800acf8:	6874      	ldr	r4, [r6, #4]
 800acfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acfc:	07db      	lsls	r3, r3, #31
 800acfe:	d405      	bmi.n	800ad0c <_vfiprintf_r+0x34>
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	059b      	lsls	r3, r3, #22
 800ad04:	d402      	bmi.n	800ad0c <_vfiprintf_r+0x34>
 800ad06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad08:	f000 fbd3 	bl	800b4b2 <__retarget_lock_acquire_recursive>
 800ad0c:	89a3      	ldrh	r3, [r4, #12]
 800ad0e:	071b      	lsls	r3, r3, #28
 800ad10:	d502      	bpl.n	800ad18 <_vfiprintf_r+0x40>
 800ad12:	6923      	ldr	r3, [r4, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d11d      	bne.n	800ad54 <_vfiprintf_r+0x7c>
 800ad18:	0021      	movs	r1, r4
 800ad1a:	0030      	movs	r0, r6
 800ad1c:	f000 f97a 	bl	800b014 <__swsetup_r>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d017      	beq.n	800ad54 <_vfiprintf_r+0x7c>
 800ad24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad26:	07db      	lsls	r3, r3, #31
 800ad28:	d50d      	bpl.n	800ad46 <_vfiprintf_r+0x6e>
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	4240      	negs	r0, r0
 800ad2e:	b021      	add	sp, #132	; 0x84
 800ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad32:	4b7f      	ldr	r3, [pc, #508]	; (800af30 <_vfiprintf_r+0x258>)
 800ad34:	429c      	cmp	r4, r3
 800ad36:	d101      	bne.n	800ad3c <_vfiprintf_r+0x64>
 800ad38:	68b4      	ldr	r4, [r6, #8]
 800ad3a:	e7de      	b.n	800acfa <_vfiprintf_r+0x22>
 800ad3c:	4b7d      	ldr	r3, [pc, #500]	; (800af34 <_vfiprintf_r+0x25c>)
 800ad3e:	429c      	cmp	r4, r3
 800ad40:	d1db      	bne.n	800acfa <_vfiprintf_r+0x22>
 800ad42:	68f4      	ldr	r4, [r6, #12]
 800ad44:	e7d9      	b.n	800acfa <_vfiprintf_r+0x22>
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	059b      	lsls	r3, r3, #22
 800ad4a:	d4ee      	bmi.n	800ad2a <_vfiprintf_r+0x52>
 800ad4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad4e:	f000 fbb1 	bl	800b4b4 <__retarget_lock_release_recursive>
 800ad52:	e7ea      	b.n	800ad2a <_vfiprintf_r+0x52>
 800ad54:	2300      	movs	r3, #0
 800ad56:	ad08      	add	r5, sp, #32
 800ad58:	616b      	str	r3, [r5, #20]
 800ad5a:	3320      	adds	r3, #32
 800ad5c:	766b      	strb	r3, [r5, #25]
 800ad5e:	3310      	adds	r3, #16
 800ad60:	76ab      	strb	r3, [r5, #26]
 800ad62:	9707      	str	r7, [sp, #28]
 800ad64:	9f03      	ldr	r7, [sp, #12]
 800ad66:	783b      	ldrb	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <_vfiprintf_r+0x98>
 800ad6c:	2b25      	cmp	r3, #37	; 0x25
 800ad6e:	d14e      	bne.n	800ae0e <_vfiprintf_r+0x136>
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	1afb      	subs	r3, r7, r3
 800ad74:	9305      	str	r3, [sp, #20]
 800ad76:	9b03      	ldr	r3, [sp, #12]
 800ad78:	429f      	cmp	r7, r3
 800ad7a:	d00d      	beq.n	800ad98 <_vfiprintf_r+0xc0>
 800ad7c:	9b05      	ldr	r3, [sp, #20]
 800ad7e:	0021      	movs	r1, r4
 800ad80:	0030      	movs	r0, r6
 800ad82:	9a03      	ldr	r2, [sp, #12]
 800ad84:	f7ff ff96 	bl	800acb4 <__sfputs_r>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d100      	bne.n	800ad8e <_vfiprintf_r+0xb6>
 800ad8c:	e0b5      	b.n	800aefa <_vfiprintf_r+0x222>
 800ad8e:	696a      	ldr	r2, [r5, #20]
 800ad90:	9b05      	ldr	r3, [sp, #20]
 800ad92:	4694      	mov	ip, r2
 800ad94:	4463      	add	r3, ip
 800ad96:	616b      	str	r3, [r5, #20]
 800ad98:	783b      	ldrb	r3, [r7, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d100      	bne.n	800ada0 <_vfiprintf_r+0xc8>
 800ad9e:	e0ac      	b.n	800aefa <_vfiprintf_r+0x222>
 800ada0:	2201      	movs	r2, #1
 800ada2:	1c7b      	adds	r3, r7, #1
 800ada4:	9303      	str	r3, [sp, #12]
 800ada6:	2300      	movs	r3, #0
 800ada8:	4252      	negs	r2, r2
 800adaa:	606a      	str	r2, [r5, #4]
 800adac:	a904      	add	r1, sp, #16
 800adae:	3254      	adds	r2, #84	; 0x54
 800adb0:	1852      	adds	r2, r2, r1
 800adb2:	602b      	str	r3, [r5, #0]
 800adb4:	60eb      	str	r3, [r5, #12]
 800adb6:	60ab      	str	r3, [r5, #8]
 800adb8:	7013      	strb	r3, [r2, #0]
 800adba:	65ab      	str	r3, [r5, #88]	; 0x58
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	2205      	movs	r2, #5
 800adc0:	7819      	ldrb	r1, [r3, #0]
 800adc2:	485d      	ldr	r0, [pc, #372]	; (800af38 <_vfiprintf_r+0x260>)
 800adc4:	f7ff f8a4 	bl	8009f10 <memchr>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	1c5f      	adds	r7, r3, #1
 800adcc:	2800      	cmp	r0, #0
 800adce:	d120      	bne.n	800ae12 <_vfiprintf_r+0x13a>
 800add0:	682a      	ldr	r2, [r5, #0]
 800add2:	06d3      	lsls	r3, r2, #27
 800add4:	d504      	bpl.n	800ade0 <_vfiprintf_r+0x108>
 800add6:	2353      	movs	r3, #83	; 0x53
 800add8:	a904      	add	r1, sp, #16
 800adda:	185b      	adds	r3, r3, r1
 800addc:	2120      	movs	r1, #32
 800adde:	7019      	strb	r1, [r3, #0]
 800ade0:	0713      	lsls	r3, r2, #28
 800ade2:	d504      	bpl.n	800adee <_vfiprintf_r+0x116>
 800ade4:	2353      	movs	r3, #83	; 0x53
 800ade6:	a904      	add	r1, sp, #16
 800ade8:	185b      	adds	r3, r3, r1
 800adea:	212b      	movs	r1, #43	; 0x2b
 800adec:	7019      	strb	r1, [r3, #0]
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b2a      	cmp	r3, #42	; 0x2a
 800adf4:	d016      	beq.n	800ae24 <_vfiprintf_r+0x14c>
 800adf6:	2100      	movs	r1, #0
 800adf8:	68eb      	ldr	r3, [r5, #12]
 800adfa:	9f03      	ldr	r7, [sp, #12]
 800adfc:	783a      	ldrb	r2, [r7, #0]
 800adfe:	1c78      	adds	r0, r7, #1
 800ae00:	3a30      	subs	r2, #48	; 0x30
 800ae02:	4684      	mov	ip, r0
 800ae04:	2a09      	cmp	r2, #9
 800ae06:	d94f      	bls.n	800aea8 <_vfiprintf_r+0x1d0>
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	d111      	bne.n	800ae30 <_vfiprintf_r+0x158>
 800ae0c:	e017      	b.n	800ae3e <_vfiprintf_r+0x166>
 800ae0e:	3701      	adds	r7, #1
 800ae10:	e7a9      	b.n	800ad66 <_vfiprintf_r+0x8e>
 800ae12:	4b49      	ldr	r3, [pc, #292]	; (800af38 <_vfiprintf_r+0x260>)
 800ae14:	682a      	ldr	r2, [r5, #0]
 800ae16:	1ac0      	subs	r0, r0, r3
 800ae18:	2301      	movs	r3, #1
 800ae1a:	4083      	lsls	r3, r0
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	9703      	str	r7, [sp, #12]
 800ae22:	e7cb      	b.n	800adbc <_vfiprintf_r+0xe4>
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	1d19      	adds	r1, r3, #4
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	9107      	str	r1, [sp, #28]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	db01      	blt.n	800ae34 <_vfiprintf_r+0x15c>
 800ae30:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae32:	e004      	b.n	800ae3e <_vfiprintf_r+0x166>
 800ae34:	425b      	negs	r3, r3
 800ae36:	60eb      	str	r3, [r5, #12]
 800ae38:	2302      	movs	r3, #2
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	783b      	ldrb	r3, [r7, #0]
 800ae40:	2b2e      	cmp	r3, #46	; 0x2e
 800ae42:	d10a      	bne.n	800ae5a <_vfiprintf_r+0x182>
 800ae44:	787b      	ldrb	r3, [r7, #1]
 800ae46:	2b2a      	cmp	r3, #42	; 0x2a
 800ae48:	d137      	bne.n	800aeba <_vfiprintf_r+0x1e2>
 800ae4a:	9b07      	ldr	r3, [sp, #28]
 800ae4c:	3702      	adds	r7, #2
 800ae4e:	1d1a      	adds	r2, r3, #4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	9207      	str	r2, [sp, #28]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	db2d      	blt.n	800aeb4 <_vfiprintf_r+0x1dc>
 800ae58:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	7839      	ldrb	r1, [r7, #0]
 800ae5e:	4837      	ldr	r0, [pc, #220]	; (800af3c <_vfiprintf_r+0x264>)
 800ae60:	f7ff f856 	bl	8009f10 <memchr>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d007      	beq.n	800ae78 <_vfiprintf_r+0x1a0>
 800ae68:	4b34      	ldr	r3, [pc, #208]	; (800af3c <_vfiprintf_r+0x264>)
 800ae6a:	682a      	ldr	r2, [r5, #0]
 800ae6c:	1ac0      	subs	r0, r0, r3
 800ae6e:	2340      	movs	r3, #64	; 0x40
 800ae70:	4083      	lsls	r3, r0
 800ae72:	4313      	orrs	r3, r2
 800ae74:	3701      	adds	r7, #1
 800ae76:	602b      	str	r3, [r5, #0]
 800ae78:	7839      	ldrb	r1, [r7, #0]
 800ae7a:	1c7b      	adds	r3, r7, #1
 800ae7c:	2206      	movs	r2, #6
 800ae7e:	4830      	ldr	r0, [pc, #192]	; (800af40 <_vfiprintf_r+0x268>)
 800ae80:	9303      	str	r3, [sp, #12]
 800ae82:	7629      	strb	r1, [r5, #24]
 800ae84:	f7ff f844 	bl	8009f10 <memchr>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d045      	beq.n	800af18 <_vfiprintf_r+0x240>
 800ae8c:	4b2d      	ldr	r3, [pc, #180]	; (800af44 <_vfiprintf_r+0x26c>)
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d127      	bne.n	800aee2 <_vfiprintf_r+0x20a>
 800ae92:	2207      	movs	r2, #7
 800ae94:	9b07      	ldr	r3, [sp, #28]
 800ae96:	3307      	adds	r3, #7
 800ae98:	4393      	bics	r3, r2
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	9307      	str	r3, [sp, #28]
 800ae9e:	696b      	ldr	r3, [r5, #20]
 800aea0:	9a04      	ldr	r2, [sp, #16]
 800aea2:	189b      	adds	r3, r3, r2
 800aea4:	616b      	str	r3, [r5, #20]
 800aea6:	e75d      	b.n	800ad64 <_vfiprintf_r+0x8c>
 800aea8:	210a      	movs	r1, #10
 800aeaa:	434b      	muls	r3, r1
 800aeac:	4667      	mov	r7, ip
 800aeae:	189b      	adds	r3, r3, r2
 800aeb0:	3909      	subs	r1, #9
 800aeb2:	e7a3      	b.n	800adfc <_vfiprintf_r+0x124>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	425b      	negs	r3, r3
 800aeb8:	e7ce      	b.n	800ae58 <_vfiprintf_r+0x180>
 800aeba:	2300      	movs	r3, #0
 800aebc:	001a      	movs	r2, r3
 800aebe:	3701      	adds	r7, #1
 800aec0:	606b      	str	r3, [r5, #4]
 800aec2:	7839      	ldrb	r1, [r7, #0]
 800aec4:	1c78      	adds	r0, r7, #1
 800aec6:	3930      	subs	r1, #48	; 0x30
 800aec8:	4684      	mov	ip, r0
 800aeca:	2909      	cmp	r1, #9
 800aecc:	d903      	bls.n	800aed6 <_vfiprintf_r+0x1fe>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0c3      	beq.n	800ae5a <_vfiprintf_r+0x182>
 800aed2:	9209      	str	r2, [sp, #36]	; 0x24
 800aed4:	e7c1      	b.n	800ae5a <_vfiprintf_r+0x182>
 800aed6:	230a      	movs	r3, #10
 800aed8:	435a      	muls	r2, r3
 800aeda:	4667      	mov	r7, ip
 800aedc:	1852      	adds	r2, r2, r1
 800aede:	3b09      	subs	r3, #9
 800aee0:	e7ef      	b.n	800aec2 <_vfiprintf_r+0x1ea>
 800aee2:	ab07      	add	r3, sp, #28
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	0022      	movs	r2, r4
 800aee8:	0029      	movs	r1, r5
 800aeea:	0030      	movs	r0, r6
 800aeec:	4b16      	ldr	r3, [pc, #88]	; (800af48 <_vfiprintf_r+0x270>)
 800aeee:	f7fd fd77 	bl	80089e0 <_printf_float>
 800aef2:	9004      	str	r0, [sp, #16]
 800aef4:	9b04      	ldr	r3, [sp, #16]
 800aef6:	3301      	adds	r3, #1
 800aef8:	d1d1      	bne.n	800ae9e <_vfiprintf_r+0x1c6>
 800aefa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aefc:	07db      	lsls	r3, r3, #31
 800aefe:	d405      	bmi.n	800af0c <_vfiprintf_r+0x234>
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	059b      	lsls	r3, r3, #22
 800af04:	d402      	bmi.n	800af0c <_vfiprintf_r+0x234>
 800af06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af08:	f000 fad4 	bl	800b4b4 <__retarget_lock_release_recursive>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	065b      	lsls	r3, r3, #25
 800af10:	d500      	bpl.n	800af14 <_vfiprintf_r+0x23c>
 800af12:	e70a      	b.n	800ad2a <_vfiprintf_r+0x52>
 800af14:	980d      	ldr	r0, [sp, #52]	; 0x34
 800af16:	e70a      	b.n	800ad2e <_vfiprintf_r+0x56>
 800af18:	ab07      	add	r3, sp, #28
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	0022      	movs	r2, r4
 800af1e:	0029      	movs	r1, r5
 800af20:	0030      	movs	r0, r6
 800af22:	4b09      	ldr	r3, [pc, #36]	; (800af48 <_vfiprintf_r+0x270>)
 800af24:	f7fe f80e 	bl	8008f44 <_printf_i>
 800af28:	e7e3      	b.n	800aef2 <_vfiprintf_r+0x21a>
 800af2a:	46c0      	nop			; (mov r8, r8)
 800af2c:	0800bd8c 	.word	0x0800bd8c
 800af30:	0800bdac 	.word	0x0800bdac
 800af34:	0800bd6c 	.word	0x0800bd6c
 800af38:	0800bc14 	.word	0x0800bc14
 800af3c:	0800bc1a 	.word	0x0800bc1a
 800af40:	0800bc1e 	.word	0x0800bc1e
 800af44:	080089e1 	.word	0x080089e1
 800af48:	0800acb5 	.word	0x0800acb5

0800af4c <__swbuf_r>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	0005      	movs	r5, r0
 800af50:	000e      	movs	r6, r1
 800af52:	0014      	movs	r4, r2
 800af54:	2800      	cmp	r0, #0
 800af56:	d004      	beq.n	800af62 <__swbuf_r+0x16>
 800af58:	6983      	ldr	r3, [r0, #24]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <__swbuf_r+0x16>
 800af5e:	f000 fa07 	bl	800b370 <__sinit>
 800af62:	4b22      	ldr	r3, [pc, #136]	; (800afec <__swbuf_r+0xa0>)
 800af64:	429c      	cmp	r4, r3
 800af66:	d12e      	bne.n	800afc6 <__swbuf_r+0x7a>
 800af68:	686c      	ldr	r4, [r5, #4]
 800af6a:	69a3      	ldr	r3, [r4, #24]
 800af6c:	60a3      	str	r3, [r4, #8]
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	071b      	lsls	r3, r3, #28
 800af72:	d532      	bpl.n	800afda <__swbuf_r+0x8e>
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d02f      	beq.n	800afda <__swbuf_r+0x8e>
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	6922      	ldr	r2, [r4, #16]
 800af7e:	b2f7      	uxtb	r7, r6
 800af80:	1a98      	subs	r0, r3, r2
 800af82:	6963      	ldr	r3, [r4, #20]
 800af84:	b2f6      	uxtb	r6, r6
 800af86:	4283      	cmp	r3, r0
 800af88:	dc05      	bgt.n	800af96 <__swbuf_r+0x4a>
 800af8a:	0021      	movs	r1, r4
 800af8c:	0028      	movs	r0, r5
 800af8e:	f000 f94d 	bl	800b22c <_fflush_r>
 800af92:	2800      	cmp	r0, #0
 800af94:	d127      	bne.n	800afe6 <__swbuf_r+0x9a>
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	3001      	adds	r0, #1
 800af9a:	3b01      	subs	r3, #1
 800af9c:	60a3      	str	r3, [r4, #8]
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	6022      	str	r2, [r4, #0]
 800afa4:	701f      	strb	r7, [r3, #0]
 800afa6:	6963      	ldr	r3, [r4, #20]
 800afa8:	4283      	cmp	r3, r0
 800afaa:	d004      	beq.n	800afb6 <__swbuf_r+0x6a>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	07db      	lsls	r3, r3, #31
 800afb0:	d507      	bpl.n	800afc2 <__swbuf_r+0x76>
 800afb2:	2e0a      	cmp	r6, #10
 800afb4:	d105      	bne.n	800afc2 <__swbuf_r+0x76>
 800afb6:	0021      	movs	r1, r4
 800afb8:	0028      	movs	r0, r5
 800afba:	f000 f937 	bl	800b22c <_fflush_r>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d111      	bne.n	800afe6 <__swbuf_r+0x9a>
 800afc2:	0030      	movs	r0, r6
 800afc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc6:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <__swbuf_r+0xa4>)
 800afc8:	429c      	cmp	r4, r3
 800afca:	d101      	bne.n	800afd0 <__swbuf_r+0x84>
 800afcc:	68ac      	ldr	r4, [r5, #8]
 800afce:	e7cc      	b.n	800af6a <__swbuf_r+0x1e>
 800afd0:	4b08      	ldr	r3, [pc, #32]	; (800aff4 <__swbuf_r+0xa8>)
 800afd2:	429c      	cmp	r4, r3
 800afd4:	d1c9      	bne.n	800af6a <__swbuf_r+0x1e>
 800afd6:	68ec      	ldr	r4, [r5, #12]
 800afd8:	e7c7      	b.n	800af6a <__swbuf_r+0x1e>
 800afda:	0021      	movs	r1, r4
 800afdc:	0028      	movs	r0, r5
 800afde:	f000 f819 	bl	800b014 <__swsetup_r>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d0c9      	beq.n	800af7a <__swbuf_r+0x2e>
 800afe6:	2601      	movs	r6, #1
 800afe8:	4276      	negs	r6, r6
 800afea:	e7ea      	b.n	800afc2 <__swbuf_r+0x76>
 800afec:	0800bd8c 	.word	0x0800bd8c
 800aff0:	0800bdac 	.word	0x0800bdac
 800aff4:	0800bd6c 	.word	0x0800bd6c

0800aff8 <__ascii_wctomb>:
 800aff8:	0003      	movs	r3, r0
 800affa:	1e08      	subs	r0, r1, #0
 800affc:	d005      	beq.n	800b00a <__ascii_wctomb+0x12>
 800affe:	2aff      	cmp	r2, #255	; 0xff
 800b000:	d904      	bls.n	800b00c <__ascii_wctomb+0x14>
 800b002:	228a      	movs	r2, #138	; 0x8a
 800b004:	2001      	movs	r0, #1
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	4240      	negs	r0, r0
 800b00a:	4770      	bx	lr
 800b00c:	2001      	movs	r0, #1
 800b00e:	700a      	strb	r2, [r1, #0]
 800b010:	e7fb      	b.n	800b00a <__ascii_wctomb+0x12>
	...

0800b014 <__swsetup_r>:
 800b014:	4b37      	ldr	r3, [pc, #220]	; (800b0f4 <__swsetup_r+0xe0>)
 800b016:	b570      	push	{r4, r5, r6, lr}
 800b018:	681d      	ldr	r5, [r3, #0]
 800b01a:	0006      	movs	r6, r0
 800b01c:	000c      	movs	r4, r1
 800b01e:	2d00      	cmp	r5, #0
 800b020:	d005      	beq.n	800b02e <__swsetup_r+0x1a>
 800b022:	69ab      	ldr	r3, [r5, #24]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d102      	bne.n	800b02e <__swsetup_r+0x1a>
 800b028:	0028      	movs	r0, r5
 800b02a:	f000 f9a1 	bl	800b370 <__sinit>
 800b02e:	4b32      	ldr	r3, [pc, #200]	; (800b0f8 <__swsetup_r+0xe4>)
 800b030:	429c      	cmp	r4, r3
 800b032:	d10f      	bne.n	800b054 <__swsetup_r+0x40>
 800b034:	686c      	ldr	r4, [r5, #4]
 800b036:	230c      	movs	r3, #12
 800b038:	5ee2      	ldrsh	r2, [r4, r3]
 800b03a:	b293      	uxth	r3, r2
 800b03c:	0711      	lsls	r1, r2, #28
 800b03e:	d42d      	bmi.n	800b09c <__swsetup_r+0x88>
 800b040:	06d9      	lsls	r1, r3, #27
 800b042:	d411      	bmi.n	800b068 <__swsetup_r+0x54>
 800b044:	2309      	movs	r3, #9
 800b046:	2001      	movs	r0, #1
 800b048:	6033      	str	r3, [r6, #0]
 800b04a:	3337      	adds	r3, #55	; 0x37
 800b04c:	4313      	orrs	r3, r2
 800b04e:	81a3      	strh	r3, [r4, #12]
 800b050:	4240      	negs	r0, r0
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	4b29      	ldr	r3, [pc, #164]	; (800b0fc <__swsetup_r+0xe8>)
 800b056:	429c      	cmp	r4, r3
 800b058:	d101      	bne.n	800b05e <__swsetup_r+0x4a>
 800b05a:	68ac      	ldr	r4, [r5, #8]
 800b05c:	e7eb      	b.n	800b036 <__swsetup_r+0x22>
 800b05e:	4b28      	ldr	r3, [pc, #160]	; (800b100 <__swsetup_r+0xec>)
 800b060:	429c      	cmp	r4, r3
 800b062:	d1e8      	bne.n	800b036 <__swsetup_r+0x22>
 800b064:	68ec      	ldr	r4, [r5, #12]
 800b066:	e7e6      	b.n	800b036 <__swsetup_r+0x22>
 800b068:	075b      	lsls	r3, r3, #29
 800b06a:	d513      	bpl.n	800b094 <__swsetup_r+0x80>
 800b06c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b06e:	2900      	cmp	r1, #0
 800b070:	d008      	beq.n	800b084 <__swsetup_r+0x70>
 800b072:	0023      	movs	r3, r4
 800b074:	3344      	adds	r3, #68	; 0x44
 800b076:	4299      	cmp	r1, r3
 800b078:	d002      	beq.n	800b080 <__swsetup_r+0x6c>
 800b07a:	0030      	movs	r0, r6
 800b07c:	f7ff fb1c 	bl	800a6b8 <_free_r>
 800b080:	2300      	movs	r3, #0
 800b082:	6363      	str	r3, [r4, #52]	; 0x34
 800b084:	2224      	movs	r2, #36	; 0x24
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	4393      	bics	r3, r2
 800b08a:	81a3      	strh	r3, [r4, #12]
 800b08c:	2300      	movs	r3, #0
 800b08e:	6063      	str	r3, [r4, #4]
 800b090:	6923      	ldr	r3, [r4, #16]
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	2308      	movs	r3, #8
 800b096:	89a2      	ldrh	r2, [r4, #12]
 800b098:	4313      	orrs	r3, r2
 800b09a:	81a3      	strh	r3, [r4, #12]
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10b      	bne.n	800b0ba <__swsetup_r+0xa6>
 800b0a2:	21a0      	movs	r1, #160	; 0xa0
 800b0a4:	2280      	movs	r2, #128	; 0x80
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	0089      	lsls	r1, r1, #2
 800b0aa:	0092      	lsls	r2, r2, #2
 800b0ac:	400b      	ands	r3, r1
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d003      	beq.n	800b0ba <__swsetup_r+0xa6>
 800b0b2:	0021      	movs	r1, r4
 800b0b4:	0030      	movs	r0, r6
 800b0b6:	f000 fa27 	bl	800b508 <__smakebuf_r>
 800b0ba:	220c      	movs	r2, #12
 800b0bc:	5ea3      	ldrsh	r3, [r4, r2]
 800b0be:	2001      	movs	r0, #1
 800b0c0:	001a      	movs	r2, r3
 800b0c2:	b299      	uxth	r1, r3
 800b0c4:	4002      	ands	r2, r0
 800b0c6:	4203      	tst	r3, r0
 800b0c8:	d00f      	beq.n	800b0ea <__swsetup_r+0xd6>
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	60a2      	str	r2, [r4, #8]
 800b0ce:	6962      	ldr	r2, [r4, #20]
 800b0d0:	4252      	negs	r2, r2
 800b0d2:	61a2      	str	r2, [r4, #24]
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	6922      	ldr	r2, [r4, #16]
 800b0d8:	4282      	cmp	r2, r0
 800b0da:	d1ba      	bne.n	800b052 <__swsetup_r+0x3e>
 800b0dc:	060a      	lsls	r2, r1, #24
 800b0de:	d5b8      	bpl.n	800b052 <__swsetup_r+0x3e>
 800b0e0:	2240      	movs	r2, #64	; 0x40
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	81a3      	strh	r3, [r4, #12]
 800b0e6:	3801      	subs	r0, #1
 800b0e8:	e7b3      	b.n	800b052 <__swsetup_r+0x3e>
 800b0ea:	0788      	lsls	r0, r1, #30
 800b0ec:	d400      	bmi.n	800b0f0 <__swsetup_r+0xdc>
 800b0ee:	6962      	ldr	r2, [r4, #20]
 800b0f0:	60a2      	str	r2, [r4, #8]
 800b0f2:	e7ef      	b.n	800b0d4 <__swsetup_r+0xc0>
 800b0f4:	20000010 	.word	0x20000010
 800b0f8:	0800bd8c 	.word	0x0800bd8c
 800b0fc:	0800bdac 	.word	0x0800bdac
 800b100:	0800bd6c 	.word	0x0800bd6c

0800b104 <abort>:
 800b104:	2006      	movs	r0, #6
 800b106:	b510      	push	{r4, lr}
 800b108:	f000 fa74 	bl	800b5f4 <raise>
 800b10c:	2001      	movs	r0, #1
 800b10e:	f7f9 f989 	bl	8004424 <_exit>
	...

0800b114 <__sflush_r>:
 800b114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b116:	898b      	ldrh	r3, [r1, #12]
 800b118:	0005      	movs	r5, r0
 800b11a:	000c      	movs	r4, r1
 800b11c:	071a      	lsls	r2, r3, #28
 800b11e:	d45f      	bmi.n	800b1e0 <__sflush_r+0xcc>
 800b120:	684a      	ldr	r2, [r1, #4]
 800b122:	2a00      	cmp	r2, #0
 800b124:	dc04      	bgt.n	800b130 <__sflush_r+0x1c>
 800b126:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b128:	2a00      	cmp	r2, #0
 800b12a:	dc01      	bgt.n	800b130 <__sflush_r+0x1c>
 800b12c:	2000      	movs	r0, #0
 800b12e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b130:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b132:	2f00      	cmp	r7, #0
 800b134:	d0fa      	beq.n	800b12c <__sflush_r+0x18>
 800b136:	2200      	movs	r2, #0
 800b138:	2180      	movs	r1, #128	; 0x80
 800b13a:	682e      	ldr	r6, [r5, #0]
 800b13c:	602a      	str	r2, [r5, #0]
 800b13e:	001a      	movs	r2, r3
 800b140:	0149      	lsls	r1, r1, #5
 800b142:	400a      	ands	r2, r1
 800b144:	420b      	tst	r3, r1
 800b146:	d034      	beq.n	800b1b2 <__sflush_r+0x9e>
 800b148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	075b      	lsls	r3, r3, #29
 800b14e:	d506      	bpl.n	800b15e <__sflush_r+0x4a>
 800b150:	6863      	ldr	r3, [r4, #4]
 800b152:	1ac0      	subs	r0, r0, r3
 800b154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <__sflush_r+0x4a>
 800b15a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b15c:	1ac0      	subs	r0, r0, r3
 800b15e:	0002      	movs	r2, r0
 800b160:	6a21      	ldr	r1, [r4, #32]
 800b162:	2300      	movs	r3, #0
 800b164:	0028      	movs	r0, r5
 800b166:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b168:	47b8      	blx	r7
 800b16a:	89a1      	ldrh	r1, [r4, #12]
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d106      	bne.n	800b17e <__sflush_r+0x6a>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	2b1d      	cmp	r3, #29
 800b174:	d831      	bhi.n	800b1da <__sflush_r+0xc6>
 800b176:	4a2c      	ldr	r2, [pc, #176]	; (800b228 <__sflush_r+0x114>)
 800b178:	40da      	lsrs	r2, r3
 800b17a:	07d3      	lsls	r3, r2, #31
 800b17c:	d52d      	bpl.n	800b1da <__sflush_r+0xc6>
 800b17e:	2300      	movs	r3, #0
 800b180:	6063      	str	r3, [r4, #4]
 800b182:	6923      	ldr	r3, [r4, #16]
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	04cb      	lsls	r3, r1, #19
 800b188:	d505      	bpl.n	800b196 <__sflush_r+0x82>
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	d102      	bne.n	800b194 <__sflush_r+0x80>
 800b18e:	682b      	ldr	r3, [r5, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d100      	bne.n	800b196 <__sflush_r+0x82>
 800b194:	6560      	str	r0, [r4, #84]	; 0x54
 800b196:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b198:	602e      	str	r6, [r5, #0]
 800b19a:	2900      	cmp	r1, #0
 800b19c:	d0c6      	beq.n	800b12c <__sflush_r+0x18>
 800b19e:	0023      	movs	r3, r4
 800b1a0:	3344      	adds	r3, #68	; 0x44
 800b1a2:	4299      	cmp	r1, r3
 800b1a4:	d002      	beq.n	800b1ac <__sflush_r+0x98>
 800b1a6:	0028      	movs	r0, r5
 800b1a8:	f7ff fa86 	bl	800a6b8 <_free_r>
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	6360      	str	r0, [r4, #52]	; 0x34
 800b1b0:	e7bd      	b.n	800b12e <__sflush_r+0x1a>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	0028      	movs	r0, r5
 800b1b6:	6a21      	ldr	r1, [r4, #32]
 800b1b8:	47b8      	blx	r7
 800b1ba:	1c43      	adds	r3, r0, #1
 800b1bc:	d1c5      	bne.n	800b14a <__sflush_r+0x36>
 800b1be:	682b      	ldr	r3, [r5, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0c2      	beq.n	800b14a <__sflush_r+0x36>
 800b1c4:	2b1d      	cmp	r3, #29
 800b1c6:	d001      	beq.n	800b1cc <__sflush_r+0xb8>
 800b1c8:	2b16      	cmp	r3, #22
 800b1ca:	d101      	bne.n	800b1d0 <__sflush_r+0xbc>
 800b1cc:	602e      	str	r6, [r5, #0]
 800b1ce:	e7ad      	b.n	800b12c <__sflush_r+0x18>
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	89a2      	ldrh	r2, [r4, #12]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	81a3      	strh	r3, [r4, #12]
 800b1d8:	e7a9      	b.n	800b12e <__sflush_r+0x1a>
 800b1da:	2340      	movs	r3, #64	; 0x40
 800b1dc:	430b      	orrs	r3, r1
 800b1de:	e7fa      	b.n	800b1d6 <__sflush_r+0xc2>
 800b1e0:	690f      	ldr	r7, [r1, #16]
 800b1e2:	2f00      	cmp	r7, #0
 800b1e4:	d0a2      	beq.n	800b12c <__sflush_r+0x18>
 800b1e6:	680a      	ldr	r2, [r1, #0]
 800b1e8:	600f      	str	r7, [r1, #0]
 800b1ea:	1bd2      	subs	r2, r2, r7
 800b1ec:	9201      	str	r2, [sp, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	079b      	lsls	r3, r3, #30
 800b1f2:	d100      	bne.n	800b1f6 <__sflush_r+0xe2>
 800b1f4:	694a      	ldr	r2, [r1, #20]
 800b1f6:	60a2      	str	r2, [r4, #8]
 800b1f8:	9b01      	ldr	r3, [sp, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dc00      	bgt.n	800b200 <__sflush_r+0xec>
 800b1fe:	e795      	b.n	800b12c <__sflush_r+0x18>
 800b200:	003a      	movs	r2, r7
 800b202:	0028      	movs	r0, r5
 800b204:	9b01      	ldr	r3, [sp, #4]
 800b206:	6a21      	ldr	r1, [r4, #32]
 800b208:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b20a:	47b0      	blx	r6
 800b20c:	2800      	cmp	r0, #0
 800b20e:	dc06      	bgt.n	800b21e <__sflush_r+0x10a>
 800b210:	2340      	movs	r3, #64	; 0x40
 800b212:	2001      	movs	r0, #1
 800b214:	89a2      	ldrh	r2, [r4, #12]
 800b216:	4240      	negs	r0, r0
 800b218:	4313      	orrs	r3, r2
 800b21a:	81a3      	strh	r3, [r4, #12]
 800b21c:	e787      	b.n	800b12e <__sflush_r+0x1a>
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	183f      	adds	r7, r7, r0
 800b222:	1a1b      	subs	r3, r3, r0
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	e7e7      	b.n	800b1f8 <__sflush_r+0xe4>
 800b228:	20400001 	.word	0x20400001

0800b22c <_fflush_r>:
 800b22c:	690b      	ldr	r3, [r1, #16]
 800b22e:	b570      	push	{r4, r5, r6, lr}
 800b230:	0005      	movs	r5, r0
 800b232:	000c      	movs	r4, r1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d102      	bne.n	800b23e <_fflush_r+0x12>
 800b238:	2500      	movs	r5, #0
 800b23a:	0028      	movs	r0, r5
 800b23c:	bd70      	pop	{r4, r5, r6, pc}
 800b23e:	2800      	cmp	r0, #0
 800b240:	d004      	beq.n	800b24c <_fflush_r+0x20>
 800b242:	6983      	ldr	r3, [r0, #24]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <_fflush_r+0x20>
 800b248:	f000 f892 	bl	800b370 <__sinit>
 800b24c:	4b14      	ldr	r3, [pc, #80]	; (800b2a0 <_fflush_r+0x74>)
 800b24e:	429c      	cmp	r4, r3
 800b250:	d11b      	bne.n	800b28a <_fflush_r+0x5e>
 800b252:	686c      	ldr	r4, [r5, #4]
 800b254:	220c      	movs	r2, #12
 800b256:	5ea3      	ldrsh	r3, [r4, r2]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d0ed      	beq.n	800b238 <_fflush_r+0xc>
 800b25c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b25e:	07d2      	lsls	r2, r2, #31
 800b260:	d404      	bmi.n	800b26c <_fflush_r+0x40>
 800b262:	059b      	lsls	r3, r3, #22
 800b264:	d402      	bmi.n	800b26c <_fflush_r+0x40>
 800b266:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b268:	f000 f923 	bl	800b4b2 <__retarget_lock_acquire_recursive>
 800b26c:	0028      	movs	r0, r5
 800b26e:	0021      	movs	r1, r4
 800b270:	f7ff ff50 	bl	800b114 <__sflush_r>
 800b274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b276:	0005      	movs	r5, r0
 800b278:	07db      	lsls	r3, r3, #31
 800b27a:	d4de      	bmi.n	800b23a <_fflush_r+0xe>
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	059b      	lsls	r3, r3, #22
 800b280:	d4db      	bmi.n	800b23a <_fflush_r+0xe>
 800b282:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b284:	f000 f916 	bl	800b4b4 <__retarget_lock_release_recursive>
 800b288:	e7d7      	b.n	800b23a <_fflush_r+0xe>
 800b28a:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <_fflush_r+0x78>)
 800b28c:	429c      	cmp	r4, r3
 800b28e:	d101      	bne.n	800b294 <_fflush_r+0x68>
 800b290:	68ac      	ldr	r4, [r5, #8]
 800b292:	e7df      	b.n	800b254 <_fflush_r+0x28>
 800b294:	4b04      	ldr	r3, [pc, #16]	; (800b2a8 <_fflush_r+0x7c>)
 800b296:	429c      	cmp	r4, r3
 800b298:	d1dc      	bne.n	800b254 <_fflush_r+0x28>
 800b29a:	68ec      	ldr	r4, [r5, #12]
 800b29c:	e7da      	b.n	800b254 <_fflush_r+0x28>
 800b29e:	46c0      	nop			; (mov r8, r8)
 800b2a0:	0800bd8c 	.word	0x0800bd8c
 800b2a4:	0800bdac 	.word	0x0800bdac
 800b2a8:	0800bd6c 	.word	0x0800bd6c

0800b2ac <std>:
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	b510      	push	{r4, lr}
 800b2b0:	0004      	movs	r4, r0
 800b2b2:	6003      	str	r3, [r0, #0]
 800b2b4:	6043      	str	r3, [r0, #4]
 800b2b6:	6083      	str	r3, [r0, #8]
 800b2b8:	8181      	strh	r1, [r0, #12]
 800b2ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b2bc:	0019      	movs	r1, r3
 800b2be:	81c2      	strh	r2, [r0, #14]
 800b2c0:	6103      	str	r3, [r0, #16]
 800b2c2:	6143      	str	r3, [r0, #20]
 800b2c4:	6183      	str	r3, [r0, #24]
 800b2c6:	2208      	movs	r2, #8
 800b2c8:	305c      	adds	r0, #92	; 0x5c
 800b2ca:	f7fd fad6 	bl	800887a <memset>
 800b2ce:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <std+0x38>)
 800b2d0:	6224      	str	r4, [r4, #32]
 800b2d2:	6263      	str	r3, [r4, #36]	; 0x24
 800b2d4:	4b04      	ldr	r3, [pc, #16]	; (800b2e8 <std+0x3c>)
 800b2d6:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2d8:	4b04      	ldr	r3, [pc, #16]	; (800b2ec <std+0x40>)
 800b2da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2dc:	4b04      	ldr	r3, [pc, #16]	; (800b2f0 <std+0x44>)
 800b2de:	6323      	str	r3, [r4, #48]	; 0x30
 800b2e0:	bd10      	pop	{r4, pc}
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	0800b635 	.word	0x0800b635
 800b2e8:	0800b65d 	.word	0x0800b65d
 800b2ec:	0800b695 	.word	0x0800b695
 800b2f0:	0800b6c1 	.word	0x0800b6c1

0800b2f4 <_cleanup_r>:
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	4902      	ldr	r1, [pc, #8]	; (800b300 <_cleanup_r+0xc>)
 800b2f8:	f000 f8ba 	bl	800b470 <_fwalk_reent>
 800b2fc:	bd10      	pop	{r4, pc}
 800b2fe:	46c0      	nop			; (mov r8, r8)
 800b300:	0800b22d 	.word	0x0800b22d

0800b304 <__sfmoreglue>:
 800b304:	b570      	push	{r4, r5, r6, lr}
 800b306:	2568      	movs	r5, #104	; 0x68
 800b308:	1e4a      	subs	r2, r1, #1
 800b30a:	4355      	muls	r5, r2
 800b30c:	000e      	movs	r6, r1
 800b30e:	0029      	movs	r1, r5
 800b310:	3174      	adds	r1, #116	; 0x74
 800b312:	f7ff fa3d 	bl	800a790 <_malloc_r>
 800b316:	1e04      	subs	r4, r0, #0
 800b318:	d008      	beq.n	800b32c <__sfmoreglue+0x28>
 800b31a:	2100      	movs	r1, #0
 800b31c:	002a      	movs	r2, r5
 800b31e:	6001      	str	r1, [r0, #0]
 800b320:	6046      	str	r6, [r0, #4]
 800b322:	300c      	adds	r0, #12
 800b324:	60a0      	str	r0, [r4, #8]
 800b326:	3268      	adds	r2, #104	; 0x68
 800b328:	f7fd faa7 	bl	800887a <memset>
 800b32c:	0020      	movs	r0, r4
 800b32e:	bd70      	pop	{r4, r5, r6, pc}

0800b330 <__sfp_lock_acquire>:
 800b330:	b510      	push	{r4, lr}
 800b332:	4802      	ldr	r0, [pc, #8]	; (800b33c <__sfp_lock_acquire+0xc>)
 800b334:	f000 f8bd 	bl	800b4b2 <__retarget_lock_acquire_recursive>
 800b338:	bd10      	pop	{r4, pc}
 800b33a:	46c0      	nop			; (mov r8, r8)
 800b33c:	200004d9 	.word	0x200004d9

0800b340 <__sfp_lock_release>:
 800b340:	b510      	push	{r4, lr}
 800b342:	4802      	ldr	r0, [pc, #8]	; (800b34c <__sfp_lock_release+0xc>)
 800b344:	f000 f8b6 	bl	800b4b4 <__retarget_lock_release_recursive>
 800b348:	bd10      	pop	{r4, pc}
 800b34a:	46c0      	nop			; (mov r8, r8)
 800b34c:	200004d9 	.word	0x200004d9

0800b350 <__sinit_lock_acquire>:
 800b350:	b510      	push	{r4, lr}
 800b352:	4802      	ldr	r0, [pc, #8]	; (800b35c <__sinit_lock_acquire+0xc>)
 800b354:	f000 f8ad 	bl	800b4b2 <__retarget_lock_acquire_recursive>
 800b358:	bd10      	pop	{r4, pc}
 800b35a:	46c0      	nop			; (mov r8, r8)
 800b35c:	200004da 	.word	0x200004da

0800b360 <__sinit_lock_release>:
 800b360:	b510      	push	{r4, lr}
 800b362:	4802      	ldr	r0, [pc, #8]	; (800b36c <__sinit_lock_release+0xc>)
 800b364:	f000 f8a6 	bl	800b4b4 <__retarget_lock_release_recursive>
 800b368:	bd10      	pop	{r4, pc}
 800b36a:	46c0      	nop			; (mov r8, r8)
 800b36c:	200004da 	.word	0x200004da

0800b370 <__sinit>:
 800b370:	b513      	push	{r0, r1, r4, lr}
 800b372:	0004      	movs	r4, r0
 800b374:	f7ff ffec 	bl	800b350 <__sinit_lock_acquire>
 800b378:	69a3      	ldr	r3, [r4, #24]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <__sinit+0x14>
 800b37e:	f7ff ffef 	bl	800b360 <__sinit_lock_release>
 800b382:	bd13      	pop	{r0, r1, r4, pc}
 800b384:	64a3      	str	r3, [r4, #72]	; 0x48
 800b386:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b388:	6523      	str	r3, [r4, #80]	; 0x50
 800b38a:	4b13      	ldr	r3, [pc, #76]	; (800b3d8 <__sinit+0x68>)
 800b38c:	4a13      	ldr	r2, [pc, #76]	; (800b3dc <__sinit+0x6c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	62a2      	str	r2, [r4, #40]	; 0x28
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	42a3      	cmp	r3, r4
 800b396:	d101      	bne.n	800b39c <__sinit+0x2c>
 800b398:	2301      	movs	r3, #1
 800b39a:	61a3      	str	r3, [r4, #24]
 800b39c:	0020      	movs	r0, r4
 800b39e:	f000 f81f 	bl	800b3e0 <__sfp>
 800b3a2:	6060      	str	r0, [r4, #4]
 800b3a4:	0020      	movs	r0, r4
 800b3a6:	f000 f81b 	bl	800b3e0 <__sfp>
 800b3aa:	60a0      	str	r0, [r4, #8]
 800b3ac:	0020      	movs	r0, r4
 800b3ae:	f000 f817 	bl	800b3e0 <__sfp>
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	2104      	movs	r1, #4
 800b3b6:	60e0      	str	r0, [r4, #12]
 800b3b8:	6860      	ldr	r0, [r4, #4]
 800b3ba:	f7ff ff77 	bl	800b2ac <std>
 800b3be:	2201      	movs	r2, #1
 800b3c0:	2109      	movs	r1, #9
 800b3c2:	68a0      	ldr	r0, [r4, #8]
 800b3c4:	f7ff ff72 	bl	800b2ac <std>
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	2112      	movs	r1, #18
 800b3cc:	68e0      	ldr	r0, [r4, #12]
 800b3ce:	f7ff ff6d 	bl	800b2ac <std>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	61a3      	str	r3, [r4, #24]
 800b3d6:	e7d2      	b.n	800b37e <__sinit+0xe>
 800b3d8:	0800b9f4 	.word	0x0800b9f4
 800b3dc:	0800b2f5 	.word	0x0800b2f5

0800b3e0 <__sfp>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	0007      	movs	r7, r0
 800b3e4:	f7ff ffa4 	bl	800b330 <__sfp_lock_acquire>
 800b3e8:	4b1f      	ldr	r3, [pc, #124]	; (800b468 <__sfp+0x88>)
 800b3ea:	681e      	ldr	r6, [r3, #0]
 800b3ec:	69b3      	ldr	r3, [r6, #24]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d102      	bne.n	800b3f8 <__sfp+0x18>
 800b3f2:	0030      	movs	r0, r6
 800b3f4:	f7ff ffbc 	bl	800b370 <__sinit>
 800b3f8:	3648      	adds	r6, #72	; 0x48
 800b3fa:	68b4      	ldr	r4, [r6, #8]
 800b3fc:	6873      	ldr	r3, [r6, #4]
 800b3fe:	3b01      	subs	r3, #1
 800b400:	d504      	bpl.n	800b40c <__sfp+0x2c>
 800b402:	6833      	ldr	r3, [r6, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d022      	beq.n	800b44e <__sfp+0x6e>
 800b408:	6836      	ldr	r6, [r6, #0]
 800b40a:	e7f6      	b.n	800b3fa <__sfp+0x1a>
 800b40c:	220c      	movs	r2, #12
 800b40e:	5ea5      	ldrsh	r5, [r4, r2]
 800b410:	2d00      	cmp	r5, #0
 800b412:	d11a      	bne.n	800b44a <__sfp+0x6a>
 800b414:	0020      	movs	r0, r4
 800b416:	4b15      	ldr	r3, [pc, #84]	; (800b46c <__sfp+0x8c>)
 800b418:	3058      	adds	r0, #88	; 0x58
 800b41a:	60e3      	str	r3, [r4, #12]
 800b41c:	6665      	str	r5, [r4, #100]	; 0x64
 800b41e:	f000 f847 	bl	800b4b0 <__retarget_lock_init_recursive>
 800b422:	f7ff ff8d 	bl	800b340 <__sfp_lock_release>
 800b426:	0020      	movs	r0, r4
 800b428:	2208      	movs	r2, #8
 800b42a:	0029      	movs	r1, r5
 800b42c:	6025      	str	r5, [r4, #0]
 800b42e:	60a5      	str	r5, [r4, #8]
 800b430:	6065      	str	r5, [r4, #4]
 800b432:	6125      	str	r5, [r4, #16]
 800b434:	6165      	str	r5, [r4, #20]
 800b436:	61a5      	str	r5, [r4, #24]
 800b438:	305c      	adds	r0, #92	; 0x5c
 800b43a:	f7fd fa1e 	bl	800887a <memset>
 800b43e:	6365      	str	r5, [r4, #52]	; 0x34
 800b440:	63a5      	str	r5, [r4, #56]	; 0x38
 800b442:	64a5      	str	r5, [r4, #72]	; 0x48
 800b444:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b446:	0020      	movs	r0, r4
 800b448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b44a:	3468      	adds	r4, #104	; 0x68
 800b44c:	e7d7      	b.n	800b3fe <__sfp+0x1e>
 800b44e:	2104      	movs	r1, #4
 800b450:	0038      	movs	r0, r7
 800b452:	f7ff ff57 	bl	800b304 <__sfmoreglue>
 800b456:	1e04      	subs	r4, r0, #0
 800b458:	6030      	str	r0, [r6, #0]
 800b45a:	d1d5      	bne.n	800b408 <__sfp+0x28>
 800b45c:	f7ff ff70 	bl	800b340 <__sfp_lock_release>
 800b460:	230c      	movs	r3, #12
 800b462:	603b      	str	r3, [r7, #0]
 800b464:	e7ef      	b.n	800b446 <__sfp+0x66>
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	0800b9f4 	.word	0x0800b9f4
 800b46c:	ffff0001 	.word	0xffff0001

0800b470 <_fwalk_reent>:
 800b470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b472:	0004      	movs	r4, r0
 800b474:	0006      	movs	r6, r0
 800b476:	2700      	movs	r7, #0
 800b478:	9101      	str	r1, [sp, #4]
 800b47a:	3448      	adds	r4, #72	; 0x48
 800b47c:	6863      	ldr	r3, [r4, #4]
 800b47e:	68a5      	ldr	r5, [r4, #8]
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	3b01      	subs	r3, #1
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	d504      	bpl.n	800b494 <_fwalk_reent+0x24>
 800b48a:	6824      	ldr	r4, [r4, #0]
 800b48c:	2c00      	cmp	r4, #0
 800b48e:	d1f5      	bne.n	800b47c <_fwalk_reent+0xc>
 800b490:	0038      	movs	r0, r7
 800b492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b494:	89ab      	ldrh	r3, [r5, #12]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d908      	bls.n	800b4ac <_fwalk_reent+0x3c>
 800b49a:	220e      	movs	r2, #14
 800b49c:	5eab      	ldrsh	r3, [r5, r2]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	d004      	beq.n	800b4ac <_fwalk_reent+0x3c>
 800b4a2:	0029      	movs	r1, r5
 800b4a4:	0030      	movs	r0, r6
 800b4a6:	9b01      	ldr	r3, [sp, #4]
 800b4a8:	4798      	blx	r3
 800b4aa:	4307      	orrs	r7, r0
 800b4ac:	3568      	adds	r5, #104	; 0x68
 800b4ae:	e7e8      	b.n	800b482 <_fwalk_reent+0x12>

0800b4b0 <__retarget_lock_init_recursive>:
 800b4b0:	4770      	bx	lr

0800b4b2 <__retarget_lock_acquire_recursive>:
 800b4b2:	4770      	bx	lr

0800b4b4 <__retarget_lock_release_recursive>:
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <__swhatbuf_r>:
 800b4b8:	b570      	push	{r4, r5, r6, lr}
 800b4ba:	000e      	movs	r6, r1
 800b4bc:	001d      	movs	r5, r3
 800b4be:	230e      	movs	r3, #14
 800b4c0:	5ec9      	ldrsh	r1, [r1, r3]
 800b4c2:	0014      	movs	r4, r2
 800b4c4:	b096      	sub	sp, #88	; 0x58
 800b4c6:	2900      	cmp	r1, #0
 800b4c8:	da08      	bge.n	800b4dc <__swhatbuf_r+0x24>
 800b4ca:	220c      	movs	r2, #12
 800b4cc:	5eb3      	ldrsh	r3, [r6, r2]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	602a      	str	r2, [r5, #0]
 800b4d2:	061b      	lsls	r3, r3, #24
 800b4d4:	d411      	bmi.n	800b4fa <__swhatbuf_r+0x42>
 800b4d6:	2380      	movs	r3, #128	; 0x80
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	e00f      	b.n	800b4fc <__swhatbuf_r+0x44>
 800b4dc:	466a      	mov	r2, sp
 800b4de:	f000 f91b 	bl	800b718 <_fstat_r>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	dbf1      	blt.n	800b4ca <__swhatbuf_r+0x12>
 800b4e6:	23f0      	movs	r3, #240	; 0xf0
 800b4e8:	9901      	ldr	r1, [sp, #4]
 800b4ea:	021b      	lsls	r3, r3, #8
 800b4ec:	4019      	ands	r1, r3
 800b4ee:	4b05      	ldr	r3, [pc, #20]	; (800b504 <__swhatbuf_r+0x4c>)
 800b4f0:	18c9      	adds	r1, r1, r3
 800b4f2:	424b      	negs	r3, r1
 800b4f4:	4159      	adcs	r1, r3
 800b4f6:	6029      	str	r1, [r5, #0]
 800b4f8:	e7ed      	b.n	800b4d6 <__swhatbuf_r+0x1e>
 800b4fa:	2340      	movs	r3, #64	; 0x40
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	b016      	add	sp, #88	; 0x58
 800b502:	bd70      	pop	{r4, r5, r6, pc}
 800b504:	ffffe000 	.word	0xffffe000

0800b508 <__smakebuf_r>:
 800b508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b50a:	2602      	movs	r6, #2
 800b50c:	898b      	ldrh	r3, [r1, #12]
 800b50e:	0005      	movs	r5, r0
 800b510:	000c      	movs	r4, r1
 800b512:	4233      	tst	r3, r6
 800b514:	d006      	beq.n	800b524 <__smakebuf_r+0x1c>
 800b516:	0023      	movs	r3, r4
 800b518:	3347      	adds	r3, #71	; 0x47
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	6123      	str	r3, [r4, #16]
 800b51e:	2301      	movs	r3, #1
 800b520:	6163      	str	r3, [r4, #20]
 800b522:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b524:	466a      	mov	r2, sp
 800b526:	ab01      	add	r3, sp, #4
 800b528:	f7ff ffc6 	bl	800b4b8 <__swhatbuf_r>
 800b52c:	9900      	ldr	r1, [sp, #0]
 800b52e:	0007      	movs	r7, r0
 800b530:	0028      	movs	r0, r5
 800b532:	f7ff f92d 	bl	800a790 <_malloc_r>
 800b536:	2800      	cmp	r0, #0
 800b538:	d108      	bne.n	800b54c <__smakebuf_r+0x44>
 800b53a:	220c      	movs	r2, #12
 800b53c:	5ea3      	ldrsh	r3, [r4, r2]
 800b53e:	059a      	lsls	r2, r3, #22
 800b540:	d4ef      	bmi.n	800b522 <__smakebuf_r+0x1a>
 800b542:	2203      	movs	r2, #3
 800b544:	4393      	bics	r3, r2
 800b546:	431e      	orrs	r6, r3
 800b548:	81a6      	strh	r6, [r4, #12]
 800b54a:	e7e4      	b.n	800b516 <__smakebuf_r+0xe>
 800b54c:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <__smakebuf_r+0x84>)
 800b54e:	62ab      	str	r3, [r5, #40]	; 0x28
 800b550:	2380      	movs	r3, #128	; 0x80
 800b552:	89a2      	ldrh	r2, [r4, #12]
 800b554:	6020      	str	r0, [r4, #0]
 800b556:	4313      	orrs	r3, r2
 800b558:	81a3      	strh	r3, [r4, #12]
 800b55a:	9b00      	ldr	r3, [sp, #0]
 800b55c:	6120      	str	r0, [r4, #16]
 800b55e:	6163      	str	r3, [r4, #20]
 800b560:	9b01      	ldr	r3, [sp, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00d      	beq.n	800b582 <__smakebuf_r+0x7a>
 800b566:	0028      	movs	r0, r5
 800b568:	230e      	movs	r3, #14
 800b56a:	5ee1      	ldrsh	r1, [r4, r3]
 800b56c:	f000 f8e6 	bl	800b73c <_isatty_r>
 800b570:	2800      	cmp	r0, #0
 800b572:	d006      	beq.n	800b582 <__smakebuf_r+0x7a>
 800b574:	2203      	movs	r2, #3
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	4393      	bics	r3, r2
 800b57a:	001a      	movs	r2, r3
 800b57c:	2301      	movs	r3, #1
 800b57e:	4313      	orrs	r3, r2
 800b580:	81a3      	strh	r3, [r4, #12]
 800b582:	89a0      	ldrh	r0, [r4, #12]
 800b584:	4307      	orrs	r7, r0
 800b586:	81a7      	strh	r7, [r4, #12]
 800b588:	e7cb      	b.n	800b522 <__smakebuf_r+0x1a>
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	0800b2f5 	.word	0x0800b2f5

0800b590 <_malloc_usable_size_r>:
 800b590:	1f0b      	subs	r3, r1, #4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	1f18      	subs	r0, r3, #4
 800b596:	2b00      	cmp	r3, #0
 800b598:	da01      	bge.n	800b59e <_malloc_usable_size_r+0xe>
 800b59a:	580b      	ldr	r3, [r1, r0]
 800b59c:	18c0      	adds	r0, r0, r3
 800b59e:	4770      	bx	lr

0800b5a0 <_raise_r>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	0004      	movs	r4, r0
 800b5a4:	000d      	movs	r5, r1
 800b5a6:	291f      	cmp	r1, #31
 800b5a8:	d904      	bls.n	800b5b4 <_raise_r+0x14>
 800b5aa:	2316      	movs	r3, #22
 800b5ac:	6003      	str	r3, [r0, #0]
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	4240      	negs	r0, r0
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d004      	beq.n	800b5c4 <_raise_r+0x24>
 800b5ba:	008a      	lsls	r2, r1, #2
 800b5bc:	189b      	adds	r3, r3, r2
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	d108      	bne.n	800b5d6 <_raise_r+0x36>
 800b5c4:	0020      	movs	r0, r4
 800b5c6:	f000 f831 	bl	800b62c <_getpid_r>
 800b5ca:	002a      	movs	r2, r5
 800b5cc:	0001      	movs	r1, r0
 800b5ce:	0020      	movs	r0, r4
 800b5d0:	f000 f81a 	bl	800b608 <_kill_r>
 800b5d4:	e7ed      	b.n	800b5b2 <_raise_r+0x12>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	2a01      	cmp	r2, #1
 800b5da:	d0ea      	beq.n	800b5b2 <_raise_r+0x12>
 800b5dc:	1c51      	adds	r1, r2, #1
 800b5de:	d103      	bne.n	800b5e8 <_raise_r+0x48>
 800b5e0:	2316      	movs	r3, #22
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	e7e4      	b.n	800b5b2 <_raise_r+0x12>
 800b5e8:	2400      	movs	r4, #0
 800b5ea:	0028      	movs	r0, r5
 800b5ec:	601c      	str	r4, [r3, #0]
 800b5ee:	4790      	blx	r2
 800b5f0:	0020      	movs	r0, r4
 800b5f2:	e7de      	b.n	800b5b2 <_raise_r+0x12>

0800b5f4 <raise>:
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	4b03      	ldr	r3, [pc, #12]	; (800b604 <raise+0x10>)
 800b5f8:	0001      	movs	r1, r0
 800b5fa:	6818      	ldr	r0, [r3, #0]
 800b5fc:	f7ff ffd0 	bl	800b5a0 <_raise_r>
 800b600:	bd10      	pop	{r4, pc}
 800b602:	46c0      	nop			; (mov r8, r8)
 800b604:	20000010 	.word	0x20000010

0800b608 <_kill_r>:
 800b608:	2300      	movs	r3, #0
 800b60a:	b570      	push	{r4, r5, r6, lr}
 800b60c:	4d06      	ldr	r5, [pc, #24]	; (800b628 <_kill_r+0x20>)
 800b60e:	0004      	movs	r4, r0
 800b610:	0008      	movs	r0, r1
 800b612:	0011      	movs	r1, r2
 800b614:	602b      	str	r3, [r5, #0]
 800b616:	f7f8 fef5 	bl	8004404 <_kill>
 800b61a:	1c43      	adds	r3, r0, #1
 800b61c:	d103      	bne.n	800b626 <_kill_r+0x1e>
 800b61e:	682b      	ldr	r3, [r5, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d000      	beq.n	800b626 <_kill_r+0x1e>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd70      	pop	{r4, r5, r6, pc}
 800b628:	200004d4 	.word	0x200004d4

0800b62c <_getpid_r>:
 800b62c:	b510      	push	{r4, lr}
 800b62e:	f7f8 fee3 	bl	80043f8 <_getpid>
 800b632:	bd10      	pop	{r4, pc}

0800b634 <__sread>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	000c      	movs	r4, r1
 800b638:	250e      	movs	r5, #14
 800b63a:	5f49      	ldrsh	r1, [r1, r5]
 800b63c:	f000 f8a4 	bl	800b788 <_read_r>
 800b640:	2800      	cmp	r0, #0
 800b642:	db03      	blt.n	800b64c <__sread+0x18>
 800b644:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b646:	181b      	adds	r3, r3, r0
 800b648:	6563      	str	r3, [r4, #84]	; 0x54
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	4a02      	ldr	r2, [pc, #8]	; (800b658 <__sread+0x24>)
 800b650:	4013      	ands	r3, r2
 800b652:	81a3      	strh	r3, [r4, #12]
 800b654:	e7f9      	b.n	800b64a <__sread+0x16>
 800b656:	46c0      	nop			; (mov r8, r8)
 800b658:	ffffefff 	.word	0xffffefff

0800b65c <__swrite>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	001f      	movs	r7, r3
 800b660:	898b      	ldrh	r3, [r1, #12]
 800b662:	0005      	movs	r5, r0
 800b664:	000c      	movs	r4, r1
 800b666:	0016      	movs	r6, r2
 800b668:	05db      	lsls	r3, r3, #23
 800b66a:	d505      	bpl.n	800b678 <__swrite+0x1c>
 800b66c:	230e      	movs	r3, #14
 800b66e:	5ec9      	ldrsh	r1, [r1, r3]
 800b670:	2200      	movs	r2, #0
 800b672:	2302      	movs	r3, #2
 800b674:	f000 f874 	bl	800b760 <_lseek_r>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	4a05      	ldr	r2, [pc, #20]	; (800b690 <__swrite+0x34>)
 800b67c:	0028      	movs	r0, r5
 800b67e:	4013      	ands	r3, r2
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	0032      	movs	r2, r6
 800b684:	230e      	movs	r3, #14
 800b686:	5ee1      	ldrsh	r1, [r4, r3]
 800b688:	003b      	movs	r3, r7
 800b68a:	f000 f81f 	bl	800b6cc <_write_r>
 800b68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b690:	ffffefff 	.word	0xffffefff

0800b694 <__sseek>:
 800b694:	b570      	push	{r4, r5, r6, lr}
 800b696:	000c      	movs	r4, r1
 800b698:	250e      	movs	r5, #14
 800b69a:	5f49      	ldrsh	r1, [r1, r5]
 800b69c:	f000 f860 	bl	800b760 <_lseek_r>
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	1c42      	adds	r2, r0, #1
 800b6a4:	d103      	bne.n	800b6ae <__sseek+0x1a>
 800b6a6:	4a05      	ldr	r2, [pc, #20]	; (800b6bc <__sseek+0x28>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	81a3      	strh	r3, [r4, #12]
 800b6ac:	bd70      	pop	{r4, r5, r6, pc}
 800b6ae:	2280      	movs	r2, #128	; 0x80
 800b6b0:	0152      	lsls	r2, r2, #5
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	6560      	str	r0, [r4, #84]	; 0x54
 800b6b8:	e7f8      	b.n	800b6ac <__sseek+0x18>
 800b6ba:	46c0      	nop			; (mov r8, r8)
 800b6bc:	ffffefff 	.word	0xffffefff

0800b6c0 <__sclose>:
 800b6c0:	b510      	push	{r4, lr}
 800b6c2:	230e      	movs	r3, #14
 800b6c4:	5ec9      	ldrsh	r1, [r1, r3]
 800b6c6:	f000 f815 	bl	800b6f4 <_close_r>
 800b6ca:	bd10      	pop	{r4, pc}

0800b6cc <_write_r>:
 800b6cc:	b570      	push	{r4, r5, r6, lr}
 800b6ce:	0004      	movs	r4, r0
 800b6d0:	0008      	movs	r0, r1
 800b6d2:	0011      	movs	r1, r2
 800b6d4:	001a      	movs	r2, r3
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	4d05      	ldr	r5, [pc, #20]	; (800b6f0 <_write_r+0x24>)
 800b6da:	602b      	str	r3, [r5, #0]
 800b6dc:	f7f8 fecb 	bl	8004476 <_write>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d103      	bne.n	800b6ec <_write_r+0x20>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d000      	beq.n	800b6ec <_write_r+0x20>
 800b6ea:	6023      	str	r3, [r4, #0]
 800b6ec:	bd70      	pop	{r4, r5, r6, pc}
 800b6ee:	46c0      	nop			; (mov r8, r8)
 800b6f0:	200004d4 	.word	0x200004d4

0800b6f4 <_close_r>:
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	b570      	push	{r4, r5, r6, lr}
 800b6f8:	4d06      	ldr	r5, [pc, #24]	; (800b714 <_close_r+0x20>)
 800b6fa:	0004      	movs	r4, r0
 800b6fc:	0008      	movs	r0, r1
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	f7f8 fed5 	bl	80044ae <_close>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d103      	bne.n	800b710 <_close_r+0x1c>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d000      	beq.n	800b710 <_close_r+0x1c>
 800b70e:	6023      	str	r3, [r4, #0]
 800b710:	bd70      	pop	{r4, r5, r6, pc}
 800b712:	46c0      	nop			; (mov r8, r8)
 800b714:	200004d4 	.word	0x200004d4

0800b718 <_fstat_r>:
 800b718:	2300      	movs	r3, #0
 800b71a:	b570      	push	{r4, r5, r6, lr}
 800b71c:	4d06      	ldr	r5, [pc, #24]	; (800b738 <_fstat_r+0x20>)
 800b71e:	0004      	movs	r4, r0
 800b720:	0008      	movs	r0, r1
 800b722:	0011      	movs	r1, r2
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	f7f8 fecc 	bl	80044c2 <_fstat>
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	d103      	bne.n	800b736 <_fstat_r+0x1e>
 800b72e:	682b      	ldr	r3, [r5, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d000      	beq.n	800b736 <_fstat_r+0x1e>
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	bd70      	pop	{r4, r5, r6, pc}
 800b738:	200004d4 	.word	0x200004d4

0800b73c <_isatty_r>:
 800b73c:	2300      	movs	r3, #0
 800b73e:	b570      	push	{r4, r5, r6, lr}
 800b740:	4d06      	ldr	r5, [pc, #24]	; (800b75c <_isatty_r+0x20>)
 800b742:	0004      	movs	r4, r0
 800b744:	0008      	movs	r0, r1
 800b746:	602b      	str	r3, [r5, #0]
 800b748:	f7f8 fec9 	bl	80044de <_isatty>
 800b74c:	1c43      	adds	r3, r0, #1
 800b74e:	d103      	bne.n	800b758 <_isatty_r+0x1c>
 800b750:	682b      	ldr	r3, [r5, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d000      	beq.n	800b758 <_isatty_r+0x1c>
 800b756:	6023      	str	r3, [r4, #0]
 800b758:	bd70      	pop	{r4, r5, r6, pc}
 800b75a:	46c0      	nop			; (mov r8, r8)
 800b75c:	200004d4 	.word	0x200004d4

0800b760 <_lseek_r>:
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	0004      	movs	r4, r0
 800b764:	0008      	movs	r0, r1
 800b766:	0011      	movs	r1, r2
 800b768:	001a      	movs	r2, r3
 800b76a:	2300      	movs	r3, #0
 800b76c:	4d05      	ldr	r5, [pc, #20]	; (800b784 <_lseek_r+0x24>)
 800b76e:	602b      	str	r3, [r5, #0]
 800b770:	f7f8 febe 	bl	80044f0 <_lseek>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d103      	bne.n	800b780 <_lseek_r+0x20>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d000      	beq.n	800b780 <_lseek_r+0x20>
 800b77e:	6023      	str	r3, [r4, #0]
 800b780:	bd70      	pop	{r4, r5, r6, pc}
 800b782:	46c0      	nop			; (mov r8, r8)
 800b784:	200004d4 	.word	0x200004d4

0800b788 <_read_r>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	0004      	movs	r4, r0
 800b78c:	0008      	movs	r0, r1
 800b78e:	0011      	movs	r1, r2
 800b790:	001a      	movs	r2, r3
 800b792:	2300      	movs	r3, #0
 800b794:	4d05      	ldr	r5, [pc, #20]	; (800b7ac <_read_r+0x24>)
 800b796:	602b      	str	r3, [r5, #0]
 800b798:	f7f8 fe50 	bl	800443c <_read>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d103      	bne.n	800b7a8 <_read_r+0x20>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d000      	beq.n	800b7a8 <_read_r+0x20>
 800b7a6:	6023      	str	r3, [r4, #0]
 800b7a8:	bd70      	pop	{r4, r5, r6, pc}
 800b7aa:	46c0      	nop			; (mov r8, r8)
 800b7ac:	200004d4 	.word	0x200004d4

0800b7b0 <_init>:
 800b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b2:	46c0      	nop			; (mov r8, r8)
 800b7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7b6:	bc08      	pop	{r3}
 800b7b8:	469e      	mov	lr, r3
 800b7ba:	4770      	bx	lr

0800b7bc <_fini>:
 800b7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7be:	46c0      	nop			; (mov r8, r8)
 800b7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c2:	bc08      	pop	{r3}
 800b7c4:	469e      	mov	lr, r3
 800b7c6:	4770      	bx	lr
