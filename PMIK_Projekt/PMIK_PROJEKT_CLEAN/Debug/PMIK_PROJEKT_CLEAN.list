
PMIK_PROJEKT_CLEAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b31c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800b3e0  0800b3e0  0001b3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9ec  0800b9ec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9ec  0800b9ec  0001b9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9f4  0800b9f4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9f4  0800b9f4  0001b9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001e4  0800bbe0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800bbe0  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001331d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c69  00000000  00000000  00033529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00036198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  000372d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ec9  00000000  00000000  000382b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152cc  00000000  00000000  0003e179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008983c  00000000  00000000  00053445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcc81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b0  00000000  00000000  000dccd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b3c4 	.word	0x0800b3c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800b3c4 	.word	0x0800b3c4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff81 	bl	8002344 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fed1 	bl	80021f4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff73 	bl	8002344 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ff69 	bl	8002344 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fef9 	bl	8002278 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 feef 	bl	8002278 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc31 	bl	8000d28 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc3d 	bl	8000d74 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc33 	bl	8000d74 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	; 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff31 	bl	8001430 <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	; 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd7d 	bl	80010d4 <__aeabi_fsub>
 80005da:	f000 ff29 	bl	8001430 <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fd21 	bl	8003044 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 f96a 	bl	80028e4 <__aeabi_dsub>
 8000610:	f002 fd18 	bl	8003044 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fe78 	bl	8003338 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fe73 	bl	8003338 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	469b      	mov	fp, r3
 800065a:	d433      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065c:	465a      	mov	r2, fp
 800065e:	4653      	mov	r3, sl
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83a      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e078      	b.n	8000768 <__udivmoddi4+0x144>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e075      	b.n	800076e <__udivmoddi4+0x14a>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e028      	b.n	80006ee <__udivmoddi4+0xca>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	4652      	mov	r2, sl
 80006cc:	40da      	lsrs	r2, r3
 80006ce:	4641      	mov	r1, r8
 80006d0:	0013      	movs	r3, r2
 80006d2:	464a      	mov	r2, r9
 80006d4:	408a      	lsls	r2, r1
 80006d6:	0017      	movs	r7, r2
 80006d8:	4642      	mov	r2, r8
 80006da:	431f      	orrs	r7, r3
 80006dc:	4653      	mov	r3, sl
 80006de:	4093      	lsls	r3, r2
 80006e0:	001e      	movs	r6, r3
 80006e2:	42af      	cmp	r7, r5
 80006e4:	d9c4      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2300      	movs	r3, #0
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	4643      	mov	r3, r8
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0d9      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f4:	07fb      	lsls	r3, r7, #31
 80006f6:	0872      	lsrs	r2, r6, #1
 80006f8:	431a      	orrs	r2, r3
 80006fa:	4646      	mov	r6, r8
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	e00e      	b.n	800071e <__udivmoddi4+0xfa>
 8000700:	42ab      	cmp	r3, r5
 8000702:	d101      	bne.n	8000708 <__udivmoddi4+0xe4>
 8000704:	42a2      	cmp	r2, r4
 8000706:	d80c      	bhi.n	8000722 <__udivmoddi4+0xfe>
 8000708:	1aa4      	subs	r4, r4, r2
 800070a:	419d      	sbcs	r5, r3
 800070c:	2001      	movs	r0, #1
 800070e:	1924      	adds	r4, r4, r4
 8000710:	416d      	adcs	r5, r5
 8000712:	2100      	movs	r1, #0
 8000714:	3e01      	subs	r6, #1
 8000716:	1824      	adds	r4, r4, r0
 8000718:	414d      	adcs	r5, r1
 800071a:	2e00      	cmp	r6, #0
 800071c:	d006      	beq.n	800072c <__udivmoddi4+0x108>
 800071e:	42ab      	cmp	r3, r5
 8000720:	d9ee      	bls.n	8000700 <__udivmoddi4+0xdc>
 8000722:	3e01      	subs	r6, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2e00      	cmp	r6, #0
 800072a:	d1f8      	bne.n	800071e <__udivmoddi4+0xfa>
 800072c:	9800      	ldr	r0, [sp, #0]
 800072e:	9901      	ldr	r1, [sp, #4]
 8000730:	465b      	mov	r3, fp
 8000732:	1900      	adds	r0, r0, r4
 8000734:	4169      	adcs	r1, r5
 8000736:	2b00      	cmp	r3, #0
 8000738:	db24      	blt.n	8000784 <__udivmoddi4+0x160>
 800073a:	002b      	movs	r3, r5
 800073c:	465a      	mov	r2, fp
 800073e:	4644      	mov	r4, r8
 8000740:	40d3      	lsrs	r3, r2
 8000742:	002a      	movs	r2, r5
 8000744:	40e2      	lsrs	r2, r4
 8000746:	001c      	movs	r4, r3
 8000748:	465b      	mov	r3, fp
 800074a:	0015      	movs	r5, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	db2a      	blt.n	80007a6 <__udivmoddi4+0x182>
 8000750:	0026      	movs	r6, r4
 8000752:	409e      	lsls	r6, r3
 8000754:	0033      	movs	r3, r6
 8000756:	0026      	movs	r6, r4
 8000758:	4647      	mov	r7, r8
 800075a:	40be      	lsls	r6, r7
 800075c:	0032      	movs	r2, r6
 800075e:	1a80      	subs	r0, r0, r2
 8000760:	4199      	sbcs	r1, r3
 8000762:	9000      	str	r0, [sp, #0]
 8000764:	9101      	str	r1, [sp, #4]
 8000766:	e79f      	b.n	80006a8 <__udivmoddi4+0x84>
 8000768:	42a3      	cmp	r3, r4
 800076a:	d8bc      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 800076c:	e783      	b.n	8000676 <__udivmoddi4+0x52>
 800076e:	4642      	mov	r2, r8
 8000770:	2320      	movs	r3, #32
 8000772:	2100      	movs	r1, #0
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	2200      	movs	r2, #0
 8000778:	9100      	str	r1, [sp, #0]
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	40da      	lsrs	r2, r3
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	e786      	b.n	8000692 <__udivmoddi4+0x6e>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	002a      	movs	r2, r5
 800078c:	4646      	mov	r6, r8
 800078e:	409a      	lsls	r2, r3
 8000790:	0023      	movs	r3, r4
 8000792:	40f3      	lsrs	r3, r6
 8000794:	4644      	mov	r4, r8
 8000796:	4313      	orrs	r3, r2
 8000798:	002a      	movs	r2, r5
 800079a:	40e2      	lsrs	r2, r4
 800079c:	001c      	movs	r4, r3
 800079e:	465b      	mov	r3, fp
 80007a0:	0015      	movs	r5, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dad4      	bge.n	8000750 <__udivmoddi4+0x12c>
 80007a6:	4642      	mov	r2, r8
 80007a8:	002f      	movs	r7, r5
 80007aa:	2320      	movs	r3, #32
 80007ac:	0026      	movs	r6, r4
 80007ae:	4097      	lsls	r7, r2
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	40de      	lsrs	r6, r3
 80007b4:	003b      	movs	r3, r7
 80007b6:	4333      	orrs	r3, r6
 80007b8:	e7cd      	b.n	8000756 <__udivmoddi4+0x132>
 80007ba:	46c0      	nop			; (mov r8, r8)

080007bc <__aeabi_fadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	46c6      	mov	lr, r8
 80007c0:	0243      	lsls	r3, r0, #9
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	024e      	lsls	r6, r1, #9
 80007c6:	0045      	lsls	r5, r0, #1
 80007c8:	004f      	lsls	r7, r1, #1
 80007ca:	00da      	lsls	r2, r3, #3
 80007cc:	0fc4      	lsrs	r4, r0, #31
 80007ce:	469c      	mov	ip, r3
 80007d0:	0a70      	lsrs	r0, r6, #9
 80007d2:	4690      	mov	r8, r2
 80007d4:	b500      	push	{lr}
 80007d6:	0e2d      	lsrs	r5, r5, #24
 80007d8:	0e3f      	lsrs	r7, r7, #24
 80007da:	0fc9      	lsrs	r1, r1, #31
 80007dc:	09b6      	lsrs	r6, r6, #6
 80007de:	428c      	cmp	r4, r1
 80007e0:	d04b      	beq.n	800087a <__aeabi_fadd+0xbe>
 80007e2:	1bea      	subs	r2, r5, r7
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	dd36      	ble.n	8000856 <__aeabi_fadd+0x9a>
 80007e8:	2f00      	cmp	r7, #0
 80007ea:	d061      	beq.n	80008b0 <__aeabi_fadd+0xf4>
 80007ec:	2dff      	cmp	r5, #255	; 0xff
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fadd+0x36>
 80007f0:	e0ad      	b.n	800094e <__aeabi_fadd+0x192>
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	04db      	lsls	r3, r3, #19
 80007f6:	431e      	orrs	r6, r3
 80007f8:	2a1b      	cmp	r2, #27
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fadd+0x42>
 80007fc:	e0d3      	b.n	80009a6 <__aeabi_fadd+0x1ea>
 80007fe:	2001      	movs	r0, #1
 8000800:	4643      	mov	r3, r8
 8000802:	1a18      	subs	r0, r3, r0
 8000804:	0143      	lsls	r3, r0, #5
 8000806:	d400      	bmi.n	800080a <__aeabi_fadd+0x4e>
 8000808:	e08c      	b.n	8000924 <__aeabi_fadd+0x168>
 800080a:	0180      	lsls	r0, r0, #6
 800080c:	0987      	lsrs	r7, r0, #6
 800080e:	0038      	movs	r0, r7
 8000810:	f002 fd74 	bl	80032fc <__clzsi2>
 8000814:	3805      	subs	r0, #5
 8000816:	4087      	lsls	r7, r0
 8000818:	4285      	cmp	r5, r0
 800081a:	dc00      	bgt.n	800081e <__aeabi_fadd+0x62>
 800081c:	e0b6      	b.n	800098c <__aeabi_fadd+0x1d0>
 800081e:	1a2d      	subs	r5, r5, r0
 8000820:	48b3      	ldr	r0, [pc, #716]	; (8000af0 <__aeabi_fadd+0x334>)
 8000822:	4038      	ands	r0, r7
 8000824:	0743      	lsls	r3, r0, #29
 8000826:	d004      	beq.n	8000832 <__aeabi_fadd+0x76>
 8000828:	230f      	movs	r3, #15
 800082a:	4003      	ands	r3, r0
 800082c:	2b04      	cmp	r3, #4
 800082e:	d000      	beq.n	8000832 <__aeabi_fadd+0x76>
 8000830:	3004      	adds	r0, #4
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x7c>
 8000836:	e078      	b.n	800092a <__aeabi_fadd+0x16e>
 8000838:	1c6a      	adds	r2, r5, #1
 800083a:	2dfe      	cmp	r5, #254	; 0xfe
 800083c:	d065      	beq.n	800090a <__aeabi_fadd+0x14e>
 800083e:	0180      	lsls	r0, r0, #6
 8000840:	0a43      	lsrs	r3, r0, #9
 8000842:	469c      	mov	ip, r3
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	4663      	mov	r3, ip
 8000848:	05d0      	lsls	r0, r2, #23
 800084a:	4318      	orrs	r0, r3
 800084c:	07e4      	lsls	r4, r4, #31
 800084e:	4320      	orrs	r0, r4
 8000850:	bc80      	pop	{r7}
 8000852:	46b8      	mov	r8, r7
 8000854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000856:	2a00      	cmp	r2, #0
 8000858:	d035      	beq.n	80008c6 <__aeabi_fadd+0x10a>
 800085a:	1b7a      	subs	r2, r7, r5
 800085c:	2d00      	cmp	r5, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_fadd+0xa6>
 8000860:	e0af      	b.n	80009c2 <__aeabi_fadd+0x206>
 8000862:	4643      	mov	r3, r8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0xae>
 8000868:	e0a7      	b.n	80009ba <__aeabi_fadd+0x1fe>
 800086a:	1e53      	subs	r3, r2, #1
 800086c:	2a01      	cmp	r2, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0xb6>
 8000870:	e12f      	b.n	8000ad2 <__aeabi_fadd+0x316>
 8000872:	2aff      	cmp	r2, #255	; 0xff
 8000874:	d069      	beq.n	800094a <__aeabi_fadd+0x18e>
 8000876:	001a      	movs	r2, r3
 8000878:	e0aa      	b.n	80009d0 <__aeabi_fadd+0x214>
 800087a:	1be9      	subs	r1, r5, r7
 800087c:	2900      	cmp	r1, #0
 800087e:	dd70      	ble.n	8000962 <__aeabi_fadd+0x1a6>
 8000880:	2f00      	cmp	r7, #0
 8000882:	d037      	beq.n	80008f4 <__aeabi_fadd+0x138>
 8000884:	2dff      	cmp	r5, #255	; 0xff
 8000886:	d062      	beq.n	800094e <__aeabi_fadd+0x192>
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	04db      	lsls	r3, r3, #19
 800088c:	431e      	orrs	r6, r3
 800088e:	291b      	cmp	r1, #27
 8000890:	dc00      	bgt.n	8000894 <__aeabi_fadd+0xd8>
 8000892:	e0b0      	b.n	80009f6 <__aeabi_fadd+0x23a>
 8000894:	2001      	movs	r0, #1
 8000896:	4440      	add	r0, r8
 8000898:	0143      	lsls	r3, r0, #5
 800089a:	d543      	bpl.n	8000924 <__aeabi_fadd+0x168>
 800089c:	3501      	adds	r5, #1
 800089e:	2dff      	cmp	r5, #255	; 0xff
 80008a0:	d033      	beq.n	800090a <__aeabi_fadd+0x14e>
 80008a2:	2301      	movs	r3, #1
 80008a4:	4a93      	ldr	r2, [pc, #588]	; (8000af4 <__aeabi_fadd+0x338>)
 80008a6:	4003      	ands	r3, r0
 80008a8:	0840      	lsrs	r0, r0, #1
 80008aa:	4010      	ands	r0, r2
 80008ac:	4318      	orrs	r0, r3
 80008ae:	e7b9      	b.n	8000824 <__aeabi_fadd+0x68>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e083      	b.n	80009be <__aeabi_fadd+0x202>
 80008b6:	1e51      	subs	r1, r2, #1
 80008b8:	2a01      	cmp	r2, #1
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x102>
 80008bc:	e0d8      	b.n	8000a70 <__aeabi_fadd+0x2b4>
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d045      	beq.n	800094e <__aeabi_fadd+0x192>
 80008c2:	000a      	movs	r2, r1
 80008c4:	e798      	b.n	80007f8 <__aeabi_fadd+0x3c>
 80008c6:	27fe      	movs	r7, #254	; 0xfe
 80008c8:	1c6a      	adds	r2, r5, #1
 80008ca:	4217      	tst	r7, r2
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fadd+0x114>
 80008ce:	e086      	b.n	80009de <__aeabi_fadd+0x222>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d000      	beq.n	80008d6 <__aeabi_fadd+0x11a>
 80008d4:	e0b7      	b.n	8000a46 <__aeabi_fadd+0x28a>
 80008d6:	4643      	mov	r3, r8
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0x122>
 80008dc:	e0f3      	b.n	8000ac6 <__aeabi_fadd+0x30a>
 80008de:	2200      	movs	r2, #0
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d0b0      	beq.n	8000846 <__aeabi_fadd+0x8a>
 80008e4:	1b98      	subs	r0, r3, r6
 80008e6:	0143      	lsls	r3, r0, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fadd+0x130>
 80008ea:	e0fa      	b.n	8000ae2 <__aeabi_fadd+0x326>
 80008ec:	4643      	mov	r3, r8
 80008ee:	000c      	movs	r4, r1
 80008f0:	1af0      	subs	r0, r6, r3
 80008f2:	e797      	b.n	8000824 <__aeabi_fadd+0x68>
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x13e>
 80008f8:	e0c8      	b.n	8000a8c <__aeabi_fadd+0x2d0>
 80008fa:	1e4a      	subs	r2, r1, #1
 80008fc:	2901      	cmp	r1, #1
 80008fe:	d100      	bne.n	8000902 <__aeabi_fadd+0x146>
 8000900:	e0ae      	b.n	8000a60 <__aeabi_fadd+0x2a4>
 8000902:	29ff      	cmp	r1, #255	; 0xff
 8000904:	d023      	beq.n	800094e <__aeabi_fadd+0x192>
 8000906:	0011      	movs	r1, r2
 8000908:	e7c1      	b.n	800088e <__aeabi_fadd+0xd2>
 800090a:	2300      	movs	r3, #0
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	469c      	mov	ip, r3
 8000910:	e799      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000912:	21fe      	movs	r1, #254	; 0xfe
 8000914:	1c6a      	adds	r2, r5, #1
 8000916:	4211      	tst	r1, r2
 8000918:	d077      	beq.n	8000a0a <__aeabi_fadd+0x24e>
 800091a:	2aff      	cmp	r2, #255	; 0xff
 800091c:	d0f5      	beq.n	800090a <__aeabi_fadd+0x14e>
 800091e:	0015      	movs	r5, r2
 8000920:	4446      	add	r6, r8
 8000922:	0870      	lsrs	r0, r6, #1
 8000924:	0743      	lsls	r3, r0, #29
 8000926:	d000      	beq.n	800092a <__aeabi_fadd+0x16e>
 8000928:	e77e      	b.n	8000828 <__aeabi_fadd+0x6c>
 800092a:	08c3      	lsrs	r3, r0, #3
 800092c:	2dff      	cmp	r5, #255	; 0xff
 800092e:	d00e      	beq.n	800094e <__aeabi_fadd+0x192>
 8000930:	025b      	lsls	r3, r3, #9
 8000932:	0a5b      	lsrs	r3, r3, #9
 8000934:	469c      	mov	ip, r3
 8000936:	b2ea      	uxtb	r2, r5
 8000938:	e785      	b.n	8000846 <__aeabi_fadd+0x8a>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d007      	beq.n	800094e <__aeabi_fadd+0x192>
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	03d2      	lsls	r2, r2, #15
 8000942:	4213      	tst	r3, r2
 8000944:	d003      	beq.n	800094e <__aeabi_fadd+0x192>
 8000946:	4210      	tst	r0, r2
 8000948:	d101      	bne.n	800094e <__aeabi_fadd+0x192>
 800094a:	000c      	movs	r4, r1
 800094c:	0003      	movs	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0db      	beq.n	800090a <__aeabi_fadd+0x14e>
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	03c0      	lsls	r0, r0, #15
 8000956:	4318      	orrs	r0, r3
 8000958:	0240      	lsls	r0, r0, #9
 800095a:	0a43      	lsrs	r3, r0, #9
 800095c:	469c      	mov	ip, r3
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	e771      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000962:	2900      	cmp	r1, #0
 8000964:	d0d5      	beq.n	8000912 <__aeabi_fadd+0x156>
 8000966:	1b7a      	subs	r2, r7, r5
 8000968:	2d00      	cmp	r5, #0
 800096a:	d160      	bne.n	8000a2e <__aeabi_fadd+0x272>
 800096c:	4643      	mov	r3, r8
 800096e:	2b00      	cmp	r3, #0
 8000970:	d024      	beq.n	80009bc <__aeabi_fadd+0x200>
 8000972:	1e53      	subs	r3, r2, #1
 8000974:	2a01      	cmp	r2, #1
 8000976:	d073      	beq.n	8000a60 <__aeabi_fadd+0x2a4>
 8000978:	2aff      	cmp	r2, #255	; 0xff
 800097a:	d0e7      	beq.n	800094c <__aeabi_fadd+0x190>
 800097c:	001a      	movs	r2, r3
 800097e:	2a1b      	cmp	r2, #27
 8000980:	dc00      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 8000982:	e085      	b.n	8000a90 <__aeabi_fadd+0x2d4>
 8000984:	2001      	movs	r0, #1
 8000986:	003d      	movs	r5, r7
 8000988:	1980      	adds	r0, r0, r6
 800098a:	e785      	b.n	8000898 <__aeabi_fadd+0xdc>
 800098c:	2320      	movs	r3, #32
 800098e:	003a      	movs	r2, r7
 8000990:	1b45      	subs	r5, r0, r5
 8000992:	0038      	movs	r0, r7
 8000994:	3501      	adds	r5, #1
 8000996:	40ea      	lsrs	r2, r5
 8000998:	1b5d      	subs	r5, r3, r5
 800099a:	40a8      	lsls	r0, r5
 800099c:	1e43      	subs	r3, r0, #1
 800099e:	4198      	sbcs	r0, r3
 80009a0:	2500      	movs	r5, #0
 80009a2:	4310      	orrs	r0, r2
 80009a4:	e73e      	b.n	8000824 <__aeabi_fadd+0x68>
 80009a6:	2320      	movs	r3, #32
 80009a8:	0030      	movs	r0, r6
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	0031      	movs	r1, r6
 80009ae:	4098      	lsls	r0, r3
 80009b0:	40d1      	lsrs	r1, r2
 80009b2:	1e43      	subs	r3, r0, #1
 80009b4:	4198      	sbcs	r0, r3
 80009b6:	4308      	orrs	r0, r1
 80009b8:	e722      	b.n	8000800 <__aeabi_fadd+0x44>
 80009ba:	000c      	movs	r4, r1
 80009bc:	0003      	movs	r3, r0
 80009be:	0015      	movs	r5, r2
 80009c0:	e7b4      	b.n	800092c <__aeabi_fadd+0x170>
 80009c2:	2fff      	cmp	r7, #255	; 0xff
 80009c4:	d0c1      	beq.n	800094a <__aeabi_fadd+0x18e>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	4640      	mov	r0, r8
 80009ca:	04db      	lsls	r3, r3, #19
 80009cc:	4318      	orrs	r0, r3
 80009ce:	4680      	mov	r8, r0
 80009d0:	2a1b      	cmp	r2, #27
 80009d2:	dd51      	ble.n	8000a78 <__aeabi_fadd+0x2bc>
 80009d4:	2001      	movs	r0, #1
 80009d6:	000c      	movs	r4, r1
 80009d8:	003d      	movs	r5, r7
 80009da:	1a30      	subs	r0, r6, r0
 80009dc:	e712      	b.n	8000804 <__aeabi_fadd+0x48>
 80009de:	4643      	mov	r3, r8
 80009e0:	1b9f      	subs	r7, r3, r6
 80009e2:	017b      	lsls	r3, r7, #5
 80009e4:	d42b      	bmi.n	8000a3e <__aeabi_fadd+0x282>
 80009e6:	2f00      	cmp	r7, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_fadd+0x230>
 80009ea:	e710      	b.n	800080e <__aeabi_fadd+0x52>
 80009ec:	2300      	movs	r3, #0
 80009ee:	2400      	movs	r4, #0
 80009f0:	2200      	movs	r2, #0
 80009f2:	469c      	mov	ip, r3
 80009f4:	e727      	b.n	8000846 <__aeabi_fadd+0x8a>
 80009f6:	2320      	movs	r3, #32
 80009f8:	0032      	movs	r2, r6
 80009fa:	0030      	movs	r0, r6
 80009fc:	40ca      	lsrs	r2, r1
 80009fe:	1a59      	subs	r1, r3, r1
 8000a00:	4088      	lsls	r0, r1
 8000a02:	1e43      	subs	r3, r0, #1
 8000a04:	4198      	sbcs	r0, r3
 8000a06:	4310      	orrs	r0, r2
 8000a08:	e745      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d14a      	bne.n	8000aa4 <__aeabi_fadd+0x2e8>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d063      	beq.n	8000adc <__aeabi_fadd+0x320>
 8000a14:	2200      	movs	r2, #0
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e714      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000a1c:	0030      	movs	r0, r6
 8000a1e:	4440      	add	r0, r8
 8000a20:	0143      	lsls	r3, r0, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x26a>
 8000a24:	e77e      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a26:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <__aeabi_fadd+0x334>)
 8000a28:	3501      	adds	r5, #1
 8000a2a:	4018      	ands	r0, r3
 8000a2c:	e77a      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a2e:	2fff      	cmp	r7, #255	; 0xff
 8000a30:	d08c      	beq.n	800094c <__aeabi_fadd+0x190>
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	4641      	mov	r1, r8
 8000a36:	04db      	lsls	r3, r3, #19
 8000a38:	4319      	orrs	r1, r3
 8000a3a:	4688      	mov	r8, r1
 8000a3c:	e79f      	b.n	800097e <__aeabi_fadd+0x1c2>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	000c      	movs	r4, r1
 8000a42:	1af7      	subs	r7, r6, r3
 8000a44:	e6e3      	b.n	800080e <__aeabi_fadd+0x52>
 8000a46:	4642      	mov	r2, r8
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fadd+0x292>
 8000a4c:	e775      	b.n	800093a <__aeabi_fadd+0x17e>
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fadd+0x298>
 8000a52:	e77a      	b.n	800094a <__aeabi_fadd+0x18e>
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	03db      	lsls	r3, r3, #15
 8000a58:	2400      	movs	r4, #0
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	e6f2      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000a60:	0030      	movs	r0, r6
 8000a62:	4440      	add	r0, r8
 8000a64:	2501      	movs	r5, #1
 8000a66:	0143      	lsls	r3, r0, #5
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_fadd+0x2b0>
 8000a6a:	e75b      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a6c:	2502      	movs	r5, #2
 8000a6e:	e718      	b.n	80008a2 <__aeabi_fadd+0xe6>
 8000a70:	4643      	mov	r3, r8
 8000a72:	2501      	movs	r5, #1
 8000a74:	1b98      	subs	r0, r3, r6
 8000a76:	e6c5      	b.n	8000804 <__aeabi_fadd+0x48>
 8000a78:	2320      	movs	r3, #32
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	40d4      	lsrs	r4, r2
 8000a80:	1a9a      	subs	r2, r3, r2
 8000a82:	4090      	lsls	r0, r2
 8000a84:	1e43      	subs	r3, r0, #1
 8000a86:	4198      	sbcs	r0, r3
 8000a88:	4320      	orrs	r0, r4
 8000a8a:	e7a4      	b.n	80009d6 <__aeabi_fadd+0x21a>
 8000a8c:	000d      	movs	r5, r1
 8000a8e:	e74d      	b.n	800092c <__aeabi_fadd+0x170>
 8000a90:	2320      	movs	r3, #32
 8000a92:	4641      	mov	r1, r8
 8000a94:	4640      	mov	r0, r8
 8000a96:	40d1      	lsrs	r1, r2
 8000a98:	1a9a      	subs	r2, r3, r2
 8000a9a:	4090      	lsls	r0, r2
 8000a9c:	1e43      	subs	r3, r0, #1
 8000a9e:	4198      	sbcs	r0, r3
 8000aa0:	4308      	orrs	r0, r1
 8000aa2:	e770      	b.n	8000986 <__aeabi_fadd+0x1ca>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fadd+0x2f0>
 8000aaa:	e74f      	b.n	800094c <__aeabi_fadd+0x190>
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000ab0:	e74d      	b.n	800094e <__aeabi_fadd+0x192>
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	03d2      	lsls	r2, r2, #15
 8000ab6:	4213      	tst	r3, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x300>
 8000aba:	e748      	b.n	800094e <__aeabi_fadd+0x192>
 8000abc:	4210      	tst	r0, r2
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fadd+0x306>
 8000ac0:	e745      	b.n	800094e <__aeabi_fadd+0x192>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	e743      	b.n	800094e <__aeabi_fadd+0x192>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d090      	beq.n	80009ec <__aeabi_fadd+0x230>
 8000aca:	000c      	movs	r4, r1
 8000acc:	4684      	mov	ip, r0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	e6b9      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	1af0      	subs	r0, r6, r3
 8000ad8:	3501      	adds	r5, #1
 8000ada:	e693      	b.n	8000804 <__aeabi_fadd+0x48>
 8000adc:	4684      	mov	ip, r0
 8000ade:	2200      	movs	r2, #0
 8000ae0:	e6b1      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_fadd+0x32c>
 8000ae6:	e71d      	b.n	8000924 <__aeabi_fadd+0x168>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2400      	movs	r4, #0
 8000aec:	469c      	mov	ip, r3
 8000aee:	e6aa      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000af0:	fbffffff 	.word	0xfbffffff
 8000af4:	7dffffff 	.word	0x7dffffff

08000af8 <__aeabi_fdiv>:
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	464f      	mov	r7, r9
 8000afc:	4646      	mov	r6, r8
 8000afe:	46d6      	mov	lr, sl
 8000b00:	0245      	lsls	r5, r0, #9
 8000b02:	b5c0      	push	{r6, r7, lr}
 8000b04:	0047      	lsls	r7, r0, #1
 8000b06:	1c0c      	adds	r4, r1, #0
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	0e3f      	lsrs	r7, r7, #24
 8000b0c:	0fc6      	lsrs	r6, r0, #31
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fdiv+0x1c>
 8000b12:	e070      	b.n	8000bf6 <__aeabi_fdiv+0xfe>
 8000b14:	2fff      	cmp	r7, #255	; 0xff
 8000b16:	d100      	bne.n	8000b1a <__aeabi_fdiv+0x22>
 8000b18:	e075      	b.n	8000c06 <__aeabi_fdiv+0x10e>
 8000b1a:	00eb      	lsls	r3, r5, #3
 8000b1c:	2580      	movs	r5, #128	; 0x80
 8000b1e:	04ed      	lsls	r5, r5, #19
 8000b20:	431d      	orrs	r5, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	4699      	mov	r9, r3
 8000b26:	469a      	mov	sl, r3
 8000b28:	3f7f      	subs	r7, #127	; 0x7f
 8000b2a:	0260      	lsls	r0, r4, #9
 8000b2c:	0a43      	lsrs	r3, r0, #9
 8000b2e:	4698      	mov	r8, r3
 8000b30:	0063      	lsls	r3, r4, #1
 8000b32:	0e1b      	lsrs	r3, r3, #24
 8000b34:	0fe4      	lsrs	r4, r4, #31
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d04e      	beq.n	8000bd8 <__aeabi_fdiv+0xe0>
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d046      	beq.n	8000bcc <__aeabi_fdiv+0xd4>
 8000b3e:	4642      	mov	r2, r8
 8000b40:	00d0      	lsls	r0, r2, #3
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	04d2      	lsls	r2, r2, #19
 8000b46:	4302      	orrs	r2, r0
 8000b48:	4690      	mov	r8, r2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	3b7f      	subs	r3, #127	; 0x7f
 8000b4e:	0031      	movs	r1, r6
 8000b50:	1aff      	subs	r7, r7, r3
 8000b52:	464b      	mov	r3, r9
 8000b54:	4061      	eors	r1, r4
 8000b56:	b2c9      	uxtb	r1, r1
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	d900      	bls.n	8000b60 <__aeabi_fdiv+0x68>
 8000b5e:	e0b5      	b.n	8000ccc <__aeabi_fdiv+0x1d4>
 8000b60:	486e      	ldr	r0, [pc, #440]	; (8000d1c <__aeabi_fdiv+0x224>)
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	58c3      	ldr	r3, [r0, r3]
 8000b66:	469f      	mov	pc, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4698      	mov	r8, r3
 8000b6c:	0026      	movs	r6, r4
 8000b6e:	4645      	mov	r5, r8
 8000b70:	4692      	mov	sl, r2
 8000b72:	4653      	mov	r3, sl
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d100      	bne.n	8000b7a <__aeabi_fdiv+0x82>
 8000b78:	e089      	b.n	8000c8e <__aeabi_fdiv+0x196>
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fdiv+0x88>
 8000b7e:	e09e      	b.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d018      	beq.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000b84:	003b      	movs	r3, r7
 8000b86:	337f      	adds	r3, #127	; 0x7f
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dd69      	ble.n	8000c60 <__aeabi_fdiv+0x168>
 8000b8c:	076a      	lsls	r2, r5, #29
 8000b8e:	d004      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b90:	220f      	movs	r2, #15
 8000b92:	402a      	ands	r2, r5
 8000b94:	2a04      	cmp	r2, #4
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b98:	3504      	adds	r5, #4
 8000b9a:	012a      	lsls	r2, r5, #4
 8000b9c:	d503      	bpl.n	8000ba6 <__aeabi_fdiv+0xae>
 8000b9e:	4b60      	ldr	r3, [pc, #384]	; (8000d20 <__aeabi_fdiv+0x228>)
 8000ba0:	401d      	ands	r5, r3
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	3380      	adds	r3, #128	; 0x80
 8000ba6:	2bfe      	cmp	r3, #254	; 0xfe
 8000ba8:	dd00      	ble.n	8000bac <__aeabi_fdiv+0xb4>
 8000baa:	e070      	b.n	8000c8e <__aeabi_fdiv+0x196>
 8000bac:	01ad      	lsls	r5, r5, #6
 8000bae:	0a6d      	lsrs	r5, r5, #9
 8000bb0:	b2d8      	uxtb	r0, r3
 8000bb2:	e002      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000bb4:	000e      	movs	r6, r1
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	2500      	movs	r5, #0
 8000bba:	05c0      	lsls	r0, r0, #23
 8000bbc:	4328      	orrs	r0, r5
 8000bbe:	07f6      	lsls	r6, r6, #31
 8000bc0:	4330      	orrs	r0, r6
 8000bc2:	bce0      	pop	{r5, r6, r7}
 8000bc4:	46ba      	mov	sl, r7
 8000bc6:	46b1      	mov	r9, r6
 8000bc8:	46a8      	mov	r8, r5
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	4643      	mov	r3, r8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d13f      	bne.n	8000c52 <__aeabi_fdiv+0x15a>
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	3fff      	subs	r7, #255	; 0xff
 8000bd6:	e003      	b.n	8000be0 <__aeabi_fdiv+0xe8>
 8000bd8:	4643      	mov	r3, r8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d12d      	bne.n	8000c3a <__aeabi_fdiv+0x142>
 8000bde:	2201      	movs	r2, #1
 8000be0:	0031      	movs	r1, r6
 8000be2:	464b      	mov	r3, r9
 8000be4:	4061      	eors	r1, r4
 8000be6:	b2c9      	uxtb	r1, r1
 8000be8:	4313      	orrs	r3, r2
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	d834      	bhi.n	8000c58 <__aeabi_fdiv+0x160>
 8000bee:	484d      	ldr	r0, [pc, #308]	; (8000d24 <__aeabi_fdiv+0x22c>)
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	58c3      	ldr	r3, [r0, r3]
 8000bf4:	469f      	mov	pc, r3
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d113      	bne.n	8000c22 <__aeabi_fdiv+0x12a>
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	4699      	mov	r9, r3
 8000bfe:	3b03      	subs	r3, #3
 8000c00:	2700      	movs	r7, #0
 8000c02:	469a      	mov	sl, r3
 8000c04:	e791      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d105      	bne.n	8000c16 <__aeabi_fdiv+0x11e>
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	4699      	mov	r9, r3
 8000c0e:	3b06      	subs	r3, #6
 8000c10:	27ff      	movs	r7, #255	; 0xff
 8000c12:	469a      	mov	sl, r3
 8000c14:	e789      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c16:	230c      	movs	r3, #12
 8000c18:	4699      	mov	r9, r3
 8000c1a:	3b09      	subs	r3, #9
 8000c1c:	27ff      	movs	r7, #255	; 0xff
 8000c1e:	469a      	mov	sl, r3
 8000c20:	e783      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c22:	0028      	movs	r0, r5
 8000c24:	f002 fb6a 	bl	80032fc <__clzsi2>
 8000c28:	2776      	movs	r7, #118	; 0x76
 8000c2a:	1f43      	subs	r3, r0, #5
 8000c2c:	409d      	lsls	r5, r3
 8000c2e:	2300      	movs	r3, #0
 8000c30:	427f      	negs	r7, r7
 8000c32:	4699      	mov	r9, r3
 8000c34:	469a      	mov	sl, r3
 8000c36:	1a3f      	subs	r7, r7, r0
 8000c38:	e777      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	f002 fb5e 	bl	80032fc <__clzsi2>
 8000c40:	4642      	mov	r2, r8
 8000c42:	1f43      	subs	r3, r0, #5
 8000c44:	409a      	lsls	r2, r3
 8000c46:	2376      	movs	r3, #118	; 0x76
 8000c48:	425b      	negs	r3, r3
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	1a1b      	subs	r3, r3, r0
 8000c4e:	2200      	movs	r2, #0
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c52:	23ff      	movs	r3, #255	; 0xff
 8000c54:	2203      	movs	r2, #3
 8000c56:	e77a      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c58:	000e      	movs	r6, r1
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	e7ac      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c60:	2001      	movs	r0, #1
 8000c62:	1ac0      	subs	r0, r0, r3
 8000c64:	281b      	cmp	r0, #27
 8000c66:	dca6      	bgt.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c68:	379e      	adds	r7, #158	; 0x9e
 8000c6a:	002a      	movs	r2, r5
 8000c6c:	40bd      	lsls	r5, r7
 8000c6e:	40c2      	lsrs	r2, r0
 8000c70:	1e6b      	subs	r3, r5, #1
 8000c72:	419d      	sbcs	r5, r3
 8000c74:	4315      	orrs	r5, r2
 8000c76:	076b      	lsls	r3, r5, #29
 8000c78:	d004      	beq.n	8000c84 <__aeabi_fdiv+0x18c>
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	402b      	ands	r3, r5
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d000      	beq.n	8000c84 <__aeabi_fdiv+0x18c>
 8000c82:	3504      	adds	r5, #4
 8000c84:	016b      	lsls	r3, r5, #5
 8000c86:	d544      	bpl.n	8000d12 <__aeabi_fdiv+0x21a>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	e795      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c8e:	20ff      	movs	r0, #255	; 0xff
 8000c90:	2500      	movs	r5, #0
 8000c92:	e792      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c94:	2580      	movs	r5, #128	; 0x80
 8000c96:	2600      	movs	r6, #0
 8000c98:	20ff      	movs	r0, #255	; 0xff
 8000c9a:	03ed      	lsls	r5, r5, #15
 8000c9c:	e78d      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2080      	movs	r0, #128	; 0x80
 8000ca4:	03c0      	lsls	r0, r0, #15
 8000ca6:	4205      	tst	r5, r0
 8000ca8:	d009      	beq.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000caa:	4643      	mov	r3, r8
 8000cac:	4203      	tst	r3, r0
 8000cae:	d106      	bne.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000cb0:	4645      	mov	r5, r8
 8000cb2:	4305      	orrs	r5, r0
 8000cb4:	026d      	lsls	r5, r5, #9
 8000cb6:	0026      	movs	r6, r4
 8000cb8:	20ff      	movs	r0, #255	; 0xff
 8000cba:	0a6d      	lsrs	r5, r5, #9
 8000cbc:	e77d      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000cbe:	2080      	movs	r0, #128	; 0x80
 8000cc0:	03c0      	lsls	r0, r0, #15
 8000cc2:	4305      	orrs	r5, r0
 8000cc4:	026d      	lsls	r5, r5, #9
 8000cc6:	20ff      	movs	r0, #255	; 0xff
 8000cc8:	0a6d      	lsrs	r5, r5, #9
 8000cca:	e776      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000ccc:	4642      	mov	r2, r8
 8000cce:	016b      	lsls	r3, r5, #5
 8000cd0:	0150      	lsls	r0, r2, #5
 8000cd2:	4283      	cmp	r3, r0
 8000cd4:	d219      	bcs.n	8000d0a <__aeabi_fdiv+0x212>
 8000cd6:	221b      	movs	r2, #27
 8000cd8:	2500      	movs	r5, #0
 8000cda:	3f01      	subs	r7, #1
 8000cdc:	2601      	movs	r6, #1
 8000cde:	001c      	movs	r4, r3
 8000ce0:	006d      	lsls	r5, r5, #1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	db01      	blt.n	8000cec <__aeabi_fdiv+0x1f4>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	d801      	bhi.n	8000cf0 <__aeabi_fdiv+0x1f8>
 8000cec:	1a1b      	subs	r3, r3, r0
 8000cee:	4335      	orrs	r5, r6
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d1f3      	bne.n	8000cde <__aeabi_fdiv+0x1e6>
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	4193      	sbcs	r3, r2
 8000cfa:	431d      	orrs	r5, r3
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	337f      	adds	r3, #127	; 0x7f
 8000d00:	000e      	movs	r6, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_fdiv+0x210>
 8000d06:	e741      	b.n	8000b8c <__aeabi_fdiv+0x94>
 8000d08:	e7aa      	b.n	8000c60 <__aeabi_fdiv+0x168>
 8000d0a:	221a      	movs	r2, #26
 8000d0c:	2501      	movs	r5, #1
 8000d0e:	1a1b      	subs	r3, r3, r0
 8000d10:	e7e4      	b.n	8000cdc <__aeabi_fdiv+0x1e4>
 8000d12:	01ad      	lsls	r5, r5, #6
 8000d14:	2000      	movs	r0, #0
 8000d16:	0a6d      	lsrs	r5, r5, #9
 8000d18:	e74f      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	0800b408 	.word	0x0800b408
 8000d20:	f7ffffff 	.word	0xf7ffffff
 8000d24:	0800b448 	.word	0x0800b448

08000d28 <__eqsf2>:
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	0042      	lsls	r2, r0, #1
 8000d2c:	0245      	lsls	r5, r0, #9
 8000d2e:	024e      	lsls	r6, r1, #9
 8000d30:	004c      	lsls	r4, r1, #1
 8000d32:	0fc3      	lsrs	r3, r0, #31
 8000d34:	0a6d      	lsrs	r5, r5, #9
 8000d36:	2001      	movs	r0, #1
 8000d38:	0e12      	lsrs	r2, r2, #24
 8000d3a:	0a76      	lsrs	r6, r6, #9
 8000d3c:	0e24      	lsrs	r4, r4, #24
 8000d3e:	0fc9      	lsrs	r1, r1, #31
 8000d40:	2aff      	cmp	r2, #255	; 0xff
 8000d42:	d006      	beq.n	8000d52 <__eqsf2+0x2a>
 8000d44:	2cff      	cmp	r4, #255	; 0xff
 8000d46:	d003      	beq.n	8000d50 <__eqsf2+0x28>
 8000d48:	42a2      	cmp	r2, r4
 8000d4a:	d101      	bne.n	8000d50 <__eqsf2+0x28>
 8000d4c:	42b5      	cmp	r5, r6
 8000d4e:	d006      	beq.n	8000d5e <__eqsf2+0x36>
 8000d50:	bd70      	pop	{r4, r5, r6, pc}
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d1fc      	bne.n	8000d50 <__eqsf2+0x28>
 8000d56:	2cff      	cmp	r4, #255	; 0xff
 8000d58:	d1fa      	bne.n	8000d50 <__eqsf2+0x28>
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d1f8      	bne.n	8000d50 <__eqsf2+0x28>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d006      	beq.n	8000d70 <__eqsf2+0x48>
 8000d62:	2001      	movs	r0, #1
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	d1f3      	bne.n	8000d50 <__eqsf2+0x28>
 8000d68:	0028      	movs	r0, r5
 8000d6a:	1e43      	subs	r3, r0, #1
 8000d6c:	4198      	sbcs	r0, r3
 8000d6e:	e7ef      	b.n	8000d50 <__eqsf2+0x28>
 8000d70:	2000      	movs	r0, #0
 8000d72:	e7ed      	b.n	8000d50 <__eqsf2+0x28>

08000d74 <__gesf2>:
 8000d74:	b570      	push	{r4, r5, r6, lr}
 8000d76:	0042      	lsls	r2, r0, #1
 8000d78:	0245      	lsls	r5, r0, #9
 8000d7a:	024e      	lsls	r6, r1, #9
 8000d7c:	004c      	lsls	r4, r1, #1
 8000d7e:	0fc3      	lsrs	r3, r0, #31
 8000d80:	0a6d      	lsrs	r5, r5, #9
 8000d82:	0e12      	lsrs	r2, r2, #24
 8000d84:	0a76      	lsrs	r6, r6, #9
 8000d86:	0e24      	lsrs	r4, r4, #24
 8000d88:	0fc8      	lsrs	r0, r1, #31
 8000d8a:	2aff      	cmp	r2, #255	; 0xff
 8000d8c:	d01b      	beq.n	8000dc6 <__gesf2+0x52>
 8000d8e:	2cff      	cmp	r4, #255	; 0xff
 8000d90:	d00e      	beq.n	8000db0 <__gesf2+0x3c>
 8000d92:	2a00      	cmp	r2, #0
 8000d94:	d11b      	bne.n	8000dce <__gesf2+0x5a>
 8000d96:	2c00      	cmp	r4, #0
 8000d98:	d101      	bne.n	8000d9e <__gesf2+0x2a>
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d01c      	beq.n	8000dd8 <__gesf2+0x64>
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d00c      	beq.n	8000dbc <__gesf2+0x48>
 8000da2:	4283      	cmp	r3, r0
 8000da4:	d01c      	beq.n	8000de0 <__gesf2+0x6c>
 8000da6:	2102      	movs	r1, #2
 8000da8:	1e58      	subs	r0, r3, #1
 8000daa:	4008      	ands	r0, r1
 8000dac:	3801      	subs	r0, #1
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d122      	bne.n	8000dfa <__gesf2+0x86>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	d1f4      	bne.n	8000da2 <__gesf2+0x2e>
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d1f2      	bne.n	8000da2 <__gesf2+0x2e>
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d1f6      	bne.n	8000dae <__gesf2+0x3a>
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	4240      	negs	r0, r0
 8000dc4:	e7f3      	b.n	8000dae <__gesf2+0x3a>
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d117      	bne.n	8000dfa <__gesf2+0x86>
 8000dca:	2cff      	cmp	r4, #255	; 0xff
 8000dcc:	d0f0      	beq.n	8000db0 <__gesf2+0x3c>
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d1e7      	bne.n	8000da2 <__gesf2+0x2e>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d1e5      	bne.n	8000da2 <__gesf2+0x2e>
 8000dd6:	e7e6      	b.n	8000da6 <__gesf2+0x32>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d0e7      	beq.n	8000dae <__gesf2+0x3a>
 8000dde:	e7e2      	b.n	8000da6 <__gesf2+0x32>
 8000de0:	42a2      	cmp	r2, r4
 8000de2:	dc05      	bgt.n	8000df0 <__gesf2+0x7c>
 8000de4:	dbea      	blt.n	8000dbc <__gesf2+0x48>
 8000de6:	42b5      	cmp	r5, r6
 8000de8:	d802      	bhi.n	8000df0 <__gesf2+0x7c>
 8000dea:	d3e7      	bcc.n	8000dbc <__gesf2+0x48>
 8000dec:	2000      	movs	r0, #0
 8000dee:	e7de      	b.n	8000dae <__gesf2+0x3a>
 8000df0:	4243      	negs	r3, r0
 8000df2:	4158      	adcs	r0, r3
 8000df4:	0040      	lsls	r0, r0, #1
 8000df6:	3801      	subs	r0, #1
 8000df8:	e7d9      	b.n	8000dae <__gesf2+0x3a>
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	4240      	negs	r0, r0
 8000dfe:	e7d6      	b.n	8000dae <__gesf2+0x3a>

08000e00 <__lesf2>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0245      	lsls	r5, r0, #9
 8000e06:	024e      	lsls	r6, r1, #9
 8000e08:	004c      	lsls	r4, r1, #1
 8000e0a:	0fc3      	lsrs	r3, r0, #31
 8000e0c:	0a6d      	lsrs	r5, r5, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a76      	lsrs	r6, r6, #9
 8000e12:	0e24      	lsrs	r4, r4, #24
 8000e14:	0fc8      	lsrs	r0, r1, #31
 8000e16:	2aff      	cmp	r2, #255	; 0xff
 8000e18:	d00b      	beq.n	8000e32 <__lesf2+0x32>
 8000e1a:	2cff      	cmp	r4, #255	; 0xff
 8000e1c:	d00d      	beq.n	8000e3a <__lesf2+0x3a>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11f      	bne.n	8000e62 <__lesf2+0x62>
 8000e22:	2c00      	cmp	r4, #0
 8000e24:	d116      	bne.n	8000e54 <__lesf2+0x54>
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d114      	bne.n	8000e54 <__lesf2+0x54>
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d010      	beq.n	8000e52 <__lesf2+0x52>
 8000e30:	e009      	b.n	8000e46 <__lesf2+0x46>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d10c      	bne.n	8000e50 <__lesf2+0x50>
 8000e36:	2cff      	cmp	r4, #255	; 0xff
 8000e38:	d113      	bne.n	8000e62 <__lesf2+0x62>
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d108      	bne.n	8000e50 <__lesf2+0x50>
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	d008      	beq.n	8000e54 <__lesf2+0x54>
 8000e42:	4283      	cmp	r3, r0
 8000e44:	d012      	beq.n	8000e6c <__lesf2+0x6c>
 8000e46:	2102      	movs	r1, #2
 8000e48:	1e58      	subs	r0, r3, #1
 8000e4a:	4008      	ands	r0, r1
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e000      	b.n	8000e52 <__lesf2+0x52>
 8000e50:	2002      	movs	r0, #2
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d1f4      	bne.n	8000e42 <__lesf2+0x42>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d1fa      	bne.n	8000e52 <__lesf2+0x52>
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	4240      	negs	r0, r0
 8000e60:	e7f7      	b.n	8000e52 <__lesf2+0x52>
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	d1ed      	bne.n	8000e42 <__lesf2+0x42>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d1eb      	bne.n	8000e42 <__lesf2+0x42>
 8000e6a:	e7ec      	b.n	8000e46 <__lesf2+0x46>
 8000e6c:	42a2      	cmp	r2, r4
 8000e6e:	dc05      	bgt.n	8000e7c <__lesf2+0x7c>
 8000e70:	dbf2      	blt.n	8000e58 <__lesf2+0x58>
 8000e72:	42b5      	cmp	r5, r6
 8000e74:	d802      	bhi.n	8000e7c <__lesf2+0x7c>
 8000e76:	d3ef      	bcc.n	8000e58 <__lesf2+0x58>
 8000e78:	2000      	movs	r0, #0
 8000e7a:	e7ea      	b.n	8000e52 <__lesf2+0x52>
 8000e7c:	4243      	negs	r3, r0
 8000e7e:	4158      	adcs	r0, r3
 8000e80:	0040      	lsls	r0, r0, #1
 8000e82:	3801      	subs	r0, #1
 8000e84:	e7e5      	b.n	8000e52 <__lesf2+0x52>
 8000e86:	46c0      	nop			; (mov r8, r8)

08000e88 <__aeabi_fmul>:
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	464f      	mov	r7, r9
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	0244      	lsls	r4, r0, #9
 8000e92:	0045      	lsls	r5, r0, #1
 8000e94:	b5c0      	push	{r6, r7, lr}
 8000e96:	0a64      	lsrs	r4, r4, #9
 8000e98:	1c0f      	adds	r7, r1, #0
 8000e9a:	0e2d      	lsrs	r5, r5, #24
 8000e9c:	0fc6      	lsrs	r6, r0, #31
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_fmul+0x1c>
 8000ea2:	e08d      	b.n	8000fc0 <__aeabi_fmul+0x138>
 8000ea4:	2dff      	cmp	r5, #255	; 0xff
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_fmul+0x22>
 8000ea8:	e092      	b.n	8000fd0 <__aeabi_fmul+0x148>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	4699      	mov	r9, r3
 8000eb0:	469a      	mov	sl, r3
 8000eb2:	00e4      	lsls	r4, r4, #3
 8000eb4:	04c0      	lsls	r0, r0, #19
 8000eb6:	4304      	orrs	r4, r0
 8000eb8:	3d7f      	subs	r5, #127	; 0x7f
 8000eba:	0278      	lsls	r0, r7, #9
 8000ebc:	0a43      	lsrs	r3, r0, #9
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	007b      	lsls	r3, r7, #1
 8000ec2:	0e1b      	lsrs	r3, r3, #24
 8000ec4:	0fff      	lsrs	r7, r7, #31
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fmul+0x44>
 8000eca:	e070      	b.n	8000fae <__aeabi_fmul+0x126>
 8000ecc:	2bff      	cmp	r3, #255	; 0xff
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fmul+0x4a>
 8000ed0:	e086      	b.n	8000fe0 <__aeabi_fmul+0x158>
 8000ed2:	4642      	mov	r2, r8
 8000ed4:	00d0      	lsls	r0, r2, #3
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	3b7f      	subs	r3, #127	; 0x7f
 8000eda:	18ed      	adds	r5, r5, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	04d2      	lsls	r2, r2, #19
 8000ee0:	4302      	orrs	r2, r0
 8000ee2:	4690      	mov	r8, r2
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	0031      	movs	r1, r6
 8000ee8:	464b      	mov	r3, r9
 8000eea:	4079      	eors	r1, r7
 8000eec:	1c68      	adds	r0, r5, #1
 8000eee:	2b0f      	cmp	r3, #15
 8000ef0:	d81c      	bhi.n	8000f2c <__aeabi_fmul+0xa4>
 8000ef2:	4a76      	ldr	r2, [pc, #472]	; (80010cc <__aeabi_fmul+0x244>)
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	58d3      	ldr	r3, [r2, r3]
 8000ef8:	469f      	mov	pc, r3
 8000efa:	0039      	movs	r1, r7
 8000efc:	4644      	mov	r4, r8
 8000efe:	46e2      	mov	sl, ip
 8000f00:	4653      	mov	r3, sl
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d00f      	beq.n	8000f26 <__aeabi_fmul+0x9e>
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fmul+0x84>
 8000f0a:	e0d7      	b.n	80010bc <__aeabi_fmul+0x234>
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d137      	bne.n	8000f80 <__aeabi_fmul+0xf8>
 8000f10:	2000      	movs	r0, #0
 8000f12:	2400      	movs	r4, #0
 8000f14:	05c0      	lsls	r0, r0, #23
 8000f16:	4320      	orrs	r0, r4
 8000f18:	07c9      	lsls	r1, r1, #31
 8000f1a:	4308      	orrs	r0, r1
 8000f1c:	bce0      	pop	{r5, r6, r7}
 8000f1e:	46ba      	mov	sl, r7
 8000f20:	46b1      	mov	r9, r6
 8000f22:	46a8      	mov	r8, r5
 8000f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f26:	20ff      	movs	r0, #255	; 0xff
 8000f28:	2400      	movs	r4, #0
 8000f2a:	e7f3      	b.n	8000f14 <__aeabi_fmul+0x8c>
 8000f2c:	0c26      	lsrs	r6, r4, #16
 8000f2e:	0424      	lsls	r4, r4, #16
 8000f30:	0c22      	lsrs	r2, r4, #16
 8000f32:	4644      	mov	r4, r8
 8000f34:	0424      	lsls	r4, r4, #16
 8000f36:	0c24      	lsrs	r4, r4, #16
 8000f38:	4643      	mov	r3, r8
 8000f3a:	0027      	movs	r7, r4
 8000f3c:	0c1b      	lsrs	r3, r3, #16
 8000f3e:	4357      	muls	r7, r2
 8000f40:	4374      	muls	r4, r6
 8000f42:	435a      	muls	r2, r3
 8000f44:	435e      	muls	r6, r3
 8000f46:	1912      	adds	r2, r2, r4
 8000f48:	0c3b      	lsrs	r3, r7, #16
 8000f4a:	189b      	adds	r3, r3, r2
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	d903      	bls.n	8000f58 <__aeabi_fmul+0xd0>
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	0252      	lsls	r2, r2, #9
 8000f54:	4694      	mov	ip, r2
 8000f56:	4466      	add	r6, ip
 8000f58:	043f      	lsls	r7, r7, #16
 8000f5a:	041a      	lsls	r2, r3, #16
 8000f5c:	0c3f      	lsrs	r7, r7, #16
 8000f5e:	19d2      	adds	r2, r2, r7
 8000f60:	0194      	lsls	r4, r2, #6
 8000f62:	1e67      	subs	r7, r4, #1
 8000f64:	41bc      	sbcs	r4, r7
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	0e92      	lsrs	r2, r2, #26
 8000f6a:	199b      	adds	r3, r3, r6
 8000f6c:	4314      	orrs	r4, r2
 8000f6e:	019b      	lsls	r3, r3, #6
 8000f70:	431c      	orrs	r4, r3
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	d400      	bmi.n	8000f78 <__aeabi_fmul+0xf0>
 8000f76:	e09b      	b.n	80010b0 <__aeabi_fmul+0x228>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	0862      	lsrs	r2, r4, #1
 8000f7c:	401c      	ands	r4, r3
 8000f7e:	4314      	orrs	r4, r2
 8000f80:	0002      	movs	r2, r0
 8000f82:	327f      	adds	r2, #127	; 0x7f
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	dd64      	ble.n	8001052 <__aeabi_fmul+0x1ca>
 8000f88:	0763      	lsls	r3, r4, #29
 8000f8a:	d004      	beq.n	8000f96 <__aeabi_fmul+0x10e>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4023      	ands	r3, r4
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fmul+0x10e>
 8000f94:	3404      	adds	r4, #4
 8000f96:	0123      	lsls	r3, r4, #4
 8000f98:	d503      	bpl.n	8000fa2 <__aeabi_fmul+0x11a>
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <__aeabi_fmul+0x248>)
 8000f9e:	3280      	adds	r2, #128	; 0x80
 8000fa0:	401c      	ands	r4, r3
 8000fa2:	2afe      	cmp	r2, #254	; 0xfe
 8000fa4:	dcbf      	bgt.n	8000f26 <__aeabi_fmul+0x9e>
 8000fa6:	01a4      	lsls	r4, r4, #6
 8000fa8:	0a64      	lsrs	r4, r4, #9
 8000faa:	b2d0      	uxtb	r0, r2
 8000fac:	e7b2      	b.n	8000f14 <__aeabi_fmul+0x8c>
 8000fae:	4643      	mov	r3, r8
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d13d      	bne.n	8001030 <__aeabi_fmul+0x1a8>
 8000fb4:	464a      	mov	r2, r9
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	4691      	mov	r9, r2
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	e792      	b.n	8000ee6 <__aeabi_fmul+0x5e>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d129      	bne.n	8001018 <__aeabi_fmul+0x190>
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	4699      	mov	r9, r3
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	2500      	movs	r5, #0
 8000fcc:	469a      	mov	sl, r3
 8000fce:	e774      	b.n	8000eba <__aeabi_fmul+0x32>
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d11b      	bne.n	800100c <__aeabi_fmul+0x184>
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	4699      	mov	r9, r3
 8000fd8:	3b06      	subs	r3, #6
 8000fda:	25ff      	movs	r5, #255	; 0xff
 8000fdc:	469a      	mov	sl, r3
 8000fde:	e76c      	b.n	8000eba <__aeabi_fmul+0x32>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	35ff      	adds	r5, #255	; 0xff
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10b      	bne.n	8001000 <__aeabi_fmul+0x178>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	464a      	mov	r2, r9
 8000fec:	431a      	orrs	r2, r3
 8000fee:	4691      	mov	r9, r2
 8000ff0:	469c      	mov	ip, r3
 8000ff2:	e778      	b.n	8000ee6 <__aeabi_fmul+0x5e>
 8000ff4:	4653      	mov	r3, sl
 8000ff6:	0031      	movs	r1, r6
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_fmul+0x176>
 8000ffc:	e783      	b.n	8000f06 <__aeabi_fmul+0x7e>
 8000ffe:	e792      	b.n	8000f26 <__aeabi_fmul+0x9e>
 8001000:	2303      	movs	r3, #3
 8001002:	464a      	mov	r2, r9
 8001004:	431a      	orrs	r2, r3
 8001006:	4691      	mov	r9, r2
 8001008:	469c      	mov	ip, r3
 800100a:	e76c      	b.n	8000ee6 <__aeabi_fmul+0x5e>
 800100c:	230c      	movs	r3, #12
 800100e:	4699      	mov	r9, r3
 8001010:	3b09      	subs	r3, #9
 8001012:	25ff      	movs	r5, #255	; 0xff
 8001014:	469a      	mov	sl, r3
 8001016:	e750      	b.n	8000eba <__aeabi_fmul+0x32>
 8001018:	0020      	movs	r0, r4
 800101a:	f002 f96f 	bl	80032fc <__clzsi2>
 800101e:	2576      	movs	r5, #118	; 0x76
 8001020:	1f43      	subs	r3, r0, #5
 8001022:	409c      	lsls	r4, r3
 8001024:	2300      	movs	r3, #0
 8001026:	426d      	negs	r5, r5
 8001028:	4699      	mov	r9, r3
 800102a:	469a      	mov	sl, r3
 800102c:	1a2d      	subs	r5, r5, r0
 800102e:	e744      	b.n	8000eba <__aeabi_fmul+0x32>
 8001030:	4640      	mov	r0, r8
 8001032:	f002 f963 	bl	80032fc <__clzsi2>
 8001036:	4642      	mov	r2, r8
 8001038:	1f43      	subs	r3, r0, #5
 800103a:	409a      	lsls	r2, r3
 800103c:	2300      	movs	r3, #0
 800103e:	1a2d      	subs	r5, r5, r0
 8001040:	4690      	mov	r8, r2
 8001042:	469c      	mov	ip, r3
 8001044:	3d76      	subs	r5, #118	; 0x76
 8001046:	e74e      	b.n	8000ee6 <__aeabi_fmul+0x5e>
 8001048:	2480      	movs	r4, #128	; 0x80
 800104a:	2100      	movs	r1, #0
 800104c:	20ff      	movs	r0, #255	; 0xff
 800104e:	03e4      	lsls	r4, r4, #15
 8001050:	e760      	b.n	8000f14 <__aeabi_fmul+0x8c>
 8001052:	2301      	movs	r3, #1
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	2b1b      	cmp	r3, #27
 8001058:	dd00      	ble.n	800105c <__aeabi_fmul+0x1d4>
 800105a:	e759      	b.n	8000f10 <__aeabi_fmul+0x88>
 800105c:	0022      	movs	r2, r4
 800105e:	309e      	adds	r0, #158	; 0x9e
 8001060:	40da      	lsrs	r2, r3
 8001062:	4084      	lsls	r4, r0
 8001064:	0013      	movs	r3, r2
 8001066:	1e62      	subs	r2, r4, #1
 8001068:	4194      	sbcs	r4, r2
 800106a:	431c      	orrs	r4, r3
 800106c:	0763      	lsls	r3, r4, #29
 800106e:	d004      	beq.n	800107a <__aeabi_fmul+0x1f2>
 8001070:	230f      	movs	r3, #15
 8001072:	4023      	ands	r3, r4
 8001074:	2b04      	cmp	r3, #4
 8001076:	d000      	beq.n	800107a <__aeabi_fmul+0x1f2>
 8001078:	3404      	adds	r4, #4
 800107a:	0163      	lsls	r3, r4, #5
 800107c:	d51a      	bpl.n	80010b4 <__aeabi_fmul+0x22c>
 800107e:	2001      	movs	r0, #1
 8001080:	2400      	movs	r4, #0
 8001082:	e747      	b.n	8000f14 <__aeabi_fmul+0x8c>
 8001084:	2080      	movs	r0, #128	; 0x80
 8001086:	03c0      	lsls	r0, r0, #15
 8001088:	4204      	tst	r4, r0
 800108a:	d009      	beq.n	80010a0 <__aeabi_fmul+0x218>
 800108c:	4643      	mov	r3, r8
 800108e:	4203      	tst	r3, r0
 8001090:	d106      	bne.n	80010a0 <__aeabi_fmul+0x218>
 8001092:	4644      	mov	r4, r8
 8001094:	4304      	orrs	r4, r0
 8001096:	0264      	lsls	r4, r4, #9
 8001098:	0039      	movs	r1, r7
 800109a:	20ff      	movs	r0, #255	; 0xff
 800109c:	0a64      	lsrs	r4, r4, #9
 800109e:	e739      	b.n	8000f14 <__aeabi_fmul+0x8c>
 80010a0:	2080      	movs	r0, #128	; 0x80
 80010a2:	03c0      	lsls	r0, r0, #15
 80010a4:	4304      	orrs	r4, r0
 80010a6:	0264      	lsls	r4, r4, #9
 80010a8:	0031      	movs	r1, r6
 80010aa:	20ff      	movs	r0, #255	; 0xff
 80010ac:	0a64      	lsrs	r4, r4, #9
 80010ae:	e731      	b.n	8000f14 <__aeabi_fmul+0x8c>
 80010b0:	0028      	movs	r0, r5
 80010b2:	e765      	b.n	8000f80 <__aeabi_fmul+0xf8>
 80010b4:	01a4      	lsls	r4, r4, #6
 80010b6:	2000      	movs	r0, #0
 80010b8:	0a64      	lsrs	r4, r4, #9
 80010ba:	e72b      	b.n	8000f14 <__aeabi_fmul+0x8c>
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	03c0      	lsls	r0, r0, #15
 80010c0:	4304      	orrs	r4, r0
 80010c2:	0264      	lsls	r4, r4, #9
 80010c4:	20ff      	movs	r0, #255	; 0xff
 80010c6:	0a64      	lsrs	r4, r4, #9
 80010c8:	e724      	b.n	8000f14 <__aeabi_fmul+0x8c>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	0800b488 	.word	0x0800b488
 80010d0:	f7ffffff 	.word	0xf7ffffff

080010d4 <__aeabi_fsub>:
 80010d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d6:	46ce      	mov	lr, r9
 80010d8:	4647      	mov	r7, r8
 80010da:	0243      	lsls	r3, r0, #9
 80010dc:	0a5b      	lsrs	r3, r3, #9
 80010de:	024e      	lsls	r6, r1, #9
 80010e0:	00da      	lsls	r2, r3, #3
 80010e2:	4694      	mov	ip, r2
 80010e4:	0a72      	lsrs	r2, r6, #9
 80010e6:	4691      	mov	r9, r2
 80010e8:	0045      	lsls	r5, r0, #1
 80010ea:	004a      	lsls	r2, r1, #1
 80010ec:	b580      	push	{r7, lr}
 80010ee:	0e2d      	lsrs	r5, r5, #24
 80010f0:	001f      	movs	r7, r3
 80010f2:	0fc4      	lsrs	r4, r0, #31
 80010f4:	0e12      	lsrs	r2, r2, #24
 80010f6:	0fc9      	lsrs	r1, r1, #31
 80010f8:	09b6      	lsrs	r6, r6, #6
 80010fa:	2aff      	cmp	r2, #255	; 0xff
 80010fc:	d05b      	beq.n	80011b6 <__aeabi_fsub+0xe2>
 80010fe:	2001      	movs	r0, #1
 8001100:	4041      	eors	r1, r0
 8001102:	428c      	cmp	r4, r1
 8001104:	d039      	beq.n	800117a <__aeabi_fsub+0xa6>
 8001106:	1aa8      	subs	r0, r5, r2
 8001108:	2800      	cmp	r0, #0
 800110a:	dd5a      	ble.n	80011c2 <__aeabi_fsub+0xee>
 800110c:	2a00      	cmp	r2, #0
 800110e:	d06a      	beq.n	80011e6 <__aeabi_fsub+0x112>
 8001110:	2dff      	cmp	r5, #255	; 0xff
 8001112:	d100      	bne.n	8001116 <__aeabi_fsub+0x42>
 8001114:	e0d9      	b.n	80012ca <__aeabi_fsub+0x1f6>
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	04d2      	lsls	r2, r2, #19
 800111a:	4316      	orrs	r6, r2
 800111c:	281b      	cmp	r0, #27
 800111e:	dc00      	bgt.n	8001122 <__aeabi_fsub+0x4e>
 8001120:	e0e9      	b.n	80012f6 <__aeabi_fsub+0x222>
 8001122:	2001      	movs	r0, #1
 8001124:	4663      	mov	r3, ip
 8001126:	1a18      	subs	r0, r3, r0
 8001128:	0143      	lsls	r3, r0, #5
 800112a:	d400      	bmi.n	800112e <__aeabi_fsub+0x5a>
 800112c:	e0b4      	b.n	8001298 <__aeabi_fsub+0x1c4>
 800112e:	0180      	lsls	r0, r0, #6
 8001130:	0987      	lsrs	r7, r0, #6
 8001132:	0038      	movs	r0, r7
 8001134:	f002 f8e2 	bl	80032fc <__clzsi2>
 8001138:	3805      	subs	r0, #5
 800113a:	4087      	lsls	r7, r0
 800113c:	4285      	cmp	r5, r0
 800113e:	dc00      	bgt.n	8001142 <__aeabi_fsub+0x6e>
 8001140:	e0cc      	b.n	80012dc <__aeabi_fsub+0x208>
 8001142:	1a2d      	subs	r5, r5, r0
 8001144:	48b5      	ldr	r0, [pc, #724]	; (800141c <__aeabi_fsub+0x348>)
 8001146:	4038      	ands	r0, r7
 8001148:	0743      	lsls	r3, r0, #29
 800114a:	d004      	beq.n	8001156 <__aeabi_fsub+0x82>
 800114c:	230f      	movs	r3, #15
 800114e:	4003      	ands	r3, r0
 8001150:	2b04      	cmp	r3, #4
 8001152:	d000      	beq.n	8001156 <__aeabi_fsub+0x82>
 8001154:	3004      	adds	r0, #4
 8001156:	0143      	lsls	r3, r0, #5
 8001158:	d400      	bmi.n	800115c <__aeabi_fsub+0x88>
 800115a:	e0a0      	b.n	800129e <__aeabi_fsub+0x1ca>
 800115c:	1c6a      	adds	r2, r5, #1
 800115e:	2dfe      	cmp	r5, #254	; 0xfe
 8001160:	d100      	bne.n	8001164 <__aeabi_fsub+0x90>
 8001162:	e08d      	b.n	8001280 <__aeabi_fsub+0x1ac>
 8001164:	0180      	lsls	r0, r0, #6
 8001166:	0a47      	lsrs	r7, r0, #9
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	05d0      	lsls	r0, r2, #23
 800116c:	4338      	orrs	r0, r7
 800116e:	07e4      	lsls	r4, r4, #31
 8001170:	4320      	orrs	r0, r4
 8001172:	bcc0      	pop	{r6, r7}
 8001174:	46b9      	mov	r9, r7
 8001176:	46b0      	mov	r8, r6
 8001178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800117a:	1aa8      	subs	r0, r5, r2
 800117c:	4680      	mov	r8, r0
 800117e:	2800      	cmp	r0, #0
 8001180:	dd45      	ble.n	800120e <__aeabi_fsub+0x13a>
 8001182:	2a00      	cmp	r2, #0
 8001184:	d070      	beq.n	8001268 <__aeabi_fsub+0x194>
 8001186:	2dff      	cmp	r5, #255	; 0xff
 8001188:	d100      	bne.n	800118c <__aeabi_fsub+0xb8>
 800118a:	e09e      	b.n	80012ca <__aeabi_fsub+0x1f6>
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	04db      	lsls	r3, r3, #19
 8001190:	431e      	orrs	r6, r3
 8001192:	4643      	mov	r3, r8
 8001194:	2b1b      	cmp	r3, #27
 8001196:	dc00      	bgt.n	800119a <__aeabi_fsub+0xc6>
 8001198:	e0d2      	b.n	8001340 <__aeabi_fsub+0x26c>
 800119a:	2001      	movs	r0, #1
 800119c:	4460      	add	r0, ip
 800119e:	0143      	lsls	r3, r0, #5
 80011a0:	d57a      	bpl.n	8001298 <__aeabi_fsub+0x1c4>
 80011a2:	3501      	adds	r5, #1
 80011a4:	2dff      	cmp	r5, #255	; 0xff
 80011a6:	d06b      	beq.n	8001280 <__aeabi_fsub+0x1ac>
 80011a8:	2301      	movs	r3, #1
 80011aa:	4a9d      	ldr	r2, [pc, #628]	; (8001420 <__aeabi_fsub+0x34c>)
 80011ac:	4003      	ands	r3, r0
 80011ae:	0840      	lsrs	r0, r0, #1
 80011b0:	4010      	ands	r0, r2
 80011b2:	4318      	orrs	r0, r3
 80011b4:	e7c8      	b.n	8001148 <__aeabi_fsub+0x74>
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	d020      	beq.n	80011fc <__aeabi_fsub+0x128>
 80011ba:	428c      	cmp	r4, r1
 80011bc:	d023      	beq.n	8001206 <__aeabi_fsub+0x132>
 80011be:	0028      	movs	r0, r5
 80011c0:	38ff      	subs	r0, #255	; 0xff
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d039      	beq.n	800123a <__aeabi_fsub+0x166>
 80011c6:	1b57      	subs	r7, r2, r5
 80011c8:	2d00      	cmp	r5, #0
 80011ca:	d000      	beq.n	80011ce <__aeabi_fsub+0xfa>
 80011cc:	e09d      	b.n	800130a <__aeabi_fsub+0x236>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_fsub+0x102>
 80011d4:	e0db      	b.n	800138e <__aeabi_fsub+0x2ba>
 80011d6:	1e7b      	subs	r3, r7, #1
 80011d8:	2f01      	cmp	r7, #1
 80011da:	d100      	bne.n	80011de <__aeabi_fsub+0x10a>
 80011dc:	e10d      	b.n	80013fa <__aeabi_fsub+0x326>
 80011de:	2fff      	cmp	r7, #255	; 0xff
 80011e0:	d071      	beq.n	80012c6 <__aeabi_fsub+0x1f2>
 80011e2:	001f      	movs	r7, r3
 80011e4:	e098      	b.n	8001318 <__aeabi_fsub+0x244>
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x118>
 80011ea:	e0a7      	b.n	800133c <__aeabi_fsub+0x268>
 80011ec:	1e42      	subs	r2, r0, #1
 80011ee:	2801      	cmp	r0, #1
 80011f0:	d100      	bne.n	80011f4 <__aeabi_fsub+0x120>
 80011f2:	e0e6      	b.n	80013c2 <__aeabi_fsub+0x2ee>
 80011f4:	28ff      	cmp	r0, #255	; 0xff
 80011f6:	d068      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 80011f8:	0010      	movs	r0, r2
 80011fa:	e78f      	b.n	800111c <__aeabi_fsub+0x48>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4041      	eors	r1, r0
 8001200:	42a1      	cmp	r1, r4
 8001202:	d000      	beq.n	8001206 <__aeabi_fsub+0x132>
 8001204:	e77f      	b.n	8001106 <__aeabi_fsub+0x32>
 8001206:	20ff      	movs	r0, #255	; 0xff
 8001208:	4240      	negs	r0, r0
 800120a:	4680      	mov	r8, r0
 800120c:	44a8      	add	r8, r5
 800120e:	4640      	mov	r0, r8
 8001210:	2800      	cmp	r0, #0
 8001212:	d038      	beq.n	8001286 <__aeabi_fsub+0x1b2>
 8001214:	1b51      	subs	r1, r2, r5
 8001216:	2d00      	cmp	r5, #0
 8001218:	d100      	bne.n	800121c <__aeabi_fsub+0x148>
 800121a:	e0ae      	b.n	800137a <__aeabi_fsub+0x2a6>
 800121c:	2aff      	cmp	r2, #255	; 0xff
 800121e:	d100      	bne.n	8001222 <__aeabi_fsub+0x14e>
 8001220:	e0df      	b.n	80013e2 <__aeabi_fsub+0x30e>
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	4660      	mov	r0, ip
 8001226:	04db      	lsls	r3, r3, #19
 8001228:	4318      	orrs	r0, r3
 800122a:	4684      	mov	ip, r0
 800122c:	291b      	cmp	r1, #27
 800122e:	dc00      	bgt.n	8001232 <__aeabi_fsub+0x15e>
 8001230:	e0d9      	b.n	80013e6 <__aeabi_fsub+0x312>
 8001232:	2001      	movs	r0, #1
 8001234:	0015      	movs	r5, r2
 8001236:	1980      	adds	r0, r0, r6
 8001238:	e7b1      	b.n	800119e <__aeabi_fsub+0xca>
 800123a:	20fe      	movs	r0, #254	; 0xfe
 800123c:	1c6a      	adds	r2, r5, #1
 800123e:	4210      	tst	r0, r2
 8001240:	d171      	bne.n	8001326 <__aeabi_fsub+0x252>
 8001242:	2d00      	cmp	r5, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x174>
 8001246:	e0a6      	b.n	8001396 <__aeabi_fsub+0x2c2>
 8001248:	4663      	mov	r3, ip
 800124a:	2b00      	cmp	r3, #0
 800124c:	d100      	bne.n	8001250 <__aeabi_fsub+0x17c>
 800124e:	e0d9      	b.n	8001404 <__aeabi_fsub+0x330>
 8001250:	2200      	movs	r2, #0
 8001252:	2e00      	cmp	r6, #0
 8001254:	d100      	bne.n	8001258 <__aeabi_fsub+0x184>
 8001256:	e788      	b.n	800116a <__aeabi_fsub+0x96>
 8001258:	1b98      	subs	r0, r3, r6
 800125a:	0143      	lsls	r3, r0, #5
 800125c:	d400      	bmi.n	8001260 <__aeabi_fsub+0x18c>
 800125e:	e0e1      	b.n	8001424 <__aeabi_fsub+0x350>
 8001260:	4663      	mov	r3, ip
 8001262:	000c      	movs	r4, r1
 8001264:	1af0      	subs	r0, r6, r3
 8001266:	e76f      	b.n	8001148 <__aeabi_fsub+0x74>
 8001268:	2e00      	cmp	r6, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x19a>
 800126c:	e0b7      	b.n	80013de <__aeabi_fsub+0x30a>
 800126e:	0002      	movs	r2, r0
 8001270:	3a01      	subs	r2, #1
 8001272:	2801      	cmp	r0, #1
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x1a4>
 8001276:	e09c      	b.n	80013b2 <__aeabi_fsub+0x2de>
 8001278:	28ff      	cmp	r0, #255	; 0xff
 800127a:	d026      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 800127c:	4690      	mov	r8, r2
 800127e:	e788      	b.n	8001192 <__aeabi_fsub+0xbe>
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	2700      	movs	r7, #0
 8001284:	e771      	b.n	800116a <__aeabi_fsub+0x96>
 8001286:	20fe      	movs	r0, #254	; 0xfe
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	4210      	tst	r0, r2
 800128c:	d064      	beq.n	8001358 <__aeabi_fsub+0x284>
 800128e:	2aff      	cmp	r2, #255	; 0xff
 8001290:	d0f6      	beq.n	8001280 <__aeabi_fsub+0x1ac>
 8001292:	0015      	movs	r5, r2
 8001294:	4466      	add	r6, ip
 8001296:	0870      	lsrs	r0, r6, #1
 8001298:	0743      	lsls	r3, r0, #29
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x1ca>
 800129c:	e756      	b.n	800114c <__aeabi_fsub+0x78>
 800129e:	08c3      	lsrs	r3, r0, #3
 80012a0:	2dff      	cmp	r5, #255	; 0xff
 80012a2:	d012      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 80012a4:	025b      	lsls	r3, r3, #9
 80012a6:	0a5f      	lsrs	r7, r3, #9
 80012a8:	b2ea      	uxtb	r2, r5
 80012aa:	e75e      	b.n	800116a <__aeabi_fsub+0x96>
 80012ac:	4662      	mov	r2, ip
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x1e0>
 80012b2:	e096      	b.n	80013e2 <__aeabi_fsub+0x30e>
 80012b4:	2e00      	cmp	r6, #0
 80012b6:	d008      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	03d2      	lsls	r2, r2, #15
 80012bc:	4213      	tst	r3, r2
 80012be:	d004      	beq.n	80012ca <__aeabi_fsub+0x1f6>
 80012c0:	4648      	mov	r0, r9
 80012c2:	4210      	tst	r0, r2
 80012c4:	d101      	bne.n	80012ca <__aeabi_fsub+0x1f6>
 80012c6:	000c      	movs	r4, r1
 80012c8:	464b      	mov	r3, r9
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0d8      	beq.n	8001280 <__aeabi_fsub+0x1ac>
 80012ce:	2780      	movs	r7, #128	; 0x80
 80012d0:	03ff      	lsls	r7, r7, #15
 80012d2:	431f      	orrs	r7, r3
 80012d4:	027f      	lsls	r7, r7, #9
 80012d6:	22ff      	movs	r2, #255	; 0xff
 80012d8:	0a7f      	lsrs	r7, r7, #9
 80012da:	e746      	b.n	800116a <__aeabi_fsub+0x96>
 80012dc:	2320      	movs	r3, #32
 80012de:	003a      	movs	r2, r7
 80012e0:	1b45      	subs	r5, r0, r5
 80012e2:	0038      	movs	r0, r7
 80012e4:	3501      	adds	r5, #1
 80012e6:	40ea      	lsrs	r2, r5
 80012e8:	1b5d      	subs	r5, r3, r5
 80012ea:	40a8      	lsls	r0, r5
 80012ec:	1e43      	subs	r3, r0, #1
 80012ee:	4198      	sbcs	r0, r3
 80012f0:	2500      	movs	r5, #0
 80012f2:	4310      	orrs	r0, r2
 80012f4:	e728      	b.n	8001148 <__aeabi_fsub+0x74>
 80012f6:	2320      	movs	r3, #32
 80012f8:	1a1b      	subs	r3, r3, r0
 80012fa:	0032      	movs	r2, r6
 80012fc:	409e      	lsls	r6, r3
 80012fe:	40c2      	lsrs	r2, r0
 8001300:	0030      	movs	r0, r6
 8001302:	1e43      	subs	r3, r0, #1
 8001304:	4198      	sbcs	r0, r3
 8001306:	4310      	orrs	r0, r2
 8001308:	e70c      	b.n	8001124 <__aeabi_fsub+0x50>
 800130a:	2aff      	cmp	r2, #255	; 0xff
 800130c:	d0db      	beq.n	80012c6 <__aeabi_fsub+0x1f2>
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	4660      	mov	r0, ip
 8001312:	04db      	lsls	r3, r3, #19
 8001314:	4318      	orrs	r0, r3
 8001316:	4684      	mov	ip, r0
 8001318:	2f1b      	cmp	r7, #27
 800131a:	dd56      	ble.n	80013ca <__aeabi_fsub+0x2f6>
 800131c:	2001      	movs	r0, #1
 800131e:	000c      	movs	r4, r1
 8001320:	0015      	movs	r5, r2
 8001322:	1a30      	subs	r0, r6, r0
 8001324:	e700      	b.n	8001128 <__aeabi_fsub+0x54>
 8001326:	4663      	mov	r3, ip
 8001328:	1b9f      	subs	r7, r3, r6
 800132a:	017b      	lsls	r3, r7, #5
 800132c:	d43d      	bmi.n	80013aa <__aeabi_fsub+0x2d6>
 800132e:	2f00      	cmp	r7, #0
 8001330:	d000      	beq.n	8001334 <__aeabi_fsub+0x260>
 8001332:	e6fe      	b.n	8001132 <__aeabi_fsub+0x5e>
 8001334:	2400      	movs	r4, #0
 8001336:	2200      	movs	r2, #0
 8001338:	2700      	movs	r7, #0
 800133a:	e716      	b.n	800116a <__aeabi_fsub+0x96>
 800133c:	0005      	movs	r5, r0
 800133e:	e7af      	b.n	80012a0 <__aeabi_fsub+0x1cc>
 8001340:	0032      	movs	r2, r6
 8001342:	4643      	mov	r3, r8
 8001344:	4641      	mov	r1, r8
 8001346:	40da      	lsrs	r2, r3
 8001348:	2320      	movs	r3, #32
 800134a:	1a5b      	subs	r3, r3, r1
 800134c:	409e      	lsls	r6, r3
 800134e:	0030      	movs	r0, r6
 8001350:	1e43      	subs	r3, r0, #1
 8001352:	4198      	sbcs	r0, r3
 8001354:	4310      	orrs	r0, r2
 8001356:	e721      	b.n	800119c <__aeabi_fsub+0xc8>
 8001358:	2d00      	cmp	r5, #0
 800135a:	d1a7      	bne.n	80012ac <__aeabi_fsub+0x1d8>
 800135c:	4663      	mov	r3, ip
 800135e:	2b00      	cmp	r3, #0
 8001360:	d059      	beq.n	8001416 <__aeabi_fsub+0x342>
 8001362:	2200      	movs	r2, #0
 8001364:	2e00      	cmp	r6, #0
 8001366:	d100      	bne.n	800136a <__aeabi_fsub+0x296>
 8001368:	e6ff      	b.n	800116a <__aeabi_fsub+0x96>
 800136a:	0030      	movs	r0, r6
 800136c:	4460      	add	r0, ip
 800136e:	0143      	lsls	r3, r0, #5
 8001370:	d592      	bpl.n	8001298 <__aeabi_fsub+0x1c4>
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <__aeabi_fsub+0x348>)
 8001374:	3501      	adds	r5, #1
 8001376:	4018      	ands	r0, r3
 8001378:	e78e      	b.n	8001298 <__aeabi_fsub+0x1c4>
 800137a:	4663      	mov	r3, ip
 800137c:	2b00      	cmp	r3, #0
 800137e:	d047      	beq.n	8001410 <__aeabi_fsub+0x33c>
 8001380:	1e4b      	subs	r3, r1, #1
 8001382:	2901      	cmp	r1, #1
 8001384:	d015      	beq.n	80013b2 <__aeabi_fsub+0x2de>
 8001386:	29ff      	cmp	r1, #255	; 0xff
 8001388:	d02b      	beq.n	80013e2 <__aeabi_fsub+0x30e>
 800138a:	0019      	movs	r1, r3
 800138c:	e74e      	b.n	800122c <__aeabi_fsub+0x158>
 800138e:	000c      	movs	r4, r1
 8001390:	464b      	mov	r3, r9
 8001392:	003d      	movs	r5, r7
 8001394:	e784      	b.n	80012a0 <__aeabi_fsub+0x1cc>
 8001396:	4662      	mov	r2, ip
 8001398:	2a00      	cmp	r2, #0
 800139a:	d18b      	bne.n	80012b4 <__aeabi_fsub+0x1e0>
 800139c:	2e00      	cmp	r6, #0
 800139e:	d192      	bne.n	80012c6 <__aeabi_fsub+0x1f2>
 80013a0:	2780      	movs	r7, #128	; 0x80
 80013a2:	2400      	movs	r4, #0
 80013a4:	22ff      	movs	r2, #255	; 0xff
 80013a6:	03ff      	lsls	r7, r7, #15
 80013a8:	e6df      	b.n	800116a <__aeabi_fsub+0x96>
 80013aa:	4663      	mov	r3, ip
 80013ac:	000c      	movs	r4, r1
 80013ae:	1af7      	subs	r7, r6, r3
 80013b0:	e6bf      	b.n	8001132 <__aeabi_fsub+0x5e>
 80013b2:	0030      	movs	r0, r6
 80013b4:	4460      	add	r0, ip
 80013b6:	2501      	movs	r5, #1
 80013b8:	0143      	lsls	r3, r0, #5
 80013ba:	d400      	bmi.n	80013be <__aeabi_fsub+0x2ea>
 80013bc:	e76c      	b.n	8001298 <__aeabi_fsub+0x1c4>
 80013be:	2502      	movs	r5, #2
 80013c0:	e6f2      	b.n	80011a8 <__aeabi_fsub+0xd4>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2501      	movs	r5, #1
 80013c6:	1b98      	subs	r0, r3, r6
 80013c8:	e6ae      	b.n	8001128 <__aeabi_fsub+0x54>
 80013ca:	2320      	movs	r3, #32
 80013cc:	4664      	mov	r4, ip
 80013ce:	4660      	mov	r0, ip
 80013d0:	40fc      	lsrs	r4, r7
 80013d2:	1bdf      	subs	r7, r3, r7
 80013d4:	40b8      	lsls	r0, r7
 80013d6:	1e43      	subs	r3, r0, #1
 80013d8:	4198      	sbcs	r0, r3
 80013da:	4320      	orrs	r0, r4
 80013dc:	e79f      	b.n	800131e <__aeabi_fsub+0x24a>
 80013de:	0005      	movs	r5, r0
 80013e0:	e75e      	b.n	80012a0 <__aeabi_fsub+0x1cc>
 80013e2:	464b      	mov	r3, r9
 80013e4:	e771      	b.n	80012ca <__aeabi_fsub+0x1f6>
 80013e6:	2320      	movs	r3, #32
 80013e8:	4665      	mov	r5, ip
 80013ea:	4660      	mov	r0, ip
 80013ec:	40cd      	lsrs	r5, r1
 80013ee:	1a59      	subs	r1, r3, r1
 80013f0:	4088      	lsls	r0, r1
 80013f2:	1e43      	subs	r3, r0, #1
 80013f4:	4198      	sbcs	r0, r3
 80013f6:	4328      	orrs	r0, r5
 80013f8:	e71c      	b.n	8001234 <__aeabi_fsub+0x160>
 80013fa:	4663      	mov	r3, ip
 80013fc:	000c      	movs	r4, r1
 80013fe:	2501      	movs	r5, #1
 8001400:	1af0      	subs	r0, r6, r3
 8001402:	e691      	b.n	8001128 <__aeabi_fsub+0x54>
 8001404:	2e00      	cmp	r6, #0
 8001406:	d095      	beq.n	8001334 <__aeabi_fsub+0x260>
 8001408:	000c      	movs	r4, r1
 800140a:	464f      	mov	r7, r9
 800140c:	2200      	movs	r2, #0
 800140e:	e6ac      	b.n	800116a <__aeabi_fsub+0x96>
 8001410:	464b      	mov	r3, r9
 8001412:	000d      	movs	r5, r1
 8001414:	e744      	b.n	80012a0 <__aeabi_fsub+0x1cc>
 8001416:	464f      	mov	r7, r9
 8001418:	2200      	movs	r2, #0
 800141a:	e6a6      	b.n	800116a <__aeabi_fsub+0x96>
 800141c:	fbffffff 	.word	0xfbffffff
 8001420:	7dffffff 	.word	0x7dffffff
 8001424:	2800      	cmp	r0, #0
 8001426:	d000      	beq.n	800142a <__aeabi_fsub+0x356>
 8001428:	e736      	b.n	8001298 <__aeabi_fsub+0x1c4>
 800142a:	2400      	movs	r4, #0
 800142c:	2700      	movs	r7, #0
 800142e:	e69c      	b.n	800116a <__aeabi_fsub+0x96>

08001430 <__aeabi_f2iz>:
 8001430:	0241      	lsls	r1, r0, #9
 8001432:	0042      	lsls	r2, r0, #1
 8001434:	0fc3      	lsrs	r3, r0, #31
 8001436:	0a49      	lsrs	r1, r1, #9
 8001438:	2000      	movs	r0, #0
 800143a:	0e12      	lsrs	r2, r2, #24
 800143c:	2a7e      	cmp	r2, #126	; 0x7e
 800143e:	dd03      	ble.n	8001448 <__aeabi_f2iz+0x18>
 8001440:	2a9d      	cmp	r2, #157	; 0x9d
 8001442:	dd02      	ble.n	800144a <__aeabi_f2iz+0x1a>
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <__aeabi_f2iz+0x3c>)
 8001446:	1898      	adds	r0, r3, r2
 8001448:	4770      	bx	lr
 800144a:	2080      	movs	r0, #128	; 0x80
 800144c:	0400      	lsls	r0, r0, #16
 800144e:	4301      	orrs	r1, r0
 8001450:	2a95      	cmp	r2, #149	; 0x95
 8001452:	dc07      	bgt.n	8001464 <__aeabi_f2iz+0x34>
 8001454:	2096      	movs	r0, #150	; 0x96
 8001456:	1a82      	subs	r2, r0, r2
 8001458:	40d1      	lsrs	r1, r2
 800145a:	4248      	negs	r0, r1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f3      	bne.n	8001448 <__aeabi_f2iz+0x18>
 8001460:	0008      	movs	r0, r1
 8001462:	e7f1      	b.n	8001448 <__aeabi_f2iz+0x18>
 8001464:	3a96      	subs	r2, #150	; 0x96
 8001466:	4091      	lsls	r1, r2
 8001468:	e7f7      	b.n	800145a <__aeabi_f2iz+0x2a>
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	7fffffff 	.word	0x7fffffff

08001470 <__aeabi_i2f>:
 8001470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001472:	2800      	cmp	r0, #0
 8001474:	d013      	beq.n	800149e <__aeabi_i2f+0x2e>
 8001476:	17c3      	asrs	r3, r0, #31
 8001478:	18c6      	adds	r6, r0, r3
 800147a:	405e      	eors	r6, r3
 800147c:	0fc4      	lsrs	r4, r0, #31
 800147e:	0030      	movs	r0, r6
 8001480:	f001 ff3c 	bl	80032fc <__clzsi2>
 8001484:	239e      	movs	r3, #158	; 0x9e
 8001486:	0005      	movs	r5, r0
 8001488:	1a1b      	subs	r3, r3, r0
 800148a:	2b96      	cmp	r3, #150	; 0x96
 800148c:	dc0f      	bgt.n	80014ae <__aeabi_i2f+0x3e>
 800148e:	2808      	cmp	r0, #8
 8001490:	dd01      	ble.n	8001496 <__aeabi_i2f+0x26>
 8001492:	3d08      	subs	r5, #8
 8001494:	40ae      	lsls	r6, r5
 8001496:	0276      	lsls	r6, r6, #9
 8001498:	0a76      	lsrs	r6, r6, #9
 800149a:	b2d8      	uxtb	r0, r3
 800149c:	e002      	b.n	80014a4 <__aeabi_i2f+0x34>
 800149e:	2400      	movs	r4, #0
 80014a0:	2000      	movs	r0, #0
 80014a2:	2600      	movs	r6, #0
 80014a4:	05c0      	lsls	r0, r0, #23
 80014a6:	4330      	orrs	r0, r6
 80014a8:	07e4      	lsls	r4, r4, #31
 80014aa:	4320      	orrs	r0, r4
 80014ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014ae:	2b99      	cmp	r3, #153	; 0x99
 80014b0:	dd0c      	ble.n	80014cc <__aeabi_i2f+0x5c>
 80014b2:	2205      	movs	r2, #5
 80014b4:	0031      	movs	r1, r6
 80014b6:	1a12      	subs	r2, r2, r0
 80014b8:	40d1      	lsrs	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	0001      	movs	r1, r0
 80014be:	0030      	movs	r0, r6
 80014c0:	311b      	adds	r1, #27
 80014c2:	4088      	lsls	r0, r1
 80014c4:	1e41      	subs	r1, r0, #1
 80014c6:	4188      	sbcs	r0, r1
 80014c8:	4302      	orrs	r2, r0
 80014ca:	0016      	movs	r6, r2
 80014cc:	2d05      	cmp	r5, #5
 80014ce:	dc12      	bgt.n	80014f6 <__aeabi_i2f+0x86>
 80014d0:	0031      	movs	r1, r6
 80014d2:	4f0d      	ldr	r7, [pc, #52]	; (8001508 <__aeabi_i2f+0x98>)
 80014d4:	4039      	ands	r1, r7
 80014d6:	0772      	lsls	r2, r6, #29
 80014d8:	d009      	beq.n	80014ee <__aeabi_i2f+0x7e>
 80014da:	200f      	movs	r0, #15
 80014dc:	4030      	ands	r0, r6
 80014de:	2804      	cmp	r0, #4
 80014e0:	d005      	beq.n	80014ee <__aeabi_i2f+0x7e>
 80014e2:	3104      	adds	r1, #4
 80014e4:	014a      	lsls	r2, r1, #5
 80014e6:	d502      	bpl.n	80014ee <__aeabi_i2f+0x7e>
 80014e8:	239f      	movs	r3, #159	; 0x9f
 80014ea:	4039      	ands	r1, r7
 80014ec:	1b5b      	subs	r3, r3, r5
 80014ee:	0189      	lsls	r1, r1, #6
 80014f0:	0a4e      	lsrs	r6, r1, #9
 80014f2:	b2d8      	uxtb	r0, r3
 80014f4:	e7d6      	b.n	80014a4 <__aeabi_i2f+0x34>
 80014f6:	1f6a      	subs	r2, r5, #5
 80014f8:	4096      	lsls	r6, r2
 80014fa:	0031      	movs	r1, r6
 80014fc:	4f02      	ldr	r7, [pc, #8]	; (8001508 <__aeabi_i2f+0x98>)
 80014fe:	4039      	ands	r1, r7
 8001500:	0772      	lsls	r2, r6, #29
 8001502:	d0f4      	beq.n	80014ee <__aeabi_i2f+0x7e>
 8001504:	e7e9      	b.n	80014da <__aeabi_i2f+0x6a>
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	fbffffff 	.word	0xfbffffff

0800150c <__aeabi_ui2f>:
 800150c:	b570      	push	{r4, r5, r6, lr}
 800150e:	1e05      	subs	r5, r0, #0
 8001510:	d00e      	beq.n	8001530 <__aeabi_ui2f+0x24>
 8001512:	f001 fef3 	bl	80032fc <__clzsi2>
 8001516:	239e      	movs	r3, #158	; 0x9e
 8001518:	0004      	movs	r4, r0
 800151a:	1a1b      	subs	r3, r3, r0
 800151c:	2b96      	cmp	r3, #150	; 0x96
 800151e:	dc0c      	bgt.n	800153a <__aeabi_ui2f+0x2e>
 8001520:	2808      	cmp	r0, #8
 8001522:	dd01      	ble.n	8001528 <__aeabi_ui2f+0x1c>
 8001524:	3c08      	subs	r4, #8
 8001526:	40a5      	lsls	r5, r4
 8001528:	026d      	lsls	r5, r5, #9
 800152a:	0a6d      	lsrs	r5, r5, #9
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	e001      	b.n	8001534 <__aeabi_ui2f+0x28>
 8001530:	2000      	movs	r0, #0
 8001532:	2500      	movs	r5, #0
 8001534:	05c0      	lsls	r0, r0, #23
 8001536:	4328      	orrs	r0, r5
 8001538:	bd70      	pop	{r4, r5, r6, pc}
 800153a:	2b99      	cmp	r3, #153	; 0x99
 800153c:	dd09      	ble.n	8001552 <__aeabi_ui2f+0x46>
 800153e:	0002      	movs	r2, r0
 8001540:	0029      	movs	r1, r5
 8001542:	321b      	adds	r2, #27
 8001544:	4091      	lsls	r1, r2
 8001546:	1e4a      	subs	r2, r1, #1
 8001548:	4191      	sbcs	r1, r2
 800154a:	2205      	movs	r2, #5
 800154c:	1a12      	subs	r2, r2, r0
 800154e:	40d5      	lsrs	r5, r2
 8001550:	430d      	orrs	r5, r1
 8001552:	2c05      	cmp	r4, #5
 8001554:	dc12      	bgt.n	800157c <__aeabi_ui2f+0x70>
 8001556:	0029      	movs	r1, r5
 8001558:	4e0c      	ldr	r6, [pc, #48]	; (800158c <__aeabi_ui2f+0x80>)
 800155a:	4031      	ands	r1, r6
 800155c:	076a      	lsls	r2, r5, #29
 800155e:	d009      	beq.n	8001574 <__aeabi_ui2f+0x68>
 8001560:	200f      	movs	r0, #15
 8001562:	4028      	ands	r0, r5
 8001564:	2804      	cmp	r0, #4
 8001566:	d005      	beq.n	8001574 <__aeabi_ui2f+0x68>
 8001568:	3104      	adds	r1, #4
 800156a:	014a      	lsls	r2, r1, #5
 800156c:	d502      	bpl.n	8001574 <__aeabi_ui2f+0x68>
 800156e:	239f      	movs	r3, #159	; 0x9f
 8001570:	4031      	ands	r1, r6
 8001572:	1b1b      	subs	r3, r3, r4
 8001574:	0189      	lsls	r1, r1, #6
 8001576:	0a4d      	lsrs	r5, r1, #9
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	e7db      	b.n	8001534 <__aeabi_ui2f+0x28>
 800157c:	1f62      	subs	r2, r4, #5
 800157e:	4095      	lsls	r5, r2
 8001580:	0029      	movs	r1, r5
 8001582:	4e02      	ldr	r6, [pc, #8]	; (800158c <__aeabi_ui2f+0x80>)
 8001584:	4031      	ands	r1, r6
 8001586:	076a      	lsls	r2, r5, #29
 8001588:	d0f4      	beq.n	8001574 <__aeabi_ui2f+0x68>
 800158a:	e7e9      	b.n	8001560 <__aeabi_ui2f+0x54>
 800158c:	fbffffff 	.word	0xfbffffff

08001590 <__aeabi_dadd>:
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	464f      	mov	r7, r9
 8001594:	4646      	mov	r6, r8
 8001596:	46d6      	mov	lr, sl
 8001598:	000d      	movs	r5, r1
 800159a:	0004      	movs	r4, r0
 800159c:	b5c0      	push	{r6, r7, lr}
 800159e:	001f      	movs	r7, r3
 80015a0:	0011      	movs	r1, r2
 80015a2:	0328      	lsls	r0, r5, #12
 80015a4:	0f62      	lsrs	r2, r4, #29
 80015a6:	0a40      	lsrs	r0, r0, #9
 80015a8:	4310      	orrs	r0, r2
 80015aa:	007a      	lsls	r2, r7, #1
 80015ac:	0d52      	lsrs	r2, r2, #21
 80015ae:	00e3      	lsls	r3, r4, #3
 80015b0:	033c      	lsls	r4, r7, #12
 80015b2:	4691      	mov	r9, r2
 80015b4:	0a64      	lsrs	r4, r4, #9
 80015b6:	0ffa      	lsrs	r2, r7, #31
 80015b8:	0f4f      	lsrs	r7, r1, #29
 80015ba:	006e      	lsls	r6, r5, #1
 80015bc:	4327      	orrs	r7, r4
 80015be:	4692      	mov	sl, r2
 80015c0:	46b8      	mov	r8, r7
 80015c2:	0d76      	lsrs	r6, r6, #21
 80015c4:	0fed      	lsrs	r5, r5, #31
 80015c6:	00c9      	lsls	r1, r1, #3
 80015c8:	4295      	cmp	r5, r2
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x3e>
 80015cc:	e099      	b.n	8001702 <__aeabi_dadd+0x172>
 80015ce:	464c      	mov	r4, r9
 80015d0:	1b34      	subs	r4, r6, r4
 80015d2:	46a4      	mov	ip, r4
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	dc00      	bgt.n	80015da <__aeabi_dadd+0x4a>
 80015d8:	e07c      	b.n	80016d4 <__aeabi_dadd+0x144>
 80015da:	464a      	mov	r2, r9
 80015dc:	2a00      	cmp	r2, #0
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x52>
 80015e0:	e0b8      	b.n	8001754 <__aeabi_dadd+0x1c4>
 80015e2:	4ac5      	ldr	r2, [pc, #788]	; (80018f8 <__aeabi_dadd+0x368>)
 80015e4:	4296      	cmp	r6, r2
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x5a>
 80015e8:	e11c      	b.n	8001824 <__aeabi_dadd+0x294>
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	003c      	movs	r4, r7
 80015ee:	0412      	lsls	r2, r2, #16
 80015f0:	4314      	orrs	r4, r2
 80015f2:	46a0      	mov	r8, r4
 80015f4:	4662      	mov	r2, ip
 80015f6:	2a38      	cmp	r2, #56	; 0x38
 80015f8:	dd00      	ble.n	80015fc <__aeabi_dadd+0x6c>
 80015fa:	e161      	b.n	80018c0 <__aeabi_dadd+0x330>
 80015fc:	2a1f      	cmp	r2, #31
 80015fe:	dd00      	ble.n	8001602 <__aeabi_dadd+0x72>
 8001600:	e1cc      	b.n	800199c <__aeabi_dadd+0x40c>
 8001602:	4664      	mov	r4, ip
 8001604:	2220      	movs	r2, #32
 8001606:	1b12      	subs	r2, r2, r4
 8001608:	4644      	mov	r4, r8
 800160a:	4094      	lsls	r4, r2
 800160c:	000f      	movs	r7, r1
 800160e:	46a1      	mov	r9, r4
 8001610:	4664      	mov	r4, ip
 8001612:	4091      	lsls	r1, r2
 8001614:	40e7      	lsrs	r7, r4
 8001616:	464c      	mov	r4, r9
 8001618:	1e4a      	subs	r2, r1, #1
 800161a:	4191      	sbcs	r1, r2
 800161c:	433c      	orrs	r4, r7
 800161e:	4642      	mov	r2, r8
 8001620:	4321      	orrs	r1, r4
 8001622:	4664      	mov	r4, ip
 8001624:	40e2      	lsrs	r2, r4
 8001626:	1a80      	subs	r0, r0, r2
 8001628:	1a5c      	subs	r4, r3, r1
 800162a:	42a3      	cmp	r3, r4
 800162c:	419b      	sbcs	r3, r3
 800162e:	425f      	negs	r7, r3
 8001630:	1bc7      	subs	r7, r0, r7
 8001632:	023b      	lsls	r3, r7, #8
 8001634:	d400      	bmi.n	8001638 <__aeabi_dadd+0xa8>
 8001636:	e0d0      	b.n	80017da <__aeabi_dadd+0x24a>
 8001638:	027f      	lsls	r7, r7, #9
 800163a:	0a7f      	lsrs	r7, r7, #9
 800163c:	2f00      	cmp	r7, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_dadd+0xb2>
 8001640:	e0ff      	b.n	8001842 <__aeabi_dadd+0x2b2>
 8001642:	0038      	movs	r0, r7
 8001644:	f001 fe5a 	bl	80032fc <__clzsi2>
 8001648:	0001      	movs	r1, r0
 800164a:	3908      	subs	r1, #8
 800164c:	2320      	movs	r3, #32
 800164e:	0022      	movs	r2, r4
 8001650:	1a5b      	subs	r3, r3, r1
 8001652:	408f      	lsls	r7, r1
 8001654:	40da      	lsrs	r2, r3
 8001656:	408c      	lsls	r4, r1
 8001658:	4317      	orrs	r7, r2
 800165a:	42b1      	cmp	r1, r6
 800165c:	da00      	bge.n	8001660 <__aeabi_dadd+0xd0>
 800165e:	e0ff      	b.n	8001860 <__aeabi_dadd+0x2d0>
 8001660:	1b89      	subs	r1, r1, r6
 8001662:	1c4b      	adds	r3, r1, #1
 8001664:	2b1f      	cmp	r3, #31
 8001666:	dd00      	ble.n	800166a <__aeabi_dadd+0xda>
 8001668:	e0a8      	b.n	80017bc <__aeabi_dadd+0x22c>
 800166a:	2220      	movs	r2, #32
 800166c:	0039      	movs	r1, r7
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	0020      	movs	r0, r4
 8001672:	4094      	lsls	r4, r2
 8001674:	4091      	lsls	r1, r2
 8001676:	40d8      	lsrs	r0, r3
 8001678:	1e62      	subs	r2, r4, #1
 800167a:	4194      	sbcs	r4, r2
 800167c:	40df      	lsrs	r7, r3
 800167e:	2600      	movs	r6, #0
 8001680:	4301      	orrs	r1, r0
 8001682:	430c      	orrs	r4, r1
 8001684:	0763      	lsls	r3, r4, #29
 8001686:	d009      	beq.n	800169c <__aeabi_dadd+0x10c>
 8001688:	230f      	movs	r3, #15
 800168a:	4023      	ands	r3, r4
 800168c:	2b04      	cmp	r3, #4
 800168e:	d005      	beq.n	800169c <__aeabi_dadd+0x10c>
 8001690:	1d23      	adds	r3, r4, #4
 8001692:	42a3      	cmp	r3, r4
 8001694:	41a4      	sbcs	r4, r4
 8001696:	4264      	negs	r4, r4
 8001698:	193f      	adds	r7, r7, r4
 800169a:	001c      	movs	r4, r3
 800169c:	023b      	lsls	r3, r7, #8
 800169e:	d400      	bmi.n	80016a2 <__aeabi_dadd+0x112>
 80016a0:	e09e      	b.n	80017e0 <__aeabi_dadd+0x250>
 80016a2:	4b95      	ldr	r3, [pc, #596]	; (80018f8 <__aeabi_dadd+0x368>)
 80016a4:	3601      	adds	r6, #1
 80016a6:	429e      	cmp	r6, r3
 80016a8:	d100      	bne.n	80016ac <__aeabi_dadd+0x11c>
 80016aa:	e0b7      	b.n	800181c <__aeabi_dadd+0x28c>
 80016ac:	4a93      	ldr	r2, [pc, #588]	; (80018fc <__aeabi_dadd+0x36c>)
 80016ae:	08e4      	lsrs	r4, r4, #3
 80016b0:	4017      	ands	r7, r2
 80016b2:	077b      	lsls	r3, r7, #29
 80016b4:	0571      	lsls	r1, r6, #21
 80016b6:	027f      	lsls	r7, r7, #9
 80016b8:	4323      	orrs	r3, r4
 80016ba:	0b3f      	lsrs	r7, r7, #12
 80016bc:	0d4a      	lsrs	r2, r1, #21
 80016be:	0512      	lsls	r2, r2, #20
 80016c0:	433a      	orrs	r2, r7
 80016c2:	07ed      	lsls	r5, r5, #31
 80016c4:	432a      	orrs	r2, r5
 80016c6:	0018      	movs	r0, r3
 80016c8:	0011      	movs	r1, r2
 80016ca:	bce0      	pop	{r5, r6, r7}
 80016cc:	46ba      	mov	sl, r7
 80016ce:	46b1      	mov	r9, r6
 80016d0:	46a8      	mov	r8, r5
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d4:	2c00      	cmp	r4, #0
 80016d6:	d04b      	beq.n	8001770 <__aeabi_dadd+0x1e0>
 80016d8:	464c      	mov	r4, r9
 80016da:	1ba4      	subs	r4, r4, r6
 80016dc:	46a4      	mov	ip, r4
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dadd+0x154>
 80016e2:	e123      	b.n	800192c <__aeabi_dadd+0x39c>
 80016e4:	0004      	movs	r4, r0
 80016e6:	431c      	orrs	r4, r3
 80016e8:	d100      	bne.n	80016ec <__aeabi_dadd+0x15c>
 80016ea:	e1af      	b.n	8001a4c <__aeabi_dadd+0x4bc>
 80016ec:	4662      	mov	r2, ip
 80016ee:	1e54      	subs	r4, r2, #1
 80016f0:	2a01      	cmp	r2, #1
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0x166>
 80016f4:	e215      	b.n	8001b22 <__aeabi_dadd+0x592>
 80016f6:	4d80      	ldr	r5, [pc, #512]	; (80018f8 <__aeabi_dadd+0x368>)
 80016f8:	45ac      	cmp	ip, r5
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x16e>
 80016fc:	e1c8      	b.n	8001a90 <__aeabi_dadd+0x500>
 80016fe:	46a4      	mov	ip, r4
 8001700:	e11b      	b.n	800193a <__aeabi_dadd+0x3aa>
 8001702:	464a      	mov	r2, r9
 8001704:	1ab2      	subs	r2, r6, r2
 8001706:	4694      	mov	ip, r2
 8001708:	2a00      	cmp	r2, #0
 800170a:	dc00      	bgt.n	800170e <__aeabi_dadd+0x17e>
 800170c:	e0ac      	b.n	8001868 <__aeabi_dadd+0x2d8>
 800170e:	464a      	mov	r2, r9
 8001710:	2a00      	cmp	r2, #0
 8001712:	d043      	beq.n	800179c <__aeabi_dadd+0x20c>
 8001714:	4a78      	ldr	r2, [pc, #480]	; (80018f8 <__aeabi_dadd+0x368>)
 8001716:	4296      	cmp	r6, r2
 8001718:	d100      	bne.n	800171c <__aeabi_dadd+0x18c>
 800171a:	e1af      	b.n	8001a7c <__aeabi_dadd+0x4ec>
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	003c      	movs	r4, r7
 8001720:	0412      	lsls	r2, r2, #16
 8001722:	4314      	orrs	r4, r2
 8001724:	46a0      	mov	r8, r4
 8001726:	4662      	mov	r2, ip
 8001728:	2a38      	cmp	r2, #56	; 0x38
 800172a:	dc67      	bgt.n	80017fc <__aeabi_dadd+0x26c>
 800172c:	2a1f      	cmp	r2, #31
 800172e:	dc00      	bgt.n	8001732 <__aeabi_dadd+0x1a2>
 8001730:	e15f      	b.n	80019f2 <__aeabi_dadd+0x462>
 8001732:	4647      	mov	r7, r8
 8001734:	3a20      	subs	r2, #32
 8001736:	40d7      	lsrs	r7, r2
 8001738:	4662      	mov	r2, ip
 800173a:	2a20      	cmp	r2, #32
 800173c:	d005      	beq.n	800174a <__aeabi_dadd+0x1ba>
 800173e:	4664      	mov	r4, ip
 8001740:	2240      	movs	r2, #64	; 0x40
 8001742:	1b12      	subs	r2, r2, r4
 8001744:	4644      	mov	r4, r8
 8001746:	4094      	lsls	r4, r2
 8001748:	4321      	orrs	r1, r4
 800174a:	1e4a      	subs	r2, r1, #1
 800174c:	4191      	sbcs	r1, r2
 800174e:	000c      	movs	r4, r1
 8001750:	433c      	orrs	r4, r7
 8001752:	e057      	b.n	8001804 <__aeabi_dadd+0x274>
 8001754:	003a      	movs	r2, r7
 8001756:	430a      	orrs	r2, r1
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x1cc>
 800175a:	e105      	b.n	8001968 <__aeabi_dadd+0x3d8>
 800175c:	0022      	movs	r2, r4
 800175e:	3a01      	subs	r2, #1
 8001760:	2c01      	cmp	r4, #1
 8001762:	d100      	bne.n	8001766 <__aeabi_dadd+0x1d6>
 8001764:	e182      	b.n	8001a6c <__aeabi_dadd+0x4dc>
 8001766:	4c64      	ldr	r4, [pc, #400]	; (80018f8 <__aeabi_dadd+0x368>)
 8001768:	45a4      	cmp	ip, r4
 800176a:	d05b      	beq.n	8001824 <__aeabi_dadd+0x294>
 800176c:	4694      	mov	ip, r2
 800176e:	e741      	b.n	80015f4 <__aeabi_dadd+0x64>
 8001770:	4c63      	ldr	r4, [pc, #396]	; (8001900 <__aeabi_dadd+0x370>)
 8001772:	1c77      	adds	r7, r6, #1
 8001774:	4227      	tst	r7, r4
 8001776:	d000      	beq.n	800177a <__aeabi_dadd+0x1ea>
 8001778:	e0c4      	b.n	8001904 <__aeabi_dadd+0x374>
 800177a:	0004      	movs	r4, r0
 800177c:	431c      	orrs	r4, r3
 800177e:	2e00      	cmp	r6, #0
 8001780:	d000      	beq.n	8001784 <__aeabi_dadd+0x1f4>
 8001782:	e169      	b.n	8001a58 <__aeabi_dadd+0x4c8>
 8001784:	2c00      	cmp	r4, #0
 8001786:	d100      	bne.n	800178a <__aeabi_dadd+0x1fa>
 8001788:	e1bf      	b.n	8001b0a <__aeabi_dadd+0x57a>
 800178a:	4644      	mov	r4, r8
 800178c:	430c      	orrs	r4, r1
 800178e:	d000      	beq.n	8001792 <__aeabi_dadd+0x202>
 8001790:	e1d0      	b.n	8001b34 <__aeabi_dadd+0x5a4>
 8001792:	0742      	lsls	r2, r0, #29
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	4313      	orrs	r3, r2
 8001798:	08c0      	lsrs	r0, r0, #3
 800179a:	e029      	b.n	80017f0 <__aeabi_dadd+0x260>
 800179c:	003a      	movs	r2, r7
 800179e:	430a      	orrs	r2, r1
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dadd+0x214>
 80017a2:	e170      	b.n	8001a86 <__aeabi_dadd+0x4f6>
 80017a4:	4662      	mov	r2, ip
 80017a6:	4664      	mov	r4, ip
 80017a8:	3a01      	subs	r2, #1
 80017aa:	2c01      	cmp	r4, #1
 80017ac:	d100      	bne.n	80017b0 <__aeabi_dadd+0x220>
 80017ae:	e0e0      	b.n	8001972 <__aeabi_dadd+0x3e2>
 80017b0:	4c51      	ldr	r4, [pc, #324]	; (80018f8 <__aeabi_dadd+0x368>)
 80017b2:	45a4      	cmp	ip, r4
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x228>
 80017b6:	e161      	b.n	8001a7c <__aeabi_dadd+0x4ec>
 80017b8:	4694      	mov	ip, r2
 80017ba:	e7b4      	b.n	8001726 <__aeabi_dadd+0x196>
 80017bc:	003a      	movs	r2, r7
 80017be:	391f      	subs	r1, #31
 80017c0:	40ca      	lsrs	r2, r1
 80017c2:	0011      	movs	r1, r2
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d003      	beq.n	80017d0 <__aeabi_dadd+0x240>
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	409f      	lsls	r7, r3
 80017ce:	433c      	orrs	r4, r7
 80017d0:	1e63      	subs	r3, r4, #1
 80017d2:	419c      	sbcs	r4, r3
 80017d4:	2700      	movs	r7, #0
 80017d6:	2600      	movs	r6, #0
 80017d8:	430c      	orrs	r4, r1
 80017da:	0763      	lsls	r3, r4, #29
 80017dc:	d000      	beq.n	80017e0 <__aeabi_dadd+0x250>
 80017de:	e753      	b.n	8001688 <__aeabi_dadd+0xf8>
 80017e0:	46b4      	mov	ip, r6
 80017e2:	08e4      	lsrs	r4, r4, #3
 80017e4:	077b      	lsls	r3, r7, #29
 80017e6:	4323      	orrs	r3, r4
 80017e8:	08f8      	lsrs	r0, r7, #3
 80017ea:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <__aeabi_dadd+0x368>)
 80017ec:	4594      	cmp	ip, r2
 80017ee:	d01d      	beq.n	800182c <__aeabi_dadd+0x29c>
 80017f0:	4662      	mov	r2, ip
 80017f2:	0307      	lsls	r7, r0, #12
 80017f4:	0552      	lsls	r2, r2, #21
 80017f6:	0b3f      	lsrs	r7, r7, #12
 80017f8:	0d52      	lsrs	r2, r2, #21
 80017fa:	e760      	b.n	80016be <__aeabi_dadd+0x12e>
 80017fc:	4644      	mov	r4, r8
 80017fe:	430c      	orrs	r4, r1
 8001800:	1e62      	subs	r2, r4, #1
 8001802:	4194      	sbcs	r4, r2
 8001804:	18e4      	adds	r4, r4, r3
 8001806:	429c      	cmp	r4, r3
 8001808:	419b      	sbcs	r3, r3
 800180a:	425f      	negs	r7, r3
 800180c:	183f      	adds	r7, r7, r0
 800180e:	023b      	lsls	r3, r7, #8
 8001810:	d5e3      	bpl.n	80017da <__aeabi_dadd+0x24a>
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <__aeabi_dadd+0x368>)
 8001814:	3601      	adds	r6, #1
 8001816:	429e      	cmp	r6, r3
 8001818:	d000      	beq.n	800181c <__aeabi_dadd+0x28c>
 800181a:	e0b5      	b.n	8001988 <__aeabi_dadd+0x3f8>
 800181c:	0032      	movs	r2, r6
 800181e:	2700      	movs	r7, #0
 8001820:	2300      	movs	r3, #0
 8001822:	e74c      	b.n	80016be <__aeabi_dadd+0x12e>
 8001824:	0742      	lsls	r2, r0, #29
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	4313      	orrs	r3, r2
 800182a:	08c0      	lsrs	r0, r0, #3
 800182c:	001a      	movs	r2, r3
 800182e:	4302      	orrs	r2, r0
 8001830:	d100      	bne.n	8001834 <__aeabi_dadd+0x2a4>
 8001832:	e1e1      	b.n	8001bf8 <__aeabi_dadd+0x668>
 8001834:	2780      	movs	r7, #128	; 0x80
 8001836:	033f      	lsls	r7, r7, #12
 8001838:	4307      	orrs	r7, r0
 800183a:	033f      	lsls	r7, r7, #12
 800183c:	4a2e      	ldr	r2, [pc, #184]	; (80018f8 <__aeabi_dadd+0x368>)
 800183e:	0b3f      	lsrs	r7, r7, #12
 8001840:	e73d      	b.n	80016be <__aeabi_dadd+0x12e>
 8001842:	0020      	movs	r0, r4
 8001844:	f001 fd5a 	bl	80032fc <__clzsi2>
 8001848:	0001      	movs	r1, r0
 800184a:	3118      	adds	r1, #24
 800184c:	291f      	cmp	r1, #31
 800184e:	dc00      	bgt.n	8001852 <__aeabi_dadd+0x2c2>
 8001850:	e6fc      	b.n	800164c <__aeabi_dadd+0xbc>
 8001852:	3808      	subs	r0, #8
 8001854:	4084      	lsls	r4, r0
 8001856:	0027      	movs	r7, r4
 8001858:	2400      	movs	r4, #0
 800185a:	42b1      	cmp	r1, r6
 800185c:	db00      	blt.n	8001860 <__aeabi_dadd+0x2d0>
 800185e:	e6ff      	b.n	8001660 <__aeabi_dadd+0xd0>
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <__aeabi_dadd+0x36c>)
 8001862:	1a76      	subs	r6, r6, r1
 8001864:	4017      	ands	r7, r2
 8001866:	e70d      	b.n	8001684 <__aeabi_dadd+0xf4>
 8001868:	2a00      	cmp	r2, #0
 800186a:	d02f      	beq.n	80018cc <__aeabi_dadd+0x33c>
 800186c:	464a      	mov	r2, r9
 800186e:	1b92      	subs	r2, r2, r6
 8001870:	4694      	mov	ip, r2
 8001872:	2e00      	cmp	r6, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_dadd+0x2e8>
 8001876:	e0ad      	b.n	80019d4 <__aeabi_dadd+0x444>
 8001878:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <__aeabi_dadd+0x368>)
 800187a:	4591      	cmp	r9, r2
 800187c:	d100      	bne.n	8001880 <__aeabi_dadd+0x2f0>
 800187e:	e10f      	b.n	8001aa0 <__aeabi_dadd+0x510>
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	0412      	lsls	r2, r2, #16
 8001884:	4310      	orrs	r0, r2
 8001886:	4662      	mov	r2, ip
 8001888:	2a38      	cmp	r2, #56	; 0x38
 800188a:	dd00      	ble.n	800188e <__aeabi_dadd+0x2fe>
 800188c:	e10f      	b.n	8001aae <__aeabi_dadd+0x51e>
 800188e:	2a1f      	cmp	r2, #31
 8001890:	dd00      	ble.n	8001894 <__aeabi_dadd+0x304>
 8001892:	e180      	b.n	8001b96 <__aeabi_dadd+0x606>
 8001894:	4664      	mov	r4, ip
 8001896:	2220      	movs	r2, #32
 8001898:	001e      	movs	r6, r3
 800189a:	1b12      	subs	r2, r2, r4
 800189c:	4667      	mov	r7, ip
 800189e:	0004      	movs	r4, r0
 80018a0:	4093      	lsls	r3, r2
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40fe      	lsrs	r6, r7
 80018a6:	1e5a      	subs	r2, r3, #1
 80018a8:	4193      	sbcs	r3, r2
 80018aa:	40f8      	lsrs	r0, r7
 80018ac:	4334      	orrs	r4, r6
 80018ae:	431c      	orrs	r4, r3
 80018b0:	4480      	add	r8, r0
 80018b2:	1864      	adds	r4, r4, r1
 80018b4:	428c      	cmp	r4, r1
 80018b6:	41bf      	sbcs	r7, r7
 80018b8:	427f      	negs	r7, r7
 80018ba:	464e      	mov	r6, r9
 80018bc:	4447      	add	r7, r8
 80018be:	e7a6      	b.n	800180e <__aeabi_dadd+0x27e>
 80018c0:	4642      	mov	r2, r8
 80018c2:	430a      	orrs	r2, r1
 80018c4:	0011      	movs	r1, r2
 80018c6:	1e4a      	subs	r2, r1, #1
 80018c8:	4191      	sbcs	r1, r2
 80018ca:	e6ad      	b.n	8001628 <__aeabi_dadd+0x98>
 80018cc:	4c0c      	ldr	r4, [pc, #48]	; (8001900 <__aeabi_dadd+0x370>)
 80018ce:	1c72      	adds	r2, r6, #1
 80018d0:	4222      	tst	r2, r4
 80018d2:	d000      	beq.n	80018d6 <__aeabi_dadd+0x346>
 80018d4:	e0a1      	b.n	8001a1a <__aeabi_dadd+0x48a>
 80018d6:	0002      	movs	r2, r0
 80018d8:	431a      	orrs	r2, r3
 80018da:	2e00      	cmp	r6, #0
 80018dc:	d000      	beq.n	80018e0 <__aeabi_dadd+0x350>
 80018de:	e0fa      	b.n	8001ad6 <__aeabi_dadd+0x546>
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dadd+0x356>
 80018e4:	e145      	b.n	8001b72 <__aeabi_dadd+0x5e2>
 80018e6:	003a      	movs	r2, r7
 80018e8:	430a      	orrs	r2, r1
 80018ea:	d000      	beq.n	80018ee <__aeabi_dadd+0x35e>
 80018ec:	e146      	b.n	8001b7c <__aeabi_dadd+0x5ec>
 80018ee:	0742      	lsls	r2, r0, #29
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	08c0      	lsrs	r0, r0, #3
 80018f6:	e77b      	b.n	80017f0 <__aeabi_dadd+0x260>
 80018f8:	000007ff 	.word	0x000007ff
 80018fc:	ff7fffff 	.word	0xff7fffff
 8001900:	000007fe 	.word	0x000007fe
 8001904:	4647      	mov	r7, r8
 8001906:	1a5c      	subs	r4, r3, r1
 8001908:	1bc2      	subs	r2, r0, r7
 800190a:	42a3      	cmp	r3, r4
 800190c:	41bf      	sbcs	r7, r7
 800190e:	427f      	negs	r7, r7
 8001910:	46b9      	mov	r9, r7
 8001912:	0017      	movs	r7, r2
 8001914:	464a      	mov	r2, r9
 8001916:	1abf      	subs	r7, r7, r2
 8001918:	023a      	lsls	r2, r7, #8
 800191a:	d500      	bpl.n	800191e <__aeabi_dadd+0x38e>
 800191c:	e08d      	b.n	8001a3a <__aeabi_dadd+0x4aa>
 800191e:	0023      	movs	r3, r4
 8001920:	433b      	orrs	r3, r7
 8001922:	d000      	beq.n	8001926 <__aeabi_dadd+0x396>
 8001924:	e68a      	b.n	800163c <__aeabi_dadd+0xac>
 8001926:	2000      	movs	r0, #0
 8001928:	2500      	movs	r5, #0
 800192a:	e761      	b.n	80017f0 <__aeabi_dadd+0x260>
 800192c:	4cb4      	ldr	r4, [pc, #720]	; (8001c00 <__aeabi_dadd+0x670>)
 800192e:	45a1      	cmp	r9, r4
 8001930:	d100      	bne.n	8001934 <__aeabi_dadd+0x3a4>
 8001932:	e0ad      	b.n	8001a90 <__aeabi_dadd+0x500>
 8001934:	2480      	movs	r4, #128	; 0x80
 8001936:	0424      	lsls	r4, r4, #16
 8001938:	4320      	orrs	r0, r4
 800193a:	4664      	mov	r4, ip
 800193c:	2c38      	cmp	r4, #56	; 0x38
 800193e:	dc3d      	bgt.n	80019bc <__aeabi_dadd+0x42c>
 8001940:	4662      	mov	r2, ip
 8001942:	2c1f      	cmp	r4, #31
 8001944:	dd00      	ble.n	8001948 <__aeabi_dadd+0x3b8>
 8001946:	e0b7      	b.n	8001ab8 <__aeabi_dadd+0x528>
 8001948:	2520      	movs	r5, #32
 800194a:	001e      	movs	r6, r3
 800194c:	1b2d      	subs	r5, r5, r4
 800194e:	0004      	movs	r4, r0
 8001950:	40ab      	lsls	r3, r5
 8001952:	40ac      	lsls	r4, r5
 8001954:	40d6      	lsrs	r6, r2
 8001956:	40d0      	lsrs	r0, r2
 8001958:	4642      	mov	r2, r8
 800195a:	1e5d      	subs	r5, r3, #1
 800195c:	41ab      	sbcs	r3, r5
 800195e:	4334      	orrs	r4, r6
 8001960:	1a12      	subs	r2, r2, r0
 8001962:	4690      	mov	r8, r2
 8001964:	4323      	orrs	r3, r4
 8001966:	e02c      	b.n	80019c2 <__aeabi_dadd+0x432>
 8001968:	0742      	lsls	r2, r0, #29
 800196a:	08db      	lsrs	r3, r3, #3
 800196c:	4313      	orrs	r3, r2
 800196e:	08c0      	lsrs	r0, r0, #3
 8001970:	e73b      	b.n	80017ea <__aeabi_dadd+0x25a>
 8001972:	185c      	adds	r4, r3, r1
 8001974:	429c      	cmp	r4, r3
 8001976:	419b      	sbcs	r3, r3
 8001978:	4440      	add	r0, r8
 800197a:	425b      	negs	r3, r3
 800197c:	18c7      	adds	r7, r0, r3
 800197e:	2601      	movs	r6, #1
 8001980:	023b      	lsls	r3, r7, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dadd+0x3f6>
 8001984:	e729      	b.n	80017da <__aeabi_dadd+0x24a>
 8001986:	2602      	movs	r6, #2
 8001988:	4a9e      	ldr	r2, [pc, #632]	; (8001c04 <__aeabi_dadd+0x674>)
 800198a:	0863      	lsrs	r3, r4, #1
 800198c:	4017      	ands	r7, r2
 800198e:	2201      	movs	r2, #1
 8001990:	4014      	ands	r4, r2
 8001992:	431c      	orrs	r4, r3
 8001994:	07fb      	lsls	r3, r7, #31
 8001996:	431c      	orrs	r4, r3
 8001998:	087f      	lsrs	r7, r7, #1
 800199a:	e673      	b.n	8001684 <__aeabi_dadd+0xf4>
 800199c:	4644      	mov	r4, r8
 800199e:	3a20      	subs	r2, #32
 80019a0:	40d4      	lsrs	r4, r2
 80019a2:	4662      	mov	r2, ip
 80019a4:	2a20      	cmp	r2, #32
 80019a6:	d005      	beq.n	80019b4 <__aeabi_dadd+0x424>
 80019a8:	4667      	mov	r7, ip
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	1bd2      	subs	r2, r2, r7
 80019ae:	4647      	mov	r7, r8
 80019b0:	4097      	lsls	r7, r2
 80019b2:	4339      	orrs	r1, r7
 80019b4:	1e4a      	subs	r2, r1, #1
 80019b6:	4191      	sbcs	r1, r2
 80019b8:	4321      	orrs	r1, r4
 80019ba:	e635      	b.n	8001628 <__aeabi_dadd+0x98>
 80019bc:	4303      	orrs	r3, r0
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	4183      	sbcs	r3, r0
 80019c2:	1acc      	subs	r4, r1, r3
 80019c4:	42a1      	cmp	r1, r4
 80019c6:	41bf      	sbcs	r7, r7
 80019c8:	4643      	mov	r3, r8
 80019ca:	427f      	negs	r7, r7
 80019cc:	4655      	mov	r5, sl
 80019ce:	464e      	mov	r6, r9
 80019d0:	1bdf      	subs	r7, r3, r7
 80019d2:	e62e      	b.n	8001632 <__aeabi_dadd+0xa2>
 80019d4:	0002      	movs	r2, r0
 80019d6:	431a      	orrs	r2, r3
 80019d8:	d100      	bne.n	80019dc <__aeabi_dadd+0x44c>
 80019da:	e0bd      	b.n	8001b58 <__aeabi_dadd+0x5c8>
 80019dc:	4662      	mov	r2, ip
 80019de:	4664      	mov	r4, ip
 80019e0:	3a01      	subs	r2, #1
 80019e2:	2c01      	cmp	r4, #1
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dadd+0x458>
 80019e6:	e0e5      	b.n	8001bb4 <__aeabi_dadd+0x624>
 80019e8:	4c85      	ldr	r4, [pc, #532]	; (8001c00 <__aeabi_dadd+0x670>)
 80019ea:	45a4      	cmp	ip, r4
 80019ec:	d058      	beq.n	8001aa0 <__aeabi_dadd+0x510>
 80019ee:	4694      	mov	ip, r2
 80019f0:	e749      	b.n	8001886 <__aeabi_dadd+0x2f6>
 80019f2:	4664      	mov	r4, ip
 80019f4:	2220      	movs	r2, #32
 80019f6:	1b12      	subs	r2, r2, r4
 80019f8:	4644      	mov	r4, r8
 80019fa:	4094      	lsls	r4, r2
 80019fc:	000f      	movs	r7, r1
 80019fe:	46a1      	mov	r9, r4
 8001a00:	4664      	mov	r4, ip
 8001a02:	4091      	lsls	r1, r2
 8001a04:	40e7      	lsrs	r7, r4
 8001a06:	464c      	mov	r4, r9
 8001a08:	1e4a      	subs	r2, r1, #1
 8001a0a:	4191      	sbcs	r1, r2
 8001a0c:	433c      	orrs	r4, r7
 8001a0e:	4642      	mov	r2, r8
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4661      	mov	r1, ip
 8001a14:	40ca      	lsrs	r2, r1
 8001a16:	1880      	adds	r0, r0, r2
 8001a18:	e6f4      	b.n	8001804 <__aeabi_dadd+0x274>
 8001a1a:	4c79      	ldr	r4, [pc, #484]	; (8001c00 <__aeabi_dadd+0x670>)
 8001a1c:	42a2      	cmp	r2, r4
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dadd+0x492>
 8001a20:	e6fd      	b.n	800181e <__aeabi_dadd+0x28e>
 8001a22:	1859      	adds	r1, r3, r1
 8001a24:	4299      	cmp	r1, r3
 8001a26:	419b      	sbcs	r3, r3
 8001a28:	4440      	add	r0, r8
 8001a2a:	425f      	negs	r7, r3
 8001a2c:	19c7      	adds	r7, r0, r7
 8001a2e:	07fc      	lsls	r4, r7, #31
 8001a30:	0849      	lsrs	r1, r1, #1
 8001a32:	0016      	movs	r6, r2
 8001a34:	430c      	orrs	r4, r1
 8001a36:	087f      	lsrs	r7, r7, #1
 8001a38:	e6cf      	b.n	80017da <__aeabi_dadd+0x24a>
 8001a3a:	1acc      	subs	r4, r1, r3
 8001a3c:	42a1      	cmp	r1, r4
 8001a3e:	41bf      	sbcs	r7, r7
 8001a40:	4643      	mov	r3, r8
 8001a42:	427f      	negs	r7, r7
 8001a44:	1a18      	subs	r0, r3, r0
 8001a46:	4655      	mov	r5, sl
 8001a48:	1bc7      	subs	r7, r0, r7
 8001a4a:	e5f7      	b.n	800163c <__aeabi_dadd+0xac>
 8001a4c:	08c9      	lsrs	r1, r1, #3
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	4655      	mov	r5, sl
 8001a52:	430b      	orrs	r3, r1
 8001a54:	08f8      	lsrs	r0, r7, #3
 8001a56:	e6c8      	b.n	80017ea <__aeabi_dadd+0x25a>
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d000      	beq.n	8001a5e <__aeabi_dadd+0x4ce>
 8001a5c:	e081      	b.n	8001b62 <__aeabi_dadd+0x5d2>
 8001a5e:	4643      	mov	r3, r8
 8001a60:	430b      	orrs	r3, r1
 8001a62:	d115      	bne.n	8001a90 <__aeabi_dadd+0x500>
 8001a64:	2080      	movs	r0, #128	; 0x80
 8001a66:	2500      	movs	r5, #0
 8001a68:	0300      	lsls	r0, r0, #12
 8001a6a:	e6e3      	b.n	8001834 <__aeabi_dadd+0x2a4>
 8001a6c:	1a5c      	subs	r4, r3, r1
 8001a6e:	42a3      	cmp	r3, r4
 8001a70:	419b      	sbcs	r3, r3
 8001a72:	1bc7      	subs	r7, r0, r7
 8001a74:	425b      	negs	r3, r3
 8001a76:	2601      	movs	r6, #1
 8001a78:	1aff      	subs	r7, r7, r3
 8001a7a:	e5da      	b.n	8001632 <__aeabi_dadd+0xa2>
 8001a7c:	0742      	lsls	r2, r0, #29
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	08c0      	lsrs	r0, r0, #3
 8001a84:	e6d2      	b.n	800182c <__aeabi_dadd+0x29c>
 8001a86:	0742      	lsls	r2, r0, #29
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	08c0      	lsrs	r0, r0, #3
 8001a8e:	e6ac      	b.n	80017ea <__aeabi_dadd+0x25a>
 8001a90:	4643      	mov	r3, r8
 8001a92:	4642      	mov	r2, r8
 8001a94:	08c9      	lsrs	r1, r1, #3
 8001a96:	075b      	lsls	r3, r3, #29
 8001a98:	4655      	mov	r5, sl
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	08d0      	lsrs	r0, r2, #3
 8001a9e:	e6c5      	b.n	800182c <__aeabi_dadd+0x29c>
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	4642      	mov	r2, r8
 8001aa4:	075b      	lsls	r3, r3, #29
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	08d0      	lsrs	r0, r2, #3
 8001aac:	e6be      	b.n	800182c <__aeabi_dadd+0x29c>
 8001aae:	4303      	orrs	r3, r0
 8001ab0:	001c      	movs	r4, r3
 8001ab2:	1e63      	subs	r3, r4, #1
 8001ab4:	419c      	sbcs	r4, r3
 8001ab6:	e6fc      	b.n	80018b2 <__aeabi_dadd+0x322>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	3c20      	subs	r4, #32
 8001abc:	40e2      	lsrs	r2, r4
 8001abe:	0014      	movs	r4, r2
 8001ac0:	4662      	mov	r2, ip
 8001ac2:	2a20      	cmp	r2, #32
 8001ac4:	d003      	beq.n	8001ace <__aeabi_dadd+0x53e>
 8001ac6:	2540      	movs	r5, #64	; 0x40
 8001ac8:	1aad      	subs	r5, r5, r2
 8001aca:	40a8      	lsls	r0, r5
 8001acc:	4303      	orrs	r3, r0
 8001ace:	1e58      	subs	r0, r3, #1
 8001ad0:	4183      	sbcs	r3, r0
 8001ad2:	4323      	orrs	r3, r4
 8001ad4:	e775      	b.n	80019c2 <__aeabi_dadd+0x432>
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	d0e2      	beq.n	8001aa0 <__aeabi_dadd+0x510>
 8001ada:	003a      	movs	r2, r7
 8001adc:	430a      	orrs	r2, r1
 8001ade:	d0cd      	beq.n	8001a7c <__aeabi_dadd+0x4ec>
 8001ae0:	0742      	lsls	r2, r0, #29
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	08c0      	lsrs	r0, r0, #3
 8001aea:	0312      	lsls	r2, r2, #12
 8001aec:	4210      	tst	r0, r2
 8001aee:	d006      	beq.n	8001afe <__aeabi_dadd+0x56e>
 8001af0:	08fc      	lsrs	r4, r7, #3
 8001af2:	4214      	tst	r4, r2
 8001af4:	d103      	bne.n	8001afe <__aeabi_dadd+0x56e>
 8001af6:	0020      	movs	r0, r4
 8001af8:	08cb      	lsrs	r3, r1, #3
 8001afa:	077a      	lsls	r2, r7, #29
 8001afc:	4313      	orrs	r3, r2
 8001afe:	0f5a      	lsrs	r2, r3, #29
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	0752      	lsls	r2, r2, #29
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	e690      	b.n	800182c <__aeabi_dadd+0x29c>
 8001b0a:	4643      	mov	r3, r8
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dadd+0x582>
 8001b10:	e709      	b.n	8001926 <__aeabi_dadd+0x396>
 8001b12:	4643      	mov	r3, r8
 8001b14:	4642      	mov	r2, r8
 8001b16:	08c9      	lsrs	r1, r1, #3
 8001b18:	075b      	lsls	r3, r3, #29
 8001b1a:	4655      	mov	r5, sl
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	08d0      	lsrs	r0, r2, #3
 8001b20:	e666      	b.n	80017f0 <__aeabi_dadd+0x260>
 8001b22:	1acc      	subs	r4, r1, r3
 8001b24:	42a1      	cmp	r1, r4
 8001b26:	4189      	sbcs	r1, r1
 8001b28:	1a3f      	subs	r7, r7, r0
 8001b2a:	4249      	negs	r1, r1
 8001b2c:	4655      	mov	r5, sl
 8001b2e:	2601      	movs	r6, #1
 8001b30:	1a7f      	subs	r7, r7, r1
 8001b32:	e57e      	b.n	8001632 <__aeabi_dadd+0xa2>
 8001b34:	4642      	mov	r2, r8
 8001b36:	1a5c      	subs	r4, r3, r1
 8001b38:	1a87      	subs	r7, r0, r2
 8001b3a:	42a3      	cmp	r3, r4
 8001b3c:	4192      	sbcs	r2, r2
 8001b3e:	4252      	negs	r2, r2
 8001b40:	1abf      	subs	r7, r7, r2
 8001b42:	023a      	lsls	r2, r7, #8
 8001b44:	d53d      	bpl.n	8001bc2 <__aeabi_dadd+0x632>
 8001b46:	1acc      	subs	r4, r1, r3
 8001b48:	42a1      	cmp	r1, r4
 8001b4a:	4189      	sbcs	r1, r1
 8001b4c:	4643      	mov	r3, r8
 8001b4e:	4249      	negs	r1, r1
 8001b50:	1a1f      	subs	r7, r3, r0
 8001b52:	4655      	mov	r5, sl
 8001b54:	1a7f      	subs	r7, r7, r1
 8001b56:	e595      	b.n	8001684 <__aeabi_dadd+0xf4>
 8001b58:	077b      	lsls	r3, r7, #29
 8001b5a:	08c9      	lsrs	r1, r1, #3
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	08f8      	lsrs	r0, r7, #3
 8001b60:	e643      	b.n	80017ea <__aeabi_dadd+0x25a>
 8001b62:	4644      	mov	r4, r8
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	430c      	orrs	r4, r1
 8001b68:	d130      	bne.n	8001bcc <__aeabi_dadd+0x63c>
 8001b6a:	0742      	lsls	r2, r0, #29
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	08c0      	lsrs	r0, r0, #3
 8001b70:	e65c      	b.n	800182c <__aeabi_dadd+0x29c>
 8001b72:	077b      	lsls	r3, r7, #29
 8001b74:	08c9      	lsrs	r1, r1, #3
 8001b76:	430b      	orrs	r3, r1
 8001b78:	08f8      	lsrs	r0, r7, #3
 8001b7a:	e639      	b.n	80017f0 <__aeabi_dadd+0x260>
 8001b7c:	185c      	adds	r4, r3, r1
 8001b7e:	429c      	cmp	r4, r3
 8001b80:	419b      	sbcs	r3, r3
 8001b82:	4440      	add	r0, r8
 8001b84:	425b      	negs	r3, r3
 8001b86:	18c7      	adds	r7, r0, r3
 8001b88:	023b      	lsls	r3, r7, #8
 8001b8a:	d400      	bmi.n	8001b8e <__aeabi_dadd+0x5fe>
 8001b8c:	e625      	b.n	80017da <__aeabi_dadd+0x24a>
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <__aeabi_dadd+0x674>)
 8001b90:	2601      	movs	r6, #1
 8001b92:	401f      	ands	r7, r3
 8001b94:	e621      	b.n	80017da <__aeabi_dadd+0x24a>
 8001b96:	0004      	movs	r4, r0
 8001b98:	3a20      	subs	r2, #32
 8001b9a:	40d4      	lsrs	r4, r2
 8001b9c:	4662      	mov	r2, ip
 8001b9e:	2a20      	cmp	r2, #32
 8001ba0:	d004      	beq.n	8001bac <__aeabi_dadd+0x61c>
 8001ba2:	2240      	movs	r2, #64	; 0x40
 8001ba4:	4666      	mov	r6, ip
 8001ba6:	1b92      	subs	r2, r2, r6
 8001ba8:	4090      	lsls	r0, r2
 8001baa:	4303      	orrs	r3, r0
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	4193      	sbcs	r3, r2
 8001bb0:	431c      	orrs	r4, r3
 8001bb2:	e67e      	b.n	80018b2 <__aeabi_dadd+0x322>
 8001bb4:	185c      	adds	r4, r3, r1
 8001bb6:	428c      	cmp	r4, r1
 8001bb8:	4189      	sbcs	r1, r1
 8001bba:	4440      	add	r0, r8
 8001bbc:	4249      	negs	r1, r1
 8001bbe:	1847      	adds	r7, r0, r1
 8001bc0:	e6dd      	b.n	800197e <__aeabi_dadd+0x3ee>
 8001bc2:	0023      	movs	r3, r4
 8001bc4:	433b      	orrs	r3, r7
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dadd+0x63a>
 8001bc8:	e6ad      	b.n	8001926 <__aeabi_dadd+0x396>
 8001bca:	e606      	b.n	80017da <__aeabi_dadd+0x24a>
 8001bcc:	0744      	lsls	r4, r0, #29
 8001bce:	4323      	orrs	r3, r4
 8001bd0:	2480      	movs	r4, #128	; 0x80
 8001bd2:	08c0      	lsrs	r0, r0, #3
 8001bd4:	0324      	lsls	r4, r4, #12
 8001bd6:	4220      	tst	r0, r4
 8001bd8:	d008      	beq.n	8001bec <__aeabi_dadd+0x65c>
 8001bda:	4642      	mov	r2, r8
 8001bdc:	08d6      	lsrs	r6, r2, #3
 8001bde:	4226      	tst	r6, r4
 8001be0:	d104      	bne.n	8001bec <__aeabi_dadd+0x65c>
 8001be2:	4655      	mov	r5, sl
 8001be4:	0030      	movs	r0, r6
 8001be6:	08cb      	lsrs	r3, r1, #3
 8001be8:	0751      	lsls	r1, r2, #29
 8001bea:	430b      	orrs	r3, r1
 8001bec:	0f5a      	lsrs	r2, r3, #29
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	08db      	lsrs	r3, r3, #3
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	e619      	b.n	800182c <__aeabi_dadd+0x29c>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4a01      	ldr	r2, [pc, #4]	; (8001c00 <__aeabi_dadd+0x670>)
 8001bfc:	001f      	movs	r7, r3
 8001bfe:	e55e      	b.n	80016be <__aeabi_dadd+0x12e>
 8001c00:	000007ff 	.word	0x000007ff
 8001c04:	ff7fffff 	.word	0xff7fffff

08001c08 <__aeabi_ddiv>:
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	4657      	mov	r7, sl
 8001c0c:	464e      	mov	r6, r9
 8001c0e:	4645      	mov	r5, r8
 8001c10:	46de      	mov	lr, fp
 8001c12:	b5e0      	push	{r5, r6, r7, lr}
 8001c14:	4681      	mov	r9, r0
 8001c16:	0005      	movs	r5, r0
 8001c18:	030c      	lsls	r4, r1, #12
 8001c1a:	0048      	lsls	r0, r1, #1
 8001c1c:	4692      	mov	sl, r2
 8001c1e:	001f      	movs	r7, r3
 8001c20:	b085      	sub	sp, #20
 8001c22:	0b24      	lsrs	r4, r4, #12
 8001c24:	0d40      	lsrs	r0, r0, #21
 8001c26:	0fce      	lsrs	r6, r1, #31
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_ddiv+0x26>
 8001c2c:	e156      	b.n	8001edc <__aeabi_ddiv+0x2d4>
 8001c2e:	4bd4      	ldr	r3, [pc, #848]	; (8001f80 <__aeabi_ddiv+0x378>)
 8001c30:	4298      	cmp	r0, r3
 8001c32:	d100      	bne.n	8001c36 <__aeabi_ddiv+0x2e>
 8001c34:	e172      	b.n	8001f1c <__aeabi_ddiv+0x314>
 8001c36:	0f6b      	lsrs	r3, r5, #29
 8001c38:	00e4      	lsls	r4, r4, #3
 8001c3a:	431c      	orrs	r4, r3
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	041b      	lsls	r3, r3, #16
 8001c40:	4323      	orrs	r3, r4
 8001c42:	4698      	mov	r8, r3
 8001c44:	4bcf      	ldr	r3, [pc, #828]	; (8001f84 <__aeabi_ddiv+0x37c>)
 8001c46:	00ed      	lsls	r5, r5, #3
 8001c48:	469b      	mov	fp, r3
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	4483      	add	fp, r0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	033c      	lsls	r4, r7, #12
 8001c54:	007b      	lsls	r3, r7, #1
 8001c56:	4650      	mov	r0, sl
 8001c58:	0b24      	lsrs	r4, r4, #12
 8001c5a:	0d5b      	lsrs	r3, r3, #21
 8001c5c:	0fff      	lsrs	r7, r7, #31
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d100      	bne.n	8001c64 <__aeabi_ddiv+0x5c>
 8001c62:	e11f      	b.n	8001ea4 <__aeabi_ddiv+0x29c>
 8001c64:	4ac6      	ldr	r2, [pc, #792]	; (8001f80 <__aeabi_ddiv+0x378>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d100      	bne.n	8001c6c <__aeabi_ddiv+0x64>
 8001c6a:	e162      	b.n	8001f32 <__aeabi_ddiv+0x32a>
 8001c6c:	49c5      	ldr	r1, [pc, #788]	; (8001f84 <__aeabi_ddiv+0x37c>)
 8001c6e:	0f42      	lsrs	r2, r0, #29
 8001c70:	468c      	mov	ip, r1
 8001c72:	00e4      	lsls	r4, r4, #3
 8001c74:	4659      	mov	r1, fp
 8001c76:	4314      	orrs	r4, r2
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	4463      	add	r3, ip
 8001c7c:	0412      	lsls	r2, r2, #16
 8001c7e:	1acb      	subs	r3, r1, r3
 8001c80:	4314      	orrs	r4, r2
 8001c82:	469b      	mov	fp, r3
 8001c84:	00c2      	lsls	r2, r0, #3
 8001c86:	2000      	movs	r0, #0
 8001c88:	0033      	movs	r3, r6
 8001c8a:	407b      	eors	r3, r7
 8001c8c:	469a      	mov	sl, r3
 8001c8e:	464b      	mov	r3, r9
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d827      	bhi.n	8001ce4 <__aeabi_ddiv+0xdc>
 8001c94:	49bc      	ldr	r1, [pc, #752]	; (8001f88 <__aeabi_ddiv+0x380>)
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	58cb      	ldr	r3, [r1, r3]
 8001c9a:	469f      	mov	pc, r3
 8001c9c:	46b2      	mov	sl, r6
 8001c9e:	9b00      	ldr	r3, [sp, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d016      	beq.n	8001cd2 <__aeabi_ddiv+0xca>
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d100      	bne.n	8001caa <__aeabi_ddiv+0xa2>
 8001ca8:	e28e      	b.n	80021c8 <__aeabi_ddiv+0x5c0>
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_ddiv+0xa8>
 8001cae:	e0d9      	b.n	8001e64 <__aeabi_ddiv+0x25c>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	2500      	movs	r5, #0
 8001cb6:	4652      	mov	r2, sl
 8001cb8:	051b      	lsls	r3, r3, #20
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	07d2      	lsls	r2, r2, #31
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	0028      	movs	r0, r5
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	b005      	add	sp, #20
 8001cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc8:	46bb      	mov	fp, r7
 8001cca:	46b2      	mov	sl, r6
 8001ccc:	46a9      	mov	r9, r5
 8001cce:	46a0      	mov	r8, r4
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd2:	2400      	movs	r4, #0
 8001cd4:	2500      	movs	r5, #0
 8001cd6:	4baa      	ldr	r3, [pc, #680]	; (8001f80 <__aeabi_ddiv+0x378>)
 8001cd8:	e7ed      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8001cda:	46ba      	mov	sl, r7
 8001cdc:	46a0      	mov	r8, r4
 8001cde:	0015      	movs	r5, r2
 8001ce0:	9000      	str	r0, [sp, #0]
 8001ce2:	e7dc      	b.n	8001c9e <__aeabi_ddiv+0x96>
 8001ce4:	4544      	cmp	r4, r8
 8001ce6:	d200      	bcs.n	8001cea <__aeabi_ddiv+0xe2>
 8001ce8:	e1c7      	b.n	800207a <__aeabi_ddiv+0x472>
 8001cea:	d100      	bne.n	8001cee <__aeabi_ddiv+0xe6>
 8001cec:	e1c2      	b.n	8002074 <__aeabi_ddiv+0x46c>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	425b      	negs	r3, r3
 8001cf2:	469c      	mov	ip, r3
 8001cf4:	002e      	movs	r6, r5
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	44e3      	add	fp, ip
 8001cfc:	0223      	lsls	r3, r4, #8
 8001cfe:	0e14      	lsrs	r4, r2, #24
 8001d00:	431c      	orrs	r4, r3
 8001d02:	0c1b      	lsrs	r3, r3, #16
 8001d04:	4699      	mov	r9, r3
 8001d06:	0423      	lsls	r3, r4, #16
 8001d08:	0c1f      	lsrs	r7, r3, #16
 8001d0a:	0212      	lsls	r2, r2, #8
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	9200      	str	r2, [sp, #0]
 8001d10:	9701      	str	r7, [sp, #4]
 8001d12:	f7fe fa9b 	bl	800024c <__aeabi_uidivmod>
 8001d16:	0002      	movs	r2, r0
 8001d18:	437a      	muls	r2, r7
 8001d1a:	040b      	lsls	r3, r1, #16
 8001d1c:	0c31      	lsrs	r1, r6, #16
 8001d1e:	4680      	mov	r8, r0
 8001d20:	4319      	orrs	r1, r3
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d907      	bls.n	8001d36 <__aeabi_ddiv+0x12e>
 8001d26:	2301      	movs	r3, #1
 8001d28:	425b      	negs	r3, r3
 8001d2a:	469c      	mov	ip, r3
 8001d2c:	1909      	adds	r1, r1, r4
 8001d2e:	44e0      	add	r8, ip
 8001d30:	428c      	cmp	r4, r1
 8001d32:	d800      	bhi.n	8001d36 <__aeabi_ddiv+0x12e>
 8001d34:	e207      	b.n	8002146 <__aeabi_ddiv+0x53e>
 8001d36:	1a88      	subs	r0, r1, r2
 8001d38:	4649      	mov	r1, r9
 8001d3a:	f7fe fa87 	bl	800024c <__aeabi_uidivmod>
 8001d3e:	0409      	lsls	r1, r1, #16
 8001d40:	468c      	mov	ip, r1
 8001d42:	0431      	lsls	r1, r6, #16
 8001d44:	4666      	mov	r6, ip
 8001d46:	9a01      	ldr	r2, [sp, #4]
 8001d48:	0c09      	lsrs	r1, r1, #16
 8001d4a:	4342      	muls	r2, r0
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	4331      	orrs	r1, r6
 8001d50:	428a      	cmp	r2, r1
 8001d52:	d904      	bls.n	8001d5e <__aeabi_ddiv+0x156>
 8001d54:	1909      	adds	r1, r1, r4
 8001d56:	3b01      	subs	r3, #1
 8001d58:	428c      	cmp	r4, r1
 8001d5a:	d800      	bhi.n	8001d5e <__aeabi_ddiv+0x156>
 8001d5c:	e1ed      	b.n	800213a <__aeabi_ddiv+0x532>
 8001d5e:	1a88      	subs	r0, r1, r2
 8001d60:	4642      	mov	r2, r8
 8001d62:	0412      	lsls	r2, r2, #16
 8001d64:	431a      	orrs	r2, r3
 8001d66:	4690      	mov	r8, r2
 8001d68:	4641      	mov	r1, r8
 8001d6a:	9b00      	ldr	r3, [sp, #0]
 8001d6c:	040e      	lsls	r6, r1, #16
 8001d6e:	0c1b      	lsrs	r3, r3, #16
 8001d70:	001f      	movs	r7, r3
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	9b00      	ldr	r3, [sp, #0]
 8001d76:	0c36      	lsrs	r6, r6, #16
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	0c19      	lsrs	r1, r3, #16
 8001d7c:	000b      	movs	r3, r1
 8001d7e:	4373      	muls	r3, r6
 8001d80:	0c12      	lsrs	r2, r2, #16
 8001d82:	437e      	muls	r6, r7
 8001d84:	9103      	str	r1, [sp, #12]
 8001d86:	4351      	muls	r1, r2
 8001d88:	437a      	muls	r2, r7
 8001d8a:	0c1f      	lsrs	r7, r3, #16
 8001d8c:	46bc      	mov	ip, r7
 8001d8e:	1876      	adds	r6, r6, r1
 8001d90:	4466      	add	r6, ip
 8001d92:	42b1      	cmp	r1, r6
 8001d94:	d903      	bls.n	8001d9e <__aeabi_ddiv+0x196>
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	0249      	lsls	r1, r1, #9
 8001d9a:	468c      	mov	ip, r1
 8001d9c:	4462      	add	r2, ip
 8001d9e:	0c31      	lsrs	r1, r6, #16
 8001da0:	188a      	adds	r2, r1, r2
 8001da2:	0431      	lsls	r1, r6, #16
 8001da4:	041e      	lsls	r6, r3, #16
 8001da6:	0c36      	lsrs	r6, r6, #16
 8001da8:	198e      	adds	r6, r1, r6
 8001daa:	4290      	cmp	r0, r2
 8001dac:	d302      	bcc.n	8001db4 <__aeabi_ddiv+0x1ac>
 8001dae:	d112      	bne.n	8001dd6 <__aeabi_ddiv+0x1ce>
 8001db0:	42b5      	cmp	r5, r6
 8001db2:	d210      	bcs.n	8001dd6 <__aeabi_ddiv+0x1ce>
 8001db4:	4643      	mov	r3, r8
 8001db6:	1e59      	subs	r1, r3, #1
 8001db8:	9b00      	ldr	r3, [sp, #0]
 8001dba:	469c      	mov	ip, r3
 8001dbc:	4465      	add	r5, ip
 8001dbe:	001f      	movs	r7, r3
 8001dc0:	429d      	cmp	r5, r3
 8001dc2:	419b      	sbcs	r3, r3
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	191b      	adds	r3, r3, r4
 8001dc8:	18c0      	adds	r0, r0, r3
 8001dca:	4284      	cmp	r4, r0
 8001dcc:	d200      	bcs.n	8001dd0 <__aeabi_ddiv+0x1c8>
 8001dce:	e1a0      	b.n	8002112 <__aeabi_ddiv+0x50a>
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x1cc>
 8001dd2:	e19b      	b.n	800210c <__aeabi_ddiv+0x504>
 8001dd4:	4688      	mov	r8, r1
 8001dd6:	1bae      	subs	r6, r5, r6
 8001dd8:	42b5      	cmp	r5, r6
 8001dda:	41ad      	sbcs	r5, r5
 8001ddc:	1a80      	subs	r0, r0, r2
 8001dde:	426d      	negs	r5, r5
 8001de0:	1b40      	subs	r0, r0, r5
 8001de2:	4284      	cmp	r4, r0
 8001de4:	d100      	bne.n	8001de8 <__aeabi_ddiv+0x1e0>
 8001de6:	e1d5      	b.n	8002194 <__aeabi_ddiv+0x58c>
 8001de8:	4649      	mov	r1, r9
 8001dea:	f7fe fa2f 	bl	800024c <__aeabi_uidivmod>
 8001dee:	9a01      	ldr	r2, [sp, #4]
 8001df0:	040b      	lsls	r3, r1, #16
 8001df2:	4342      	muls	r2, r0
 8001df4:	0c31      	lsrs	r1, r6, #16
 8001df6:	0005      	movs	r5, r0
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	428a      	cmp	r2, r1
 8001dfc:	d900      	bls.n	8001e00 <__aeabi_ddiv+0x1f8>
 8001dfe:	e16c      	b.n	80020da <__aeabi_ddiv+0x4d2>
 8001e00:	1a88      	subs	r0, r1, r2
 8001e02:	4649      	mov	r1, r9
 8001e04:	f7fe fa22 	bl	800024c <__aeabi_uidivmod>
 8001e08:	9a01      	ldr	r2, [sp, #4]
 8001e0a:	0436      	lsls	r6, r6, #16
 8001e0c:	4342      	muls	r2, r0
 8001e0e:	0409      	lsls	r1, r1, #16
 8001e10:	0c36      	lsrs	r6, r6, #16
 8001e12:	0003      	movs	r3, r0
 8001e14:	430e      	orrs	r6, r1
 8001e16:	42b2      	cmp	r2, r6
 8001e18:	d900      	bls.n	8001e1c <__aeabi_ddiv+0x214>
 8001e1a:	e153      	b.n	80020c4 <__aeabi_ddiv+0x4bc>
 8001e1c:	9803      	ldr	r0, [sp, #12]
 8001e1e:	1ab6      	subs	r6, r6, r2
 8001e20:	0002      	movs	r2, r0
 8001e22:	042d      	lsls	r5, r5, #16
 8001e24:	431d      	orrs	r5, r3
 8001e26:	9f02      	ldr	r7, [sp, #8]
 8001e28:	042b      	lsls	r3, r5, #16
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	435a      	muls	r2, r3
 8001e2e:	437b      	muls	r3, r7
 8001e30:	469c      	mov	ip, r3
 8001e32:	0c29      	lsrs	r1, r5, #16
 8001e34:	4348      	muls	r0, r1
 8001e36:	0c13      	lsrs	r3, r2, #16
 8001e38:	4484      	add	ip, r0
 8001e3a:	4463      	add	r3, ip
 8001e3c:	4379      	muls	r1, r7
 8001e3e:	4298      	cmp	r0, r3
 8001e40:	d903      	bls.n	8001e4a <__aeabi_ddiv+0x242>
 8001e42:	2080      	movs	r0, #128	; 0x80
 8001e44:	0240      	lsls	r0, r0, #9
 8001e46:	4684      	mov	ip, r0
 8001e48:	4461      	add	r1, ip
 8001e4a:	0c18      	lsrs	r0, r3, #16
 8001e4c:	0412      	lsls	r2, r2, #16
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	0c12      	lsrs	r2, r2, #16
 8001e52:	1841      	adds	r1, r0, r1
 8001e54:	189b      	adds	r3, r3, r2
 8001e56:	428e      	cmp	r6, r1
 8001e58:	d200      	bcs.n	8001e5c <__aeabi_ddiv+0x254>
 8001e5a:	e0ff      	b.n	800205c <__aeabi_ddiv+0x454>
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_ddiv+0x258>
 8001e5e:	e0fa      	b.n	8002056 <__aeabi_ddiv+0x44e>
 8001e60:	2301      	movs	r3, #1
 8001e62:	431d      	orrs	r5, r3
 8001e64:	4a49      	ldr	r2, [pc, #292]	; (8001f8c <__aeabi_ddiv+0x384>)
 8001e66:	445a      	add	r2, fp
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	dc00      	bgt.n	8001e6e <__aeabi_ddiv+0x266>
 8001e6c:	e0aa      	b.n	8001fc4 <__aeabi_ddiv+0x3bc>
 8001e6e:	076b      	lsls	r3, r5, #29
 8001e70:	d000      	beq.n	8001e74 <__aeabi_ddiv+0x26c>
 8001e72:	e13d      	b.n	80020f0 <__aeabi_ddiv+0x4e8>
 8001e74:	08ed      	lsrs	r5, r5, #3
 8001e76:	4643      	mov	r3, r8
 8001e78:	01db      	lsls	r3, r3, #7
 8001e7a:	d506      	bpl.n	8001e8a <__aeabi_ddiv+0x282>
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <__aeabi_ddiv+0x388>)
 8001e80:	401a      	ands	r2, r3
 8001e82:	4690      	mov	r8, r2
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	00d2      	lsls	r2, r2, #3
 8001e88:	445a      	add	r2, fp
 8001e8a:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <__aeabi_ddiv+0x38c>)
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dd00      	ble.n	8001e92 <__aeabi_ddiv+0x28a>
 8001e90:	e71f      	b.n	8001cd2 <__aeabi_ddiv+0xca>
 8001e92:	4643      	mov	r3, r8
 8001e94:	075b      	lsls	r3, r3, #29
 8001e96:	431d      	orrs	r5, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	0552      	lsls	r2, r2, #21
 8001e9c:	025c      	lsls	r4, r3, #9
 8001e9e:	0b24      	lsrs	r4, r4, #12
 8001ea0:	0d53      	lsrs	r3, r2, #21
 8001ea2:	e708      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8001ea4:	4652      	mov	r2, sl
 8001ea6:	4322      	orrs	r2, r4
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x2a4>
 8001eaa:	e07b      	b.n	8001fa4 <__aeabi_ddiv+0x39c>
 8001eac:	2c00      	cmp	r4, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_ddiv+0x2aa>
 8001eb0:	e0fa      	b.n	80020a8 <__aeabi_ddiv+0x4a0>
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	f001 fa22 	bl	80032fc <__clzsi2>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	3a0b      	subs	r2, #11
 8001ebc:	231d      	movs	r3, #29
 8001ebe:	0001      	movs	r1, r0
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	4652      	mov	r2, sl
 8001ec4:	3908      	subs	r1, #8
 8001ec6:	40da      	lsrs	r2, r3
 8001ec8:	408c      	lsls	r4, r1
 8001eca:	4314      	orrs	r4, r2
 8001ecc:	4652      	mov	r2, sl
 8001ece:	408a      	lsls	r2, r1
 8001ed0:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <__aeabi_ddiv+0x390>)
 8001ed2:	4458      	add	r0, fp
 8001ed4:	469b      	mov	fp, r3
 8001ed6:	4483      	add	fp, r0
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e6d5      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001edc:	464b      	mov	r3, r9
 8001ede:	4323      	orrs	r3, r4
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	d044      	beq.n	8001f6e <__aeabi_ddiv+0x366>
 8001ee4:	2c00      	cmp	r4, #0
 8001ee6:	d100      	bne.n	8001eea <__aeabi_ddiv+0x2e2>
 8001ee8:	e0ce      	b.n	8002088 <__aeabi_ddiv+0x480>
 8001eea:	0020      	movs	r0, r4
 8001eec:	f001 fa06 	bl	80032fc <__clzsi2>
 8001ef0:	0001      	movs	r1, r0
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	390b      	subs	r1, #11
 8001ef6:	231d      	movs	r3, #29
 8001ef8:	1a5b      	subs	r3, r3, r1
 8001efa:	4649      	mov	r1, r9
 8001efc:	0010      	movs	r0, r2
 8001efe:	40d9      	lsrs	r1, r3
 8001f00:	3808      	subs	r0, #8
 8001f02:	4084      	lsls	r4, r0
 8001f04:	000b      	movs	r3, r1
 8001f06:	464d      	mov	r5, r9
 8001f08:	4323      	orrs	r3, r4
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	4085      	lsls	r5, r0
 8001f0e:	4823      	ldr	r0, [pc, #140]	; (8001f9c <__aeabi_ddiv+0x394>)
 8001f10:	1a83      	subs	r3, r0, r2
 8001f12:	469b      	mov	fp, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	4699      	mov	r9, r3
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	e69a      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f1c:	464b      	mov	r3, r9
 8001f1e:	4323      	orrs	r3, r4
 8001f20:	4698      	mov	r8, r3
 8001f22:	d11d      	bne.n	8001f60 <__aeabi_ddiv+0x358>
 8001f24:	2308      	movs	r3, #8
 8001f26:	4699      	mov	r9, r3
 8001f28:	3b06      	subs	r3, #6
 8001f2a:	2500      	movs	r5, #0
 8001f2c:	4683      	mov	fp, r0
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	e68f      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f32:	4652      	mov	r2, sl
 8001f34:	4322      	orrs	r2, r4
 8001f36:	d109      	bne.n	8001f4c <__aeabi_ddiv+0x344>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	4319      	orrs	r1, r3
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <__aeabi_ddiv+0x398>)
 8001f40:	4689      	mov	r9, r1
 8001f42:	469c      	mov	ip, r3
 8001f44:	2400      	movs	r4, #0
 8001f46:	2002      	movs	r0, #2
 8001f48:	44e3      	add	fp, ip
 8001f4a:	e69d      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	464a      	mov	r2, r9
 8001f50:	431a      	orrs	r2, r3
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <__aeabi_ddiv+0x398>)
 8001f54:	4691      	mov	r9, r2
 8001f56:	469c      	mov	ip, r3
 8001f58:	4652      	mov	r2, sl
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	44e3      	add	fp, ip
 8001f5e:	e693      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001f60:	230c      	movs	r3, #12
 8001f62:	4699      	mov	r9, r3
 8001f64:	3b09      	subs	r3, #9
 8001f66:	46a0      	mov	r8, r4
 8001f68:	4683      	mov	fp, r0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	e671      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	4699      	mov	r9, r3
 8001f72:	2300      	movs	r3, #0
 8001f74:	469b      	mov	fp, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	2500      	movs	r5, #0
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	e669      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff
 8001f84:	fffffc01 	.word	0xfffffc01
 8001f88:	0800b4c8 	.word	0x0800b4c8
 8001f8c:	000003ff 	.word	0x000003ff
 8001f90:	feffffff 	.word	0xfeffffff
 8001f94:	000007fe 	.word	0x000007fe
 8001f98:	000003f3 	.word	0x000003f3
 8001f9c:	fffffc0d 	.word	0xfffffc0d
 8001fa0:	fffff801 	.word	0xfffff801
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4319      	orrs	r1, r3
 8001faa:	4689      	mov	r9, r1
 8001fac:	2400      	movs	r4, #0
 8001fae:	2001      	movs	r0, #1
 8001fb0:	e66a      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2480      	movs	r4, #128	; 0x80
 8001fb6:	469a      	mov	sl, r3
 8001fb8:	2500      	movs	r5, #0
 8001fba:	4b8a      	ldr	r3, [pc, #552]	; (80021e4 <__aeabi_ddiv+0x5dc>)
 8001fbc:	0324      	lsls	r4, r4, #12
 8001fbe:	e67a      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8001fc0:	2501      	movs	r5, #1
 8001fc2:	426d      	negs	r5, r5
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	2b38      	cmp	r3, #56	; 0x38
 8001fca:	dd00      	ble.n	8001fce <__aeabi_ddiv+0x3c6>
 8001fcc:	e670      	b.n	8001cb0 <__aeabi_ddiv+0xa8>
 8001fce:	2b1f      	cmp	r3, #31
 8001fd0:	dc00      	bgt.n	8001fd4 <__aeabi_ddiv+0x3cc>
 8001fd2:	e0bf      	b.n	8002154 <__aeabi_ddiv+0x54c>
 8001fd4:	211f      	movs	r1, #31
 8001fd6:	4249      	negs	r1, r1
 8001fd8:	1a8a      	subs	r2, r1, r2
 8001fda:	4641      	mov	r1, r8
 8001fdc:	40d1      	lsrs	r1, r2
 8001fde:	000a      	movs	r2, r1
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d004      	beq.n	8001fee <__aeabi_ddiv+0x3e6>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <__aeabi_ddiv+0x5e0>)
 8001fe8:	445b      	add	r3, fp
 8001fea:	4099      	lsls	r1, r3
 8001fec:	430d      	orrs	r5, r1
 8001fee:	1e6b      	subs	r3, r5, #1
 8001ff0:	419d      	sbcs	r5, r3
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	432a      	orrs	r2, r5
 8001ff6:	001d      	movs	r5, r3
 8001ff8:	2400      	movs	r4, #0
 8001ffa:	4015      	ands	r5, r2
 8001ffc:	4213      	tst	r3, r2
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0x3fa>
 8002000:	e0d4      	b.n	80021ac <__aeabi_ddiv+0x5a4>
 8002002:	210f      	movs	r1, #15
 8002004:	2300      	movs	r3, #0
 8002006:	4011      	ands	r1, r2
 8002008:	2904      	cmp	r1, #4
 800200a:	d100      	bne.n	800200e <__aeabi_ddiv+0x406>
 800200c:	e0cb      	b.n	80021a6 <__aeabi_ddiv+0x59e>
 800200e:	1d11      	adds	r1, r2, #4
 8002010:	4291      	cmp	r1, r2
 8002012:	4192      	sbcs	r2, r2
 8002014:	4252      	negs	r2, r2
 8002016:	189b      	adds	r3, r3, r2
 8002018:	000a      	movs	r2, r1
 800201a:	0219      	lsls	r1, r3, #8
 800201c:	d400      	bmi.n	8002020 <__aeabi_ddiv+0x418>
 800201e:	e0c2      	b.n	80021a6 <__aeabi_ddiv+0x59e>
 8002020:	2301      	movs	r3, #1
 8002022:	2400      	movs	r4, #0
 8002024:	2500      	movs	r5, #0
 8002026:	e646      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	4641      	mov	r1, r8
 800202c:	031b      	lsls	r3, r3, #12
 800202e:	4219      	tst	r1, r3
 8002030:	d008      	beq.n	8002044 <__aeabi_ddiv+0x43c>
 8002032:	421c      	tst	r4, r3
 8002034:	d106      	bne.n	8002044 <__aeabi_ddiv+0x43c>
 8002036:	431c      	orrs	r4, r3
 8002038:	0324      	lsls	r4, r4, #12
 800203a:	46ba      	mov	sl, r7
 800203c:	0015      	movs	r5, r2
 800203e:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <__aeabi_ddiv+0x5dc>)
 8002040:	0b24      	lsrs	r4, r4, #12
 8002042:	e638      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8002044:	2480      	movs	r4, #128	; 0x80
 8002046:	4643      	mov	r3, r8
 8002048:	0324      	lsls	r4, r4, #12
 800204a:	431c      	orrs	r4, r3
 800204c:	0324      	lsls	r4, r4, #12
 800204e:	46b2      	mov	sl, r6
 8002050:	4b64      	ldr	r3, [pc, #400]	; (80021e4 <__aeabi_ddiv+0x5dc>)
 8002052:	0b24      	lsrs	r4, r4, #12
 8002054:	e62f      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d100      	bne.n	800205c <__aeabi_ddiv+0x454>
 800205a:	e703      	b.n	8001e64 <__aeabi_ddiv+0x25c>
 800205c:	19a6      	adds	r6, r4, r6
 800205e:	1e68      	subs	r0, r5, #1
 8002060:	42a6      	cmp	r6, r4
 8002062:	d200      	bcs.n	8002066 <__aeabi_ddiv+0x45e>
 8002064:	e08d      	b.n	8002182 <__aeabi_ddiv+0x57a>
 8002066:	428e      	cmp	r6, r1
 8002068:	d200      	bcs.n	800206c <__aeabi_ddiv+0x464>
 800206a:	e0a3      	b.n	80021b4 <__aeabi_ddiv+0x5ac>
 800206c:	d100      	bne.n	8002070 <__aeabi_ddiv+0x468>
 800206e:	e0b3      	b.n	80021d8 <__aeabi_ddiv+0x5d0>
 8002070:	0005      	movs	r5, r0
 8002072:	e6f5      	b.n	8001e60 <__aeabi_ddiv+0x258>
 8002074:	42aa      	cmp	r2, r5
 8002076:	d900      	bls.n	800207a <__aeabi_ddiv+0x472>
 8002078:	e639      	b.n	8001cee <__aeabi_ddiv+0xe6>
 800207a:	4643      	mov	r3, r8
 800207c:	07de      	lsls	r6, r3, #31
 800207e:	0858      	lsrs	r0, r3, #1
 8002080:	086b      	lsrs	r3, r5, #1
 8002082:	431e      	orrs	r6, r3
 8002084:	07ed      	lsls	r5, r5, #31
 8002086:	e639      	b.n	8001cfc <__aeabi_ddiv+0xf4>
 8002088:	4648      	mov	r0, r9
 800208a:	f001 f937 	bl	80032fc <__clzsi2>
 800208e:	0001      	movs	r1, r0
 8002090:	0002      	movs	r2, r0
 8002092:	3115      	adds	r1, #21
 8002094:	3220      	adds	r2, #32
 8002096:	291c      	cmp	r1, #28
 8002098:	dc00      	bgt.n	800209c <__aeabi_ddiv+0x494>
 800209a:	e72c      	b.n	8001ef6 <__aeabi_ddiv+0x2ee>
 800209c:	464b      	mov	r3, r9
 800209e:	3808      	subs	r0, #8
 80020a0:	4083      	lsls	r3, r0
 80020a2:	2500      	movs	r5, #0
 80020a4:	4698      	mov	r8, r3
 80020a6:	e732      	b.n	8001f0e <__aeabi_ddiv+0x306>
 80020a8:	f001 f928 	bl	80032fc <__clzsi2>
 80020ac:	0003      	movs	r3, r0
 80020ae:	001a      	movs	r2, r3
 80020b0:	3215      	adds	r2, #21
 80020b2:	3020      	adds	r0, #32
 80020b4:	2a1c      	cmp	r2, #28
 80020b6:	dc00      	bgt.n	80020ba <__aeabi_ddiv+0x4b2>
 80020b8:	e700      	b.n	8001ebc <__aeabi_ddiv+0x2b4>
 80020ba:	4654      	mov	r4, sl
 80020bc:	3b08      	subs	r3, #8
 80020be:	2200      	movs	r2, #0
 80020c0:	409c      	lsls	r4, r3
 80020c2:	e705      	b.n	8001ed0 <__aeabi_ddiv+0x2c8>
 80020c4:	1936      	adds	r6, r6, r4
 80020c6:	3b01      	subs	r3, #1
 80020c8:	42b4      	cmp	r4, r6
 80020ca:	d900      	bls.n	80020ce <__aeabi_ddiv+0x4c6>
 80020cc:	e6a6      	b.n	8001e1c <__aeabi_ddiv+0x214>
 80020ce:	42b2      	cmp	r2, r6
 80020d0:	d800      	bhi.n	80020d4 <__aeabi_ddiv+0x4cc>
 80020d2:	e6a3      	b.n	8001e1c <__aeabi_ddiv+0x214>
 80020d4:	1e83      	subs	r3, r0, #2
 80020d6:	1936      	adds	r6, r6, r4
 80020d8:	e6a0      	b.n	8001e1c <__aeabi_ddiv+0x214>
 80020da:	1909      	adds	r1, r1, r4
 80020dc:	3d01      	subs	r5, #1
 80020de:	428c      	cmp	r4, r1
 80020e0:	d900      	bls.n	80020e4 <__aeabi_ddiv+0x4dc>
 80020e2:	e68d      	b.n	8001e00 <__aeabi_ddiv+0x1f8>
 80020e4:	428a      	cmp	r2, r1
 80020e6:	d800      	bhi.n	80020ea <__aeabi_ddiv+0x4e2>
 80020e8:	e68a      	b.n	8001e00 <__aeabi_ddiv+0x1f8>
 80020ea:	1e85      	subs	r5, r0, #2
 80020ec:	1909      	adds	r1, r1, r4
 80020ee:	e687      	b.n	8001e00 <__aeabi_ddiv+0x1f8>
 80020f0:	230f      	movs	r3, #15
 80020f2:	402b      	ands	r3, r5
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d100      	bne.n	80020fa <__aeabi_ddiv+0x4f2>
 80020f8:	e6bc      	b.n	8001e74 <__aeabi_ddiv+0x26c>
 80020fa:	2305      	movs	r3, #5
 80020fc:	425b      	negs	r3, r3
 80020fe:	42ab      	cmp	r3, r5
 8002100:	419b      	sbcs	r3, r3
 8002102:	3504      	adds	r5, #4
 8002104:	425b      	negs	r3, r3
 8002106:	08ed      	lsrs	r5, r5, #3
 8002108:	4498      	add	r8, r3
 800210a:	e6b4      	b.n	8001e76 <__aeabi_ddiv+0x26e>
 800210c:	42af      	cmp	r7, r5
 800210e:	d900      	bls.n	8002112 <__aeabi_ddiv+0x50a>
 8002110:	e660      	b.n	8001dd4 <__aeabi_ddiv+0x1cc>
 8002112:	4282      	cmp	r2, r0
 8002114:	d804      	bhi.n	8002120 <__aeabi_ddiv+0x518>
 8002116:	d000      	beq.n	800211a <__aeabi_ddiv+0x512>
 8002118:	e65c      	b.n	8001dd4 <__aeabi_ddiv+0x1cc>
 800211a:	42ae      	cmp	r6, r5
 800211c:	d800      	bhi.n	8002120 <__aeabi_ddiv+0x518>
 800211e:	e659      	b.n	8001dd4 <__aeabi_ddiv+0x1cc>
 8002120:	2302      	movs	r3, #2
 8002122:	425b      	negs	r3, r3
 8002124:	469c      	mov	ip, r3
 8002126:	9b00      	ldr	r3, [sp, #0]
 8002128:	44e0      	add	r8, ip
 800212a:	469c      	mov	ip, r3
 800212c:	4465      	add	r5, ip
 800212e:	429d      	cmp	r5, r3
 8002130:	419b      	sbcs	r3, r3
 8002132:	425b      	negs	r3, r3
 8002134:	191b      	adds	r3, r3, r4
 8002136:	18c0      	adds	r0, r0, r3
 8002138:	e64d      	b.n	8001dd6 <__aeabi_ddiv+0x1ce>
 800213a:	428a      	cmp	r2, r1
 800213c:	d800      	bhi.n	8002140 <__aeabi_ddiv+0x538>
 800213e:	e60e      	b.n	8001d5e <__aeabi_ddiv+0x156>
 8002140:	1e83      	subs	r3, r0, #2
 8002142:	1909      	adds	r1, r1, r4
 8002144:	e60b      	b.n	8001d5e <__aeabi_ddiv+0x156>
 8002146:	428a      	cmp	r2, r1
 8002148:	d800      	bhi.n	800214c <__aeabi_ddiv+0x544>
 800214a:	e5f4      	b.n	8001d36 <__aeabi_ddiv+0x12e>
 800214c:	1e83      	subs	r3, r0, #2
 800214e:	4698      	mov	r8, r3
 8002150:	1909      	adds	r1, r1, r4
 8002152:	e5f0      	b.n	8001d36 <__aeabi_ddiv+0x12e>
 8002154:	4925      	ldr	r1, [pc, #148]	; (80021ec <__aeabi_ddiv+0x5e4>)
 8002156:	0028      	movs	r0, r5
 8002158:	4459      	add	r1, fp
 800215a:	408d      	lsls	r5, r1
 800215c:	4642      	mov	r2, r8
 800215e:	408a      	lsls	r2, r1
 8002160:	1e69      	subs	r1, r5, #1
 8002162:	418d      	sbcs	r5, r1
 8002164:	4641      	mov	r1, r8
 8002166:	40d8      	lsrs	r0, r3
 8002168:	40d9      	lsrs	r1, r3
 800216a:	4302      	orrs	r2, r0
 800216c:	432a      	orrs	r2, r5
 800216e:	000b      	movs	r3, r1
 8002170:	0751      	lsls	r1, r2, #29
 8002172:	d100      	bne.n	8002176 <__aeabi_ddiv+0x56e>
 8002174:	e751      	b.n	800201a <__aeabi_ddiv+0x412>
 8002176:	210f      	movs	r1, #15
 8002178:	4011      	ands	r1, r2
 800217a:	2904      	cmp	r1, #4
 800217c:	d000      	beq.n	8002180 <__aeabi_ddiv+0x578>
 800217e:	e746      	b.n	800200e <__aeabi_ddiv+0x406>
 8002180:	e74b      	b.n	800201a <__aeabi_ddiv+0x412>
 8002182:	0005      	movs	r5, r0
 8002184:	428e      	cmp	r6, r1
 8002186:	d000      	beq.n	800218a <__aeabi_ddiv+0x582>
 8002188:	e66a      	b.n	8001e60 <__aeabi_ddiv+0x258>
 800218a:	9a00      	ldr	r2, [sp, #0]
 800218c:	4293      	cmp	r3, r2
 800218e:	d000      	beq.n	8002192 <__aeabi_ddiv+0x58a>
 8002190:	e666      	b.n	8001e60 <__aeabi_ddiv+0x258>
 8002192:	e667      	b.n	8001e64 <__aeabi_ddiv+0x25c>
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <__aeabi_ddiv+0x5e8>)
 8002196:	445a      	add	r2, fp
 8002198:	2a00      	cmp	r2, #0
 800219a:	dc00      	bgt.n	800219e <__aeabi_ddiv+0x596>
 800219c:	e710      	b.n	8001fc0 <__aeabi_ddiv+0x3b8>
 800219e:	2301      	movs	r3, #1
 80021a0:	2500      	movs	r5, #0
 80021a2:	4498      	add	r8, r3
 80021a4:	e667      	b.n	8001e76 <__aeabi_ddiv+0x26e>
 80021a6:	075d      	lsls	r5, r3, #29
 80021a8:	025b      	lsls	r3, r3, #9
 80021aa:	0b1c      	lsrs	r4, r3, #12
 80021ac:	08d2      	lsrs	r2, r2, #3
 80021ae:	2300      	movs	r3, #0
 80021b0:	4315      	orrs	r5, r2
 80021b2:	e580      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 80021b4:	9800      	ldr	r0, [sp, #0]
 80021b6:	3d02      	subs	r5, #2
 80021b8:	0042      	lsls	r2, r0, #1
 80021ba:	4282      	cmp	r2, r0
 80021bc:	41bf      	sbcs	r7, r7
 80021be:	427f      	negs	r7, r7
 80021c0:	193c      	adds	r4, r7, r4
 80021c2:	1936      	adds	r6, r6, r4
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	e7dd      	b.n	8002184 <__aeabi_ddiv+0x57c>
 80021c8:	2480      	movs	r4, #128	; 0x80
 80021ca:	4643      	mov	r3, r8
 80021cc:	0324      	lsls	r4, r4, #12
 80021ce:	431c      	orrs	r4, r3
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__aeabi_ddiv+0x5dc>)
 80021d4:	0b24      	lsrs	r4, r4, #12
 80021d6:	e56e      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 80021d8:	9a00      	ldr	r2, [sp, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3ea      	bcc.n	80021b4 <__aeabi_ddiv+0x5ac>
 80021de:	0005      	movs	r5, r0
 80021e0:	e7d3      	b.n	800218a <__aeabi_ddiv+0x582>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff
 80021e8:	0000043e 	.word	0x0000043e
 80021ec:	0000041e 	.word	0x0000041e
 80021f0:	000003ff 	.word	0x000003ff

080021f4 <__eqdf2>:
 80021f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f6:	464e      	mov	r6, r9
 80021f8:	4645      	mov	r5, r8
 80021fa:	46de      	mov	lr, fp
 80021fc:	4657      	mov	r7, sl
 80021fe:	4690      	mov	r8, r2
 8002200:	b5e0      	push	{r5, r6, r7, lr}
 8002202:	0017      	movs	r7, r2
 8002204:	031a      	lsls	r2, r3, #12
 8002206:	0b12      	lsrs	r2, r2, #12
 8002208:	0005      	movs	r5, r0
 800220a:	4684      	mov	ip, r0
 800220c:	4819      	ldr	r0, [pc, #100]	; (8002274 <__eqdf2+0x80>)
 800220e:	030e      	lsls	r6, r1, #12
 8002210:	004c      	lsls	r4, r1, #1
 8002212:	4691      	mov	r9, r2
 8002214:	005a      	lsls	r2, r3, #1
 8002216:	0fdb      	lsrs	r3, r3, #31
 8002218:	469b      	mov	fp, r3
 800221a:	0b36      	lsrs	r6, r6, #12
 800221c:	0d64      	lsrs	r4, r4, #21
 800221e:	0fc9      	lsrs	r1, r1, #31
 8002220:	0d52      	lsrs	r2, r2, #21
 8002222:	4284      	cmp	r4, r0
 8002224:	d019      	beq.n	800225a <__eqdf2+0x66>
 8002226:	4282      	cmp	r2, r0
 8002228:	d010      	beq.n	800224c <__eqdf2+0x58>
 800222a:	2001      	movs	r0, #1
 800222c:	4294      	cmp	r4, r2
 800222e:	d10e      	bne.n	800224e <__eqdf2+0x5a>
 8002230:	454e      	cmp	r6, r9
 8002232:	d10c      	bne.n	800224e <__eqdf2+0x5a>
 8002234:	2001      	movs	r0, #1
 8002236:	45c4      	cmp	ip, r8
 8002238:	d109      	bne.n	800224e <__eqdf2+0x5a>
 800223a:	4559      	cmp	r1, fp
 800223c:	d017      	beq.n	800226e <__eqdf2+0x7a>
 800223e:	2c00      	cmp	r4, #0
 8002240:	d105      	bne.n	800224e <__eqdf2+0x5a>
 8002242:	0030      	movs	r0, r6
 8002244:	4328      	orrs	r0, r5
 8002246:	1e43      	subs	r3, r0, #1
 8002248:	4198      	sbcs	r0, r3
 800224a:	e000      	b.n	800224e <__eqdf2+0x5a>
 800224c:	2001      	movs	r0, #1
 800224e:	bcf0      	pop	{r4, r5, r6, r7}
 8002250:	46bb      	mov	fp, r7
 8002252:	46b2      	mov	sl, r6
 8002254:	46a9      	mov	r9, r5
 8002256:	46a0      	mov	r8, r4
 8002258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225a:	0033      	movs	r3, r6
 800225c:	2001      	movs	r0, #1
 800225e:	432b      	orrs	r3, r5
 8002260:	d1f5      	bne.n	800224e <__eqdf2+0x5a>
 8002262:	42a2      	cmp	r2, r4
 8002264:	d1f3      	bne.n	800224e <__eqdf2+0x5a>
 8002266:	464b      	mov	r3, r9
 8002268:	433b      	orrs	r3, r7
 800226a:	d1f0      	bne.n	800224e <__eqdf2+0x5a>
 800226c:	e7e2      	b.n	8002234 <__eqdf2+0x40>
 800226e:	2000      	movs	r0, #0
 8002270:	e7ed      	b.n	800224e <__eqdf2+0x5a>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	000007ff 	.word	0x000007ff

08002278 <__gedf2>:
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	4647      	mov	r7, r8
 800227c:	46ce      	mov	lr, r9
 800227e:	0004      	movs	r4, r0
 8002280:	0018      	movs	r0, r3
 8002282:	0016      	movs	r6, r2
 8002284:	031b      	lsls	r3, r3, #12
 8002286:	0b1b      	lsrs	r3, r3, #12
 8002288:	4d2d      	ldr	r5, [pc, #180]	; (8002340 <__gedf2+0xc8>)
 800228a:	004a      	lsls	r2, r1, #1
 800228c:	4699      	mov	r9, r3
 800228e:	b580      	push	{r7, lr}
 8002290:	0043      	lsls	r3, r0, #1
 8002292:	030f      	lsls	r7, r1, #12
 8002294:	46a4      	mov	ip, r4
 8002296:	46b0      	mov	r8, r6
 8002298:	0b3f      	lsrs	r7, r7, #12
 800229a:	0d52      	lsrs	r2, r2, #21
 800229c:	0fc9      	lsrs	r1, r1, #31
 800229e:	0d5b      	lsrs	r3, r3, #21
 80022a0:	0fc0      	lsrs	r0, r0, #31
 80022a2:	42aa      	cmp	r2, r5
 80022a4:	d021      	beq.n	80022ea <__gedf2+0x72>
 80022a6:	42ab      	cmp	r3, r5
 80022a8:	d013      	beq.n	80022d2 <__gedf2+0x5a>
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d122      	bne.n	80022f4 <__gedf2+0x7c>
 80022ae:	433c      	orrs	r4, r7
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <__gedf2+0x42>
 80022b4:	464d      	mov	r5, r9
 80022b6:	432e      	orrs	r6, r5
 80022b8:	d022      	beq.n	8002300 <__gedf2+0x88>
 80022ba:	2c00      	cmp	r4, #0
 80022bc:	d010      	beq.n	80022e0 <__gedf2+0x68>
 80022be:	4281      	cmp	r1, r0
 80022c0:	d022      	beq.n	8002308 <__gedf2+0x90>
 80022c2:	2002      	movs	r0, #2
 80022c4:	3901      	subs	r1, #1
 80022c6:	4008      	ands	r0, r1
 80022c8:	3801      	subs	r0, #1
 80022ca:	bcc0      	pop	{r6, r7}
 80022cc:	46b9      	mov	r9, r7
 80022ce:	46b0      	mov	r8, r6
 80022d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d2:	464d      	mov	r5, r9
 80022d4:	432e      	orrs	r6, r5
 80022d6:	d129      	bne.n	800232c <__gedf2+0xb4>
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d1f0      	bne.n	80022be <__gedf2+0x46>
 80022dc:	433c      	orrs	r4, r7
 80022de:	d1ee      	bne.n	80022be <__gedf2+0x46>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d1f2      	bne.n	80022ca <__gedf2+0x52>
 80022e4:	2001      	movs	r0, #1
 80022e6:	4240      	negs	r0, r0
 80022e8:	e7ef      	b.n	80022ca <__gedf2+0x52>
 80022ea:	003d      	movs	r5, r7
 80022ec:	4325      	orrs	r5, r4
 80022ee:	d11d      	bne.n	800232c <__gedf2+0xb4>
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d0ee      	beq.n	80022d2 <__gedf2+0x5a>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e2      	bne.n	80022be <__gedf2+0x46>
 80022f8:	464c      	mov	r4, r9
 80022fa:	4326      	orrs	r6, r4
 80022fc:	d1df      	bne.n	80022be <__gedf2+0x46>
 80022fe:	e7e0      	b.n	80022c2 <__gedf2+0x4a>
 8002300:	2000      	movs	r0, #0
 8002302:	2c00      	cmp	r4, #0
 8002304:	d0e1      	beq.n	80022ca <__gedf2+0x52>
 8002306:	e7dc      	b.n	80022c2 <__gedf2+0x4a>
 8002308:	429a      	cmp	r2, r3
 800230a:	dc0a      	bgt.n	8002322 <__gedf2+0xaa>
 800230c:	dbe8      	blt.n	80022e0 <__gedf2+0x68>
 800230e:	454f      	cmp	r7, r9
 8002310:	d8d7      	bhi.n	80022c2 <__gedf2+0x4a>
 8002312:	d00e      	beq.n	8002332 <__gedf2+0xba>
 8002314:	2000      	movs	r0, #0
 8002316:	454f      	cmp	r7, r9
 8002318:	d2d7      	bcs.n	80022ca <__gedf2+0x52>
 800231a:	2900      	cmp	r1, #0
 800231c:	d0e2      	beq.n	80022e4 <__gedf2+0x6c>
 800231e:	0008      	movs	r0, r1
 8002320:	e7d3      	b.n	80022ca <__gedf2+0x52>
 8002322:	4243      	negs	r3, r0
 8002324:	4158      	adcs	r0, r3
 8002326:	0040      	lsls	r0, r0, #1
 8002328:	3801      	subs	r0, #1
 800232a:	e7ce      	b.n	80022ca <__gedf2+0x52>
 800232c:	2002      	movs	r0, #2
 800232e:	4240      	negs	r0, r0
 8002330:	e7cb      	b.n	80022ca <__gedf2+0x52>
 8002332:	45c4      	cmp	ip, r8
 8002334:	d8c5      	bhi.n	80022c2 <__gedf2+0x4a>
 8002336:	2000      	movs	r0, #0
 8002338:	45c4      	cmp	ip, r8
 800233a:	d2c6      	bcs.n	80022ca <__gedf2+0x52>
 800233c:	e7ed      	b.n	800231a <__gedf2+0xa2>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	000007ff 	.word	0x000007ff

08002344 <__ledf2>:
 8002344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002346:	4647      	mov	r7, r8
 8002348:	46ce      	mov	lr, r9
 800234a:	0004      	movs	r4, r0
 800234c:	0018      	movs	r0, r3
 800234e:	0016      	movs	r6, r2
 8002350:	031b      	lsls	r3, r3, #12
 8002352:	0b1b      	lsrs	r3, r3, #12
 8002354:	4d2c      	ldr	r5, [pc, #176]	; (8002408 <__ledf2+0xc4>)
 8002356:	004a      	lsls	r2, r1, #1
 8002358:	4699      	mov	r9, r3
 800235a:	b580      	push	{r7, lr}
 800235c:	0043      	lsls	r3, r0, #1
 800235e:	030f      	lsls	r7, r1, #12
 8002360:	46a4      	mov	ip, r4
 8002362:	46b0      	mov	r8, r6
 8002364:	0b3f      	lsrs	r7, r7, #12
 8002366:	0d52      	lsrs	r2, r2, #21
 8002368:	0fc9      	lsrs	r1, r1, #31
 800236a:	0d5b      	lsrs	r3, r3, #21
 800236c:	0fc0      	lsrs	r0, r0, #31
 800236e:	42aa      	cmp	r2, r5
 8002370:	d00d      	beq.n	800238e <__ledf2+0x4a>
 8002372:	42ab      	cmp	r3, r5
 8002374:	d010      	beq.n	8002398 <__ledf2+0x54>
 8002376:	2a00      	cmp	r2, #0
 8002378:	d127      	bne.n	80023ca <__ledf2+0x86>
 800237a:	433c      	orrs	r4, r7
 800237c:	2b00      	cmp	r3, #0
 800237e:	d111      	bne.n	80023a4 <__ledf2+0x60>
 8002380:	464d      	mov	r5, r9
 8002382:	432e      	orrs	r6, r5
 8002384:	d10e      	bne.n	80023a4 <__ledf2+0x60>
 8002386:	2000      	movs	r0, #0
 8002388:	2c00      	cmp	r4, #0
 800238a:	d015      	beq.n	80023b8 <__ledf2+0x74>
 800238c:	e00e      	b.n	80023ac <__ledf2+0x68>
 800238e:	003d      	movs	r5, r7
 8002390:	4325      	orrs	r5, r4
 8002392:	d110      	bne.n	80023b6 <__ledf2+0x72>
 8002394:	4293      	cmp	r3, r2
 8002396:	d118      	bne.n	80023ca <__ledf2+0x86>
 8002398:	464d      	mov	r5, r9
 800239a:	432e      	orrs	r6, r5
 800239c:	d10b      	bne.n	80023b6 <__ledf2+0x72>
 800239e:	2a00      	cmp	r2, #0
 80023a0:	d102      	bne.n	80023a8 <__ledf2+0x64>
 80023a2:	433c      	orrs	r4, r7
 80023a4:	2c00      	cmp	r4, #0
 80023a6:	d00b      	beq.n	80023c0 <__ledf2+0x7c>
 80023a8:	4281      	cmp	r1, r0
 80023aa:	d014      	beq.n	80023d6 <__ledf2+0x92>
 80023ac:	2002      	movs	r0, #2
 80023ae:	3901      	subs	r1, #1
 80023b0:	4008      	ands	r0, r1
 80023b2:	3801      	subs	r0, #1
 80023b4:	e000      	b.n	80023b8 <__ledf2+0x74>
 80023b6:	2002      	movs	r0, #2
 80023b8:	bcc0      	pop	{r6, r7}
 80023ba:	46b9      	mov	r9, r7
 80023bc:	46b0      	mov	r8, r6
 80023be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d1f9      	bne.n	80023b8 <__ledf2+0x74>
 80023c4:	2001      	movs	r0, #1
 80023c6:	4240      	negs	r0, r0
 80023c8:	e7f6      	b.n	80023b8 <__ledf2+0x74>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ec      	bne.n	80023a8 <__ledf2+0x64>
 80023ce:	464c      	mov	r4, r9
 80023d0:	4326      	orrs	r6, r4
 80023d2:	d1e9      	bne.n	80023a8 <__ledf2+0x64>
 80023d4:	e7ea      	b.n	80023ac <__ledf2+0x68>
 80023d6:	429a      	cmp	r2, r3
 80023d8:	dd04      	ble.n	80023e4 <__ledf2+0xa0>
 80023da:	4243      	negs	r3, r0
 80023dc:	4158      	adcs	r0, r3
 80023de:	0040      	lsls	r0, r0, #1
 80023e0:	3801      	subs	r0, #1
 80023e2:	e7e9      	b.n	80023b8 <__ledf2+0x74>
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbeb      	blt.n	80023c0 <__ledf2+0x7c>
 80023e8:	454f      	cmp	r7, r9
 80023ea:	d8df      	bhi.n	80023ac <__ledf2+0x68>
 80023ec:	d006      	beq.n	80023fc <__ledf2+0xb8>
 80023ee:	2000      	movs	r0, #0
 80023f0:	454f      	cmp	r7, r9
 80023f2:	d2e1      	bcs.n	80023b8 <__ledf2+0x74>
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d0e5      	beq.n	80023c4 <__ledf2+0x80>
 80023f8:	0008      	movs	r0, r1
 80023fa:	e7dd      	b.n	80023b8 <__ledf2+0x74>
 80023fc:	45c4      	cmp	ip, r8
 80023fe:	d8d5      	bhi.n	80023ac <__ledf2+0x68>
 8002400:	2000      	movs	r0, #0
 8002402:	45c4      	cmp	ip, r8
 8002404:	d2d8      	bcs.n	80023b8 <__ledf2+0x74>
 8002406:	e7f5      	b.n	80023f4 <__ledf2+0xb0>
 8002408:	000007ff 	.word	0x000007ff

0800240c <__aeabi_dmul>:
 800240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240e:	4657      	mov	r7, sl
 8002410:	464e      	mov	r6, r9
 8002412:	4645      	mov	r5, r8
 8002414:	46de      	mov	lr, fp
 8002416:	b5e0      	push	{r5, r6, r7, lr}
 8002418:	4698      	mov	r8, r3
 800241a:	030c      	lsls	r4, r1, #12
 800241c:	004b      	lsls	r3, r1, #1
 800241e:	0006      	movs	r6, r0
 8002420:	4692      	mov	sl, r2
 8002422:	b087      	sub	sp, #28
 8002424:	0b24      	lsrs	r4, r4, #12
 8002426:	0d5b      	lsrs	r3, r3, #21
 8002428:	0fcf      	lsrs	r7, r1, #31
 800242a:	2b00      	cmp	r3, #0
 800242c:	d100      	bne.n	8002430 <__aeabi_dmul+0x24>
 800242e:	e15c      	b.n	80026ea <__aeabi_dmul+0x2de>
 8002430:	4ad9      	ldr	r2, [pc, #868]	; (8002798 <__aeabi_dmul+0x38c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d100      	bne.n	8002438 <__aeabi_dmul+0x2c>
 8002436:	e175      	b.n	8002724 <__aeabi_dmul+0x318>
 8002438:	0f42      	lsrs	r2, r0, #29
 800243a:	00e4      	lsls	r4, r4, #3
 800243c:	4314      	orrs	r4, r2
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	0412      	lsls	r2, r2, #16
 8002442:	4314      	orrs	r4, r2
 8002444:	4ad5      	ldr	r2, [pc, #852]	; (800279c <__aeabi_dmul+0x390>)
 8002446:	00c5      	lsls	r5, r0, #3
 8002448:	4694      	mov	ip, r2
 800244a:	4463      	add	r3, ip
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2300      	movs	r3, #0
 8002450:	4699      	mov	r9, r3
 8002452:	469b      	mov	fp, r3
 8002454:	4643      	mov	r3, r8
 8002456:	4642      	mov	r2, r8
 8002458:	031e      	lsls	r6, r3, #12
 800245a:	0fd2      	lsrs	r2, r2, #31
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4650      	mov	r0, sl
 8002460:	4690      	mov	r8, r2
 8002462:	0b36      	lsrs	r6, r6, #12
 8002464:	0d5b      	lsrs	r3, r3, #21
 8002466:	d100      	bne.n	800246a <__aeabi_dmul+0x5e>
 8002468:	e120      	b.n	80026ac <__aeabi_dmul+0x2a0>
 800246a:	4acb      	ldr	r2, [pc, #812]	; (8002798 <__aeabi_dmul+0x38c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d100      	bne.n	8002472 <__aeabi_dmul+0x66>
 8002470:	e162      	b.n	8002738 <__aeabi_dmul+0x32c>
 8002472:	49ca      	ldr	r1, [pc, #808]	; (800279c <__aeabi_dmul+0x390>)
 8002474:	0f42      	lsrs	r2, r0, #29
 8002476:	468c      	mov	ip, r1
 8002478:	9900      	ldr	r1, [sp, #0]
 800247a:	4463      	add	r3, ip
 800247c:	00f6      	lsls	r6, r6, #3
 800247e:	468c      	mov	ip, r1
 8002480:	4316      	orrs	r6, r2
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	449c      	add	ip, r3
 8002486:	0412      	lsls	r2, r2, #16
 8002488:	4663      	mov	r3, ip
 800248a:	4316      	orrs	r6, r2
 800248c:	00c2      	lsls	r2, r0, #3
 800248e:	2000      	movs	r0, #0
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	9900      	ldr	r1, [sp, #0]
 8002494:	4643      	mov	r3, r8
 8002496:	3101      	adds	r1, #1
 8002498:	468c      	mov	ip, r1
 800249a:	4649      	mov	r1, r9
 800249c:	407b      	eors	r3, r7
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	290f      	cmp	r1, #15
 80024a2:	d826      	bhi.n	80024f2 <__aeabi_dmul+0xe6>
 80024a4:	4bbe      	ldr	r3, [pc, #760]	; (80027a0 <__aeabi_dmul+0x394>)
 80024a6:	0089      	lsls	r1, r1, #2
 80024a8:	5859      	ldr	r1, [r3, r1]
 80024aa:	468f      	mov	pc, r1
 80024ac:	4643      	mov	r3, r8
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	0034      	movs	r4, r6
 80024b2:	0015      	movs	r5, r2
 80024b4:	4683      	mov	fp, r0
 80024b6:	465b      	mov	r3, fp
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d016      	beq.n	80024ea <__aeabi_dmul+0xde>
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d100      	bne.n	80024c2 <__aeabi_dmul+0xb6>
 80024c0:	e203      	b.n	80028ca <__aeabi_dmul+0x4be>
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d000      	beq.n	80024c8 <__aeabi_dmul+0xbc>
 80024c6:	e0cd      	b.n	8002664 <__aeabi_dmul+0x258>
 80024c8:	2200      	movs	r2, #0
 80024ca:	2400      	movs	r4, #0
 80024cc:	2500      	movs	r5, #0
 80024ce:	9b01      	ldr	r3, [sp, #4]
 80024d0:	0512      	lsls	r2, r2, #20
 80024d2:	4322      	orrs	r2, r4
 80024d4:	07db      	lsls	r3, r3, #31
 80024d6:	431a      	orrs	r2, r3
 80024d8:	0028      	movs	r0, r5
 80024da:	0011      	movs	r1, r2
 80024dc:	b007      	add	sp, #28
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	2400      	movs	r4, #0
 80024ec:	2500      	movs	r5, #0
 80024ee:	4aaa      	ldr	r2, [pc, #680]	; (8002798 <__aeabi_dmul+0x38c>)
 80024f0:	e7ed      	b.n	80024ce <__aeabi_dmul+0xc2>
 80024f2:	0c28      	lsrs	r0, r5, #16
 80024f4:	042d      	lsls	r5, r5, #16
 80024f6:	0c2d      	lsrs	r5, r5, #16
 80024f8:	002b      	movs	r3, r5
 80024fa:	0c11      	lsrs	r1, r2, #16
 80024fc:	0412      	lsls	r2, r2, #16
 80024fe:	0c12      	lsrs	r2, r2, #16
 8002500:	4353      	muls	r3, r2
 8002502:	4698      	mov	r8, r3
 8002504:	0013      	movs	r3, r2
 8002506:	002f      	movs	r7, r5
 8002508:	4343      	muls	r3, r0
 800250a:	4699      	mov	r9, r3
 800250c:	434f      	muls	r7, r1
 800250e:	444f      	add	r7, r9
 8002510:	46bb      	mov	fp, r7
 8002512:	4647      	mov	r7, r8
 8002514:	000b      	movs	r3, r1
 8002516:	0c3f      	lsrs	r7, r7, #16
 8002518:	46ba      	mov	sl, r7
 800251a:	4343      	muls	r3, r0
 800251c:	44da      	add	sl, fp
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	45d1      	cmp	r9, sl
 8002522:	d904      	bls.n	800252e <__aeabi_dmul+0x122>
 8002524:	2780      	movs	r7, #128	; 0x80
 8002526:	027f      	lsls	r7, r7, #9
 8002528:	46b9      	mov	r9, r7
 800252a:	444b      	add	r3, r9
 800252c:	9302      	str	r3, [sp, #8]
 800252e:	4653      	mov	r3, sl
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	469b      	mov	fp, r3
 8002534:	4653      	mov	r3, sl
 8002536:	041f      	lsls	r7, r3, #16
 8002538:	4643      	mov	r3, r8
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	4698      	mov	r8, r3
 8002540:	003b      	movs	r3, r7
 8002542:	4443      	add	r3, r8
 8002544:	9304      	str	r3, [sp, #16]
 8002546:	0c33      	lsrs	r3, r6, #16
 8002548:	0436      	lsls	r6, r6, #16
 800254a:	0c36      	lsrs	r6, r6, #16
 800254c:	4698      	mov	r8, r3
 800254e:	0033      	movs	r3, r6
 8002550:	4343      	muls	r3, r0
 8002552:	4699      	mov	r9, r3
 8002554:	4643      	mov	r3, r8
 8002556:	4343      	muls	r3, r0
 8002558:	002f      	movs	r7, r5
 800255a:	469a      	mov	sl, r3
 800255c:	4643      	mov	r3, r8
 800255e:	4377      	muls	r7, r6
 8002560:	435d      	muls	r5, r3
 8002562:	0c38      	lsrs	r0, r7, #16
 8002564:	444d      	add	r5, r9
 8002566:	1945      	adds	r5, r0, r5
 8002568:	45a9      	cmp	r9, r5
 800256a:	d903      	bls.n	8002574 <__aeabi_dmul+0x168>
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	025b      	lsls	r3, r3, #9
 8002570:	4699      	mov	r9, r3
 8002572:	44ca      	add	sl, r9
 8002574:	043f      	lsls	r7, r7, #16
 8002576:	0c28      	lsrs	r0, r5, #16
 8002578:	0c3f      	lsrs	r7, r7, #16
 800257a:	042d      	lsls	r5, r5, #16
 800257c:	19ed      	adds	r5, r5, r7
 800257e:	0c27      	lsrs	r7, r4, #16
 8002580:	0424      	lsls	r4, r4, #16
 8002582:	0c24      	lsrs	r4, r4, #16
 8002584:	0003      	movs	r3, r0
 8002586:	0020      	movs	r0, r4
 8002588:	4350      	muls	r0, r2
 800258a:	437a      	muls	r2, r7
 800258c:	4691      	mov	r9, r2
 800258e:	003a      	movs	r2, r7
 8002590:	4453      	add	r3, sl
 8002592:	9305      	str	r3, [sp, #20]
 8002594:	0c03      	lsrs	r3, r0, #16
 8002596:	469a      	mov	sl, r3
 8002598:	434a      	muls	r2, r1
 800259a:	4361      	muls	r1, r4
 800259c:	4449      	add	r1, r9
 800259e:	4451      	add	r1, sl
 80025a0:	44ab      	add	fp, r5
 80025a2:	4589      	cmp	r9, r1
 80025a4:	d903      	bls.n	80025ae <__aeabi_dmul+0x1a2>
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	4699      	mov	r9, r3
 80025ac:	444a      	add	r2, r9
 80025ae:	0400      	lsls	r0, r0, #16
 80025b0:	0c0b      	lsrs	r3, r1, #16
 80025b2:	0c00      	lsrs	r0, r0, #16
 80025b4:	0409      	lsls	r1, r1, #16
 80025b6:	1809      	adds	r1, r1, r0
 80025b8:	0020      	movs	r0, r4
 80025ba:	4699      	mov	r9, r3
 80025bc:	4643      	mov	r3, r8
 80025be:	4370      	muls	r0, r6
 80025c0:	435c      	muls	r4, r3
 80025c2:	437e      	muls	r6, r7
 80025c4:	435f      	muls	r7, r3
 80025c6:	0c03      	lsrs	r3, r0, #16
 80025c8:	4698      	mov	r8, r3
 80025ca:	19a4      	adds	r4, r4, r6
 80025cc:	4444      	add	r4, r8
 80025ce:	444a      	add	r2, r9
 80025d0:	9703      	str	r7, [sp, #12]
 80025d2:	42a6      	cmp	r6, r4
 80025d4:	d904      	bls.n	80025e0 <__aeabi_dmul+0x1d4>
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	025b      	lsls	r3, r3, #9
 80025da:	4698      	mov	r8, r3
 80025dc:	4447      	add	r7, r8
 80025de:	9703      	str	r7, [sp, #12]
 80025e0:	0423      	lsls	r3, r4, #16
 80025e2:	9e02      	ldr	r6, [sp, #8]
 80025e4:	469a      	mov	sl, r3
 80025e6:	9b05      	ldr	r3, [sp, #20]
 80025e8:	445e      	add	r6, fp
 80025ea:	4698      	mov	r8, r3
 80025ec:	42ae      	cmp	r6, r5
 80025ee:	41ad      	sbcs	r5, r5
 80025f0:	1876      	adds	r6, r6, r1
 80025f2:	428e      	cmp	r6, r1
 80025f4:	4189      	sbcs	r1, r1
 80025f6:	0400      	lsls	r0, r0, #16
 80025f8:	0c00      	lsrs	r0, r0, #16
 80025fa:	4450      	add	r0, sl
 80025fc:	4440      	add	r0, r8
 80025fe:	426d      	negs	r5, r5
 8002600:	1947      	adds	r7, r0, r5
 8002602:	46b8      	mov	r8, r7
 8002604:	4693      	mov	fp, r2
 8002606:	4249      	negs	r1, r1
 8002608:	4689      	mov	r9, r1
 800260a:	44c3      	add	fp, r8
 800260c:	44d9      	add	r9, fp
 800260e:	4298      	cmp	r0, r3
 8002610:	4180      	sbcs	r0, r0
 8002612:	45a8      	cmp	r8, r5
 8002614:	41ad      	sbcs	r5, r5
 8002616:	4593      	cmp	fp, r2
 8002618:	4192      	sbcs	r2, r2
 800261a:	4589      	cmp	r9, r1
 800261c:	4189      	sbcs	r1, r1
 800261e:	426d      	negs	r5, r5
 8002620:	4240      	negs	r0, r0
 8002622:	4328      	orrs	r0, r5
 8002624:	0c24      	lsrs	r4, r4, #16
 8002626:	4252      	negs	r2, r2
 8002628:	4249      	negs	r1, r1
 800262a:	430a      	orrs	r2, r1
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	1900      	adds	r0, r0, r4
 8002630:	1880      	adds	r0, r0, r2
 8002632:	18c7      	adds	r7, r0, r3
 8002634:	464b      	mov	r3, r9
 8002636:	0ddc      	lsrs	r4, r3, #23
 8002638:	9b04      	ldr	r3, [sp, #16]
 800263a:	0275      	lsls	r5, r6, #9
 800263c:	431d      	orrs	r5, r3
 800263e:	1e6a      	subs	r2, r5, #1
 8002640:	4195      	sbcs	r5, r2
 8002642:	464b      	mov	r3, r9
 8002644:	0df6      	lsrs	r6, r6, #23
 8002646:	027f      	lsls	r7, r7, #9
 8002648:	4335      	orrs	r5, r6
 800264a:	025a      	lsls	r2, r3, #9
 800264c:	433c      	orrs	r4, r7
 800264e:	4315      	orrs	r5, r2
 8002650:	01fb      	lsls	r3, r7, #7
 8002652:	d400      	bmi.n	8002656 <__aeabi_dmul+0x24a>
 8002654:	e11c      	b.n	8002890 <__aeabi_dmul+0x484>
 8002656:	2101      	movs	r1, #1
 8002658:	086a      	lsrs	r2, r5, #1
 800265a:	400d      	ands	r5, r1
 800265c:	4315      	orrs	r5, r2
 800265e:	07e2      	lsls	r2, r4, #31
 8002660:	4315      	orrs	r5, r2
 8002662:	0864      	lsrs	r4, r4, #1
 8002664:	494f      	ldr	r1, [pc, #316]	; (80027a4 <__aeabi_dmul+0x398>)
 8002666:	4461      	add	r1, ip
 8002668:	2900      	cmp	r1, #0
 800266a:	dc00      	bgt.n	800266e <__aeabi_dmul+0x262>
 800266c:	e0b0      	b.n	80027d0 <__aeabi_dmul+0x3c4>
 800266e:	076b      	lsls	r3, r5, #29
 8002670:	d009      	beq.n	8002686 <__aeabi_dmul+0x27a>
 8002672:	220f      	movs	r2, #15
 8002674:	402a      	ands	r2, r5
 8002676:	2a04      	cmp	r2, #4
 8002678:	d005      	beq.n	8002686 <__aeabi_dmul+0x27a>
 800267a:	1d2a      	adds	r2, r5, #4
 800267c:	42aa      	cmp	r2, r5
 800267e:	41ad      	sbcs	r5, r5
 8002680:	426d      	negs	r5, r5
 8002682:	1964      	adds	r4, r4, r5
 8002684:	0015      	movs	r5, r2
 8002686:	01e3      	lsls	r3, r4, #7
 8002688:	d504      	bpl.n	8002694 <__aeabi_dmul+0x288>
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	4a46      	ldr	r2, [pc, #280]	; (80027a8 <__aeabi_dmul+0x39c>)
 800268e:	00c9      	lsls	r1, r1, #3
 8002690:	4014      	ands	r4, r2
 8002692:	4461      	add	r1, ip
 8002694:	4a45      	ldr	r2, [pc, #276]	; (80027ac <__aeabi_dmul+0x3a0>)
 8002696:	4291      	cmp	r1, r2
 8002698:	dd00      	ble.n	800269c <__aeabi_dmul+0x290>
 800269a:	e726      	b.n	80024ea <__aeabi_dmul+0xde>
 800269c:	0762      	lsls	r2, r4, #29
 800269e:	08ed      	lsrs	r5, r5, #3
 80026a0:	0264      	lsls	r4, r4, #9
 80026a2:	0549      	lsls	r1, r1, #21
 80026a4:	4315      	orrs	r5, r2
 80026a6:	0b24      	lsrs	r4, r4, #12
 80026a8:	0d4a      	lsrs	r2, r1, #21
 80026aa:	e710      	b.n	80024ce <__aeabi_dmul+0xc2>
 80026ac:	4652      	mov	r2, sl
 80026ae:	4332      	orrs	r2, r6
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dmul+0x2a8>
 80026b2:	e07f      	b.n	80027b4 <__aeabi_dmul+0x3a8>
 80026b4:	2e00      	cmp	r6, #0
 80026b6:	d100      	bne.n	80026ba <__aeabi_dmul+0x2ae>
 80026b8:	e0dc      	b.n	8002874 <__aeabi_dmul+0x468>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fe1e 	bl	80032fc <__clzsi2>
 80026c0:	0002      	movs	r2, r0
 80026c2:	3a0b      	subs	r2, #11
 80026c4:	231d      	movs	r3, #29
 80026c6:	0001      	movs	r1, r0
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	4652      	mov	r2, sl
 80026cc:	3908      	subs	r1, #8
 80026ce:	40da      	lsrs	r2, r3
 80026d0:	408e      	lsls	r6, r1
 80026d2:	4316      	orrs	r6, r2
 80026d4:	4652      	mov	r2, sl
 80026d6:	408a      	lsls	r2, r1
 80026d8:	9b00      	ldr	r3, [sp, #0]
 80026da:	4935      	ldr	r1, [pc, #212]	; (80027b0 <__aeabi_dmul+0x3a4>)
 80026dc:	1a18      	subs	r0, r3, r0
 80026de:	0003      	movs	r3, r0
 80026e0:	468c      	mov	ip, r1
 80026e2:	4463      	add	r3, ip
 80026e4:	2000      	movs	r0, #0
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e6d3      	b.n	8002492 <__aeabi_dmul+0x86>
 80026ea:	0025      	movs	r5, r4
 80026ec:	4305      	orrs	r5, r0
 80026ee:	d04a      	beq.n	8002786 <__aeabi_dmul+0x37a>
 80026f0:	2c00      	cmp	r4, #0
 80026f2:	d100      	bne.n	80026f6 <__aeabi_dmul+0x2ea>
 80026f4:	e0b0      	b.n	8002858 <__aeabi_dmul+0x44c>
 80026f6:	0020      	movs	r0, r4
 80026f8:	f000 fe00 	bl	80032fc <__clzsi2>
 80026fc:	0001      	movs	r1, r0
 80026fe:	0002      	movs	r2, r0
 8002700:	390b      	subs	r1, #11
 8002702:	231d      	movs	r3, #29
 8002704:	0010      	movs	r0, r2
 8002706:	1a5b      	subs	r3, r3, r1
 8002708:	0031      	movs	r1, r6
 800270a:	0035      	movs	r5, r6
 800270c:	3808      	subs	r0, #8
 800270e:	4084      	lsls	r4, r0
 8002710:	40d9      	lsrs	r1, r3
 8002712:	4085      	lsls	r5, r0
 8002714:	430c      	orrs	r4, r1
 8002716:	4826      	ldr	r0, [pc, #152]	; (80027b0 <__aeabi_dmul+0x3a4>)
 8002718:	1a83      	subs	r3, r0, r2
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2300      	movs	r3, #0
 800271e:	4699      	mov	r9, r3
 8002720:	469b      	mov	fp, r3
 8002722:	e697      	b.n	8002454 <__aeabi_dmul+0x48>
 8002724:	0005      	movs	r5, r0
 8002726:	4325      	orrs	r5, r4
 8002728:	d126      	bne.n	8002778 <__aeabi_dmul+0x36c>
 800272a:	2208      	movs	r2, #8
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2302      	movs	r3, #2
 8002730:	2400      	movs	r4, #0
 8002732:	4691      	mov	r9, r2
 8002734:	469b      	mov	fp, r3
 8002736:	e68d      	b.n	8002454 <__aeabi_dmul+0x48>
 8002738:	4652      	mov	r2, sl
 800273a:	9b00      	ldr	r3, [sp, #0]
 800273c:	4332      	orrs	r2, r6
 800273e:	d110      	bne.n	8002762 <__aeabi_dmul+0x356>
 8002740:	4915      	ldr	r1, [pc, #84]	; (8002798 <__aeabi_dmul+0x38c>)
 8002742:	2600      	movs	r6, #0
 8002744:	468c      	mov	ip, r1
 8002746:	4463      	add	r3, ip
 8002748:	4649      	mov	r1, r9
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2302      	movs	r3, #2
 800274e:	4319      	orrs	r1, r3
 8002750:	4689      	mov	r9, r1
 8002752:	2002      	movs	r0, #2
 8002754:	e69d      	b.n	8002492 <__aeabi_dmul+0x86>
 8002756:	465b      	mov	r3, fp
 8002758:	9701      	str	r7, [sp, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d000      	beq.n	8002760 <__aeabi_dmul+0x354>
 800275e:	e6ad      	b.n	80024bc <__aeabi_dmul+0xb0>
 8002760:	e6c3      	b.n	80024ea <__aeabi_dmul+0xde>
 8002762:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <__aeabi_dmul+0x38c>)
 8002764:	2003      	movs	r0, #3
 8002766:	4694      	mov	ip, r2
 8002768:	4463      	add	r3, ip
 800276a:	464a      	mov	r2, r9
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2303      	movs	r3, #3
 8002770:	431a      	orrs	r2, r3
 8002772:	4691      	mov	r9, r2
 8002774:	4652      	mov	r2, sl
 8002776:	e68c      	b.n	8002492 <__aeabi_dmul+0x86>
 8002778:	220c      	movs	r2, #12
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2303      	movs	r3, #3
 800277e:	0005      	movs	r5, r0
 8002780:	4691      	mov	r9, r2
 8002782:	469b      	mov	fp, r3
 8002784:	e666      	b.n	8002454 <__aeabi_dmul+0x48>
 8002786:	2304      	movs	r3, #4
 8002788:	4699      	mov	r9, r3
 800278a:	2300      	movs	r3, #0
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	2400      	movs	r4, #0
 8002792:	469b      	mov	fp, r3
 8002794:	e65e      	b.n	8002454 <__aeabi_dmul+0x48>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	000007ff 	.word	0x000007ff
 800279c:	fffffc01 	.word	0xfffffc01
 80027a0:	0800b508 	.word	0x0800b508
 80027a4:	000003ff 	.word	0x000003ff
 80027a8:	feffffff 	.word	0xfeffffff
 80027ac:	000007fe 	.word	0x000007fe
 80027b0:	fffffc0d 	.word	0xfffffc0d
 80027b4:	4649      	mov	r1, r9
 80027b6:	2301      	movs	r3, #1
 80027b8:	4319      	orrs	r1, r3
 80027ba:	4689      	mov	r9, r1
 80027bc:	2600      	movs	r6, #0
 80027be:	2001      	movs	r0, #1
 80027c0:	e667      	b.n	8002492 <__aeabi_dmul+0x86>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2480      	movs	r4, #128	; 0x80
 80027c6:	2500      	movs	r5, #0
 80027c8:	4a43      	ldr	r2, [pc, #268]	; (80028d8 <__aeabi_dmul+0x4cc>)
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	0324      	lsls	r4, r4, #12
 80027ce:	e67e      	b.n	80024ce <__aeabi_dmul+0xc2>
 80027d0:	2001      	movs	r0, #1
 80027d2:	1a40      	subs	r0, r0, r1
 80027d4:	2838      	cmp	r0, #56	; 0x38
 80027d6:	dd00      	ble.n	80027da <__aeabi_dmul+0x3ce>
 80027d8:	e676      	b.n	80024c8 <__aeabi_dmul+0xbc>
 80027da:	281f      	cmp	r0, #31
 80027dc:	dd5b      	ble.n	8002896 <__aeabi_dmul+0x48a>
 80027de:	221f      	movs	r2, #31
 80027e0:	0023      	movs	r3, r4
 80027e2:	4252      	negs	r2, r2
 80027e4:	1a51      	subs	r1, r2, r1
 80027e6:	40cb      	lsrs	r3, r1
 80027e8:	0019      	movs	r1, r3
 80027ea:	2820      	cmp	r0, #32
 80027ec:	d003      	beq.n	80027f6 <__aeabi_dmul+0x3ea>
 80027ee:	4a3b      	ldr	r2, [pc, #236]	; (80028dc <__aeabi_dmul+0x4d0>)
 80027f0:	4462      	add	r2, ip
 80027f2:	4094      	lsls	r4, r2
 80027f4:	4325      	orrs	r5, r4
 80027f6:	1e6a      	subs	r2, r5, #1
 80027f8:	4195      	sbcs	r5, r2
 80027fa:	002a      	movs	r2, r5
 80027fc:	430a      	orrs	r2, r1
 80027fe:	2107      	movs	r1, #7
 8002800:	000d      	movs	r5, r1
 8002802:	2400      	movs	r4, #0
 8002804:	4015      	ands	r5, r2
 8002806:	4211      	tst	r1, r2
 8002808:	d05b      	beq.n	80028c2 <__aeabi_dmul+0x4b6>
 800280a:	210f      	movs	r1, #15
 800280c:	2400      	movs	r4, #0
 800280e:	4011      	ands	r1, r2
 8002810:	2904      	cmp	r1, #4
 8002812:	d053      	beq.n	80028bc <__aeabi_dmul+0x4b0>
 8002814:	1d11      	adds	r1, r2, #4
 8002816:	4291      	cmp	r1, r2
 8002818:	4192      	sbcs	r2, r2
 800281a:	4252      	negs	r2, r2
 800281c:	18a4      	adds	r4, r4, r2
 800281e:	000a      	movs	r2, r1
 8002820:	0223      	lsls	r3, r4, #8
 8002822:	d54b      	bpl.n	80028bc <__aeabi_dmul+0x4b0>
 8002824:	2201      	movs	r2, #1
 8002826:	2400      	movs	r4, #0
 8002828:	2500      	movs	r5, #0
 800282a:	e650      	b.n	80024ce <__aeabi_dmul+0xc2>
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	031b      	lsls	r3, r3, #12
 8002830:	421c      	tst	r4, r3
 8002832:	d009      	beq.n	8002848 <__aeabi_dmul+0x43c>
 8002834:	421e      	tst	r6, r3
 8002836:	d107      	bne.n	8002848 <__aeabi_dmul+0x43c>
 8002838:	4333      	orrs	r3, r6
 800283a:	031c      	lsls	r4, r3, #12
 800283c:	4643      	mov	r3, r8
 800283e:	0015      	movs	r5, r2
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <__aeabi_dmul+0x4cc>)
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	e642      	b.n	80024ce <__aeabi_dmul+0xc2>
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	0312      	lsls	r2, r2, #12
 800284c:	4314      	orrs	r4, r2
 800284e:	0324      	lsls	r4, r4, #12
 8002850:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <__aeabi_dmul+0x4cc>)
 8002852:	0b24      	lsrs	r4, r4, #12
 8002854:	9701      	str	r7, [sp, #4]
 8002856:	e63a      	b.n	80024ce <__aeabi_dmul+0xc2>
 8002858:	f000 fd50 	bl	80032fc <__clzsi2>
 800285c:	0001      	movs	r1, r0
 800285e:	0002      	movs	r2, r0
 8002860:	3115      	adds	r1, #21
 8002862:	3220      	adds	r2, #32
 8002864:	291c      	cmp	r1, #28
 8002866:	dc00      	bgt.n	800286a <__aeabi_dmul+0x45e>
 8002868:	e74b      	b.n	8002702 <__aeabi_dmul+0x2f6>
 800286a:	0034      	movs	r4, r6
 800286c:	3808      	subs	r0, #8
 800286e:	2500      	movs	r5, #0
 8002870:	4084      	lsls	r4, r0
 8002872:	e750      	b.n	8002716 <__aeabi_dmul+0x30a>
 8002874:	f000 fd42 	bl	80032fc <__clzsi2>
 8002878:	0003      	movs	r3, r0
 800287a:	001a      	movs	r2, r3
 800287c:	3215      	adds	r2, #21
 800287e:	3020      	adds	r0, #32
 8002880:	2a1c      	cmp	r2, #28
 8002882:	dc00      	bgt.n	8002886 <__aeabi_dmul+0x47a>
 8002884:	e71e      	b.n	80026c4 <__aeabi_dmul+0x2b8>
 8002886:	4656      	mov	r6, sl
 8002888:	3b08      	subs	r3, #8
 800288a:	2200      	movs	r2, #0
 800288c:	409e      	lsls	r6, r3
 800288e:	e723      	b.n	80026d8 <__aeabi_dmul+0x2cc>
 8002890:	9b00      	ldr	r3, [sp, #0]
 8002892:	469c      	mov	ip, r3
 8002894:	e6e6      	b.n	8002664 <__aeabi_dmul+0x258>
 8002896:	4912      	ldr	r1, [pc, #72]	; (80028e0 <__aeabi_dmul+0x4d4>)
 8002898:	0022      	movs	r2, r4
 800289a:	4461      	add	r1, ip
 800289c:	002e      	movs	r6, r5
 800289e:	408d      	lsls	r5, r1
 80028a0:	408a      	lsls	r2, r1
 80028a2:	40c6      	lsrs	r6, r0
 80028a4:	1e69      	subs	r1, r5, #1
 80028a6:	418d      	sbcs	r5, r1
 80028a8:	4332      	orrs	r2, r6
 80028aa:	432a      	orrs	r2, r5
 80028ac:	40c4      	lsrs	r4, r0
 80028ae:	0753      	lsls	r3, r2, #29
 80028b0:	d0b6      	beq.n	8002820 <__aeabi_dmul+0x414>
 80028b2:	210f      	movs	r1, #15
 80028b4:	4011      	ands	r1, r2
 80028b6:	2904      	cmp	r1, #4
 80028b8:	d1ac      	bne.n	8002814 <__aeabi_dmul+0x408>
 80028ba:	e7b1      	b.n	8002820 <__aeabi_dmul+0x414>
 80028bc:	0765      	lsls	r5, r4, #29
 80028be:	0264      	lsls	r4, r4, #9
 80028c0:	0b24      	lsrs	r4, r4, #12
 80028c2:	08d2      	lsrs	r2, r2, #3
 80028c4:	4315      	orrs	r5, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	e601      	b.n	80024ce <__aeabi_dmul+0xc2>
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	0312      	lsls	r2, r2, #12
 80028ce:	4314      	orrs	r4, r2
 80028d0:	0324      	lsls	r4, r4, #12
 80028d2:	4a01      	ldr	r2, [pc, #4]	; (80028d8 <__aeabi_dmul+0x4cc>)
 80028d4:	0b24      	lsrs	r4, r4, #12
 80028d6:	e5fa      	b.n	80024ce <__aeabi_dmul+0xc2>
 80028d8:	000007ff 	.word	0x000007ff
 80028dc:	0000043e 	.word	0x0000043e
 80028e0:	0000041e 	.word	0x0000041e

080028e4 <__aeabi_dsub>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	4657      	mov	r7, sl
 80028e8:	464e      	mov	r6, r9
 80028ea:	4645      	mov	r5, r8
 80028ec:	46de      	mov	lr, fp
 80028ee:	b5e0      	push	{r5, r6, r7, lr}
 80028f0:	001e      	movs	r6, r3
 80028f2:	0017      	movs	r7, r2
 80028f4:	004a      	lsls	r2, r1, #1
 80028f6:	030b      	lsls	r3, r1, #12
 80028f8:	0d52      	lsrs	r2, r2, #21
 80028fa:	0a5b      	lsrs	r3, r3, #9
 80028fc:	4690      	mov	r8, r2
 80028fe:	0f42      	lsrs	r2, r0, #29
 8002900:	431a      	orrs	r2, r3
 8002902:	0fcd      	lsrs	r5, r1, #31
 8002904:	4ccd      	ldr	r4, [pc, #820]	; (8002c3c <__aeabi_dsub+0x358>)
 8002906:	0331      	lsls	r1, r6, #12
 8002908:	00c3      	lsls	r3, r0, #3
 800290a:	4694      	mov	ip, r2
 800290c:	0070      	lsls	r0, r6, #1
 800290e:	0f7a      	lsrs	r2, r7, #29
 8002910:	0a49      	lsrs	r1, r1, #9
 8002912:	00ff      	lsls	r7, r7, #3
 8002914:	469a      	mov	sl, r3
 8002916:	46b9      	mov	r9, r7
 8002918:	0d40      	lsrs	r0, r0, #21
 800291a:	0ff6      	lsrs	r6, r6, #31
 800291c:	4311      	orrs	r1, r2
 800291e:	42a0      	cmp	r0, r4
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x40>
 8002922:	e0b1      	b.n	8002a88 <__aeabi_dsub+0x1a4>
 8002924:	2201      	movs	r2, #1
 8002926:	4056      	eors	r6, r2
 8002928:	46b3      	mov	fp, r6
 800292a:	42b5      	cmp	r5, r6
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x4c>
 800292e:	e088      	b.n	8002a42 <__aeabi_dsub+0x15e>
 8002930:	4642      	mov	r2, r8
 8002932:	1a12      	subs	r2, r2, r0
 8002934:	2a00      	cmp	r2, #0
 8002936:	dc00      	bgt.n	800293a <__aeabi_dsub+0x56>
 8002938:	e0ae      	b.n	8002a98 <__aeabi_dsub+0x1b4>
 800293a:	2800      	cmp	r0, #0
 800293c:	d100      	bne.n	8002940 <__aeabi_dsub+0x5c>
 800293e:	e0c1      	b.n	8002ac4 <__aeabi_dsub+0x1e0>
 8002940:	48be      	ldr	r0, [pc, #760]	; (8002c3c <__aeabi_dsub+0x358>)
 8002942:	4580      	cmp	r8, r0
 8002944:	d100      	bne.n	8002948 <__aeabi_dsub+0x64>
 8002946:	e151      	b.n	8002bec <__aeabi_dsub+0x308>
 8002948:	2080      	movs	r0, #128	; 0x80
 800294a:	0400      	lsls	r0, r0, #16
 800294c:	4301      	orrs	r1, r0
 800294e:	2a38      	cmp	r2, #56	; 0x38
 8002950:	dd00      	ble.n	8002954 <__aeabi_dsub+0x70>
 8002952:	e17b      	b.n	8002c4c <__aeabi_dsub+0x368>
 8002954:	2a1f      	cmp	r2, #31
 8002956:	dd00      	ble.n	800295a <__aeabi_dsub+0x76>
 8002958:	e1ee      	b.n	8002d38 <__aeabi_dsub+0x454>
 800295a:	2020      	movs	r0, #32
 800295c:	003e      	movs	r6, r7
 800295e:	1a80      	subs	r0, r0, r2
 8002960:	000c      	movs	r4, r1
 8002962:	40d6      	lsrs	r6, r2
 8002964:	40d1      	lsrs	r1, r2
 8002966:	4087      	lsls	r7, r0
 8002968:	4662      	mov	r2, ip
 800296a:	4084      	lsls	r4, r0
 800296c:	1a52      	subs	r2, r2, r1
 800296e:	1e78      	subs	r0, r7, #1
 8002970:	4187      	sbcs	r7, r0
 8002972:	4694      	mov	ip, r2
 8002974:	4334      	orrs	r4, r6
 8002976:	4327      	orrs	r7, r4
 8002978:	1bdc      	subs	r4, r3, r7
 800297a:	42a3      	cmp	r3, r4
 800297c:	419b      	sbcs	r3, r3
 800297e:	4662      	mov	r2, ip
 8002980:	425b      	negs	r3, r3
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	4699      	mov	r9, r3
 8002986:	464b      	mov	r3, r9
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	d400      	bmi.n	800298e <__aeabi_dsub+0xaa>
 800298c:	e118      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 800298e:	464b      	mov	r3, r9
 8002990:	0258      	lsls	r0, r3, #9
 8002992:	0a43      	lsrs	r3, r0, #9
 8002994:	4699      	mov	r9, r3
 8002996:	464b      	mov	r3, r9
 8002998:	2b00      	cmp	r3, #0
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0xba>
 800299c:	e137      	b.n	8002c0e <__aeabi_dsub+0x32a>
 800299e:	4648      	mov	r0, r9
 80029a0:	f000 fcac 	bl	80032fc <__clzsi2>
 80029a4:	0001      	movs	r1, r0
 80029a6:	3908      	subs	r1, #8
 80029a8:	2320      	movs	r3, #32
 80029aa:	0022      	movs	r2, r4
 80029ac:	4648      	mov	r0, r9
 80029ae:	1a5b      	subs	r3, r3, r1
 80029b0:	40da      	lsrs	r2, r3
 80029b2:	4088      	lsls	r0, r1
 80029b4:	408c      	lsls	r4, r1
 80029b6:	4643      	mov	r3, r8
 80029b8:	4310      	orrs	r0, r2
 80029ba:	4588      	cmp	r8, r1
 80029bc:	dd00      	ble.n	80029c0 <__aeabi_dsub+0xdc>
 80029be:	e136      	b.n	8002c2e <__aeabi_dsub+0x34a>
 80029c0:	1ac9      	subs	r1, r1, r3
 80029c2:	1c4b      	adds	r3, r1, #1
 80029c4:	2b1f      	cmp	r3, #31
 80029c6:	dd00      	ble.n	80029ca <__aeabi_dsub+0xe6>
 80029c8:	e0ea      	b.n	8002ba0 <__aeabi_dsub+0x2bc>
 80029ca:	2220      	movs	r2, #32
 80029cc:	0026      	movs	r6, r4
 80029ce:	1ad2      	subs	r2, r2, r3
 80029d0:	0001      	movs	r1, r0
 80029d2:	4094      	lsls	r4, r2
 80029d4:	40de      	lsrs	r6, r3
 80029d6:	40d8      	lsrs	r0, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	4091      	lsls	r1, r2
 80029dc:	1e62      	subs	r2, r4, #1
 80029de:	4194      	sbcs	r4, r2
 80029e0:	4681      	mov	r9, r0
 80029e2:	4698      	mov	r8, r3
 80029e4:	4331      	orrs	r1, r6
 80029e6:	430c      	orrs	r4, r1
 80029e8:	0763      	lsls	r3, r4, #29
 80029ea:	d009      	beq.n	8002a00 <__aeabi_dsub+0x11c>
 80029ec:	230f      	movs	r3, #15
 80029ee:	4023      	ands	r3, r4
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d005      	beq.n	8002a00 <__aeabi_dsub+0x11c>
 80029f4:	1d23      	adds	r3, r4, #4
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	41a4      	sbcs	r4, r4
 80029fa:	4264      	negs	r4, r4
 80029fc:	44a1      	add	r9, r4
 80029fe:	001c      	movs	r4, r3
 8002a00:	464b      	mov	r3, r9
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	d400      	bmi.n	8002a08 <__aeabi_dsub+0x124>
 8002a06:	e0de      	b.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002a08:	4641      	mov	r1, r8
 8002a0a:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <__aeabi_dsub+0x358>)
 8002a0c:	3101      	adds	r1, #1
 8002a0e:	4299      	cmp	r1, r3
 8002a10:	d100      	bne.n	8002a14 <__aeabi_dsub+0x130>
 8002a12:	e0e7      	b.n	8002be4 <__aeabi_dsub+0x300>
 8002a14:	464b      	mov	r3, r9
 8002a16:	488a      	ldr	r0, [pc, #552]	; (8002c40 <__aeabi_dsub+0x35c>)
 8002a18:	08e4      	lsrs	r4, r4, #3
 8002a1a:	4003      	ands	r3, r0
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	0549      	lsls	r1, r1, #21
 8002a20:	075b      	lsls	r3, r3, #29
 8002a22:	0240      	lsls	r0, r0, #9
 8002a24:	4323      	orrs	r3, r4
 8002a26:	0d4a      	lsrs	r2, r1, #21
 8002a28:	0b04      	lsrs	r4, r0, #12
 8002a2a:	0512      	lsls	r2, r2, #20
 8002a2c:	07ed      	lsls	r5, r5, #31
 8002a2e:	4322      	orrs	r2, r4
 8002a30:	432a      	orrs	r2, r5
 8002a32:	0018      	movs	r0, r3
 8002a34:	0011      	movs	r1, r2
 8002a36:	bcf0      	pop	{r4, r5, r6, r7}
 8002a38:	46bb      	mov	fp, r7
 8002a3a:	46b2      	mov	sl, r6
 8002a3c:	46a9      	mov	r9, r5
 8002a3e:	46a0      	mov	r8, r4
 8002a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a42:	4642      	mov	r2, r8
 8002a44:	1a12      	subs	r2, r2, r0
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	dd52      	ble.n	8002af0 <__aeabi_dsub+0x20c>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x16c>
 8002a4e:	e09c      	b.n	8002b8a <__aeabi_dsub+0x2a6>
 8002a50:	45a0      	cmp	r8, r4
 8002a52:	d100      	bne.n	8002a56 <__aeabi_dsub+0x172>
 8002a54:	e0ca      	b.n	8002bec <__aeabi_dsub+0x308>
 8002a56:	2080      	movs	r0, #128	; 0x80
 8002a58:	0400      	lsls	r0, r0, #16
 8002a5a:	4301      	orrs	r1, r0
 8002a5c:	2a38      	cmp	r2, #56	; 0x38
 8002a5e:	dd00      	ble.n	8002a62 <__aeabi_dsub+0x17e>
 8002a60:	e149      	b.n	8002cf6 <__aeabi_dsub+0x412>
 8002a62:	2a1f      	cmp	r2, #31
 8002a64:	dc00      	bgt.n	8002a68 <__aeabi_dsub+0x184>
 8002a66:	e197      	b.n	8002d98 <__aeabi_dsub+0x4b4>
 8002a68:	0010      	movs	r0, r2
 8002a6a:	000e      	movs	r6, r1
 8002a6c:	3820      	subs	r0, #32
 8002a6e:	40c6      	lsrs	r6, r0
 8002a70:	2a20      	cmp	r2, #32
 8002a72:	d004      	beq.n	8002a7e <__aeabi_dsub+0x19a>
 8002a74:	2040      	movs	r0, #64	; 0x40
 8002a76:	1a82      	subs	r2, r0, r2
 8002a78:	4091      	lsls	r1, r2
 8002a7a:	430f      	orrs	r7, r1
 8002a7c:	46b9      	mov	r9, r7
 8002a7e:	464c      	mov	r4, r9
 8002a80:	1e62      	subs	r2, r4, #1
 8002a82:	4194      	sbcs	r4, r2
 8002a84:	4334      	orrs	r4, r6
 8002a86:	e13a      	b.n	8002cfe <__aeabi_dsub+0x41a>
 8002a88:	000a      	movs	r2, r1
 8002a8a:	433a      	orrs	r2, r7
 8002a8c:	d028      	beq.n	8002ae0 <__aeabi_dsub+0x1fc>
 8002a8e:	46b3      	mov	fp, r6
 8002a90:	42b5      	cmp	r5, r6
 8002a92:	d02b      	beq.n	8002aec <__aeabi_dsub+0x208>
 8002a94:	4a6b      	ldr	r2, [pc, #428]	; (8002c44 <__aeabi_dsub+0x360>)
 8002a96:	4442      	add	r2, r8
 8002a98:	2a00      	cmp	r2, #0
 8002a9a:	d05d      	beq.n	8002b58 <__aeabi_dsub+0x274>
 8002a9c:	4642      	mov	r2, r8
 8002a9e:	4644      	mov	r4, r8
 8002aa0:	1a82      	subs	r2, r0, r2
 8002aa2:	2c00      	cmp	r4, #0
 8002aa4:	d000      	beq.n	8002aa8 <__aeabi_dsub+0x1c4>
 8002aa6:	e0f5      	b.n	8002c94 <__aeabi_dsub+0x3b0>
 8002aa8:	4665      	mov	r5, ip
 8002aaa:	431d      	orrs	r5, r3
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x1cc>
 8002aae:	e19c      	b.n	8002dea <__aeabi_dsub+0x506>
 8002ab0:	1e55      	subs	r5, r2, #1
 8002ab2:	2a01      	cmp	r2, #1
 8002ab4:	d100      	bne.n	8002ab8 <__aeabi_dsub+0x1d4>
 8002ab6:	e1fb      	b.n	8002eb0 <__aeabi_dsub+0x5cc>
 8002ab8:	4c60      	ldr	r4, [pc, #384]	; (8002c3c <__aeabi_dsub+0x358>)
 8002aba:	42a2      	cmp	r2, r4
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x1dc>
 8002abe:	e1bd      	b.n	8002e3c <__aeabi_dsub+0x558>
 8002ac0:	002a      	movs	r2, r5
 8002ac2:	e0f0      	b.n	8002ca6 <__aeabi_dsub+0x3c2>
 8002ac4:	0008      	movs	r0, r1
 8002ac6:	4338      	orrs	r0, r7
 8002ac8:	d100      	bne.n	8002acc <__aeabi_dsub+0x1e8>
 8002aca:	e0c3      	b.n	8002c54 <__aeabi_dsub+0x370>
 8002acc:	1e50      	subs	r0, r2, #1
 8002ace:	2a01      	cmp	r2, #1
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x1f0>
 8002ad2:	e1a8      	b.n	8002e26 <__aeabi_dsub+0x542>
 8002ad4:	4c59      	ldr	r4, [pc, #356]	; (8002c3c <__aeabi_dsub+0x358>)
 8002ad6:	42a2      	cmp	r2, r4
 8002ad8:	d100      	bne.n	8002adc <__aeabi_dsub+0x1f8>
 8002ada:	e087      	b.n	8002bec <__aeabi_dsub+0x308>
 8002adc:	0002      	movs	r2, r0
 8002ade:	e736      	b.n	800294e <__aeabi_dsub+0x6a>
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4056      	eors	r6, r2
 8002ae4:	46b3      	mov	fp, r6
 8002ae6:	42b5      	cmp	r5, r6
 8002ae8:	d000      	beq.n	8002aec <__aeabi_dsub+0x208>
 8002aea:	e721      	b.n	8002930 <__aeabi_dsub+0x4c>
 8002aec:	4a55      	ldr	r2, [pc, #340]	; (8002c44 <__aeabi_dsub+0x360>)
 8002aee:	4442      	add	r2, r8
 8002af0:	2a00      	cmp	r2, #0
 8002af2:	d100      	bne.n	8002af6 <__aeabi_dsub+0x212>
 8002af4:	e0b5      	b.n	8002c62 <__aeabi_dsub+0x37e>
 8002af6:	4642      	mov	r2, r8
 8002af8:	4644      	mov	r4, r8
 8002afa:	1a82      	subs	r2, r0, r2
 8002afc:	2c00      	cmp	r4, #0
 8002afe:	d100      	bne.n	8002b02 <__aeabi_dsub+0x21e>
 8002b00:	e138      	b.n	8002d74 <__aeabi_dsub+0x490>
 8002b02:	4e4e      	ldr	r6, [pc, #312]	; (8002c3c <__aeabi_dsub+0x358>)
 8002b04:	42b0      	cmp	r0, r6
 8002b06:	d100      	bne.n	8002b0a <__aeabi_dsub+0x226>
 8002b08:	e1de      	b.n	8002ec8 <__aeabi_dsub+0x5e4>
 8002b0a:	2680      	movs	r6, #128	; 0x80
 8002b0c:	4664      	mov	r4, ip
 8002b0e:	0436      	lsls	r6, r6, #16
 8002b10:	4334      	orrs	r4, r6
 8002b12:	46a4      	mov	ip, r4
 8002b14:	2a38      	cmp	r2, #56	; 0x38
 8002b16:	dd00      	ble.n	8002b1a <__aeabi_dsub+0x236>
 8002b18:	e196      	b.n	8002e48 <__aeabi_dsub+0x564>
 8002b1a:	2a1f      	cmp	r2, #31
 8002b1c:	dd00      	ble.n	8002b20 <__aeabi_dsub+0x23c>
 8002b1e:	e224      	b.n	8002f6a <__aeabi_dsub+0x686>
 8002b20:	2620      	movs	r6, #32
 8002b22:	1ab4      	subs	r4, r6, r2
 8002b24:	46a2      	mov	sl, r4
 8002b26:	4664      	mov	r4, ip
 8002b28:	4656      	mov	r6, sl
 8002b2a:	40b4      	lsls	r4, r6
 8002b2c:	46a1      	mov	r9, r4
 8002b2e:	001c      	movs	r4, r3
 8002b30:	464e      	mov	r6, r9
 8002b32:	40d4      	lsrs	r4, r2
 8002b34:	4326      	orrs	r6, r4
 8002b36:	0034      	movs	r4, r6
 8002b38:	4656      	mov	r6, sl
 8002b3a:	40b3      	lsls	r3, r6
 8002b3c:	1e5e      	subs	r6, r3, #1
 8002b3e:	41b3      	sbcs	r3, r6
 8002b40:	431c      	orrs	r4, r3
 8002b42:	4663      	mov	r3, ip
 8002b44:	40d3      	lsrs	r3, r2
 8002b46:	18c9      	adds	r1, r1, r3
 8002b48:	19e4      	adds	r4, r4, r7
 8002b4a:	42bc      	cmp	r4, r7
 8002b4c:	41bf      	sbcs	r7, r7
 8002b4e:	427f      	negs	r7, r7
 8002b50:	46b9      	mov	r9, r7
 8002b52:	4680      	mov	r8, r0
 8002b54:	4489      	add	r9, r1
 8002b56:	e0d8      	b.n	8002d0a <__aeabi_dsub+0x426>
 8002b58:	4640      	mov	r0, r8
 8002b5a:	4c3b      	ldr	r4, [pc, #236]	; (8002c48 <__aeabi_dsub+0x364>)
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	4220      	tst	r0, r4
 8002b60:	d000      	beq.n	8002b64 <__aeabi_dsub+0x280>
 8002b62:	e0b4      	b.n	8002cce <__aeabi_dsub+0x3ea>
 8002b64:	4640      	mov	r0, r8
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d000      	beq.n	8002b6c <__aeabi_dsub+0x288>
 8002b6a:	e144      	b.n	8002df6 <__aeabi_dsub+0x512>
 8002b6c:	4660      	mov	r0, ip
 8002b6e:	4318      	orrs	r0, r3
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x290>
 8002b72:	e190      	b.n	8002e96 <__aeabi_dsub+0x5b2>
 8002b74:	0008      	movs	r0, r1
 8002b76:	4338      	orrs	r0, r7
 8002b78:	d000      	beq.n	8002b7c <__aeabi_dsub+0x298>
 8002b7a:	e1aa      	b.n	8002ed2 <__aeabi_dsub+0x5ee>
 8002b7c:	4661      	mov	r1, ip
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	0749      	lsls	r1, r1, #29
 8002b82:	430b      	orrs	r3, r1
 8002b84:	4661      	mov	r1, ip
 8002b86:	08cc      	lsrs	r4, r1, #3
 8002b88:	e027      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002b8a:	0008      	movs	r0, r1
 8002b8c:	4338      	orrs	r0, r7
 8002b8e:	d061      	beq.n	8002c54 <__aeabi_dsub+0x370>
 8002b90:	1e50      	subs	r0, r2, #1
 8002b92:	2a01      	cmp	r2, #1
 8002b94:	d100      	bne.n	8002b98 <__aeabi_dsub+0x2b4>
 8002b96:	e139      	b.n	8002e0c <__aeabi_dsub+0x528>
 8002b98:	42a2      	cmp	r2, r4
 8002b9a:	d027      	beq.n	8002bec <__aeabi_dsub+0x308>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	e75d      	b.n	8002a5c <__aeabi_dsub+0x178>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	391f      	subs	r1, #31
 8002ba4:	40ca      	lsrs	r2, r1
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d003      	beq.n	8002bb4 <__aeabi_dsub+0x2d0>
 8002bac:	2240      	movs	r2, #64	; 0x40
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4098      	lsls	r0, r3
 8002bb2:	4304      	orrs	r4, r0
 8002bb4:	1e63      	subs	r3, r4, #1
 8002bb6:	419c      	sbcs	r4, r3
 8002bb8:	2300      	movs	r3, #0
 8002bba:	4699      	mov	r9, r3
 8002bbc:	4698      	mov	r8, r3
 8002bbe:	430c      	orrs	r4, r1
 8002bc0:	0763      	lsls	r3, r4, #29
 8002bc2:	d000      	beq.n	8002bc6 <__aeabi_dsub+0x2e2>
 8002bc4:	e712      	b.n	80029ec <__aeabi_dsub+0x108>
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	464a      	mov	r2, r9
 8002bca:	08e4      	lsrs	r4, r4, #3
 8002bcc:	075b      	lsls	r3, r3, #29
 8002bce:	4323      	orrs	r3, r4
 8002bd0:	08d4      	lsrs	r4, r2, #3
 8002bd2:	4642      	mov	r2, r8
 8002bd4:	4919      	ldr	r1, [pc, #100]	; (8002c3c <__aeabi_dsub+0x358>)
 8002bd6:	428a      	cmp	r2, r1
 8002bd8:	d00e      	beq.n	8002bf8 <__aeabi_dsub+0x314>
 8002bda:	0324      	lsls	r4, r4, #12
 8002bdc:	0552      	lsls	r2, r2, #21
 8002bde:	0b24      	lsrs	r4, r4, #12
 8002be0:	0d52      	lsrs	r2, r2, #21
 8002be2:	e722      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002be4:	000a      	movs	r2, r1
 8002be6:	2400      	movs	r4, #0
 8002be8:	2300      	movs	r3, #0
 8002bea:	e71e      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002bec:	08db      	lsrs	r3, r3, #3
 8002bee:	4662      	mov	r2, ip
 8002bf0:	0752      	lsls	r2, r2, #29
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	4662      	mov	r2, ip
 8002bf6:	08d4      	lsrs	r4, r2, #3
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	4322      	orrs	r2, r4
 8002bfc:	d100      	bne.n	8002c00 <__aeabi_dsub+0x31c>
 8002bfe:	e1fc      	b.n	8002ffa <__aeabi_dsub+0x716>
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	0312      	lsls	r2, r2, #12
 8002c04:	4314      	orrs	r4, r2
 8002c06:	0324      	lsls	r4, r4, #12
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <__aeabi_dsub+0x358>)
 8002c0a:	0b24      	lsrs	r4, r4, #12
 8002c0c:	e70d      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002c0e:	0020      	movs	r0, r4
 8002c10:	f000 fb74 	bl	80032fc <__clzsi2>
 8002c14:	0001      	movs	r1, r0
 8002c16:	3118      	adds	r1, #24
 8002c18:	291f      	cmp	r1, #31
 8002c1a:	dc00      	bgt.n	8002c1e <__aeabi_dsub+0x33a>
 8002c1c:	e6c4      	b.n	80029a8 <__aeabi_dsub+0xc4>
 8002c1e:	3808      	subs	r0, #8
 8002c20:	4084      	lsls	r4, r0
 8002c22:	4643      	mov	r3, r8
 8002c24:	0020      	movs	r0, r4
 8002c26:	2400      	movs	r4, #0
 8002c28:	4588      	cmp	r8, r1
 8002c2a:	dc00      	bgt.n	8002c2e <__aeabi_dsub+0x34a>
 8002c2c:	e6c8      	b.n	80029c0 <__aeabi_dsub+0xdc>
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <__aeabi_dsub+0x35c>)
 8002c30:	1a5b      	subs	r3, r3, r1
 8002c32:	4010      	ands	r0, r2
 8002c34:	4698      	mov	r8, r3
 8002c36:	4681      	mov	r9, r0
 8002c38:	e6d6      	b.n	80029e8 <__aeabi_dsub+0x104>
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	000007ff 	.word	0x000007ff
 8002c40:	ff7fffff 	.word	0xff7fffff
 8002c44:	fffff801 	.word	0xfffff801
 8002c48:	000007fe 	.word	0x000007fe
 8002c4c:	430f      	orrs	r7, r1
 8002c4e:	1e7a      	subs	r2, r7, #1
 8002c50:	4197      	sbcs	r7, r2
 8002c52:	e691      	b.n	8002978 <__aeabi_dsub+0x94>
 8002c54:	4661      	mov	r1, ip
 8002c56:	08db      	lsrs	r3, r3, #3
 8002c58:	0749      	lsls	r1, r1, #29
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	4661      	mov	r1, ip
 8002c5e:	08cc      	lsrs	r4, r1, #3
 8002c60:	e7b8      	b.n	8002bd4 <__aeabi_dsub+0x2f0>
 8002c62:	4640      	mov	r0, r8
 8002c64:	4cd3      	ldr	r4, [pc, #844]	; (8002fb4 <__aeabi_dsub+0x6d0>)
 8002c66:	3001      	adds	r0, #1
 8002c68:	4220      	tst	r0, r4
 8002c6a:	d000      	beq.n	8002c6e <__aeabi_dsub+0x38a>
 8002c6c:	e0a2      	b.n	8002db4 <__aeabi_dsub+0x4d0>
 8002c6e:	4640      	mov	r0, r8
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d000      	beq.n	8002c76 <__aeabi_dsub+0x392>
 8002c74:	e101      	b.n	8002e7a <__aeabi_dsub+0x596>
 8002c76:	4660      	mov	r0, ip
 8002c78:	4318      	orrs	r0, r3
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x39a>
 8002c7c:	e15e      	b.n	8002f3c <__aeabi_dsub+0x658>
 8002c7e:	0008      	movs	r0, r1
 8002c80:	4338      	orrs	r0, r7
 8002c82:	d000      	beq.n	8002c86 <__aeabi_dsub+0x3a2>
 8002c84:	e15f      	b.n	8002f46 <__aeabi_dsub+0x662>
 8002c86:	4661      	mov	r1, ip
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	0749      	lsls	r1, r1, #29
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	4661      	mov	r1, ip
 8002c90:	08cc      	lsrs	r4, r1, #3
 8002c92:	e7a2      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002c94:	4dc8      	ldr	r5, [pc, #800]	; (8002fb8 <__aeabi_dsub+0x6d4>)
 8002c96:	42a8      	cmp	r0, r5
 8002c98:	d100      	bne.n	8002c9c <__aeabi_dsub+0x3b8>
 8002c9a:	e0cf      	b.n	8002e3c <__aeabi_dsub+0x558>
 8002c9c:	2580      	movs	r5, #128	; 0x80
 8002c9e:	4664      	mov	r4, ip
 8002ca0:	042d      	lsls	r5, r5, #16
 8002ca2:	432c      	orrs	r4, r5
 8002ca4:	46a4      	mov	ip, r4
 8002ca6:	2a38      	cmp	r2, #56	; 0x38
 8002ca8:	dc56      	bgt.n	8002d58 <__aeabi_dsub+0x474>
 8002caa:	2a1f      	cmp	r2, #31
 8002cac:	dd00      	ble.n	8002cb0 <__aeabi_dsub+0x3cc>
 8002cae:	e0d1      	b.n	8002e54 <__aeabi_dsub+0x570>
 8002cb0:	2520      	movs	r5, #32
 8002cb2:	001e      	movs	r6, r3
 8002cb4:	1aad      	subs	r5, r5, r2
 8002cb6:	4664      	mov	r4, ip
 8002cb8:	40ab      	lsls	r3, r5
 8002cba:	40ac      	lsls	r4, r5
 8002cbc:	40d6      	lsrs	r6, r2
 8002cbe:	1e5d      	subs	r5, r3, #1
 8002cc0:	41ab      	sbcs	r3, r5
 8002cc2:	4334      	orrs	r4, r6
 8002cc4:	4323      	orrs	r3, r4
 8002cc6:	4664      	mov	r4, ip
 8002cc8:	40d4      	lsrs	r4, r2
 8002cca:	1b09      	subs	r1, r1, r4
 8002ccc:	e049      	b.n	8002d62 <__aeabi_dsub+0x47e>
 8002cce:	4660      	mov	r0, ip
 8002cd0:	1bdc      	subs	r4, r3, r7
 8002cd2:	1a46      	subs	r6, r0, r1
 8002cd4:	42a3      	cmp	r3, r4
 8002cd6:	4180      	sbcs	r0, r0
 8002cd8:	4240      	negs	r0, r0
 8002cda:	4681      	mov	r9, r0
 8002cdc:	0030      	movs	r0, r6
 8002cde:	464e      	mov	r6, r9
 8002ce0:	1b80      	subs	r0, r0, r6
 8002ce2:	4681      	mov	r9, r0
 8002ce4:	0200      	lsls	r0, r0, #8
 8002ce6:	d476      	bmi.n	8002dd6 <__aeabi_dsub+0x4f2>
 8002ce8:	464b      	mov	r3, r9
 8002cea:	4323      	orrs	r3, r4
 8002cec:	d000      	beq.n	8002cf0 <__aeabi_dsub+0x40c>
 8002cee:	e652      	b.n	8002996 <__aeabi_dsub+0xb2>
 8002cf0:	2400      	movs	r4, #0
 8002cf2:	2500      	movs	r5, #0
 8002cf4:	e771      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002cf6:	4339      	orrs	r1, r7
 8002cf8:	000c      	movs	r4, r1
 8002cfa:	1e62      	subs	r2, r4, #1
 8002cfc:	4194      	sbcs	r4, r2
 8002cfe:	18e4      	adds	r4, r4, r3
 8002d00:	429c      	cmp	r4, r3
 8002d02:	419b      	sbcs	r3, r3
 8002d04:	425b      	negs	r3, r3
 8002d06:	4463      	add	r3, ip
 8002d08:	4699      	mov	r9, r3
 8002d0a:	464b      	mov	r3, r9
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	d400      	bmi.n	8002d12 <__aeabi_dsub+0x42e>
 8002d10:	e756      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002d12:	2301      	movs	r3, #1
 8002d14:	469c      	mov	ip, r3
 8002d16:	4ba8      	ldr	r3, [pc, #672]	; (8002fb8 <__aeabi_dsub+0x6d4>)
 8002d18:	44e0      	add	r8, ip
 8002d1a:	4598      	cmp	r8, r3
 8002d1c:	d038      	beq.n	8002d90 <__aeabi_dsub+0x4ac>
 8002d1e:	464b      	mov	r3, r9
 8002d20:	48a6      	ldr	r0, [pc, #664]	; (8002fbc <__aeabi_dsub+0x6d8>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	4003      	ands	r3, r0
 8002d26:	0018      	movs	r0, r3
 8002d28:	0863      	lsrs	r3, r4, #1
 8002d2a:	4014      	ands	r4, r2
 8002d2c:	431c      	orrs	r4, r3
 8002d2e:	07c3      	lsls	r3, r0, #31
 8002d30:	431c      	orrs	r4, r3
 8002d32:	0843      	lsrs	r3, r0, #1
 8002d34:	4699      	mov	r9, r3
 8002d36:	e657      	b.n	80029e8 <__aeabi_dsub+0x104>
 8002d38:	0010      	movs	r0, r2
 8002d3a:	000e      	movs	r6, r1
 8002d3c:	3820      	subs	r0, #32
 8002d3e:	40c6      	lsrs	r6, r0
 8002d40:	2a20      	cmp	r2, #32
 8002d42:	d004      	beq.n	8002d4e <__aeabi_dsub+0x46a>
 8002d44:	2040      	movs	r0, #64	; 0x40
 8002d46:	1a82      	subs	r2, r0, r2
 8002d48:	4091      	lsls	r1, r2
 8002d4a:	430f      	orrs	r7, r1
 8002d4c:	46b9      	mov	r9, r7
 8002d4e:	464f      	mov	r7, r9
 8002d50:	1e7a      	subs	r2, r7, #1
 8002d52:	4197      	sbcs	r7, r2
 8002d54:	4337      	orrs	r7, r6
 8002d56:	e60f      	b.n	8002978 <__aeabi_dsub+0x94>
 8002d58:	4662      	mov	r2, ip
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	0013      	movs	r3, r2
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	4193      	sbcs	r3, r2
 8002d62:	1afc      	subs	r4, r7, r3
 8002d64:	42a7      	cmp	r7, r4
 8002d66:	41bf      	sbcs	r7, r7
 8002d68:	427f      	negs	r7, r7
 8002d6a:	1bcb      	subs	r3, r1, r7
 8002d6c:	4699      	mov	r9, r3
 8002d6e:	465d      	mov	r5, fp
 8002d70:	4680      	mov	r8, r0
 8002d72:	e608      	b.n	8002986 <__aeabi_dsub+0xa2>
 8002d74:	4666      	mov	r6, ip
 8002d76:	431e      	orrs	r6, r3
 8002d78:	d100      	bne.n	8002d7c <__aeabi_dsub+0x498>
 8002d7a:	e0be      	b.n	8002efa <__aeabi_dsub+0x616>
 8002d7c:	1e56      	subs	r6, r2, #1
 8002d7e:	2a01      	cmp	r2, #1
 8002d80:	d100      	bne.n	8002d84 <__aeabi_dsub+0x4a0>
 8002d82:	e109      	b.n	8002f98 <__aeabi_dsub+0x6b4>
 8002d84:	4c8c      	ldr	r4, [pc, #560]	; (8002fb8 <__aeabi_dsub+0x6d4>)
 8002d86:	42a2      	cmp	r2, r4
 8002d88:	d100      	bne.n	8002d8c <__aeabi_dsub+0x4a8>
 8002d8a:	e119      	b.n	8002fc0 <__aeabi_dsub+0x6dc>
 8002d8c:	0032      	movs	r2, r6
 8002d8e:	e6c1      	b.n	8002b14 <__aeabi_dsub+0x230>
 8002d90:	4642      	mov	r2, r8
 8002d92:	2400      	movs	r4, #0
 8002d94:	2300      	movs	r3, #0
 8002d96:	e648      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002d98:	2020      	movs	r0, #32
 8002d9a:	000c      	movs	r4, r1
 8002d9c:	1a80      	subs	r0, r0, r2
 8002d9e:	003e      	movs	r6, r7
 8002da0:	4087      	lsls	r7, r0
 8002da2:	4084      	lsls	r4, r0
 8002da4:	40d6      	lsrs	r6, r2
 8002da6:	1e78      	subs	r0, r7, #1
 8002da8:	4187      	sbcs	r7, r0
 8002daa:	40d1      	lsrs	r1, r2
 8002dac:	4334      	orrs	r4, r6
 8002dae:	433c      	orrs	r4, r7
 8002db0:	448c      	add	ip, r1
 8002db2:	e7a4      	b.n	8002cfe <__aeabi_dsub+0x41a>
 8002db4:	4a80      	ldr	r2, [pc, #512]	; (8002fb8 <__aeabi_dsub+0x6d4>)
 8002db6:	4290      	cmp	r0, r2
 8002db8:	d100      	bne.n	8002dbc <__aeabi_dsub+0x4d8>
 8002dba:	e0e9      	b.n	8002f90 <__aeabi_dsub+0x6ac>
 8002dbc:	19df      	adds	r7, r3, r7
 8002dbe:	429f      	cmp	r7, r3
 8002dc0:	419b      	sbcs	r3, r3
 8002dc2:	4461      	add	r1, ip
 8002dc4:	425b      	negs	r3, r3
 8002dc6:	18c9      	adds	r1, r1, r3
 8002dc8:	07cc      	lsls	r4, r1, #31
 8002dca:	087f      	lsrs	r7, r7, #1
 8002dcc:	084b      	lsrs	r3, r1, #1
 8002dce:	4699      	mov	r9, r3
 8002dd0:	4680      	mov	r8, r0
 8002dd2:	433c      	orrs	r4, r7
 8002dd4:	e6f4      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002dd6:	1afc      	subs	r4, r7, r3
 8002dd8:	42a7      	cmp	r7, r4
 8002dda:	41bf      	sbcs	r7, r7
 8002ddc:	4663      	mov	r3, ip
 8002dde:	427f      	negs	r7, r7
 8002de0:	1ac9      	subs	r1, r1, r3
 8002de2:	1bcb      	subs	r3, r1, r7
 8002de4:	4699      	mov	r9, r3
 8002de6:	465d      	mov	r5, fp
 8002de8:	e5d5      	b.n	8002996 <__aeabi_dsub+0xb2>
 8002dea:	08ff      	lsrs	r7, r7, #3
 8002dec:	074b      	lsls	r3, r1, #29
 8002dee:	465d      	mov	r5, fp
 8002df0:	433b      	orrs	r3, r7
 8002df2:	08cc      	lsrs	r4, r1, #3
 8002df4:	e6ee      	b.n	8002bd4 <__aeabi_dsub+0x2f0>
 8002df6:	4662      	mov	r2, ip
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	d000      	beq.n	8002dfe <__aeabi_dsub+0x51a>
 8002dfc:	e082      	b.n	8002f04 <__aeabi_dsub+0x620>
 8002dfe:	000b      	movs	r3, r1
 8002e00:	433b      	orrs	r3, r7
 8002e02:	d11b      	bne.n	8002e3c <__aeabi_dsub+0x558>
 8002e04:	2480      	movs	r4, #128	; 0x80
 8002e06:	2500      	movs	r5, #0
 8002e08:	0324      	lsls	r4, r4, #12
 8002e0a:	e6f9      	b.n	8002c00 <__aeabi_dsub+0x31c>
 8002e0c:	19dc      	adds	r4, r3, r7
 8002e0e:	429c      	cmp	r4, r3
 8002e10:	419b      	sbcs	r3, r3
 8002e12:	4461      	add	r1, ip
 8002e14:	4689      	mov	r9, r1
 8002e16:	425b      	negs	r3, r3
 8002e18:	4499      	add	r9, r3
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	d444      	bmi.n	8002eaa <__aeabi_dsub+0x5c6>
 8002e20:	2301      	movs	r3, #1
 8002e22:	4698      	mov	r8, r3
 8002e24:	e6cc      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002e26:	1bdc      	subs	r4, r3, r7
 8002e28:	4662      	mov	r2, ip
 8002e2a:	42a3      	cmp	r3, r4
 8002e2c:	419b      	sbcs	r3, r3
 8002e2e:	1a51      	subs	r1, r2, r1
 8002e30:	425b      	negs	r3, r3
 8002e32:	1acb      	subs	r3, r1, r3
 8002e34:	4699      	mov	r9, r3
 8002e36:	2301      	movs	r3, #1
 8002e38:	4698      	mov	r8, r3
 8002e3a:	e5a4      	b.n	8002986 <__aeabi_dsub+0xa2>
 8002e3c:	08ff      	lsrs	r7, r7, #3
 8002e3e:	074b      	lsls	r3, r1, #29
 8002e40:	465d      	mov	r5, fp
 8002e42:	433b      	orrs	r3, r7
 8002e44:	08cc      	lsrs	r4, r1, #3
 8002e46:	e6d7      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002e48:	4662      	mov	r2, ip
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	0014      	movs	r4, r2
 8002e4e:	1e63      	subs	r3, r4, #1
 8002e50:	419c      	sbcs	r4, r3
 8002e52:	e679      	b.n	8002b48 <__aeabi_dsub+0x264>
 8002e54:	0015      	movs	r5, r2
 8002e56:	4664      	mov	r4, ip
 8002e58:	3d20      	subs	r5, #32
 8002e5a:	40ec      	lsrs	r4, r5
 8002e5c:	46a0      	mov	r8, r4
 8002e5e:	2a20      	cmp	r2, #32
 8002e60:	d005      	beq.n	8002e6e <__aeabi_dsub+0x58a>
 8002e62:	2540      	movs	r5, #64	; 0x40
 8002e64:	4664      	mov	r4, ip
 8002e66:	1aaa      	subs	r2, r5, r2
 8002e68:	4094      	lsls	r4, r2
 8002e6a:	4323      	orrs	r3, r4
 8002e6c:	469a      	mov	sl, r3
 8002e6e:	4654      	mov	r4, sl
 8002e70:	1e63      	subs	r3, r4, #1
 8002e72:	419c      	sbcs	r4, r3
 8002e74:	4643      	mov	r3, r8
 8002e76:	4323      	orrs	r3, r4
 8002e78:	e773      	b.n	8002d62 <__aeabi_dsub+0x47e>
 8002e7a:	4662      	mov	r2, ip
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	d023      	beq.n	8002ec8 <__aeabi_dsub+0x5e4>
 8002e80:	000a      	movs	r2, r1
 8002e82:	433a      	orrs	r2, r7
 8002e84:	d000      	beq.n	8002e88 <__aeabi_dsub+0x5a4>
 8002e86:	e0a0      	b.n	8002fca <__aeabi_dsub+0x6e6>
 8002e88:	4662      	mov	r2, ip
 8002e8a:	08db      	lsrs	r3, r3, #3
 8002e8c:	0752      	lsls	r2, r2, #29
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	4662      	mov	r2, ip
 8002e92:	08d4      	lsrs	r4, r2, #3
 8002e94:	e6b0      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002e96:	000b      	movs	r3, r1
 8002e98:	433b      	orrs	r3, r7
 8002e9a:	d100      	bne.n	8002e9e <__aeabi_dsub+0x5ba>
 8002e9c:	e728      	b.n	8002cf0 <__aeabi_dsub+0x40c>
 8002e9e:	08ff      	lsrs	r7, r7, #3
 8002ea0:	074b      	lsls	r3, r1, #29
 8002ea2:	465d      	mov	r5, fp
 8002ea4:	433b      	orrs	r3, r7
 8002ea6:	08cc      	lsrs	r4, r1, #3
 8002ea8:	e697      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	4698      	mov	r8, r3
 8002eae:	e736      	b.n	8002d1e <__aeabi_dsub+0x43a>
 8002eb0:	1afc      	subs	r4, r7, r3
 8002eb2:	42a7      	cmp	r7, r4
 8002eb4:	41bf      	sbcs	r7, r7
 8002eb6:	4663      	mov	r3, ip
 8002eb8:	427f      	negs	r7, r7
 8002eba:	1ac9      	subs	r1, r1, r3
 8002ebc:	1bcb      	subs	r3, r1, r7
 8002ebe:	4699      	mov	r9, r3
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	465d      	mov	r5, fp
 8002ec4:	4698      	mov	r8, r3
 8002ec6:	e55e      	b.n	8002986 <__aeabi_dsub+0xa2>
 8002ec8:	074b      	lsls	r3, r1, #29
 8002eca:	08ff      	lsrs	r7, r7, #3
 8002ecc:	433b      	orrs	r3, r7
 8002ece:	08cc      	lsrs	r4, r1, #3
 8002ed0:	e692      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002ed2:	1bdc      	subs	r4, r3, r7
 8002ed4:	4660      	mov	r0, ip
 8002ed6:	42a3      	cmp	r3, r4
 8002ed8:	41b6      	sbcs	r6, r6
 8002eda:	1a40      	subs	r0, r0, r1
 8002edc:	4276      	negs	r6, r6
 8002ede:	1b80      	subs	r0, r0, r6
 8002ee0:	4681      	mov	r9, r0
 8002ee2:	0200      	lsls	r0, r0, #8
 8002ee4:	d560      	bpl.n	8002fa8 <__aeabi_dsub+0x6c4>
 8002ee6:	1afc      	subs	r4, r7, r3
 8002ee8:	42a7      	cmp	r7, r4
 8002eea:	41bf      	sbcs	r7, r7
 8002eec:	4663      	mov	r3, ip
 8002eee:	427f      	negs	r7, r7
 8002ef0:	1ac9      	subs	r1, r1, r3
 8002ef2:	1bcb      	subs	r3, r1, r7
 8002ef4:	4699      	mov	r9, r3
 8002ef6:	465d      	mov	r5, fp
 8002ef8:	e576      	b.n	80029e8 <__aeabi_dsub+0x104>
 8002efa:	08ff      	lsrs	r7, r7, #3
 8002efc:	074b      	lsls	r3, r1, #29
 8002efe:	433b      	orrs	r3, r7
 8002f00:	08cc      	lsrs	r4, r1, #3
 8002f02:	e667      	b.n	8002bd4 <__aeabi_dsub+0x2f0>
 8002f04:	000a      	movs	r2, r1
 8002f06:	08db      	lsrs	r3, r3, #3
 8002f08:	433a      	orrs	r2, r7
 8002f0a:	d100      	bne.n	8002f0e <__aeabi_dsub+0x62a>
 8002f0c:	e66f      	b.n	8002bee <__aeabi_dsub+0x30a>
 8002f0e:	4662      	mov	r2, ip
 8002f10:	0752      	lsls	r2, r2, #29
 8002f12:	4313      	orrs	r3, r2
 8002f14:	4662      	mov	r2, ip
 8002f16:	08d4      	lsrs	r4, r2, #3
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	0312      	lsls	r2, r2, #12
 8002f1c:	4214      	tst	r4, r2
 8002f1e:	d007      	beq.n	8002f30 <__aeabi_dsub+0x64c>
 8002f20:	08c8      	lsrs	r0, r1, #3
 8002f22:	4210      	tst	r0, r2
 8002f24:	d104      	bne.n	8002f30 <__aeabi_dsub+0x64c>
 8002f26:	465d      	mov	r5, fp
 8002f28:	0004      	movs	r4, r0
 8002f2a:	08fb      	lsrs	r3, r7, #3
 8002f2c:	0749      	lsls	r1, r1, #29
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	0f5a      	lsrs	r2, r3, #29
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	08db      	lsrs	r3, r3, #3
 8002f36:	0752      	lsls	r2, r2, #29
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	e65d      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002f3c:	074b      	lsls	r3, r1, #29
 8002f3e:	08ff      	lsrs	r7, r7, #3
 8002f40:	433b      	orrs	r3, r7
 8002f42:	08cc      	lsrs	r4, r1, #3
 8002f44:	e649      	b.n	8002bda <__aeabi_dsub+0x2f6>
 8002f46:	19dc      	adds	r4, r3, r7
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	419b      	sbcs	r3, r3
 8002f4c:	4461      	add	r1, ip
 8002f4e:	4689      	mov	r9, r1
 8002f50:	425b      	negs	r3, r3
 8002f52:	4499      	add	r9, r3
 8002f54:	464b      	mov	r3, r9
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	d400      	bmi.n	8002f5c <__aeabi_dsub+0x678>
 8002f5a:	e631      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002f5c:	464a      	mov	r2, r9
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <__aeabi_dsub+0x6d8>)
 8002f60:	401a      	ands	r2, r3
 8002f62:	2301      	movs	r3, #1
 8002f64:	4691      	mov	r9, r2
 8002f66:	4698      	mov	r8, r3
 8002f68:	e62a      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002f6a:	0016      	movs	r6, r2
 8002f6c:	4664      	mov	r4, ip
 8002f6e:	3e20      	subs	r6, #32
 8002f70:	40f4      	lsrs	r4, r6
 8002f72:	46a0      	mov	r8, r4
 8002f74:	2a20      	cmp	r2, #32
 8002f76:	d005      	beq.n	8002f84 <__aeabi_dsub+0x6a0>
 8002f78:	2640      	movs	r6, #64	; 0x40
 8002f7a:	4664      	mov	r4, ip
 8002f7c:	1ab2      	subs	r2, r6, r2
 8002f7e:	4094      	lsls	r4, r2
 8002f80:	4323      	orrs	r3, r4
 8002f82:	469a      	mov	sl, r3
 8002f84:	4654      	mov	r4, sl
 8002f86:	1e63      	subs	r3, r4, #1
 8002f88:	419c      	sbcs	r4, r3
 8002f8a:	4643      	mov	r3, r8
 8002f8c:	431c      	orrs	r4, r3
 8002f8e:	e5db      	b.n	8002b48 <__aeabi_dsub+0x264>
 8002f90:	0002      	movs	r2, r0
 8002f92:	2400      	movs	r4, #0
 8002f94:	2300      	movs	r3, #0
 8002f96:	e548      	b.n	8002a2a <__aeabi_dsub+0x146>
 8002f98:	19dc      	adds	r4, r3, r7
 8002f9a:	42bc      	cmp	r4, r7
 8002f9c:	41bf      	sbcs	r7, r7
 8002f9e:	4461      	add	r1, ip
 8002fa0:	4689      	mov	r9, r1
 8002fa2:	427f      	negs	r7, r7
 8002fa4:	44b9      	add	r9, r7
 8002fa6:	e738      	b.n	8002e1a <__aeabi_dsub+0x536>
 8002fa8:	464b      	mov	r3, r9
 8002faa:	4323      	orrs	r3, r4
 8002fac:	d100      	bne.n	8002fb0 <__aeabi_dsub+0x6cc>
 8002fae:	e69f      	b.n	8002cf0 <__aeabi_dsub+0x40c>
 8002fb0:	e606      	b.n	8002bc0 <__aeabi_dsub+0x2dc>
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	000007fe 	.word	0x000007fe
 8002fb8:	000007ff 	.word	0x000007ff
 8002fbc:	ff7fffff 	.word	0xff7fffff
 8002fc0:	08ff      	lsrs	r7, r7, #3
 8002fc2:	074b      	lsls	r3, r1, #29
 8002fc4:	433b      	orrs	r3, r7
 8002fc6:	08cc      	lsrs	r4, r1, #3
 8002fc8:	e616      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002fca:	4662      	mov	r2, ip
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	0752      	lsls	r2, r2, #29
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	08d4      	lsrs	r4, r2, #3
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	0312      	lsls	r2, r2, #12
 8002fda:	4214      	tst	r4, r2
 8002fdc:	d007      	beq.n	8002fee <__aeabi_dsub+0x70a>
 8002fde:	08c8      	lsrs	r0, r1, #3
 8002fe0:	4210      	tst	r0, r2
 8002fe2:	d104      	bne.n	8002fee <__aeabi_dsub+0x70a>
 8002fe4:	465d      	mov	r5, fp
 8002fe6:	0004      	movs	r4, r0
 8002fe8:	08fb      	lsrs	r3, r7, #3
 8002fea:	0749      	lsls	r1, r1, #29
 8002fec:	430b      	orrs	r3, r1
 8002fee:	0f5a      	lsrs	r2, r3, #29
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	0752      	lsls	r2, r2, #29
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	e5fe      	b.n	8002bf8 <__aeabi_dsub+0x314>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	4a01      	ldr	r2, [pc, #4]	; (8003004 <__aeabi_dsub+0x720>)
 8002ffe:	001c      	movs	r4, r3
 8003000:	e513      	b.n	8002a2a <__aeabi_dsub+0x146>
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	000007ff 	.word	0x000007ff

08003008 <__aeabi_dcmpun>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	0005      	movs	r5, r0
 800300c:	480c      	ldr	r0, [pc, #48]	; (8003040 <__aeabi_dcmpun+0x38>)
 800300e:	031c      	lsls	r4, r3, #12
 8003010:	0016      	movs	r6, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	030a      	lsls	r2, r1, #12
 8003016:	0049      	lsls	r1, r1, #1
 8003018:	0b12      	lsrs	r2, r2, #12
 800301a:	0d49      	lsrs	r1, r1, #21
 800301c:	0b24      	lsrs	r4, r4, #12
 800301e:	0d5b      	lsrs	r3, r3, #21
 8003020:	4281      	cmp	r1, r0
 8003022:	d008      	beq.n	8003036 <__aeabi_dcmpun+0x2e>
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <__aeabi_dcmpun+0x38>)
 8003026:	2000      	movs	r0, #0
 8003028:	4293      	cmp	r3, r2
 800302a:	d103      	bne.n	8003034 <__aeabi_dcmpun+0x2c>
 800302c:	0020      	movs	r0, r4
 800302e:	4330      	orrs	r0, r6
 8003030:	1e43      	subs	r3, r0, #1
 8003032:	4198      	sbcs	r0, r3
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	2001      	movs	r0, #1
 8003038:	432a      	orrs	r2, r5
 800303a:	d1fb      	bne.n	8003034 <__aeabi_dcmpun+0x2c>
 800303c:	e7f2      	b.n	8003024 <__aeabi_dcmpun+0x1c>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	000007ff 	.word	0x000007ff

08003044 <__aeabi_d2iz>:
 8003044:	000a      	movs	r2, r1
 8003046:	b530      	push	{r4, r5, lr}
 8003048:	4c13      	ldr	r4, [pc, #76]	; (8003098 <__aeabi_d2iz+0x54>)
 800304a:	0053      	lsls	r3, r2, #1
 800304c:	0309      	lsls	r1, r1, #12
 800304e:	0005      	movs	r5, r0
 8003050:	0b09      	lsrs	r1, r1, #12
 8003052:	2000      	movs	r0, #0
 8003054:	0d5b      	lsrs	r3, r3, #21
 8003056:	0fd2      	lsrs	r2, r2, #31
 8003058:	42a3      	cmp	r3, r4
 800305a:	dd04      	ble.n	8003066 <__aeabi_d2iz+0x22>
 800305c:	480f      	ldr	r0, [pc, #60]	; (800309c <__aeabi_d2iz+0x58>)
 800305e:	4283      	cmp	r3, r0
 8003060:	dd02      	ble.n	8003068 <__aeabi_d2iz+0x24>
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <__aeabi_d2iz+0x5c>)
 8003064:	18d0      	adds	r0, r2, r3
 8003066:	bd30      	pop	{r4, r5, pc}
 8003068:	2080      	movs	r0, #128	; 0x80
 800306a:	0340      	lsls	r0, r0, #13
 800306c:	4301      	orrs	r1, r0
 800306e:	480d      	ldr	r0, [pc, #52]	; (80030a4 <__aeabi_d2iz+0x60>)
 8003070:	1ac0      	subs	r0, r0, r3
 8003072:	281f      	cmp	r0, #31
 8003074:	dd08      	ble.n	8003088 <__aeabi_d2iz+0x44>
 8003076:	480c      	ldr	r0, [pc, #48]	; (80030a8 <__aeabi_d2iz+0x64>)
 8003078:	1ac3      	subs	r3, r0, r3
 800307a:	40d9      	lsrs	r1, r3
 800307c:	000b      	movs	r3, r1
 800307e:	4258      	negs	r0, r3
 8003080:	2a00      	cmp	r2, #0
 8003082:	d1f0      	bne.n	8003066 <__aeabi_d2iz+0x22>
 8003084:	0018      	movs	r0, r3
 8003086:	e7ee      	b.n	8003066 <__aeabi_d2iz+0x22>
 8003088:	4c08      	ldr	r4, [pc, #32]	; (80030ac <__aeabi_d2iz+0x68>)
 800308a:	40c5      	lsrs	r5, r0
 800308c:	46a4      	mov	ip, r4
 800308e:	4463      	add	r3, ip
 8003090:	4099      	lsls	r1, r3
 8003092:	000b      	movs	r3, r1
 8003094:	432b      	orrs	r3, r5
 8003096:	e7f2      	b.n	800307e <__aeabi_d2iz+0x3a>
 8003098:	000003fe 	.word	0x000003fe
 800309c:	0000041d 	.word	0x0000041d
 80030a0:	7fffffff 	.word	0x7fffffff
 80030a4:	00000433 	.word	0x00000433
 80030a8:	00000413 	.word	0x00000413
 80030ac:	fffffbed 	.word	0xfffffbed

080030b0 <__aeabi_i2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d016      	beq.n	80030e4 <__aeabi_i2d+0x34>
 80030b6:	17c3      	asrs	r3, r0, #31
 80030b8:	18c5      	adds	r5, r0, r3
 80030ba:	405d      	eors	r5, r3
 80030bc:	0fc4      	lsrs	r4, r0, #31
 80030be:	0028      	movs	r0, r5
 80030c0:	f000 f91c 	bl	80032fc <__clzsi2>
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <__aeabi_i2d+0x5c>)
 80030c6:	1a12      	subs	r2, r2, r0
 80030c8:	280a      	cmp	r0, #10
 80030ca:	dc16      	bgt.n	80030fa <__aeabi_i2d+0x4a>
 80030cc:	0003      	movs	r3, r0
 80030ce:	002e      	movs	r6, r5
 80030d0:	3315      	adds	r3, #21
 80030d2:	409e      	lsls	r6, r3
 80030d4:	230b      	movs	r3, #11
 80030d6:	1a18      	subs	r0, r3, r0
 80030d8:	40c5      	lsrs	r5, r0
 80030da:	0552      	lsls	r2, r2, #21
 80030dc:	032d      	lsls	r5, r5, #12
 80030de:	0b2d      	lsrs	r5, r5, #12
 80030e0:	0d53      	lsrs	r3, r2, #21
 80030e2:	e003      	b.n	80030ec <__aeabi_i2d+0x3c>
 80030e4:	2400      	movs	r4, #0
 80030e6:	2300      	movs	r3, #0
 80030e8:	2500      	movs	r5, #0
 80030ea:	2600      	movs	r6, #0
 80030ec:	051b      	lsls	r3, r3, #20
 80030ee:	432b      	orrs	r3, r5
 80030f0:	07e4      	lsls	r4, r4, #31
 80030f2:	4323      	orrs	r3, r4
 80030f4:	0030      	movs	r0, r6
 80030f6:	0019      	movs	r1, r3
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	380b      	subs	r0, #11
 80030fc:	4085      	lsls	r5, r0
 80030fe:	0552      	lsls	r2, r2, #21
 8003100:	032d      	lsls	r5, r5, #12
 8003102:	2600      	movs	r6, #0
 8003104:	0b2d      	lsrs	r5, r5, #12
 8003106:	0d53      	lsrs	r3, r2, #21
 8003108:	e7f0      	b.n	80030ec <__aeabi_i2d+0x3c>
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	0000041e 	.word	0x0000041e

08003110 <__aeabi_ui2d>:
 8003110:	b510      	push	{r4, lr}
 8003112:	1e04      	subs	r4, r0, #0
 8003114:	d010      	beq.n	8003138 <__aeabi_ui2d+0x28>
 8003116:	f000 f8f1 	bl	80032fc <__clzsi2>
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <__aeabi_ui2d+0x48>)
 800311c:	1a1b      	subs	r3, r3, r0
 800311e:	280a      	cmp	r0, #10
 8003120:	dc11      	bgt.n	8003146 <__aeabi_ui2d+0x36>
 8003122:	220b      	movs	r2, #11
 8003124:	0021      	movs	r1, r4
 8003126:	1a12      	subs	r2, r2, r0
 8003128:	40d1      	lsrs	r1, r2
 800312a:	3015      	adds	r0, #21
 800312c:	030a      	lsls	r2, r1, #12
 800312e:	055b      	lsls	r3, r3, #21
 8003130:	4084      	lsls	r4, r0
 8003132:	0b12      	lsrs	r2, r2, #12
 8003134:	0d5b      	lsrs	r3, r3, #21
 8003136:	e001      	b.n	800313c <__aeabi_ui2d+0x2c>
 8003138:	2300      	movs	r3, #0
 800313a:	2200      	movs	r2, #0
 800313c:	051b      	lsls	r3, r3, #20
 800313e:	4313      	orrs	r3, r2
 8003140:	0020      	movs	r0, r4
 8003142:	0019      	movs	r1, r3
 8003144:	bd10      	pop	{r4, pc}
 8003146:	0022      	movs	r2, r4
 8003148:	380b      	subs	r0, #11
 800314a:	4082      	lsls	r2, r0
 800314c:	055b      	lsls	r3, r3, #21
 800314e:	0312      	lsls	r2, r2, #12
 8003150:	2400      	movs	r4, #0
 8003152:	0b12      	lsrs	r2, r2, #12
 8003154:	0d5b      	lsrs	r3, r3, #21
 8003156:	e7f1      	b.n	800313c <__aeabi_ui2d+0x2c>
 8003158:	0000041e 	.word	0x0000041e

0800315c <__aeabi_f2d>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	0043      	lsls	r3, r0, #1
 8003160:	0246      	lsls	r6, r0, #9
 8003162:	0fc4      	lsrs	r4, r0, #31
 8003164:	20fe      	movs	r0, #254	; 0xfe
 8003166:	0e1b      	lsrs	r3, r3, #24
 8003168:	1c59      	adds	r1, r3, #1
 800316a:	0a75      	lsrs	r5, r6, #9
 800316c:	4208      	tst	r0, r1
 800316e:	d00c      	beq.n	800318a <__aeabi_f2d+0x2e>
 8003170:	22e0      	movs	r2, #224	; 0xe0
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4694      	mov	ip, r2
 8003176:	076d      	lsls	r5, r5, #29
 8003178:	0b36      	lsrs	r6, r6, #12
 800317a:	4463      	add	r3, ip
 800317c:	051b      	lsls	r3, r3, #20
 800317e:	4333      	orrs	r3, r6
 8003180:	07e4      	lsls	r4, r4, #31
 8003182:	4323      	orrs	r3, r4
 8003184:	0028      	movs	r0, r5
 8003186:	0019      	movs	r1, r3
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	2b00      	cmp	r3, #0
 800318c:	d114      	bne.n	80031b8 <__aeabi_f2d+0x5c>
 800318e:	2d00      	cmp	r5, #0
 8003190:	d01b      	beq.n	80031ca <__aeabi_f2d+0x6e>
 8003192:	0028      	movs	r0, r5
 8003194:	f000 f8b2 	bl	80032fc <__clzsi2>
 8003198:	280a      	cmp	r0, #10
 800319a:	dc1c      	bgt.n	80031d6 <__aeabi_f2d+0x7a>
 800319c:	230b      	movs	r3, #11
 800319e:	002e      	movs	r6, r5
 80031a0:	1a1b      	subs	r3, r3, r0
 80031a2:	40de      	lsrs	r6, r3
 80031a4:	0003      	movs	r3, r0
 80031a6:	3315      	adds	r3, #21
 80031a8:	409d      	lsls	r5, r3
 80031aa:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <__aeabi_f2d+0x88>)
 80031ac:	0336      	lsls	r6, r6, #12
 80031ae:	1a12      	subs	r2, r2, r0
 80031b0:	0552      	lsls	r2, r2, #21
 80031b2:	0b36      	lsrs	r6, r6, #12
 80031b4:	0d53      	lsrs	r3, r2, #21
 80031b6:	e7e1      	b.n	800317c <__aeabi_f2d+0x20>
 80031b8:	2d00      	cmp	r5, #0
 80031ba:	d009      	beq.n	80031d0 <__aeabi_f2d+0x74>
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	0b36      	lsrs	r6, r6, #12
 80031c0:	0312      	lsls	r2, r2, #12
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <__aeabi_f2d+0x8c>)
 80031c4:	076d      	lsls	r5, r5, #29
 80031c6:	4316      	orrs	r6, r2
 80031c8:	e7d8      	b.n	800317c <__aeabi_f2d+0x20>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2600      	movs	r6, #0
 80031ce:	e7d5      	b.n	800317c <__aeabi_f2d+0x20>
 80031d0:	2600      	movs	r6, #0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <__aeabi_f2d+0x8c>)
 80031d4:	e7d2      	b.n	800317c <__aeabi_f2d+0x20>
 80031d6:	0003      	movs	r3, r0
 80031d8:	3b0b      	subs	r3, #11
 80031da:	409d      	lsls	r5, r3
 80031dc:	002e      	movs	r6, r5
 80031de:	2500      	movs	r5, #0
 80031e0:	e7e3      	b.n	80031aa <__aeabi_f2d+0x4e>
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	00000389 	.word	0x00000389
 80031e8:	000007ff 	.word	0x000007ff

080031ec <__aeabi_d2f>:
 80031ec:	0002      	movs	r2, r0
 80031ee:	004b      	lsls	r3, r1, #1
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	0d5b      	lsrs	r3, r3, #21
 80031f4:	030c      	lsls	r4, r1, #12
 80031f6:	4e3d      	ldr	r6, [pc, #244]	; (80032ec <__aeabi_d2f+0x100>)
 80031f8:	0a64      	lsrs	r4, r4, #9
 80031fa:	0f40      	lsrs	r0, r0, #29
 80031fc:	1c5f      	adds	r7, r3, #1
 80031fe:	0fc9      	lsrs	r1, r1, #31
 8003200:	4304      	orrs	r4, r0
 8003202:	00d5      	lsls	r5, r2, #3
 8003204:	4237      	tst	r7, r6
 8003206:	d00a      	beq.n	800321e <__aeabi_d2f+0x32>
 8003208:	4839      	ldr	r0, [pc, #228]	; (80032f0 <__aeabi_d2f+0x104>)
 800320a:	181e      	adds	r6, r3, r0
 800320c:	2efe      	cmp	r6, #254	; 0xfe
 800320e:	dd16      	ble.n	800323e <__aeabi_d2f+0x52>
 8003210:	20ff      	movs	r0, #255	; 0xff
 8003212:	2400      	movs	r4, #0
 8003214:	05c0      	lsls	r0, r0, #23
 8003216:	4320      	orrs	r0, r4
 8003218:	07c9      	lsls	r1, r1, #31
 800321a:	4308      	orrs	r0, r1
 800321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <__aeabi_d2f+0x44>
 8003222:	432c      	orrs	r4, r5
 8003224:	d026      	beq.n	8003274 <__aeabi_d2f+0x88>
 8003226:	2205      	movs	r2, #5
 8003228:	0192      	lsls	r2, r2, #6
 800322a:	0a54      	lsrs	r4, r2, #9
 800322c:	b2d8      	uxtb	r0, r3
 800322e:	e7f1      	b.n	8003214 <__aeabi_d2f+0x28>
 8003230:	4325      	orrs	r5, r4
 8003232:	d0ed      	beq.n	8003210 <__aeabi_d2f+0x24>
 8003234:	2080      	movs	r0, #128	; 0x80
 8003236:	03c0      	lsls	r0, r0, #15
 8003238:	4304      	orrs	r4, r0
 800323a:	20ff      	movs	r0, #255	; 0xff
 800323c:	e7ea      	b.n	8003214 <__aeabi_d2f+0x28>
 800323e:	2e00      	cmp	r6, #0
 8003240:	dd1b      	ble.n	800327a <__aeabi_d2f+0x8e>
 8003242:	0192      	lsls	r2, r2, #6
 8003244:	1e53      	subs	r3, r2, #1
 8003246:	419a      	sbcs	r2, r3
 8003248:	00e4      	lsls	r4, r4, #3
 800324a:	0f6d      	lsrs	r5, r5, #29
 800324c:	4322      	orrs	r2, r4
 800324e:	432a      	orrs	r2, r5
 8003250:	0753      	lsls	r3, r2, #29
 8003252:	d048      	beq.n	80032e6 <__aeabi_d2f+0xfa>
 8003254:	230f      	movs	r3, #15
 8003256:	4013      	ands	r3, r2
 8003258:	2b04      	cmp	r3, #4
 800325a:	d000      	beq.n	800325e <__aeabi_d2f+0x72>
 800325c:	3204      	adds	r2, #4
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	04db      	lsls	r3, r3, #19
 8003262:	4013      	ands	r3, r2
 8003264:	d03f      	beq.n	80032e6 <__aeabi_d2f+0xfa>
 8003266:	1c70      	adds	r0, r6, #1
 8003268:	2efe      	cmp	r6, #254	; 0xfe
 800326a:	d0d1      	beq.n	8003210 <__aeabi_d2f+0x24>
 800326c:	0192      	lsls	r2, r2, #6
 800326e:	0a54      	lsrs	r4, r2, #9
 8003270:	b2c0      	uxtb	r0, r0
 8003272:	e7cf      	b.n	8003214 <__aeabi_d2f+0x28>
 8003274:	2000      	movs	r0, #0
 8003276:	2400      	movs	r4, #0
 8003278:	e7cc      	b.n	8003214 <__aeabi_d2f+0x28>
 800327a:	0032      	movs	r2, r6
 800327c:	3217      	adds	r2, #23
 800327e:	db22      	blt.n	80032c6 <__aeabi_d2f+0xda>
 8003280:	2080      	movs	r0, #128	; 0x80
 8003282:	0400      	lsls	r0, r0, #16
 8003284:	4320      	orrs	r0, r4
 8003286:	241e      	movs	r4, #30
 8003288:	1ba4      	subs	r4, r4, r6
 800328a:	2c1f      	cmp	r4, #31
 800328c:	dd1d      	ble.n	80032ca <__aeabi_d2f+0xde>
 800328e:	2202      	movs	r2, #2
 8003290:	4252      	negs	r2, r2
 8003292:	1b96      	subs	r6, r2, r6
 8003294:	0002      	movs	r2, r0
 8003296:	40f2      	lsrs	r2, r6
 8003298:	0016      	movs	r6, r2
 800329a:	2c20      	cmp	r4, #32
 800329c:	d004      	beq.n	80032a8 <__aeabi_d2f+0xbc>
 800329e:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <__aeabi_d2f+0x108>)
 80032a0:	4694      	mov	ip, r2
 80032a2:	4463      	add	r3, ip
 80032a4:	4098      	lsls	r0, r3
 80032a6:	4305      	orrs	r5, r0
 80032a8:	002a      	movs	r2, r5
 80032aa:	1e53      	subs	r3, r2, #1
 80032ac:	419a      	sbcs	r2, r3
 80032ae:	4332      	orrs	r2, r6
 80032b0:	2600      	movs	r6, #0
 80032b2:	0753      	lsls	r3, r2, #29
 80032b4:	d1ce      	bne.n	8003254 <__aeabi_d2f+0x68>
 80032b6:	2480      	movs	r4, #128	; 0x80
 80032b8:	0013      	movs	r3, r2
 80032ba:	04e4      	lsls	r4, r4, #19
 80032bc:	2001      	movs	r0, #1
 80032be:	4023      	ands	r3, r4
 80032c0:	4222      	tst	r2, r4
 80032c2:	d1d3      	bne.n	800326c <__aeabi_d2f+0x80>
 80032c4:	e7b0      	b.n	8003228 <__aeabi_d2f+0x3c>
 80032c6:	2300      	movs	r3, #0
 80032c8:	e7ad      	b.n	8003226 <__aeabi_d2f+0x3a>
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <__aeabi_d2f+0x10c>)
 80032cc:	4694      	mov	ip, r2
 80032ce:	002a      	movs	r2, r5
 80032d0:	40e2      	lsrs	r2, r4
 80032d2:	0014      	movs	r4, r2
 80032d4:	002a      	movs	r2, r5
 80032d6:	4463      	add	r3, ip
 80032d8:	409a      	lsls	r2, r3
 80032da:	4098      	lsls	r0, r3
 80032dc:	1e55      	subs	r5, r2, #1
 80032de:	41aa      	sbcs	r2, r5
 80032e0:	4302      	orrs	r2, r0
 80032e2:	4322      	orrs	r2, r4
 80032e4:	e7e4      	b.n	80032b0 <__aeabi_d2f+0xc4>
 80032e6:	0033      	movs	r3, r6
 80032e8:	e79e      	b.n	8003228 <__aeabi_d2f+0x3c>
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	000007fe 	.word	0x000007fe
 80032f0:	fffffc80 	.word	0xfffffc80
 80032f4:	fffffca2 	.word	0xfffffca2
 80032f8:	fffffc82 	.word	0xfffffc82

080032fc <__clzsi2>:
 80032fc:	211c      	movs	r1, #28
 80032fe:	2301      	movs	r3, #1
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	4298      	cmp	r0, r3
 8003304:	d301      	bcc.n	800330a <__clzsi2+0xe>
 8003306:	0c00      	lsrs	r0, r0, #16
 8003308:	3910      	subs	r1, #16
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	4298      	cmp	r0, r3
 800330e:	d301      	bcc.n	8003314 <__clzsi2+0x18>
 8003310:	0a00      	lsrs	r0, r0, #8
 8003312:	3908      	subs	r1, #8
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	4298      	cmp	r0, r3
 8003318:	d301      	bcc.n	800331e <__clzsi2+0x22>
 800331a:	0900      	lsrs	r0, r0, #4
 800331c:	3904      	subs	r1, #4
 800331e:	a202      	add	r2, pc, #8	; (adr r2, 8003328 <__clzsi2+0x2c>)
 8003320:	5c10      	ldrb	r0, [r2, r0]
 8003322:	1840      	adds	r0, r0, r1
 8003324:	4770      	bx	lr
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	02020304 	.word	0x02020304
 800332c:	01010101 	.word	0x01010101
	...

08003338 <__clzdi2>:
 8003338:	b510      	push	{r4, lr}
 800333a:	2900      	cmp	r1, #0
 800333c:	d103      	bne.n	8003346 <__clzdi2+0xe>
 800333e:	f7ff ffdd 	bl	80032fc <__clzsi2>
 8003342:	3020      	adds	r0, #32
 8003344:	e002      	b.n	800334c <__clzdi2+0x14>
 8003346:	0008      	movs	r0, r1
 8003348:	f7ff ffd8 	bl	80032fc <__clzsi2>
 800334c:	bd10      	pop	{r4, pc}
 800334e:	46c0      	nop			; (mov r8, r8)

08003350 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	0002      	movs	r2, r0
 8003358:	1dbb      	adds	r3, r7, #6
 800335a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800335c:	230f      	movs	r3, #15
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 8003364:	210e      	movs	r1, #14
 8003366:	187b      	adds	r3, r7, r1
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800336c:	187b      	adds	r3, r7, r1
 800336e:	222d      	movs	r2, #45	; 0x2d
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e01a      	b.n	80033aa <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8003374:	240e      	movs	r4, #14
 8003376:	193b      	adds	r3, r7, r4
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	b299      	uxth	r1, r3
 800337c:	193b      	adds	r3, r7, r4
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	3b2d      	subs	r3, #45	; 0x2d
 8003382:	4a3e      	ldr	r2, [pc, #248]	; (800347c <VL53L1X_SensorInit+0x12c>)
 8003384:	5cd2      	ldrb	r2, [r2, r3]
 8003386:	1dbb      	adds	r3, r7, #6
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	0018      	movs	r0, r3
 800338c:	f001 fb60 	bl	8004a50 <VL53L1_WrByte>
 8003390:	0003      	movs	r3, r0
 8003392:	0019      	movs	r1, r3
 8003394:	220f      	movs	r2, #15
 8003396:	18bb      	adds	r3, r7, r2
 8003398:	18ba      	adds	r2, r7, r2
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80033a0:	193b      	adds	r3, r7, r4
 80033a2:	781a      	ldrb	r2, [r3, #0]
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	3201      	adds	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	230e      	movs	r3, #14
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b87      	cmp	r3, #135	; 0x87
 80033b2:	d9df      	bls.n	8003374 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 80033b4:	1dbb      	adds	r3, r7, #6
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f8b3 	bl	8003524 <VL53L1X_StartRanging>
 80033be:	0003      	movs	r3, r0
 80033c0:	0019      	movs	r1, r3
 80033c2:	220f      	movs	r2, #15
 80033c4:	18bb      	adds	r3, r7, r2
 80033c6:	18ba      	adds	r2, r7, r2
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 80033ce:	230d      	movs	r3, #13
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 80033d6:	e00f      	b.n	80033f8 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80033d8:	230d      	movs	r3, #13
 80033da:	18fa      	adds	r2, r7, r3
 80033dc:	1dbb      	adds	r3, r7, #6
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f000 f8dc 	bl	80035a0 <VL53L1X_CheckForDataReady>
 80033e8:	0003      	movs	r3, r0
 80033ea:	0019      	movs	r1, r3
 80033ec:	220f      	movs	r2, #15
 80033ee:	18bb      	adds	r3, r7, r2
 80033f0:	18ba      	adds	r2, r7, r2
 80033f2:	7812      	ldrb	r2, [r2, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 80033f8:	230d      	movs	r3, #13
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0ea      	beq.n	80033d8 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8003402:	1dbb      	adds	r3, r7, #6
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f83a 	bl	8003480 <VL53L1X_ClearInterrupt>
 800340c:	0003      	movs	r3, r0
 800340e:	0019      	movs	r1, r3
 8003410:	240f      	movs	r4, #15
 8003412:	193b      	adds	r3, r7, r4
 8003414:	193a      	adds	r2, r7, r4
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 800341c:	1dbb      	adds	r3, r7, #6
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 f89e 	bl	8003562 <VL53L1X_StopRanging>
 8003426:	0003      	movs	r3, r0
 8003428:	0019      	movs	r1, r3
 800342a:	193b      	adds	r3, r7, r4
 800342c:	193a      	adds	r2, r7, r4
 800342e:	7812      	ldrb	r2, [r2, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8003434:	1dbb      	adds	r3, r7, #6
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	2209      	movs	r2, #9
 800343a:	2108      	movs	r1, #8
 800343c:	0018      	movs	r0, r3
 800343e:	f001 fb07 	bl	8004a50 <VL53L1_WrByte>
 8003442:	0003      	movs	r3, r0
 8003444:	0019      	movs	r1, r3
 8003446:	193b      	adds	r3, r7, r4
 8003448:	193a      	adds	r2, r7, r4
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8003450:	1dbb      	adds	r3, r7, #6
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	2200      	movs	r2, #0
 8003456:	210b      	movs	r1, #11
 8003458:	0018      	movs	r0, r3
 800345a:	f001 faf9 	bl	8004a50 <VL53L1_WrByte>
 800345e:	0003      	movs	r3, r0
 8003460:	0019      	movs	r1, r3
 8003462:	193b      	adds	r3, r7, r4
 8003464:	193a      	adds	r2, r7, r4
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	701a      	strb	r2, [r3, #0]
	return status;
 800346c:	193b      	adds	r3, r7, r4
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b25b      	sxtb	r3, r3
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b005      	add	sp, #20
 8003478:	bd90      	pop	{r4, r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	0800b548 	.word	0x0800b548

08003480 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	0002      	movs	r2, r0
 8003488:	1dbb      	adds	r3, r7, #6
 800348a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800348c:	240f      	movs	r4, #15
 800348e:	193b      	adds	r3, r7, r4
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8003494:	1dbb      	adds	r3, r7, #6
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	2201      	movs	r2, #1
 800349a:	2186      	movs	r1, #134	; 0x86
 800349c:	0018      	movs	r0, r3
 800349e:	f001 fad7 	bl	8004a50 <VL53L1_WrByte>
 80034a2:	0003      	movs	r3, r0
 80034a4:	0019      	movs	r1, r3
 80034a6:	193b      	adds	r3, r7, r4
 80034a8:	193a      	adds	r2, r7, r4
 80034aa:	7812      	ldrb	r2, [r2, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	701a      	strb	r2, [r3, #0]
	return status;
 80034b0:	193b      	adds	r3, r7, r4
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b25b      	sxtb	r3, r3
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b005      	add	sp, #20
 80034bc:	bd90      	pop	{r4, r7, pc}

080034be <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 80034be:	b5b0      	push	{r4, r5, r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	0002      	movs	r2, r0
 80034c6:	6039      	str	r1, [r7, #0]
 80034c8:	1dbb      	adds	r3, r7, #6
 80034ca:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80034cc:	240f      	movs	r4, #15
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80034d4:	250e      	movs	r5, #14
 80034d6:	197a      	adds	r2, r7, r5
 80034d8:	1dbb      	adds	r3, r7, #6
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	2130      	movs	r1, #48	; 0x30
 80034de:	0018      	movs	r0, r3
 80034e0:	f001 fb7c 	bl	8004bdc <VL53L1_RdByte>
 80034e4:	0003      	movs	r3, r0
 80034e6:	0019      	movs	r1, r3
 80034e8:	0020      	movs	r0, r4
 80034ea:	183b      	adds	r3, r7, r0
 80034ec:	183a      	adds	r2, r7, r0
 80034ee:	7812      	ldrb	r2, [r2, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 80034f4:	197b      	adds	r3, r7, r5
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2210      	movs	r2, #16
 80034fa:	4013      	ands	r3, r2
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	197b      	adds	r3, r7, r5
 8003500:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8003502:	197b      	adds	r3, r7, r5
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	b2db      	uxtb	r3, r3
 800350a:	425a      	negs	r2, r3
 800350c:	4153      	adcs	r3, r2
 800350e:	b2db      	uxtb	r3, r3
 8003510:	001a      	movs	r2, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	701a      	strb	r2, [r3, #0]
	return status;
 8003516:	183b      	adds	r3, r7, r0
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b25b      	sxtb	r3, r3
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bdb0      	pop	{r4, r5, r7, pc}

08003524 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	0002      	movs	r2, r0
 800352c:	1dbb      	adds	r3, r7, #6
 800352e:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003530:	240f      	movs	r4, #15
 8003532:	193b      	adds	r3, r7, r4
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8003538:	1dbb      	adds	r3, r7, #6
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	2240      	movs	r2, #64	; 0x40
 800353e:	2187      	movs	r1, #135	; 0x87
 8003540:	0018      	movs	r0, r3
 8003542:	f001 fa85 	bl	8004a50 <VL53L1_WrByte>
 8003546:	0003      	movs	r3, r0
 8003548:	0019      	movs	r1, r3
 800354a:	193b      	adds	r3, r7, r4
 800354c:	193a      	adds	r2, r7, r4
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	701a      	strb	r2, [r3, #0]
	return status;
 8003554:	193b      	adds	r3, r7, r4
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b25b      	sxtb	r3, r3
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b005      	add	sp, #20
 8003560:	bd90      	pop	{r4, r7, pc}

08003562 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8003562:	b590      	push	{r4, r7, lr}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	0002      	movs	r2, r0
 800356a:	1dbb      	adds	r3, r7, #6
 800356c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800356e:	240f      	movs	r4, #15
 8003570:	193b      	adds	r3, r7, r4
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8003576:	1dbb      	adds	r3, r7, #6
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	2187      	movs	r1, #135	; 0x87
 800357e:	0018      	movs	r0, r3
 8003580:	f001 fa66 	bl	8004a50 <VL53L1_WrByte>
 8003584:	0003      	movs	r3, r0
 8003586:	0019      	movs	r1, r3
 8003588:	193b      	adds	r3, r7, r4
 800358a:	193a      	adds	r2, r7, r4
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	701a      	strb	r2, [r3, #0]
	return status;
 8003592:	193b      	adds	r3, r7, r4
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b25b      	sxtb	r3, r3
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b005      	add	sp, #20
 800359e:	bd90      	pop	{r4, r7, pc}

080035a0 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80035a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	0002      	movs	r2, r0
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	1dbb      	adds	r3, r7, #6
 80035ac:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80035ae:	240f      	movs	r4, #15
 80035b0:	193b      	adds	r3, r7, r4
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80035b6:	250d      	movs	r5, #13
 80035b8:	197a      	adds	r2, r7, r5
 80035ba:	1dbb      	adds	r3, r7, #6
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	0011      	movs	r1, r2
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff ff7c 	bl	80034be <VL53L1X_GetInterruptPolarity>
 80035c6:	0003      	movs	r3, r0
 80035c8:	0019      	movs	r1, r3
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	193a      	adds	r2, r7, r4
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80035d4:	260e      	movs	r6, #14
 80035d6:	19ba      	adds	r2, r7, r6
 80035d8:	1dbb      	adds	r3, r7, #6
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	2131      	movs	r1, #49	; 0x31
 80035de:	0018      	movs	r0, r3
 80035e0:	f001 fafc 	bl	8004bdc <VL53L1_RdByte>
 80035e4:	0003      	movs	r3, r0
 80035e6:	0019      	movs	r1, r3
 80035e8:	193b      	adds	r3, r7, r4
 80035ea:	193a      	adds	r2, r7, r4
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10f      	bne.n	800361c <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 80035fc:	19bb      	adds	r3, r7, r6
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	001a      	movs	r2, r3
 8003602:	2301      	movs	r3, #1
 8003604:	4013      	ands	r3, r2
 8003606:	197a      	adds	r2, r7, r5
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	4293      	cmp	r3, r2
 800360c:	d103      	bne.n	8003616 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e002      	b.n	800361c <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800361c:	230f      	movs	r3, #15
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b25b      	sxtb	r3, r3
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b005      	add	sp, #20
 800362a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800362c <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 800362c:	b5b0      	push	{r4, r5, r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	0002      	movs	r2, r0
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	801a      	strh	r2, [r3, #0]
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	1c0a      	adds	r2, r1, #0
 800363c:	801a      	strh	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 800363e:	240f      	movs	r4, #15
 8003640:	193b      	adds	r3, r7, r4
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8003646:	250c      	movs	r5, #12
 8003648:	197a      	adds	r2, r7, r5
 800364a:	1dbb      	adds	r3, r7, #6
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	0011      	movs	r1, r2
 8003650:	0018      	movs	r0, r3
 8003652:	f000 faa5 	bl	8003ba0 <VL53L1X_GetDistanceMode>
 8003656:	0003      	movs	r3, r0
 8003658:	0019      	movs	r1, r3
 800365a:	193b      	adds	r3, r7, r4
 800365c:	193a      	adds	r2, r7, r4
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	701a      	strb	r2, [r3, #0]
	if (DM == 0)
 8003664:	197b      	adds	r3, r7, r5
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <VL53L1X_SetTimingBudgetInMs+0x44>
		return 1;
 800366c:	2301      	movs	r3, #1
 800366e:	e11a      	b.n	80038a6 <VL53L1X_SetTimingBudgetInMs+0x27a>
	else if (DM == 1) {	/* Short DistanceMode */
 8003670:	230c      	movs	r3, #12
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d000      	beq.n	800367c <VL53L1X_SetTimingBudgetInMs+0x50>
 800367a:	e092      	b.n	80037a2 <VL53L1X_SetTimingBudgetInMs+0x176>
		switch (TimingBudgetInMs) {
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	22fa      	movs	r2, #250	; 0xfa
 8003682:	0052      	lsls	r2, r2, #1
 8003684:	4293      	cmp	r3, r2
 8003686:	d100      	bne.n	800368a <VL53L1X_SetTimingBudgetInMs+0x5e>
 8003688:	e077      	b.n	800377a <VL53L1X_SetTimingBudgetInMs+0x14e>
 800368a:	22fa      	movs	r2, #250	; 0xfa
 800368c:	0052      	lsls	r2, r2, #1
 800368e:	4293      	cmp	r3, r2
 8003690:	dd00      	ble.n	8003694 <VL53L1X_SetTimingBudgetInMs+0x68>
 8003692:	e081      	b.n	8003798 <VL53L1X_SetTimingBudgetInMs+0x16c>
 8003694:	2bc8      	cmp	r3, #200	; 0xc8
 8003696:	d100      	bne.n	800369a <VL53L1X_SetTimingBudgetInMs+0x6e>
 8003698:	e060      	b.n	800375c <VL53L1X_SetTimingBudgetInMs+0x130>
 800369a:	dd00      	ble.n	800369e <VL53L1X_SetTimingBudgetInMs+0x72>
 800369c:	e07c      	b.n	8003798 <VL53L1X_SetTimingBudgetInMs+0x16c>
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d04c      	beq.n	800373c <VL53L1X_SetTimingBudgetInMs+0x110>
 80036a2:	dd00      	ble.n	80036a6 <VL53L1X_SetTimingBudgetInMs+0x7a>
 80036a4:	e078      	b.n	8003798 <VL53L1X_SetTimingBudgetInMs+0x16c>
 80036a6:	2b32      	cmp	r3, #50	; 0x32
 80036a8:	d037      	beq.n	800371a <VL53L1X_SetTimingBudgetInMs+0xee>
 80036aa:	dd00      	ble.n	80036ae <VL53L1X_SetTimingBudgetInMs+0x82>
 80036ac:	e074      	b.n	8003798 <VL53L1X_SetTimingBudgetInMs+0x16c>
 80036ae:	2b21      	cmp	r3, #33	; 0x21
 80036b0:	d024      	beq.n	80036fc <VL53L1X_SetTimingBudgetInMs+0xd0>
 80036b2:	dd00      	ble.n	80036b6 <VL53L1X_SetTimingBudgetInMs+0x8a>
 80036b4:	e070      	b.n	8003798 <VL53L1X_SetTimingBudgetInMs+0x16c>
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	d002      	beq.n	80036c0 <VL53L1X_SetTimingBudgetInMs+0x94>
 80036ba:	2b14      	cmp	r3, #20
 80036bc:	d00f      	beq.n	80036de <VL53L1X_SetTimingBudgetInMs+0xb2>
 80036be:	e06b      	b.n	8003798 <VL53L1X_SetTimingBudgetInMs+0x16c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80036c0:	1dbb      	adds	r3, r7, #6
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	221d      	movs	r2, #29
 80036c6:	215e      	movs	r1, #94	; 0x5e
 80036c8:	0018      	movs	r0, r3
 80036ca:	f001 f9fd 	bl	8004ac8 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	2227      	movs	r2, #39	; 0x27
 80036d4:	2161      	movs	r1, #97	; 0x61
 80036d6:	0018      	movs	r0, r3
 80036d8:	f001 f9f6 	bl	8004ac8 <VL53L1_WrWord>
					0x0027);
			break;
 80036dc:	e0df      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80036de:	1dbb      	adds	r3, r7, #6
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	2251      	movs	r2, #81	; 0x51
 80036e4:	215e      	movs	r1, #94	; 0x5e
 80036e6:	0018      	movs	r0, r3
 80036e8:	f001 f9ee 	bl	8004ac8 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80036ec:	1dbb      	adds	r3, r7, #6
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	226e      	movs	r2, #110	; 0x6e
 80036f2:	2161      	movs	r1, #97	; 0x61
 80036f4:	0018      	movs	r0, r3
 80036f6:	f001 f9e7 	bl	8004ac8 <VL53L1_WrWord>
					0x006E);
			break;
 80036fa:	e0d0      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80036fc:	1dbb      	adds	r3, r7, #6
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	22d6      	movs	r2, #214	; 0xd6
 8003702:	215e      	movs	r1, #94	; 0x5e
 8003704:	0018      	movs	r0, r3
 8003706:	f001 f9df 	bl	8004ac8 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800370a:	1dbb      	adds	r3, r7, #6
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	226e      	movs	r2, #110	; 0x6e
 8003710:	2161      	movs	r1, #97	; 0x61
 8003712:	0018      	movs	r0, r3
 8003714:	f001 f9d8 	bl	8004ac8 <VL53L1_WrWord>
					0x006E);
			break;
 8003718:	e0c1      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800371a:	23d7      	movs	r3, #215	; 0xd7
 800371c:	005a      	lsls	r2, r3, #1
 800371e:	1dbb      	adds	r3, r7, #6
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	215e      	movs	r1, #94	; 0x5e
 8003724:	0018      	movs	r0, r3
 8003726:	f001 f9cf 	bl	8004ac8 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800372a:	23f4      	movs	r3, #244	; 0xf4
 800372c:	005a      	lsls	r2, r3, #1
 800372e:	1dbb      	adds	r3, r7, #6
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	2161      	movs	r1, #97	; 0x61
 8003734:	0018      	movs	r0, r3
 8003736:	f001 f9c7 	bl	8004ac8 <VL53L1_WrWord>
					0x01E8);
			break;
 800373a:	e0b0      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800373c:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <VL53L1X_SetTimingBudgetInMs+0x284>)
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	215e      	movs	r1, #94	; 0x5e
 8003744:	0018      	movs	r0, r3
 8003746:	f001 f9bf 	bl	8004ac8 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800374a:	23e2      	movs	r3, #226	; 0xe2
 800374c:	009a      	lsls	r2, r3, #2
 800374e:	1dbb      	adds	r3, r7, #6
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	2161      	movs	r1, #97	; 0x61
 8003754:	0018      	movs	r0, r3
 8003756:	f001 f9b7 	bl	8004ac8 <VL53L1_WrWord>
					0x0388);
			break;
 800375a:	e0a0      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800375c:	4a55      	ldr	r2, [pc, #340]	; (80038b4 <VL53L1X_SetTimingBudgetInMs+0x288>)
 800375e:	1dbb      	adds	r3, r7, #6
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	215e      	movs	r1, #94	; 0x5e
 8003764:	0018      	movs	r0, r3
 8003766:	f001 f9af 	bl	8004ac8 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800376a:	4a53      	ldr	r2, [pc, #332]	; (80038b8 <VL53L1X_SetTimingBudgetInMs+0x28c>)
 800376c:	1dbb      	adds	r3, r7, #6
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	2161      	movs	r1, #97	; 0x61
 8003772:	0018      	movs	r0, r3
 8003774:	f001 f9a8 	bl	8004ac8 <VL53L1_WrWord>
					0x0496);
			break;
 8003778:	e091      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800377a:	4a50      	ldr	r2, [pc, #320]	; (80038bc <VL53L1X_SetTimingBudgetInMs+0x290>)
 800377c:	1dbb      	adds	r3, r7, #6
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	215e      	movs	r1, #94	; 0x5e
 8003782:	0018      	movs	r0, r3
 8003784:	f001 f9a0 	bl	8004ac8 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003788:	4a4d      	ldr	r2, [pc, #308]	; (80038c0 <VL53L1X_SetTimingBudgetInMs+0x294>)
 800378a:	1dbb      	adds	r3, r7, #6
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	2161      	movs	r1, #97	; 0x61
 8003790:	0018      	movs	r0, r3
 8003792:	f001 f999 	bl	8004ac8 <VL53L1_WrWord>
					0x05C1);
			break;
 8003796:	e082      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8003798:	230f      	movs	r3, #15
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
			break;
 80037a0:	e07d      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		}
	} else {
		switch (TimingBudgetInMs) {
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	22fa      	movs	r2, #250	; 0xfa
 80037a8:	0052      	lsls	r2, r2, #1
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d100      	bne.n	80037b0 <VL53L1X_SetTimingBudgetInMs+0x184>
 80037ae:	e062      	b.n	8003876 <VL53L1X_SetTimingBudgetInMs+0x24a>
 80037b0:	22fa      	movs	r2, #250	; 0xfa
 80037b2:	0052      	lsls	r2, r2, #1
 80037b4:	4293      	cmp	r3, r2
 80037b6:	dd00      	ble.n	80037ba <VL53L1X_SetTimingBudgetInMs+0x18e>
 80037b8:	e06c      	b.n	8003894 <VL53L1X_SetTimingBudgetInMs+0x268>
 80037ba:	2bc8      	cmp	r3, #200	; 0xc8
 80037bc:	d04b      	beq.n	8003856 <VL53L1X_SetTimingBudgetInMs+0x22a>
 80037be:	dd00      	ble.n	80037c2 <VL53L1X_SetTimingBudgetInMs+0x196>
 80037c0:	e068      	b.n	8003894 <VL53L1X_SetTimingBudgetInMs+0x268>
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d036      	beq.n	8003834 <VL53L1X_SetTimingBudgetInMs+0x208>
 80037c6:	dd00      	ble.n	80037ca <VL53L1X_SetTimingBudgetInMs+0x19e>
 80037c8:	e064      	b.n	8003894 <VL53L1X_SetTimingBudgetInMs+0x268>
 80037ca:	2b32      	cmp	r3, #50	; 0x32
 80037cc:	d023      	beq.n	8003816 <VL53L1X_SetTimingBudgetInMs+0x1ea>
 80037ce:	dc61      	bgt.n	8003894 <VL53L1X_SetTimingBudgetInMs+0x268>
 80037d0:	2b14      	cmp	r3, #20
 80037d2:	d002      	beq.n	80037da <VL53L1X_SetTimingBudgetInMs+0x1ae>
 80037d4:	2b21      	cmp	r3, #33	; 0x21
 80037d6:	d00f      	beq.n	80037f8 <VL53L1X_SetTimingBudgetInMs+0x1cc>
 80037d8:	e05c      	b.n	8003894 <VL53L1X_SetTimingBudgetInMs+0x268>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80037da:	1dbb      	adds	r3, r7, #6
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	221e      	movs	r2, #30
 80037e0:	215e      	movs	r1, #94	; 0x5e
 80037e2:	0018      	movs	r0, r3
 80037e4:	f001 f970 	bl	8004ac8 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80037e8:	1dbb      	adds	r3, r7, #6
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	2222      	movs	r2, #34	; 0x22
 80037ee:	2161      	movs	r1, #97	; 0x61
 80037f0:	0018      	movs	r0, r3
 80037f2:	f001 f969 	bl	8004ac8 <VL53L1_WrWord>
					0x0022);
			break;
 80037f6:	e052      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80037f8:	1dbb      	adds	r3, r7, #6
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	2260      	movs	r2, #96	; 0x60
 80037fe:	215e      	movs	r1, #94	; 0x5e
 8003800:	0018      	movs	r0, r3
 8003802:	f001 f961 	bl	8004ac8 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003806:	1dbb      	adds	r3, r7, #6
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	226e      	movs	r2, #110	; 0x6e
 800380c:	2161      	movs	r1, #97	; 0x61
 800380e:	0018      	movs	r0, r3
 8003810:	f001 f95a 	bl	8004ac8 <VL53L1_WrWord>
					0x006E);
			break;
 8003814:	e043      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003816:	1dbb      	adds	r3, r7, #6
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	22ad      	movs	r2, #173	; 0xad
 800381c:	215e      	movs	r1, #94	; 0x5e
 800381e:	0018      	movs	r0, r3
 8003820:	f001 f952 	bl	8004ac8 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003824:	1dbb      	adds	r3, r7, #6
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	22c6      	movs	r2, #198	; 0xc6
 800382a:	2161      	movs	r1, #97	; 0x61
 800382c:	0018      	movs	r0, r3
 800382e:	f001 f94b 	bl	8004ac8 <VL53L1_WrWord>
					0x00C6);
			break;
 8003832:	e034      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003834:	23e6      	movs	r3, #230	; 0xe6
 8003836:	005a      	lsls	r2, r3, #1
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	215e      	movs	r1, #94	; 0x5e
 800383e:	0018      	movs	r0, r3
 8003840:	f001 f942 	bl	8004ac8 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003844:	23f5      	movs	r3, #245	; 0xf5
 8003846:	005a      	lsls	r2, r3, #1
 8003848:	1dbb      	adds	r3, r7, #6
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	2161      	movs	r1, #97	; 0x61
 800384e:	0018      	movs	r0, r3
 8003850:	f001 f93a 	bl	8004ac8 <VL53L1_WrWord>
					0x01EA);
			break;
 8003854:	e023      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <VL53L1X_SetTimingBudgetInMs+0x298>)
 8003858:	1dbb      	adds	r3, r7, #6
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	215e      	movs	r1, #94	; 0x5e
 800385e:	0018      	movs	r0, r3
 8003860:	f001 f932 	bl	8004ac8 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003864:	23be      	movs	r3, #190	; 0xbe
 8003866:	009a      	lsls	r2, r3, #2
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	2161      	movs	r1, #97	; 0x61
 800386e:	0018      	movs	r0, r3
 8003870:	f001 f92a 	bl	8004ac8 <VL53L1_WrWord>
					0x02F8);
			break;
 8003874:	e013      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8003876:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <VL53L1X_SetTimingBudgetInMs+0x29c>)
 8003878:	1dbb      	adds	r3, r7, #6
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	215e      	movs	r1, #94	; 0x5e
 800387e:	0018      	movs	r0, r3
 8003880:	f001 f922 	bl	8004ac8 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8003884:	4a11      	ldr	r2, [pc, #68]	; (80038cc <VL53L1X_SetTimingBudgetInMs+0x2a0>)
 8003886:	1dbb      	adds	r3, r7, #6
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	2161      	movs	r1, #97	; 0x61
 800388c:	0018      	movs	r0, r3
 800388e:	f001 f91b 	bl	8004ac8 <VL53L1_WrWord>
					0x04A4);
			break;
 8003892:	e004      	b.n	800389e <VL53L1X_SetTimingBudgetInMs+0x272>
		default:
			status = 1;
 8003894:	230f      	movs	r3, #15
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
			break;
 800389c:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 800389e:	230f      	movs	r3, #15
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b25b      	sxtb	r3, r3
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bdb0      	pop	{r4, r5, r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	000002e1 	.word	0x000002e1
 80038b4:	000003e1 	.word	0x000003e1
 80038b8:	00000496 	.word	0x00000496
 80038bc:	00000591 	.word	0x00000591
 80038c0:	000005c1 	.word	0x000005c1
 80038c4:	000002d9 	.word	0x000002d9
 80038c8:	0000048f 	.word	0x0000048f
 80038cc:	000004a4 	.word	0x000004a4

080038d0 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	0002      	movs	r2, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	1dbb      	adds	r3, r7, #6
 80038dc:	801a      	strh	r2, [r3, #0]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 80038de:	240f      	movs	r4, #15
 80038e0:	193b      	adds	r3, r7, r4
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 80038e6:	250c      	movs	r5, #12
 80038e8:	197a      	adds	r2, r7, r5
 80038ea:	1dbb      	adds	r3, r7, #6
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	215e      	movs	r1, #94	; 0x5e
 80038f0:	0018      	movs	r0, r3
 80038f2:	f001 f9b9 	bl	8004c68 <VL53L1_RdWord>
 80038f6:	0003      	movs	r3, r0
 80038f8:	0019      	movs	r1, r3
 80038fa:	193b      	adds	r3, r7, r4
 80038fc:	193a      	adds	r2, r7, r4
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	701a      	strb	r2, [r3, #0]
	switch (Temp) {
 8003904:	197b      	adds	r3, r7, r5
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	4a37      	ldr	r2, [pc, #220]	; (80039e8 <VL53L1X_GetTimingBudgetInMs+0x118>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d100      	bne.n	8003910 <VL53L1X_GetTimingBudgetInMs+0x40>
 800390e:	e057      	b.n	80039c0 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8003910:	4a35      	ldr	r2, [pc, #212]	; (80039e8 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8003912:	4293      	cmp	r3, r2
 8003914:	dd00      	ble.n	8003918 <VL53L1X_GetTimingBudgetInMs+0x48>
 8003916:	e058      	b.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003918:	4a34      	ldr	r2, [pc, #208]	; (80039ec <VL53L1X_GetTimingBudgetInMs+0x11c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d100      	bne.n	8003920 <VL53L1X_GetTimingBudgetInMs+0x50>
 800391e:	e04f      	b.n	80039c0 <VL53L1X_GetTimingBudgetInMs+0xf0>
 8003920:	2292      	movs	r2, #146	; 0x92
 8003922:	00d2      	lsls	r2, r2, #3
 8003924:	4293      	cmp	r3, r2
 8003926:	db00      	blt.n	800392a <VL53L1X_GetTimingBudgetInMs+0x5a>
 8003928:	e04f      	b.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 800392a:	4a31      	ldr	r2, [pc, #196]	; (80039f0 <VL53L1X_GetTimingBudgetInMs+0x120>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d043      	beq.n	80039b8 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8003930:	4a2f      	ldr	r2, [pc, #188]	; (80039f0 <VL53L1X_GetTimingBudgetInMs+0x120>)
 8003932:	4293      	cmp	r3, r2
 8003934:	dc49      	bgt.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003936:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <VL53L1X_GetTimingBudgetInMs+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d039      	beq.n	80039b0 <VL53L1X_GetTimingBudgetInMs+0xe0>
 800393c:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <VL53L1X_GetTimingBudgetInMs+0x124>)
 800393e:	4293      	cmp	r3, r2
 8003940:	dc43      	bgt.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003942:	4a2d      	ldr	r2, [pc, #180]	; (80039f8 <VL53L1X_GetTimingBudgetInMs+0x128>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d037      	beq.n	80039b8 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8003948:	4a2b      	ldr	r2, [pc, #172]	; (80039f8 <VL53L1X_GetTimingBudgetInMs+0x128>)
 800394a:	4293      	cmp	r3, r2
 800394c:	dc3d      	bgt.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 800394e:	22e6      	movs	r2, #230	; 0xe6
 8003950:	0052      	lsls	r2, r2, #1
 8003952:	4293      	cmp	r3, r2
 8003954:	d02c      	beq.n	80039b0 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8003956:	22e6      	movs	r2, #230	; 0xe6
 8003958:	0052      	lsls	r2, r2, #1
 800395a:	4293      	cmp	r3, r2
 800395c:	dc35      	bgt.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 800395e:	22d7      	movs	r2, #215	; 0xd7
 8003960:	0052      	lsls	r2, r2, #1
 8003962:	4293      	cmp	r3, r2
 8003964:	d020      	beq.n	80039a8 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8003966:	22d7      	movs	r2, #215	; 0xd7
 8003968:	0052      	lsls	r2, r2, #1
 800396a:	4293      	cmp	r3, r2
 800396c:	dc2d      	bgt.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 800396e:	2bd6      	cmp	r3, #214	; 0xd6
 8003970:	d016      	beq.n	80039a0 <VL53L1X_GetTimingBudgetInMs+0xd0>
 8003972:	dc2a      	bgt.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003974:	2bad      	cmp	r3, #173	; 0xad
 8003976:	d017      	beq.n	80039a8 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8003978:	dc27      	bgt.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 800397a:	2b60      	cmp	r3, #96	; 0x60
 800397c:	d010      	beq.n	80039a0 <VL53L1X_GetTimingBudgetInMs+0xd0>
 800397e:	dc24      	bgt.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003980:	2b51      	cmp	r3, #81	; 0x51
 8003982:	d009      	beq.n	8003998 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8003984:	dc21      	bgt.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
 8003986:	2b1d      	cmp	r3, #29
 8003988:	d002      	beq.n	8003990 <VL53L1X_GetTimingBudgetInMs+0xc0>
 800398a:	2b1e      	cmp	r3, #30
 800398c:	d004      	beq.n	8003998 <VL53L1X_GetTimingBudgetInMs+0xc8>
 800398e:	e01c      	b.n	80039ca <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x001D :
			*pTimingBudget = 15;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	220f      	movs	r2, #15
 8003994:	801a      	strh	r2, [r3, #0]
			break;
 8003996:	e01f      	b.n	80039d8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2214      	movs	r2, #20
 800399c:	801a      	strh	r2, [r3, #0]
			break;
 800399e:	e01b      	b.n	80039d8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2221      	movs	r2, #33	; 0x21
 80039a4:	801a      	strh	r2, [r3, #0]
			break;
 80039a6:	e017      	b.n	80039d8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2232      	movs	r2, #50	; 0x32
 80039ac:	801a      	strh	r2, [r3, #0]
			break;
 80039ae:	e013      	b.n	80039d8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2264      	movs	r2, #100	; 0x64
 80039b4:	801a      	strh	r2, [r3, #0]
			break;
 80039b6:	e00f      	b.n	80039d8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	22c8      	movs	r2, #200	; 0xc8
 80039bc:	801a      	strh	r2, [r3, #0]
			break;
 80039be:	e00b      	b.n	80039d8 <VL53L1X_GetTimingBudgetInMs+0x108>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	22fa      	movs	r2, #250	; 0xfa
 80039c4:	0052      	lsls	r2, r2, #1
 80039c6:	801a      	strh	r2, [r3, #0]
			break;
 80039c8:	e006      	b.n	80039d8 <VL53L1X_GetTimingBudgetInMs+0x108>
		default:
			status = 1;
 80039ca:	230f      	movs	r3, #15
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
			*pTimingBudget = 0;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2200      	movs	r2, #0
 80039d6:	801a      	strh	r2, [r3, #0]
	}
	return status;
 80039d8:	230f      	movs	r3, #15
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b25b      	sxtb	r3, r3
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b004      	add	sp, #16
 80039e6:	bdb0      	pop	{r4, r5, r7, pc}
 80039e8:	00000591 	.word	0x00000591
 80039ec:	0000048f 	.word	0x0000048f
 80039f0:	000003e1 	.word	0x000003e1
 80039f4:	000002e1 	.word	0x000002e1
 80039f8:	000002d9 	.word	0x000002d9

080039fc <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 80039fc:	b5b0      	push	{r4, r5, r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	0002      	movs	r2, r0
 8003a04:	1dbb      	adds	r3, r7, #6
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	1c0a      	adds	r2, r1, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8003a0e:	240f      	movs	r4, #15
 8003a10:	193b      	adds	r3, r7, r4
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8003a16:	230c      	movs	r3, #12
 8003a18:	18fa      	adds	r2, r7, r3
 8003a1a:	1dbb      	adds	r3, r7, #6
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	0011      	movs	r1, r2
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7ff ff55 	bl	80038d0 <VL53L1X_GetTimingBudgetInMs>
 8003a26:	0003      	movs	r3, r0
 8003a28:	0019      	movs	r1, r3
 8003a2a:	193b      	adds	r3, r7, r4
 8003a2c:	193a      	adds	r2, r7, r4
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	701a      	strb	r2, [r3, #0]
	if (status != 0)
 8003a34:	193b      	adds	r3, r7, r4
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <VL53L1X_SetDistanceMode+0x46>
		return 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0a1      	b.n	8003b86 <VL53L1X_SetDistanceMode+0x18a>
	switch (DM) {
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d002      	beq.n	8003a50 <VL53L1X_SetDistanceMode+0x54>
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d03e      	beq.n	8003acc <VL53L1X_SetDistanceMode+0xd0>
 8003a4e:	e07b      	b.n	8003b48 <VL53L1X_SetDistanceMode+0x14c>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8003a50:	250f      	movs	r5, #15
 8003a52:	197c      	adds	r4, r7, r5
 8003a54:	1dbb      	adds	r3, r7, #6
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	2214      	movs	r2, #20
 8003a5a:	214b      	movs	r1, #75	; 0x4b
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 fff7 	bl	8004a50 <VL53L1_WrByte>
 8003a62:	0003      	movs	r3, r0
 8003a64:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8003a66:	197c      	adds	r4, r7, r5
 8003a68:	1dbb      	adds	r3, r7, #6
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	2160      	movs	r1, #96	; 0x60
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 ffed 	bl	8004a50 <VL53L1_WrByte>
 8003a76:	0003      	movs	r3, r0
 8003a78:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8003a7a:	197c      	adds	r4, r7, r5
 8003a7c:	1dbb      	adds	r3, r7, #6
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	2205      	movs	r2, #5
 8003a82:	2163      	movs	r1, #99	; 0x63
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 ffe3 	bl	8004a50 <VL53L1_WrByte>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8003a8e:	197c      	adds	r4, r7, r5
 8003a90:	1dbb      	adds	r3, r7, #6
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	2238      	movs	r2, #56	; 0x38
 8003a96:	2169      	movs	r1, #105	; 0x69
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 ffd9 	bl	8004a50 <VL53L1_WrByte>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8003aa2:	197c      	adds	r4, r7, r5
 8003aa4:	4a3a      	ldr	r2, [pc, #232]	; (8003b90 <VL53L1X_SetDistanceMode+0x194>)
 8003aa6:	1dbb      	adds	r3, r7, #6
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	2178      	movs	r1, #120	; 0x78
 8003aac:	0018      	movs	r0, r3
 8003aae:	f001 f80b 	bl	8004ac8 <VL53L1_WrWord>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8003ab6:	197c      	adds	r4, r7, r5
 8003ab8:	4a36      	ldr	r2, [pc, #216]	; (8003b94 <VL53L1X_SetDistanceMode+0x198>)
 8003aba:	1dbb      	adds	r3, r7, #6
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	217a      	movs	r1, #122	; 0x7a
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f001 f801 	bl	8004ac8 <VL53L1_WrWord>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	7023      	strb	r3, [r4, #0]
		break;
 8003aca:	e042      	b.n	8003b52 <VL53L1X_SetDistanceMode+0x156>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8003acc:	250f      	movs	r5, #15
 8003ace:	197c      	adds	r4, r7, r5
 8003ad0:	1dbb      	adds	r3, r7, #6
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	220a      	movs	r2, #10
 8003ad6:	214b      	movs	r1, #75	; 0x4b
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f000 ffb9 	bl	8004a50 <VL53L1_WrByte>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8003ae2:	197c      	adds	r4, r7, r5
 8003ae4:	1dbb      	adds	r3, r7, #6
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	220f      	movs	r2, #15
 8003aea:	2160      	movs	r1, #96	; 0x60
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 ffaf 	bl	8004a50 <VL53L1_WrByte>
 8003af2:	0003      	movs	r3, r0
 8003af4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8003af6:	197c      	adds	r4, r7, r5
 8003af8:	1dbb      	adds	r3, r7, #6
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	220d      	movs	r2, #13
 8003afe:	2163      	movs	r1, #99	; 0x63
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 ffa5 	bl	8004a50 <VL53L1_WrByte>
 8003b06:	0003      	movs	r3, r0
 8003b08:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8003b0a:	197c      	adds	r4, r7, r5
 8003b0c:	1dbb      	adds	r3, r7, #6
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	22b8      	movs	r2, #184	; 0xb8
 8003b12:	2169      	movs	r1, #105	; 0x69
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 ff9b 	bl	8004a50 <VL53L1_WrByte>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8003b1e:	197c      	adds	r4, r7, r5
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <VL53L1X_SetDistanceMode+0x19c>)
 8003b22:	1dbb      	adds	r3, r7, #6
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2178      	movs	r1, #120	; 0x78
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f000 ffcd 	bl	8004ac8 <VL53L1_WrWord>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8003b32:	197c      	adds	r4, r7, r5
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <VL53L1X_SetDistanceMode+0x1a0>)
 8003b36:	1dbb      	adds	r3, r7, #6
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	217a      	movs	r1, #122	; 0x7a
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 ffc3 	bl	8004ac8 <VL53L1_WrWord>
 8003b42:	0003      	movs	r3, r0
 8003b44:	7023      	strb	r3, [r4, #0]
		break;
 8003b46:	e004      	b.n	8003b52 <VL53L1X_SetDistanceMode+0x156>
	default:
		status = 1;
 8003b48:	230f      	movs	r3, #15
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
		break;
 8003b50:	46c0      	nop			; (mov r8, r8)
	}

	if (status == 0)
 8003b52:	240f      	movs	r4, #15
 8003b54:	193b      	adds	r3, r7, r4
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <VL53L1X_SetDistanceMode+0x182>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 8003b5e:	230c      	movs	r3, #12
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	881a      	ldrh	r2, [r3, #0]
 8003b64:	1dbb      	adds	r3, r7, #6
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7ff fd5e 	bl	800362c <VL53L1X_SetTimingBudgetInMs>
 8003b70:	0003      	movs	r3, r0
 8003b72:	0019      	movs	r1, r3
 8003b74:	193b      	adds	r3, r7, r4
 8003b76:	193a      	adds	r2, r7, r4
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	701a      	strb	r2, [r3, #0]
	return status;
 8003b7e:	230f      	movs	r3, #15
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	b25b      	sxtb	r3, r3
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b004      	add	sp, #16
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	00000705 	.word	0x00000705
 8003b94:	00000606 	.word	0x00000606
 8003b98:	00000f0d 	.word	0x00000f0d
 8003b9c:	00000e0e 	.word	0x00000e0e

08003ba0 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8003ba0:	b5b0      	push	{r4, r5, r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	6039      	str	r1, [r7, #0]
 8003baa:	1dbb      	adds	r3, r7, #6
 8003bac:	801a      	strh	r2, [r3, #0]
	uint8_t TempDM, status=0;
 8003bae:	240f      	movs	r4, #15
 8003bb0:	193b      	adds	r3, r7, r4
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8003bb6:	250e      	movs	r5, #14
 8003bb8:	197a      	adds	r2, r7, r5
 8003bba:	1dbb      	adds	r3, r7, #6
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	214b      	movs	r1, #75	; 0x4b
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f001 f80b 	bl	8004bdc <VL53L1_RdByte>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	001a      	movs	r2, r3
 8003bca:	193b      	adds	r3, r7, r4
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	b25a      	sxtb	r2, r3
 8003bd4:	193b      	adds	r3, r7, r4
 8003bd6:	701a      	strb	r2, [r3, #0]
	if (TempDM == 0x14)
 8003bd8:	197b      	adds	r3, r7, r5
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b14      	cmp	r3, #20
 8003bde:	d102      	bne.n	8003be6 <VL53L1X_GetDistanceMode+0x46>
		*DM=1;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2201      	movs	r2, #1
 8003be4:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8003be6:	230e      	movs	r3, #14
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b0a      	cmp	r3, #10
 8003bee:	d102      	bne.n	8003bf6 <VL53L1X_GetDistanceMode+0x56>
		*DM=2;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	801a      	strh	r2, [r3, #0]
	return status;
 8003bf6:	230f      	movs	r3, #15
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	b25b      	sxtb	r3, r3
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b004      	add	sp, #16
 8003c04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003c08 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8003c08:	b5b0      	push	{r4, r5, r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	0002      	movs	r2, r0
 8003c10:	6039      	str	r1, [r7, #0]
 8003c12:	1dbb      	adds	r3, r7, #6
 8003c14:	801a      	strh	r2, [r3, #0]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8003c16:	240f      	movs	r4, #15
 8003c18:	193b      	adds	r3, r7, r4
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8003c1e:	250c      	movs	r5, #12
 8003c20:	197a      	adds	r2, r7, r5
 8003c22:	1dbb      	adds	r3, r7, #6
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	21de      	movs	r1, #222	; 0xde
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f001 f81d 	bl	8004c68 <VL53L1_RdWord>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	0019      	movs	r1, r3
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	193a      	adds	r2, r7, r4
 8003c36:	7812      	ldrb	r2, [r2, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	701a      	strb	r2, [r3, #0]
	ClockPLL = ClockPLL&0x3FF;
 8003c3c:	197b      	adds	r3, r7, r5
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	059b      	lsls	r3, r3, #22
 8003c42:	0d9b      	lsrs	r3, r3, #22
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	197b      	adds	r3, r7, r5
 8003c48:	801a      	strh	r2, [r3, #0]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8003c4a:	197b      	adds	r3, r7, r5
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	001a      	movs	r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	4353      	muls	r3, r2
 8003c54:	0018      	movs	r0, r3
 8003c56:	f7ff fa5b 	bl	8003110 <__aeabi_ui2d>
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <VL53L1X_SetInterMeasurementInMs+0x84>)
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <VL53L1X_SetInterMeasurementInMs+0x88>)
 8003c5e:	f7fe fbd5 	bl	800240c <__aeabi_dmul>
 8003c62:	0002      	movs	r2, r0
 8003c64:	000b      	movs	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8003c66:	0010      	movs	r0, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	f7fc fcbd 	bl	80005e8 <__aeabi_d2uiz>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	1dbb      	adds	r3, r7, #6
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	216c      	movs	r1, #108	; 0x6c
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 ff6a 	bl	8004b50 <VL53L1_WrDWord>
	return status;
 8003c7c:	193b      	adds	r3, r7, r4
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b25b      	sxtb	r3, r3

}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b004      	add	sp, #16
 8003c88:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	33333333 	.word	0x33333333
 8003c90:	3ff13333 	.word	0x3ff13333

08003c94 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8003c94:	b5b0      	push	{r4, r5, r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	6039      	str	r1, [r7, #0]
 8003c9e:	1dbb      	adds	r3, r7, #6
 8003ca0:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003ca2:	240f      	movs	r4, #15
 8003ca4:	193b      	adds	r3, r7, r4
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 8003caa:	250e      	movs	r5, #14
 8003cac:	197b      	adds	r3, r7, r5
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8003cb2:	197a      	adds	r2, r7, r5
 8003cb4:	1dbb      	adds	r3, r7, #6
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	21e5      	movs	r1, #229	; 0xe5
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f000 ff8e 	bl	8004bdc <VL53L1_RdByte>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	193b      	adds	r3, r7, r4
 8003cc6:	193a      	adds	r2, r7, r4
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	701a      	strb	r2, [r3, #0]
	*state = tmp;
 8003cce:	197b      	adds	r3, r7, r5
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	701a      	strb	r2, [r3, #0]
	return status;
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b25b      	sxtb	r3, r3
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bdb0      	pop	{r4, r5, r7, pc}

08003ce4 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8003ce4:	b5b0      	push	{r4, r5, r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	0002      	movs	r2, r0
 8003cec:	6039      	str	r1, [r7, #0]
 8003cee:	1dbb      	adds	r3, r7, #6
 8003cf0:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003cf2:	240f      	movs	r4, #15
 8003cf4:	193b      	adds	r3, r7, r4
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8003cfa:	250c      	movs	r5, #12
 8003cfc:	197a      	adds	r2, r7, r5
 8003cfe:	1dbb      	adds	r3, r7, #6
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	2196      	movs	r1, #150	; 0x96
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 ffaf 	bl	8004c68 <VL53L1_RdWord>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	0020      	movs	r0, r4
 8003d10:	183b      	adds	r3, r7, r0
 8003d12:	183a      	adds	r2, r7, r0
 8003d14:	7812      	ldrb	r2, [r2, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8003d1a:	197b      	adds	r3, r7, r5
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	801a      	strh	r2, [r3, #0]
	return status;
 8003d22:	183b      	adds	r3, r7, r0
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b25b      	sxtb	r3, r3
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b004      	add	sp, #16
 8003d2e:	bdb0      	pop	{r4, r5, r7, pc}

08003d30 <IR_Init>:
#define dev 0x52  // address of IR distance sensor



void IR_Init()
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
	uint8_t sensorState=0;
 8003d36:	1dfb      	adds	r3, r7, #7
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
	 while(sensorState==0){
 8003d3c:	e007      	b.n	8003d4e <IR_Init+0x1e>
			VL53L1X_BootState(dev, &sensorState);
 8003d3e:	1dfb      	adds	r3, r7, #7
 8003d40:	0019      	movs	r1, r3
 8003d42:	2052      	movs	r0, #82	; 0x52
 8003d44:	f7ff ffa6 	bl	8003c94 <VL53L1X_BootState>
		HAL_Delay(2);
 8003d48:	2002      	movs	r0, #2
 8003d4a:	f001 f879 	bl	8004e40 <HAL_Delay>
	 while(sensorState==0){
 8003d4e:	1dfb      	adds	r3, r7, #7
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f3      	beq.n	8003d3e <IR_Init+0xe>
	  }


	  /* This function must to be called to initialize the sensor with the default setting  */
	  VL53L1X_SensorInit(dev);
 8003d56:	2052      	movs	r0, #82	; 0x52
 8003d58:	f7ff fafa 	bl	8003350 <VL53L1X_SensorInit>
	  /* Optional functions to be used to change the main ranging parameters according the application requirements to get the best ranging performances */
	  VL53L1X_SetDistanceMode(dev, 1); /* 1=short, 2=long */
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	2052      	movs	r0, #82	; 0x52
 8003d60:	f7ff fe4c 	bl	80039fc <VL53L1X_SetDistanceMode>
	  VL53L1X_SetTimingBudgetInMs(dev, 100); /* in ms possible values [20, 50, 100, 200, 500] */
 8003d64:	2164      	movs	r1, #100	; 0x64
 8003d66:	2052      	movs	r0, #82	; 0x52
 8003d68:	f7ff fc60 	bl	800362c <VL53L1X_SetTimingBudgetInMs>
	  VL53L1X_SetInterMeasurementInMs(dev, 100); /* in ms, IM must be > = TB */
 8003d6c:	2164      	movs	r1, #100	; 0x64
 8003d6e:	2052      	movs	r0, #82	; 0x52
 8003d70:	f7ff ff4a 	bl	8003c08 <VL53L1X_SetInterMeasurementInMs>
	//  status = VL53L1X_SetOffset(dev,20); /* offset compensation in mm */
	//  status = VL53L1X_SetROI(dev, 16, 16); /* minimum ROI 4,4 */
	//	status = VL53L1X_CalibrateOffset(dev, 140, &offset); /* may take few second to perform the offset cal*/
	//	status = VL53L1X_CalibrateXtalk(dev, 1000, &xtalk); /* may take few second to perform the xtalk cal */
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <IR_Get_Distance>:


uint16_t IR_Get_Distance()
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
	uint8_t sensorState=0;
 8003d82:	1dfb      	adds	r3, r7, #7
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
//	if(VL53L1X_BootState(dev, &sensorState)==0)
//	{
//		return 1;
//	}

	VL53L1X_StartRanging(dev);
 8003d88:	2052      	movs	r0, #82	; 0x52
 8003d8a:	f7ff fbcb 	bl	8003524 <VL53L1X_StartRanging>

	while (dataReady == 0){
 8003d8e:	e007      	b.n	8003da0 <IR_Get_Distance+0x24>
			  VL53L1X_CheckForDataReady(dev, &dataReady);
 8003d90:	1cfb      	adds	r3, r7, #3
 8003d92:	0019      	movs	r1, r3
 8003d94:	2052      	movs	r0, #82	; 0x52
 8003d96:	f7ff fc03 	bl	80035a0 <VL53L1X_CheckForDataReady>
			  HAL_Delay(2);
 8003d9a:	2002      	movs	r0, #2
 8003d9c:	f001 f850 	bl	8004e40 <HAL_Delay>
	while (dataReady == 0){
 8003da0:	1cfb      	adds	r3, r7, #3
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f3      	beq.n	8003d90 <IR_Get_Distance+0x14>
		  }
		  dataReady = 0;
 8003da8:	1cfb      	adds	r3, r7, #3
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
		  VL53L1X_GetDistance(dev, &Distance);
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	0019      	movs	r1, r3
 8003db2:	2052      	movs	r0, #82	; 0x52
 8003db4:	f7ff ff96 	bl	8003ce4 <VL53L1X_GetDistance>

		  VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt*/
 8003db8:	2052      	movs	r0, #82	; 0x52
 8003dba:	f7ff fb61 	bl	8003480 <VL53L1X_ClearInterrupt>
		  VL53L1X_StopRanging(dev);
 8003dbe:	2052      	movs	r0, #82	; 0x52
 8003dc0:	f7ff fbcf 	bl	8003562 <VL53L1X_StopRanging>
		  return Distance;
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	881b      	ldrh	r3, [r3, #0]
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003dd0:	b590      	push	{r4, r7, lr}
 8003dd2:	b089      	sub	sp, #36	; 0x24
 8003dd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd6:	240c      	movs	r4, #12
 8003dd8:	193b      	adds	r3, r7, r4
 8003dda:	0018      	movs	r0, r3
 8003ddc:	2314      	movs	r3, #20
 8003dde:	001a      	movs	r2, r3
 8003de0:	2100      	movs	r1, #0
 8003de2:	f004 fb54 	bl	800848e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <MX_GPIO_Init+0xc0>)
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <MX_GPIO_Init+0xc0>)
 8003dec:	2104      	movs	r1, #4
 8003dee:	430a      	orrs	r2, r1
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003df2:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <MX_GPIO_Init+0xc0>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	2204      	movs	r2, #4
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <MX_GPIO_Init+0xc0>)
 8003e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <MX_GPIO_Init+0xc0>)
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	430a      	orrs	r2, r1
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <MX_GPIO_Init+0xc0>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	4013      	ands	r3, r2
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <MX_GPIO_Init+0xc0>)
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <MX_GPIO_Init+0xc0>)
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <MX_GPIO_Init+0xc0>)
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	2201      	movs	r2, #1
 8003e28:	4013      	ands	r3, r2
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003e2e:	23a0      	movs	r3, #160	; 0xa0
 8003e30:	05db      	lsls	r3, r3, #23
 8003e32:	2200      	movs	r2, #0
 8003e34:	2120      	movs	r1, #32
 8003e36:	0018      	movs	r0, r3
 8003e38:	f001 fa82 	bl	8005340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e3c:	193b      	adds	r3, r7, r4
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	0192      	lsls	r2, r2, #6
 8003e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e44:	193b      	adds	r3, r7, r4
 8003e46:	2284      	movs	r2, #132	; 0x84
 8003e48:	0392      	lsls	r2, r2, #14
 8003e4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	193b      	adds	r3, r7, r4
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e52:	193b      	adds	r3, r7, r4
 8003e54:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <MX_GPIO_Init+0xc4>)
 8003e56:	0019      	movs	r1, r3
 8003e58:	0010      	movs	r0, r2
 8003e5a:	f001 f8f3 	bl	8005044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003e5e:	0021      	movs	r1, r4
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	2220      	movs	r2, #32
 8003e64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	2201      	movs	r2, #1
 8003e6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2200      	movs	r2, #0
 8003e76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003e78:	187a      	adds	r2, r7, r1
 8003e7a:	23a0      	movs	r3, #160	; 0xa0
 8003e7c:	05db      	lsls	r3, r3, #23
 8003e7e:	0011      	movs	r1, r2
 8003e80:	0018      	movs	r0, r3
 8003e82:	f001 f8df 	bl	8005044 <HAL_GPIO_Init>

}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b009      	add	sp, #36	; 0x24
 8003e8c:	bd90      	pop	{r4, r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	40021000 	.word	0x40021000
 8003e94:	50000800 	.word	0x50000800

08003e98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <MX_I2C1_Init+0x78>)
 8003ea0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003ea4:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <MX_I2C1_Init+0x7c>)
 8003ea6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003ea8:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003eb4:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ec6:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f001 fa51 	bl	800537c <HAL_I2C_Init>
 8003eda:	1e03      	subs	r3, r0, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ede:	f000 fa87 	bl	80043f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f001 fee6 	bl	8005cb8 <HAL_I2CEx_ConfigAnalogFilter>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ef0:	f000 fa7e 	bl	80043f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <MX_I2C1_Init+0x74>)
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f001 ff29 	bl	8005d50 <HAL_I2CEx_ConfigDigitalFilter>
 8003efe:	1e03      	subs	r3, r0, #0
 8003f00:	d001      	beq.n	8003f06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003f02:	f000 fa75 	bl	80043f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000200 	.word	0x20000200
 8003f10:	40005400 	.word	0x40005400
 8003f14:	00707cbb 	.word	0x00707cbb

08003f18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b089      	sub	sp, #36	; 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	240c      	movs	r4, #12
 8003f22:	193b      	adds	r3, r7, r4
 8003f24:	0018      	movs	r0, r3
 8003f26:	2314      	movs	r3, #20
 8003f28:	001a      	movs	r2, r3
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	f004 faaf 	bl	800848e <memset>
  if(i2cHandle->Instance==I2C1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <HAL_I2C_MspInit+0x80>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d12a      	bne.n	8003f90 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_I2C_MspInit+0x84>)
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <HAL_I2C_MspInit+0x84>)
 8003f40:	2101      	movs	r1, #1
 8003f42:	430a      	orrs	r2, r1
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_I2C_MspInit+0x84>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f52:	193b      	adds	r3, r7, r4
 8003f54:	22c0      	movs	r2, #192	; 0xc0
 8003f56:	00d2      	lsls	r2, r2, #3
 8003f58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f5a:	0021      	movs	r1, r4
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	2212      	movs	r2, #18
 8003f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2201      	movs	r2, #1
 8003f66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2206      	movs	r2, #6
 8003f72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f74:	187a      	adds	r2, r7, r1
 8003f76:	23a0      	movs	r3, #160	; 0xa0
 8003f78:	05db      	lsls	r3, r3, #23
 8003f7a:	0011      	movs	r1, r2
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f001 f861 	bl	8005044 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_I2C_MspInit+0x84>)
 8003f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_I2C_MspInit+0x84>)
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	0389      	lsls	r1, r1, #14
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b009      	add	sp, #36	; 0x24
 8003f96:	bd90      	pop	{r4, r7, pc}
 8003f98:	40005400 	.word	0x40005400
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fa6:	f000 fedb 	bl	8004d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003faa:	f000 f89d 	bl	80040e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fae:	f7ff ff0f 	bl	8003dd0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003fb2:	f7ff ff71 	bl	8003e98 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003fb6:	f000 fc91 	bl	80048dc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003fba:	f000 fb49 	bl	8004650 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003fbe:	f000 fb9b 	bl	80046f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003fc2:	4b3c      	ldr	r3, [pc, #240]	; (80040b4 <main+0x114>)
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f002 ff02 	bl	8006dd0 <HAL_TIM_PWM_Start>
 // HAL_TIM_Base_Start_IT(&htim2);
  set_ang(850);
 8003fcc:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <main+0x118>)
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 fa14 	bl	80043fc <set_ang>

  //bma_init();
  IR_Init();
 8003fd4:	f7ff feac 	bl	8003d30 <IR_Init>

  //PID VARIABLES INIT
  PID.Kd =300.0; // 700
 8003fd8:	4b38      	ldr	r3, [pc, #224]	; (80040bc <main+0x11c>)
 8003fda:	4a39      	ldr	r2, [pc, #228]	; (80040c0 <main+0x120>)
 8003fdc:	609a      	str	r2, [r3, #8]
  PID.Ki = 0.1;
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <main+0x11c>)
 8003fe0:	4a38      	ldr	r2, [pc, #224]	; (80040c4 <main+0x124>)
 8003fe2:	60da      	str	r2, [r3, #12]
  PID.Kp = 0.4; // 1.5 ustawione bylo
 8003fe4:	4b35      	ldr	r3, [pc, #212]	; (80040bc <main+0x11c>)
 8003fe6:	4a38      	ldr	r2, [pc, #224]	; (80040c8 <main+0x128>)
 8003fe8:	605a      	str	r2, [r3, #4]
  PID.time_old = HAL_GetTick();
 8003fea:	f000 ff1f 	bl	8004e2c <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	4b32      	ldr	r3, [pc, #200]	; (80040bc <main+0x11c>)
 8003ff2:	611a      	str	r2, [r3, #16]
  PID.set_point = 180;
 8003ff4:	4b31      	ldr	r3, [pc, #196]	; (80040bc <main+0x11c>)
 8003ff6:	22b4      	movs	r2, #180	; 0xb4
 8003ff8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 data_recdist = IR_Get_Distance();
 8003ffa:	f7ff febf 	bl	8003d7c <IR_Get_Distance>
 8003ffe:	0003      	movs	r3, r0
 8004000:	001a      	movs	r2, r3
 8004002:	4b32      	ldr	r3, [pc, #200]	; (80040cc <main+0x12c>)
 8004004:	801a      	strh	r2, [r3, #0]
	 //dist_sample = (float) IR_Get_Distance();

	 //dist_avg_new = ((n-1)/n) * dist_avg_old + ((1/n) * dist_sample);

	 //dist_avg_old = dist_avg_new;
	 PIDRegulator(data_recdist, &PID);
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <main+0x12c>)
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	4a2c      	ldr	r2, [pc, #176]	; (80040bc <main+0x11c>)
 800400c:	0011      	movs	r1, r2
 800400e:	0018      	movs	r0, r3
 8004010:	f000 f8e0 	bl	80041d4 <PIDRegulator>

	 //
	 // uart test
	// uint16_t temp;
	 //temp = CalculateAngle(PID.PID_total);
	 sprintf((char*)msg," PID_total %f  , Dist %d, Dist avg %f\n ",  PID.PID_total,  data_recdist, dist_avg_new);
 8004014:	4b29      	ldr	r3, [pc, #164]	; (80040bc <main+0x11c>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	1c18      	adds	r0, r3, #0
 800401a:	f7ff f89f 	bl	800315c <__aeabi_f2d>
 800401e:	0004      	movs	r4, r0
 8004020:	000d      	movs	r5, r1
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <main+0x12c>)
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	001e      	movs	r6, r3
 8004028:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <main+0x130>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	1c18      	adds	r0, r3, #0
 800402e:	f7ff f895 	bl	800315c <__aeabi_f2d>
 8004032:	0002      	movs	r2, r0
 8004034:	000b      	movs	r3, r1
 8004036:	4927      	ldr	r1, [pc, #156]	; (80040d4 <main+0x134>)
 8004038:	4827      	ldr	r0, [pc, #156]	; (80040d8 <main+0x138>)
 800403a:	9202      	str	r2, [sp, #8]
 800403c:	9303      	str	r3, [sp, #12]
 800403e:	9600      	str	r6, [sp, #0]
 8004040:	0022      	movs	r2, r4
 8004042:	002b      	movs	r3, r5
 8004044:	f004 fe9a 	bl	8008d7c <siprintf>


	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),1000);
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <main+0x138>)
 800404a:	0018      	movs	r0, r3
 800404c:	f7fc f85c 	bl	8000108 <strlen>
 8004050:	0003      	movs	r3, r0
 8004052:	b29a      	uxth	r2, r3
 8004054:	23fa      	movs	r3, #250	; 0xfa
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	491f      	ldr	r1, [pc, #124]	; (80040d8 <main+0x138>)
 800405a:	4820      	ldr	r0, [pc, #128]	; (80040dc <main+0x13c>)
 800405c:	f003 fcdc 	bl	8007a18 <HAL_UART_Transmit>
//		HAL_Delay(2000);
//		__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, 2600);
//	 HAL_Delay(1000);
//
//
	 if(data_recdist > 150){
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <main+0x12c>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	2b96      	cmp	r3, #150	; 0x96
 8004066:	d909      	bls.n	800407c <main+0xdc>
		 set_ang(CalculateAngle(PID.PID_total));
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <main+0x11c>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	1c18      	adds	r0, r3, #0
 800406e:	f000 f95b 	bl	8004328 <CalculateAngle>
 8004072:	0003      	movs	r3, r0
 8004074:	0018      	movs	r0, r3
 8004076:	f000 f9c1 	bl	80043fc <set_ang>
 800407a:	e7be      	b.n	8003ffa <main+0x5a>
	 }
	 else{
		 PID.PID_total=PID.PID_total*0.65;
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <main+0x11c>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	1c18      	adds	r0, r3, #0
 8004082:	f7ff f86b 	bl	800315c <__aeabi_f2d>
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <main+0x140>)
 8004088:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <main+0x144>)
 800408a:	f7fe f9bf 	bl	800240c <__aeabi_dmul>
 800408e:	0002      	movs	r2, r0
 8004090:	000b      	movs	r3, r1
 8004092:	0010      	movs	r0, r2
 8004094:	0019      	movs	r1, r3
 8004096:	f7ff f8a9 	bl	80031ec <__aeabi_d2f>
 800409a:	1c02      	adds	r2, r0, #0
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <main+0x11c>)
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
		 set_ang(CalculateAngle(PID.PID_total));
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <main+0x11c>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	1c18      	adds	r0, r3, #0
 80040a6:	f000 f93f 	bl	8004328 <CalculateAngle>
 80040aa:	0003      	movs	r3, r0
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 f9a5 	bl	80043fc <set_ang>
	 data_recdist = IR_Get_Distance();
 80040b2:	e7a2      	b.n	8003ffa <main+0x5a>
 80040b4:	20000308 	.word	0x20000308
 80040b8:	00000352 	.word	0x00000352
 80040bc:	20000250 	.word	0x20000250
 80040c0:	43960000 	.word	0x43960000
 80040c4:	3dcccccd 	.word	0x3dcccccd
 80040c8:	3ecccccd 	.word	0x3ecccccd
 80040cc:	2000024c 	.word	0x2000024c
 80040d0:	20000000 	.word	0x20000000
 80040d4:	0800b3e0 	.word	0x0800b3e0
 80040d8:	20000284 	.word	0x20000284
 80040dc:	20000348 	.word	0x20000348
 80040e0:	cccccccd 	.word	0xcccccccd
 80040e4:	3fe4cccc 	.word	0x3fe4cccc

080040e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b09f      	sub	sp, #124	; 0x7c
 80040ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ee:	2440      	movs	r4, #64	; 0x40
 80040f0:	193b      	adds	r3, r7, r4
 80040f2:	0018      	movs	r0, r3
 80040f4:	2338      	movs	r3, #56	; 0x38
 80040f6:	001a      	movs	r2, r3
 80040f8:	2100      	movs	r1, #0
 80040fa:	f004 f9c8 	bl	800848e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040fe:	232c      	movs	r3, #44	; 0x2c
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	0018      	movs	r0, r3
 8004104:	2314      	movs	r3, #20
 8004106:	001a      	movs	r2, r3
 8004108:	2100      	movs	r1, #0
 800410a:	f004 f9c0 	bl	800848e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	0018      	movs	r0, r3
 8004112:	2328      	movs	r3, #40	; 0x28
 8004114:	001a      	movs	r2, r3
 8004116:	2100      	movs	r1, #0
 8004118:	f004 f9b9 	bl	800848e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800411c:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <SystemClock_Config+0xe4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2b      	ldr	r2, [pc, #172]	; (80041d0 <SystemClock_Config+0xe8>)
 8004122:	401a      	ands	r2, r3
 8004124:	4b29      	ldr	r3, [pc, #164]	; (80041cc <SystemClock_Config+0xe4>)
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	0109      	lsls	r1, r1, #4
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800412e:	0021      	movs	r1, r4
 8004130:	187b      	adds	r3, r7, r1
 8004132:	2202      	movs	r2, #2
 8004134:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004136:	187b      	adds	r3, r7, r1
 8004138:	2201      	movs	r2, #1
 800413a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800413c:	187b      	adds	r3, r7, r1
 800413e:	2210      	movs	r2, #16
 8004140:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004142:	187b      	adds	r3, r7, r1
 8004144:	2202      	movs	r2, #2
 8004146:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004148:	187b      	adds	r3, r7, r1
 800414a:	2200      	movs	r2, #0
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800414e:	187b      	adds	r3, r7, r1
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	02d2      	lsls	r2, r2, #11
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8004156:	187b      	adds	r3, r7, r1
 8004158:	2280      	movs	r2, #128	; 0x80
 800415a:	03d2      	lsls	r2, r2, #15
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800415e:	187b      	adds	r3, r7, r1
 8004160:	0018      	movs	r0, r3
 8004162:	f001 fe41 	bl	8005de8 <HAL_RCC_OscConfig>
 8004166:	1e03      	subs	r3, r0, #0
 8004168:	d001      	beq.n	800416e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800416a:	f000 f941 	bl	80043f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	187b      	adds	r3, r7, r1
 8004172:	220f      	movs	r2, #15
 8004174:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004176:	187b      	adds	r3, r7, r1
 8004178:	2203      	movs	r2, #3
 800417a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800417c:	187b      	adds	r3, r7, r1
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004182:	187b      	adds	r3, r7, r1
 8004184:	2200      	movs	r2, #0
 8004186:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004188:	187b      	adds	r3, r7, r1
 800418a:	2200      	movs	r2, #0
 800418c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800418e:	187b      	adds	r3, r7, r1
 8004190:	2101      	movs	r1, #1
 8004192:	0018      	movs	r0, r3
 8004194:	f002 f9fc 	bl	8006590 <HAL_RCC_ClockConfig>
 8004198:	1e03      	subs	r3, r0, #0
 800419a:	d001      	beq.n	80041a0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800419c:	f000 f928 	bl	80043f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	220a      	movs	r2, #10
 80041a4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	2200      	movs	r2, #0
 80041aa:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	2200      	movs	r2, #0
 80041b0:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	0018      	movs	r0, r3
 80041b6:	f002 fc0f 	bl	80069d8 <HAL_RCCEx_PeriphCLKConfig>
 80041ba:	1e03      	subs	r3, r0, #0
 80041bc:	d001      	beq.n	80041c2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80041be:	f000 f917 	bl	80043f0 <Error_Handler>
  }
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b01f      	add	sp, #124	; 0x7c
 80041c8:	bd90      	pop	{r4, r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	40007000 	.word	0x40007000
 80041d0:	ffffe7ff 	.word	0xffffe7ff

080041d4 <PIDRegulator>:

/* USER CODE BEGIN 4 */
void PIDRegulator( uint16_t distance,  PIDStruct *PID)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	0002      	movs	r2, r0
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	1dbb      	adds	r3, r7, #6
 80041e0:	801a      	strh	r2, [r3, #0]
	PID->time_new = HAL_GetTick();
 80041e2:	f000 fe23 	bl	8004e2c <HAL_GetTick>
 80041e6:	0002      	movs	r2, r0
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	615a      	str	r2, [r3, #20]
	PID->period = PID->time_new - PID->time_old;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	1ad2      	subs	r2, r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	619a      	str	r2, [r3, #24]
	PID->time_old = PID->time_new;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	611a      	str	r2, [r3, #16]

	PID->distance_error = PID->set_point - distance;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	1dbb      	adds	r3, r7, #6
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	b29b      	uxth	r3, r3
 800420e:	b21a      	sxth	r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	839a      	strh	r2, [r3, #28]

	PID->PID_p = PID->Kp * PID->distance_error;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685c      	ldr	r4, [r3, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	221c      	movs	r2, #28
 800421c:	5e9b      	ldrsh	r3, [r3, r2]
 800421e:	0018      	movs	r0, r3
 8004220:	f7fd f926 	bl	8001470 <__aeabi_i2f>
 8004224:	1c03      	adds	r3, r0, #0
 8004226:	1c19      	adds	r1, r3, #0
 8004228:	1c20      	adds	r0, r4, #0
 800422a:	f7fc fe2d 	bl	8000e88 <__aeabi_fmul>
 800422e:	1c03      	adds	r3, r0, #0
 8004230:	1c1a      	adds	r2, r3, #0
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

	PID->dist_diference = PID->distance_error - PID->distance_previous_error;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	221c      	movs	r2, #28
 800423a:	5e9b      	ldrsh	r3, [r3, r2]
 800423c:	b29a      	uxth	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	211e      	movs	r1, #30
 8004242:	5e5b      	ldrsh	r3, [r3, r1]
 8004244:	b29b      	uxth	r3, r3
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	b29b      	uxth	r3, r3
 800424a:	b21a      	sxth	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	841a      	strh	r2, [r3, #32]

	PID->PID_d = PID->Kd*(((float)PID->distance_error - (float)PID->distance_previous_error)/(float)PID->period);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689c      	ldr	r4, [r3, #8]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	221c      	movs	r2, #28
 8004258:	5e9b      	ldrsh	r3, [r3, r2]
 800425a:	0018      	movs	r0, r3
 800425c:	f7fd f908 	bl	8001470 <__aeabi_i2f>
 8004260:	1c05      	adds	r5, r0, #0
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	221e      	movs	r2, #30
 8004266:	5e9b      	ldrsh	r3, [r3, r2]
 8004268:	0018      	movs	r0, r3
 800426a:	f7fd f901 	bl	8001470 <__aeabi_i2f>
 800426e:	1c03      	adds	r3, r0, #0
 8004270:	1c19      	adds	r1, r3, #0
 8004272:	1c28      	adds	r0, r5, #0
 8004274:	f7fc ff2e 	bl	80010d4 <__aeabi_fsub>
 8004278:	1c03      	adds	r3, r0, #0
 800427a:	1c1d      	adds	r5, r3, #0
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	0018      	movs	r0, r3
 8004282:	f7fd f943 	bl	800150c <__aeabi_ui2f>
 8004286:	1c03      	adds	r3, r0, #0
 8004288:	1c19      	adds	r1, r3, #0
 800428a:	1c28      	adds	r0, r5, #0
 800428c:	f7fc fc34 	bl	8000af8 <__aeabi_fdiv>
 8004290:	1c03      	adds	r3, r0, #0
 8004292:	1c19      	adds	r1, r3, #0
 8004294:	1c20      	adds	r0, r4, #0
 8004296:	f7fc fdf7 	bl	8000e88 <__aeabi_fmul>
 800429a:	1c03      	adds	r3, r0, #0
 800429c:	1c1a      	adds	r2, r3, #0
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c

	if(-20 < PID->distance_error && PID->distance_error < 20)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	221c      	movs	r2, #28
 80042a6:	5e9b      	ldrsh	r3, [r3, r2]
 80042a8:	3313      	adds	r3, #19
 80042aa:	db1d      	blt.n	80042e8 <PIDRegulator+0x114>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	221c      	movs	r2, #28
 80042b0:	5e9b      	ldrsh	r3, [r3, r2]
 80042b2:	2b13      	cmp	r3, #19
 80042b4:	dc18      	bgt.n	80042e8 <PIDRegulator+0x114>
	    {
			PID->PID_i = PID->PID_i + (PID->Ki * PID->distance_error);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68dd      	ldr	r5, [r3, #12]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	221c      	movs	r2, #28
 80042c2:	5e9b      	ldrsh	r3, [r3, r2]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7fd f8d3 	bl	8001470 <__aeabi_i2f>
 80042ca:	1c03      	adds	r3, r0, #0
 80042cc:	1c19      	adds	r1, r3, #0
 80042ce:	1c28      	adds	r0, r5, #0
 80042d0:	f7fc fdda 	bl	8000e88 <__aeabi_fmul>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	1c19      	adds	r1, r3, #0
 80042d8:	1c20      	adds	r0, r4, #0
 80042da:	f7fc fa6f 	bl	80007bc <__aeabi_fadd>
 80042de:	1c03      	adds	r3, r0, #0
 80042e0:	1c1a      	adds	r2, r3, #0
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	629a      	str	r2, [r3, #40]	; 0x28
 80042e6:	e002      	b.n	80042ee <PIDRegulator+0x11a>
	    }
	else
	    {
	    	PID->PID_i = 0;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	629a      	str	r2, [r3, #40]	; 0x28
	    }
	PID->PID_total = PID->PID_p + PID->PID_i + PID->PID_d;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	1c19      	adds	r1, r3, #0
 80042f8:	1c10      	adds	r0, r2, #0
 80042fa:	f7fc fa5f 	bl	80007bc <__aeabi_fadd>
 80042fe:	1c03      	adds	r3, r0, #0
 8004300:	1c1a      	adds	r2, r3, #0
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	1c19      	adds	r1, r3, #0
 8004308:	1c10      	adds	r0, r2, #0
 800430a:	f7fc fa57 	bl	80007bc <__aeabi_fadd>
 800430e:	1c03      	adds	r3, r0, #0
 8004310:	1c1a      	adds	r2, r3, #0
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
	PID->distance_previous_error =  PID->distance_error;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	221c      	movs	r2, #28
 800431a:	5e9a      	ldrsh	r2, [r3, r2]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	83da      	strh	r2, [r3, #30]
	return;
 8004320:	46c0      	nop			; (mov r8, r8)
}
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bdb0      	pop	{r4, r5, r7, pc}

08004328 <CalculateAngle>:

uint16_t CalculateAngle(float PID_value)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]


	if(PID_value < 0 && PID_value >-355){
 8004330:	2100      	movs	r1, #0
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc f8ca 	bl	80004cc <__aeabi_fcmplt>
 8004338:	1e03      	subs	r3, r0, #0
 800433a:	d012      	beq.n	8004362 <CalculateAngle+0x3a>
 800433c:	4922      	ldr	r1, [pc, #136]	; (80043c8 <CalculateAngle+0xa0>)
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc f8d8 	bl	80004f4 <__aeabi_fcmpgt>
 8004344:	1e03      	subs	r3, r0, #0
 8004346:	d00c      	beq.n	8004362 <CalculateAngle+0x3a>
		servo_angle = ANGLE_MID + PID_value;
 8004348:	4920      	ldr	r1, [pc, #128]	; (80043cc <CalculateAngle+0xa4>)
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fc fa36 	bl	80007bc <__aeabi_fadd>
 8004350:	1c03      	adds	r3, r0, #0
 8004352:	1c18      	adds	r0, r3, #0
 8004354:	f7fc f930 	bl	80005b8 <__aeabi_f2uiz>
 8004358:	0003      	movs	r3, r0
 800435a:	b29a      	uxth	r2, r3
 800435c:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <CalculateAngle+0xa8>)
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	e02c      	b.n	80043bc <CalculateAngle+0x94>
	}
	else if(PID_value > 0 && PID_value < 355){
 8004362:	2100      	movs	r1, #0
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7fc f8c5 	bl	80004f4 <__aeabi_fcmpgt>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d012      	beq.n	8004394 <CalculateAngle+0x6c>
 800436e:	4919      	ldr	r1, [pc, #100]	; (80043d4 <CalculateAngle+0xac>)
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fc f8ab 	bl	80004cc <__aeabi_fcmplt>
 8004376:	1e03      	subs	r3, r0, #0
 8004378:	d00c      	beq.n	8004394 <CalculateAngle+0x6c>
		servo_angle =  ANGLE_MID + PID_value;
 800437a:	4914      	ldr	r1, [pc, #80]	; (80043cc <CalculateAngle+0xa4>)
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fc fa1d 	bl	80007bc <__aeabi_fadd>
 8004382:	1c03      	adds	r3, r0, #0
 8004384:	1c18      	adds	r0, r3, #0
 8004386:	f7fc f917 	bl	80005b8 <__aeabi_f2uiz>
 800438a:	0003      	movs	r3, r0
 800438c:	b29a      	uxth	r2, r3
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <CalculateAngle+0xa8>)
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	e013      	b.n	80043bc <CalculateAngle+0x94>
	}
	else if (PID_value > 355 ) {
 8004394:	490f      	ldr	r1, [pc, #60]	; (80043d4 <CalculateAngle+0xac>)
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc f8ac 	bl	80004f4 <__aeabi_fcmpgt>
 800439c:	1e03      	subs	r3, r0, #0
 800439e:	d003      	beq.n	80043a8 <CalculateAngle+0x80>
		servo_angle =  ANGLE_MID + 355;
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <CalculateAngle+0xa8>)
 80043a2:	4a0d      	ldr	r2, [pc, #52]	; (80043d8 <CalculateAngle+0xb0>)
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	e009      	b.n	80043bc <CalculateAngle+0x94>
	}
	else if (PID_value < -790 ) {
 80043a8:	490c      	ldr	r1, [pc, #48]	; (80043dc <CalculateAngle+0xb4>)
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fc f88e 	bl	80004cc <__aeabi_fcmplt>
 80043b0:	1e03      	subs	r3, r0, #0
 80043b2:	d003      	beq.n	80043bc <CalculateAngle+0x94>
			servo_angle =  ANGLE_MID - 355;
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <CalculateAngle+0xa8>)
 80043b6:	22fa      	movs	r2, #250	; 0xfa
 80043b8:	32ff      	adds	r2, #255	; 0xff
 80043ba:	801a      	strh	r2, [r3, #0]
		}

	return servo_angle;
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <CalculateAngle+0xa8>)
 80043be:	881b      	ldrh	r3, [r3, #0]
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	c3b18000 	.word	0xc3b18000
 80043cc:	44570000 	.word	0x44570000
 80043d0:	20000004 	.word	0x20000004
 80043d4:	43b18000 	.word	0x43b18000
 80043d8:	000004bf 	.word	0x000004bf
 80043dc:	c4458000 	.word	0xc4458000

080043e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2)
	{
		//set_ang(CalculateAngle(PID.PID_total));
	}

}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043f4:	b672      	cpsid	i
}
 80043f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043f8:	e7fe      	b.n	80043f8 <Error_Handler+0x8>
	...

080043fc <set_ang>:
/*
 * ang - kat obrotu walu serwomechanizmu
 * mode - tryb obrotu zgodnie/przeciwnie do wskazowek zegara
 */
void set_ang(uint16_t ang)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	0002      	movs	r2, r0
 8004404:	1dbb      	adds	r3, r7, #6
 8004406:	801a      	strh	r2, [r3, #0]
	uint16_t val;

	if(ang > ANGLE_MAX)
 8004408:	1dbb      	adds	r3, r7, #6
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	2396      	movs	r3, #150	; 0x96
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	429a      	cmp	r2, r3
 8004412:	d903      	bls.n	800441c <set_ang+0x20>
	{
		ang = ANGLE_MAX;
 8004414:	1dbb      	adds	r3, r7, #6
 8004416:	2296      	movs	r2, #150	; 0x96
 8004418:	00d2      	lsls	r2, r2, #3
 800441a:	801a      	strh	r2, [r3, #0]
	}
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}
	val = PWM_MIN + (ang * STEP) / 1000;
 800441c:	1dbb      	adds	r3, r7, #6
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	4a0b      	ldr	r2, [pc, #44]	; (8004450 <set_ang+0x54>)
 8004422:	4353      	muls	r3, r2
 8004424:	22fa      	movs	r2, #250	; 0xfa
 8004426:	0091      	lsls	r1, r2, #2
 8004428:	0018      	movs	r0, r3
 800442a:	f7fb ff13 	bl	8000254 <__divsi3>
 800442e:	0003      	movs	r3, r0
 8004430:	b29a      	uxth	r2, r3
 8004432:	210e      	movs	r1, #14
 8004434:	187b      	adds	r3, r7, r1
 8004436:	3291      	adds	r2, #145	; 0x91
 8004438:	32ff      	adds	r2, #255	; 0xff
 800443a:	801a      	strh	r2, [r3, #0]


	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <set_ang+0x58>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	187a      	adds	r2, r7, r1
 8004442:	8812      	ldrh	r2, [r2, #0]
 8004444:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	00000729 	.word	0x00000729
 8004454:	20000308 	.word	0x20000308

08004458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <HAL_MspInit+0x24>)
 800445e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_MspInit+0x24>)
 8004462:	2101      	movs	r1, #1
 8004464:	430a      	orrs	r2, r1
 8004466:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <HAL_MspInit+0x24>)
 800446a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_MspInit+0x24>)
 800446e:	2180      	movs	r1, #128	; 0x80
 8004470:	0549      	lsls	r1, r1, #21
 8004472:	430a      	orrs	r2, r1
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000

08004480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004484:	e7fe      	b.n	8004484 <NMI_Handler+0x4>

08004486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800448a:	e7fe      	b.n	800448a <HardFault_Handler+0x4>

0800448c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044a4:	f000 fcb0 	bl	8004e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <TIM2_IRQHandler+0x14>)
 80044b6:	0018      	movs	r0, r3
 80044b8:	f002 fd1c 	bl	8006ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	200002c8 	.word	0x200002c8

080044c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
	return 1;
 80044cc:	2301      	movs	r3, #1
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <_kill>:

int _kill(int pid, int sig)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044de:	f003 ffa3 	bl	8008428 <__errno>
 80044e2:	0003      	movs	r3, r0
 80044e4:	2216      	movs	r2, #22
 80044e6:	601a      	str	r2, [r3, #0]
	return -1;
 80044e8:	2301      	movs	r3, #1
 80044ea:	425b      	negs	r3, r3
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b002      	add	sp, #8
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_exit>:

void _exit (int status)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80044fc:	2301      	movs	r3, #1
 80044fe:	425a      	negs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0011      	movs	r1, r2
 8004504:	0018      	movs	r0, r3
 8004506:	f7ff ffe5 	bl	80044d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800450a:	e7fe      	b.n	800450a <_exit+0x16>

0800450c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e00a      	b.n	8004534 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800451e:	e000      	b.n	8004522 <_read+0x16>
 8004520:	bf00      	nop
 8004522:	0001      	movs	r1, r0
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	60ba      	str	r2, [r7, #8]
 800452a:	b2ca      	uxtb	r2, r1
 800452c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	3301      	adds	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	dbf0      	blt.n	800451e <_read+0x12>
	}

return len;
 800453c:	687b      	ldr	r3, [r7, #4]
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b006      	add	sp, #24
 8004544:	bd80      	pop	{r7, pc}

08004546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e009      	b.n	800456c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	60ba      	str	r2, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	0018      	movs	r0, r3
 8004562:	e000      	b.n	8004566 <_write+0x20>
 8004564:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	3301      	adds	r3, #1
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	dbf1      	blt.n	8004558 <_write+0x12>
	}
	return len;
 8004574:	687b      	ldr	r3, [r7, #4]
}
 8004576:	0018      	movs	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	b006      	add	sp, #24
 800457c:	bd80      	pop	{r7, pc}

0800457e <_close>:

int _close(int file)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
	return -1;
 8004586:	2301      	movs	r3, #1
 8004588:	425b      	negs	r3, r3
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b002      	add	sp, #8
 8004590:	bd80      	pop	{r7, pc}

08004592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	0192      	lsls	r2, r2, #6
 80045a2:	605a      	str	r2, [r3, #4]
	return 0;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	0018      	movs	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b002      	add	sp, #8
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_isatty>:

int _isatty(int file)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
	return 1;
 80045b6:	2301      	movs	r3, #1
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b002      	add	sp, #8
 80045be:	bd80      	pop	{r7, pc}

080045c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
	return 0;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b004      	add	sp, #16
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <_sbrk+0x5c>)
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <_sbrk+0x60>)
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045ec:	4b13      	ldr	r3, [pc, #76]	; (800463c <_sbrk+0x64>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <_sbrk+0x64>)
 80045f6:	4a12      	ldr	r2, [pc, #72]	; (8004640 <_sbrk+0x68>)
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <_sbrk+0x64>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	429a      	cmp	r2, r3
 8004606:	d207      	bcs.n	8004618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004608:	f003 ff0e 	bl	8008428 <__errno>
 800460c:	0003      	movs	r3, r0
 800460e:	220c      	movs	r2, #12
 8004610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004612:	2301      	movs	r3, #1
 8004614:	425b      	negs	r3, r3
 8004616:	e009      	b.n	800462c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <_sbrk+0x64>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <_sbrk+0x64>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	18d2      	adds	r2, r2, r3
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <_sbrk+0x64>)
 8004628:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b006      	add	sp, #24
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20005000 	.word	0x20005000
 8004638:	00000400 	.word	0x00000400
 800463c:	200002c4 	.word	0x200002c4
 8004640:	200004e0 	.word	0x200004e0

08004644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004656:	2308      	movs	r3, #8
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	0018      	movs	r0, r3
 800465c:	2310      	movs	r3, #16
 800465e:	001a      	movs	r2, r3
 8004660:	2100      	movs	r1, #0
 8004662:	f003 ff14 	bl	800848e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004666:	003b      	movs	r3, r7
 8004668:	0018      	movs	r0, r3
 800466a:	2308      	movs	r3, #8
 800466c:	001a      	movs	r2, r3
 800466e:	2100      	movs	r1, #0
 8004670:	f003 ff0d 	bl	800848e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004674:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <MX_TIM2_Init+0xa0>)
 8004676:	2280      	movs	r2, #128	; 0x80
 8004678:	05d2      	lsls	r2, r2, #23
 800467a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 800467c:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <MX_TIM2_Init+0xa0>)
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <MX_TIM2_Init+0xa4>)
 8004680:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004682:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <MX_TIM2_Init+0xa0>)
 8004684:	2200      	movs	r2, #0
 8004686:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <MX_TIM2_Init+0xa0>)
 800468a:	22c7      	movs	r2, #199	; 0xc7
 800468c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <MX_TIM2_Init+0xa0>)
 8004690:	2200      	movs	r2, #0
 8004692:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <MX_TIM2_Init+0xa0>)
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <MX_TIM2_Init+0xa0>)
 800469c:	0018      	movs	r0, r3
 800469e:	f002 fb0f 	bl	8006cc0 <HAL_TIM_Base_Init>
 80046a2:	1e03      	subs	r3, r0, #0
 80046a4:	d001      	beq.n	80046aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80046a6:	f7ff fea3 	bl	80043f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046aa:	2108      	movs	r1, #8
 80046ac:	187b      	adds	r3, r7, r1
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	0152      	lsls	r2, r2, #5
 80046b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80046b4:	187a      	adds	r2, r7, r1
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <MX_TIM2_Init+0xa0>)
 80046b8:	0011      	movs	r1, r2
 80046ba:	0018      	movs	r0, r3
 80046bc:	f002 fdc8 	bl	8007250 <HAL_TIM_ConfigClockSource>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d001      	beq.n	80046c8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80046c4:	f7ff fe94 	bl	80043f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046c8:	003b      	movs	r3, r7
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ce:	003b      	movs	r3, r7
 80046d0:	2200      	movs	r2, #0
 80046d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046d4:	003a      	movs	r2, r7
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <MX_TIM2_Init+0xa0>)
 80046d8:	0011      	movs	r1, r2
 80046da:	0018      	movs	r0, r3
 80046dc:	f003 f8cc 	bl	8007878 <HAL_TIMEx_MasterConfigSynchronization>
 80046e0:	1e03      	subs	r3, r0, #0
 80046e2:	d001      	beq.n	80046e8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80046e4:	f7ff fe84 	bl	80043f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b006      	add	sp, #24
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	200002c8 	.word	0x200002c8
 80046f4:	00007cff 	.word	0x00007cff

080046f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046fe:	2318      	movs	r3, #24
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	0018      	movs	r0, r3
 8004704:	2310      	movs	r3, #16
 8004706:	001a      	movs	r2, r3
 8004708:	2100      	movs	r1, #0
 800470a:	f003 fec0 	bl	800848e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800470e:	2310      	movs	r3, #16
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	0018      	movs	r0, r3
 8004714:	2308      	movs	r3, #8
 8004716:	001a      	movs	r2, r3
 8004718:	2100      	movs	r1, #0
 800471a:	f003 feb8 	bl	800848e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800471e:	003b      	movs	r3, r7
 8004720:	0018      	movs	r0, r3
 8004722:	2310      	movs	r3, #16
 8004724:	001a      	movs	r2, r3
 8004726:	2100      	movs	r1, #0
 8004728:	f003 feb1 	bl	800848e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800472c:	4b34      	ldr	r3, [pc, #208]	; (8004800 <MX_TIM3_Init+0x108>)
 800472e:	4a35      	ldr	r2, [pc, #212]	; (8004804 <MX_TIM3_Init+0x10c>)
 8004730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8004732:	4b33      	ldr	r3, [pc, #204]	; (8004800 <MX_TIM3_Init+0x108>)
 8004734:	221f      	movs	r2, #31
 8004736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004738:	4b31      	ldr	r3, [pc, #196]	; (8004800 <MX_TIM3_Init+0x108>)
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800473e:	4b30      	ldr	r3, [pc, #192]	; (8004800 <MX_TIM3_Init+0x108>)
 8004740:	4a31      	ldr	r2, [pc, #196]	; (8004808 <MX_TIM3_Init+0x110>)
 8004742:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004744:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <MX_TIM3_Init+0x108>)
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800474a:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <MX_TIM3_Init+0x108>)
 800474c:	2280      	movs	r2, #128	; 0x80
 800474e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004750:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <MX_TIM3_Init+0x108>)
 8004752:	0018      	movs	r0, r3
 8004754:	f002 fab4 	bl	8006cc0 <HAL_TIM_Base_Init>
 8004758:	1e03      	subs	r3, r0, #0
 800475a:	d001      	beq.n	8004760 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800475c:	f7ff fe48 	bl	80043f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004760:	2118      	movs	r1, #24
 8004762:	187b      	adds	r3, r7, r1
 8004764:	2280      	movs	r2, #128	; 0x80
 8004766:	0152      	lsls	r2, r2, #5
 8004768:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800476a:	187a      	adds	r2, r7, r1
 800476c:	4b24      	ldr	r3, [pc, #144]	; (8004800 <MX_TIM3_Init+0x108>)
 800476e:	0011      	movs	r1, r2
 8004770:	0018      	movs	r0, r3
 8004772:	f002 fd6d 	bl	8007250 <HAL_TIM_ConfigClockSource>
 8004776:	1e03      	subs	r3, r0, #0
 8004778:	d001      	beq.n	800477e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800477a:	f7ff fe39 	bl	80043f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <MX_TIM3_Init+0x108>)
 8004780:	0018      	movs	r0, r3
 8004782:	f002 fadd 	bl	8006d40 <HAL_TIM_PWM_Init>
 8004786:	1e03      	subs	r3, r0, #0
 8004788:	d001      	beq.n	800478e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800478a:	f7ff fe31 	bl	80043f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800478e:	2110      	movs	r1, #16
 8004790:	187b      	adds	r3, r7, r1
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004796:	187b      	adds	r3, r7, r1
 8004798:	2200      	movs	r2, #0
 800479a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800479c:	187a      	adds	r2, r7, r1
 800479e:	4b18      	ldr	r3, [pc, #96]	; (8004800 <MX_TIM3_Init+0x108>)
 80047a0:	0011      	movs	r1, r2
 80047a2:	0018      	movs	r0, r3
 80047a4:	f003 f868 	bl	8007878 <HAL_TIMEx_MasterConfigSynchronization>
 80047a8:	1e03      	subs	r3, r0, #0
 80047aa:	d001      	beq.n	80047b0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80047ac:	f7ff fe20 	bl	80043f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047b0:	003b      	movs	r3, r7
 80047b2:	2260      	movs	r2, #96	; 0x60
 80047b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80047b6:	003b      	movs	r3, r7
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047bc:	003b      	movs	r3, r7
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047c2:	003b      	movs	r3, r7
 80047c4:	2200      	movs	r2, #0
 80047c6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047c8:	0039      	movs	r1, r7
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <MX_TIM3_Init+0x108>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	0018      	movs	r0, r3
 80047d0:	f002 fc78 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 80047d4:	1e03      	subs	r3, r0, #0
 80047d6:	d001      	beq.n	80047dc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80047d8:	f7ff fe0a 	bl	80043f0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <MX_TIM3_Init+0x108>)
 80047de:	2104      	movs	r1, #4
 80047e0:	0018      	movs	r0, r3
 80047e2:	f003 f8a7 	bl	8007934 <HAL_TIMEx_RemapConfig>
 80047e6:	1e03      	subs	r3, r0, #0
 80047e8:	d001      	beq.n	80047ee <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80047ea:	f7ff fe01 	bl	80043f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <MX_TIM3_Init+0x108>)
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 f837 	bl	8004864 <HAL_TIM_MspPostInit>

}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b00a      	add	sp, #40	; 0x28
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	20000308 	.word	0x20000308
 8004804:	40000400 	.word	0x40000400
 8004808:	00004e1f 	.word	0x00004e1f

0800480c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	2380      	movs	r3, #128	; 0x80
 800481a:	05db      	lsls	r3, r3, #23
 800481c:	429a      	cmp	r2, r3
 800481e:	d10e      	bne.n	800483e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <HAL_TIM_Base_MspInit+0x50>)
 8004822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004824:	4b0d      	ldr	r3, [pc, #52]	; (800485c <HAL_TIM_Base_MspInit+0x50>)
 8004826:	2101      	movs	r1, #1
 8004828:	430a      	orrs	r2, r1
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800482c:	2200      	movs	r2, #0
 800482e:	2100      	movs	r1, #0
 8004830:	200f      	movs	r0, #15
 8004832:	f000 fbd5 	bl	8004fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004836:	200f      	movs	r0, #15
 8004838:	f000 fbe7 	bl	800500a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800483c:	e00a      	b.n	8004854 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM3)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a07      	ldr	r2, [pc, #28]	; (8004860 <HAL_TIM_Base_MspInit+0x54>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d105      	bne.n	8004854 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <HAL_TIM_Base_MspInit+0x50>)
 800484a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_TIM_Base_MspInit+0x50>)
 800484e:	2102      	movs	r1, #2
 8004850:	430a      	orrs	r2, r1
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b002      	add	sp, #8
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	40000400 	.word	0x40000400

08004864 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800486c:	240c      	movs	r4, #12
 800486e:	193b      	adds	r3, r7, r4
 8004870:	0018      	movs	r0, r3
 8004872:	2314      	movs	r3, #20
 8004874:	001a      	movs	r2, r3
 8004876:	2100      	movs	r1, #0
 8004878:	f003 fe09 	bl	800848e <memset>
  if(timHandle->Instance==TIM3)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a14      	ldr	r2, [pc, #80]	; (80048d4 <HAL_TIM_MspPostInit+0x70>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d122      	bne.n	80048cc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004886:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <HAL_TIM_MspPostInit+0x74>)
 8004888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488a:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <HAL_TIM_MspPostInit+0x74>)
 800488c:	2101      	movs	r1, #1
 800488e:	430a      	orrs	r2, r1
 8004890:	62da      	str	r2, [r3, #44]	; 0x2c
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <HAL_TIM_MspPostInit+0x74>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	2201      	movs	r2, #1
 8004898:	4013      	ands	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800489e:	0021      	movs	r1, r4
 80048a0:	187b      	adds	r3, r7, r1
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a6:	187b      	adds	r3, r7, r1
 80048a8:	2202      	movs	r2, #2
 80048aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b2:	187b      	adds	r3, r7, r1
 80048b4:	2200      	movs	r2, #0
 80048b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048b8:	187b      	adds	r3, r7, r1
 80048ba:	2202      	movs	r2, #2
 80048bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048be:	187a      	adds	r2, r7, r1
 80048c0:	23a0      	movs	r3, #160	; 0xa0
 80048c2:	05db      	lsls	r3, r3, #23
 80048c4:	0011      	movs	r1, r2
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 fbbc 	bl	8005044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80048cc:	46c0      	nop			; (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b009      	add	sp, #36	; 0x24
 80048d2:	bd90      	pop	{r4, r7, pc}
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40021000 	.word	0x40021000

080048dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048e0:	4b14      	ldr	r3, [pc, #80]	; (8004934 <MX_USART2_UART_Init+0x58>)
 80048e2:	4a15      	ldr	r2, [pc, #84]	; (8004938 <MX_USART2_UART_Init+0x5c>)
 80048e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048e6:	4b13      	ldr	r3, [pc, #76]	; (8004934 <MX_USART2_UART_Init+0x58>)
 80048e8:	22e1      	movs	r2, #225	; 0xe1
 80048ea:	0252      	lsls	r2, r2, #9
 80048ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <MX_USART2_UART_Init+0x58>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <MX_USART2_UART_Init+0x58>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <MX_USART2_UART_Init+0x58>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <MX_USART2_UART_Init+0x58>)
 8004902:	220c      	movs	r2, #12
 8004904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <MX_USART2_UART_Init+0x58>)
 8004908:	2200      	movs	r2, #0
 800490a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800490c:	4b09      	ldr	r3, [pc, #36]	; (8004934 <MX_USART2_UART_Init+0x58>)
 800490e:	2200      	movs	r2, #0
 8004910:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <MX_USART2_UART_Init+0x58>)
 8004914:	2200      	movs	r2, #0
 8004916:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <MX_USART2_UART_Init+0x58>)
 800491a:	2200      	movs	r2, #0
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <MX_USART2_UART_Init+0x58>)
 8004920:	0018      	movs	r0, r3
 8004922:	f003 f825 	bl	8007970 <HAL_UART_Init>
 8004926:	1e03      	subs	r3, r0, #0
 8004928:	d001      	beq.n	800492e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800492a:	f7ff fd61 	bl	80043f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000348 	.word	0x20000348
 8004938:	40004400 	.word	0x40004400

0800493c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004944:	240c      	movs	r4, #12
 8004946:	193b      	adds	r3, r7, r4
 8004948:	0018      	movs	r0, r3
 800494a:	2314      	movs	r3, #20
 800494c:	001a      	movs	r2, r3
 800494e:	2100      	movs	r1, #0
 8004950:	f003 fd9d 	bl	800848e <memset>
  if(uartHandle->Instance==USART2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a18      	ldr	r2, [pc, #96]	; (80049bc <HAL_UART_MspInit+0x80>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d129      	bne.n	80049b2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800495e:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <HAL_UART_MspInit+0x84>)
 8004960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004962:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <HAL_UART_MspInit+0x84>)
 8004964:	2180      	movs	r1, #128	; 0x80
 8004966:	0289      	lsls	r1, r1, #10
 8004968:	430a      	orrs	r2, r1
 800496a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <HAL_UART_MspInit+0x84>)
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_UART_MspInit+0x84>)
 8004972:	2101      	movs	r1, #1
 8004974:	430a      	orrs	r2, r1
 8004976:	62da      	str	r2, [r3, #44]	; 0x2c
 8004978:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <HAL_UART_MspInit+0x84>)
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	2201      	movs	r2, #1
 800497e:	4013      	ands	r3, r2
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004984:	0021      	movs	r1, r4
 8004986:	187b      	adds	r3, r7, r1
 8004988:	220c      	movs	r2, #12
 800498a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	187b      	adds	r3, r7, r1
 800498e:	2202      	movs	r2, #2
 8004990:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004992:	187b      	adds	r3, r7, r1
 8004994:	2200      	movs	r2, #0
 8004996:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004998:	187b      	adds	r3, r7, r1
 800499a:	2203      	movs	r2, #3
 800499c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	2204      	movs	r2, #4
 80049a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a4:	187a      	adds	r2, r7, r1
 80049a6:	23a0      	movs	r3, #160	; 0xa0
 80049a8:	05db      	lsls	r3, r3, #23
 80049aa:	0011      	movs	r1, r2
 80049ac:	0018      	movs	r0, r3
 80049ae:	f000 fb49 	bl	8005044 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b009      	add	sp, #36	; 0x24
 80049b8:	bd90      	pop	{r4, r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	40004400 	.word	0x40004400
 80049c0:	40021000 	.word	0x40021000

080049c4 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 80049c4:	b5b0      	push	{r4, r5, r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	210e      	movs	r1, #14
 80049d0:	187b      	adds	r3, r7, r1
 80049d2:	1c02      	adds	r2, r0, #0
 80049d4:	801a      	strh	r2, [r3, #0]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	330a      	adds	r3, #10
 80049da:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	b29d      	uxth	r5, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	68bc      	ldr	r4, [r7, #8]
 80049e4:	187a      	adds	r2, r7, r1
 80049e6:	8811      	ldrh	r1, [r2, #0]
 80049e8:	4806      	ldr	r0, [pc, #24]	; (8004a04 <_I2CWrite+0x40>)
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	002b      	movs	r3, r5
 80049ee:	0022      	movs	r2, r4
 80049f0:	f000 fd5a 	bl	80054a8 <HAL_I2C_Master_Transmit>
 80049f4:	0003      	movs	r3, r0
 80049f6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80049f8:	693b      	ldr	r3, [r7, #16]
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b006      	add	sp, #24
 8004a00:	bdb0      	pop	{r4, r5, r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	20000200 	.word	0x20000200

08004a08 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b089      	sub	sp, #36	; 0x24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	210e      	movs	r1, #14
 8004a14:	187b      	adds	r3, r7, r1
 8004a16:	1c02      	adds	r2, r0, #0
 8004a18:	801a      	strh	r2, [r3, #0]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	330a      	adds	r3, #10
 8004a1e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 8004a20:	187b      	adds	r3, r7, r1
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	2201      	movs	r2, #1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	b299      	uxth	r1, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	b29c      	uxth	r4, r3
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	4806      	ldr	r0, [pc, #24]	; (8004a4c <_I2CRead+0x44>)
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	0023      	movs	r3, r4
 8004a38:	f000 fe3e 	bl	80056b8 <HAL_I2C_Master_Receive>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8004a40:	693b      	ldr	r3, [r7, #16]
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b007      	add	sp, #28
 8004a48:	bd90      	pop	{r4, r7, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	20000200 	.word	0x20000200

08004a50 <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	0004      	movs	r4, r0
 8004a58:	0008      	movs	r0, r1
 8004a5a:	0011      	movs	r1, r2
 8004a5c:	1dbb      	adds	r3, r7, #6
 8004a5e:	1c22      	adds	r2, r4, #0
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	1d3b      	adds	r3, r7, #4
 8004a64:	1c02      	adds	r2, r0, #0
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	1cfb      	adds	r3, r7, #3
 8004a6a:	1c0a      	adds	r2, r1, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a6e:	240f      	movs	r4, #15
 8004a70:	193b      	adds	r3, r7, r4
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <VL53L1_WrByte+0x74>)
 8004a82:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8004a84:	1d3b      	adds	r3, r7, #4
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <VL53L1_WrByte+0x74>)
 8004a8c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <VL53L1_WrByte+0x74>)
 8004a90:	1cfa      	adds	r2, r7, #3
 8004a92:	7812      	ldrb	r2, [r2, #0]
 8004a94:	709a      	strb	r2, [r3, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8004a96:	490b      	ldr	r1, [pc, #44]	; (8004ac4 <VL53L1_WrByte+0x74>)
 8004a98:	1dbb      	adds	r3, r7, #6
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7ff ff90 	bl	80049c4 <_I2CWrite>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <VL53L1_WrByte+0x64>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004aae:	193b      	adds	r3, r7, r4
 8004ab0:	22f3      	movs	r2, #243	; 0xf3
 8004ab2:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 8004ab4:	230f      	movs	r3, #15
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b25b      	sxtb	r3, r3
}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b005      	add	sp, #20
 8004ac2:	bd90      	pop	{r4, r7, pc}
 8004ac4:	200003cc 	.word	0x200003cc

08004ac8 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data) {
 8004ac8:	b590      	push	{r4, r7, lr}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	0004      	movs	r4, r0
 8004ad0:	0008      	movs	r0, r1
 8004ad2:	0011      	movs	r1, r2
 8004ad4:	1dbb      	adds	r3, r7, #6
 8004ad6:	1c22      	adds	r2, r4, #0
 8004ad8:	801a      	strh	r2, [r3, #0]
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	1c02      	adds	r2, r0, #0
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	1cbb      	adds	r3, r7, #2
 8004ae2:	1c0a      	adds	r2, r1, #0
 8004ae4:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004ae6:	240f      	movs	r4, #15
 8004ae8:	193b      	adds	r3, r7, r4
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	0a1b      	lsrs	r3, r3, #8
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <VL53L1_WrWord+0x84>)
 8004afa:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <VL53L1_WrWord+0x84>)
 8004b04:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8004b06:	1cbb      	adds	r3, r7, #2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <VL53L1_WrWord+0x84>)
 8004b12:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8004b14:	1cbb      	adds	r3, r7, #2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <VL53L1_WrWord+0x84>)
 8004b1c:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8004b1e:	490b      	ldr	r1, [pc, #44]	; (8004b4c <VL53L1_WrWord+0x84>)
 8004b20:	1dbb      	adds	r3, r7, #6
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	2204      	movs	r2, #4
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7ff ff4c 	bl	80049c4 <_I2CWrite>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <VL53L1_WrWord+0x74>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004b36:	193b      	adds	r3, r7, r4
 8004b38:	22f3      	movs	r2, #243	; 0xf3
 8004b3a:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 8004b3c:	230f      	movs	r3, #15
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b25b      	sxtb	r3, r3
}
 8004b44:	0018      	movs	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b005      	add	sp, #20
 8004b4a:	bd90      	pop	{r4, r7, pc}
 8004b4c:	200003cc 	.word	0x200003cc

08004b50 <VL53L1_WrDWord>:

VL53L1_Error VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data) {
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	603a      	str	r2, [r7, #0]
 8004b58:	1dbb      	adds	r3, r7, #6
 8004b5a:	1c02      	adds	r2, r0, #0
 8004b5c:	801a      	strh	r2, [r3, #0]
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	1c0a      	adds	r2, r1, #0
 8004b62:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004b64:	240f      	movs	r4, #15
 8004b66:	193b      	adds	r3, r7, r4
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 8004b6c:	1d3b      	adds	r3, r7, #4
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <VL53L1_WrDWord+0x88>)
 8004b78:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <VL53L1_WrDWord+0x88>)
 8004b82:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	0e1b      	lsrs	r3, r3, #24
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <VL53L1_WrDWord+0x88>)
 8004b8c:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <VL53L1_WrDWord+0x88>)
 8004b96:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <VL53L1_WrDWord+0x88>)
 8004ba0:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <VL53L1_WrDWord+0x88>)
 8004ba8:	715a      	strb	r2, [r3, #5]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 8004baa:	490b      	ldr	r1, [pc, #44]	; (8004bd8 <VL53L1_WrDWord+0x88>)
 8004bac:	1dbb      	adds	r3, r7, #6
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	2206      	movs	r2, #6
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7ff ff06 	bl	80049c4 <_I2CWrite>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <VL53L1_WrDWord+0x78>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004bc2:	193b      	adds	r3, r7, r4
 8004bc4:	22f3      	movs	r2, #243	; 0xf3
 8004bc6:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b25b      	sxtb	r3, r3
}
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b005      	add	sp, #20
 8004bd6:	bd90      	pop	{r4, r7, pc}
 8004bd8:	200003cc 	.word	0x200003cc

08004bdc <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	603a      	str	r2, [r7, #0]
 8004be4:	1dbb      	adds	r3, r7, #6
 8004be6:	1c02      	adds	r2, r0, #0
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	1c0a      	adds	r2, r1, #0
 8004bee:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004bf0:	240f      	movs	r4, #15
 8004bf2:	193b      	adds	r3, r7, r4
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8004bf8:	1d3b      	adds	r3, r7, #4
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4b18      	ldr	r3, [pc, #96]	; (8004c64 <VL53L1_RdByte+0x88>)
 8004c04:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <VL53L1_RdByte+0x88>)
 8004c0e:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004c10:	4914      	ldr	r1, [pc, #80]	; (8004c64 <VL53L1_RdByte+0x88>)
 8004c12:	1dbb      	adds	r3, r7, #6
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	2202      	movs	r2, #2
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f7ff fed3 	bl	80049c4 <_I2CWrite>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	60bb      	str	r3, [r7, #8]
    if( status_int ){
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004c28:	193b      	adds	r3, r7, r4
 8004c2a:	22f3      	movs	r2, #243	; 0xf3
 8004c2c:	701a      	strb	r2, [r3, #0]
        goto done;
 8004c2e:	e011      	b.n	8004c54 <VL53L1_RdByte+0x78>
    }
    status_int = _I2CRead(Dev, data, 1);
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	1dbb      	adds	r3, r7, #6
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff fee5 	bl	8004a08 <_I2CRead>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <VL53L1_RdByte+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004c48:	230f      	movs	r3, #15
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	22f3      	movs	r2, #243	; 0xf3
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e000      	b.n	8004c54 <VL53L1_RdByte+0x78>
    }
done:
 8004c52:	46c0      	nop			; (mov r8, r8)
    VL53L1_PutI2cBus();
    return Status;
 8004c54:	230f      	movs	r3, #15
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	b25b      	sxtb	r3, r3
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b005      	add	sp, #20
 8004c62:	bd90      	pop	{r4, r7, pc}
 8004c64:	200003cc 	.word	0x200003cc

08004c68 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	603a      	str	r2, [r7, #0]
 8004c70:	1dbb      	adds	r3, r7, #6
 8004c72:	1c02      	adds	r2, r0, #0
 8004c74:	801a      	strh	r2, [r3, #0]
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	1c0a      	adds	r2, r1, #0
 8004c7a:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004c7c:	240f      	movs	r4, #15
 8004c7e:	193b      	adds	r3, r7, r4
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8004c84:	1d3b      	adds	r3, r7, #4
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	0a1b      	lsrs	r3, r3, #8
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <VL53L1_RdWord+0xa0>)
 8004c90:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8004c92:	1d3b      	adds	r3, r7, #4
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <VL53L1_RdWord+0xa0>)
 8004c9a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004c9c:	491a      	ldr	r1, [pc, #104]	; (8004d08 <VL53L1_RdWord+0xa0>)
 8004c9e:	1dbb      	adds	r3, r7, #6
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f7ff fe8d 	bl	80049c4 <_I2CWrite>
 8004caa:	0003      	movs	r3, r0
 8004cac:	60bb      	str	r3, [r7, #8]

    if( status_int ){
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <VL53L1_RdWord+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004cb4:	193b      	adds	r3, r7, r4
 8004cb6:	22f3      	movs	r2, #243	; 0xf3
 8004cb8:	701a      	strb	r2, [r3, #0]
        goto done;
 8004cba:	e01c      	b.n	8004cf6 <VL53L1_RdWord+0x8e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004cbc:	4912      	ldr	r1, [pc, #72]	; (8004d08 <VL53L1_RdWord+0xa0>)
 8004cbe:	1dbb      	adds	r3, r7, #6
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7ff fe9f 	bl	8004a08 <_I2CRead>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d004      	beq.n	8004cde <VL53L1_RdWord+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004cd4:	230f      	movs	r3, #15
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	22f3      	movs	r2, #243	; 0xf3
 8004cda:	701a      	strb	r2, [r3, #0]
        goto done;
 8004cdc:	e00b      	b.n	8004cf6 <VL53L1_RdWord+0x8e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004cde:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <VL53L1_RdWord+0xa0>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <VL53L1_RdWord+0xa0>)
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	18d3      	adds	r3, r2, r3
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b25b      	sxtb	r3, r3
 }
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b005      	add	sp, #20
 8004d04:	bd90      	pop	{r4, r7, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	200003cc 	.word	0x200003cc

08004d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
      ldr   r0, =_estack
 8004d0c:	480d      	ldr	r0, [pc, #52]	; (8004d44 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004d0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d10:	480d      	ldr	r0, [pc, #52]	; (8004d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8004d12:	490e      	ldr	r1, [pc, #56]	; (8004d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d14:	4a0e      	ldr	r2, [pc, #56]	; (8004d50 <LoopForever+0xe>)
  movs r3, #0
 8004d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d18:	e002      	b.n	8004d20 <LoopCopyDataInit>

08004d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d1e:	3304      	adds	r3, #4

08004d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d24:	d3f9      	bcc.n	8004d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d26:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d28:	4c0b      	ldr	r4, [pc, #44]	; (8004d58 <LoopForever+0x16>)
  movs r3, #0
 8004d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d2c:	e001      	b.n	8004d32 <LoopFillZerobss>

08004d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d30:	3204      	adds	r2, #4

08004d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d34:	d3fb      	bcc.n	8004d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004d36:	f7ff fc85 	bl	8004644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d3a:	f003 fb7b 	bl	8008434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d3e:	f7ff f92f 	bl	8003fa0 <main>

08004d42 <LoopForever>:

LoopForever:
    b LoopForever
 8004d42:	e7fe      	b.n	8004d42 <LoopForever>
      ldr   r0, =_estack
 8004d44:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d4c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004d50:	0800b9fc 	.word	0x0800b9fc
  ldr r2, =_sbss
 8004d54:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004d58:	200004e0 	.word	0x200004e0

08004d5c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d5c:	e7fe      	b.n	8004d5c <ADC1_COMP_IRQHandler>
	...

08004d60 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_Init+0x3c>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <HAL_Init+0x3c>)
 8004d72:	2140      	movs	r1, #64	; 0x40
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f000 f811 	bl	8004da0 <HAL_InitTick>
 8004d7e:	1e03      	subs	r3, r0, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004d82:	1dfb      	adds	r3, r7, #7
 8004d84:	2201      	movs	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e001      	b.n	8004d8e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d8a:	f7ff fb65 	bl	8004458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d8e:	1dfb      	adds	r3, r7, #7
 8004d90:	781b      	ldrb	r3, [r3, #0]
}
 8004d92:	0018      	movs	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b002      	add	sp, #8
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	40022000 	.word	0x40022000

08004da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004da8:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <HAL_InitTick+0x5c>)
 8004daa:	681c      	ldr	r4, [r3, #0]
 8004dac:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <HAL_InitTick+0x60>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	0019      	movs	r1, r3
 8004db2:	23fa      	movs	r3, #250	; 0xfa
 8004db4:	0098      	lsls	r0, r3, #2
 8004db6:	f7fb f9c3 	bl	8000140 <__udivsi3>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	0020      	movs	r0, r4
 8004dc0:	f7fb f9be 	bl	8000140 <__udivsi3>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 f92f 	bl	800502a <HAL_SYSTICK_Config>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e00f      	b.n	8004df4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d80b      	bhi.n	8004df2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	425b      	negs	r3, r3
 8004de0:	2200      	movs	r2, #0
 8004de2:	0018      	movs	r0, r3
 8004de4:	f000 f8fc 	bl	8004fe0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_InitTick+0x64>)
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
}
 8004df4:	0018      	movs	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b003      	add	sp, #12
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	20000008 	.word	0x20000008
 8004e00:	20000010 	.word	0x20000010
 8004e04:	2000000c 	.word	0x2000000c

08004e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_IncTick+0x1c>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	001a      	movs	r2, r3
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_IncTick+0x20>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	18d2      	adds	r2, r2, r3
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <HAL_IncTick+0x20>)
 8004e1a:	601a      	str	r2, [r3, #0]
}
 8004e1c:	46c0      	nop			; (mov r8, r8)
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	20000010 	.word	0x20000010
 8004e28:	200004cc 	.word	0x200004cc

08004e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e30:	4b02      	ldr	r3, [pc, #8]	; (8004e3c <HAL_GetTick+0x10>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	200004cc 	.word	0x200004cc

08004e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	d005      	beq.n	8004e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_Delay+0x44>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	001a      	movs	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	189b      	adds	r3, r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	f7ff ffe0 	bl	8004e2c <HAL_GetTick>
 8004e6c:	0002      	movs	r2, r0
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d8f7      	bhi.n	8004e68 <HAL_Delay+0x28>
  {
  }
}
 8004e78:	46c0      	nop			; (mov r8, r8)
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b004      	add	sp, #16
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	20000010 	.word	0x20000010

08004e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	0002      	movs	r2, r0
 8004e90:	1dfb      	adds	r3, r7, #7
 8004e92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e94:	1dfb      	adds	r3, r7, #7
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b7f      	cmp	r3, #127	; 0x7f
 8004e9a:	d809      	bhi.n	8004eb0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9c:	1dfb      	adds	r3, r7, #7
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	231f      	movs	r3, #31
 8004ea4:	401a      	ands	r2, r3
 8004ea6:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <__NVIC_EnableIRQ+0x30>)
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4091      	lsls	r1, r2
 8004eac:	000a      	movs	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]
  }
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000e100 	.word	0xe000e100

08004ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	0002      	movs	r2, r0
 8004ec4:	6039      	str	r1, [r7, #0]
 8004ec6:	1dfb      	adds	r3, r7, #7
 8004ec8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004eca:	1dfb      	adds	r3, r7, #7
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed0:	d828      	bhi.n	8004f24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ed2:	4a2f      	ldr	r2, [pc, #188]	; (8004f90 <__NVIC_SetPriority+0xd4>)
 8004ed4:	1dfb      	adds	r3, r7, #7
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	33c0      	adds	r3, #192	; 0xc0
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	589b      	ldr	r3, [r3, r2]
 8004ee2:	1dfa      	adds	r2, r7, #7
 8004ee4:	7812      	ldrb	r2, [r2, #0]
 8004ee6:	0011      	movs	r1, r2
 8004ee8:	2203      	movs	r2, #3
 8004eea:	400a      	ands	r2, r1
 8004eec:	00d2      	lsls	r2, r2, #3
 8004eee:	21ff      	movs	r1, #255	; 0xff
 8004ef0:	4091      	lsls	r1, r2
 8004ef2:	000a      	movs	r2, r1
 8004ef4:	43d2      	mvns	r2, r2
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	019b      	lsls	r3, r3, #6
 8004efe:	22ff      	movs	r2, #255	; 0xff
 8004f00:	401a      	ands	r2, r3
 8004f02:	1dfb      	adds	r3, r7, #7
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	0018      	movs	r0, r3
 8004f08:	2303      	movs	r3, #3
 8004f0a:	4003      	ands	r3, r0
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f10:	481f      	ldr	r0, [pc, #124]	; (8004f90 <__NVIC_SetPriority+0xd4>)
 8004f12:	1dfb      	adds	r3, r7, #7
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b25b      	sxtb	r3, r3
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	33c0      	adds	r3, #192	; 0xc0
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004f22:	e031      	b.n	8004f88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f24:	4a1b      	ldr	r2, [pc, #108]	; (8004f94 <__NVIC_SetPriority+0xd8>)
 8004f26:	1dfb      	adds	r3, r7, #7
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	230f      	movs	r3, #15
 8004f2e:	400b      	ands	r3, r1
 8004f30:	3b08      	subs	r3, #8
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3306      	adds	r3, #6
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	18d3      	adds	r3, r2, r3
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1dfa      	adds	r2, r7, #7
 8004f40:	7812      	ldrb	r2, [r2, #0]
 8004f42:	0011      	movs	r1, r2
 8004f44:	2203      	movs	r2, #3
 8004f46:	400a      	ands	r2, r1
 8004f48:	00d2      	lsls	r2, r2, #3
 8004f4a:	21ff      	movs	r1, #255	; 0xff
 8004f4c:	4091      	lsls	r1, r2
 8004f4e:	000a      	movs	r2, r1
 8004f50:	43d2      	mvns	r2, r2
 8004f52:	401a      	ands	r2, r3
 8004f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	22ff      	movs	r2, #255	; 0xff
 8004f5c:	401a      	ands	r2, r3
 8004f5e:	1dfb      	adds	r3, r7, #7
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	0018      	movs	r0, r3
 8004f64:	2303      	movs	r3, #3
 8004f66:	4003      	ands	r3, r0
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f6c:	4809      	ldr	r0, [pc, #36]	; (8004f94 <__NVIC_SetPriority+0xd8>)
 8004f6e:	1dfb      	adds	r3, r7, #7
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	001c      	movs	r4, r3
 8004f74:	230f      	movs	r3, #15
 8004f76:	4023      	ands	r3, r4
 8004f78:	3b08      	subs	r3, #8
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	3306      	adds	r3, #6
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	18c3      	adds	r3, r0, r3
 8004f84:	3304      	adds	r3, #4
 8004f86:	601a      	str	r2, [r3, #0]
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b003      	add	sp, #12
 8004f8e:	bd90      	pop	{r4, r7, pc}
 8004f90:	e000e100 	.word	0xe000e100
 8004f94:	e000ed00 	.word	0xe000ed00

08004f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	1e5a      	subs	r2, r3, #1
 8004fa4:	2380      	movs	r3, #128	; 0x80
 8004fa6:	045b      	lsls	r3, r3, #17
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d301      	bcc.n	8004fb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fac:	2301      	movs	r3, #1
 8004fae:	e010      	b.n	8004fd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <SysTick_Config+0x44>)
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fb8:	2301      	movs	r3, #1
 8004fba:	425b      	negs	r3, r3
 8004fbc:	2103      	movs	r1, #3
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f7ff ff7c 	bl	8004ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <SysTick_Config+0x44>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fca:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <SysTick_Config+0x44>)
 8004fcc:	2207      	movs	r2, #7
 8004fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b002      	add	sp, #8
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	e000e010 	.word	0xe000e010

08004fe0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	210f      	movs	r1, #15
 8004fec:	187b      	adds	r3, r7, r1
 8004fee:	1c02      	adds	r2, r0, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	187b      	adds	r3, r7, r1
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	0011      	movs	r1, r2
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7ff ff5d 	bl	8004ebc <__NVIC_SetPriority>
}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b004      	add	sp, #16
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	0002      	movs	r2, r0
 8005012:	1dfb      	adds	r3, r7, #7
 8005014:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005016:	1dfb      	adds	r3, r7, #7
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	b25b      	sxtb	r3, r3
 800501c:	0018      	movs	r0, r3
 800501e:	f7ff ff33 	bl	8004e88 <__NVIC_EnableIRQ>
}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	46bd      	mov	sp, r7
 8005026:	b002      	add	sp, #8
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	0018      	movs	r0, r3
 8005036:	f7ff ffaf 	bl	8004f98 <SysTick_Config>
 800503a:	0003      	movs	r3, r0
}
 800503c:	0018      	movs	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	b002      	add	sp, #8
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800505a:	e155      	b.n	8005308 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2101      	movs	r1, #1
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4091      	lsls	r1, r2
 8005066:	000a      	movs	r2, r1
 8005068:	4013      	ands	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d100      	bne.n	8005074 <HAL_GPIO_Init+0x30>
 8005072:	e146      	b.n	8005302 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2203      	movs	r2, #3
 800507a:	4013      	ands	r3, r2
 800507c:	2b01      	cmp	r3, #1
 800507e:	d005      	beq.n	800508c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2203      	movs	r2, #3
 8005086:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005088:	2b02      	cmp	r3, #2
 800508a:	d130      	bne.n	80050ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	2203      	movs	r2, #3
 8005098:	409a      	lsls	r2, r3
 800509a:	0013      	movs	r3, r2
 800509c:	43da      	mvns	r2, r3
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4013      	ands	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	409a      	lsls	r2, r3
 80050ae:	0013      	movs	r3, r2
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050c2:	2201      	movs	r2, #1
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	409a      	lsls	r2, r3
 80050c8:	0013      	movs	r3, r2
 80050ca:	43da      	mvns	r2, r3
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4013      	ands	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	091b      	lsrs	r3, r3, #4
 80050d8:	2201      	movs	r2, #1
 80050da:	401a      	ands	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	409a      	lsls	r2, r3
 80050e0:	0013      	movs	r3, r2
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2203      	movs	r2, #3
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d017      	beq.n	800512a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	2203      	movs	r2, #3
 8005106:	409a      	lsls	r2, r3
 8005108:	0013      	movs	r3, r2
 800510a:	43da      	mvns	r2, r3
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4013      	ands	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	409a      	lsls	r2, r3
 800511c:	0013      	movs	r3, r2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2203      	movs	r2, #3
 8005130:	4013      	ands	r3, r2
 8005132:	2b02      	cmp	r3, #2
 8005134:	d123      	bne.n	800517e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	08da      	lsrs	r2, r3, #3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3208      	adds	r2, #8
 800513e:	0092      	lsls	r2, r2, #2
 8005140:	58d3      	ldr	r3, [r2, r3]
 8005142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2207      	movs	r2, #7
 8005148:	4013      	ands	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	220f      	movs	r2, #15
 800514e:	409a      	lsls	r2, r3
 8005150:	0013      	movs	r3, r2
 8005152:	43da      	mvns	r2, r3
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4013      	ands	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2107      	movs	r1, #7
 8005162:	400b      	ands	r3, r1
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	409a      	lsls	r2, r3
 8005168:	0013      	movs	r3, r2
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	08da      	lsrs	r2, r3, #3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3208      	adds	r2, #8
 8005178:	0092      	lsls	r2, r2, #2
 800517a:	6939      	ldr	r1, [r7, #16]
 800517c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	2203      	movs	r2, #3
 800518a:	409a      	lsls	r2, r3
 800518c:	0013      	movs	r3, r2
 800518e:	43da      	mvns	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4013      	ands	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2203      	movs	r2, #3
 800519c:	401a      	ands	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	409a      	lsls	r2, r3
 80051a4:	0013      	movs	r3, r2
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	23c0      	movs	r3, #192	; 0xc0
 80051b8:	029b      	lsls	r3, r3, #10
 80051ba:	4013      	ands	r3, r2
 80051bc:	d100      	bne.n	80051c0 <HAL_GPIO_Init+0x17c>
 80051be:	e0a0      	b.n	8005302 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051c0:	4b57      	ldr	r3, [pc, #348]	; (8005320 <HAL_GPIO_Init+0x2dc>)
 80051c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c4:	4b56      	ldr	r3, [pc, #344]	; (8005320 <HAL_GPIO_Init+0x2dc>)
 80051c6:	2101      	movs	r1, #1
 80051c8:	430a      	orrs	r2, r1
 80051ca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80051cc:	4a55      	ldr	r2, [pc, #340]	; (8005324 <HAL_GPIO_Init+0x2e0>)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	3302      	adds	r3, #2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	589b      	ldr	r3, [r3, r2]
 80051d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2203      	movs	r2, #3
 80051de:	4013      	ands	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	220f      	movs	r2, #15
 80051e4:	409a      	lsls	r2, r3
 80051e6:	0013      	movs	r3, r2
 80051e8:	43da      	mvns	r2, r3
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	23a0      	movs	r3, #160	; 0xa0
 80051f4:	05db      	lsls	r3, r3, #23
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d01f      	beq.n	800523a <HAL_GPIO_Init+0x1f6>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a4a      	ldr	r2, [pc, #296]	; (8005328 <HAL_GPIO_Init+0x2e4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d019      	beq.n	8005236 <HAL_GPIO_Init+0x1f2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a49      	ldr	r2, [pc, #292]	; (800532c <HAL_GPIO_Init+0x2e8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_GPIO_Init+0x1ee>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a48      	ldr	r2, [pc, #288]	; (8005330 <HAL_GPIO_Init+0x2ec>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00d      	beq.n	800522e <HAL_GPIO_Init+0x1ea>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a47      	ldr	r2, [pc, #284]	; (8005334 <HAL_GPIO_Init+0x2f0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <HAL_GPIO_Init+0x1e6>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a46      	ldr	r2, [pc, #280]	; (8005338 <HAL_GPIO_Init+0x2f4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_GPIO_Init+0x1e2>
 8005222:	2305      	movs	r3, #5
 8005224:	e00a      	b.n	800523c <HAL_GPIO_Init+0x1f8>
 8005226:	2306      	movs	r3, #6
 8005228:	e008      	b.n	800523c <HAL_GPIO_Init+0x1f8>
 800522a:	2304      	movs	r3, #4
 800522c:	e006      	b.n	800523c <HAL_GPIO_Init+0x1f8>
 800522e:	2303      	movs	r3, #3
 8005230:	e004      	b.n	800523c <HAL_GPIO_Init+0x1f8>
 8005232:	2302      	movs	r3, #2
 8005234:	e002      	b.n	800523c <HAL_GPIO_Init+0x1f8>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <HAL_GPIO_Init+0x1f8>
 800523a:	2300      	movs	r3, #0
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	2103      	movs	r1, #3
 8005240:	400a      	ands	r2, r1
 8005242:	0092      	lsls	r2, r2, #2
 8005244:	4093      	lsls	r3, r2
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800524c:	4935      	ldr	r1, [pc, #212]	; (8005324 <HAL_GPIO_Init+0x2e0>)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	089b      	lsrs	r3, r3, #2
 8005252:	3302      	adds	r3, #2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800525a:	4b38      	ldr	r3, [pc, #224]	; (800533c <HAL_GPIO_Init+0x2f8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	43da      	mvns	r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4013      	ands	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	025b      	lsls	r3, r3, #9
 8005272:	4013      	ands	r3, r2
 8005274:	d003      	beq.n	800527e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800527e:	4b2f      	ldr	r3, [pc, #188]	; (800533c <HAL_GPIO_Init+0x2f8>)
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005284:	4b2d      	ldr	r3, [pc, #180]	; (800533c <HAL_GPIO_Init+0x2f8>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	43da      	mvns	r2, r3
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4013      	ands	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	029b      	lsls	r3, r3, #10
 800529c:	4013      	ands	r3, r2
 800529e:	d003      	beq.n	80052a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80052a8:	4b24      	ldr	r3, [pc, #144]	; (800533c <HAL_GPIO_Init+0x2f8>)
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ae:	4b23      	ldr	r3, [pc, #140]	; (800533c <HAL_GPIO_Init+0x2f8>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	43da      	mvns	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4013      	ands	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	035b      	lsls	r3, r3, #13
 80052c6:	4013      	ands	r3, r2
 80052c8:	d003      	beq.n	80052d2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052d2:	4b1a      	ldr	r3, [pc, #104]	; (800533c <HAL_GPIO_Init+0x2f8>)
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80052d8:	4b18      	ldr	r3, [pc, #96]	; (800533c <HAL_GPIO_Init+0x2f8>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	43da      	mvns	r2, r3
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4013      	ands	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	2380      	movs	r3, #128	; 0x80
 80052ee:	039b      	lsls	r3, r3, #14
 80052f0:	4013      	ands	r3, r2
 80052f2:	d003      	beq.n	80052fc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052fc:	4b0f      	ldr	r3, [pc, #60]	; (800533c <HAL_GPIO_Init+0x2f8>)
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	3301      	adds	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	40da      	lsrs	r2, r3
 8005310:	1e13      	subs	r3, r2, #0
 8005312:	d000      	beq.n	8005316 <HAL_GPIO_Init+0x2d2>
 8005314:	e6a2      	b.n	800505c <HAL_GPIO_Init+0x18>
  }
}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	b006      	add	sp, #24
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40021000 	.word	0x40021000
 8005324:	40010000 	.word	0x40010000
 8005328:	50000400 	.word	0x50000400
 800532c:	50000800 	.word	0x50000800
 8005330:	50000c00 	.word	0x50000c00
 8005334:	50001000 	.word	0x50001000
 8005338:	50001c00 	.word	0x50001c00
 800533c:	40010400 	.word	0x40010400

08005340 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	0008      	movs	r0, r1
 800534a:	0011      	movs	r1, r2
 800534c:	1cbb      	adds	r3, r7, #2
 800534e:	1c02      	adds	r2, r0, #0
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	1c7b      	adds	r3, r7, #1
 8005354:	1c0a      	adds	r2, r1, #0
 8005356:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005358:	1c7b      	adds	r3, r7, #1
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005360:	1cbb      	adds	r3, r7, #2
 8005362:	881a      	ldrh	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005368:	e003      	b.n	8005372 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800536a:	1cbb      	adds	r3, r7, #2
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	46bd      	mov	sp, r7
 8005376:	b002      	add	sp, #8
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e082      	b.n	8005494 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2241      	movs	r2, #65	; 0x41
 8005392:	5c9b      	ldrb	r3, [r3, r2]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2240      	movs	r2, #64	; 0x40
 800539e:	2100      	movs	r1, #0
 80053a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7fe fdb7 	bl	8003f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2241      	movs	r2, #65	; 0x41
 80053ae:	2124      	movs	r1, #36	; 0x24
 80053b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2101      	movs	r1, #1
 80053be:	438a      	bics	r2, r1
 80053c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4934      	ldr	r1, [pc, #208]	; (800549c <HAL_I2C_Init+0x120>)
 80053cc:	400a      	ands	r2, r1
 80053ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4931      	ldr	r1, [pc, #196]	; (80054a0 <HAL_I2C_Init+0x124>)
 80053dc:	400a      	ands	r2, r1
 80053de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d108      	bne.n	80053fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2180      	movs	r1, #128	; 0x80
 80053f2:	0209      	lsls	r1, r1, #8
 80053f4:	430a      	orrs	r2, r1
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	e007      	b.n	800540a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2184      	movs	r1, #132	; 0x84
 8005404:	0209      	lsls	r1, r1, #8
 8005406:	430a      	orrs	r2, r1
 8005408:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d104      	bne.n	800541c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	0112      	lsls	r2, r2, #4
 800541a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	491f      	ldr	r1, [pc, #124]	; (80054a4 <HAL_I2C_Init+0x128>)
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	491a      	ldr	r1, [pc, #104]	; (80054a0 <HAL_I2C_Init+0x124>)
 8005438:	400a      	ands	r2, r1
 800543a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	431a      	orrs	r2, r3
 8005446:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69d9      	ldr	r1, [r3, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2101      	movs	r1, #1
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2241      	movs	r2, #65	; 0x41
 8005480:	2120      	movs	r1, #32
 8005482:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2242      	movs	r2, #66	; 0x42
 800548e:	2100      	movs	r1, #0
 8005490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b002      	add	sp, #8
 800549a:	bd80      	pop	{r7, pc}
 800549c:	f0ffffff 	.word	0xf0ffffff
 80054a0:	ffff7fff 	.word	0xffff7fff
 80054a4:	02008000 	.word	0x02008000

080054a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80054a8:	b590      	push	{r4, r7, lr}
 80054aa:	b089      	sub	sp, #36	; 0x24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	0008      	movs	r0, r1
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	0019      	movs	r1, r3
 80054b6:	230a      	movs	r3, #10
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	1c02      	adds	r2, r0, #0
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	2308      	movs	r3, #8
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	1c0a      	adds	r2, r1, #0
 80054c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2241      	movs	r2, #65	; 0x41
 80054ca:	5c9b      	ldrb	r3, [r3, r2]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d000      	beq.n	80054d4 <HAL_I2C_Master_Transmit+0x2c>
 80054d2:	e0e7      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2240      	movs	r2, #64	; 0x40
 80054d8:	5c9b      	ldrb	r3, [r3, r2]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_I2C_Master_Transmit+0x3a>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0e1      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1fe>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2240      	movs	r2, #64	; 0x40
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054ea:	f7ff fc9f 	bl	8004e2c <HAL_GetTick>
 80054ee:	0003      	movs	r3, r0
 80054f0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	0219      	lsls	r1, r3, #8
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2319      	movs	r3, #25
 80054fe:	2201      	movs	r2, #1
 8005500:	f000 fa04 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 8005504:	1e03      	subs	r3, r0, #0
 8005506:	d001      	beq.n	800550c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0cc      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2241      	movs	r2, #65	; 0x41
 8005510:	2121      	movs	r1, #33	; 0x21
 8005512:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2242      	movs	r2, #66	; 0x42
 8005518:	2110      	movs	r1, #16
 800551a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2208      	movs	r2, #8
 800552c:	18ba      	adds	r2, r7, r2
 800552e:	8812      	ldrh	r2, [r2, #0]
 8005530:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553c:	b29b      	uxth	r3, r3
 800553e:	2bff      	cmp	r3, #255	; 0xff
 8005540:	d911      	bls.n	8005566 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	22ff      	movs	r2, #255	; 0xff
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	b2da      	uxtb	r2, r3
 800554e:	2380      	movs	r3, #128	; 0x80
 8005550:	045c      	lsls	r4, r3, #17
 8005552:	230a      	movs	r3, #10
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	8819      	ldrh	r1, [r3, #0]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	4b55      	ldr	r3, [pc, #340]	; (80056b0 <HAL_I2C_Master_Transmit+0x208>)
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	0023      	movs	r3, r4
 8005560:	f000 fb74 	bl	8005c4c <I2C_TransferConfig>
 8005564:	e075      	b.n	8005652 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005574:	b2da      	uxtb	r2, r3
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	049c      	lsls	r4, r3, #18
 800557a:	230a      	movs	r3, #10
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	8819      	ldrh	r1, [r3, #0]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	4b4b      	ldr	r3, [pc, #300]	; (80056b0 <HAL_I2C_Master_Transmit+0x208>)
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	0023      	movs	r3, r4
 8005588:	f000 fb60 	bl	8005c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800558c:	e061      	b.n	8005652 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	0018      	movs	r0, r3
 8005596:	f000 f9f8 	bl	800598a <I2C_WaitOnTXISFlagUntilTimeout>
 800559a:	1e03      	subs	r3, r0, #0
 800559c:	d001      	beq.n	80055a2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e081      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	781a      	ldrb	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d03a      	beq.n	8005652 <HAL_I2C_Master_Transmit+0x1aa>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d136      	bne.n	8005652 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	0013      	movs	r3, r2
 80055ee:	2200      	movs	r2, #0
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	f000 f98b 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 80055f6:	1e03      	subs	r3, r0, #0
 80055f8:	d001      	beq.n	80055fe <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e053      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	2bff      	cmp	r3, #255	; 0xff
 8005606:	d911      	bls.n	800562c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	22ff      	movs	r2, #255	; 0xff
 800560c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005612:	b2da      	uxtb	r2, r3
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	045c      	lsls	r4, r3, #17
 8005618:	230a      	movs	r3, #10
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	8819      	ldrh	r1, [r3, #0]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	0023      	movs	r3, r4
 8005626:	f000 fb11 	bl	8005c4c <I2C_TransferConfig>
 800562a:	e012      	b.n	8005652 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563a:	b2da      	uxtb	r2, r3
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	049c      	lsls	r4, r3, #18
 8005640:	230a      	movs	r3, #10
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	8819      	ldrh	r1, [r3, #0]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	2300      	movs	r3, #0
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	0023      	movs	r3, r4
 800564e:	f000 fafd 	bl	8005c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d198      	bne.n	800558e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	0018      	movs	r0, r3
 8005664:	f000 f9d0 	bl	8005a08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005668:	1e03      	subs	r3, r0, #0
 800566a:	d001      	beq.n	8005670 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e01a      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2220      	movs	r2, #32
 8005676:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	490c      	ldr	r1, [pc, #48]	; (80056b4 <HAL_I2C_Master_Transmit+0x20c>)
 8005684:	400a      	ands	r2, r1
 8005686:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2241      	movs	r2, #65	; 0x41
 800568c:	2120      	movs	r1, #32
 800568e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2242      	movs	r2, #66	; 0x42
 8005694:	2100      	movs	r1, #0
 8005696:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	2100      	movs	r1, #0
 800569e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b007      	add	sp, #28
 80056ac:	bd90      	pop	{r4, r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	80002000 	.word	0x80002000
 80056b4:	fe00e800 	.word	0xfe00e800

080056b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	0008      	movs	r0, r1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	0019      	movs	r1, r3
 80056c6:	230a      	movs	r3, #10
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	1c02      	adds	r2, r0, #0
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	2308      	movs	r3, #8
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	1c0a      	adds	r2, r1, #0
 80056d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2241      	movs	r2, #65	; 0x41
 80056da:	5c9b      	ldrb	r3, [r3, r2]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d000      	beq.n	80056e4 <HAL_I2C_Master_Receive+0x2c>
 80056e2:	e0e8      	b.n	80058b6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	5c9b      	ldrb	r3, [r3, r2]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_I2C_Master_Receive+0x3a>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e0e2      	b.n	80058b8 <HAL_I2C_Master_Receive+0x200>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2240      	movs	r2, #64	; 0x40
 80056f6:	2101      	movs	r1, #1
 80056f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056fa:	f7ff fb97 	bl	8004e2c <HAL_GetTick>
 80056fe:	0003      	movs	r3, r0
 8005700:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005702:	2380      	movs	r3, #128	; 0x80
 8005704:	0219      	lsls	r1, r3, #8
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	2319      	movs	r3, #25
 800570e:	2201      	movs	r2, #1
 8005710:	f000 f8fc 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 8005714:	1e03      	subs	r3, r0, #0
 8005716:	d001      	beq.n	800571c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0cd      	b.n	80058b8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2241      	movs	r2, #65	; 0x41
 8005720:	2122      	movs	r1, #34	; 0x22
 8005722:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2242      	movs	r2, #66	; 0x42
 8005728:	2110      	movs	r1, #16
 800572a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2208      	movs	r2, #8
 800573c:	18ba      	adds	r2, r7, r2
 800573e:	8812      	ldrh	r2, [r2, #0]
 8005740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2bff      	cmp	r3, #255	; 0xff
 8005750:	d911      	bls.n	8005776 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	22ff      	movs	r2, #255	; 0xff
 8005756:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575c:	b2da      	uxtb	r2, r3
 800575e:	2380      	movs	r3, #128	; 0x80
 8005760:	045c      	lsls	r4, r3, #17
 8005762:	230a      	movs	r3, #10
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	8819      	ldrh	r1, [r3, #0]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <HAL_I2C_Master_Receive+0x208>)
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	0023      	movs	r3, r4
 8005770:	f000 fa6c 	bl	8005c4c <I2C_TransferConfig>
 8005774:	e076      	b.n	8005864 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005784:	b2da      	uxtb	r2, r3
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	049c      	lsls	r4, r3, #18
 800578a:	230a      	movs	r3, #10
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	8819      	ldrh	r1, [r3, #0]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	4b4b      	ldr	r3, [pc, #300]	; (80058c0 <HAL_I2C_Master_Receive+0x208>)
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	0023      	movs	r3, r4
 8005798:	f000 fa58 	bl	8005c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800579c:	e062      	b.n	8005864 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	0018      	movs	r0, r3
 80057a6:	f000 f96b 	bl	8005a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057aa:	1e03      	subs	r3, r0, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e082      	b.n	80058b8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d03a      	beq.n	8005864 <HAL_I2C_Master_Receive+0x1ac>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d136      	bne.n	8005864 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	0013      	movs	r3, r2
 8005800:	2200      	movs	r2, #0
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	f000 f882 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 8005808:	1e03      	subs	r3, r0, #0
 800580a:	d001      	beq.n	8005810 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e053      	b.n	80058b8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2bff      	cmp	r3, #255	; 0xff
 8005818:	d911      	bls.n	800583e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	22ff      	movs	r2, #255	; 0xff
 800581e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	b2da      	uxtb	r2, r3
 8005826:	2380      	movs	r3, #128	; 0x80
 8005828:	045c      	lsls	r4, r3, #17
 800582a:	230a      	movs	r3, #10
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	8819      	ldrh	r1, [r3, #0]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	2300      	movs	r3, #0
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	0023      	movs	r3, r4
 8005838:	f000 fa08 	bl	8005c4c <I2C_TransferConfig>
 800583c:	e012      	b.n	8005864 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	b2da      	uxtb	r2, r3
 800584e:	2380      	movs	r3, #128	; 0x80
 8005850:	049c      	lsls	r4, r3, #18
 8005852:	230a      	movs	r3, #10
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	8819      	ldrh	r1, [r3, #0]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	2300      	movs	r3, #0
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	0023      	movs	r3, r4
 8005860:	f000 f9f4 	bl	8005c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d197      	bne.n	800579e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	0018      	movs	r0, r3
 8005876:	f000 f8c7 	bl	8005a08 <I2C_WaitOnSTOPFlagUntilTimeout>
 800587a:	1e03      	subs	r3, r0, #0
 800587c:	d001      	beq.n	8005882 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e01a      	b.n	80058b8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2220      	movs	r2, #32
 8005888:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	490b      	ldr	r1, [pc, #44]	; (80058c4 <HAL_I2C_Master_Receive+0x20c>)
 8005896:	400a      	ands	r2, r1
 8005898:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2241      	movs	r2, #65	; 0x41
 800589e:	2120      	movs	r1, #32
 80058a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2242      	movs	r2, #66	; 0x42
 80058a6:	2100      	movs	r1, #0
 80058a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2240      	movs	r2, #64	; 0x40
 80058ae:	2100      	movs	r1, #0
 80058b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e000      	b.n	80058b8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80058b6:	2302      	movs	r3, #2
  }
}
 80058b8:	0018      	movs	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b007      	add	sp, #28
 80058be:	bd90      	pop	{r4, r7, pc}
 80058c0:	80002400 	.word	0x80002400
 80058c4:	fe00e800 	.word	0xfe00e800

080058c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2202      	movs	r2, #2
 80058d8:	4013      	ands	r3, r2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d103      	bne.n	80058e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2201      	movs	r2, #1
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d007      	beq.n	8005904 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2101      	movs	r1, #1
 8005900:	430a      	orrs	r2, r1
 8005902:	619a      	str	r2, [r3, #24]
  }
}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	b002      	add	sp, #8
 800590a:	bd80      	pop	{r7, pc}

0800590c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	1dfb      	adds	r3, r7, #7
 800591a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800591c:	e021      	b.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	d01e      	beq.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005924:	f7ff fa82 	bl	8004e2c <HAL_GetTick>
 8005928:	0002      	movs	r2, r0
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d302      	bcc.n	800593a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d113      	bne.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	2220      	movs	r2, #32
 8005940:	431a      	orrs	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2241      	movs	r2, #65	; 0x41
 800594a:	2120      	movs	r1, #32
 800594c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2242      	movs	r2, #66	; 0x42
 8005952:	2100      	movs	r1, #0
 8005954:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2240      	movs	r2, #64	; 0x40
 800595a:	2100      	movs	r1, #0
 800595c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e00f      	b.n	8005982 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	425a      	negs	r2, r3
 8005972:	4153      	adcs	r3, r2
 8005974:	b2db      	uxtb	r3, r3
 8005976:	001a      	movs	r2, r3
 8005978:	1dfb      	adds	r3, r7, #7
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d0ce      	beq.n	800591e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	0018      	movs	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	b004      	add	sp, #16
 8005988:	bd80      	pop	{r7, pc}

0800598a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005996:	e02b      	b.n	80059f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	0018      	movs	r0, r3
 80059a0:	f000 f8da 	bl	8005b58 <I2C_IsAcknowledgeFailed>
 80059a4:	1e03      	subs	r3, r0, #0
 80059a6:	d001      	beq.n	80059ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e029      	b.n	8005a00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	3301      	adds	r3, #1
 80059b0:	d01e      	beq.n	80059f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7ff fa3b 	bl	8004e2c <HAL_GetTick>
 80059b6:	0002      	movs	r2, r0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d113      	bne.n	80059f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059cc:	2220      	movs	r2, #32
 80059ce:	431a      	orrs	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2241      	movs	r2, #65	; 0x41
 80059d8:	2120      	movs	r1, #32
 80059da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2242      	movs	r2, #66	; 0x42
 80059e0:	2100      	movs	r1, #0
 80059e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2240      	movs	r2, #64	; 0x40
 80059e8:	2100      	movs	r1, #0
 80059ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e007      	b.n	8005a00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	2202      	movs	r2, #2
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d1cc      	bne.n	8005998 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	0018      	movs	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b004      	add	sp, #16
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a14:	e028      	b.n	8005a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f000 f89b 	bl	8005b58 <I2C_IsAcknowledgeFailed>
 8005a22:	1e03      	subs	r3, r0, #0
 8005a24:	d001      	beq.n	8005a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e026      	b.n	8005a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7ff f9ff 	bl	8004e2c <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d113      	bne.n	8005a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a44:	2220      	movs	r2, #32
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2241      	movs	r2, #65	; 0x41
 8005a50:	2120      	movs	r1, #32
 8005a52:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2242      	movs	r2, #66	; 0x42
 8005a58:	2100      	movs	r1, #0
 8005a5a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2240      	movs	r2, #64	; 0x40
 8005a60:	2100      	movs	r1, #0
 8005a62:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e007      	b.n	8005a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d1cf      	bne.n	8005a16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b004      	add	sp, #16
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a8c:	e055      	b.n	8005b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f000 f85f 	bl	8005b58 <I2C_IsAcknowledgeFailed>
 8005a9a:	1e03      	subs	r3, r0, #0
 8005a9c:	d001      	beq.n	8005aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e053      	b.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d129      	bne.n	8005b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2204      	movs	r2, #4
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d105      	bne.n	8005aca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e03f      	b.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	491d      	ldr	r1, [pc, #116]	; (8005b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005ade:	400a      	ands	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2241      	movs	r2, #65	; 0x41
 8005aec:	2120      	movs	r1, #32
 8005aee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2242      	movs	r2, #66	; 0x42
 8005af4:	2100      	movs	r1, #0
 8005af6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2240      	movs	r2, #64	; 0x40
 8005afc:	2100      	movs	r1, #0
 8005afe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e022      	b.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b04:	f7ff f992 	bl	8004e2c <HAL_GetTick>
 8005b08:	0002      	movs	r2, r0
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d302      	bcc.n	8005b1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10f      	bne.n	8005b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	2220      	movs	r2, #32
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2241      	movs	r2, #65	; 0x41
 8005b2a:	2120      	movs	r1, #32
 8005b2c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2240      	movs	r2, #64	; 0x40
 8005b32:	2100      	movs	r1, #0
 8005b34:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e007      	b.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	2204      	movs	r2, #4
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d1a2      	bne.n	8005a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b004      	add	sp, #16
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	fe00e800 	.word	0xfe00e800

08005b58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b10      	cmp	r3, #16
 8005b70:	d164      	bne.n	8005c3c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	049b      	lsls	r3, r3, #18
 8005b7c:	401a      	ands	r2, r3
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	049b      	lsls	r3, r3, #18
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d02b      	beq.n	8005bde <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	01c9      	lsls	r1, r1, #7
 8005b94:	430a      	orrs	r2, r1
 8005b96:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b98:	e021      	b.n	8005bde <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	d01e      	beq.n	8005bde <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba0:	f7ff f944 	bl	8004e2c <HAL_GetTick>
 8005ba4:	0002      	movs	r2, r0
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d302      	bcc.n	8005bb6 <I2C_IsAcknowledgeFailed+0x5e>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d113      	bne.n	8005bde <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bba:	2220      	movs	r2, #32
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2241      	movs	r2, #65	; 0x41
 8005bc6:	2120      	movs	r1, #32
 8005bc8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2242      	movs	r2, #66	; 0x42
 8005bce:	2100      	movs	r1, #0
 8005bd0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2240      	movs	r2, #64	; 0x40
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e02f      	b.n	8005c3e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2220      	movs	r2, #32
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d1d6      	bne.n	8005b9a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7ff fe62 	bl	80058c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	490e      	ldr	r1, [pc, #56]	; (8005c48 <I2C_IsAcknowledgeFailed+0xf0>)
 8005c10:	400a      	ands	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c18:	2204      	movs	r2, #4
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2241      	movs	r2, #65	; 0x41
 8005c24:	2120      	movs	r1, #32
 8005c26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2242      	movs	r2, #66	; 0x42
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2240      	movs	r2, #64	; 0x40
 8005c34:	2100      	movs	r1, #0
 8005c36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	0018      	movs	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b004      	add	sp, #16
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	fe00e800 	.word	0xfe00e800

08005c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	0008      	movs	r0, r1
 8005c56:	0011      	movs	r1, r2
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	240a      	movs	r4, #10
 8005c5c:	193b      	adds	r3, r7, r4
 8005c5e:	1c02      	adds	r2, r0, #0
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	2009      	movs	r0, #9
 8005c64:	183b      	adds	r3, r7, r0
 8005c66:	1c0a      	adds	r2, r1, #0
 8005c68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	0d51      	lsrs	r1, r2, #21
 8005c74:	2280      	movs	r2, #128	; 0x80
 8005c76:	00d2      	lsls	r2, r2, #3
 8005c78:	400a      	ands	r2, r1
 8005c7a:	490e      	ldr	r1, [pc, #56]	; (8005cb4 <I2C_TransferConfig+0x68>)
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	43d2      	mvns	r2, r2
 8005c80:	401a      	ands	r2, r3
 8005c82:	0011      	movs	r1, r2
 8005c84:	193b      	adds	r3, r7, r4
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	059b      	lsls	r3, r3, #22
 8005c8a:	0d9a      	lsrs	r2, r3, #22
 8005c8c:	183b      	adds	r3, r7, r0
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	0418      	lsls	r0, r3, #16
 8005c92:	23ff      	movs	r3, #255	; 0xff
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	4003      	ands	r3, r0
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b005      	add	sp, #20
 8005cb0:	bd90      	pop	{r4, r7, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	03ff63ff 	.word	0x03ff63ff

08005cb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2241      	movs	r2, #65	; 0x41
 8005cc6:	5c9b      	ldrb	r3, [r3, r2]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d138      	bne.n	8005d40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2240      	movs	r2, #64	; 0x40
 8005cd2:	5c9b      	ldrb	r3, [r3, r2]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e032      	b.n	8005d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2240      	movs	r2, #64	; 0x40
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2241      	movs	r2, #65	; 0x41
 8005ce8:	2124      	movs	r1, #36	; 0x24
 8005cea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	438a      	bics	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4911      	ldr	r1, [pc, #68]	; (8005d4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005d08:	400a      	ands	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6819      	ldr	r1, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2101      	movs	r1, #1
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2241      	movs	r2, #65	; 0x41
 8005d30:	2120      	movs	r1, #32
 8005d32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2240      	movs	r2, #64	; 0x40
 8005d38:	2100      	movs	r1, #0
 8005d3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	0018      	movs	r0, r3
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b002      	add	sp, #8
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	ffffefff 	.word	0xffffefff

08005d50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2241      	movs	r2, #65	; 0x41
 8005d5e:	5c9b      	ldrb	r3, [r3, r2]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d139      	bne.n	8005dda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2240      	movs	r2, #64	; 0x40
 8005d6a:	5c9b      	ldrb	r3, [r3, r2]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e033      	b.n	8005ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2240      	movs	r2, #64	; 0x40
 8005d78:	2101      	movs	r1, #1
 8005d7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2241      	movs	r2, #65	; 0x41
 8005d80:	2124      	movs	r1, #36	; 0x24
 8005d82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2101      	movs	r1, #1
 8005d90:	438a      	bics	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a11      	ldr	r2, [pc, #68]	; (8005de4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2241      	movs	r2, #65	; 0x41
 8005dca:	2120      	movs	r1, #32
 8005dcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2240      	movs	r2, #64	; 0x40
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	0018      	movs	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b004      	add	sp, #16
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	fffff0ff 	.word	0xfffff0ff

08005de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de8:	b5b0      	push	{r4, r5, r7, lr}
 8005dea:	b08a      	sub	sp, #40	; 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d102      	bne.n	8005dfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f000 fbbf 	bl	800657a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dfc:	4bc9      	ldr	r3, [pc, #804]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	220c      	movs	r2, #12
 8005e02:	4013      	ands	r3, r2
 8005e04:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e06:	4bc7      	ldr	r3, [pc, #796]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	2380      	movs	r3, #128	; 0x80
 8005e0c:	025b      	lsls	r3, r3, #9
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2201      	movs	r2, #1
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d100      	bne.n	8005e1e <HAL_RCC_OscConfig+0x36>
 8005e1c:	e07e      	b.n	8005f1c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d007      	beq.n	8005e34 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b0c      	cmp	r3, #12
 8005e28:	d112      	bne.n	8005e50 <HAL_RCC_OscConfig+0x68>
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	025b      	lsls	r3, r3, #9
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d10d      	bne.n	8005e50 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e34:	4bbb      	ldr	r3, [pc, #748]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	029b      	lsls	r3, r3, #10
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d100      	bne.n	8005e42 <HAL_RCC_OscConfig+0x5a>
 8005e40:	e06b      	b.n	8005f1a <HAL_RCC_OscConfig+0x132>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d167      	bne.n	8005f1a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f000 fb95 	bl	800657a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	025b      	lsls	r3, r3, #9
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d107      	bne.n	8005e6c <HAL_RCC_OscConfig+0x84>
 8005e5c:	4bb1      	ldr	r3, [pc, #708]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	4bb0      	ldr	r3, [pc, #704]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e62:	2180      	movs	r1, #128	; 0x80
 8005e64:	0249      	lsls	r1, r1, #9
 8005e66:	430a      	orrs	r2, r1
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	e027      	b.n	8005ebc <HAL_RCC_OscConfig+0xd4>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	23a0      	movs	r3, #160	; 0xa0
 8005e72:	02db      	lsls	r3, r3, #11
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d10e      	bne.n	8005e96 <HAL_RCC_OscConfig+0xae>
 8005e78:	4baa      	ldr	r3, [pc, #680]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4ba9      	ldr	r3, [pc, #676]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e7e:	2180      	movs	r1, #128	; 0x80
 8005e80:	02c9      	lsls	r1, r1, #11
 8005e82:	430a      	orrs	r2, r1
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	4ba7      	ldr	r3, [pc, #668]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4ba6      	ldr	r3, [pc, #664]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e8c:	2180      	movs	r1, #128	; 0x80
 8005e8e:	0249      	lsls	r1, r1, #9
 8005e90:	430a      	orrs	r2, r1
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e012      	b.n	8005ebc <HAL_RCC_OscConfig+0xd4>
 8005e96:	4ba3      	ldr	r3, [pc, #652]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4ba2      	ldr	r3, [pc, #648]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005e9c:	49a2      	ldr	r1, [pc, #648]	; (8006128 <HAL_RCC_OscConfig+0x340>)
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	4ba0      	ldr	r3, [pc, #640]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	2380      	movs	r3, #128	; 0x80
 8005ea8:	025b      	lsls	r3, r3, #9
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4b9c      	ldr	r3, [pc, #624]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	4b9b      	ldr	r3, [pc, #620]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005eb6:	499d      	ldr	r1, [pc, #628]	; (800612c <HAL_RCC_OscConfig+0x344>)
 8005eb8:	400a      	ands	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fe ffb2 	bl	8004e2c <HAL_GetTick>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ecc:	e009      	b.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ece:	f7fe ffad 	bl	8004e2c <HAL_GetTick>
 8005ed2:	0002      	movs	r2, r0
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b64      	cmp	r3, #100	; 0x64
 8005eda:	d902      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	f000 fb4c 	bl	800657a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ee2:	4b90      	ldr	r3, [pc, #576]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	029b      	lsls	r3, r3, #10
 8005eea:	4013      	ands	r3, r2
 8005eec:	d0ef      	beq.n	8005ece <HAL_RCC_OscConfig+0xe6>
 8005eee:	e015      	b.n	8005f1c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef0:	f7fe ff9c 	bl	8004e2c <HAL_GetTick>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005efa:	f7fe ff97 	bl	8004e2c <HAL_GetTick>
 8005efe:	0002      	movs	r2, r0
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b64      	cmp	r3, #100	; 0x64
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e336      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f0c:	4b85      	ldr	r3, [pc, #532]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	029b      	lsls	r3, r3, #10
 8005f14:	4013      	ands	r3, r2
 8005f16:	d1f0      	bne.n	8005efa <HAL_RCC_OscConfig+0x112>
 8005f18:	e000      	b.n	8005f1c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2202      	movs	r2, #2
 8005f22:	4013      	ands	r3, r2
 8005f24:	d100      	bne.n	8005f28 <HAL_RCC_OscConfig+0x140>
 8005f26:	e099      	b.n	800605c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	2220      	movs	r2, #32
 8005f32:	4013      	ands	r3, r2
 8005f34:	d009      	beq.n	8005f4a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005f36:	4b7b      	ldr	r3, [pc, #492]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b7a      	ldr	r3, [pc, #488]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005f3c:	2120      	movs	r1, #32
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	2220      	movs	r2, #32
 8005f46:	4393      	bics	r3, r2
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d005      	beq.n	8005f5c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b0c      	cmp	r3, #12
 8005f54:	d13e      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x1ec>
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d13b      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005f5c:	4b71      	ldr	r3, [pc, #452]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2204      	movs	r2, #4
 8005f62:	4013      	ands	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_RCC_OscConfig+0x188>
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e304      	b.n	800657a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f70:	4b6c      	ldr	r3, [pc, #432]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4a6e      	ldr	r2, [pc, #440]	; (8006130 <HAL_RCC_OscConfig+0x348>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	021a      	lsls	r2, r3, #8
 8005f80:	4b68      	ldr	r3, [pc, #416]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005f86:	4b67      	ldr	r3, [pc, #412]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2209      	movs	r2, #9
 8005f8c:	4393      	bics	r3, r2
 8005f8e:	0019      	movs	r1, r3
 8005f90:	4b64      	ldr	r3, [pc, #400]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f94:	430a      	orrs	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f98:	f000 fc42 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8005f9c:	0001      	movs	r1, r0
 8005f9e:	4b61      	ldr	r3, [pc, #388]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	091b      	lsrs	r3, r3, #4
 8005fa4:	220f      	movs	r2, #15
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	4a62      	ldr	r2, [pc, #392]	; (8006134 <HAL_RCC_OscConfig+0x34c>)
 8005faa:	5cd3      	ldrb	r3, [r2, r3]
 8005fac:	000a      	movs	r2, r1
 8005fae:	40da      	lsrs	r2, r3
 8005fb0:	4b61      	ldr	r3, [pc, #388]	; (8006138 <HAL_RCC_OscConfig+0x350>)
 8005fb2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005fb4:	4b61      	ldr	r3, [pc, #388]	; (800613c <HAL_RCC_OscConfig+0x354>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2513      	movs	r5, #19
 8005fba:	197c      	adds	r4, r7, r5
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7fe feef 	bl	8004da0 <HAL_InitTick>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005fc6:	197b      	adds	r3, r7, r5
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d046      	beq.n	800605c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005fce:	197b      	adds	r3, r7, r5
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	e2d2      	b.n	800657a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d027      	beq.n	800602a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005fda:	4b52      	ldr	r3, [pc, #328]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2209      	movs	r2, #9
 8005fe0:	4393      	bics	r3, r2
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	4b4f      	ldr	r3, [pc, #316]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fec:	f7fe ff1e 	bl	8004e2c <HAL_GetTick>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff6:	f7fe ff19 	bl	8004e2c <HAL_GetTick>
 8005ffa:	0002      	movs	r2, r0
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e2b8      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006008:	4b46      	ldr	r3, [pc, #280]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2204      	movs	r2, #4
 800600e:	4013      	ands	r3, r2
 8006010:	d0f1      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006012:	4b44      	ldr	r3, [pc, #272]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4a46      	ldr	r2, [pc, #280]	; (8006130 <HAL_RCC_OscConfig+0x348>)
 8006018:	4013      	ands	r3, r2
 800601a:	0019      	movs	r1, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	021a      	lsls	r2, r3, #8
 8006022:	4b40      	ldr	r3, [pc, #256]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	e018      	b.n	800605c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800602a:	4b3e      	ldr	r3, [pc, #248]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b3d      	ldr	r3, [pc, #244]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8006030:	2101      	movs	r1, #1
 8006032:	438a      	bics	r2, r1
 8006034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006036:	f7fe fef9 	bl	8004e2c <HAL_GetTick>
 800603a:	0003      	movs	r3, r0
 800603c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006040:	f7fe fef4 	bl	8004e2c <HAL_GetTick>
 8006044:	0002      	movs	r2, r0
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e293      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006052:	4b34      	ldr	r3, [pc, #208]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2204      	movs	r2, #4
 8006058:	4013      	ands	r3, r2
 800605a:	d1f1      	bne.n	8006040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2210      	movs	r2, #16
 8006062:	4013      	ands	r3, r2
 8006064:	d100      	bne.n	8006068 <HAL_RCC_OscConfig+0x280>
 8006066:	e0a2      	b.n	80061ae <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d140      	bne.n	80060f0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800606e:	4b2d      	ldr	r3, [pc, #180]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4013      	ands	r3, r2
 8006078:	d005      	beq.n	8006086 <HAL_RCC_OscConfig+0x29e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e279      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	4a2d      	ldr	r2, [pc, #180]	; (8006140 <HAL_RCC_OscConfig+0x358>)
 800608c:	4013      	ands	r3, r2
 800608e:	0019      	movs	r1, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006094:	4b23      	ldr	r3, [pc, #140]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800609a:	4b22      	ldr	r3, [pc, #136]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	0a19      	lsrs	r1, r3, #8
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	061a      	lsls	r2, r3, #24
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 80060aa:	430a      	orrs	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	0b5b      	lsrs	r3, r3, #13
 80060b4:	3301      	adds	r3, #1
 80060b6:	2280      	movs	r2, #128	; 0x80
 80060b8:	0212      	lsls	r2, r2, #8
 80060ba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80060bc:	4b19      	ldr	r3, [pc, #100]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	091b      	lsrs	r3, r3, #4
 80060c2:	210f      	movs	r1, #15
 80060c4:	400b      	ands	r3, r1
 80060c6:	491b      	ldr	r1, [pc, #108]	; (8006134 <HAL_RCC_OscConfig+0x34c>)
 80060c8:	5ccb      	ldrb	r3, [r1, r3]
 80060ca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <HAL_RCC_OscConfig+0x350>)
 80060ce:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80060d0:	4b1a      	ldr	r3, [pc, #104]	; (800613c <HAL_RCC_OscConfig+0x354>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2513      	movs	r5, #19
 80060d6:	197c      	adds	r4, r7, r5
 80060d8:	0018      	movs	r0, r3
 80060da:	f7fe fe61 	bl	8004da0 <HAL_InitTick>
 80060de:	0003      	movs	r3, r0
 80060e0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80060e2:	197b      	adds	r3, r7, r5
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d061      	beq.n	80061ae <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80060ea:	197b      	adds	r3, r7, r5
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	e244      	b.n	800657a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d040      	beq.n	800617a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <HAL_RCC_OscConfig+0x33c>)
 80060fe:	2180      	movs	r1, #128	; 0x80
 8006100:	0049      	lsls	r1, r1, #1
 8006102:	430a      	orrs	r2, r1
 8006104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006106:	f7fe fe91 	bl	8004e2c <HAL_GetTick>
 800610a:	0003      	movs	r3, r0
 800610c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800610e:	e019      	b.n	8006144 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006110:	f7fe fe8c 	bl	8004e2c <HAL_GetTick>
 8006114:	0002      	movs	r2, r0
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d912      	bls.n	8006144 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e22b      	b.n	800657a <HAL_RCC_OscConfig+0x792>
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	40021000 	.word	0x40021000
 8006128:	fffeffff 	.word	0xfffeffff
 800612c:	fffbffff 	.word	0xfffbffff
 8006130:	ffffe0ff 	.word	0xffffe0ff
 8006134:	0800b5a4 	.word	0x0800b5a4
 8006138:	20000008 	.word	0x20000008
 800613c:	2000000c 	.word	0x2000000c
 8006140:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006144:	4bca      	ldr	r3, [pc, #808]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4013      	ands	r3, r2
 800614e:	d0df      	beq.n	8006110 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006150:	4bc7      	ldr	r3, [pc, #796]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4ac7      	ldr	r2, [pc, #796]	; (8006474 <HAL_RCC_OscConfig+0x68c>)
 8006156:	4013      	ands	r3, r2
 8006158:	0019      	movs	r1, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800615e:	4bc4      	ldr	r3, [pc, #784]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006164:	4bc2      	ldr	r3, [pc, #776]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	0a19      	lsrs	r1, r3, #8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	061a      	lsls	r2, r3, #24
 8006172:	4bbf      	ldr	r3, [pc, #764]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]
 8006178:	e019      	b.n	80061ae <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800617a:	4bbd      	ldr	r3, [pc, #756]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4bbc      	ldr	r3, [pc, #752]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006180:	49bd      	ldr	r1, [pc, #756]	; (8006478 <HAL_RCC_OscConfig+0x690>)
 8006182:	400a      	ands	r2, r1
 8006184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006186:	f7fe fe51 	bl	8004e2c <HAL_GetTick>
 800618a:	0003      	movs	r3, r0
 800618c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006190:	f7fe fe4c 	bl	8004e2c <HAL_GetTick>
 8006194:	0002      	movs	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e1eb      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80061a2:	4bb3      	ldr	r3, [pc, #716]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	2380      	movs	r3, #128	; 0x80
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4013      	ands	r3, r2
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2208      	movs	r2, #8
 80061b4:	4013      	ands	r3, r2
 80061b6:	d036      	beq.n	8006226 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d019      	beq.n	80061f4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c0:	4bab      	ldr	r3, [pc, #684]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80061c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061c4:	4baa      	ldr	r3, [pc, #680]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80061c6:	2101      	movs	r1, #1
 80061c8:	430a      	orrs	r2, r1
 80061ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061cc:	f7fe fe2e 	bl	8004e2c <HAL_GetTick>
 80061d0:	0003      	movs	r3, r0
 80061d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d6:	f7fe fe29 	bl	8004e2c <HAL_GetTick>
 80061da:	0002      	movs	r2, r0
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e1c8      	b.n	800657a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061e8:	4ba1      	ldr	r3, [pc, #644]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80061ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ec:	2202      	movs	r2, #2
 80061ee:	4013      	ands	r3, r2
 80061f0:	d0f1      	beq.n	80061d6 <HAL_RCC_OscConfig+0x3ee>
 80061f2:	e018      	b.n	8006226 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f4:	4b9e      	ldr	r3, [pc, #632]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80061f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061f8:	4b9d      	ldr	r3, [pc, #628]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80061fa:	2101      	movs	r1, #1
 80061fc:	438a      	bics	r2, r1
 80061fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006200:	f7fe fe14 	bl	8004e2c <HAL_GetTick>
 8006204:	0003      	movs	r3, r0
 8006206:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800620a:	f7fe fe0f 	bl	8004e2c <HAL_GetTick>
 800620e:	0002      	movs	r2, r0
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e1ae      	b.n	800657a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800621c:	4b94      	ldr	r3, [pc, #592]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 800621e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006220:	2202      	movs	r2, #2
 8006222:	4013      	ands	r3, r2
 8006224:	d1f1      	bne.n	800620a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2204      	movs	r2, #4
 800622c:	4013      	ands	r3, r2
 800622e:	d100      	bne.n	8006232 <HAL_RCC_OscConfig+0x44a>
 8006230:	e0ae      	b.n	8006390 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006232:	2023      	movs	r0, #35	; 0x23
 8006234:	183b      	adds	r3, r7, r0
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800623a:	4b8d      	ldr	r3, [pc, #564]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 800623c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	055b      	lsls	r3, r3, #21
 8006242:	4013      	ands	r3, r2
 8006244:	d109      	bne.n	800625a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006246:	4b8a      	ldr	r3, [pc, #552]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800624a:	4b89      	ldr	r3, [pc, #548]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 800624c:	2180      	movs	r1, #128	; 0x80
 800624e:	0549      	lsls	r1, r1, #21
 8006250:	430a      	orrs	r2, r1
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006254:	183b      	adds	r3, r7, r0
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625a:	4b88      	ldr	r3, [pc, #544]	; (800647c <HAL_RCC_OscConfig+0x694>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	4013      	ands	r3, r2
 8006264:	d11a      	bne.n	800629c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006266:	4b85      	ldr	r3, [pc, #532]	; (800647c <HAL_RCC_OscConfig+0x694>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4b84      	ldr	r3, [pc, #528]	; (800647c <HAL_RCC_OscConfig+0x694>)
 800626c:	2180      	movs	r1, #128	; 0x80
 800626e:	0049      	lsls	r1, r1, #1
 8006270:	430a      	orrs	r2, r1
 8006272:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006274:	f7fe fdda 	bl	8004e2c <HAL_GetTick>
 8006278:	0003      	movs	r3, r0
 800627a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800627e:	f7fe fdd5 	bl	8004e2c <HAL_GetTick>
 8006282:	0002      	movs	r2, r0
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b64      	cmp	r3, #100	; 0x64
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e174      	b.n	800657a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006290:	4b7a      	ldr	r3, [pc, #488]	; (800647c <HAL_RCC_OscConfig+0x694>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	2380      	movs	r3, #128	; 0x80
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4013      	ands	r3, r2
 800629a:	d0f0      	beq.n	800627e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d107      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4d0>
 80062a8:	4b71      	ldr	r3, [pc, #452]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ac:	4b70      	ldr	r3, [pc, #448]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062ae:	2180      	movs	r1, #128	; 0x80
 80062b0:	0049      	lsls	r1, r1, #1
 80062b2:	430a      	orrs	r2, r1
 80062b4:	651a      	str	r2, [r3, #80]	; 0x50
 80062b6:	e031      	b.n	800631c <HAL_RCC_OscConfig+0x534>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10c      	bne.n	80062da <HAL_RCC_OscConfig+0x4f2>
 80062c0:	4b6b      	ldr	r3, [pc, #428]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062c4:	4b6a      	ldr	r3, [pc, #424]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062c6:	496c      	ldr	r1, [pc, #432]	; (8006478 <HAL_RCC_OscConfig+0x690>)
 80062c8:	400a      	ands	r2, r1
 80062ca:	651a      	str	r2, [r3, #80]	; 0x50
 80062cc:	4b68      	ldr	r3, [pc, #416]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062d0:	4b67      	ldr	r3, [pc, #412]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062d2:	496b      	ldr	r1, [pc, #428]	; (8006480 <HAL_RCC_OscConfig+0x698>)
 80062d4:	400a      	ands	r2, r1
 80062d6:	651a      	str	r2, [r3, #80]	; 0x50
 80062d8:	e020      	b.n	800631c <HAL_RCC_OscConfig+0x534>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	23a0      	movs	r3, #160	; 0xa0
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d10e      	bne.n	8006304 <HAL_RCC_OscConfig+0x51c>
 80062e6:	4b62      	ldr	r3, [pc, #392]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ea:	4b61      	ldr	r3, [pc, #388]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062ec:	2180      	movs	r1, #128	; 0x80
 80062ee:	00c9      	lsls	r1, r1, #3
 80062f0:	430a      	orrs	r2, r1
 80062f2:	651a      	str	r2, [r3, #80]	; 0x50
 80062f4:	4b5e      	ldr	r3, [pc, #376]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062f8:	4b5d      	ldr	r3, [pc, #372]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	0049      	lsls	r1, r1, #1
 80062fe:	430a      	orrs	r2, r1
 8006300:	651a      	str	r2, [r3, #80]	; 0x50
 8006302:	e00b      	b.n	800631c <HAL_RCC_OscConfig+0x534>
 8006304:	4b5a      	ldr	r3, [pc, #360]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006308:	4b59      	ldr	r3, [pc, #356]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 800630a:	495b      	ldr	r1, [pc, #364]	; (8006478 <HAL_RCC_OscConfig+0x690>)
 800630c:	400a      	ands	r2, r1
 800630e:	651a      	str	r2, [r3, #80]	; 0x50
 8006310:	4b57      	ldr	r3, [pc, #348]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006314:	4b56      	ldr	r3, [pc, #344]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006316:	495a      	ldr	r1, [pc, #360]	; (8006480 <HAL_RCC_OscConfig+0x698>)
 8006318:	400a      	ands	r2, r1
 800631a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d015      	beq.n	8006350 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006324:	f7fe fd82 	bl	8004e2c <HAL_GetTick>
 8006328:	0003      	movs	r3, r0
 800632a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800632c:	e009      	b.n	8006342 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800632e:	f7fe fd7d 	bl	8004e2c <HAL_GetTick>
 8006332:	0002      	movs	r2, r0
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	4a52      	ldr	r2, [pc, #328]	; (8006484 <HAL_RCC_OscConfig+0x69c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e11b      	b.n	800657a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006342:	4b4b      	ldr	r3, [pc, #300]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006346:	2380      	movs	r3, #128	; 0x80
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4013      	ands	r3, r2
 800634c:	d0ef      	beq.n	800632e <HAL_RCC_OscConfig+0x546>
 800634e:	e014      	b.n	800637a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006350:	f7fe fd6c 	bl	8004e2c <HAL_GetTick>
 8006354:	0003      	movs	r3, r0
 8006356:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006358:	e009      	b.n	800636e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800635a:	f7fe fd67 	bl	8004e2c <HAL_GetTick>
 800635e:	0002      	movs	r2, r0
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	4a47      	ldr	r2, [pc, #284]	; (8006484 <HAL_RCC_OscConfig+0x69c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e105      	b.n	800657a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800636e:	4b40      	ldr	r3, [pc, #256]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4013      	ands	r3, r2
 8006378:	d1ef      	bne.n	800635a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800637a:	2323      	movs	r3, #35	; 0x23
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d105      	bne.n	8006390 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006384:	4b3a      	ldr	r3, [pc, #232]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006388:	4b39      	ldr	r3, [pc, #228]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 800638a:	493f      	ldr	r1, [pc, #252]	; (8006488 <HAL_RCC_OscConfig+0x6a0>)
 800638c:	400a      	ands	r2, r1
 800638e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2220      	movs	r2, #32
 8006396:	4013      	ands	r3, r2
 8006398:	d049      	beq.n	800642e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d026      	beq.n	80063f0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80063a2:	4b33      	ldr	r3, [pc, #204]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	4b32      	ldr	r3, [pc, #200]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80063a8:	2101      	movs	r1, #1
 80063aa:	430a      	orrs	r2, r1
 80063ac:	609a      	str	r2, [r3, #8]
 80063ae:	4b30      	ldr	r3, [pc, #192]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80063b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b2:	4b2f      	ldr	r3, [pc, #188]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80063b4:	2101      	movs	r1, #1
 80063b6:	430a      	orrs	r2, r1
 80063b8:	635a      	str	r2, [r3, #52]	; 0x34
 80063ba:	4b34      	ldr	r3, [pc, #208]	; (800648c <HAL_RCC_OscConfig+0x6a4>)
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	4b33      	ldr	r3, [pc, #204]	; (800648c <HAL_RCC_OscConfig+0x6a4>)
 80063c0:	2180      	movs	r1, #128	; 0x80
 80063c2:	0189      	lsls	r1, r1, #6
 80063c4:	430a      	orrs	r2, r1
 80063c6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f7fe fd30 	bl	8004e2c <HAL_GetTick>
 80063cc:	0003      	movs	r3, r0
 80063ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063d2:	f7fe fd2b 	bl	8004e2c <HAL_GetTick>
 80063d6:	0002      	movs	r2, r0
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e0ca      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063e4:	4b22      	ldr	r3, [pc, #136]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2202      	movs	r2, #2
 80063ea:	4013      	ands	r3, r2
 80063ec:	d0f1      	beq.n	80063d2 <HAL_RCC_OscConfig+0x5ea>
 80063ee:	e01e      	b.n	800642e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80063f0:	4b1f      	ldr	r3, [pc, #124]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 80063f6:	2101      	movs	r1, #1
 80063f8:	438a      	bics	r2, r1
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	4b23      	ldr	r3, [pc, #140]	; (800648c <HAL_RCC_OscConfig+0x6a4>)
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	4b22      	ldr	r3, [pc, #136]	; (800648c <HAL_RCC_OscConfig+0x6a4>)
 8006402:	4923      	ldr	r1, [pc, #140]	; (8006490 <HAL_RCC_OscConfig+0x6a8>)
 8006404:	400a      	ands	r2, r1
 8006406:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006408:	f7fe fd10 	bl	8004e2c <HAL_GetTick>
 800640c:	0003      	movs	r3, r0
 800640e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006410:	e008      	b.n	8006424 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006412:	f7fe fd0b 	bl	8004e2c <HAL_GetTick>
 8006416:	0002      	movs	r2, r0
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e0aa      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006424:	4b12      	ldr	r3, [pc, #72]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2202      	movs	r2, #2
 800642a:	4013      	ands	r3, r2
 800642c:	d1f1      	bne.n	8006412 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	2b00      	cmp	r3, #0
 8006434:	d100      	bne.n	8006438 <HAL_RCC_OscConfig+0x650>
 8006436:	e09f      	b.n	8006578 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b0c      	cmp	r3, #12
 800643c:	d100      	bne.n	8006440 <HAL_RCC_OscConfig+0x658>
 800643e:	e078      	b.n	8006532 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	2b02      	cmp	r3, #2
 8006446:	d159      	bne.n	80064fc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	4b08      	ldr	r3, [pc, #32]	; (8006470 <HAL_RCC_OscConfig+0x688>)
 800644e:	4911      	ldr	r1, [pc, #68]	; (8006494 <HAL_RCC_OscConfig+0x6ac>)
 8006450:	400a      	ands	r2, r1
 8006452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006454:	f7fe fcea 	bl	8004e2c <HAL_GetTick>
 8006458:	0003      	movs	r3, r0
 800645a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800645c:	e01c      	b.n	8006498 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800645e:	f7fe fce5 	bl	8004e2c <HAL_GetTick>
 8006462:	0002      	movs	r2, r0
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d915      	bls.n	8006498 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e084      	b.n	800657a <HAL_RCC_OscConfig+0x792>
 8006470:	40021000 	.word	0x40021000
 8006474:	ffff1fff 	.word	0xffff1fff
 8006478:	fffffeff 	.word	0xfffffeff
 800647c:	40007000 	.word	0x40007000
 8006480:	fffffbff 	.word	0xfffffbff
 8006484:	00001388 	.word	0x00001388
 8006488:	efffffff 	.word	0xefffffff
 800648c:	40010000 	.word	0x40010000
 8006490:	ffffdfff 	.word	0xffffdfff
 8006494:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006498:	4b3a      	ldr	r3, [pc, #232]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	2380      	movs	r3, #128	; 0x80
 800649e:	049b      	lsls	r3, r3, #18
 80064a0:	4013      	ands	r3, r2
 80064a2:	d1dc      	bne.n	800645e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064a4:	4b37      	ldr	r3, [pc, #220]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a37      	ldr	r2, [pc, #220]	; (8006588 <HAL_RCC_OscConfig+0x7a0>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	0019      	movs	r1, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	431a      	orrs	r2, r3
 80064be:	4b31      	ldr	r3, [pc, #196]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 80064c0:	430a      	orrs	r2, r1
 80064c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064c4:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b2e      	ldr	r3, [pc, #184]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 80064ca:	2180      	movs	r1, #128	; 0x80
 80064cc:	0449      	lsls	r1, r1, #17
 80064ce:	430a      	orrs	r2, r1
 80064d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d2:	f7fe fcab 	bl	8004e2c <HAL_GetTick>
 80064d6:	0003      	movs	r3, r0
 80064d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fe fca6 	bl	8004e2c <HAL_GetTick>
 80064e0:	0002      	movs	r2, r0
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e045      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80064ee:	4b25      	ldr	r3, [pc, #148]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	2380      	movs	r3, #128	; 0x80
 80064f4:	049b      	lsls	r3, r3, #18
 80064f6:	4013      	ands	r3, r2
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0x6f4>
 80064fa:	e03d      	b.n	8006578 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064fc:	4b21      	ldr	r3, [pc, #132]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 8006502:	4922      	ldr	r1, [pc, #136]	; (800658c <HAL_RCC_OscConfig+0x7a4>)
 8006504:	400a      	ands	r2, r1
 8006506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006508:	f7fe fc90 	bl	8004e2c <HAL_GetTick>
 800650c:	0003      	movs	r3, r0
 800650e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006510:	e008      	b.n	8006524 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006512:	f7fe fc8b 	bl	8004e2c <HAL_GetTick>
 8006516:	0002      	movs	r2, r0
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e02a      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006524:	4b17      	ldr	r3, [pc, #92]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	2380      	movs	r3, #128	; 0x80
 800652a:	049b      	lsls	r3, r3, #18
 800652c:	4013      	ands	r3, r2
 800652e:	d1f0      	bne.n	8006512 <HAL_RCC_OscConfig+0x72a>
 8006530:	e022      	b.n	8006578 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e01d      	b.n	800657a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800653e:	4b11      	ldr	r3, [pc, #68]	; (8006584 <HAL_RCC_OscConfig+0x79c>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	2380      	movs	r3, #128	; 0x80
 8006548:	025b      	lsls	r3, r3, #9
 800654a:	401a      	ands	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	429a      	cmp	r2, r3
 8006552:	d10f      	bne.n	8006574 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	23f0      	movs	r3, #240	; 0xf0
 8006558:	039b      	lsls	r3, r3, #14
 800655a:	401a      	ands	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006560:	429a      	cmp	r2, r3
 8006562:	d107      	bne.n	8006574 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	23c0      	movs	r3, #192	; 0xc0
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	401a      	ands	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	0018      	movs	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	b00a      	add	sp, #40	; 0x28
 8006580:	bdb0      	pop	{r4, r5, r7, pc}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	40021000 	.word	0x40021000
 8006588:	ff02ffff 	.word	0xff02ffff
 800658c:	feffffff 	.word	0xfeffffff

08006590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006590:	b5b0      	push	{r4, r5, r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e128      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065a4:	4b96      	ldr	r3, [pc, #600]	; (8006800 <HAL_RCC_ClockConfig+0x270>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2201      	movs	r2, #1
 80065aa:	4013      	ands	r3, r2
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d91e      	bls.n	80065f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b2:	4b93      	ldr	r3, [pc, #588]	; (8006800 <HAL_RCC_ClockConfig+0x270>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2201      	movs	r2, #1
 80065b8:	4393      	bics	r3, r2
 80065ba:	0019      	movs	r1, r3
 80065bc:	4b90      	ldr	r3, [pc, #576]	; (8006800 <HAL_RCC_ClockConfig+0x270>)
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065c4:	f7fe fc32 	bl	8004e2c <HAL_GetTick>
 80065c8:	0003      	movs	r3, r0
 80065ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065cc:	e009      	b.n	80065e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ce:	f7fe fc2d 	bl	8004e2c <HAL_GetTick>
 80065d2:	0002      	movs	r2, r0
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	4a8a      	ldr	r2, [pc, #552]	; (8006804 <HAL_RCC_ClockConfig+0x274>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e109      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e2:	4b87      	ldr	r3, [pc, #540]	; (8006800 <HAL_RCC_ClockConfig+0x270>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2201      	movs	r2, #1
 80065e8:	4013      	ands	r3, r2
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d1ee      	bne.n	80065ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2202      	movs	r2, #2
 80065f6:	4013      	ands	r3, r2
 80065f8:	d009      	beq.n	800660e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065fa:	4b83      	ldr	r3, [pc, #524]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	22f0      	movs	r2, #240	; 0xf0
 8006600:	4393      	bics	r3, r2
 8006602:	0019      	movs	r1, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	4b7f      	ldr	r3, [pc, #508]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 800660a:	430a      	orrs	r2, r1
 800660c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2201      	movs	r2, #1
 8006614:	4013      	ands	r3, r2
 8006616:	d100      	bne.n	800661a <HAL_RCC_ClockConfig+0x8a>
 8006618:	e089      	b.n	800672e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2b02      	cmp	r3, #2
 8006620:	d107      	bne.n	8006632 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006622:	4b79      	ldr	r3, [pc, #484]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	029b      	lsls	r3, r3, #10
 800662a:	4013      	ands	r3, r2
 800662c:	d120      	bne.n	8006670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e0e1      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b03      	cmp	r3, #3
 8006638:	d107      	bne.n	800664a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800663a:	4b73      	ldr	r3, [pc, #460]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	2380      	movs	r3, #128	; 0x80
 8006640:	049b      	lsls	r3, r3, #18
 8006642:	4013      	ands	r3, r2
 8006644:	d114      	bne.n	8006670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e0d5      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d106      	bne.n	8006660 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006652:	4b6d      	ldr	r3, [pc, #436]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2204      	movs	r2, #4
 8006658:	4013      	ands	r3, r2
 800665a:	d109      	bne.n	8006670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0ca      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006660:	4b69      	ldr	r3, [pc, #420]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4013      	ands	r3, r2
 800666a:	d101      	bne.n	8006670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e0c2      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006670:	4b65      	ldr	r3, [pc, #404]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	2203      	movs	r2, #3
 8006676:	4393      	bics	r3, r2
 8006678:	0019      	movs	r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	4b62      	ldr	r3, [pc, #392]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 8006680:	430a      	orrs	r2, r1
 8006682:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006684:	f7fe fbd2 	bl	8004e2c <HAL_GetTick>
 8006688:	0003      	movs	r3, r0
 800668a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d111      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006694:	e009      	b.n	80066aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006696:	f7fe fbc9 	bl	8004e2c <HAL_GetTick>
 800669a:	0002      	movs	r2, r0
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	4a58      	ldr	r2, [pc, #352]	; (8006804 <HAL_RCC_ClockConfig+0x274>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e0a5      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80066aa:	4b57      	ldr	r3, [pc, #348]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	220c      	movs	r2, #12
 80066b0:	4013      	ands	r3, r2
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d1ef      	bne.n	8006696 <HAL_RCC_ClockConfig+0x106>
 80066b6:	e03a      	b.n	800672e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d111      	bne.n	80066e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066c0:	e009      	b.n	80066d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c2:	f7fe fbb3 	bl	8004e2c <HAL_GetTick>
 80066c6:	0002      	movs	r2, r0
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	4a4d      	ldr	r2, [pc, #308]	; (8006804 <HAL_RCC_ClockConfig+0x274>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e08f      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066d6:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	220c      	movs	r2, #12
 80066dc:	4013      	ands	r3, r2
 80066de:	2b0c      	cmp	r3, #12
 80066e0:	d1ef      	bne.n	80066c2 <HAL_RCC_ClockConfig+0x132>
 80066e2:	e024      	b.n	800672e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d11b      	bne.n	8006724 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80066ec:	e009      	b.n	8006702 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ee:	f7fe fb9d 	bl	8004e2c <HAL_GetTick>
 80066f2:	0002      	movs	r2, r0
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	4a42      	ldr	r2, [pc, #264]	; (8006804 <HAL_RCC_ClockConfig+0x274>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e079      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006702:	4b41      	ldr	r3, [pc, #260]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	220c      	movs	r2, #12
 8006708:	4013      	ands	r3, r2
 800670a:	2b04      	cmp	r3, #4
 800670c:	d1ef      	bne.n	80066ee <HAL_RCC_ClockConfig+0x15e>
 800670e:	e00e      	b.n	800672e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006710:	f7fe fb8c 	bl	8004e2c <HAL_GetTick>
 8006714:	0002      	movs	r2, r0
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	4a3a      	ldr	r2, [pc, #232]	; (8006804 <HAL_RCC_ClockConfig+0x274>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e068      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006724:	4b38      	ldr	r3, [pc, #224]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	220c      	movs	r2, #12
 800672a:	4013      	ands	r3, r2
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800672e:	4b34      	ldr	r3, [pc, #208]	; (8006800 <HAL_RCC_ClockConfig+0x270>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2201      	movs	r2, #1
 8006734:	4013      	ands	r3, r2
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d21e      	bcs.n	800677a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673c:	4b30      	ldr	r3, [pc, #192]	; (8006800 <HAL_RCC_ClockConfig+0x270>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2201      	movs	r2, #1
 8006742:	4393      	bics	r3, r2
 8006744:	0019      	movs	r1, r3
 8006746:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <HAL_RCC_ClockConfig+0x270>)
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800674e:	f7fe fb6d 	bl	8004e2c <HAL_GetTick>
 8006752:	0003      	movs	r3, r0
 8006754:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006756:	e009      	b.n	800676c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006758:	f7fe fb68 	bl	8004e2c <HAL_GetTick>
 800675c:	0002      	movs	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	4a28      	ldr	r2, [pc, #160]	; (8006804 <HAL_RCC_ClockConfig+0x274>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d901      	bls.n	800676c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e044      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800676c:	4b24      	ldr	r3, [pc, #144]	; (8006800 <HAL_RCC_ClockConfig+0x270>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2201      	movs	r2, #1
 8006772:	4013      	ands	r3, r2
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d1ee      	bne.n	8006758 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2204      	movs	r2, #4
 8006780:	4013      	ands	r3, r2
 8006782:	d009      	beq.n	8006798 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	4a20      	ldr	r2, [pc, #128]	; (800680c <HAL_RCC_ClockConfig+0x27c>)
 800678a:	4013      	ands	r3, r2
 800678c:	0019      	movs	r1, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 8006794:	430a      	orrs	r2, r1
 8006796:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2208      	movs	r2, #8
 800679e:	4013      	ands	r3, r2
 80067a0:	d00a      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067a2:	4b19      	ldr	r3, [pc, #100]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	4a1a      	ldr	r2, [pc, #104]	; (8006810 <HAL_RCC_ClockConfig+0x280>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	0019      	movs	r1, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	00da      	lsls	r2, r3, #3
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 80067b4:	430a      	orrs	r2, r1
 80067b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067b8:	f000 f832 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 80067bc:	0001      	movs	r1, r0
 80067be:	4b12      	ldr	r3, [pc, #72]	; (8006808 <HAL_RCC_ClockConfig+0x278>)
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	091b      	lsrs	r3, r3, #4
 80067c4:	220f      	movs	r2, #15
 80067c6:	4013      	ands	r3, r2
 80067c8:	4a12      	ldr	r2, [pc, #72]	; (8006814 <HAL_RCC_ClockConfig+0x284>)
 80067ca:	5cd3      	ldrb	r3, [r2, r3]
 80067cc:	000a      	movs	r2, r1
 80067ce:	40da      	lsrs	r2, r3
 80067d0:	4b11      	ldr	r3, [pc, #68]	; (8006818 <HAL_RCC_ClockConfig+0x288>)
 80067d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80067d4:	4b11      	ldr	r3, [pc, #68]	; (800681c <HAL_RCC_ClockConfig+0x28c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	250b      	movs	r5, #11
 80067da:	197c      	adds	r4, r7, r5
 80067dc:	0018      	movs	r0, r3
 80067de:	f7fe fadf 	bl	8004da0 <HAL_InitTick>
 80067e2:	0003      	movs	r3, r0
 80067e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80067e6:	197b      	adds	r3, r7, r5
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80067ee:	197b      	adds	r3, r7, r5
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	e000      	b.n	80067f6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	0018      	movs	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b004      	add	sp, #16
 80067fc:	bdb0      	pop	{r4, r5, r7, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	40022000 	.word	0x40022000
 8006804:	00001388 	.word	0x00001388
 8006808:	40021000 	.word	0x40021000
 800680c:	fffff8ff 	.word	0xfffff8ff
 8006810:	ffffc7ff 	.word	0xffffc7ff
 8006814:	0800b5a4 	.word	0x0800b5a4
 8006818:	20000008 	.word	0x20000008
 800681c:	2000000c 	.word	0x2000000c

08006820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006820:	b5b0      	push	{r4, r5, r7, lr}
 8006822:	b08e      	sub	sp, #56	; 0x38
 8006824:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006826:	4b4c      	ldr	r3, [pc, #304]	; (8006958 <HAL_RCC_GetSysClockFreq+0x138>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800682c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800682e:	230c      	movs	r3, #12
 8006830:	4013      	ands	r3, r2
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d014      	beq.n	8006860 <HAL_RCC_GetSysClockFreq+0x40>
 8006836:	d900      	bls.n	800683a <HAL_RCC_GetSysClockFreq+0x1a>
 8006838:	e07b      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x112>
 800683a:	2b04      	cmp	r3, #4
 800683c:	d002      	beq.n	8006844 <HAL_RCC_GetSysClockFreq+0x24>
 800683e:	2b08      	cmp	r3, #8
 8006840:	d00b      	beq.n	800685a <HAL_RCC_GetSysClockFreq+0x3a>
 8006842:	e076      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006844:	4b44      	ldr	r3, [pc, #272]	; (8006958 <HAL_RCC_GetSysClockFreq+0x138>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2210      	movs	r2, #16
 800684a:	4013      	ands	r3, r2
 800684c:	d002      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800684e:	4b43      	ldr	r3, [pc, #268]	; (800695c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006850:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006852:	e07c      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006854:	4b42      	ldr	r3, [pc, #264]	; (8006960 <HAL_RCC_GetSysClockFreq+0x140>)
 8006856:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006858:	e079      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800685a:	4b42      	ldr	r3, [pc, #264]	; (8006964 <HAL_RCC_GetSysClockFreq+0x144>)
 800685c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800685e:	e076      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	0c9a      	lsrs	r2, r3, #18
 8006864:	230f      	movs	r3, #15
 8006866:	401a      	ands	r2, r3
 8006868:	4b3f      	ldr	r3, [pc, #252]	; (8006968 <HAL_RCC_GetSysClockFreq+0x148>)
 800686a:	5c9b      	ldrb	r3, [r3, r2]
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	0d9a      	lsrs	r2, r3, #22
 8006872:	2303      	movs	r3, #3
 8006874:	4013      	ands	r3, r2
 8006876:	3301      	adds	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800687a:	4b37      	ldr	r3, [pc, #220]	; (8006958 <HAL_RCC_GetSysClockFreq+0x138>)
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	2380      	movs	r3, #128	; 0x80
 8006880:	025b      	lsls	r3, r3, #9
 8006882:	4013      	ands	r3, r2
 8006884:	d01a      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	4a35      	ldr	r2, [pc, #212]	; (8006964 <HAL_RCC_GetSysClockFreq+0x144>)
 8006890:	2300      	movs	r3, #0
 8006892:	69b8      	ldr	r0, [r7, #24]
 8006894:	69f9      	ldr	r1, [r7, #28]
 8006896:	f7f9 fe61 	bl	800055c <__aeabi_lmul>
 800689a:	0002      	movs	r2, r0
 800689c:	000b      	movs	r3, r1
 800689e:	0010      	movs	r0, r2
 80068a0:	0019      	movs	r1, r3
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f7f9 fe35 	bl	800051c <__aeabi_uldivmod>
 80068b2:	0002      	movs	r2, r0
 80068b4:	000b      	movs	r3, r1
 80068b6:	0013      	movs	r3, r2
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ba:	e037      	b.n	800692c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80068bc:	4b26      	ldr	r3, [pc, #152]	; (8006958 <HAL_RCC_GetSysClockFreq+0x138>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2210      	movs	r2, #16
 80068c2:	4013      	ands	r3, r2
 80068c4:	d01a      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	4a23      	ldr	r2, [pc, #140]	; (800695c <HAL_RCC_GetSysClockFreq+0x13c>)
 80068d0:	2300      	movs	r3, #0
 80068d2:	68b8      	ldr	r0, [r7, #8]
 80068d4:	68f9      	ldr	r1, [r7, #12]
 80068d6:	f7f9 fe41 	bl	800055c <__aeabi_lmul>
 80068da:	0002      	movs	r2, r0
 80068dc:	000b      	movs	r3, r1
 80068de:	0010      	movs	r0, r2
 80068e0:	0019      	movs	r1, r3
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f7f9 fe15 	bl	800051c <__aeabi_uldivmod>
 80068f2:	0002      	movs	r2, r0
 80068f4:	000b      	movs	r3, r1
 80068f6:	0013      	movs	r3, r2
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
 80068fa:	e017      	b.n	800692c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	0018      	movs	r0, r3
 8006900:	2300      	movs	r3, #0
 8006902:	0019      	movs	r1, r3
 8006904:	4a16      	ldr	r2, [pc, #88]	; (8006960 <HAL_RCC_GetSysClockFreq+0x140>)
 8006906:	2300      	movs	r3, #0
 8006908:	f7f9 fe28 	bl	800055c <__aeabi_lmul>
 800690c:	0002      	movs	r2, r0
 800690e:	000b      	movs	r3, r1
 8006910:	0010      	movs	r0, r2
 8006912:	0019      	movs	r1, r3
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	001c      	movs	r4, r3
 8006918:	2300      	movs	r3, #0
 800691a:	001d      	movs	r5, r3
 800691c:	0022      	movs	r2, r4
 800691e:	002b      	movs	r3, r5
 8006920:	f7f9 fdfc 	bl	800051c <__aeabi_uldivmod>
 8006924:	0002      	movs	r2, r0
 8006926:	000b      	movs	r3, r1
 8006928:	0013      	movs	r3, r2
 800692a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006930:	e00d      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <HAL_RCC_GetSysClockFreq+0x138>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	0b5b      	lsrs	r3, r3, #13
 8006938:	2207      	movs	r2, #7
 800693a:	4013      	ands	r3, r2
 800693c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	3301      	adds	r3, #1
 8006942:	2280      	movs	r2, #128	; 0x80
 8006944:	0212      	lsls	r2, r2, #8
 8006946:	409a      	lsls	r2, r3
 8006948:	0013      	movs	r3, r2
 800694a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800694c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006950:	0018      	movs	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	b00e      	add	sp, #56	; 0x38
 8006956:	bdb0      	pop	{r4, r5, r7, pc}
 8006958:	40021000 	.word	0x40021000
 800695c:	003d0900 	.word	0x003d0900
 8006960:	00f42400 	.word	0x00f42400
 8006964:	007a1200 	.word	0x007a1200
 8006968:	0800b5bc 	.word	0x0800b5bc

0800696c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006970:	4b02      	ldr	r3, [pc, #8]	; (800697c <HAL_RCC_GetHCLKFreq+0x10>)
 8006972:	681b      	ldr	r3, [r3, #0]
}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	20000008 	.word	0x20000008

08006980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006984:	f7ff fff2 	bl	800696c <HAL_RCC_GetHCLKFreq>
 8006988:	0001      	movs	r1, r0
 800698a:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	0a1b      	lsrs	r3, r3, #8
 8006990:	2207      	movs	r2, #7
 8006992:	4013      	ands	r3, r2
 8006994:	4a04      	ldr	r2, [pc, #16]	; (80069a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006996:	5cd3      	ldrb	r3, [r2, r3]
 8006998:	40d9      	lsrs	r1, r3
 800699a:	000b      	movs	r3, r1
}
 800699c:	0018      	movs	r0, r3
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	40021000 	.word	0x40021000
 80069a8:	0800b5b4 	.word	0x0800b5b4

080069ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069b0:	f7ff ffdc 	bl	800696c <HAL_RCC_GetHCLKFreq>
 80069b4:	0001      	movs	r1, r0
 80069b6:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	0adb      	lsrs	r3, r3, #11
 80069bc:	2207      	movs	r2, #7
 80069be:	4013      	ands	r3, r2
 80069c0:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80069c2:	5cd3      	ldrb	r3, [r2, r3]
 80069c4:	40d9      	lsrs	r1, r3
 80069c6:	000b      	movs	r3, r1
}
 80069c8:	0018      	movs	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	40021000 	.word	0x40021000
 80069d4:	0800b5b4 	.word	0x0800b5b4

080069d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80069e0:	2317      	movs	r3, #23
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	2200      	movs	r2, #0
 80069e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2220      	movs	r2, #32
 80069ee:	4013      	ands	r3, r2
 80069f0:	d106      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	2380      	movs	r3, #128	; 0x80
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	4013      	ands	r3, r2
 80069fc:	d100      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80069fe:	e0d9      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a00:	4ba4      	ldr	r3, [pc, #656]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a04:	2380      	movs	r3, #128	; 0x80
 8006a06:	055b      	lsls	r3, r3, #21
 8006a08:	4013      	ands	r3, r2
 8006a0a:	d10a      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a0c:	4ba1      	ldr	r3, [pc, #644]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a10:	4ba0      	ldr	r3, [pc, #640]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a12:	2180      	movs	r1, #128	; 0x80
 8006a14:	0549      	lsls	r1, r1, #21
 8006a16:	430a      	orrs	r2, r1
 8006a18:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006a1a:	2317      	movs	r3, #23
 8006a1c:	18fb      	adds	r3, r7, r3
 8006a1e:	2201      	movs	r2, #1
 8006a20:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a22:	4b9d      	ldr	r3, [pc, #628]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	2380      	movs	r3, #128	; 0x80
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d11a      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a2e:	4b9a      	ldr	r3, [pc, #616]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b99      	ldr	r3, [pc, #612]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006a34:	2180      	movs	r1, #128	; 0x80
 8006a36:	0049      	lsls	r1, r1, #1
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a3c:	f7fe f9f6 	bl	8004e2c <HAL_GetTick>
 8006a40:	0003      	movs	r3, r0
 8006a42:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a44:	e008      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a46:	f7fe f9f1 	bl	8004e2c <HAL_GetTick>
 8006a4a:	0002      	movs	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b64      	cmp	r3, #100	; 0x64
 8006a52:	d901      	bls.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e118      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a58:	4b8f      	ldr	r3, [pc, #572]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	2380      	movs	r3, #128	; 0x80
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4013      	ands	r3, r2
 8006a62:	d0f0      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006a64:	4b8b      	ldr	r3, [pc, #556]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	23c0      	movs	r3, #192	; 0xc0
 8006a6a:	039b      	lsls	r3, r3, #14
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	23c0      	movs	r3, #192	; 0xc0
 8006a76:	039b      	lsls	r3, r3, #14
 8006a78:	4013      	ands	r3, r2
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	23c0      	movs	r3, #192	; 0xc0
 8006a86:	039b      	lsls	r3, r3, #14
 8006a88:	4013      	ands	r3, r2
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d013      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	23c0      	movs	r3, #192	; 0xc0
 8006a96:	029b      	lsls	r3, r3, #10
 8006a98:	401a      	ands	r2, r3
 8006a9a:	23c0      	movs	r3, #192	; 0xc0
 8006a9c:	029b      	lsls	r3, r3, #10
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d10a      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006aa2:	4b7c      	ldr	r3, [pc, #496]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	2380      	movs	r3, #128	; 0x80
 8006aa8:	029b      	lsls	r3, r3, #10
 8006aaa:	401a      	ands	r2, r3
 8006aac:	2380      	movs	r3, #128	; 0x80
 8006aae:	029b      	lsls	r3, r3, #10
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0e8      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006ab8:	4b76      	ldr	r3, [pc, #472]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006aba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006abc:	23c0      	movs	r3, #192	; 0xc0
 8006abe:	029b      	lsls	r3, r3, #10
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d049      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	23c0      	movs	r3, #192	; 0xc0
 8006ad0:	029b      	lsls	r3, r3, #10
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d004      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d10d      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	23c0      	movs	r3, #192	; 0xc0
 8006aea:	029b      	lsls	r3, r3, #10
 8006aec:	4013      	ands	r3, r2
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d034      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	2380      	movs	r3, #128	; 0x80
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	4013      	ands	r3, r2
 8006afe:	d02e      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006b00:	4b64      	ldr	r3, [pc, #400]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b04:	4a65      	ldr	r2, [pc, #404]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b06:	4013      	ands	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b0a:	4b62      	ldr	r3, [pc, #392]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b0e:	4b61      	ldr	r3, [pc, #388]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b10:	2180      	movs	r1, #128	; 0x80
 8006b12:	0309      	lsls	r1, r1, #12
 8006b14:	430a      	orrs	r2, r1
 8006b16:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b18:	4b5e      	ldr	r3, [pc, #376]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b1c:	4b5d      	ldr	r3, [pc, #372]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b1e:	4960      	ldr	r1, [pc, #384]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006b20:	400a      	ands	r2, r1
 8006b22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006b24:	4b5b      	ldr	r3, [pc, #364]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	4013      	ands	r3, r2
 8006b32:	d014      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fe f97a 	bl	8004e2c <HAL_GetTick>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b3c:	e009      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b3e:	f7fe f975 	bl	8004e2c <HAL_GetTick>
 8006b42:	0002      	movs	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	4a56      	ldr	r2, [pc, #344]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e09b      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b52:	4b50      	ldr	r3, [pc, #320]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b56:	2380      	movs	r3, #128	; 0x80
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d0ef      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	23c0      	movs	r3, #192	; 0xc0
 8006b64:	029b      	lsls	r3, r3, #10
 8006b66:	401a      	ands	r2, r3
 8006b68:	23c0      	movs	r3, #192	; 0xc0
 8006b6a:	029b      	lsls	r3, r3, #10
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d10c      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006b70:	4b48      	ldr	r3, [pc, #288]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a4c      	ldr	r2, [pc, #304]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	0019      	movs	r1, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	23c0      	movs	r3, #192	; 0xc0
 8006b80:	039b      	lsls	r3, r3, #14
 8006b82:	401a      	ands	r2, r3
 8006b84:	4b43      	ldr	r3, [pc, #268]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b86:	430a      	orrs	r2, r1
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	4b42      	ldr	r3, [pc, #264]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	23c0      	movs	r3, #192	; 0xc0
 8006b94:	029b      	lsls	r3, r3, #10
 8006b96:	401a      	ands	r2, r3
 8006b98:	4b3e      	ldr	r3, [pc, #248]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b9e:	2317      	movs	r3, #23
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d105      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba8:	4b3a      	ldr	r3, [pc, #232]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bac:	4b39      	ldr	r3, [pc, #228]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bae:	493f      	ldr	r1, [pc, #252]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bb0:	400a      	ands	r2, r1
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	4013      	ands	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bbe:	4b35      	ldr	r3, [pc, #212]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	4393      	bics	r3, r2
 8006bc6:	0019      	movs	r1, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	4b31      	ldr	r3, [pc, #196]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	4013      	ands	r3, r2
 8006bda:	d009      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bdc:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be0:	220c      	movs	r2, #12
 8006be2:	4393      	bics	r3, r2
 8006be4:	0019      	movs	r1, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	4b2a      	ldr	r3, [pc, #168]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bec:	430a      	orrs	r2, r1
 8006bee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bfa:	4b26      	ldr	r3, [pc, #152]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfe:	4a2c      	ldr	r2, [pc, #176]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	0019      	movs	r1, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	695a      	ldr	r2, [r3, #20]
 8006c08:	4b22      	ldr	r3, [pc, #136]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2208      	movs	r2, #8
 8006c14:	4013      	ands	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1c:	4a25      	ldr	r2, [pc, #148]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	0019      	movs	r1, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	4013      	ands	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c38:	4b16      	ldr	r3, [pc, #88]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3c:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	0019      	movs	r1, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69da      	ldr	r2, [r3, #28]
 8006c46:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2240      	movs	r2, #64	; 0x40
 8006c52:	4013      	ands	r3, r2
 8006c54:	d009      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c56:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5a:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	0019      	movs	r1, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c66:	430a      	orrs	r2, r1
 8006c68:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2280      	movs	r2, #128	; 0x80
 8006c70:	4013      	ands	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006c74:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c78:	4a10      	ldr	r2, [pc, #64]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	0019      	movs	r1, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1a      	ldr	r2, [r3, #32]
 8006c82:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c84:	430a      	orrs	r2, r1
 8006c86:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b006      	add	sp, #24
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	40021000 	.word	0x40021000
 8006c98:	40007000 	.word	0x40007000
 8006c9c:	fffcffff 	.word	0xfffcffff
 8006ca0:	fff7ffff 	.word	0xfff7ffff
 8006ca4:	00001388 	.word	0x00001388
 8006ca8:	ffcfffff 	.word	0xffcfffff
 8006cac:	efffffff 	.word	0xefffffff
 8006cb0:	fffff3ff 	.word	0xfffff3ff
 8006cb4:	ffffcfff 	.word	0xffffcfff
 8006cb8:	fbffffff 	.word	0xfbffffff
 8006cbc:	fff3ffff 	.word	0xfff3ffff

08006cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e032      	b.n	8006d38 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2239      	movs	r2, #57	; 0x39
 8006cd6:	5c9b      	ldrb	r3, [r3, r2]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d107      	bne.n	8006cee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2238      	movs	r2, #56	; 0x38
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7fd fd8f 	bl	800480c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2239      	movs	r2, #57	; 0x39
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	0019      	movs	r1, r3
 8006d00:	0010      	movs	r0, r2
 8006d02:	f000 fb99 	bl	8007438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	223e      	movs	r2, #62	; 0x3e
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	223a      	movs	r2, #58	; 0x3a
 8006d12:	2101      	movs	r1, #1
 8006d14:	5499      	strb	r1, [r3, r2]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	223b      	movs	r2, #59	; 0x3b
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	5499      	strb	r1, [r3, r2]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	223c      	movs	r2, #60	; 0x3c
 8006d22:	2101      	movs	r1, #1
 8006d24:	5499      	strb	r1, [r3, r2]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	223d      	movs	r2, #61	; 0x3d
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2239      	movs	r2, #57	; 0x39
 8006d32:	2101      	movs	r1, #1
 8006d34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b002      	add	sp, #8
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e032      	b.n	8006db8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2239      	movs	r2, #57	; 0x39
 8006d56:	5c9b      	ldrb	r3, [r3, r2]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d107      	bne.n	8006d6e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2238      	movs	r2, #56	; 0x38
 8006d62:	2100      	movs	r1, #0
 8006d64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f000 f829 	bl	8006dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2239      	movs	r2, #57	; 0x39
 8006d72:	2102      	movs	r1, #2
 8006d74:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	0019      	movs	r1, r3
 8006d80:	0010      	movs	r0, r2
 8006d82:	f000 fb59 	bl	8007438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	223e      	movs	r2, #62	; 0x3e
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	223a      	movs	r2, #58	; 0x3a
 8006d92:	2101      	movs	r1, #1
 8006d94:	5499      	strb	r1, [r3, r2]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	223b      	movs	r2, #59	; 0x3b
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	5499      	strb	r1, [r3, r2]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	223c      	movs	r2, #60	; 0x3c
 8006da2:	2101      	movs	r1, #1
 8006da4:	5499      	strb	r1, [r3, r2]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	223d      	movs	r2, #61	; 0x3d
 8006daa:	2101      	movs	r1, #1
 8006dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2239      	movs	r2, #57	; 0x39
 8006db2:	2101      	movs	r1, #1
 8006db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	0018      	movs	r0, r3
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dc8:	46c0      	nop			; (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d108      	bne.n	8006df2 <HAL_TIM_PWM_Start+0x22>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	223a      	movs	r2, #58	; 0x3a
 8006de4:	5c9b      	ldrb	r3, [r3, r2]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	4193      	sbcs	r3, r2
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	e01f      	b.n	8006e32 <HAL_TIM_PWM_Start+0x62>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d108      	bne.n	8006e0a <HAL_TIM_PWM_Start+0x3a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	223b      	movs	r2, #59	; 0x3b
 8006dfc:	5c9b      	ldrb	r3, [r3, r2]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	1e5a      	subs	r2, r3, #1
 8006e04:	4193      	sbcs	r3, r2
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	e013      	b.n	8006e32 <HAL_TIM_PWM_Start+0x62>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d108      	bne.n	8006e22 <HAL_TIM_PWM_Start+0x52>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	223c      	movs	r2, #60	; 0x3c
 8006e14:	5c9b      	ldrb	r3, [r3, r2]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	1e5a      	subs	r2, r3, #1
 8006e1c:	4193      	sbcs	r3, r2
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	e007      	b.n	8006e32 <HAL_TIM_PWM_Start+0x62>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	223d      	movs	r2, #61	; 0x3d
 8006e26:	5c9b      	ldrb	r3, [r3, r2]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	1e5a      	subs	r2, r3, #1
 8006e2e:	4193      	sbcs	r3, r2
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e052      	b.n	8006ee0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_PWM_Start+0x7a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	223a      	movs	r2, #58	; 0x3a
 8006e44:	2102      	movs	r1, #2
 8006e46:	5499      	strb	r1, [r3, r2]
 8006e48:	e013      	b.n	8006e72 <HAL_TIM_PWM_Start+0xa2>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d104      	bne.n	8006e5a <HAL_TIM_PWM_Start+0x8a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	223b      	movs	r2, #59	; 0x3b
 8006e54:	2102      	movs	r1, #2
 8006e56:	5499      	strb	r1, [r3, r2]
 8006e58:	e00b      	b.n	8006e72 <HAL_TIM_PWM_Start+0xa2>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d104      	bne.n	8006e6a <HAL_TIM_PWM_Start+0x9a>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	223c      	movs	r2, #60	; 0x3c
 8006e64:	2102      	movs	r1, #2
 8006e66:	5499      	strb	r1, [r3, r2]
 8006e68:	e003      	b.n	8006e72 <HAL_TIM_PWM_Start+0xa2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	223d      	movs	r2, #61	; 0x3d
 8006e6e:	2102      	movs	r1, #2
 8006e70:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	f000 fcd8 	bl	8007830 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	05db      	lsls	r3, r3, #23
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d00e      	beq.n	8006eaa <HAL_TIM_PWM_Start+0xda>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <HAL_TIM_PWM_Start+0x118>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_TIM_PWM_Start+0xda>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a14      	ldr	r2, [pc, #80]	; (8006eec <HAL_TIM_PWM_Start+0x11c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_TIM_PWM_Start+0xda>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a12      	ldr	r2, [pc, #72]	; (8006ef0 <HAL_TIM_PWM_Start+0x120>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d111      	bne.n	8006ece <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b06      	cmp	r3, #6
 8006eba:	d010      	beq.n	8006ede <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ecc:	e007      	b.n	8006ede <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2101      	movs	r1, #1
 8006eda:	430a      	orrs	r2, r1
 8006edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b004      	add	sp, #16
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40010800 	.word	0x40010800
 8006ef0:	40011400 	.word	0x40011400

08006ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2202      	movs	r2, #2
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d124      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	2202      	movs	r2, #2
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d11d      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	4252      	negs	r2, r2
 8006f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2203      	movs	r2, #3
 8006f30:	4013      	ands	r3, r2
 8006f32:	d004      	beq.n	8006f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	0018      	movs	r0, r3
 8006f38:	f000 fa66 	bl	8007408 <HAL_TIM_IC_CaptureCallback>
 8006f3c:	e007      	b.n	8006f4e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	0018      	movs	r0, r3
 8006f42:	f000 fa59 	bl	80073f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f000 fa65 	bl	8007418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2204      	movs	r2, #4
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d125      	bne.n	8006fae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d11e      	bne.n	8006fae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2205      	movs	r2, #5
 8006f76:	4252      	negs	r2, r2
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699a      	ldr	r2, [r3, #24]
 8006f86:	23c0      	movs	r3, #192	; 0xc0
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	0018      	movs	r0, r3
 8006f92:	f000 fa39 	bl	8007408 <HAL_TIM_IC_CaptureCallback>
 8006f96:	e007      	b.n	8006fa8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f000 fa2c 	bl	80073f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f000 fa38 	bl	8007418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d124      	bne.n	8007006 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d11d      	bne.n	8007006 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2209      	movs	r2, #9
 8006fd0:	4252      	negs	r2, r2
 8006fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f000 fa0d 	bl	8007408 <HAL_TIM_IC_CaptureCallback>
 8006fee:	e007      	b.n	8007000 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f000 fa00 	bl	80073f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f000 fa0c 	bl	8007418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2210      	movs	r2, #16
 800700e:	4013      	ands	r3, r2
 8007010:	2b10      	cmp	r3, #16
 8007012:	d125      	bne.n	8007060 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	2210      	movs	r2, #16
 800701c:	4013      	ands	r3, r2
 800701e:	2b10      	cmp	r3, #16
 8007020:	d11e      	bne.n	8007060 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2211      	movs	r2, #17
 8007028:	4252      	negs	r2, r2
 800702a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2208      	movs	r2, #8
 8007030:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	23c0      	movs	r3, #192	; 0xc0
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4013      	ands	r3, r2
 800703e:	d004      	beq.n	800704a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	0018      	movs	r0, r3
 8007044:	f000 f9e0 	bl	8007408 <HAL_TIM_IC_CaptureCallback>
 8007048:	e007      	b.n	800705a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0018      	movs	r0, r3
 800704e:	f000 f9d3 	bl	80073f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	0018      	movs	r0, r3
 8007056:	f000 f9df 	bl	8007418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2201      	movs	r2, #1
 8007068:	4013      	ands	r3, r2
 800706a:	2b01      	cmp	r3, #1
 800706c:	d10f      	bne.n	800708e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	4013      	ands	r3, r2
 8007078:	2b01      	cmp	r3, #1
 800707a:	d108      	bne.n	800708e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2202      	movs	r2, #2
 8007082:	4252      	negs	r2, r2
 8007084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	0018      	movs	r0, r3
 800708a:	f7fd f9a9 	bl	80043e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2240      	movs	r2, #64	; 0x40
 8007096:	4013      	ands	r3, r2
 8007098:	2b40      	cmp	r3, #64	; 0x40
 800709a:	d10f      	bne.n	80070bc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2240      	movs	r2, #64	; 0x40
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b40      	cmp	r3, #64	; 0x40
 80070a8:	d108      	bne.n	80070bc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2241      	movs	r2, #65	; 0x41
 80070b0:	4252      	negs	r2, r2
 80070b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	0018      	movs	r0, r3
 80070b8:	f000 f9b6 	bl	8007428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070bc:	46c0      	nop			; (mov r8, r8)
 80070be:	46bd      	mov	sp, r7
 80070c0:	b002      	add	sp, #8
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d0:	2317      	movs	r3, #23
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2238      	movs	r2, #56	; 0x38
 80070dc:	5c9b      	ldrb	r3, [r3, r2]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e0ad      	b.n	8007242 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2238      	movs	r2, #56	; 0x38
 80070ea:	2101      	movs	r1, #1
 80070ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b0c      	cmp	r3, #12
 80070f2:	d100      	bne.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80070f4:	e076      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	d900      	bls.n	80070fe <HAL_TIM_PWM_ConfigChannel+0x3a>
 80070fc:	e095      	b.n	800722a <HAL_TIM_PWM_ConfigChannel+0x166>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b08      	cmp	r3, #8
 8007102:	d04e      	beq.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b08      	cmp	r3, #8
 8007108:	d900      	bls.n	800710c <HAL_TIM_PWM_ConfigChannel+0x48>
 800710a:	e08e      	b.n	800722a <HAL_TIM_PWM_ConfigChannel+0x166>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_TIM_PWM_ConfigChannel+0x56>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b04      	cmp	r3, #4
 8007116:	d021      	beq.n	800715c <HAL_TIM_PWM_ConfigChannel+0x98>
 8007118:	e087      	b.n	800722a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	0011      	movs	r1, r2
 8007122:	0018      	movs	r0, r3
 8007124:	f000 f9e6 	bl	80074f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2108      	movs	r1, #8
 8007134:	430a      	orrs	r2, r1
 8007136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2104      	movs	r1, #4
 8007144:	438a      	bics	r2, r1
 8007146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6999      	ldr	r1, [r3, #24]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	619a      	str	r2, [r3, #24]
      break;
 800715a:	e06b      	b.n	8007234 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	0011      	movs	r1, r2
 8007164:	0018      	movs	r0, r3
 8007166:	f000 fa01 	bl	800756c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699a      	ldr	r2, [r3, #24]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2180      	movs	r1, #128	; 0x80
 8007176:	0109      	lsls	r1, r1, #4
 8007178:	430a      	orrs	r2, r1
 800717a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4931      	ldr	r1, [pc, #196]	; (800724c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007188:	400a      	ands	r2, r1
 800718a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6999      	ldr	r1, [r3, #24]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	021a      	lsls	r2, r3, #8
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	619a      	str	r2, [r3, #24]
      break;
 80071a0:	e048      	b.n	8007234 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	0011      	movs	r1, r2
 80071aa:	0018      	movs	r0, r3
 80071ac:	f000 fa20 	bl	80075f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	69da      	ldr	r2, [r3, #28]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2108      	movs	r1, #8
 80071bc:	430a      	orrs	r2, r1
 80071be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69da      	ldr	r2, [r3, #28]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2104      	movs	r1, #4
 80071cc:	438a      	bics	r2, r1
 80071ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69d9      	ldr	r1, [r3, #28]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	61da      	str	r2, [r3, #28]
      break;
 80071e2:	e027      	b.n	8007234 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	0011      	movs	r1, r2
 80071ec:	0018      	movs	r0, r3
 80071ee:	f000 fa3f 	bl	8007670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2180      	movs	r1, #128	; 0x80
 80071fe:	0109      	lsls	r1, r1, #4
 8007200:	430a      	orrs	r2, r1
 8007202:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69da      	ldr	r2, [r3, #28]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	490f      	ldr	r1, [pc, #60]	; (800724c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007210:	400a      	ands	r2, r1
 8007212:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69d9      	ldr	r1, [r3, #28]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	021a      	lsls	r2, r3, #8
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	61da      	str	r2, [r3, #28]
      break;
 8007228:	e004      	b.n	8007234 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800722a:	2317      	movs	r3, #23
 800722c:	18fb      	adds	r3, r7, r3
 800722e:	2201      	movs	r2, #1
 8007230:	701a      	strb	r2, [r3, #0]
      break;
 8007232:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2238      	movs	r2, #56	; 0x38
 8007238:	2100      	movs	r1, #0
 800723a:	5499      	strb	r1, [r3, r2]

  return status;
 800723c:	2317      	movs	r3, #23
 800723e:	18fb      	adds	r3, r7, r3
 8007240:	781b      	ldrb	r3, [r3, #0]
}
 8007242:	0018      	movs	r0, r3
 8007244:	46bd      	mov	sp, r7
 8007246:	b006      	add	sp, #24
 8007248:	bd80      	pop	{r7, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	fffffbff 	.word	0xfffffbff

08007250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800725a:	230f      	movs	r3, #15
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2238      	movs	r2, #56	; 0x38
 8007266:	5c9b      	ldrb	r3, [r3, r2]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_TIM_ConfigClockSource+0x20>
 800726c:	2302      	movs	r3, #2
 800726e:	e0bc      	b.n	80073ea <HAL_TIM_ConfigClockSource+0x19a>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2238      	movs	r2, #56	; 0x38
 8007274:	2101      	movs	r1, #1
 8007276:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2239      	movs	r2, #57	; 0x39
 800727c:	2102      	movs	r1, #2
 800727e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2277      	movs	r2, #119	; 0x77
 800728c:	4393      	bics	r3, r2
 800728e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4a58      	ldr	r2, [pc, #352]	; (80073f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007294:	4013      	ands	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2280      	movs	r2, #128	; 0x80
 80072a6:	0192      	lsls	r2, r2, #6
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d040      	beq.n	800732e <HAL_TIM_ConfigClockSource+0xde>
 80072ac:	2280      	movs	r2, #128	; 0x80
 80072ae:	0192      	lsls	r2, r2, #6
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d900      	bls.n	80072b6 <HAL_TIM_ConfigClockSource+0x66>
 80072b4:	e088      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x178>
 80072b6:	2280      	movs	r2, #128	; 0x80
 80072b8:	0152      	lsls	r2, r2, #5
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d100      	bne.n	80072c0 <HAL_TIM_ConfigClockSource+0x70>
 80072be:	e088      	b.n	80073d2 <HAL_TIM_ConfigClockSource+0x182>
 80072c0:	2280      	movs	r2, #128	; 0x80
 80072c2:	0152      	lsls	r2, r2, #5
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d900      	bls.n	80072ca <HAL_TIM_ConfigClockSource+0x7a>
 80072c8:	e07e      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x178>
 80072ca:	2b70      	cmp	r3, #112	; 0x70
 80072cc:	d018      	beq.n	8007300 <HAL_TIM_ConfigClockSource+0xb0>
 80072ce:	d900      	bls.n	80072d2 <HAL_TIM_ConfigClockSource+0x82>
 80072d0:	e07a      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x178>
 80072d2:	2b60      	cmp	r3, #96	; 0x60
 80072d4:	d04f      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x126>
 80072d6:	d900      	bls.n	80072da <HAL_TIM_ConfigClockSource+0x8a>
 80072d8:	e076      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x178>
 80072da:	2b50      	cmp	r3, #80	; 0x50
 80072dc:	d03b      	beq.n	8007356 <HAL_TIM_ConfigClockSource+0x106>
 80072de:	d900      	bls.n	80072e2 <HAL_TIM_ConfigClockSource+0x92>
 80072e0:	e072      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x178>
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d057      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x146>
 80072e6:	d900      	bls.n	80072ea <HAL_TIM_ConfigClockSource+0x9a>
 80072e8:	e06e      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x178>
 80072ea:	2b30      	cmp	r3, #48	; 0x30
 80072ec:	d063      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x166>
 80072ee:	d86b      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x178>
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d060      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x166>
 80072f4:	d868      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x178>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d05d      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x166>
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	d05b      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x166>
 80072fe:	e063      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	6899      	ldr	r1, [r3, #8]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f000 fa6e 	bl	80077f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2277      	movs	r2, #119	; 0x77
 8007320:	4313      	orrs	r3, r2
 8007322:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	609a      	str	r2, [r3, #8]
      break;
 800732c:	e052      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6899      	ldr	r1, [r3, #8]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f000 fa57 	bl	80077f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	01c9      	lsls	r1, r1, #7
 8007350:	430a      	orrs	r2, r1
 8007352:	609a      	str	r2, [r3, #8]
      break;
 8007354:	e03e      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6859      	ldr	r1, [r3, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	001a      	movs	r2, r3
 8007364:	f000 f9ca 	bl	80076fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2150      	movs	r1, #80	; 0x50
 800736e:	0018      	movs	r0, r3
 8007370:	f000 fa24 	bl	80077bc <TIM_ITRx_SetConfig>
      break;
 8007374:	e02e      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6859      	ldr	r1, [r3, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	001a      	movs	r2, r3
 8007384:	f000 f9e8 	bl	8007758 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2160      	movs	r1, #96	; 0x60
 800738e:	0018      	movs	r0, r3
 8007390:	f000 fa14 	bl	80077bc <TIM_ITRx_SetConfig>
      break;
 8007394:	e01e      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6859      	ldr	r1, [r3, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	001a      	movs	r2, r3
 80073a4:	f000 f9aa 	bl	80076fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2140      	movs	r1, #64	; 0x40
 80073ae:	0018      	movs	r0, r3
 80073b0:	f000 fa04 	bl	80077bc <TIM_ITRx_SetConfig>
      break;
 80073b4:	e00e      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	0019      	movs	r1, r3
 80073c0:	0010      	movs	r0, r2
 80073c2:	f000 f9fb 	bl	80077bc <TIM_ITRx_SetConfig>
      break;
 80073c6:	e005      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80073c8:	230f      	movs	r3, #15
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	2201      	movs	r2, #1
 80073ce:	701a      	strb	r2, [r3, #0]
      break;
 80073d0:	e000      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80073d2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2239      	movs	r2, #57	; 0x39
 80073d8:	2101      	movs	r1, #1
 80073da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2238      	movs	r2, #56	; 0x38
 80073e0:	2100      	movs	r1, #0
 80073e2:	5499      	strb	r1, [r3, r2]

  return status;
 80073e4:	230f      	movs	r3, #15
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	781b      	ldrb	r3, [r3, #0]
}
 80073ea:	0018      	movs	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	b004      	add	sp, #16
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	ffff00ff 	.word	0xffff00ff

080073f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007400:	46c0      	nop			; (mov r8, r8)
 8007402:	46bd      	mov	sp, r7
 8007404:	b002      	add	sp, #8
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007410:	46c0      	nop			; (mov r8, r8)
 8007412:	46bd      	mov	sp, r7
 8007414:	b002      	add	sp, #8
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007420:	46c0      	nop			; (mov r8, r8)
 8007422:	46bd      	mov	sp, r7
 8007424:	b002      	add	sp, #8
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007430:	46c0      	nop			; (mov r8, r8)
 8007432:	46bd      	mov	sp, r7
 8007434:	b002      	add	sp, #8
 8007436:	bd80      	pop	{r7, pc}

08007438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	05db      	lsls	r3, r3, #23
 800744e:	429a      	cmp	r2, r3
 8007450:	d00b      	beq.n	800746a <TIM_Base_SetConfig+0x32>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a23      	ldr	r2, [pc, #140]	; (80074e4 <TIM_Base_SetConfig+0xac>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d007      	beq.n	800746a <TIM_Base_SetConfig+0x32>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a22      	ldr	r2, [pc, #136]	; (80074e8 <TIM_Base_SetConfig+0xb0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d003      	beq.n	800746a <TIM_Base_SetConfig+0x32>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a21      	ldr	r2, [pc, #132]	; (80074ec <TIM_Base_SetConfig+0xb4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d108      	bne.n	800747c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2270      	movs	r2, #112	; 0x70
 800746e:	4393      	bics	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	2380      	movs	r3, #128	; 0x80
 8007480:	05db      	lsls	r3, r3, #23
 8007482:	429a      	cmp	r2, r3
 8007484:	d00b      	beq.n	800749e <TIM_Base_SetConfig+0x66>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <TIM_Base_SetConfig+0xac>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d007      	beq.n	800749e <TIM_Base_SetConfig+0x66>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <TIM_Base_SetConfig+0xb0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d003      	beq.n	800749e <TIM_Base_SetConfig+0x66>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a14      	ldr	r2, [pc, #80]	; (80074ec <TIM_Base_SetConfig+0xb4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d108      	bne.n	80074b0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a13      	ldr	r2, [pc, #76]	; (80074f0 <TIM_Base_SetConfig+0xb8>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2280      	movs	r2, #128	; 0x80
 80074b4:	4393      	bics	r3, r2
 80074b6:	001a      	movs	r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	615a      	str	r2, [r3, #20]
}
 80074dc:	46c0      	nop			; (mov r8, r8)
 80074de:	46bd      	mov	sp, r7
 80074e0:	b004      	add	sp, #16
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40000400 	.word	0x40000400
 80074e8:	40010800 	.word	0x40010800
 80074ec:	40011400 	.word	0x40011400
 80074f0:	fffffcff 	.word	0xfffffcff

080074f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	2201      	movs	r2, #1
 8007504:	4393      	bics	r3, r2
 8007506:	001a      	movs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2270      	movs	r2, #112	; 0x70
 8007522:	4393      	bics	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2203      	movs	r2, #3
 800752a:	4393      	bics	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2202      	movs	r2, #2
 800753c:	4393      	bics	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	621a      	str	r2, [r3, #32]
}
 8007564:	46c0      	nop			; (mov r8, r8)
 8007566:	46bd      	mov	sp, r7
 8007568:	b006      	add	sp, #24
 800756a:	bd80      	pop	{r7, pc}

0800756c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	2210      	movs	r2, #16
 800757c:	4393      	bics	r3, r2
 800757e:	001a      	movs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a13      	ldr	r2, [pc, #76]	; (80075e8 <TIM_OC2_SetConfig+0x7c>)
 800759a:	4013      	ands	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4a12      	ldr	r2, [pc, #72]	; (80075ec <TIM_OC2_SetConfig+0x80>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2220      	movs	r2, #32
 80075b6:	4393      	bics	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	621a      	str	r2, [r3, #32]
}
 80075e0:	46c0      	nop			; (mov r8, r8)
 80075e2:	46bd      	mov	sp, r7
 80075e4:	b006      	add	sp, #24
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	ffff8fff 	.word	0xffff8fff
 80075ec:	fffffcff 	.word	0xfffffcff

080075f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	4a1a      	ldr	r2, [pc, #104]	; (8007668 <TIM_OC3_SetConfig+0x78>)
 8007600:	401a      	ands	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2270      	movs	r2, #112	; 0x70
 800761c:	4393      	bics	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2203      	movs	r2, #3
 8007624:	4393      	bics	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4a0d      	ldr	r2, [pc, #52]	; (800766c <TIM_OC3_SetConfig+0x7c>)
 8007636:	4013      	ands	r3, r2
 8007638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	621a      	str	r2, [r3, #32]
}
 8007660:	46c0      	nop			; (mov r8, r8)
 8007662:	46bd      	mov	sp, r7
 8007664:	b006      	add	sp, #24
 8007666:	bd80      	pop	{r7, pc}
 8007668:	fffffeff 	.word	0xfffffeff
 800766c:	fffffdff 	.word	0xfffffdff

08007670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <TIM_OC4_SetConfig+0x7c>)
 8007680:	401a      	ands	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <TIM_OC4_SetConfig+0x80>)
 800769c:	4013      	ands	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a14      	ldr	r2, [pc, #80]	; (80076f4 <TIM_OC4_SetConfig+0x84>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	4a10      	ldr	r2, [pc, #64]	; (80076f8 <TIM_OC4_SetConfig+0x88>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	031b      	lsls	r3, r3, #12
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	46c0      	nop			; (mov r8, r8)
 80076e4:	46bd      	mov	sp, r7
 80076e6:	b006      	add	sp, #24
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	ffffefff 	.word	0xffffefff
 80076f0:	ffff8fff 	.word	0xffff8fff
 80076f4:	fffffcff 	.word	0xfffffcff
 80076f8:	ffffdfff 	.word	0xffffdfff

080076fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	2201      	movs	r2, #1
 8007714:	4393      	bics	r3, r2
 8007716:	001a      	movs	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	22f0      	movs	r2, #240	; 0xf0
 8007726:	4393      	bics	r3, r2
 8007728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	220a      	movs	r2, #10
 8007738:	4393      	bics	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	4313      	orrs	r3, r2
 8007742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	621a      	str	r2, [r3, #32]
}
 8007750:	46c0      	nop			; (mov r8, r8)
 8007752:	46bd      	mov	sp, r7
 8007754:	b006      	add	sp, #24
 8007756:	bd80      	pop	{r7, pc}

08007758 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	2210      	movs	r2, #16
 800776a:	4393      	bics	r3, r2
 800776c:	001a      	movs	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	4a0d      	ldr	r2, [pc, #52]	; (80077b8 <TIM_TI2_ConfigInputStage+0x60>)
 8007782:	4013      	ands	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	031b      	lsls	r3, r3, #12
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	22a0      	movs	r2, #160	; 0xa0
 8007794:	4393      	bics	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	621a      	str	r2, [r3, #32]
}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b006      	add	sp, #24
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	ffff0fff 	.word	0xffff0fff

080077bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2270      	movs	r2, #112	; 0x70
 80077d0:	4393      	bics	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4313      	orrs	r3, r2
 80077da:	2207      	movs	r2, #7
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	609a      	str	r2, [r3, #8]
}
 80077e6:	46c0      	nop			; (mov r8, r8)
 80077e8:	46bd      	mov	sp, r7
 80077ea:	b004      	add	sp, #16
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	4a09      	ldr	r2, [pc, #36]	; (800782c <TIM_ETR_SetConfig+0x3c>)
 8007808:	4013      	ands	r3, r2
 800780a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	021a      	lsls	r2, r3, #8
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	431a      	orrs	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	4313      	orrs	r3, r2
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	4313      	orrs	r3, r2
 800781c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	609a      	str	r2, [r3, #8]
}
 8007824:	46c0      	nop			; (mov r8, r8)
 8007826:	46bd      	mov	sp, r7
 8007828:	b006      	add	sp, #24
 800782a:	bd80      	pop	{r7, pc}
 800782c:	ffff00ff 	.word	0xffff00ff

08007830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	221f      	movs	r2, #31
 8007840:	4013      	ands	r3, r2
 8007842:	2201      	movs	r2, #1
 8007844:	409a      	lsls	r2, r3
 8007846:	0013      	movs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	43d2      	mvns	r2, r2
 8007852:	401a      	ands	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a1a      	ldr	r2, [r3, #32]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	211f      	movs	r1, #31
 8007860:	400b      	ands	r3, r1
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	4099      	lsls	r1, r3
 8007866:	000b      	movs	r3, r1
 8007868:	431a      	orrs	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	621a      	str	r2, [r3, #32]
}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	46bd      	mov	sp, r7
 8007872:	b006      	add	sp, #24
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2238      	movs	r2, #56	; 0x38
 8007886:	5c9b      	ldrb	r3, [r3, r2]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800788c:	2302      	movs	r3, #2
 800788e:	e047      	b.n	8007920 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2238      	movs	r2, #56	; 0x38
 8007894:	2101      	movs	r1, #1
 8007896:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2239      	movs	r2, #57	; 0x39
 800789c:	2102      	movs	r1, #2
 800789e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2270      	movs	r2, #112	; 0x70
 80078b4:	4393      	bics	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	2380      	movs	r3, #128	; 0x80
 80078d0:	05db      	lsls	r3, r3, #23
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d00e      	beq.n	80078f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a13      	ldr	r2, [pc, #76]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d009      	beq.n	80078f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a11      	ldr	r2, [pc, #68]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a10      	ldr	r2, [pc, #64]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d10c      	bne.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2280      	movs	r2, #128	; 0x80
 80078f8:	4393      	bics	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	4313      	orrs	r3, r2
 8007904:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2239      	movs	r2, #57	; 0x39
 8007912:	2101      	movs	r1, #1
 8007914:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2238      	movs	r2, #56	; 0x38
 800791a:	2100      	movs	r1, #0
 800791c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	0018      	movs	r0, r3
 8007922:	46bd      	mov	sp, r7
 8007924:	b004      	add	sp, #16
 8007926:	bd80      	pop	{r7, pc}
 8007928:	40000400 	.word	0x40000400
 800792c:	40010800 	.word	0x40010800
 8007930:	40011400 	.word	0x40011400

08007934 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2238      	movs	r2, #56	; 0x38
 8007942:	5c9b      	ldrb	r3, [r3, r2]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_TIMEx_RemapConfig+0x18>
 8007948:	2302      	movs	r3, #2
 800794a:	e00c      	b.n	8007966 <HAL_TIMEx_RemapConfig+0x32>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2238      	movs	r2, #56	; 0x38
 8007950:	2101      	movs	r1, #1
 8007952:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2238      	movs	r2, #56	; 0x38
 8007960:	2100      	movs	r1, #0
 8007962:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	0018      	movs	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	b002      	add	sp, #8
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e044      	b.n	8007a0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007986:	2b00      	cmp	r3, #0
 8007988:	d107      	bne.n	800799a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2274      	movs	r2, #116	; 0x74
 800798e:	2100      	movs	r1, #0
 8007990:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	0018      	movs	r0, r3
 8007996:	f7fc ffd1 	bl	800493c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2224      	movs	r2, #36	; 0x24
 800799e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2101      	movs	r1, #1
 80079ac:	438a      	bics	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	0018      	movs	r0, r3
 80079b4:	f000 f8d8 	bl	8007b68 <UART_SetConfig>
 80079b8:	0003      	movs	r3, r0
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e024      	b.n	8007a0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	0018      	movs	r0, r3
 80079ce:	f000 fb6b 	bl	80080a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	490d      	ldr	r1, [pc, #52]	; (8007a14 <HAL_UART_Init+0xa4>)
 80079de:	400a      	ands	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	212a      	movs	r1, #42	; 0x2a
 80079ee:	438a      	bics	r2, r1
 80079f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2101      	movs	r1, #1
 80079fe:	430a      	orrs	r2, r1
 8007a00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	0018      	movs	r0, r3
 8007a06:	f000 fc03 	bl	8008210 <UART_CheckIdleState>
 8007a0a:	0003      	movs	r3, r0
}
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b002      	add	sp, #8
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	ffffb7ff 	.word	0xffffb7ff

08007a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08a      	sub	sp, #40	; 0x28
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	1dbb      	adds	r3, r7, #6
 8007a26:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d000      	beq.n	8007a32 <HAL_UART_Transmit+0x1a>
 8007a30:	e095      	b.n	8007b5e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <HAL_UART_Transmit+0x28>
 8007a38:	1dbb      	adds	r3, r7, #6
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e08d      	b.n	8007b60 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	2380      	movs	r3, #128	; 0x80
 8007a4a:	015b      	lsls	r3, r3, #5
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d109      	bne.n	8007a64 <HAL_UART_Transmit+0x4c>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	d001      	beq.n	8007a64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e07d      	b.n	8007b60 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2274      	movs	r2, #116	; 0x74
 8007a68:	5c9b      	ldrb	r3, [r3, r2]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <HAL_UART_Transmit+0x5a>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e076      	b.n	8007b60 <HAL_UART_Transmit+0x148>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2274      	movs	r2, #116	; 0x74
 8007a76:	2101      	movs	r1, #1
 8007a78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2280      	movs	r2, #128	; 0x80
 8007a7e:	2100      	movs	r1, #0
 8007a80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2221      	movs	r2, #33	; 0x21
 8007a86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a88:	f7fd f9d0 	bl	8004e2c <HAL_GetTick>
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	1dba      	adds	r2, r7, #6
 8007a94:	2150      	movs	r1, #80	; 0x50
 8007a96:	8812      	ldrh	r2, [r2, #0]
 8007a98:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	1dba      	adds	r2, r7, #6
 8007a9e:	2152      	movs	r1, #82	; 0x52
 8007aa0:	8812      	ldrh	r2, [r2, #0]
 8007aa2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	2380      	movs	r3, #128	; 0x80
 8007aaa:	015b      	lsls	r3, r3, #5
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d108      	bne.n	8007ac2 <HAL_UART_Transmit+0xaa>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	61bb      	str	r3, [r7, #24]
 8007ac0:	e003      	b.n	8007aca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2274      	movs	r2, #116	; 0x74
 8007ace:	2100      	movs	r1, #0
 8007ad0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007ad2:	e02c      	b.n	8007b2e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	0013      	movs	r3, r2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2180      	movs	r1, #128	; 0x80
 8007ae2:	f000 fbdd 	bl	80082a0 <UART_WaitOnFlagUntilTimeout>
 8007ae6:	1e03      	subs	r3, r0, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e038      	b.n	8007b60 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10b      	bne.n	8007b0c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	001a      	movs	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	05d2      	lsls	r2, r2, #23
 8007b00:	0dd2      	lsrs	r2, r2, #23
 8007b02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	3302      	adds	r3, #2
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	e007      	b.n	8007b1c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	781a      	ldrb	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2252      	movs	r2, #82	; 0x52
 8007b20:	5a9b      	ldrh	r3, [r3, r2]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b299      	uxth	r1, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2252      	movs	r2, #82	; 0x52
 8007b2c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2252      	movs	r2, #82	; 0x52
 8007b32:	5a9b      	ldrh	r3, [r3, r2]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1cc      	bne.n	8007ad4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	0013      	movs	r3, r2
 8007b44:	2200      	movs	r2, #0
 8007b46:	2140      	movs	r1, #64	; 0x40
 8007b48:	f000 fbaa 	bl	80082a0 <UART_WaitOnFlagUntilTimeout>
 8007b4c:	1e03      	subs	r3, r0, #0
 8007b4e:	d001      	beq.n	8007b54 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e005      	b.n	8007b60 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e000      	b.n	8007b60 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8007b5e:	2302      	movs	r3, #2
  }
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b008      	add	sp, #32
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b68:	b5b0      	push	{r4, r5, r7, lr}
 8007b6a:	b08e      	sub	sp, #56	; 0x38
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b70:	231a      	movs	r3, #26
 8007b72:	2218      	movs	r2, #24
 8007b74:	189b      	adds	r3, r3, r2
 8007b76:	19db      	adds	r3, r3, r7
 8007b78:	2200      	movs	r2, #0
 8007b7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	431a      	orrs	r2, r3
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4ac3      	ldr	r2, [pc, #780]	; (8007ea8 <UART_SetConfig+0x340>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	0019      	movs	r1, r3
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4abe      	ldr	r2, [pc, #760]	; (8007eac <UART_SetConfig+0x344>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	0019      	movs	r1, r3
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4ab8      	ldr	r2, [pc, #736]	; (8007eb0 <UART_SetConfig+0x348>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	4ab4      	ldr	r2, [pc, #720]	; (8007eb4 <UART_SetConfig+0x34c>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	0019      	movs	r1, r3
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4ab0      	ldr	r2, [pc, #704]	; (8007eb8 <UART_SetConfig+0x350>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d131      	bne.n	8007c60 <UART_SetConfig+0xf8>
 8007bfc:	4baf      	ldr	r3, [pc, #700]	; (8007ebc <UART_SetConfig+0x354>)
 8007bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c00:	2203      	movs	r2, #3
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d01d      	beq.n	8007c44 <UART_SetConfig+0xdc>
 8007c08:	d823      	bhi.n	8007c52 <UART_SetConfig+0xea>
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d00c      	beq.n	8007c28 <UART_SetConfig+0xc0>
 8007c0e:	d820      	bhi.n	8007c52 <UART_SetConfig+0xea>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <UART_SetConfig+0xb2>
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d00e      	beq.n	8007c36 <UART_SetConfig+0xce>
 8007c18:	e01b      	b.n	8007c52 <UART_SetConfig+0xea>
 8007c1a:	231b      	movs	r3, #27
 8007c1c:	2218      	movs	r2, #24
 8007c1e:	189b      	adds	r3, r3, r2
 8007c20:	19db      	adds	r3, r3, r7
 8007c22:	2201      	movs	r2, #1
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	e0b4      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007c28:	231b      	movs	r3, #27
 8007c2a:	2218      	movs	r2, #24
 8007c2c:	189b      	adds	r3, r3, r2
 8007c2e:	19db      	adds	r3, r3, r7
 8007c30:	2202      	movs	r2, #2
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	e0ad      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007c36:	231b      	movs	r3, #27
 8007c38:	2218      	movs	r2, #24
 8007c3a:	189b      	adds	r3, r3, r2
 8007c3c:	19db      	adds	r3, r3, r7
 8007c3e:	2204      	movs	r2, #4
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	e0a6      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007c44:	231b      	movs	r3, #27
 8007c46:	2218      	movs	r2, #24
 8007c48:	189b      	adds	r3, r3, r2
 8007c4a:	19db      	adds	r3, r3, r7
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e09f      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007c52:	231b      	movs	r3, #27
 8007c54:	2218      	movs	r2, #24
 8007c56:	189b      	adds	r3, r3, r2
 8007c58:	19db      	adds	r3, r3, r7
 8007c5a:	2210      	movs	r2, #16
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e098      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a96      	ldr	r2, [pc, #600]	; (8007ec0 <UART_SetConfig+0x358>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d131      	bne.n	8007cce <UART_SetConfig+0x166>
 8007c6a:	4b94      	ldr	r3, [pc, #592]	; (8007ebc <UART_SetConfig+0x354>)
 8007c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6e:	220c      	movs	r2, #12
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b0c      	cmp	r3, #12
 8007c74:	d01d      	beq.n	8007cb2 <UART_SetConfig+0x14a>
 8007c76:	d823      	bhi.n	8007cc0 <UART_SetConfig+0x158>
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d00c      	beq.n	8007c96 <UART_SetConfig+0x12e>
 8007c7c:	d820      	bhi.n	8007cc0 <UART_SetConfig+0x158>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <UART_SetConfig+0x120>
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d00e      	beq.n	8007ca4 <UART_SetConfig+0x13c>
 8007c86:	e01b      	b.n	8007cc0 <UART_SetConfig+0x158>
 8007c88:	231b      	movs	r3, #27
 8007c8a:	2218      	movs	r2, #24
 8007c8c:	189b      	adds	r3, r3, r2
 8007c8e:	19db      	adds	r3, r3, r7
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
 8007c94:	e07d      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007c96:	231b      	movs	r3, #27
 8007c98:	2218      	movs	r2, #24
 8007c9a:	189b      	adds	r3, r3, r2
 8007c9c:	19db      	adds	r3, r3, r7
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e076      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007ca4:	231b      	movs	r3, #27
 8007ca6:	2218      	movs	r2, #24
 8007ca8:	189b      	adds	r3, r3, r2
 8007caa:	19db      	adds	r3, r3, r7
 8007cac:	2204      	movs	r2, #4
 8007cae:	701a      	strb	r2, [r3, #0]
 8007cb0:	e06f      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007cb2:	231b      	movs	r3, #27
 8007cb4:	2218      	movs	r2, #24
 8007cb6:	189b      	adds	r3, r3, r2
 8007cb8:	19db      	adds	r3, r3, r7
 8007cba:	2208      	movs	r2, #8
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	e068      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007cc0:	231b      	movs	r3, #27
 8007cc2:	2218      	movs	r2, #24
 8007cc4:	189b      	adds	r3, r3, r2
 8007cc6:	19db      	adds	r3, r3, r7
 8007cc8:	2210      	movs	r2, #16
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	e061      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a7c      	ldr	r2, [pc, #496]	; (8007ec4 <UART_SetConfig+0x35c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d106      	bne.n	8007ce6 <UART_SetConfig+0x17e>
 8007cd8:	231b      	movs	r3, #27
 8007cda:	2218      	movs	r2, #24
 8007cdc:	189b      	adds	r3, r3, r2
 8007cde:	19db      	adds	r3, r3, r7
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	e055      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a77      	ldr	r2, [pc, #476]	; (8007ec8 <UART_SetConfig+0x360>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d106      	bne.n	8007cfe <UART_SetConfig+0x196>
 8007cf0:	231b      	movs	r3, #27
 8007cf2:	2218      	movs	r2, #24
 8007cf4:	189b      	adds	r3, r3, r2
 8007cf6:	19db      	adds	r3, r3, r7
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	e049      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a6b      	ldr	r2, [pc, #428]	; (8007eb0 <UART_SetConfig+0x348>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d13e      	bne.n	8007d86 <UART_SetConfig+0x21e>
 8007d08:	4b6c      	ldr	r3, [pc, #432]	; (8007ebc <UART_SetConfig+0x354>)
 8007d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d0c:	23c0      	movs	r3, #192	; 0xc0
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	4013      	ands	r3, r2
 8007d12:	22c0      	movs	r2, #192	; 0xc0
 8007d14:	0112      	lsls	r2, r2, #4
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d027      	beq.n	8007d6a <UART_SetConfig+0x202>
 8007d1a:	22c0      	movs	r2, #192	; 0xc0
 8007d1c:	0112      	lsls	r2, r2, #4
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d82a      	bhi.n	8007d78 <UART_SetConfig+0x210>
 8007d22:	2280      	movs	r2, #128	; 0x80
 8007d24:	0112      	lsls	r2, r2, #4
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d011      	beq.n	8007d4e <UART_SetConfig+0x1e6>
 8007d2a:	2280      	movs	r2, #128	; 0x80
 8007d2c:	0112      	lsls	r2, r2, #4
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d822      	bhi.n	8007d78 <UART_SetConfig+0x210>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <UART_SetConfig+0x1d8>
 8007d36:	2280      	movs	r2, #128	; 0x80
 8007d38:	00d2      	lsls	r2, r2, #3
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00e      	beq.n	8007d5c <UART_SetConfig+0x1f4>
 8007d3e:	e01b      	b.n	8007d78 <UART_SetConfig+0x210>
 8007d40:	231b      	movs	r3, #27
 8007d42:	2218      	movs	r2, #24
 8007d44:	189b      	adds	r3, r3, r2
 8007d46:	19db      	adds	r3, r3, r7
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	e021      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007d4e:	231b      	movs	r3, #27
 8007d50:	2218      	movs	r2, #24
 8007d52:	189b      	adds	r3, r3, r2
 8007d54:	19db      	adds	r3, r3, r7
 8007d56:	2202      	movs	r2, #2
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	e01a      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007d5c:	231b      	movs	r3, #27
 8007d5e:	2218      	movs	r2, #24
 8007d60:	189b      	adds	r3, r3, r2
 8007d62:	19db      	adds	r3, r3, r7
 8007d64:	2204      	movs	r2, #4
 8007d66:	701a      	strb	r2, [r3, #0]
 8007d68:	e013      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007d6a:	231b      	movs	r3, #27
 8007d6c:	2218      	movs	r2, #24
 8007d6e:	189b      	adds	r3, r3, r2
 8007d70:	19db      	adds	r3, r3, r7
 8007d72:	2208      	movs	r2, #8
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	e00c      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007d78:	231b      	movs	r3, #27
 8007d7a:	2218      	movs	r2, #24
 8007d7c:	189b      	adds	r3, r3, r2
 8007d7e:	19db      	adds	r3, r3, r7
 8007d80:	2210      	movs	r2, #16
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	e005      	b.n	8007d92 <UART_SetConfig+0x22a>
 8007d86:	231b      	movs	r3, #27
 8007d88:	2218      	movs	r2, #24
 8007d8a:	189b      	adds	r3, r3, r2
 8007d8c:	19db      	adds	r3, r3, r7
 8007d8e:	2210      	movs	r2, #16
 8007d90:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a46      	ldr	r2, [pc, #280]	; (8007eb0 <UART_SetConfig+0x348>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d000      	beq.n	8007d9e <UART_SetConfig+0x236>
 8007d9c:	e09a      	b.n	8007ed4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d9e:	231b      	movs	r3, #27
 8007da0:	2218      	movs	r2, #24
 8007da2:	189b      	adds	r3, r3, r2
 8007da4:	19db      	adds	r3, r3, r7
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d01d      	beq.n	8007de8 <UART_SetConfig+0x280>
 8007dac:	dc20      	bgt.n	8007df0 <UART_SetConfig+0x288>
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d015      	beq.n	8007dde <UART_SetConfig+0x276>
 8007db2:	dc1d      	bgt.n	8007df0 <UART_SetConfig+0x288>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <UART_SetConfig+0x256>
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d005      	beq.n	8007dc8 <UART_SetConfig+0x260>
 8007dbc:	e018      	b.n	8007df0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dbe:	f7fe fddf 	bl	8006980 <HAL_RCC_GetPCLK1Freq>
 8007dc2:	0003      	movs	r3, r0
 8007dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007dc6:	e01c      	b.n	8007e02 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc8:	4b3c      	ldr	r3, [pc, #240]	; (8007ebc <UART_SetConfig+0x354>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2210      	movs	r2, #16
 8007dce:	4013      	ands	r3, r2
 8007dd0:	d002      	beq.n	8007dd8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007dd2:	4b3e      	ldr	r3, [pc, #248]	; (8007ecc <UART_SetConfig+0x364>)
 8007dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007dd6:	e014      	b.n	8007e02 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007dd8:	4b3d      	ldr	r3, [pc, #244]	; (8007ed0 <UART_SetConfig+0x368>)
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ddc:	e011      	b.n	8007e02 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dde:	f7fe fd1f 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8007de2:	0003      	movs	r3, r0
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007de6:	e00c      	b.n	8007e02 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de8:	2380      	movs	r3, #128	; 0x80
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007dee:	e008      	b.n	8007e02 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007df4:	231a      	movs	r3, #26
 8007df6:	2218      	movs	r2, #24
 8007df8:	189b      	adds	r3, r3, r2
 8007dfa:	19db      	adds	r3, r3, r7
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]
        break;
 8007e00:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d100      	bne.n	8007e0a <UART_SetConfig+0x2a2>
 8007e08:	e134      	b.n	8008074 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	0013      	movs	r3, r2
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	189b      	adds	r3, r3, r2
 8007e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d305      	bcc.n	8007e26 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d906      	bls.n	8007e34 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007e26:	231a      	movs	r3, #26
 8007e28:	2218      	movs	r2, #24
 8007e2a:	189b      	adds	r3, r3, r2
 8007e2c:	19db      	adds	r3, r3, r7
 8007e2e:	2201      	movs	r2, #1
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e11f      	b.n	8008074 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	613b      	str	r3, [r7, #16]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	6939      	ldr	r1, [r7, #16]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	000b      	movs	r3, r1
 8007e42:	0e1b      	lsrs	r3, r3, #24
 8007e44:	0010      	movs	r0, r2
 8007e46:	0205      	lsls	r5, r0, #8
 8007e48:	431d      	orrs	r5, r3
 8007e4a:	000b      	movs	r3, r1
 8007e4c:	021c      	lsls	r4, r3, #8
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	60bb      	str	r3, [r7, #8]
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	68b8      	ldr	r0, [r7, #8]
 8007e5c:	68f9      	ldr	r1, [r7, #12]
 8007e5e:	1900      	adds	r0, r0, r4
 8007e60:	4169      	adcs	r1, r5
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	607b      	str	r3, [r7, #4]
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f7f8 fb54 	bl	800051c <__aeabi_uldivmod>
 8007e74:	0002      	movs	r2, r0
 8007e76:	000b      	movs	r3, r1
 8007e78:	0013      	movs	r3, r2
 8007e7a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e7e:	23c0      	movs	r3, #192	; 0xc0
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d309      	bcc.n	8007e9a <UART_SetConfig+0x332>
 8007e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e88:	2380      	movs	r3, #128	; 0x80
 8007e8a:	035b      	lsls	r3, r3, #13
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d204      	bcs.n	8007e9a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	e0ec      	b.n	8008074 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8007e9a:	231a      	movs	r3, #26
 8007e9c:	2218      	movs	r2, #24
 8007e9e:	189b      	adds	r3, r3, r2
 8007ea0:	19db      	adds	r3, r3, r7
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e0e5      	b.n	8008074 <UART_SetConfig+0x50c>
 8007ea8:	efff69f3 	.word	0xefff69f3
 8007eac:	ffffcfff 	.word	0xffffcfff
 8007eb0:	40004800 	.word	0x40004800
 8007eb4:	fffff4ff 	.word	0xfffff4ff
 8007eb8:	40013800 	.word	0x40013800
 8007ebc:	40021000 	.word	0x40021000
 8007ec0:	40004400 	.word	0x40004400
 8007ec4:	40004c00 	.word	0x40004c00
 8007ec8:	40005000 	.word	0x40005000
 8007ecc:	003d0900 	.word	0x003d0900
 8007ed0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	021b      	lsls	r3, r3, #8
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d000      	beq.n	8007ee2 <UART_SetConfig+0x37a>
 8007ee0:	e071      	b.n	8007fc6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007ee2:	231b      	movs	r3, #27
 8007ee4:	2218      	movs	r2, #24
 8007ee6:	189b      	adds	r3, r3, r2
 8007ee8:	19db      	adds	r3, r3, r7
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d822      	bhi.n	8007f36 <UART_SetConfig+0x3ce>
 8007ef0:	009a      	lsls	r2, r3, #2
 8007ef2:	4b68      	ldr	r3, [pc, #416]	; (8008094 <UART_SetConfig+0x52c>)
 8007ef4:	18d3      	adds	r3, r2, r3
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007efa:	f7fe fd41 	bl	8006980 <HAL_RCC_GetPCLK1Freq>
 8007efe:	0003      	movs	r3, r0
 8007f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f02:	e021      	b.n	8007f48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f04:	f7fe fd52 	bl	80069ac <HAL_RCC_GetPCLK2Freq>
 8007f08:	0003      	movs	r3, r0
 8007f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f0c:	e01c      	b.n	8007f48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f0e:	4b62      	ldr	r3, [pc, #392]	; (8008098 <UART_SetConfig+0x530>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2210      	movs	r2, #16
 8007f14:	4013      	ands	r3, r2
 8007f16:	d002      	beq.n	8007f1e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007f18:	4b60      	ldr	r3, [pc, #384]	; (800809c <UART_SetConfig+0x534>)
 8007f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f1c:	e014      	b.n	8007f48 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007f1e:	4b60      	ldr	r3, [pc, #384]	; (80080a0 <UART_SetConfig+0x538>)
 8007f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f22:	e011      	b.n	8007f48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f24:	f7fe fc7c 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8007f28:	0003      	movs	r3, r0
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f2c:	e00c      	b.n	8007f48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f2e:	2380      	movs	r3, #128	; 0x80
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f34:	e008      	b.n	8007f48 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007f3a:	231a      	movs	r3, #26
 8007f3c:	2218      	movs	r2, #24
 8007f3e:	189b      	adds	r3, r3, r2
 8007f40:	19db      	adds	r3, r3, r7
 8007f42:	2201      	movs	r2, #1
 8007f44:	701a      	strb	r2, [r3, #0]
        break;
 8007f46:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d100      	bne.n	8007f50 <UART_SetConfig+0x3e8>
 8007f4e:	e091      	b.n	8008074 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	005a      	lsls	r2, r3, #1
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	18d2      	adds	r2, r2, r3
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	0019      	movs	r1, r3
 8007f62:	0010      	movs	r0, r2
 8007f64:	f7f8 f8ec 	bl	8000140 <__udivsi3>
 8007f68:	0003      	movs	r3, r0
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	2b0f      	cmp	r3, #15
 8007f72:	d921      	bls.n	8007fb8 <UART_SetConfig+0x450>
 8007f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f76:	2380      	movs	r3, #128	; 0x80
 8007f78:	025b      	lsls	r3, r3, #9
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d21c      	bcs.n	8007fb8 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	200e      	movs	r0, #14
 8007f84:	2418      	movs	r4, #24
 8007f86:	1903      	adds	r3, r0, r4
 8007f88:	19db      	adds	r3, r3, r7
 8007f8a:	210f      	movs	r1, #15
 8007f8c:	438a      	bics	r2, r1
 8007f8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	085b      	lsrs	r3, r3, #1
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2207      	movs	r2, #7
 8007f98:	4013      	ands	r3, r2
 8007f9a:	b299      	uxth	r1, r3
 8007f9c:	1903      	adds	r3, r0, r4
 8007f9e:	19db      	adds	r3, r3, r7
 8007fa0:	1902      	adds	r2, r0, r4
 8007fa2:	19d2      	adds	r2, r2, r7
 8007fa4:	8812      	ldrh	r2, [r2, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	1902      	adds	r2, r0, r4
 8007fb0:	19d2      	adds	r2, r2, r7
 8007fb2:	8812      	ldrh	r2, [r2, #0]
 8007fb4:	60da      	str	r2, [r3, #12]
 8007fb6:	e05d      	b.n	8008074 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb8:	231a      	movs	r3, #26
 8007fba:	2218      	movs	r2, #24
 8007fbc:	189b      	adds	r3, r3, r2
 8007fbe:	19db      	adds	r3, r3, r7
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	701a      	strb	r2, [r3, #0]
 8007fc4:	e056      	b.n	8008074 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fc6:	231b      	movs	r3, #27
 8007fc8:	2218      	movs	r2, #24
 8007fca:	189b      	adds	r3, r3, r2
 8007fcc:	19db      	adds	r3, r3, r7
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d822      	bhi.n	800801a <UART_SetConfig+0x4b2>
 8007fd4:	009a      	lsls	r2, r3, #2
 8007fd6:	4b33      	ldr	r3, [pc, #204]	; (80080a4 <UART_SetConfig+0x53c>)
 8007fd8:	18d3      	adds	r3, r2, r3
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fde:	f7fe fccf 	bl	8006980 <HAL_RCC_GetPCLK1Freq>
 8007fe2:	0003      	movs	r3, r0
 8007fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fe6:	e021      	b.n	800802c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe8:	f7fe fce0 	bl	80069ac <HAL_RCC_GetPCLK2Freq>
 8007fec:	0003      	movs	r3, r0
 8007fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ff0:	e01c      	b.n	800802c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ff2:	4b29      	ldr	r3, [pc, #164]	; (8008098 <UART_SetConfig+0x530>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2210      	movs	r2, #16
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	d002      	beq.n	8008002 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007ffc:	4b27      	ldr	r3, [pc, #156]	; (800809c <UART_SetConfig+0x534>)
 8007ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008000:	e014      	b.n	800802c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8008002:	4b27      	ldr	r3, [pc, #156]	; (80080a0 <UART_SetConfig+0x538>)
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008006:	e011      	b.n	800802c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008008:	f7fe fc0a 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 800800c:	0003      	movs	r3, r0
 800800e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008010:	e00c      	b.n	800802c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008012:	2380      	movs	r3, #128	; 0x80
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008018:	e008      	b.n	800802c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800801e:	231a      	movs	r3, #26
 8008020:	2218      	movs	r2, #24
 8008022:	189b      	adds	r3, r3, r2
 8008024:	19db      	adds	r3, r3, r7
 8008026:	2201      	movs	r2, #1
 8008028:	701a      	strb	r2, [r3, #0]
        break;
 800802a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d020      	beq.n	8008074 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	085a      	lsrs	r2, r3, #1
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	18d2      	adds	r2, r2, r3
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	0019      	movs	r1, r3
 8008042:	0010      	movs	r0, r2
 8008044:	f7f8 f87c 	bl	8000140 <__udivsi3>
 8008048:	0003      	movs	r3, r0
 800804a:	b29b      	uxth	r3, r3
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	2b0f      	cmp	r3, #15
 8008052:	d909      	bls.n	8008068 <UART_SetConfig+0x500>
 8008054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008056:	2380      	movs	r3, #128	; 0x80
 8008058:	025b      	lsls	r3, r3, #9
 800805a:	429a      	cmp	r2, r3
 800805c:	d204      	bcs.n	8008068 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008064:	60da      	str	r2, [r3, #12]
 8008066:	e005      	b.n	8008074 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8008068:	231a      	movs	r3, #26
 800806a:	2218      	movs	r2, #24
 800806c:	189b      	adds	r3, r3, r2
 800806e:	19db      	adds	r3, r3, r7
 8008070:	2201      	movs	r2, #1
 8008072:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	2200      	movs	r2, #0
 8008078:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	2200      	movs	r2, #0
 800807e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008080:	231a      	movs	r3, #26
 8008082:	2218      	movs	r2, #24
 8008084:	189b      	adds	r3, r3, r2
 8008086:	19db      	adds	r3, r3, r7
 8008088:	781b      	ldrb	r3, [r3, #0]
}
 800808a:	0018      	movs	r0, r3
 800808c:	46bd      	mov	sp, r7
 800808e:	b00e      	add	sp, #56	; 0x38
 8008090:	bdb0      	pop	{r4, r5, r7, pc}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	0800b5c8 	.word	0x0800b5c8
 8008098:	40021000 	.word	0x40021000
 800809c:	003d0900 	.word	0x003d0900
 80080a0:	00f42400 	.word	0x00f42400
 80080a4:	0800b5ec 	.word	0x0800b5ec

080080a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2201      	movs	r2, #1
 80080b6:	4013      	ands	r3, r2
 80080b8:	d00b      	beq.n	80080d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	4a4a      	ldr	r2, [pc, #296]	; (80081ec <UART_AdvFeatureConfig+0x144>)
 80080c2:	4013      	ands	r3, r2
 80080c4:	0019      	movs	r1, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	2202      	movs	r2, #2
 80080d8:	4013      	ands	r3, r2
 80080da:	d00b      	beq.n	80080f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	4a43      	ldr	r2, [pc, #268]	; (80081f0 <UART_AdvFeatureConfig+0x148>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	0019      	movs	r1, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	2204      	movs	r2, #4
 80080fa:	4013      	ands	r3, r2
 80080fc:	d00b      	beq.n	8008116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	4a3b      	ldr	r2, [pc, #236]	; (80081f4 <UART_AdvFeatureConfig+0x14c>)
 8008106:	4013      	ands	r3, r2
 8008108:	0019      	movs	r1, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	2208      	movs	r2, #8
 800811c:	4013      	ands	r3, r2
 800811e:	d00b      	beq.n	8008138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4a34      	ldr	r2, [pc, #208]	; (80081f8 <UART_AdvFeatureConfig+0x150>)
 8008128:	4013      	ands	r3, r2
 800812a:	0019      	movs	r1, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	2210      	movs	r2, #16
 800813e:	4013      	ands	r3, r2
 8008140:	d00b      	beq.n	800815a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	4a2c      	ldr	r2, [pc, #176]	; (80081fc <UART_AdvFeatureConfig+0x154>)
 800814a:	4013      	ands	r3, r2
 800814c:	0019      	movs	r1, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2220      	movs	r2, #32
 8008160:	4013      	ands	r3, r2
 8008162:	d00b      	beq.n	800817c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	4a25      	ldr	r2, [pc, #148]	; (8008200 <UART_AdvFeatureConfig+0x158>)
 800816c:	4013      	ands	r3, r2
 800816e:	0019      	movs	r1, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	2240      	movs	r2, #64	; 0x40
 8008182:	4013      	ands	r3, r2
 8008184:	d01d      	beq.n	80081c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <UART_AdvFeatureConfig+0x15c>)
 800818e:	4013      	ands	r3, r2
 8008190:	0019      	movs	r1, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081a2:	2380      	movs	r3, #128	; 0x80
 80081a4:	035b      	lsls	r3, r3, #13
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d10b      	bne.n	80081c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4a15      	ldr	r2, [pc, #84]	; (8008208 <UART_AdvFeatureConfig+0x160>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	0019      	movs	r1, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	2280      	movs	r2, #128	; 0x80
 80081c8:	4013      	ands	r3, r2
 80081ca:	d00b      	beq.n	80081e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	4a0e      	ldr	r2, [pc, #56]	; (800820c <UART_AdvFeatureConfig+0x164>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	0019      	movs	r1, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	605a      	str	r2, [r3, #4]
  }
}
 80081e4:	46c0      	nop			; (mov r8, r8)
 80081e6:	46bd      	mov	sp, r7
 80081e8:	b002      	add	sp, #8
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	fffdffff 	.word	0xfffdffff
 80081f0:	fffeffff 	.word	0xfffeffff
 80081f4:	fffbffff 	.word	0xfffbffff
 80081f8:	ffff7fff 	.word	0xffff7fff
 80081fc:	ffffefff 	.word	0xffffefff
 8008200:	ffffdfff 	.word	0xffffdfff
 8008204:	ffefffff 	.word	0xffefffff
 8008208:	ff9fffff 	.word	0xff9fffff
 800820c:	fff7ffff 	.word	0xfff7ffff

08008210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af02      	add	r7, sp, #8
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2280      	movs	r2, #128	; 0x80
 800821c:	2100      	movs	r1, #0
 800821e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008220:	f7fc fe04 	bl	8004e2c <HAL_GetTick>
 8008224:	0003      	movs	r3, r0
 8008226:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2208      	movs	r2, #8
 8008230:	4013      	ands	r3, r2
 8008232:	2b08      	cmp	r3, #8
 8008234:	d10c      	bne.n	8008250 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2280      	movs	r2, #128	; 0x80
 800823a:	0391      	lsls	r1, r2, #14
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4a17      	ldr	r2, [pc, #92]	; (800829c <UART_CheckIdleState+0x8c>)
 8008240:	9200      	str	r2, [sp, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	f000 f82c 	bl	80082a0 <UART_WaitOnFlagUntilTimeout>
 8008248:	1e03      	subs	r3, r0, #0
 800824a:	d001      	beq.n	8008250 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e021      	b.n	8008294 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2204      	movs	r2, #4
 8008258:	4013      	ands	r3, r2
 800825a:	2b04      	cmp	r3, #4
 800825c:	d10c      	bne.n	8008278 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2280      	movs	r2, #128	; 0x80
 8008262:	03d1      	lsls	r1, r2, #15
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4a0d      	ldr	r2, [pc, #52]	; (800829c <UART_CheckIdleState+0x8c>)
 8008268:	9200      	str	r2, [sp, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	f000 f818 	bl	80082a0 <UART_WaitOnFlagUntilTimeout>
 8008270:	1e03      	subs	r3, r0, #0
 8008272:	d001      	beq.n	8008278 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e00d      	b.n	8008294 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2274      	movs	r2, #116	; 0x74
 800828e:	2100      	movs	r1, #0
 8008290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	0018      	movs	r0, r3
 8008296:	46bd      	mov	sp, r7
 8008298:	b004      	add	sp, #16
 800829a:	bd80      	pop	{r7, pc}
 800829c:	01ffffff 	.word	0x01ffffff

080082a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b094      	sub	sp, #80	; 0x50
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	603b      	str	r3, [r7, #0]
 80082ac:	1dfb      	adds	r3, r7, #7
 80082ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b0:	e0a3      	b.n	80083fa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082b4:	3301      	adds	r3, #1
 80082b6:	d100      	bne.n	80082ba <UART_WaitOnFlagUntilTimeout+0x1a>
 80082b8:	e09f      	b.n	80083fa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ba:	f7fc fdb7 	bl	8004e2c <HAL_GetTick>
 80082be:	0002      	movs	r2, r0
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d302      	bcc.n	80082d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80082ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d13d      	bne.n	800834c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d0:	f3ef 8310 	mrs	r3, PRIMASK
 80082d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082d8:	647b      	str	r3, [r7, #68]	; 0x44
 80082da:	2301      	movs	r3, #1
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	f383 8810 	msr	PRIMASK, r3
}
 80082e4:	46c0      	nop			; (mov r8, r8)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	494c      	ldr	r1, [pc, #304]	; (8008424 <UART_WaitOnFlagUntilTimeout+0x184>)
 80082f2:	400a      	ands	r2, r1
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	f383 8810 	msr	PRIMASK, r3
}
 8008300:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008302:	f3ef 8310 	mrs	r3, PRIMASK
 8008306:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830a:	643b      	str	r3, [r7, #64]	; 0x40
 800830c:	2301      	movs	r3, #1
 800830e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	f383 8810 	msr	PRIMASK, r3
}
 8008316:	46c0      	nop			; (mov r8, r8)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689a      	ldr	r2, [r3, #8]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2101      	movs	r1, #1
 8008324:	438a      	bics	r2, r1
 8008326:	609a      	str	r2, [r3, #8]
 8008328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832e:	f383 8810 	msr	PRIMASK, r3
}
 8008332:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2220      	movs	r2, #32
 8008338:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2220      	movs	r2, #32
 800833e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2274      	movs	r2, #116	; 0x74
 8008344:	2100      	movs	r1, #0
 8008346:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e067      	b.n	800841c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2204      	movs	r2, #4
 8008354:	4013      	ands	r3, r2
 8008356:	d050      	beq.n	80083fa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69da      	ldr	r2, [r3, #28]
 800835e:	2380      	movs	r3, #128	; 0x80
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	401a      	ands	r2, r3
 8008364:	2380      	movs	r3, #128	; 0x80
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	429a      	cmp	r2, r3
 800836a:	d146      	bne.n	80083fa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2280      	movs	r2, #128	; 0x80
 8008372:	0112      	lsls	r2, r2, #4
 8008374:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008376:	f3ef 8310 	mrs	r3, PRIMASK
 800837a:	613b      	str	r3, [r7, #16]
  return(result);
 800837c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800837e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008380:	2301      	movs	r3, #1
 8008382:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f383 8810 	msr	PRIMASK, r3
}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4923      	ldr	r1, [pc, #140]	; (8008424 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008398:	400a      	ands	r2, r1
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800839e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f383 8810 	msr	PRIMASK, r3
}
 80083a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a8:	f3ef 8310 	mrs	r3, PRIMASK
 80083ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80083ae:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80083b2:	2301      	movs	r3, #1
 80083b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	f383 8810 	msr	PRIMASK, r3
}
 80083bc:	46c0      	nop			; (mov r8, r8)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2101      	movs	r1, #1
 80083ca:	438a      	bics	r2, r1
 80083cc:	609a      	str	r2, [r3, #8]
 80083ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	f383 8810 	msr	PRIMASK, r3
}
 80083d8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2220      	movs	r2, #32
 80083de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2220      	movs	r2, #32
 80083e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2280      	movs	r2, #128	; 0x80
 80083ea:	2120      	movs	r1, #32
 80083ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2274      	movs	r2, #116	; 0x74
 80083f2:	2100      	movs	r1, #0
 80083f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e010      	b.n	800841c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	4013      	ands	r3, r2
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	425a      	negs	r2, r3
 800840a:	4153      	adcs	r3, r2
 800840c:	b2db      	uxtb	r3, r3
 800840e:	001a      	movs	r2, r3
 8008410:	1dfb      	adds	r3, r7, #7
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	429a      	cmp	r2, r3
 8008416:	d100      	bne.n	800841a <UART_WaitOnFlagUntilTimeout+0x17a>
 8008418:	e74b      	b.n	80082b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	0018      	movs	r0, r3
 800841e:	46bd      	mov	sp, r7
 8008420:	b014      	add	sp, #80	; 0x50
 8008422:	bd80      	pop	{r7, pc}
 8008424:	fffffe5f 	.word	0xfffffe5f

08008428 <__errno>:
 8008428:	4b01      	ldr	r3, [pc, #4]	; (8008430 <__errno+0x8>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	4770      	bx	lr
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	20000014 	.word	0x20000014

08008434 <__libc_init_array>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	2600      	movs	r6, #0
 8008438:	4d0c      	ldr	r5, [pc, #48]	; (800846c <__libc_init_array+0x38>)
 800843a:	4c0d      	ldr	r4, [pc, #52]	; (8008470 <__libc_init_array+0x3c>)
 800843c:	1b64      	subs	r4, r4, r5
 800843e:	10a4      	asrs	r4, r4, #2
 8008440:	42a6      	cmp	r6, r4
 8008442:	d109      	bne.n	8008458 <__libc_init_array+0x24>
 8008444:	2600      	movs	r6, #0
 8008446:	f002 ffbd 	bl	800b3c4 <_init>
 800844a:	4d0a      	ldr	r5, [pc, #40]	; (8008474 <__libc_init_array+0x40>)
 800844c:	4c0a      	ldr	r4, [pc, #40]	; (8008478 <__libc_init_array+0x44>)
 800844e:	1b64      	subs	r4, r4, r5
 8008450:	10a4      	asrs	r4, r4, #2
 8008452:	42a6      	cmp	r6, r4
 8008454:	d105      	bne.n	8008462 <__libc_init_array+0x2e>
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	00b3      	lsls	r3, r6, #2
 800845a:	58eb      	ldr	r3, [r5, r3]
 800845c:	4798      	blx	r3
 800845e:	3601      	adds	r6, #1
 8008460:	e7ee      	b.n	8008440 <__libc_init_array+0xc>
 8008462:	00b3      	lsls	r3, r6, #2
 8008464:	58eb      	ldr	r3, [r5, r3]
 8008466:	4798      	blx	r3
 8008468:	3601      	adds	r6, #1
 800846a:	e7f2      	b.n	8008452 <__libc_init_array+0x1e>
 800846c:	0800b9f4 	.word	0x0800b9f4
 8008470:	0800b9f4 	.word	0x0800b9f4
 8008474:	0800b9f4 	.word	0x0800b9f4
 8008478:	0800b9f8 	.word	0x0800b9f8

0800847c <memcpy>:
 800847c:	2300      	movs	r3, #0
 800847e:	b510      	push	{r4, lr}
 8008480:	429a      	cmp	r2, r3
 8008482:	d100      	bne.n	8008486 <memcpy+0xa>
 8008484:	bd10      	pop	{r4, pc}
 8008486:	5ccc      	ldrb	r4, [r1, r3]
 8008488:	54c4      	strb	r4, [r0, r3]
 800848a:	3301      	adds	r3, #1
 800848c:	e7f8      	b.n	8008480 <memcpy+0x4>

0800848e <memset>:
 800848e:	0003      	movs	r3, r0
 8008490:	1882      	adds	r2, r0, r2
 8008492:	4293      	cmp	r3, r2
 8008494:	d100      	bne.n	8008498 <memset+0xa>
 8008496:	4770      	bx	lr
 8008498:	7019      	strb	r1, [r3, #0]
 800849a:	3301      	adds	r3, #1
 800849c:	e7f9      	b.n	8008492 <memset+0x4>

0800849e <__cvt>:
 800849e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a0:	001e      	movs	r6, r3
 80084a2:	2300      	movs	r3, #0
 80084a4:	0014      	movs	r4, r2
 80084a6:	b08b      	sub	sp, #44	; 0x2c
 80084a8:	429e      	cmp	r6, r3
 80084aa:	da04      	bge.n	80084b6 <__cvt+0x18>
 80084ac:	2180      	movs	r1, #128	; 0x80
 80084ae:	0609      	lsls	r1, r1, #24
 80084b0:	1873      	adds	r3, r6, r1
 80084b2:	001e      	movs	r6, r3
 80084b4:	232d      	movs	r3, #45	; 0x2d
 80084b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084b8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80084ba:	7013      	strb	r3, [r2, #0]
 80084bc:	2320      	movs	r3, #32
 80084be:	2203      	movs	r2, #3
 80084c0:	439f      	bics	r7, r3
 80084c2:	2f46      	cmp	r7, #70	; 0x46
 80084c4:	d007      	beq.n	80084d6 <__cvt+0x38>
 80084c6:	003b      	movs	r3, r7
 80084c8:	3b45      	subs	r3, #69	; 0x45
 80084ca:	4259      	negs	r1, r3
 80084cc:	414b      	adcs	r3, r1
 80084ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 80084d0:	3a01      	subs	r2, #1
 80084d2:	18cb      	adds	r3, r1, r3
 80084d4:	9310      	str	r3, [sp, #64]	; 0x40
 80084d6:	ab09      	add	r3, sp, #36	; 0x24
 80084d8:	9304      	str	r3, [sp, #16]
 80084da:	ab08      	add	r3, sp, #32
 80084dc:	9303      	str	r3, [sp, #12]
 80084de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084e0:	9200      	str	r2, [sp, #0]
 80084e2:	9302      	str	r3, [sp, #8]
 80084e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084e6:	0022      	movs	r2, r4
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	0033      	movs	r3, r6
 80084ec:	f000 fcf2 	bl	8008ed4 <_dtoa_r>
 80084f0:	0005      	movs	r5, r0
 80084f2:	2f47      	cmp	r7, #71	; 0x47
 80084f4:	d102      	bne.n	80084fc <__cvt+0x5e>
 80084f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084f8:	07db      	lsls	r3, r3, #31
 80084fa:	d528      	bpl.n	800854e <__cvt+0xb0>
 80084fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084fe:	18eb      	adds	r3, r5, r3
 8008500:	9307      	str	r3, [sp, #28]
 8008502:	2f46      	cmp	r7, #70	; 0x46
 8008504:	d114      	bne.n	8008530 <__cvt+0x92>
 8008506:	782b      	ldrb	r3, [r5, #0]
 8008508:	2b30      	cmp	r3, #48	; 0x30
 800850a:	d10c      	bne.n	8008526 <__cvt+0x88>
 800850c:	2200      	movs	r2, #0
 800850e:	2300      	movs	r3, #0
 8008510:	0020      	movs	r0, r4
 8008512:	0031      	movs	r1, r6
 8008514:	f7f7 ff9a 	bl	800044c <__aeabi_dcmpeq>
 8008518:	2800      	cmp	r0, #0
 800851a:	d104      	bne.n	8008526 <__cvt+0x88>
 800851c:	2301      	movs	r3, #1
 800851e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008520:	1a9b      	subs	r3, r3, r2
 8008522:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008528:	9a07      	ldr	r2, [sp, #28]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	18d3      	adds	r3, r2, r3
 800852e:	9307      	str	r3, [sp, #28]
 8008530:	2200      	movs	r2, #0
 8008532:	2300      	movs	r3, #0
 8008534:	0020      	movs	r0, r4
 8008536:	0031      	movs	r1, r6
 8008538:	f7f7 ff88 	bl	800044c <__aeabi_dcmpeq>
 800853c:	2800      	cmp	r0, #0
 800853e:	d001      	beq.n	8008544 <__cvt+0xa6>
 8008540:	9b07      	ldr	r3, [sp, #28]
 8008542:	9309      	str	r3, [sp, #36]	; 0x24
 8008544:	2230      	movs	r2, #48	; 0x30
 8008546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008548:	9907      	ldr	r1, [sp, #28]
 800854a:	428b      	cmp	r3, r1
 800854c:	d306      	bcc.n	800855c <__cvt+0xbe>
 800854e:	0028      	movs	r0, r5
 8008550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008552:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008554:	1b5b      	subs	r3, r3, r5
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	b00b      	add	sp, #44	; 0x2c
 800855a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855c:	1c59      	adds	r1, r3, #1
 800855e:	9109      	str	r1, [sp, #36]	; 0x24
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e7f0      	b.n	8008546 <__cvt+0xa8>

08008564 <__exponent>:
 8008564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008566:	1c83      	adds	r3, r0, #2
 8008568:	b087      	sub	sp, #28
 800856a:	9303      	str	r3, [sp, #12]
 800856c:	0005      	movs	r5, r0
 800856e:	000c      	movs	r4, r1
 8008570:	232b      	movs	r3, #43	; 0x2b
 8008572:	7002      	strb	r2, [r0, #0]
 8008574:	2900      	cmp	r1, #0
 8008576:	da01      	bge.n	800857c <__exponent+0x18>
 8008578:	424c      	negs	r4, r1
 800857a:	3302      	adds	r3, #2
 800857c:	706b      	strb	r3, [r5, #1]
 800857e:	2c09      	cmp	r4, #9
 8008580:	dd31      	ble.n	80085e6 <__exponent+0x82>
 8008582:	270a      	movs	r7, #10
 8008584:	ab04      	add	r3, sp, #16
 8008586:	1dde      	adds	r6, r3, #7
 8008588:	0020      	movs	r0, r4
 800858a:	0039      	movs	r1, r7
 800858c:	9601      	str	r6, [sp, #4]
 800858e:	f7f7 ff47 	bl	8000420 <__aeabi_idivmod>
 8008592:	3e01      	subs	r6, #1
 8008594:	3130      	adds	r1, #48	; 0x30
 8008596:	0020      	movs	r0, r4
 8008598:	7031      	strb	r1, [r6, #0]
 800859a:	0039      	movs	r1, r7
 800859c:	9402      	str	r4, [sp, #8]
 800859e:	f7f7 fe59 	bl	8000254 <__divsi3>
 80085a2:	9b02      	ldr	r3, [sp, #8]
 80085a4:	0004      	movs	r4, r0
 80085a6:	2b63      	cmp	r3, #99	; 0x63
 80085a8:	dcee      	bgt.n	8008588 <__exponent+0x24>
 80085aa:	9b01      	ldr	r3, [sp, #4]
 80085ac:	3430      	adds	r4, #48	; 0x30
 80085ae:	1e9a      	subs	r2, r3, #2
 80085b0:	0013      	movs	r3, r2
 80085b2:	9903      	ldr	r1, [sp, #12]
 80085b4:	7014      	strb	r4, [r2, #0]
 80085b6:	a804      	add	r0, sp, #16
 80085b8:	3007      	adds	r0, #7
 80085ba:	4298      	cmp	r0, r3
 80085bc:	d80e      	bhi.n	80085dc <__exponent+0x78>
 80085be:	ab04      	add	r3, sp, #16
 80085c0:	3307      	adds	r3, #7
 80085c2:	2000      	movs	r0, #0
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d804      	bhi.n	80085d2 <__exponent+0x6e>
 80085c8:	ab04      	add	r3, sp, #16
 80085ca:	3009      	adds	r0, #9
 80085cc:	18c0      	adds	r0, r0, r3
 80085ce:	9b01      	ldr	r3, [sp, #4]
 80085d0:	1ac0      	subs	r0, r0, r3
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	1818      	adds	r0, r3, r0
 80085d6:	1b40      	subs	r0, r0, r5
 80085d8:	b007      	add	sp, #28
 80085da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085dc:	7818      	ldrb	r0, [r3, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	7008      	strb	r0, [r1, #0]
 80085e2:	3101      	adds	r1, #1
 80085e4:	e7e7      	b.n	80085b6 <__exponent+0x52>
 80085e6:	2330      	movs	r3, #48	; 0x30
 80085e8:	18e4      	adds	r4, r4, r3
 80085ea:	70ab      	strb	r3, [r5, #2]
 80085ec:	1d28      	adds	r0, r5, #4
 80085ee:	70ec      	strb	r4, [r5, #3]
 80085f0:	e7f1      	b.n	80085d6 <__exponent+0x72>
	...

080085f4 <_printf_float>:
 80085f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085f6:	b095      	sub	sp, #84	; 0x54
 80085f8:	000c      	movs	r4, r1
 80085fa:	9209      	str	r2, [sp, #36]	; 0x24
 80085fc:	001e      	movs	r6, r3
 80085fe:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008600:	0007      	movs	r7, r0
 8008602:	f001 fa81 	bl	8009b08 <_localeconv_r>
 8008606:	6803      	ldr	r3, [r0, #0]
 8008608:	0018      	movs	r0, r3
 800860a:	930c      	str	r3, [sp, #48]	; 0x30
 800860c:	f7f7 fd7c 	bl	8000108 <strlen>
 8008610:	2300      	movs	r3, #0
 8008612:	9312      	str	r3, [sp, #72]	; 0x48
 8008614:	7e23      	ldrb	r3, [r4, #24]
 8008616:	2207      	movs	r2, #7
 8008618:	930a      	str	r3, [sp, #40]	; 0x28
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	900e      	str	r0, [sp, #56]	; 0x38
 800861e:	930d      	str	r3, [sp, #52]	; 0x34
 8008620:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	05c9      	lsls	r1, r1, #23
 8008626:	d547      	bpl.n	80086b8 <_printf_float+0xc4>
 8008628:	189b      	adds	r3, r3, r2
 800862a:	4393      	bics	r3, r2
 800862c:	001a      	movs	r2, r3
 800862e:	3208      	adds	r2, #8
 8008630:	602a      	str	r2, [r5, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	64a2      	str	r2, [r4, #72]	; 0x48
 8008638:	64e3      	str	r3, [r4, #76]	; 0x4c
 800863a:	2201      	movs	r2, #1
 800863c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800863e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008640:	930b      	str	r3, [sp, #44]	; 0x2c
 8008642:	006b      	lsls	r3, r5, #1
 8008644:	085b      	lsrs	r3, r3, #1
 8008646:	930f      	str	r3, [sp, #60]	; 0x3c
 8008648:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800864a:	4ba7      	ldr	r3, [pc, #668]	; (80088e8 <_printf_float+0x2f4>)
 800864c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800864e:	4252      	negs	r2, r2
 8008650:	f7fa fcda 	bl	8003008 <__aeabi_dcmpun>
 8008654:	2800      	cmp	r0, #0
 8008656:	d131      	bne.n	80086bc <_printf_float+0xc8>
 8008658:	2201      	movs	r2, #1
 800865a:	4ba3      	ldr	r3, [pc, #652]	; (80088e8 <_printf_float+0x2f4>)
 800865c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800865e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008660:	4252      	negs	r2, r2
 8008662:	f7f7 ff03 	bl	800046c <__aeabi_dcmple>
 8008666:	2800      	cmp	r0, #0
 8008668:	d128      	bne.n	80086bc <_printf_float+0xc8>
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	0029      	movs	r1, r5
 8008670:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008672:	f7f7 fef1 	bl	8000458 <__aeabi_dcmplt>
 8008676:	2800      	cmp	r0, #0
 8008678:	d003      	beq.n	8008682 <_printf_float+0x8e>
 800867a:	0023      	movs	r3, r4
 800867c:	222d      	movs	r2, #45	; 0x2d
 800867e:	3343      	adds	r3, #67	; 0x43
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008684:	4d99      	ldr	r5, [pc, #612]	; (80088ec <_printf_float+0x2f8>)
 8008686:	2b47      	cmp	r3, #71	; 0x47
 8008688:	d900      	bls.n	800868c <_printf_float+0x98>
 800868a:	4d99      	ldr	r5, [pc, #612]	; (80088f0 <_printf_float+0x2fc>)
 800868c:	2303      	movs	r3, #3
 800868e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	3301      	adds	r3, #1
 8008694:	439a      	bics	r2, r3
 8008696:	2300      	movs	r3, #0
 8008698:	6022      	str	r2, [r4, #0]
 800869a:	930b      	str	r3, [sp, #44]	; 0x2c
 800869c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869e:	0021      	movs	r1, r4
 80086a0:	0038      	movs	r0, r7
 80086a2:	9600      	str	r6, [sp, #0]
 80086a4:	aa13      	add	r2, sp, #76	; 0x4c
 80086a6:	f000 f9e7 	bl	8008a78 <_printf_common>
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	d000      	beq.n	80086b0 <_printf_float+0xbc>
 80086ae:	e0a2      	b.n	80087f6 <_printf_float+0x202>
 80086b0:	2001      	movs	r0, #1
 80086b2:	4240      	negs	r0, r0
 80086b4:	b015      	add	sp, #84	; 0x54
 80086b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b8:	3307      	adds	r3, #7
 80086ba:	e7b6      	b.n	800862a <_printf_float+0x36>
 80086bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086be:	002b      	movs	r3, r5
 80086c0:	0010      	movs	r0, r2
 80086c2:	0029      	movs	r1, r5
 80086c4:	f7fa fca0 	bl	8003008 <__aeabi_dcmpun>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d00b      	beq.n	80086e4 <_printf_float+0xf0>
 80086cc:	2d00      	cmp	r5, #0
 80086ce:	da03      	bge.n	80086d8 <_printf_float+0xe4>
 80086d0:	0023      	movs	r3, r4
 80086d2:	222d      	movs	r2, #45	; 0x2d
 80086d4:	3343      	adds	r3, #67	; 0x43
 80086d6:	701a      	strb	r2, [r3, #0]
 80086d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086da:	4d86      	ldr	r5, [pc, #536]	; (80088f4 <_printf_float+0x300>)
 80086dc:	2b47      	cmp	r3, #71	; 0x47
 80086de:	d9d5      	bls.n	800868c <_printf_float+0x98>
 80086e0:	4d85      	ldr	r5, [pc, #532]	; (80088f8 <_printf_float+0x304>)
 80086e2:	e7d3      	b.n	800868c <_printf_float+0x98>
 80086e4:	2220      	movs	r2, #32
 80086e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80086e8:	6863      	ldr	r3, [r4, #4]
 80086ea:	4391      	bics	r1, r2
 80086ec:	910f      	str	r1, [sp, #60]	; 0x3c
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	d149      	bne.n	8008786 <_printf_float+0x192>
 80086f2:	3307      	adds	r3, #7
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	2380      	movs	r3, #128	; 0x80
 80086f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	4313      	orrs	r3, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	9206      	str	r2, [sp, #24]
 8008702:	aa12      	add	r2, sp, #72	; 0x48
 8008704:	9205      	str	r2, [sp, #20]
 8008706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008708:	a908      	add	r1, sp, #32
 800870a:	9204      	str	r2, [sp, #16]
 800870c:	aa11      	add	r2, sp, #68	; 0x44
 800870e:	9203      	str	r2, [sp, #12]
 8008710:	2223      	movs	r2, #35	; 0x23
 8008712:	6023      	str	r3, [r4, #0]
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	6863      	ldr	r3, [r4, #4]
 8008718:	1852      	adds	r2, r2, r1
 800871a:	9202      	str	r2, [sp, #8]
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	0038      	movs	r0, r7
 8008720:	002b      	movs	r3, r5
 8008722:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008724:	f7ff febb 	bl	800849e <__cvt>
 8008728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800872a:	0005      	movs	r5, r0
 800872c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800872e:	2b47      	cmp	r3, #71	; 0x47
 8008730:	d108      	bne.n	8008744 <_printf_float+0x150>
 8008732:	1ccb      	adds	r3, r1, #3
 8008734:	db02      	blt.n	800873c <_printf_float+0x148>
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	4299      	cmp	r1, r3
 800873a:	dd48      	ble.n	80087ce <_printf_float+0x1da>
 800873c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873e:	3b02      	subs	r3, #2
 8008740:	b2db      	uxtb	r3, r3
 8008742:	930a      	str	r3, [sp, #40]	; 0x28
 8008744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008746:	2b65      	cmp	r3, #101	; 0x65
 8008748:	d824      	bhi.n	8008794 <_printf_float+0x1a0>
 800874a:	0020      	movs	r0, r4
 800874c:	001a      	movs	r2, r3
 800874e:	3901      	subs	r1, #1
 8008750:	3050      	adds	r0, #80	; 0x50
 8008752:	9111      	str	r1, [sp, #68]	; 0x44
 8008754:	f7ff ff06 	bl	8008564 <__exponent>
 8008758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800875a:	900b      	str	r0, [sp, #44]	; 0x2c
 800875c:	1813      	adds	r3, r2, r0
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	2a01      	cmp	r2, #1
 8008762:	dc02      	bgt.n	800876a <_printf_float+0x176>
 8008764:	6822      	ldr	r2, [r4, #0]
 8008766:	07d2      	lsls	r2, r2, #31
 8008768:	d501      	bpl.n	800876e <_printf_float+0x17a>
 800876a:	3301      	adds	r3, #1
 800876c:	6123      	str	r3, [r4, #16]
 800876e:	2323      	movs	r3, #35	; 0x23
 8008770:	aa08      	add	r2, sp, #32
 8008772:	189b      	adds	r3, r3, r2
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d100      	bne.n	800877c <_printf_float+0x188>
 800877a:	e78f      	b.n	800869c <_printf_float+0xa8>
 800877c:	0023      	movs	r3, r4
 800877e:	222d      	movs	r2, #45	; 0x2d
 8008780:	3343      	adds	r3, #67	; 0x43
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e78a      	b.n	800869c <_printf_float+0xa8>
 8008786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008788:	2a47      	cmp	r2, #71	; 0x47
 800878a:	d1b4      	bne.n	80086f6 <_printf_float+0x102>
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1b2      	bne.n	80086f6 <_printf_float+0x102>
 8008790:	3301      	adds	r3, #1
 8008792:	e7af      	b.n	80086f4 <_printf_float+0x100>
 8008794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008796:	2b66      	cmp	r3, #102	; 0x66
 8008798:	d11b      	bne.n	80087d2 <_printf_float+0x1de>
 800879a:	6863      	ldr	r3, [r4, #4]
 800879c:	2900      	cmp	r1, #0
 800879e:	dd0d      	ble.n	80087bc <_printf_float+0x1c8>
 80087a0:	6121      	str	r1, [r4, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <_printf_float+0x1b8>
 80087a6:	6822      	ldr	r2, [r4, #0]
 80087a8:	07d2      	lsls	r2, r2, #31
 80087aa:	d502      	bpl.n	80087b2 <_printf_float+0x1be>
 80087ac:	3301      	adds	r3, #1
 80087ae:	1859      	adds	r1, r3, r1
 80087b0:	6121      	str	r1, [r4, #16]
 80087b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80087b6:	2300      	movs	r3, #0
 80087b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80087ba:	e7d8      	b.n	800876e <_printf_float+0x17a>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d103      	bne.n	80087c8 <_printf_float+0x1d4>
 80087c0:	2201      	movs	r2, #1
 80087c2:	6821      	ldr	r1, [r4, #0]
 80087c4:	4211      	tst	r1, r2
 80087c6:	d000      	beq.n	80087ca <_printf_float+0x1d6>
 80087c8:	1c9a      	adds	r2, r3, #2
 80087ca:	6122      	str	r2, [r4, #16]
 80087cc:	e7f1      	b.n	80087b2 <_printf_float+0x1be>
 80087ce:	2367      	movs	r3, #103	; 0x67
 80087d0:	930a      	str	r3, [sp, #40]	; 0x28
 80087d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087d6:	4293      	cmp	r3, r2
 80087d8:	db06      	blt.n	80087e8 <_printf_float+0x1f4>
 80087da:	6822      	ldr	r2, [r4, #0]
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	07d2      	lsls	r2, r2, #31
 80087e0:	d5e7      	bpl.n	80087b2 <_printf_float+0x1be>
 80087e2:	3301      	adds	r3, #1
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	e7e4      	b.n	80087b2 <_printf_float+0x1be>
 80087e8:	2101      	movs	r1, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dc01      	bgt.n	80087f2 <_printf_float+0x1fe>
 80087ee:	1849      	adds	r1, r1, r1
 80087f0:	1ac9      	subs	r1, r1, r3
 80087f2:	1852      	adds	r2, r2, r1
 80087f4:	e7e9      	b.n	80087ca <_printf_float+0x1d6>
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	0553      	lsls	r3, r2, #21
 80087fa:	d407      	bmi.n	800880c <_printf_float+0x218>
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	002a      	movs	r2, r5
 8008800:	0038      	movs	r0, r7
 8008802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008804:	47b0      	blx	r6
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d128      	bne.n	800885c <_printf_float+0x268>
 800880a:	e751      	b.n	80086b0 <_printf_float+0xbc>
 800880c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880e:	2b65      	cmp	r3, #101	; 0x65
 8008810:	d800      	bhi.n	8008814 <_printf_float+0x220>
 8008812:	e0e1      	b.n	80089d8 <_printf_float+0x3e4>
 8008814:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008816:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008818:	2200      	movs	r2, #0
 800881a:	2300      	movs	r3, #0
 800881c:	f7f7 fe16 	bl	800044c <__aeabi_dcmpeq>
 8008820:	2800      	cmp	r0, #0
 8008822:	d031      	beq.n	8008888 <_printf_float+0x294>
 8008824:	2301      	movs	r3, #1
 8008826:	0038      	movs	r0, r7
 8008828:	4a34      	ldr	r2, [pc, #208]	; (80088fc <_printf_float+0x308>)
 800882a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800882c:	47b0      	blx	r6
 800882e:	1c43      	adds	r3, r0, #1
 8008830:	d100      	bne.n	8008834 <_printf_float+0x240>
 8008832:	e73d      	b.n	80086b0 <_printf_float+0xbc>
 8008834:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008836:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008838:	4293      	cmp	r3, r2
 800883a:	db02      	blt.n	8008842 <_printf_float+0x24e>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	07db      	lsls	r3, r3, #31
 8008840:	d50c      	bpl.n	800885c <_printf_float+0x268>
 8008842:	0038      	movs	r0, r7
 8008844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008848:	9909      	ldr	r1, [sp, #36]	; 0x24
 800884a:	47b0      	blx	r6
 800884c:	2500      	movs	r5, #0
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	d100      	bne.n	8008854 <_printf_float+0x260>
 8008852:	e72d      	b.n	80086b0 <_printf_float+0xbc>
 8008854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008856:	3b01      	subs	r3, #1
 8008858:	42ab      	cmp	r3, r5
 800885a:	dc0a      	bgt.n	8008872 <_printf_float+0x27e>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	079b      	lsls	r3, r3, #30
 8008860:	d500      	bpl.n	8008864 <_printf_float+0x270>
 8008862:	e106      	b.n	8008a72 <_printf_float+0x47e>
 8008864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008866:	68e0      	ldr	r0, [r4, #12]
 8008868:	4298      	cmp	r0, r3
 800886a:	db00      	blt.n	800886e <_printf_float+0x27a>
 800886c:	e722      	b.n	80086b4 <_printf_float+0xc0>
 800886e:	0018      	movs	r0, r3
 8008870:	e720      	b.n	80086b4 <_printf_float+0xc0>
 8008872:	0022      	movs	r2, r4
 8008874:	2301      	movs	r3, #1
 8008876:	0038      	movs	r0, r7
 8008878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800887a:	321a      	adds	r2, #26
 800887c:	47b0      	blx	r6
 800887e:	1c43      	adds	r3, r0, #1
 8008880:	d100      	bne.n	8008884 <_printf_float+0x290>
 8008882:	e715      	b.n	80086b0 <_printf_float+0xbc>
 8008884:	3501      	adds	r5, #1
 8008886:	e7e5      	b.n	8008854 <_printf_float+0x260>
 8008888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800888a:	2b00      	cmp	r3, #0
 800888c:	dc38      	bgt.n	8008900 <_printf_float+0x30c>
 800888e:	2301      	movs	r3, #1
 8008890:	0038      	movs	r0, r7
 8008892:	4a1a      	ldr	r2, [pc, #104]	; (80088fc <_printf_float+0x308>)
 8008894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008896:	47b0      	blx	r6
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d100      	bne.n	800889e <_printf_float+0x2aa>
 800889c:	e708      	b.n	80086b0 <_printf_float+0xbc>
 800889e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088a2:	4313      	orrs	r3, r2
 80088a4:	d102      	bne.n	80088ac <_printf_float+0x2b8>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	07db      	lsls	r3, r3, #31
 80088aa:	d5d7      	bpl.n	800885c <_printf_float+0x268>
 80088ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ae:	0038      	movs	r0, r7
 80088b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088b4:	47b0      	blx	r6
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	d100      	bne.n	80088bc <_printf_float+0x2c8>
 80088ba:	e6f9      	b.n	80086b0 <_printf_float+0xbc>
 80088bc:	2300      	movs	r3, #0
 80088be:	930a      	str	r3, [sp, #40]	; 0x28
 80088c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088c4:	425b      	negs	r3, r3
 80088c6:	4293      	cmp	r3, r2
 80088c8:	dc01      	bgt.n	80088ce <_printf_float+0x2da>
 80088ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088cc:	e797      	b.n	80087fe <_printf_float+0x20a>
 80088ce:	0022      	movs	r2, r4
 80088d0:	2301      	movs	r3, #1
 80088d2:	0038      	movs	r0, r7
 80088d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088d6:	321a      	adds	r2, #26
 80088d8:	47b0      	blx	r6
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	d100      	bne.n	80088e0 <_printf_float+0x2ec>
 80088de:	e6e7      	b.n	80086b0 <_printf_float+0xbc>
 80088e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e2:	3301      	adds	r3, #1
 80088e4:	e7eb      	b.n	80088be <_printf_float+0x2ca>
 80088e6:	46c0      	nop			; (mov r8, r8)
 80088e8:	7fefffff 	.word	0x7fefffff
 80088ec:	0800b614 	.word	0x0800b614
 80088f0:	0800b618 	.word	0x0800b618
 80088f4:	0800b61c 	.word	0x0800b61c
 80088f8:	0800b620 	.word	0x0800b620
 80088fc:	0800b624 	.word	0x0800b624
 8008900:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008904:	920a      	str	r2, [sp, #40]	; 0x28
 8008906:	429a      	cmp	r2, r3
 8008908:	dd00      	ble.n	800890c <_printf_float+0x318>
 800890a:	930a      	str	r3, [sp, #40]	; 0x28
 800890c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890e:	2b00      	cmp	r3, #0
 8008910:	dc3c      	bgt.n	800898c <_printf_float+0x398>
 8008912:	2300      	movs	r3, #0
 8008914:	930d      	str	r3, [sp, #52]	; 0x34
 8008916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008918:	43db      	mvns	r3, r3
 800891a:	17db      	asrs	r3, r3, #31
 800891c:	930f      	str	r3, [sp, #60]	; 0x3c
 800891e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008922:	930b      	str	r3, [sp, #44]	; 0x2c
 8008924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008926:	4013      	ands	r3, r2
 8008928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800892e:	4293      	cmp	r3, r2
 8008930:	dc34      	bgt.n	800899c <_printf_float+0x3a8>
 8008932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008936:	4293      	cmp	r3, r2
 8008938:	db3d      	blt.n	80089b6 <_printf_float+0x3c2>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	07db      	lsls	r3, r3, #31
 800893e:	d43a      	bmi.n	80089b6 <_printf_float+0x3c2>
 8008940:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008944:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	1a52      	subs	r2, r2, r1
 800894a:	920a      	str	r2, [sp, #40]	; 0x28
 800894c:	429a      	cmp	r2, r3
 800894e:	dd00      	ble.n	8008952 <_printf_float+0x35e>
 8008950:	930a      	str	r3, [sp, #40]	; 0x28
 8008952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008954:	2b00      	cmp	r3, #0
 8008956:	dc36      	bgt.n	80089c6 <_printf_float+0x3d2>
 8008958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800895a:	2500      	movs	r5, #0
 800895c:	43db      	mvns	r3, r3
 800895e:	17db      	asrs	r3, r3, #31
 8008960:	930b      	str	r3, [sp, #44]	; 0x2c
 8008962:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800896c:	400a      	ands	r2, r1
 800896e:	1a9b      	subs	r3, r3, r2
 8008970:	42ab      	cmp	r3, r5
 8008972:	dc00      	bgt.n	8008976 <_printf_float+0x382>
 8008974:	e772      	b.n	800885c <_printf_float+0x268>
 8008976:	0022      	movs	r2, r4
 8008978:	2301      	movs	r3, #1
 800897a:	0038      	movs	r0, r7
 800897c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800897e:	321a      	adds	r2, #26
 8008980:	47b0      	blx	r6
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	d100      	bne.n	8008988 <_printf_float+0x394>
 8008986:	e693      	b.n	80086b0 <_printf_float+0xbc>
 8008988:	3501      	adds	r5, #1
 800898a:	e7ea      	b.n	8008962 <_printf_float+0x36e>
 800898c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898e:	002a      	movs	r2, r5
 8008990:	0038      	movs	r0, r7
 8008992:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008994:	47b0      	blx	r6
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d1bb      	bne.n	8008912 <_printf_float+0x31e>
 800899a:	e689      	b.n	80086b0 <_printf_float+0xbc>
 800899c:	0022      	movs	r2, r4
 800899e:	2301      	movs	r3, #1
 80089a0:	0038      	movs	r0, r7
 80089a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089a4:	321a      	adds	r2, #26
 80089a6:	47b0      	blx	r6
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d100      	bne.n	80089ae <_printf_float+0x3ba>
 80089ac:	e680      	b.n	80086b0 <_printf_float+0xbc>
 80089ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089b0:	3301      	adds	r3, #1
 80089b2:	930d      	str	r3, [sp, #52]	; 0x34
 80089b4:	e7b3      	b.n	800891e <_printf_float+0x32a>
 80089b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089b8:	0038      	movs	r0, r7
 80089ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089be:	47b0      	blx	r6
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d1bd      	bne.n	8008940 <_printf_float+0x34c>
 80089c4:	e674      	b.n	80086b0 <_printf_float+0xbc>
 80089c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c8:	0038      	movs	r0, r7
 80089ca:	18ea      	adds	r2, r5, r3
 80089cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d0:	47b0      	blx	r6
 80089d2:	1c43      	adds	r3, r0, #1
 80089d4:	d1c0      	bne.n	8008958 <_printf_float+0x364>
 80089d6:	e66b      	b.n	80086b0 <_printf_float+0xbc>
 80089d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089da:	2b01      	cmp	r3, #1
 80089dc:	dc02      	bgt.n	80089e4 <_printf_float+0x3f0>
 80089de:	2301      	movs	r3, #1
 80089e0:	421a      	tst	r2, r3
 80089e2:	d034      	beq.n	8008a4e <_printf_float+0x45a>
 80089e4:	2301      	movs	r3, #1
 80089e6:	002a      	movs	r2, r5
 80089e8:	0038      	movs	r0, r7
 80089ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ec:	47b0      	blx	r6
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	d100      	bne.n	80089f4 <_printf_float+0x400>
 80089f2:	e65d      	b.n	80086b0 <_printf_float+0xbc>
 80089f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089f6:	0038      	movs	r0, r7
 80089f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089fc:	47b0      	blx	r6
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d100      	bne.n	8008a04 <_printf_float+0x410>
 8008a02:	e655      	b.n	80086b0 <_printf_float+0xbc>
 8008a04:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008a06:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f7f7 fd1e 	bl	800044c <__aeabi_dcmpeq>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d11a      	bne.n	8008a4a <_printf_float+0x456>
 8008a14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a16:	1c6a      	adds	r2, r5, #1
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	0038      	movs	r0, r7
 8008a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a1e:	47b0      	blx	r6
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d10e      	bne.n	8008a42 <_printf_float+0x44e>
 8008a24:	e644      	b.n	80086b0 <_printf_float+0xbc>
 8008a26:	0022      	movs	r2, r4
 8008a28:	2301      	movs	r3, #1
 8008a2a:	0038      	movs	r0, r7
 8008a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a2e:	321a      	adds	r2, #26
 8008a30:	47b0      	blx	r6
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d100      	bne.n	8008a38 <_printf_float+0x444>
 8008a36:	e63b      	b.n	80086b0 <_printf_float+0xbc>
 8008a38:	3501      	adds	r5, #1
 8008a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	42ab      	cmp	r3, r5
 8008a40:	dcf1      	bgt.n	8008a26 <_printf_float+0x432>
 8008a42:	0022      	movs	r2, r4
 8008a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a46:	3250      	adds	r2, #80	; 0x50
 8008a48:	e6da      	b.n	8008800 <_printf_float+0x20c>
 8008a4a:	2500      	movs	r5, #0
 8008a4c:	e7f5      	b.n	8008a3a <_printf_float+0x446>
 8008a4e:	002a      	movs	r2, r5
 8008a50:	e7e3      	b.n	8008a1a <_printf_float+0x426>
 8008a52:	0022      	movs	r2, r4
 8008a54:	2301      	movs	r3, #1
 8008a56:	0038      	movs	r0, r7
 8008a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a5a:	3219      	adds	r2, #25
 8008a5c:	47b0      	blx	r6
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	d100      	bne.n	8008a64 <_printf_float+0x470>
 8008a62:	e625      	b.n	80086b0 <_printf_float+0xbc>
 8008a64:	3501      	adds	r5, #1
 8008a66:	68e3      	ldr	r3, [r4, #12]
 8008a68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	42ab      	cmp	r3, r5
 8008a6e:	dcf0      	bgt.n	8008a52 <_printf_float+0x45e>
 8008a70:	e6f8      	b.n	8008864 <_printf_float+0x270>
 8008a72:	2500      	movs	r5, #0
 8008a74:	e7f7      	b.n	8008a66 <_printf_float+0x472>
 8008a76:	46c0      	nop			; (mov r8, r8)

08008a78 <_printf_common>:
 8008a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a7a:	0015      	movs	r5, r2
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	688a      	ldr	r2, [r1, #8]
 8008a80:	690b      	ldr	r3, [r1, #16]
 8008a82:	000c      	movs	r4, r1
 8008a84:	9000      	str	r0, [sp, #0]
 8008a86:	4293      	cmp	r3, r2
 8008a88:	da00      	bge.n	8008a8c <_printf_common+0x14>
 8008a8a:	0013      	movs	r3, r2
 8008a8c:	0022      	movs	r2, r4
 8008a8e:	602b      	str	r3, [r5, #0]
 8008a90:	3243      	adds	r2, #67	; 0x43
 8008a92:	7812      	ldrb	r2, [r2, #0]
 8008a94:	2a00      	cmp	r2, #0
 8008a96:	d001      	beq.n	8008a9c <_printf_common+0x24>
 8008a98:	3301      	adds	r3, #1
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	069b      	lsls	r3, r3, #26
 8008aa0:	d502      	bpl.n	8008aa8 <_printf_common+0x30>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	6822      	ldr	r2, [r4, #0]
 8008aaa:	2306      	movs	r3, #6
 8008aac:	0017      	movs	r7, r2
 8008aae:	401f      	ands	r7, r3
 8008ab0:	421a      	tst	r2, r3
 8008ab2:	d027      	beq.n	8008b04 <_printf_common+0x8c>
 8008ab4:	0023      	movs	r3, r4
 8008ab6:	3343      	adds	r3, #67	; 0x43
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	1e5a      	subs	r2, r3, #1
 8008abc:	4193      	sbcs	r3, r2
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	0692      	lsls	r2, r2, #26
 8008ac2:	d430      	bmi.n	8008b26 <_printf_common+0xae>
 8008ac4:	0022      	movs	r2, r4
 8008ac6:	9901      	ldr	r1, [sp, #4]
 8008ac8:	9800      	ldr	r0, [sp, #0]
 8008aca:	9e08      	ldr	r6, [sp, #32]
 8008acc:	3243      	adds	r2, #67	; 0x43
 8008ace:	47b0      	blx	r6
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d025      	beq.n	8008b20 <_printf_common+0xa8>
 8008ad4:	2306      	movs	r3, #6
 8008ad6:	6820      	ldr	r0, [r4, #0]
 8008ad8:	682a      	ldr	r2, [r5, #0]
 8008ada:	68e1      	ldr	r1, [r4, #12]
 8008adc:	2500      	movs	r5, #0
 8008ade:	4003      	ands	r3, r0
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d103      	bne.n	8008aec <_printf_common+0x74>
 8008ae4:	1a8d      	subs	r5, r1, r2
 8008ae6:	43eb      	mvns	r3, r5
 8008ae8:	17db      	asrs	r3, r3, #31
 8008aea:	401d      	ands	r5, r3
 8008aec:	68a3      	ldr	r3, [r4, #8]
 8008aee:	6922      	ldr	r2, [r4, #16]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	dd01      	ble.n	8008af8 <_printf_common+0x80>
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	18ed      	adds	r5, r5, r3
 8008af8:	2700      	movs	r7, #0
 8008afa:	42bd      	cmp	r5, r7
 8008afc:	d120      	bne.n	8008b40 <_printf_common+0xc8>
 8008afe:	2000      	movs	r0, #0
 8008b00:	e010      	b.n	8008b24 <_printf_common+0xac>
 8008b02:	3701      	adds	r7, #1
 8008b04:	68e3      	ldr	r3, [r4, #12]
 8008b06:	682a      	ldr	r2, [r5, #0]
 8008b08:	1a9b      	subs	r3, r3, r2
 8008b0a:	42bb      	cmp	r3, r7
 8008b0c:	ddd2      	ble.n	8008ab4 <_printf_common+0x3c>
 8008b0e:	0022      	movs	r2, r4
 8008b10:	2301      	movs	r3, #1
 8008b12:	9901      	ldr	r1, [sp, #4]
 8008b14:	9800      	ldr	r0, [sp, #0]
 8008b16:	9e08      	ldr	r6, [sp, #32]
 8008b18:	3219      	adds	r2, #25
 8008b1a:	47b0      	blx	r6
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d1f0      	bne.n	8008b02 <_printf_common+0x8a>
 8008b20:	2001      	movs	r0, #1
 8008b22:	4240      	negs	r0, r0
 8008b24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b26:	2030      	movs	r0, #48	; 0x30
 8008b28:	18e1      	adds	r1, r4, r3
 8008b2a:	3143      	adds	r1, #67	; 0x43
 8008b2c:	7008      	strb	r0, [r1, #0]
 8008b2e:	0021      	movs	r1, r4
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	3145      	adds	r1, #69	; 0x45
 8008b34:	7809      	ldrb	r1, [r1, #0]
 8008b36:	18a2      	adds	r2, r4, r2
 8008b38:	3243      	adds	r2, #67	; 0x43
 8008b3a:	3302      	adds	r3, #2
 8008b3c:	7011      	strb	r1, [r2, #0]
 8008b3e:	e7c1      	b.n	8008ac4 <_printf_common+0x4c>
 8008b40:	0022      	movs	r2, r4
 8008b42:	2301      	movs	r3, #1
 8008b44:	9901      	ldr	r1, [sp, #4]
 8008b46:	9800      	ldr	r0, [sp, #0]
 8008b48:	9e08      	ldr	r6, [sp, #32]
 8008b4a:	321a      	adds	r2, #26
 8008b4c:	47b0      	blx	r6
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	d0e6      	beq.n	8008b20 <_printf_common+0xa8>
 8008b52:	3701      	adds	r7, #1
 8008b54:	e7d1      	b.n	8008afa <_printf_common+0x82>
	...

08008b58 <_printf_i>:
 8008b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b5a:	b08b      	sub	sp, #44	; 0x2c
 8008b5c:	9206      	str	r2, [sp, #24]
 8008b5e:	000a      	movs	r2, r1
 8008b60:	3243      	adds	r2, #67	; 0x43
 8008b62:	9307      	str	r3, [sp, #28]
 8008b64:	9005      	str	r0, [sp, #20]
 8008b66:	9204      	str	r2, [sp, #16]
 8008b68:	7e0a      	ldrb	r2, [r1, #24]
 8008b6a:	000c      	movs	r4, r1
 8008b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b6e:	2a78      	cmp	r2, #120	; 0x78
 8008b70:	d807      	bhi.n	8008b82 <_printf_i+0x2a>
 8008b72:	2a62      	cmp	r2, #98	; 0x62
 8008b74:	d809      	bhi.n	8008b8a <_printf_i+0x32>
 8008b76:	2a00      	cmp	r2, #0
 8008b78:	d100      	bne.n	8008b7c <_printf_i+0x24>
 8008b7a:	e0c1      	b.n	8008d00 <_printf_i+0x1a8>
 8008b7c:	2a58      	cmp	r2, #88	; 0x58
 8008b7e:	d100      	bne.n	8008b82 <_printf_i+0x2a>
 8008b80:	e08c      	b.n	8008c9c <_printf_i+0x144>
 8008b82:	0026      	movs	r6, r4
 8008b84:	3642      	adds	r6, #66	; 0x42
 8008b86:	7032      	strb	r2, [r6, #0]
 8008b88:	e022      	b.n	8008bd0 <_printf_i+0x78>
 8008b8a:	0010      	movs	r0, r2
 8008b8c:	3863      	subs	r0, #99	; 0x63
 8008b8e:	2815      	cmp	r0, #21
 8008b90:	d8f7      	bhi.n	8008b82 <_printf_i+0x2a>
 8008b92:	f7f7 facb 	bl	800012c <__gnu_thumb1_case_shi>
 8008b96:	0016      	.short	0x0016
 8008b98:	fff6001f 	.word	0xfff6001f
 8008b9c:	fff6fff6 	.word	0xfff6fff6
 8008ba0:	001ffff6 	.word	0x001ffff6
 8008ba4:	fff6fff6 	.word	0xfff6fff6
 8008ba8:	fff6fff6 	.word	0xfff6fff6
 8008bac:	003600a8 	.word	0x003600a8
 8008bb0:	fff6009a 	.word	0xfff6009a
 8008bb4:	00b9fff6 	.word	0x00b9fff6
 8008bb8:	0036fff6 	.word	0x0036fff6
 8008bbc:	fff6fff6 	.word	0xfff6fff6
 8008bc0:	009e      	.short	0x009e
 8008bc2:	0026      	movs	r6, r4
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	3642      	adds	r6, #66	; 0x42
 8008bc8:	1d11      	adds	r1, r2, #4
 8008bca:	6019      	str	r1, [r3, #0]
 8008bcc:	6813      	ldr	r3, [r2, #0]
 8008bce:	7033      	strb	r3, [r6, #0]
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e0a7      	b.n	8008d24 <_printf_i+0x1cc>
 8008bd4:	6808      	ldr	r0, [r1, #0]
 8008bd6:	6819      	ldr	r1, [r3, #0]
 8008bd8:	1d0a      	adds	r2, r1, #4
 8008bda:	0605      	lsls	r5, r0, #24
 8008bdc:	d50b      	bpl.n	8008bf6 <_printf_i+0x9e>
 8008bde:	680d      	ldr	r5, [r1, #0]
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	2d00      	cmp	r5, #0
 8008be4:	da03      	bge.n	8008bee <_printf_i+0x96>
 8008be6:	232d      	movs	r3, #45	; 0x2d
 8008be8:	9a04      	ldr	r2, [sp, #16]
 8008bea:	426d      	negs	r5, r5
 8008bec:	7013      	strb	r3, [r2, #0]
 8008bee:	4b61      	ldr	r3, [pc, #388]	; (8008d74 <_printf_i+0x21c>)
 8008bf0:	270a      	movs	r7, #10
 8008bf2:	9303      	str	r3, [sp, #12]
 8008bf4:	e01b      	b.n	8008c2e <_printf_i+0xd6>
 8008bf6:	680d      	ldr	r5, [r1, #0]
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	0641      	lsls	r1, r0, #25
 8008bfc:	d5f1      	bpl.n	8008be2 <_printf_i+0x8a>
 8008bfe:	b22d      	sxth	r5, r5
 8008c00:	e7ef      	b.n	8008be2 <_printf_i+0x8a>
 8008c02:	680d      	ldr	r5, [r1, #0]
 8008c04:	6819      	ldr	r1, [r3, #0]
 8008c06:	1d08      	adds	r0, r1, #4
 8008c08:	6018      	str	r0, [r3, #0]
 8008c0a:	062e      	lsls	r6, r5, #24
 8008c0c:	d501      	bpl.n	8008c12 <_printf_i+0xba>
 8008c0e:	680d      	ldr	r5, [r1, #0]
 8008c10:	e003      	b.n	8008c1a <_printf_i+0xc2>
 8008c12:	066d      	lsls	r5, r5, #25
 8008c14:	d5fb      	bpl.n	8008c0e <_printf_i+0xb6>
 8008c16:	680d      	ldr	r5, [r1, #0]
 8008c18:	b2ad      	uxth	r5, r5
 8008c1a:	4b56      	ldr	r3, [pc, #344]	; (8008d74 <_printf_i+0x21c>)
 8008c1c:	2708      	movs	r7, #8
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	2a6f      	cmp	r2, #111	; 0x6f
 8008c22:	d000      	beq.n	8008c26 <_printf_i+0xce>
 8008c24:	3702      	adds	r7, #2
 8008c26:	0023      	movs	r3, r4
 8008c28:	2200      	movs	r2, #0
 8008c2a:	3343      	adds	r3, #67	; 0x43
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	6863      	ldr	r3, [r4, #4]
 8008c30:	60a3      	str	r3, [r4, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	db03      	blt.n	8008c3e <_printf_i+0xe6>
 8008c36:	2204      	movs	r2, #4
 8008c38:	6821      	ldr	r1, [r4, #0]
 8008c3a:	4391      	bics	r1, r2
 8008c3c:	6021      	str	r1, [r4, #0]
 8008c3e:	2d00      	cmp	r5, #0
 8008c40:	d102      	bne.n	8008c48 <_printf_i+0xf0>
 8008c42:	9e04      	ldr	r6, [sp, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00c      	beq.n	8008c62 <_printf_i+0x10a>
 8008c48:	9e04      	ldr	r6, [sp, #16]
 8008c4a:	0028      	movs	r0, r5
 8008c4c:	0039      	movs	r1, r7
 8008c4e:	f7f7 fafd 	bl	800024c <__aeabi_uidivmod>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	3e01      	subs	r6, #1
 8008c56:	5c5b      	ldrb	r3, [r3, r1]
 8008c58:	7033      	strb	r3, [r6, #0]
 8008c5a:	002b      	movs	r3, r5
 8008c5c:	0005      	movs	r5, r0
 8008c5e:	429f      	cmp	r7, r3
 8008c60:	d9f3      	bls.n	8008c4a <_printf_i+0xf2>
 8008c62:	2f08      	cmp	r7, #8
 8008c64:	d109      	bne.n	8008c7a <_printf_i+0x122>
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	07db      	lsls	r3, r3, #31
 8008c6a:	d506      	bpl.n	8008c7a <_printf_i+0x122>
 8008c6c:	6863      	ldr	r3, [r4, #4]
 8008c6e:	6922      	ldr	r2, [r4, #16]
 8008c70:	4293      	cmp	r3, r2
 8008c72:	dc02      	bgt.n	8008c7a <_printf_i+0x122>
 8008c74:	2330      	movs	r3, #48	; 0x30
 8008c76:	3e01      	subs	r6, #1
 8008c78:	7033      	strb	r3, [r6, #0]
 8008c7a:	9b04      	ldr	r3, [sp, #16]
 8008c7c:	1b9b      	subs	r3, r3, r6
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	9b07      	ldr	r3, [sp, #28]
 8008c82:	0021      	movs	r1, r4
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	9805      	ldr	r0, [sp, #20]
 8008c88:	9b06      	ldr	r3, [sp, #24]
 8008c8a:	aa09      	add	r2, sp, #36	; 0x24
 8008c8c:	f7ff fef4 	bl	8008a78 <_printf_common>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d14c      	bne.n	8008d2e <_printf_i+0x1d6>
 8008c94:	2001      	movs	r0, #1
 8008c96:	4240      	negs	r0, r0
 8008c98:	b00b      	add	sp, #44	; 0x2c
 8008c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c9c:	3145      	adds	r1, #69	; 0x45
 8008c9e:	700a      	strb	r2, [r1, #0]
 8008ca0:	4a34      	ldr	r2, [pc, #208]	; (8008d74 <_printf_i+0x21c>)
 8008ca2:	9203      	str	r2, [sp, #12]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	6821      	ldr	r1, [r4, #0]
 8008ca8:	ca20      	ldmia	r2!, {r5}
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	0608      	lsls	r0, r1, #24
 8008cae:	d516      	bpl.n	8008cde <_printf_i+0x186>
 8008cb0:	07cb      	lsls	r3, r1, #31
 8008cb2:	d502      	bpl.n	8008cba <_printf_i+0x162>
 8008cb4:	2320      	movs	r3, #32
 8008cb6:	4319      	orrs	r1, r3
 8008cb8:	6021      	str	r1, [r4, #0]
 8008cba:	2710      	movs	r7, #16
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	d1b2      	bne.n	8008c26 <_printf_i+0xce>
 8008cc0:	2320      	movs	r3, #32
 8008cc2:	6822      	ldr	r2, [r4, #0]
 8008cc4:	439a      	bics	r2, r3
 8008cc6:	6022      	str	r2, [r4, #0]
 8008cc8:	e7ad      	b.n	8008c26 <_printf_i+0xce>
 8008cca:	2220      	movs	r2, #32
 8008ccc:	6809      	ldr	r1, [r1, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	6022      	str	r2, [r4, #0]
 8008cd2:	0022      	movs	r2, r4
 8008cd4:	2178      	movs	r1, #120	; 0x78
 8008cd6:	3245      	adds	r2, #69	; 0x45
 8008cd8:	7011      	strb	r1, [r2, #0]
 8008cda:	4a27      	ldr	r2, [pc, #156]	; (8008d78 <_printf_i+0x220>)
 8008cdc:	e7e1      	b.n	8008ca2 <_printf_i+0x14a>
 8008cde:	0648      	lsls	r0, r1, #25
 8008ce0:	d5e6      	bpl.n	8008cb0 <_printf_i+0x158>
 8008ce2:	b2ad      	uxth	r5, r5
 8008ce4:	e7e4      	b.n	8008cb0 <_printf_i+0x158>
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	680d      	ldr	r5, [r1, #0]
 8008cea:	1d10      	adds	r0, r2, #4
 8008cec:	6949      	ldr	r1, [r1, #20]
 8008cee:	6018      	str	r0, [r3, #0]
 8008cf0:	6813      	ldr	r3, [r2, #0]
 8008cf2:	062e      	lsls	r6, r5, #24
 8008cf4:	d501      	bpl.n	8008cfa <_printf_i+0x1a2>
 8008cf6:	6019      	str	r1, [r3, #0]
 8008cf8:	e002      	b.n	8008d00 <_printf_i+0x1a8>
 8008cfa:	066d      	lsls	r5, r5, #25
 8008cfc:	d5fb      	bpl.n	8008cf6 <_printf_i+0x19e>
 8008cfe:	8019      	strh	r1, [r3, #0]
 8008d00:	2300      	movs	r3, #0
 8008d02:	9e04      	ldr	r6, [sp, #16]
 8008d04:	6123      	str	r3, [r4, #16]
 8008d06:	e7bb      	b.n	8008c80 <_printf_i+0x128>
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	1d11      	adds	r1, r2, #4
 8008d0c:	6019      	str	r1, [r3, #0]
 8008d0e:	6816      	ldr	r6, [r2, #0]
 8008d10:	2100      	movs	r1, #0
 8008d12:	0030      	movs	r0, r6
 8008d14:	6862      	ldr	r2, [r4, #4]
 8008d16:	f000 ff05 	bl	8009b24 <memchr>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d001      	beq.n	8008d22 <_printf_i+0x1ca>
 8008d1e:	1b80      	subs	r0, r0, r6
 8008d20:	6060      	str	r0, [r4, #4]
 8008d22:	6863      	ldr	r3, [r4, #4]
 8008d24:	6123      	str	r3, [r4, #16]
 8008d26:	2300      	movs	r3, #0
 8008d28:	9a04      	ldr	r2, [sp, #16]
 8008d2a:	7013      	strb	r3, [r2, #0]
 8008d2c:	e7a8      	b.n	8008c80 <_printf_i+0x128>
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	0032      	movs	r2, r6
 8008d32:	9906      	ldr	r1, [sp, #24]
 8008d34:	9805      	ldr	r0, [sp, #20]
 8008d36:	9d07      	ldr	r5, [sp, #28]
 8008d38:	47a8      	blx	r5
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	d0aa      	beq.n	8008c94 <_printf_i+0x13c>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	079b      	lsls	r3, r3, #30
 8008d42:	d415      	bmi.n	8008d70 <_printf_i+0x218>
 8008d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d46:	68e0      	ldr	r0, [r4, #12]
 8008d48:	4298      	cmp	r0, r3
 8008d4a:	daa5      	bge.n	8008c98 <_printf_i+0x140>
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	e7a3      	b.n	8008c98 <_printf_i+0x140>
 8008d50:	0022      	movs	r2, r4
 8008d52:	2301      	movs	r3, #1
 8008d54:	9906      	ldr	r1, [sp, #24]
 8008d56:	9805      	ldr	r0, [sp, #20]
 8008d58:	9e07      	ldr	r6, [sp, #28]
 8008d5a:	3219      	adds	r2, #25
 8008d5c:	47b0      	blx	r6
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	d098      	beq.n	8008c94 <_printf_i+0x13c>
 8008d62:	3501      	adds	r5, #1
 8008d64:	68e3      	ldr	r3, [r4, #12]
 8008d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	42ab      	cmp	r3, r5
 8008d6c:	dcf0      	bgt.n	8008d50 <_printf_i+0x1f8>
 8008d6e:	e7e9      	b.n	8008d44 <_printf_i+0x1ec>
 8008d70:	2500      	movs	r5, #0
 8008d72:	e7f7      	b.n	8008d64 <_printf_i+0x20c>
 8008d74:	0800b626 	.word	0x0800b626
 8008d78:	0800b637 	.word	0x0800b637

08008d7c <siprintf>:
 8008d7c:	b40e      	push	{r1, r2, r3}
 8008d7e:	b500      	push	{lr}
 8008d80:	490b      	ldr	r1, [pc, #44]	; (8008db0 <siprintf+0x34>)
 8008d82:	b09c      	sub	sp, #112	; 0x70
 8008d84:	ab1d      	add	r3, sp, #116	; 0x74
 8008d86:	9002      	str	r0, [sp, #8]
 8008d88:	9006      	str	r0, [sp, #24]
 8008d8a:	9107      	str	r1, [sp, #28]
 8008d8c:	9104      	str	r1, [sp, #16]
 8008d8e:	4809      	ldr	r0, [pc, #36]	; (8008db4 <siprintf+0x38>)
 8008d90:	4909      	ldr	r1, [pc, #36]	; (8008db8 <siprintf+0x3c>)
 8008d92:	cb04      	ldmia	r3!, {r2}
 8008d94:	9105      	str	r1, [sp, #20]
 8008d96:	6800      	ldr	r0, [r0, #0]
 8008d98:	a902      	add	r1, sp, #8
 8008d9a:	9301      	str	r3, [sp, #4]
 8008d9c:	f001 fbda 	bl	800a554 <_svfiprintf_r>
 8008da0:	2300      	movs	r3, #0
 8008da2:	9a02      	ldr	r2, [sp, #8]
 8008da4:	7013      	strb	r3, [r2, #0]
 8008da6:	b01c      	add	sp, #112	; 0x70
 8008da8:	bc08      	pop	{r3}
 8008daa:	b003      	add	sp, #12
 8008dac:	4718      	bx	r3
 8008dae:	46c0      	nop			; (mov r8, r8)
 8008db0:	7fffffff 	.word	0x7fffffff
 8008db4:	20000014 	.word	0x20000014
 8008db8:	ffff0208 	.word	0xffff0208

08008dbc <quorem>:
 8008dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dbe:	0006      	movs	r6, r0
 8008dc0:	690b      	ldr	r3, [r1, #16]
 8008dc2:	6932      	ldr	r2, [r6, #16]
 8008dc4:	b087      	sub	sp, #28
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	9103      	str	r1, [sp, #12]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	db65      	blt.n	8008e9a <quorem+0xde>
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	009c      	lsls	r4, r3, #2
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	000b      	movs	r3, r1
 8008dd6:	3314      	adds	r3, #20
 8008dd8:	9305      	str	r3, [sp, #20]
 8008dda:	191b      	adds	r3, r3, r4
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	0033      	movs	r3, r6
 8008de0:	3314      	adds	r3, #20
 8008de2:	9302      	str	r3, [sp, #8]
 8008de4:	191c      	adds	r4, r3, r4
 8008de6:	9b04      	ldr	r3, [sp, #16]
 8008de8:	6827      	ldr	r7, [r4, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	0038      	movs	r0, r7
 8008dee:	1c5d      	adds	r5, r3, #1
 8008df0:	0029      	movs	r1, r5
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	f7f7 f9a4 	bl	8000140 <__udivsi3>
 8008df8:	9001      	str	r0, [sp, #4]
 8008dfa:	42af      	cmp	r7, r5
 8008dfc:	d324      	bcc.n	8008e48 <quorem+0x8c>
 8008dfe:	2500      	movs	r5, #0
 8008e00:	46ac      	mov	ip, r5
 8008e02:	9802      	ldr	r0, [sp, #8]
 8008e04:	9f05      	ldr	r7, [sp, #20]
 8008e06:	cf08      	ldmia	r7!, {r3}
 8008e08:	9a01      	ldr	r2, [sp, #4]
 8008e0a:	b299      	uxth	r1, r3
 8008e0c:	4351      	muls	r1, r2
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	4353      	muls	r3, r2
 8008e12:	1949      	adds	r1, r1, r5
 8008e14:	0c0a      	lsrs	r2, r1, #16
 8008e16:	189b      	adds	r3, r3, r2
 8008e18:	6802      	ldr	r2, [r0, #0]
 8008e1a:	b289      	uxth	r1, r1
 8008e1c:	b292      	uxth	r2, r2
 8008e1e:	4462      	add	r2, ip
 8008e20:	1a52      	subs	r2, r2, r1
 8008e22:	6801      	ldr	r1, [r0, #0]
 8008e24:	0c1d      	lsrs	r5, r3, #16
 8008e26:	0c09      	lsrs	r1, r1, #16
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	1acb      	subs	r3, r1, r3
 8008e2c:	1411      	asrs	r1, r2, #16
 8008e2e:	185b      	adds	r3, r3, r1
 8008e30:	1419      	asrs	r1, r3, #16
 8008e32:	b292      	uxth	r2, r2
 8008e34:	041b      	lsls	r3, r3, #16
 8008e36:	431a      	orrs	r2, r3
 8008e38:	9b04      	ldr	r3, [sp, #16]
 8008e3a:	468c      	mov	ip, r1
 8008e3c:	c004      	stmia	r0!, {r2}
 8008e3e:	42bb      	cmp	r3, r7
 8008e40:	d2e1      	bcs.n	8008e06 <quorem+0x4a>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d030      	beq.n	8008eaa <quorem+0xee>
 8008e48:	0030      	movs	r0, r6
 8008e4a:	9903      	ldr	r1, [sp, #12]
 8008e4c:	f001 f8fa 	bl	800a044 <__mcmp>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	db21      	blt.n	8008e98 <quorem+0xdc>
 8008e54:	0030      	movs	r0, r6
 8008e56:	2400      	movs	r4, #0
 8008e58:	9b01      	ldr	r3, [sp, #4]
 8008e5a:	9903      	ldr	r1, [sp, #12]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	3014      	adds	r0, #20
 8008e62:	3114      	adds	r1, #20
 8008e64:	6803      	ldr	r3, [r0, #0]
 8008e66:	c920      	ldmia	r1!, {r5}
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	1914      	adds	r4, r2, r4
 8008e6c:	b2aa      	uxth	r2, r5
 8008e6e:	1aa2      	subs	r2, r4, r2
 8008e70:	0c1b      	lsrs	r3, r3, #16
 8008e72:	0c2d      	lsrs	r5, r5, #16
 8008e74:	1414      	asrs	r4, r2, #16
 8008e76:	1b5b      	subs	r3, r3, r5
 8008e78:	191b      	adds	r3, r3, r4
 8008e7a:	141c      	asrs	r4, r3, #16
 8008e7c:	b292      	uxth	r2, r2
 8008e7e:	041b      	lsls	r3, r3, #16
 8008e80:	4313      	orrs	r3, r2
 8008e82:	c008      	stmia	r0!, {r3}
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	428b      	cmp	r3, r1
 8008e88:	d2ec      	bcs.n	8008e64 <quorem+0xa8>
 8008e8a:	9b00      	ldr	r3, [sp, #0]
 8008e8c:	9a02      	ldr	r2, [sp, #8]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	18d3      	adds	r3, r2, r3
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	d015      	beq.n	8008ec4 <quorem+0x108>
 8008e98:	9801      	ldr	r0, [sp, #4]
 8008e9a:	b007      	add	sp, #28
 8008e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d106      	bne.n	8008eb2 <quorem+0xf6>
 8008ea4:	9b00      	ldr	r3, [sp, #0]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	9b02      	ldr	r3, [sp, #8]
 8008eac:	3c04      	subs	r4, #4
 8008eae:	42a3      	cmp	r3, r4
 8008eb0:	d3f5      	bcc.n	8008e9e <quorem+0xe2>
 8008eb2:	9b00      	ldr	r3, [sp, #0]
 8008eb4:	6133      	str	r3, [r6, #16]
 8008eb6:	e7c7      	b.n	8008e48 <quorem+0x8c>
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	d106      	bne.n	8008ecc <quorem+0x110>
 8008ebe:	9a00      	ldr	r2, [sp, #0]
 8008ec0:	3a01      	subs	r2, #1
 8008ec2:	9200      	str	r2, [sp, #0]
 8008ec4:	9a02      	ldr	r2, [sp, #8]
 8008ec6:	3b04      	subs	r3, #4
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d3f5      	bcc.n	8008eb8 <quorem+0xfc>
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	6133      	str	r3, [r6, #16]
 8008ed0:	e7e2      	b.n	8008e98 <quorem+0xdc>
	...

08008ed4 <_dtoa_r>:
 8008ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ed6:	b09d      	sub	sp, #116	; 0x74
 8008ed8:	9202      	str	r2, [sp, #8]
 8008eda:	9303      	str	r3, [sp, #12]
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	9c03      	ldr	r4, [sp, #12]
 8008ee0:	9308      	str	r3, [sp, #32]
 8008ee2:	9409      	str	r4, [sp, #36]	; 0x24
 8008ee4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ee6:	0007      	movs	r7, r0
 8008ee8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008eea:	2c00      	cmp	r4, #0
 8008eec:	d10e      	bne.n	8008f0c <_dtoa_r+0x38>
 8008eee:	2010      	movs	r0, #16
 8008ef0:	f000 fe0e 	bl	8009b10 <malloc>
 8008ef4:	1e02      	subs	r2, r0, #0
 8008ef6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ef8:	d104      	bne.n	8008f04 <_dtoa_r+0x30>
 8008efa:	21ea      	movs	r1, #234	; 0xea
 8008efc:	4bc7      	ldr	r3, [pc, #796]	; (800921c <_dtoa_r+0x348>)
 8008efe:	48c8      	ldr	r0, [pc, #800]	; (8009220 <_dtoa_r+0x34c>)
 8008f00:	f001 fc3a 	bl	800a778 <__assert_func>
 8008f04:	6044      	str	r4, [r0, #4]
 8008f06:	6084      	str	r4, [r0, #8]
 8008f08:	6004      	str	r4, [r0, #0]
 8008f0a:	60c4      	str	r4, [r0, #12]
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	6819      	ldr	r1, [r3, #0]
 8008f10:	2900      	cmp	r1, #0
 8008f12:	d00a      	beq.n	8008f2a <_dtoa_r+0x56>
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	2301      	movs	r3, #1
 8008f18:	4093      	lsls	r3, r2
 8008f1a:	604a      	str	r2, [r1, #4]
 8008f1c:	608b      	str	r3, [r1, #8]
 8008f1e:	0038      	movs	r0, r7
 8008f20:	f000 fe50 	bl	8009bc4 <_Bfree>
 8008f24:	2200      	movs	r2, #0
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	da20      	bge.n	8008f72 <_dtoa_r+0x9e>
 8008f30:	2301      	movs	r3, #1
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	9b03      	ldr	r3, [sp, #12]
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	085b      	lsrs	r3, r3, #1
 8008f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f3e:	4bb9      	ldr	r3, [pc, #740]	; (8009224 <_dtoa_r+0x350>)
 8008f40:	4ab8      	ldr	r2, [pc, #736]	; (8009224 <_dtoa_r+0x350>)
 8008f42:	402b      	ands	r3, r5
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d117      	bne.n	8008f78 <_dtoa_r+0xa4>
 8008f48:	4bb7      	ldr	r3, [pc, #732]	; (8009228 <_dtoa_r+0x354>)
 8008f4a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f4c:	0328      	lsls	r0, r5, #12
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	9b02      	ldr	r3, [sp, #8]
 8008f52:	0b00      	lsrs	r0, r0, #12
 8008f54:	4318      	orrs	r0, r3
 8008f56:	d101      	bne.n	8008f5c <_dtoa_r+0x88>
 8008f58:	f000 fdbf 	bl	8009ada <_dtoa_r+0xc06>
 8008f5c:	48b3      	ldr	r0, [pc, #716]	; (800922c <_dtoa_r+0x358>)
 8008f5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f60:	9006      	str	r0, [sp, #24]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d002      	beq.n	8008f6c <_dtoa_r+0x98>
 8008f66:	4bb2      	ldr	r3, [pc, #712]	; (8009230 <_dtoa_r+0x35c>)
 8008f68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	9806      	ldr	r0, [sp, #24]
 8008f6e:	b01d      	add	sp, #116	; 0x74
 8008f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f72:	2300      	movs	r3, #0
 8008f74:	602b      	str	r3, [r5, #0]
 8008f76:	e7e1      	b.n	8008f3c <_dtoa_r+0x68>
 8008f78:	9b08      	ldr	r3, [sp, #32]
 8008f7a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008f7c:	9312      	str	r3, [sp, #72]	; 0x48
 8008f7e:	9413      	str	r4, [sp, #76]	; 0x4c
 8008f80:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008f82:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008f84:	2200      	movs	r2, #0
 8008f86:	2300      	movs	r3, #0
 8008f88:	f7f7 fa60 	bl	800044c <__aeabi_dcmpeq>
 8008f8c:	1e04      	subs	r4, r0, #0
 8008f8e:	d009      	beq.n	8008fa4 <_dtoa_r+0xd0>
 8008f90:	2301      	movs	r3, #1
 8008f92:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	4ba7      	ldr	r3, [pc, #668]	; (8009234 <_dtoa_r+0x360>)
 8008f98:	9306      	str	r3, [sp, #24]
 8008f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0e5      	beq.n	8008f6c <_dtoa_r+0x98>
 8008fa0:	4ba5      	ldr	r3, [pc, #660]	; (8009238 <_dtoa_r+0x364>)
 8008fa2:	e7e1      	b.n	8008f68 <_dtoa_r+0x94>
 8008fa4:	ab1a      	add	r3, sp, #104	; 0x68
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	ab1b      	add	r3, sp, #108	; 0x6c
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	0038      	movs	r0, r7
 8008fae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fb2:	f001 f8fb 	bl	800a1ac <__d2b>
 8008fb6:	006e      	lsls	r6, r5, #1
 8008fb8:	9005      	str	r0, [sp, #20]
 8008fba:	0d76      	lsrs	r6, r6, #21
 8008fbc:	d100      	bne.n	8008fc0 <_dtoa_r+0xec>
 8008fbe:	e07c      	b.n	80090ba <_dtoa_r+0x1e6>
 8008fc0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008fc2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008fc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fc6:	4a9d      	ldr	r2, [pc, #628]	; (800923c <_dtoa_r+0x368>)
 8008fc8:	031b      	lsls	r3, r3, #12
 8008fca:	0b1b      	lsrs	r3, r3, #12
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	0011      	movs	r1, r2
 8008fd0:	4b9b      	ldr	r3, [pc, #620]	; (8009240 <_dtoa_r+0x36c>)
 8008fd2:	9418      	str	r4, [sp, #96]	; 0x60
 8008fd4:	18f6      	adds	r6, r6, r3
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	4b9a      	ldr	r3, [pc, #616]	; (8009244 <_dtoa_r+0x370>)
 8008fda:	f7f9 fc83 	bl	80028e4 <__aeabi_dsub>
 8008fde:	4a9a      	ldr	r2, [pc, #616]	; (8009248 <_dtoa_r+0x374>)
 8008fe0:	4b9a      	ldr	r3, [pc, #616]	; (800924c <_dtoa_r+0x378>)
 8008fe2:	f7f9 fa13 	bl	800240c <__aeabi_dmul>
 8008fe6:	4a9a      	ldr	r2, [pc, #616]	; (8009250 <_dtoa_r+0x37c>)
 8008fe8:	4b9a      	ldr	r3, [pc, #616]	; (8009254 <_dtoa_r+0x380>)
 8008fea:	f7f8 fad1 	bl	8001590 <__aeabi_dadd>
 8008fee:	0004      	movs	r4, r0
 8008ff0:	0030      	movs	r0, r6
 8008ff2:	000d      	movs	r5, r1
 8008ff4:	f7fa f85c 	bl	80030b0 <__aeabi_i2d>
 8008ff8:	4a97      	ldr	r2, [pc, #604]	; (8009258 <_dtoa_r+0x384>)
 8008ffa:	4b98      	ldr	r3, [pc, #608]	; (800925c <_dtoa_r+0x388>)
 8008ffc:	f7f9 fa06 	bl	800240c <__aeabi_dmul>
 8009000:	0002      	movs	r2, r0
 8009002:	000b      	movs	r3, r1
 8009004:	0020      	movs	r0, r4
 8009006:	0029      	movs	r1, r5
 8009008:	f7f8 fac2 	bl	8001590 <__aeabi_dadd>
 800900c:	0004      	movs	r4, r0
 800900e:	000d      	movs	r5, r1
 8009010:	f7fa f818 	bl	8003044 <__aeabi_d2iz>
 8009014:	2200      	movs	r2, #0
 8009016:	9002      	str	r0, [sp, #8]
 8009018:	2300      	movs	r3, #0
 800901a:	0020      	movs	r0, r4
 800901c:	0029      	movs	r1, r5
 800901e:	f7f7 fa1b 	bl	8000458 <__aeabi_dcmplt>
 8009022:	2800      	cmp	r0, #0
 8009024:	d00b      	beq.n	800903e <_dtoa_r+0x16a>
 8009026:	9802      	ldr	r0, [sp, #8]
 8009028:	f7fa f842 	bl	80030b0 <__aeabi_i2d>
 800902c:	002b      	movs	r3, r5
 800902e:	0022      	movs	r2, r4
 8009030:	f7f7 fa0c 	bl	800044c <__aeabi_dcmpeq>
 8009034:	4243      	negs	r3, r0
 8009036:	4158      	adcs	r0, r3
 8009038:	9b02      	ldr	r3, [sp, #8]
 800903a:	1a1b      	subs	r3, r3, r0
 800903c:	9302      	str	r3, [sp, #8]
 800903e:	2301      	movs	r3, #1
 8009040:	9316      	str	r3, [sp, #88]	; 0x58
 8009042:	9b02      	ldr	r3, [sp, #8]
 8009044:	2b16      	cmp	r3, #22
 8009046:	d80f      	bhi.n	8009068 <_dtoa_r+0x194>
 8009048:	9812      	ldr	r0, [sp, #72]	; 0x48
 800904a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800904c:	00da      	lsls	r2, r3, #3
 800904e:	4b84      	ldr	r3, [pc, #528]	; (8009260 <_dtoa_r+0x38c>)
 8009050:	189b      	adds	r3, r3, r2
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f7f7 f9ff 	bl	8000458 <__aeabi_dcmplt>
 800905a:	2800      	cmp	r0, #0
 800905c:	d049      	beq.n	80090f2 <_dtoa_r+0x21e>
 800905e:	9b02      	ldr	r3, [sp, #8]
 8009060:	3b01      	subs	r3, #1
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	2300      	movs	r3, #0
 8009066:	9316      	str	r3, [sp, #88]	; 0x58
 8009068:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800906a:	1b9e      	subs	r6, r3, r6
 800906c:	2300      	movs	r3, #0
 800906e:	930a      	str	r3, [sp, #40]	; 0x28
 8009070:	0033      	movs	r3, r6
 8009072:	3b01      	subs	r3, #1
 8009074:	930d      	str	r3, [sp, #52]	; 0x34
 8009076:	d504      	bpl.n	8009082 <_dtoa_r+0x1ae>
 8009078:	2301      	movs	r3, #1
 800907a:	1b9b      	subs	r3, r3, r6
 800907c:	930a      	str	r3, [sp, #40]	; 0x28
 800907e:	2300      	movs	r3, #0
 8009080:	930d      	str	r3, [sp, #52]	; 0x34
 8009082:	9b02      	ldr	r3, [sp, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	db36      	blt.n	80090f6 <_dtoa_r+0x222>
 8009088:	9a02      	ldr	r2, [sp, #8]
 800908a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800908c:	4694      	mov	ip, r2
 800908e:	4463      	add	r3, ip
 8009090:	930d      	str	r3, [sp, #52]	; 0x34
 8009092:	2300      	movs	r3, #0
 8009094:	9215      	str	r2, [sp, #84]	; 0x54
 8009096:	930e      	str	r3, [sp, #56]	; 0x38
 8009098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800909a:	2401      	movs	r4, #1
 800909c:	2b09      	cmp	r3, #9
 800909e:	d864      	bhi.n	800916a <_dtoa_r+0x296>
 80090a0:	2b05      	cmp	r3, #5
 80090a2:	dd02      	ble.n	80090aa <_dtoa_r+0x1d6>
 80090a4:	2400      	movs	r4, #0
 80090a6:	3b04      	subs	r3, #4
 80090a8:	9322      	str	r3, [sp, #136]	; 0x88
 80090aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090ac:	1e98      	subs	r0, r3, #2
 80090ae:	2803      	cmp	r0, #3
 80090b0:	d864      	bhi.n	800917c <_dtoa_r+0x2a8>
 80090b2:	f7f7 f831 	bl	8000118 <__gnu_thumb1_case_uqi>
 80090b6:	3829      	.short	0x3829
 80090b8:	5836      	.short	0x5836
 80090ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80090bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80090be:	189e      	adds	r6, r3, r2
 80090c0:	4b68      	ldr	r3, [pc, #416]	; (8009264 <_dtoa_r+0x390>)
 80090c2:	18f2      	adds	r2, r6, r3
 80090c4:	2a20      	cmp	r2, #32
 80090c6:	dd0f      	ble.n	80090e8 <_dtoa_r+0x214>
 80090c8:	2340      	movs	r3, #64	; 0x40
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	409d      	lsls	r5, r3
 80090ce:	4b66      	ldr	r3, [pc, #408]	; (8009268 <_dtoa_r+0x394>)
 80090d0:	9802      	ldr	r0, [sp, #8]
 80090d2:	18f3      	adds	r3, r6, r3
 80090d4:	40d8      	lsrs	r0, r3
 80090d6:	4328      	orrs	r0, r5
 80090d8:	f7fa f81a 	bl	8003110 <__aeabi_ui2d>
 80090dc:	2301      	movs	r3, #1
 80090de:	4c63      	ldr	r4, [pc, #396]	; (800926c <_dtoa_r+0x398>)
 80090e0:	3e01      	subs	r6, #1
 80090e2:	1909      	adds	r1, r1, r4
 80090e4:	9318      	str	r3, [sp, #96]	; 0x60
 80090e6:	e776      	b.n	8008fd6 <_dtoa_r+0x102>
 80090e8:	2320      	movs	r3, #32
 80090ea:	9802      	ldr	r0, [sp, #8]
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	4098      	lsls	r0, r3
 80090f0:	e7f2      	b.n	80090d8 <_dtoa_r+0x204>
 80090f2:	9016      	str	r0, [sp, #88]	; 0x58
 80090f4:	e7b8      	b.n	8009068 <_dtoa_r+0x194>
 80090f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f8:	9a02      	ldr	r2, [sp, #8]
 80090fa:	1a9b      	subs	r3, r3, r2
 80090fc:	930a      	str	r3, [sp, #40]	; 0x28
 80090fe:	4253      	negs	r3, r2
 8009100:	930e      	str	r3, [sp, #56]	; 0x38
 8009102:	2300      	movs	r3, #0
 8009104:	9315      	str	r3, [sp, #84]	; 0x54
 8009106:	e7c7      	b.n	8009098 <_dtoa_r+0x1c4>
 8009108:	2300      	movs	r3, #0
 800910a:	930f      	str	r3, [sp, #60]	; 0x3c
 800910c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800910e:	930c      	str	r3, [sp, #48]	; 0x30
 8009110:	9307      	str	r3, [sp, #28]
 8009112:	2b00      	cmp	r3, #0
 8009114:	dc13      	bgt.n	800913e <_dtoa_r+0x26a>
 8009116:	2301      	movs	r3, #1
 8009118:	001a      	movs	r2, r3
 800911a:	930c      	str	r3, [sp, #48]	; 0x30
 800911c:	9307      	str	r3, [sp, #28]
 800911e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009120:	e00d      	b.n	800913e <_dtoa_r+0x26a>
 8009122:	2301      	movs	r3, #1
 8009124:	e7f1      	b.n	800910a <_dtoa_r+0x236>
 8009126:	2300      	movs	r3, #0
 8009128:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800912a:	930f      	str	r3, [sp, #60]	; 0x3c
 800912c:	4694      	mov	ip, r2
 800912e:	9b02      	ldr	r3, [sp, #8]
 8009130:	4463      	add	r3, ip
 8009132:	930c      	str	r3, [sp, #48]	; 0x30
 8009134:	3301      	adds	r3, #1
 8009136:	9307      	str	r3, [sp, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	dc00      	bgt.n	800913e <_dtoa_r+0x26a>
 800913c:	2301      	movs	r3, #1
 800913e:	2200      	movs	r2, #0
 8009140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009142:	6042      	str	r2, [r0, #4]
 8009144:	3204      	adds	r2, #4
 8009146:	0015      	movs	r5, r2
 8009148:	3514      	adds	r5, #20
 800914a:	6841      	ldr	r1, [r0, #4]
 800914c:	429d      	cmp	r5, r3
 800914e:	d919      	bls.n	8009184 <_dtoa_r+0x2b0>
 8009150:	0038      	movs	r0, r7
 8009152:	f000 fcf3 	bl	8009b3c <_Balloc>
 8009156:	9006      	str	r0, [sp, #24]
 8009158:	2800      	cmp	r0, #0
 800915a:	d117      	bne.n	800918c <_dtoa_r+0x2b8>
 800915c:	21d5      	movs	r1, #213	; 0xd5
 800915e:	0002      	movs	r2, r0
 8009160:	4b43      	ldr	r3, [pc, #268]	; (8009270 <_dtoa_r+0x39c>)
 8009162:	0049      	lsls	r1, r1, #1
 8009164:	e6cb      	b.n	8008efe <_dtoa_r+0x2a>
 8009166:	2301      	movs	r3, #1
 8009168:	e7de      	b.n	8009128 <_dtoa_r+0x254>
 800916a:	2300      	movs	r3, #0
 800916c:	940f      	str	r4, [sp, #60]	; 0x3c
 800916e:	9322      	str	r3, [sp, #136]	; 0x88
 8009170:	3b01      	subs	r3, #1
 8009172:	930c      	str	r3, [sp, #48]	; 0x30
 8009174:	9307      	str	r3, [sp, #28]
 8009176:	2200      	movs	r2, #0
 8009178:	3313      	adds	r3, #19
 800917a:	e7d0      	b.n	800911e <_dtoa_r+0x24a>
 800917c:	2301      	movs	r3, #1
 800917e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009180:	3b02      	subs	r3, #2
 8009182:	e7f6      	b.n	8009172 <_dtoa_r+0x29e>
 8009184:	3101      	adds	r1, #1
 8009186:	6041      	str	r1, [r0, #4]
 8009188:	0052      	lsls	r2, r2, #1
 800918a:	e7dc      	b.n	8009146 <_dtoa_r+0x272>
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	9a06      	ldr	r2, [sp, #24]
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	9b07      	ldr	r3, [sp, #28]
 8009194:	2b0e      	cmp	r3, #14
 8009196:	d900      	bls.n	800919a <_dtoa_r+0x2c6>
 8009198:	e0eb      	b.n	8009372 <_dtoa_r+0x49e>
 800919a:	2c00      	cmp	r4, #0
 800919c:	d100      	bne.n	80091a0 <_dtoa_r+0x2cc>
 800919e:	e0e8      	b.n	8009372 <_dtoa_r+0x49e>
 80091a0:	9b02      	ldr	r3, [sp, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dd68      	ble.n	8009278 <_dtoa_r+0x3a4>
 80091a6:	001a      	movs	r2, r3
 80091a8:	210f      	movs	r1, #15
 80091aa:	4b2d      	ldr	r3, [pc, #180]	; (8009260 <_dtoa_r+0x38c>)
 80091ac:	400a      	ands	r2, r1
 80091ae:	00d2      	lsls	r2, r2, #3
 80091b0:	189b      	adds	r3, r3, r2
 80091b2:	681d      	ldr	r5, [r3, #0]
 80091b4:	685e      	ldr	r6, [r3, #4]
 80091b6:	9b02      	ldr	r3, [sp, #8]
 80091b8:	111c      	asrs	r4, r3, #4
 80091ba:	2302      	movs	r3, #2
 80091bc:	9310      	str	r3, [sp, #64]	; 0x40
 80091be:	9b02      	ldr	r3, [sp, #8]
 80091c0:	05db      	lsls	r3, r3, #23
 80091c2:	d50b      	bpl.n	80091dc <_dtoa_r+0x308>
 80091c4:	4b2b      	ldr	r3, [pc, #172]	; (8009274 <_dtoa_r+0x3a0>)
 80091c6:	400c      	ands	r4, r1
 80091c8:	6a1a      	ldr	r2, [r3, #32]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80091ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80091d0:	f7f8 fd1a 	bl	8001c08 <__aeabi_ddiv>
 80091d4:	2303      	movs	r3, #3
 80091d6:	9008      	str	r0, [sp, #32]
 80091d8:	9109      	str	r1, [sp, #36]	; 0x24
 80091da:	9310      	str	r3, [sp, #64]	; 0x40
 80091dc:	4b25      	ldr	r3, [pc, #148]	; (8009274 <_dtoa_r+0x3a0>)
 80091de:	9314      	str	r3, [sp, #80]	; 0x50
 80091e0:	2c00      	cmp	r4, #0
 80091e2:	d108      	bne.n	80091f6 <_dtoa_r+0x322>
 80091e4:	9808      	ldr	r0, [sp, #32]
 80091e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091e8:	002a      	movs	r2, r5
 80091ea:	0033      	movs	r3, r6
 80091ec:	f7f8 fd0c 	bl	8001c08 <__aeabi_ddiv>
 80091f0:	9008      	str	r0, [sp, #32]
 80091f2:	9109      	str	r1, [sp, #36]	; 0x24
 80091f4:	e05c      	b.n	80092b0 <_dtoa_r+0x3dc>
 80091f6:	2301      	movs	r3, #1
 80091f8:	421c      	tst	r4, r3
 80091fa:	d00b      	beq.n	8009214 <_dtoa_r+0x340>
 80091fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091fe:	0028      	movs	r0, r5
 8009200:	3301      	adds	r3, #1
 8009202:	9310      	str	r3, [sp, #64]	; 0x40
 8009204:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009206:	0031      	movs	r1, r6
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f7f9 f8fe 	bl	800240c <__aeabi_dmul>
 8009210:	0005      	movs	r5, r0
 8009212:	000e      	movs	r6, r1
 8009214:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009216:	1064      	asrs	r4, r4, #1
 8009218:	3308      	adds	r3, #8
 800921a:	e7e0      	b.n	80091de <_dtoa_r+0x30a>
 800921c:	0800b655 	.word	0x0800b655
 8009220:	0800b66c 	.word	0x0800b66c
 8009224:	7ff00000 	.word	0x7ff00000
 8009228:	0000270f 	.word	0x0000270f
 800922c:	0800b651 	.word	0x0800b651
 8009230:	0800b654 	.word	0x0800b654
 8009234:	0800b624 	.word	0x0800b624
 8009238:	0800b625 	.word	0x0800b625
 800923c:	3ff00000 	.word	0x3ff00000
 8009240:	fffffc01 	.word	0xfffffc01
 8009244:	3ff80000 	.word	0x3ff80000
 8009248:	636f4361 	.word	0x636f4361
 800924c:	3fd287a7 	.word	0x3fd287a7
 8009250:	8b60c8b3 	.word	0x8b60c8b3
 8009254:	3fc68a28 	.word	0x3fc68a28
 8009258:	509f79fb 	.word	0x509f79fb
 800925c:	3fd34413 	.word	0x3fd34413
 8009260:	0800b760 	.word	0x0800b760
 8009264:	00000432 	.word	0x00000432
 8009268:	00000412 	.word	0x00000412
 800926c:	fe100000 	.word	0xfe100000
 8009270:	0800b6c7 	.word	0x0800b6c7
 8009274:	0800b738 	.word	0x0800b738
 8009278:	2302      	movs	r3, #2
 800927a:	9310      	str	r3, [sp, #64]	; 0x40
 800927c:	9b02      	ldr	r3, [sp, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d016      	beq.n	80092b0 <_dtoa_r+0x3dc>
 8009282:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009284:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009286:	425c      	negs	r4, r3
 8009288:	230f      	movs	r3, #15
 800928a:	4ab6      	ldr	r2, [pc, #728]	; (8009564 <_dtoa_r+0x690>)
 800928c:	4023      	ands	r3, r4
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	18d3      	adds	r3, r2, r3
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f7f9 f8b9 	bl	800240c <__aeabi_dmul>
 800929a:	2601      	movs	r6, #1
 800929c:	2300      	movs	r3, #0
 800929e:	9008      	str	r0, [sp, #32]
 80092a0:	9109      	str	r1, [sp, #36]	; 0x24
 80092a2:	4db1      	ldr	r5, [pc, #708]	; (8009568 <_dtoa_r+0x694>)
 80092a4:	1124      	asrs	r4, r4, #4
 80092a6:	2c00      	cmp	r4, #0
 80092a8:	d000      	beq.n	80092ac <_dtoa_r+0x3d8>
 80092aa:	e094      	b.n	80093d6 <_dtoa_r+0x502>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d19f      	bne.n	80091f0 <_dtoa_r+0x31c>
 80092b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d100      	bne.n	80092b8 <_dtoa_r+0x3e4>
 80092b6:	e09b      	b.n	80093f0 <_dtoa_r+0x51c>
 80092b8:	9c08      	ldr	r4, [sp, #32]
 80092ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80092bc:	2200      	movs	r2, #0
 80092be:	0020      	movs	r0, r4
 80092c0:	0029      	movs	r1, r5
 80092c2:	4baa      	ldr	r3, [pc, #680]	; (800956c <_dtoa_r+0x698>)
 80092c4:	f7f7 f8c8 	bl	8000458 <__aeabi_dcmplt>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d100      	bne.n	80092ce <_dtoa_r+0x3fa>
 80092cc:	e090      	b.n	80093f0 <_dtoa_r+0x51c>
 80092ce:	9b07      	ldr	r3, [sp, #28]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d100      	bne.n	80092d6 <_dtoa_r+0x402>
 80092d4:	e08c      	b.n	80093f0 <_dtoa_r+0x51c>
 80092d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092d8:	2b00      	cmp	r3, #0
 80092da:	dd46      	ble.n	800936a <_dtoa_r+0x496>
 80092dc:	9b02      	ldr	r3, [sp, #8]
 80092de:	2200      	movs	r2, #0
 80092e0:	0020      	movs	r0, r4
 80092e2:	0029      	movs	r1, r5
 80092e4:	1e5e      	subs	r6, r3, #1
 80092e6:	4ba2      	ldr	r3, [pc, #648]	; (8009570 <_dtoa_r+0x69c>)
 80092e8:	f7f9 f890 	bl	800240c <__aeabi_dmul>
 80092ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092ee:	9008      	str	r0, [sp, #32]
 80092f0:	9109      	str	r1, [sp, #36]	; 0x24
 80092f2:	3301      	adds	r3, #1
 80092f4:	9310      	str	r3, [sp, #64]	; 0x40
 80092f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80092fa:	9c08      	ldr	r4, [sp, #32]
 80092fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80092fe:	9314      	str	r3, [sp, #80]	; 0x50
 8009300:	f7f9 fed6 	bl	80030b0 <__aeabi_i2d>
 8009304:	0022      	movs	r2, r4
 8009306:	002b      	movs	r3, r5
 8009308:	f7f9 f880 	bl	800240c <__aeabi_dmul>
 800930c:	2200      	movs	r2, #0
 800930e:	4b99      	ldr	r3, [pc, #612]	; (8009574 <_dtoa_r+0x6a0>)
 8009310:	f7f8 f93e 	bl	8001590 <__aeabi_dadd>
 8009314:	9010      	str	r0, [sp, #64]	; 0x40
 8009316:	9111      	str	r1, [sp, #68]	; 0x44
 8009318:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800931a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800931c:	9208      	str	r2, [sp, #32]
 800931e:	9309      	str	r3, [sp, #36]	; 0x24
 8009320:	4a95      	ldr	r2, [pc, #596]	; (8009578 <_dtoa_r+0x6a4>)
 8009322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009324:	4694      	mov	ip, r2
 8009326:	4463      	add	r3, ip
 8009328:	9317      	str	r3, [sp, #92]	; 0x5c
 800932a:	9309      	str	r3, [sp, #36]	; 0x24
 800932c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800932e:	2b00      	cmp	r3, #0
 8009330:	d161      	bne.n	80093f6 <_dtoa_r+0x522>
 8009332:	2200      	movs	r2, #0
 8009334:	0020      	movs	r0, r4
 8009336:	0029      	movs	r1, r5
 8009338:	4b90      	ldr	r3, [pc, #576]	; (800957c <_dtoa_r+0x6a8>)
 800933a:	f7f9 fad3 	bl	80028e4 <__aeabi_dsub>
 800933e:	9a08      	ldr	r2, [sp, #32]
 8009340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009342:	0004      	movs	r4, r0
 8009344:	000d      	movs	r5, r1
 8009346:	f7f7 f89b 	bl	8000480 <__aeabi_dcmpgt>
 800934a:	2800      	cmp	r0, #0
 800934c:	d000      	beq.n	8009350 <_dtoa_r+0x47c>
 800934e:	e2af      	b.n	80098b0 <_dtoa_r+0x9dc>
 8009350:	488b      	ldr	r0, [pc, #556]	; (8009580 <_dtoa_r+0x6ac>)
 8009352:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009354:	4684      	mov	ip, r0
 8009356:	4461      	add	r1, ip
 8009358:	000b      	movs	r3, r1
 800935a:	0020      	movs	r0, r4
 800935c:	0029      	movs	r1, r5
 800935e:	9a08      	ldr	r2, [sp, #32]
 8009360:	f7f7 f87a 	bl	8000458 <__aeabi_dcmplt>
 8009364:	2800      	cmp	r0, #0
 8009366:	d000      	beq.n	800936a <_dtoa_r+0x496>
 8009368:	e29f      	b.n	80098aa <_dtoa_r+0x9d6>
 800936a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800936c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800936e:	9308      	str	r3, [sp, #32]
 8009370:	9409      	str	r4, [sp, #36]	; 0x24
 8009372:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009374:	2b00      	cmp	r3, #0
 8009376:	da00      	bge.n	800937a <_dtoa_r+0x4a6>
 8009378:	e172      	b.n	8009660 <_dtoa_r+0x78c>
 800937a:	9a02      	ldr	r2, [sp, #8]
 800937c:	2a0e      	cmp	r2, #14
 800937e:	dd00      	ble.n	8009382 <_dtoa_r+0x4ae>
 8009380:	e16e      	b.n	8009660 <_dtoa_r+0x78c>
 8009382:	4b78      	ldr	r3, [pc, #480]	; (8009564 <_dtoa_r+0x690>)
 8009384:	00d2      	lsls	r2, r2, #3
 8009386:	189b      	adds	r3, r3, r2
 8009388:	685c      	ldr	r4, [r3, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	930a      	str	r3, [sp, #40]	; 0x28
 800938e:	940b      	str	r4, [sp, #44]	; 0x2c
 8009390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009392:	2b00      	cmp	r3, #0
 8009394:	db00      	blt.n	8009398 <_dtoa_r+0x4c4>
 8009396:	e0f7      	b.n	8009588 <_dtoa_r+0x6b4>
 8009398:	9b07      	ldr	r3, [sp, #28]
 800939a:	2b00      	cmp	r3, #0
 800939c:	dd00      	ble.n	80093a0 <_dtoa_r+0x4cc>
 800939e:	e0f3      	b.n	8009588 <_dtoa_r+0x6b4>
 80093a0:	d000      	beq.n	80093a4 <_dtoa_r+0x4d0>
 80093a2:	e282      	b.n	80098aa <_dtoa_r+0x9d6>
 80093a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093a8:	2200      	movs	r2, #0
 80093aa:	4b74      	ldr	r3, [pc, #464]	; (800957c <_dtoa_r+0x6a8>)
 80093ac:	f7f9 f82e 	bl	800240c <__aeabi_dmul>
 80093b0:	9a08      	ldr	r2, [sp, #32]
 80093b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b4:	f7f7 f86e 	bl	8000494 <__aeabi_dcmpge>
 80093b8:	9e07      	ldr	r6, [sp, #28]
 80093ba:	0035      	movs	r5, r6
 80093bc:	2800      	cmp	r0, #0
 80093be:	d000      	beq.n	80093c2 <_dtoa_r+0x4ee>
 80093c0:	e259      	b.n	8009876 <_dtoa_r+0x9a2>
 80093c2:	9b06      	ldr	r3, [sp, #24]
 80093c4:	9a06      	ldr	r2, [sp, #24]
 80093c6:	3301      	adds	r3, #1
 80093c8:	9308      	str	r3, [sp, #32]
 80093ca:	2331      	movs	r3, #49	; 0x31
 80093cc:	7013      	strb	r3, [r2, #0]
 80093ce:	9b02      	ldr	r3, [sp, #8]
 80093d0:	3301      	adds	r3, #1
 80093d2:	9302      	str	r3, [sp, #8]
 80093d4:	e254      	b.n	8009880 <_dtoa_r+0x9ac>
 80093d6:	4234      	tst	r4, r6
 80093d8:	d007      	beq.n	80093ea <_dtoa_r+0x516>
 80093da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093dc:	3301      	adds	r3, #1
 80093de:	9310      	str	r3, [sp, #64]	; 0x40
 80093e0:	682a      	ldr	r2, [r5, #0]
 80093e2:	686b      	ldr	r3, [r5, #4]
 80093e4:	f7f9 f812 	bl	800240c <__aeabi_dmul>
 80093e8:	0033      	movs	r3, r6
 80093ea:	1064      	asrs	r4, r4, #1
 80093ec:	3508      	adds	r5, #8
 80093ee:	e75a      	b.n	80092a6 <_dtoa_r+0x3d2>
 80093f0:	9e02      	ldr	r6, [sp, #8]
 80093f2:	9b07      	ldr	r3, [sp, #28]
 80093f4:	e780      	b.n	80092f8 <_dtoa_r+0x424>
 80093f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093fa:	1e5a      	subs	r2, r3, #1
 80093fc:	4b59      	ldr	r3, [pc, #356]	; (8009564 <_dtoa_r+0x690>)
 80093fe:	00d2      	lsls	r2, r2, #3
 8009400:	189b      	adds	r3, r3, r2
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	2900      	cmp	r1, #0
 8009408:	d051      	beq.n	80094ae <_dtoa_r+0x5da>
 800940a:	2000      	movs	r0, #0
 800940c:	495d      	ldr	r1, [pc, #372]	; (8009584 <_dtoa_r+0x6b0>)
 800940e:	f7f8 fbfb 	bl	8001c08 <__aeabi_ddiv>
 8009412:	9a08      	ldr	r2, [sp, #32]
 8009414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009416:	f7f9 fa65 	bl	80028e4 <__aeabi_dsub>
 800941a:	9a06      	ldr	r2, [sp, #24]
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	4694      	mov	ip, r2
 8009420:	9317      	str	r3, [sp, #92]	; 0x5c
 8009422:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009424:	9010      	str	r0, [sp, #64]	; 0x40
 8009426:	9111      	str	r1, [sp, #68]	; 0x44
 8009428:	4463      	add	r3, ip
 800942a:	9319      	str	r3, [sp, #100]	; 0x64
 800942c:	0029      	movs	r1, r5
 800942e:	0020      	movs	r0, r4
 8009430:	f7f9 fe08 	bl	8003044 <__aeabi_d2iz>
 8009434:	9014      	str	r0, [sp, #80]	; 0x50
 8009436:	f7f9 fe3b 	bl	80030b0 <__aeabi_i2d>
 800943a:	0002      	movs	r2, r0
 800943c:	000b      	movs	r3, r1
 800943e:	0020      	movs	r0, r4
 8009440:	0029      	movs	r1, r5
 8009442:	f7f9 fa4f 	bl	80028e4 <__aeabi_dsub>
 8009446:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009448:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800944a:	3301      	adds	r3, #1
 800944c:	9308      	str	r3, [sp, #32]
 800944e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009450:	0004      	movs	r4, r0
 8009452:	3330      	adds	r3, #48	; 0x30
 8009454:	7013      	strb	r3, [r2, #0]
 8009456:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800945a:	000d      	movs	r5, r1
 800945c:	f7f6 fffc 	bl	8000458 <__aeabi_dcmplt>
 8009460:	2800      	cmp	r0, #0
 8009462:	d175      	bne.n	8009550 <_dtoa_r+0x67c>
 8009464:	0022      	movs	r2, r4
 8009466:	002b      	movs	r3, r5
 8009468:	2000      	movs	r0, #0
 800946a:	4940      	ldr	r1, [pc, #256]	; (800956c <_dtoa_r+0x698>)
 800946c:	f7f9 fa3a 	bl	80028e4 <__aeabi_dsub>
 8009470:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009472:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009474:	f7f6 fff0 	bl	8000458 <__aeabi_dcmplt>
 8009478:	2800      	cmp	r0, #0
 800947a:	d000      	beq.n	800947e <_dtoa_r+0x5aa>
 800947c:	e0d2      	b.n	8009624 <_dtoa_r+0x750>
 800947e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009480:	9a08      	ldr	r2, [sp, #32]
 8009482:	4293      	cmp	r3, r2
 8009484:	d100      	bne.n	8009488 <_dtoa_r+0x5b4>
 8009486:	e770      	b.n	800936a <_dtoa_r+0x496>
 8009488:	9810      	ldr	r0, [sp, #64]	; 0x40
 800948a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800948c:	2200      	movs	r2, #0
 800948e:	4b38      	ldr	r3, [pc, #224]	; (8009570 <_dtoa_r+0x69c>)
 8009490:	f7f8 ffbc 	bl	800240c <__aeabi_dmul>
 8009494:	4b36      	ldr	r3, [pc, #216]	; (8009570 <_dtoa_r+0x69c>)
 8009496:	9010      	str	r0, [sp, #64]	; 0x40
 8009498:	9111      	str	r1, [sp, #68]	; 0x44
 800949a:	2200      	movs	r2, #0
 800949c:	0020      	movs	r0, r4
 800949e:	0029      	movs	r1, r5
 80094a0:	f7f8 ffb4 	bl	800240c <__aeabi_dmul>
 80094a4:	9b08      	ldr	r3, [sp, #32]
 80094a6:	0004      	movs	r4, r0
 80094a8:	000d      	movs	r5, r1
 80094aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80094ac:	e7be      	b.n	800942c <_dtoa_r+0x558>
 80094ae:	9808      	ldr	r0, [sp, #32]
 80094b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094b2:	f7f8 ffab 	bl	800240c <__aeabi_dmul>
 80094b6:	9a06      	ldr	r2, [sp, #24]
 80094b8:	9b06      	ldr	r3, [sp, #24]
 80094ba:	4694      	mov	ip, r2
 80094bc:	9308      	str	r3, [sp, #32]
 80094be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094c0:	9010      	str	r0, [sp, #64]	; 0x40
 80094c2:	9111      	str	r1, [sp, #68]	; 0x44
 80094c4:	4463      	add	r3, ip
 80094c6:	9319      	str	r3, [sp, #100]	; 0x64
 80094c8:	0029      	movs	r1, r5
 80094ca:	0020      	movs	r0, r4
 80094cc:	f7f9 fdba 	bl	8003044 <__aeabi_d2iz>
 80094d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80094d2:	f7f9 fded 	bl	80030b0 <__aeabi_i2d>
 80094d6:	0002      	movs	r2, r0
 80094d8:	000b      	movs	r3, r1
 80094da:	0020      	movs	r0, r4
 80094dc:	0029      	movs	r1, r5
 80094de:	f7f9 fa01 	bl	80028e4 <__aeabi_dsub>
 80094e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094e4:	9a08      	ldr	r2, [sp, #32]
 80094e6:	3330      	adds	r3, #48	; 0x30
 80094e8:	7013      	strb	r3, [r2, #0]
 80094ea:	0013      	movs	r3, r2
 80094ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094ee:	3301      	adds	r3, #1
 80094f0:	0004      	movs	r4, r0
 80094f2:	000d      	movs	r5, r1
 80094f4:	9308      	str	r3, [sp, #32]
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d12c      	bne.n	8009554 <_dtoa_r+0x680>
 80094fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80094fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80094fe:	9a06      	ldr	r2, [sp, #24]
 8009500:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009502:	4694      	mov	ip, r2
 8009504:	4463      	add	r3, ip
 8009506:	2200      	movs	r2, #0
 8009508:	9308      	str	r3, [sp, #32]
 800950a:	4b1e      	ldr	r3, [pc, #120]	; (8009584 <_dtoa_r+0x6b0>)
 800950c:	f7f8 f840 	bl	8001590 <__aeabi_dadd>
 8009510:	0002      	movs	r2, r0
 8009512:	000b      	movs	r3, r1
 8009514:	0020      	movs	r0, r4
 8009516:	0029      	movs	r1, r5
 8009518:	f7f6 ffb2 	bl	8000480 <__aeabi_dcmpgt>
 800951c:	2800      	cmp	r0, #0
 800951e:	d000      	beq.n	8009522 <_dtoa_r+0x64e>
 8009520:	e080      	b.n	8009624 <_dtoa_r+0x750>
 8009522:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009524:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009526:	2000      	movs	r0, #0
 8009528:	4916      	ldr	r1, [pc, #88]	; (8009584 <_dtoa_r+0x6b0>)
 800952a:	f7f9 f9db 	bl	80028e4 <__aeabi_dsub>
 800952e:	0002      	movs	r2, r0
 8009530:	000b      	movs	r3, r1
 8009532:	0020      	movs	r0, r4
 8009534:	0029      	movs	r1, r5
 8009536:	f7f6 ff8f 	bl	8000458 <__aeabi_dcmplt>
 800953a:	2800      	cmp	r0, #0
 800953c:	d100      	bne.n	8009540 <_dtoa_r+0x66c>
 800953e:	e714      	b.n	800936a <_dtoa_r+0x496>
 8009540:	9b08      	ldr	r3, [sp, #32]
 8009542:	001a      	movs	r2, r3
 8009544:	3a01      	subs	r2, #1
 8009546:	9208      	str	r2, [sp, #32]
 8009548:	7812      	ldrb	r2, [r2, #0]
 800954a:	2a30      	cmp	r2, #48	; 0x30
 800954c:	d0f8      	beq.n	8009540 <_dtoa_r+0x66c>
 800954e:	9308      	str	r3, [sp, #32]
 8009550:	9602      	str	r6, [sp, #8]
 8009552:	e055      	b.n	8009600 <_dtoa_r+0x72c>
 8009554:	2200      	movs	r2, #0
 8009556:	4b06      	ldr	r3, [pc, #24]	; (8009570 <_dtoa_r+0x69c>)
 8009558:	f7f8 ff58 	bl	800240c <__aeabi_dmul>
 800955c:	0004      	movs	r4, r0
 800955e:	000d      	movs	r5, r1
 8009560:	e7b2      	b.n	80094c8 <_dtoa_r+0x5f4>
 8009562:	46c0      	nop			; (mov r8, r8)
 8009564:	0800b760 	.word	0x0800b760
 8009568:	0800b738 	.word	0x0800b738
 800956c:	3ff00000 	.word	0x3ff00000
 8009570:	40240000 	.word	0x40240000
 8009574:	401c0000 	.word	0x401c0000
 8009578:	fcc00000 	.word	0xfcc00000
 800957c:	40140000 	.word	0x40140000
 8009580:	7cc00000 	.word	0x7cc00000
 8009584:	3fe00000 	.word	0x3fe00000
 8009588:	9b07      	ldr	r3, [sp, #28]
 800958a:	9e06      	ldr	r6, [sp, #24]
 800958c:	3b01      	subs	r3, #1
 800958e:	199b      	adds	r3, r3, r6
 8009590:	930c      	str	r3, [sp, #48]	; 0x30
 8009592:	9c08      	ldr	r4, [sp, #32]
 8009594:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800959a:	0020      	movs	r0, r4
 800959c:	0029      	movs	r1, r5
 800959e:	f7f8 fb33 	bl	8001c08 <__aeabi_ddiv>
 80095a2:	f7f9 fd4f 	bl	8003044 <__aeabi_d2iz>
 80095a6:	9007      	str	r0, [sp, #28]
 80095a8:	f7f9 fd82 	bl	80030b0 <__aeabi_i2d>
 80095ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b0:	f7f8 ff2c 	bl	800240c <__aeabi_dmul>
 80095b4:	0002      	movs	r2, r0
 80095b6:	000b      	movs	r3, r1
 80095b8:	0020      	movs	r0, r4
 80095ba:	0029      	movs	r1, r5
 80095bc:	f7f9 f992 	bl	80028e4 <__aeabi_dsub>
 80095c0:	0033      	movs	r3, r6
 80095c2:	9a07      	ldr	r2, [sp, #28]
 80095c4:	3601      	adds	r6, #1
 80095c6:	3230      	adds	r2, #48	; 0x30
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095cc:	9608      	str	r6, [sp, #32]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d139      	bne.n	8009646 <_dtoa_r+0x772>
 80095d2:	0002      	movs	r2, r0
 80095d4:	000b      	movs	r3, r1
 80095d6:	f7f7 ffdb 	bl	8001590 <__aeabi_dadd>
 80095da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095de:	0004      	movs	r4, r0
 80095e0:	000d      	movs	r5, r1
 80095e2:	f7f6 ff4d 	bl	8000480 <__aeabi_dcmpgt>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d11b      	bne.n	8009622 <_dtoa_r+0x74e>
 80095ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ee:	0020      	movs	r0, r4
 80095f0:	0029      	movs	r1, r5
 80095f2:	f7f6 ff2b 	bl	800044c <__aeabi_dcmpeq>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d002      	beq.n	8009600 <_dtoa_r+0x72c>
 80095fa:	9b07      	ldr	r3, [sp, #28]
 80095fc:	07db      	lsls	r3, r3, #31
 80095fe:	d410      	bmi.n	8009622 <_dtoa_r+0x74e>
 8009600:	0038      	movs	r0, r7
 8009602:	9905      	ldr	r1, [sp, #20]
 8009604:	f000 fade 	bl	8009bc4 <_Bfree>
 8009608:	2300      	movs	r3, #0
 800960a:	9a08      	ldr	r2, [sp, #32]
 800960c:	9802      	ldr	r0, [sp, #8]
 800960e:	7013      	strb	r3, [r2, #0]
 8009610:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009612:	3001      	adds	r0, #1
 8009614:	6018      	str	r0, [r3, #0]
 8009616:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009618:	2b00      	cmp	r3, #0
 800961a:	d100      	bne.n	800961e <_dtoa_r+0x74a>
 800961c:	e4a6      	b.n	8008f6c <_dtoa_r+0x98>
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e4a4      	b.n	8008f6c <_dtoa_r+0x98>
 8009622:	9e02      	ldr	r6, [sp, #8]
 8009624:	9b08      	ldr	r3, [sp, #32]
 8009626:	9308      	str	r3, [sp, #32]
 8009628:	3b01      	subs	r3, #1
 800962a:	781a      	ldrb	r2, [r3, #0]
 800962c:	2a39      	cmp	r2, #57	; 0x39
 800962e:	d106      	bne.n	800963e <_dtoa_r+0x76a>
 8009630:	9a06      	ldr	r2, [sp, #24]
 8009632:	429a      	cmp	r2, r3
 8009634:	d1f7      	bne.n	8009626 <_dtoa_r+0x752>
 8009636:	2230      	movs	r2, #48	; 0x30
 8009638:	9906      	ldr	r1, [sp, #24]
 800963a:	3601      	adds	r6, #1
 800963c:	700a      	strb	r2, [r1, #0]
 800963e:	781a      	ldrb	r2, [r3, #0]
 8009640:	3201      	adds	r2, #1
 8009642:	701a      	strb	r2, [r3, #0]
 8009644:	e784      	b.n	8009550 <_dtoa_r+0x67c>
 8009646:	2200      	movs	r2, #0
 8009648:	4baa      	ldr	r3, [pc, #680]	; (80098f4 <_dtoa_r+0xa20>)
 800964a:	f7f8 fedf 	bl	800240c <__aeabi_dmul>
 800964e:	2200      	movs	r2, #0
 8009650:	2300      	movs	r3, #0
 8009652:	0004      	movs	r4, r0
 8009654:	000d      	movs	r5, r1
 8009656:	f7f6 fef9 	bl	800044c <__aeabi_dcmpeq>
 800965a:	2800      	cmp	r0, #0
 800965c:	d09b      	beq.n	8009596 <_dtoa_r+0x6c2>
 800965e:	e7cf      	b.n	8009600 <_dtoa_r+0x72c>
 8009660:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009662:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009664:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009666:	2d00      	cmp	r5, #0
 8009668:	d012      	beq.n	8009690 <_dtoa_r+0x7bc>
 800966a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800966c:	2a01      	cmp	r2, #1
 800966e:	dc66      	bgt.n	800973e <_dtoa_r+0x86a>
 8009670:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009672:	2a00      	cmp	r2, #0
 8009674:	d05d      	beq.n	8009732 <_dtoa_r+0x85e>
 8009676:	4aa0      	ldr	r2, [pc, #640]	; (80098f8 <_dtoa_r+0xa24>)
 8009678:	189b      	adds	r3, r3, r2
 800967a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800967c:	2101      	movs	r1, #1
 800967e:	18d2      	adds	r2, r2, r3
 8009680:	920a      	str	r2, [sp, #40]	; 0x28
 8009682:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009684:	0038      	movs	r0, r7
 8009686:	18d3      	adds	r3, r2, r3
 8009688:	930d      	str	r3, [sp, #52]	; 0x34
 800968a:	f000 fb4b 	bl	8009d24 <__i2b>
 800968e:	0005      	movs	r5, r0
 8009690:	2c00      	cmp	r4, #0
 8009692:	dd0e      	ble.n	80096b2 <_dtoa_r+0x7de>
 8009694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009696:	2b00      	cmp	r3, #0
 8009698:	dd0b      	ble.n	80096b2 <_dtoa_r+0x7de>
 800969a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800969c:	0023      	movs	r3, r4
 800969e:	4294      	cmp	r4, r2
 80096a0:	dd00      	ble.n	80096a4 <_dtoa_r+0x7d0>
 80096a2:	0013      	movs	r3, r2
 80096a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096a6:	1ae4      	subs	r4, r4, r3
 80096a8:	1ad2      	subs	r2, r2, r3
 80096aa:	920a      	str	r2, [sp, #40]	; 0x28
 80096ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	930d      	str	r3, [sp, #52]	; 0x34
 80096b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01f      	beq.n	80096f8 <_dtoa_r+0x824>
 80096b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d054      	beq.n	8009768 <_dtoa_r+0x894>
 80096be:	2e00      	cmp	r6, #0
 80096c0:	dd11      	ble.n	80096e6 <_dtoa_r+0x812>
 80096c2:	0029      	movs	r1, r5
 80096c4:	0032      	movs	r2, r6
 80096c6:	0038      	movs	r0, r7
 80096c8:	f000 fbf2 	bl	8009eb0 <__pow5mult>
 80096cc:	9a05      	ldr	r2, [sp, #20]
 80096ce:	0001      	movs	r1, r0
 80096d0:	0005      	movs	r5, r0
 80096d2:	0038      	movs	r0, r7
 80096d4:	f000 fb3c 	bl	8009d50 <__multiply>
 80096d8:	9905      	ldr	r1, [sp, #20]
 80096da:	9014      	str	r0, [sp, #80]	; 0x50
 80096dc:	0038      	movs	r0, r7
 80096de:	f000 fa71 	bl	8009bc4 <_Bfree>
 80096e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e8:	1b9a      	subs	r2, r3, r6
 80096ea:	42b3      	cmp	r3, r6
 80096ec:	d004      	beq.n	80096f8 <_dtoa_r+0x824>
 80096ee:	0038      	movs	r0, r7
 80096f0:	9905      	ldr	r1, [sp, #20]
 80096f2:	f000 fbdd 	bl	8009eb0 <__pow5mult>
 80096f6:	9005      	str	r0, [sp, #20]
 80096f8:	2101      	movs	r1, #1
 80096fa:	0038      	movs	r0, r7
 80096fc:	f000 fb12 	bl	8009d24 <__i2b>
 8009700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009702:	0006      	movs	r6, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	dd31      	ble.n	800976c <_dtoa_r+0x898>
 8009708:	001a      	movs	r2, r3
 800970a:	0001      	movs	r1, r0
 800970c:	0038      	movs	r0, r7
 800970e:	f000 fbcf 	bl	8009eb0 <__pow5mult>
 8009712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009714:	0006      	movs	r6, r0
 8009716:	2b01      	cmp	r3, #1
 8009718:	dd2d      	ble.n	8009776 <_dtoa_r+0x8a2>
 800971a:	2300      	movs	r3, #0
 800971c:	930e      	str	r3, [sp, #56]	; 0x38
 800971e:	6933      	ldr	r3, [r6, #16]
 8009720:	3303      	adds	r3, #3
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	18f3      	adds	r3, r6, r3
 8009726:	6858      	ldr	r0, [r3, #4]
 8009728:	f000 fab4 	bl	8009c94 <__hi0bits>
 800972c:	2320      	movs	r3, #32
 800972e:	1a18      	subs	r0, r3, r0
 8009730:	e039      	b.n	80097a6 <_dtoa_r+0x8d2>
 8009732:	2336      	movs	r3, #54	; 0x36
 8009734:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009736:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800973a:	1a9b      	subs	r3, r3, r2
 800973c:	e79d      	b.n	800967a <_dtoa_r+0x7a6>
 800973e:	9b07      	ldr	r3, [sp, #28]
 8009740:	1e5e      	subs	r6, r3, #1
 8009742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009744:	42b3      	cmp	r3, r6
 8009746:	db07      	blt.n	8009758 <_dtoa_r+0x884>
 8009748:	1b9e      	subs	r6, r3, r6
 800974a:	9b07      	ldr	r3, [sp, #28]
 800974c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800974e:	2b00      	cmp	r3, #0
 8009750:	da93      	bge.n	800967a <_dtoa_r+0x7a6>
 8009752:	1ae4      	subs	r4, r4, r3
 8009754:	2300      	movs	r3, #0
 8009756:	e790      	b.n	800967a <_dtoa_r+0x7a6>
 8009758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800975a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800975c:	1af3      	subs	r3, r6, r3
 800975e:	18d3      	adds	r3, r2, r3
 8009760:	960e      	str	r6, [sp, #56]	; 0x38
 8009762:	9315      	str	r3, [sp, #84]	; 0x54
 8009764:	2600      	movs	r6, #0
 8009766:	e7f0      	b.n	800974a <_dtoa_r+0x876>
 8009768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800976a:	e7c0      	b.n	80096ee <_dtoa_r+0x81a>
 800976c:	2300      	movs	r3, #0
 800976e:	930e      	str	r3, [sp, #56]	; 0x38
 8009770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009772:	2b01      	cmp	r3, #1
 8009774:	dc13      	bgt.n	800979e <_dtoa_r+0x8ca>
 8009776:	2300      	movs	r3, #0
 8009778:	930e      	str	r3, [sp, #56]	; 0x38
 800977a:	9b08      	ldr	r3, [sp, #32]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10e      	bne.n	800979e <_dtoa_r+0x8ca>
 8009780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009782:	031b      	lsls	r3, r3, #12
 8009784:	d10b      	bne.n	800979e <_dtoa_r+0x8ca>
 8009786:	4b5d      	ldr	r3, [pc, #372]	; (80098fc <_dtoa_r+0xa28>)
 8009788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800978a:	4213      	tst	r3, r2
 800978c:	d007      	beq.n	800979e <_dtoa_r+0x8ca>
 800978e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009790:	3301      	adds	r3, #1
 8009792:	930a      	str	r3, [sp, #40]	; 0x28
 8009794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009796:	3301      	adds	r3, #1
 8009798:	930d      	str	r3, [sp, #52]	; 0x34
 800979a:	2301      	movs	r3, #1
 800979c:	930e      	str	r3, [sp, #56]	; 0x38
 800979e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097a0:	2001      	movs	r0, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1bb      	bne.n	800971e <_dtoa_r+0x84a>
 80097a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a8:	221f      	movs	r2, #31
 80097aa:	1818      	adds	r0, r3, r0
 80097ac:	0003      	movs	r3, r0
 80097ae:	4013      	ands	r3, r2
 80097b0:	4210      	tst	r0, r2
 80097b2:	d046      	beq.n	8009842 <_dtoa_r+0x96e>
 80097b4:	3201      	adds	r2, #1
 80097b6:	1ad2      	subs	r2, r2, r3
 80097b8:	2a04      	cmp	r2, #4
 80097ba:	dd3f      	ble.n	800983c <_dtoa_r+0x968>
 80097bc:	221c      	movs	r2, #28
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097c2:	18e4      	adds	r4, r4, r3
 80097c4:	18d2      	adds	r2, r2, r3
 80097c6:	920a      	str	r2, [sp, #40]	; 0x28
 80097c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097ca:	18d3      	adds	r3, r2, r3
 80097cc:	930d      	str	r3, [sp, #52]	; 0x34
 80097ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dd05      	ble.n	80097e0 <_dtoa_r+0x90c>
 80097d4:	001a      	movs	r2, r3
 80097d6:	0038      	movs	r0, r7
 80097d8:	9905      	ldr	r1, [sp, #20]
 80097da:	f000 fbc5 	bl	8009f68 <__lshift>
 80097de:	9005      	str	r0, [sp, #20]
 80097e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	dd05      	ble.n	80097f2 <_dtoa_r+0x91e>
 80097e6:	0031      	movs	r1, r6
 80097e8:	001a      	movs	r2, r3
 80097ea:	0038      	movs	r0, r7
 80097ec:	f000 fbbc 	bl	8009f68 <__lshift>
 80097f0:	0006      	movs	r6, r0
 80097f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d026      	beq.n	8009846 <_dtoa_r+0x972>
 80097f8:	0031      	movs	r1, r6
 80097fa:	9805      	ldr	r0, [sp, #20]
 80097fc:	f000 fc22 	bl	800a044 <__mcmp>
 8009800:	2800      	cmp	r0, #0
 8009802:	da20      	bge.n	8009846 <_dtoa_r+0x972>
 8009804:	9b02      	ldr	r3, [sp, #8]
 8009806:	220a      	movs	r2, #10
 8009808:	3b01      	subs	r3, #1
 800980a:	9302      	str	r3, [sp, #8]
 800980c:	0038      	movs	r0, r7
 800980e:	2300      	movs	r3, #0
 8009810:	9905      	ldr	r1, [sp, #20]
 8009812:	f000 f9fb 	bl	8009c0c <__multadd>
 8009816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009818:	9005      	str	r0, [sp, #20]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d100      	bne.n	8009820 <_dtoa_r+0x94c>
 800981e:	e166      	b.n	8009aee <_dtoa_r+0xc1a>
 8009820:	2300      	movs	r3, #0
 8009822:	0029      	movs	r1, r5
 8009824:	220a      	movs	r2, #10
 8009826:	0038      	movs	r0, r7
 8009828:	f000 f9f0 	bl	8009c0c <__multadd>
 800982c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800982e:	0005      	movs	r5, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	dc47      	bgt.n	80098c4 <_dtoa_r+0x9f0>
 8009834:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009836:	2b02      	cmp	r3, #2
 8009838:	dc0d      	bgt.n	8009856 <_dtoa_r+0x982>
 800983a:	e043      	b.n	80098c4 <_dtoa_r+0x9f0>
 800983c:	2a04      	cmp	r2, #4
 800983e:	d0c6      	beq.n	80097ce <_dtoa_r+0x8fa>
 8009840:	0013      	movs	r3, r2
 8009842:	331c      	adds	r3, #28
 8009844:	e7bc      	b.n	80097c0 <_dtoa_r+0x8ec>
 8009846:	9b07      	ldr	r3, [sp, #28]
 8009848:	2b00      	cmp	r3, #0
 800984a:	dc35      	bgt.n	80098b8 <_dtoa_r+0x9e4>
 800984c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800984e:	2b02      	cmp	r3, #2
 8009850:	dd32      	ble.n	80098b8 <_dtoa_r+0x9e4>
 8009852:	9b07      	ldr	r3, [sp, #28]
 8009854:	930c      	str	r3, [sp, #48]	; 0x30
 8009856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10c      	bne.n	8009876 <_dtoa_r+0x9a2>
 800985c:	0031      	movs	r1, r6
 800985e:	2205      	movs	r2, #5
 8009860:	0038      	movs	r0, r7
 8009862:	f000 f9d3 	bl	8009c0c <__multadd>
 8009866:	0006      	movs	r6, r0
 8009868:	0001      	movs	r1, r0
 800986a:	9805      	ldr	r0, [sp, #20]
 800986c:	f000 fbea 	bl	800a044 <__mcmp>
 8009870:	2800      	cmp	r0, #0
 8009872:	dd00      	ble.n	8009876 <_dtoa_r+0x9a2>
 8009874:	e5a5      	b.n	80093c2 <_dtoa_r+0x4ee>
 8009876:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009878:	43db      	mvns	r3, r3
 800987a:	9302      	str	r3, [sp, #8]
 800987c:	9b06      	ldr	r3, [sp, #24]
 800987e:	9308      	str	r3, [sp, #32]
 8009880:	2400      	movs	r4, #0
 8009882:	0031      	movs	r1, r6
 8009884:	0038      	movs	r0, r7
 8009886:	f000 f99d 	bl	8009bc4 <_Bfree>
 800988a:	2d00      	cmp	r5, #0
 800988c:	d100      	bne.n	8009890 <_dtoa_r+0x9bc>
 800988e:	e6b7      	b.n	8009600 <_dtoa_r+0x72c>
 8009890:	2c00      	cmp	r4, #0
 8009892:	d005      	beq.n	80098a0 <_dtoa_r+0x9cc>
 8009894:	42ac      	cmp	r4, r5
 8009896:	d003      	beq.n	80098a0 <_dtoa_r+0x9cc>
 8009898:	0021      	movs	r1, r4
 800989a:	0038      	movs	r0, r7
 800989c:	f000 f992 	bl	8009bc4 <_Bfree>
 80098a0:	0029      	movs	r1, r5
 80098a2:	0038      	movs	r0, r7
 80098a4:	f000 f98e 	bl	8009bc4 <_Bfree>
 80098a8:	e6aa      	b.n	8009600 <_dtoa_r+0x72c>
 80098aa:	2600      	movs	r6, #0
 80098ac:	0035      	movs	r5, r6
 80098ae:	e7e2      	b.n	8009876 <_dtoa_r+0x9a2>
 80098b0:	9602      	str	r6, [sp, #8]
 80098b2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80098b4:	0035      	movs	r5, r6
 80098b6:	e584      	b.n	80093c2 <_dtoa_r+0x4ee>
 80098b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d100      	bne.n	80098c0 <_dtoa_r+0x9ec>
 80098be:	e0ce      	b.n	8009a5e <_dtoa_r+0xb8a>
 80098c0:	9b07      	ldr	r3, [sp, #28]
 80098c2:	930c      	str	r3, [sp, #48]	; 0x30
 80098c4:	2c00      	cmp	r4, #0
 80098c6:	dd05      	ble.n	80098d4 <_dtoa_r+0xa00>
 80098c8:	0029      	movs	r1, r5
 80098ca:	0022      	movs	r2, r4
 80098cc:	0038      	movs	r0, r7
 80098ce:	f000 fb4b 	bl	8009f68 <__lshift>
 80098d2:	0005      	movs	r5, r0
 80098d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098d6:	0028      	movs	r0, r5
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d022      	beq.n	8009922 <_dtoa_r+0xa4e>
 80098dc:	0038      	movs	r0, r7
 80098de:	6869      	ldr	r1, [r5, #4]
 80098e0:	f000 f92c 	bl	8009b3c <_Balloc>
 80098e4:	1e04      	subs	r4, r0, #0
 80098e6:	d10f      	bne.n	8009908 <_dtoa_r+0xa34>
 80098e8:	0002      	movs	r2, r0
 80098ea:	4b05      	ldr	r3, [pc, #20]	; (8009900 <_dtoa_r+0xa2c>)
 80098ec:	4905      	ldr	r1, [pc, #20]	; (8009904 <_dtoa_r+0xa30>)
 80098ee:	f7ff fb06 	bl	8008efe <_dtoa_r+0x2a>
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	40240000 	.word	0x40240000
 80098f8:	00000433 	.word	0x00000433
 80098fc:	7ff00000 	.word	0x7ff00000
 8009900:	0800b6c7 	.word	0x0800b6c7
 8009904:	000002ea 	.word	0x000002ea
 8009908:	0029      	movs	r1, r5
 800990a:	692b      	ldr	r3, [r5, #16]
 800990c:	310c      	adds	r1, #12
 800990e:	1c9a      	adds	r2, r3, #2
 8009910:	0092      	lsls	r2, r2, #2
 8009912:	300c      	adds	r0, #12
 8009914:	f7fe fdb2 	bl	800847c <memcpy>
 8009918:	2201      	movs	r2, #1
 800991a:	0021      	movs	r1, r4
 800991c:	0038      	movs	r0, r7
 800991e:	f000 fb23 	bl	8009f68 <__lshift>
 8009922:	9b06      	ldr	r3, [sp, #24]
 8009924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009926:	930a      	str	r3, [sp, #40]	; 0x28
 8009928:	3b01      	subs	r3, #1
 800992a:	189b      	adds	r3, r3, r2
 800992c:	2201      	movs	r2, #1
 800992e:	002c      	movs	r4, r5
 8009930:	0005      	movs	r5, r0
 8009932:	9314      	str	r3, [sp, #80]	; 0x50
 8009934:	9b08      	ldr	r3, [sp, #32]
 8009936:	4013      	ands	r3, r2
 8009938:	930f      	str	r3, [sp, #60]	; 0x3c
 800993a:	0031      	movs	r1, r6
 800993c:	9805      	ldr	r0, [sp, #20]
 800993e:	f7ff fa3d 	bl	8008dbc <quorem>
 8009942:	0003      	movs	r3, r0
 8009944:	0021      	movs	r1, r4
 8009946:	3330      	adds	r3, #48	; 0x30
 8009948:	900d      	str	r0, [sp, #52]	; 0x34
 800994a:	9805      	ldr	r0, [sp, #20]
 800994c:	9307      	str	r3, [sp, #28]
 800994e:	f000 fb79 	bl	800a044 <__mcmp>
 8009952:	002a      	movs	r2, r5
 8009954:	900e      	str	r0, [sp, #56]	; 0x38
 8009956:	0031      	movs	r1, r6
 8009958:	0038      	movs	r0, r7
 800995a:	f000 fb8f 	bl	800a07c <__mdiff>
 800995e:	68c3      	ldr	r3, [r0, #12]
 8009960:	9008      	str	r0, [sp, #32]
 8009962:	9310      	str	r3, [sp, #64]	; 0x40
 8009964:	2301      	movs	r3, #1
 8009966:	930c      	str	r3, [sp, #48]	; 0x30
 8009968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <_dtoa_r+0xaa4>
 800996e:	0001      	movs	r1, r0
 8009970:	9805      	ldr	r0, [sp, #20]
 8009972:	f000 fb67 	bl	800a044 <__mcmp>
 8009976:	900c      	str	r0, [sp, #48]	; 0x30
 8009978:	0038      	movs	r0, r7
 800997a:	9908      	ldr	r1, [sp, #32]
 800997c:	f000 f922 	bl	8009bc4 <_Bfree>
 8009980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009984:	3301      	adds	r3, #1
 8009986:	9308      	str	r3, [sp, #32]
 8009988:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800998a:	4313      	orrs	r3, r2
 800998c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800998e:	4313      	orrs	r3, r2
 8009990:	d10c      	bne.n	80099ac <_dtoa_r+0xad8>
 8009992:	9b07      	ldr	r3, [sp, #28]
 8009994:	2b39      	cmp	r3, #57	; 0x39
 8009996:	d026      	beq.n	80099e6 <_dtoa_r+0xb12>
 8009998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800999a:	2b00      	cmp	r3, #0
 800999c:	dd02      	ble.n	80099a4 <_dtoa_r+0xad0>
 800999e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099a0:	3331      	adds	r3, #49	; 0x31
 80099a2:	9307      	str	r3, [sp, #28]
 80099a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a6:	9a07      	ldr	r2, [sp, #28]
 80099a8:	701a      	strb	r2, [r3, #0]
 80099aa:	e76a      	b.n	8009882 <_dtoa_r+0x9ae>
 80099ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	db04      	blt.n	80099bc <_dtoa_r+0xae8>
 80099b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099b4:	4313      	orrs	r3, r2
 80099b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099b8:	4313      	orrs	r3, r2
 80099ba:	d11f      	bne.n	80099fc <_dtoa_r+0xb28>
 80099bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099be:	2b00      	cmp	r3, #0
 80099c0:	ddf0      	ble.n	80099a4 <_dtoa_r+0xad0>
 80099c2:	9905      	ldr	r1, [sp, #20]
 80099c4:	2201      	movs	r2, #1
 80099c6:	0038      	movs	r0, r7
 80099c8:	f000 face 	bl	8009f68 <__lshift>
 80099cc:	0031      	movs	r1, r6
 80099ce:	9005      	str	r0, [sp, #20]
 80099d0:	f000 fb38 	bl	800a044 <__mcmp>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	dc03      	bgt.n	80099e0 <_dtoa_r+0xb0c>
 80099d8:	d1e4      	bne.n	80099a4 <_dtoa_r+0xad0>
 80099da:	9b07      	ldr	r3, [sp, #28]
 80099dc:	07db      	lsls	r3, r3, #31
 80099de:	d5e1      	bpl.n	80099a4 <_dtoa_r+0xad0>
 80099e0:	9b07      	ldr	r3, [sp, #28]
 80099e2:	2b39      	cmp	r3, #57	; 0x39
 80099e4:	d1db      	bne.n	800999e <_dtoa_r+0xaca>
 80099e6:	2339      	movs	r3, #57	; 0x39
 80099e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ea:	7013      	strb	r3, [r2, #0]
 80099ec:	9b08      	ldr	r3, [sp, #32]
 80099ee:	9308      	str	r3, [sp, #32]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	781a      	ldrb	r2, [r3, #0]
 80099f4:	2a39      	cmp	r2, #57	; 0x39
 80099f6:	d068      	beq.n	8009aca <_dtoa_r+0xbf6>
 80099f8:	3201      	adds	r2, #1
 80099fa:	e7d5      	b.n	80099a8 <_dtoa_r+0xad4>
 80099fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	dd07      	ble.n	8009a12 <_dtoa_r+0xb3e>
 8009a02:	9b07      	ldr	r3, [sp, #28]
 8009a04:	2b39      	cmp	r3, #57	; 0x39
 8009a06:	d0ee      	beq.n	80099e6 <_dtoa_r+0xb12>
 8009a08:	9b07      	ldr	r3, [sp, #28]
 8009a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	7013      	strb	r3, [r2, #0]
 8009a10:	e737      	b.n	8009882 <_dtoa_r+0x9ae>
 8009a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a14:	9a07      	ldr	r2, [sp, #28]
 8009a16:	701a      	strb	r2, [r3, #0]
 8009a18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d03e      	beq.n	8009a9e <_dtoa_r+0xbca>
 8009a20:	2300      	movs	r3, #0
 8009a22:	220a      	movs	r2, #10
 8009a24:	9905      	ldr	r1, [sp, #20]
 8009a26:	0038      	movs	r0, r7
 8009a28:	f000 f8f0 	bl	8009c0c <__multadd>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	9005      	str	r0, [sp, #20]
 8009a30:	220a      	movs	r2, #10
 8009a32:	0021      	movs	r1, r4
 8009a34:	0038      	movs	r0, r7
 8009a36:	42ac      	cmp	r4, r5
 8009a38:	d106      	bne.n	8009a48 <_dtoa_r+0xb74>
 8009a3a:	f000 f8e7 	bl	8009c0c <__multadd>
 8009a3e:	0004      	movs	r4, r0
 8009a40:	0005      	movs	r5, r0
 8009a42:	9b08      	ldr	r3, [sp, #32]
 8009a44:	930a      	str	r3, [sp, #40]	; 0x28
 8009a46:	e778      	b.n	800993a <_dtoa_r+0xa66>
 8009a48:	f000 f8e0 	bl	8009c0c <__multadd>
 8009a4c:	0029      	movs	r1, r5
 8009a4e:	0004      	movs	r4, r0
 8009a50:	2300      	movs	r3, #0
 8009a52:	220a      	movs	r2, #10
 8009a54:	0038      	movs	r0, r7
 8009a56:	f000 f8d9 	bl	8009c0c <__multadd>
 8009a5a:	0005      	movs	r5, r0
 8009a5c:	e7f1      	b.n	8009a42 <_dtoa_r+0xb6e>
 8009a5e:	9b07      	ldr	r3, [sp, #28]
 8009a60:	930c      	str	r3, [sp, #48]	; 0x30
 8009a62:	2400      	movs	r4, #0
 8009a64:	0031      	movs	r1, r6
 8009a66:	9805      	ldr	r0, [sp, #20]
 8009a68:	f7ff f9a8 	bl	8008dbc <quorem>
 8009a6c:	9b06      	ldr	r3, [sp, #24]
 8009a6e:	3030      	adds	r0, #48	; 0x30
 8009a70:	5518      	strb	r0, [r3, r4]
 8009a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a74:	3401      	adds	r4, #1
 8009a76:	9007      	str	r0, [sp, #28]
 8009a78:	42a3      	cmp	r3, r4
 8009a7a:	dd07      	ble.n	8009a8c <_dtoa_r+0xbb8>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	220a      	movs	r2, #10
 8009a80:	0038      	movs	r0, r7
 8009a82:	9905      	ldr	r1, [sp, #20]
 8009a84:	f000 f8c2 	bl	8009c0c <__multadd>
 8009a88:	9005      	str	r0, [sp, #20]
 8009a8a:	e7eb      	b.n	8009a64 <_dtoa_r+0xb90>
 8009a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a8e:	2001      	movs	r0, #1
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dd00      	ble.n	8009a96 <_dtoa_r+0xbc2>
 8009a94:	0018      	movs	r0, r3
 8009a96:	2400      	movs	r4, #0
 8009a98:	9b06      	ldr	r3, [sp, #24]
 8009a9a:	181b      	adds	r3, r3, r0
 8009a9c:	9308      	str	r3, [sp, #32]
 8009a9e:	9905      	ldr	r1, [sp, #20]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	0038      	movs	r0, r7
 8009aa4:	f000 fa60 	bl	8009f68 <__lshift>
 8009aa8:	0031      	movs	r1, r6
 8009aaa:	9005      	str	r0, [sp, #20]
 8009aac:	f000 faca 	bl	800a044 <__mcmp>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	dc9b      	bgt.n	80099ec <_dtoa_r+0xb18>
 8009ab4:	d102      	bne.n	8009abc <_dtoa_r+0xbe8>
 8009ab6:	9b07      	ldr	r3, [sp, #28]
 8009ab8:	07db      	lsls	r3, r3, #31
 8009aba:	d497      	bmi.n	80099ec <_dtoa_r+0xb18>
 8009abc:	9b08      	ldr	r3, [sp, #32]
 8009abe:	9308      	str	r3, [sp, #32]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	781a      	ldrb	r2, [r3, #0]
 8009ac4:	2a30      	cmp	r2, #48	; 0x30
 8009ac6:	d0fa      	beq.n	8009abe <_dtoa_r+0xbea>
 8009ac8:	e6db      	b.n	8009882 <_dtoa_r+0x9ae>
 8009aca:	9a06      	ldr	r2, [sp, #24]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d18e      	bne.n	80099ee <_dtoa_r+0xb1a>
 8009ad0:	9b02      	ldr	r3, [sp, #8]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	9302      	str	r3, [sp, #8]
 8009ad6:	2331      	movs	r3, #49	; 0x31
 8009ad8:	e799      	b.n	8009a0e <_dtoa_r+0xb3a>
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <_dtoa_r+0xc2c>)
 8009adc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009ade:	9306      	str	r3, [sp, #24]
 8009ae0:	4b08      	ldr	r3, [pc, #32]	; (8009b04 <_dtoa_r+0xc30>)
 8009ae2:	2a00      	cmp	r2, #0
 8009ae4:	d001      	beq.n	8009aea <_dtoa_r+0xc16>
 8009ae6:	f7ff fa3f 	bl	8008f68 <_dtoa_r+0x94>
 8009aea:	f7ff fa3f 	bl	8008f6c <_dtoa_r+0x98>
 8009aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dcb6      	bgt.n	8009a62 <_dtoa_r+0xb8e>
 8009af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	dd00      	ble.n	8009afc <_dtoa_r+0xc28>
 8009afa:	e6ac      	b.n	8009856 <_dtoa_r+0x982>
 8009afc:	e7b1      	b.n	8009a62 <_dtoa_r+0xb8e>
 8009afe:	46c0      	nop			; (mov r8, r8)
 8009b00:	0800b648 	.word	0x0800b648
 8009b04:	0800b650 	.word	0x0800b650

08009b08 <_localeconv_r>:
 8009b08:	4800      	ldr	r0, [pc, #0]	; (8009b0c <_localeconv_r+0x4>)
 8009b0a:	4770      	bx	lr
 8009b0c:	20000168 	.word	0x20000168

08009b10 <malloc>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	4b03      	ldr	r3, [pc, #12]	; (8009b20 <malloc+0x10>)
 8009b14:	0001      	movs	r1, r0
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	f000 fc44 	bl	800a3a4 <_malloc_r>
 8009b1c:	bd10      	pop	{r4, pc}
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	20000014 	.word	0x20000014

08009b24 <memchr>:
 8009b24:	b2c9      	uxtb	r1, r1
 8009b26:	1882      	adds	r2, r0, r2
 8009b28:	4290      	cmp	r0, r2
 8009b2a:	d101      	bne.n	8009b30 <memchr+0xc>
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	4770      	bx	lr
 8009b30:	7803      	ldrb	r3, [r0, #0]
 8009b32:	428b      	cmp	r3, r1
 8009b34:	d0fb      	beq.n	8009b2e <memchr+0xa>
 8009b36:	3001      	adds	r0, #1
 8009b38:	e7f6      	b.n	8009b28 <memchr+0x4>
	...

08009b3c <_Balloc>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b40:	0006      	movs	r6, r0
 8009b42:	000c      	movs	r4, r1
 8009b44:	2d00      	cmp	r5, #0
 8009b46:	d10e      	bne.n	8009b66 <_Balloc+0x2a>
 8009b48:	2010      	movs	r0, #16
 8009b4a:	f7ff ffe1 	bl	8009b10 <malloc>
 8009b4e:	1e02      	subs	r2, r0, #0
 8009b50:	6270      	str	r0, [r6, #36]	; 0x24
 8009b52:	d104      	bne.n	8009b5e <_Balloc+0x22>
 8009b54:	2166      	movs	r1, #102	; 0x66
 8009b56:	4b19      	ldr	r3, [pc, #100]	; (8009bbc <_Balloc+0x80>)
 8009b58:	4819      	ldr	r0, [pc, #100]	; (8009bc0 <_Balloc+0x84>)
 8009b5a:	f000 fe0d 	bl	800a778 <__assert_func>
 8009b5e:	6045      	str	r5, [r0, #4]
 8009b60:	6085      	str	r5, [r0, #8]
 8009b62:	6005      	str	r5, [r0, #0]
 8009b64:	60c5      	str	r5, [r0, #12]
 8009b66:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009b68:	68eb      	ldr	r3, [r5, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d013      	beq.n	8009b96 <_Balloc+0x5a>
 8009b6e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b70:	00a2      	lsls	r2, r4, #2
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	189b      	adds	r3, r3, r2
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d118      	bne.n	8009bae <_Balloc+0x72>
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	000d      	movs	r5, r1
 8009b80:	40a5      	lsls	r5, r4
 8009b82:	1d6a      	adds	r2, r5, #5
 8009b84:	0030      	movs	r0, r6
 8009b86:	0092      	lsls	r2, r2, #2
 8009b88:	f000 fb74 	bl	800a274 <_calloc_r>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d00c      	beq.n	8009baa <_Balloc+0x6e>
 8009b90:	6044      	str	r4, [r0, #4]
 8009b92:	6085      	str	r5, [r0, #8]
 8009b94:	e00d      	b.n	8009bb2 <_Balloc+0x76>
 8009b96:	2221      	movs	r2, #33	; 0x21
 8009b98:	2104      	movs	r1, #4
 8009b9a:	0030      	movs	r0, r6
 8009b9c:	f000 fb6a 	bl	800a274 <_calloc_r>
 8009ba0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ba2:	60e8      	str	r0, [r5, #12]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e1      	bne.n	8009b6e <_Balloc+0x32>
 8009baa:	2000      	movs	r0, #0
 8009bac:	bd70      	pop	{r4, r5, r6, pc}
 8009bae:	6802      	ldr	r2, [r0, #0]
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6103      	str	r3, [r0, #16]
 8009bb6:	60c3      	str	r3, [r0, #12]
 8009bb8:	e7f8      	b.n	8009bac <_Balloc+0x70>
 8009bba:	46c0      	nop			; (mov r8, r8)
 8009bbc:	0800b655 	.word	0x0800b655
 8009bc0:	0800b6d8 	.word	0x0800b6d8

08009bc4 <_Bfree>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bc8:	0005      	movs	r5, r0
 8009bca:	000c      	movs	r4, r1
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	d10e      	bne.n	8009bee <_Bfree+0x2a>
 8009bd0:	2010      	movs	r0, #16
 8009bd2:	f7ff ff9d 	bl	8009b10 <malloc>
 8009bd6:	1e02      	subs	r2, r0, #0
 8009bd8:	6268      	str	r0, [r5, #36]	; 0x24
 8009bda:	d104      	bne.n	8009be6 <_Bfree+0x22>
 8009bdc:	218a      	movs	r1, #138	; 0x8a
 8009bde:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <_Bfree+0x40>)
 8009be0:	4809      	ldr	r0, [pc, #36]	; (8009c08 <_Bfree+0x44>)
 8009be2:	f000 fdc9 	bl	800a778 <__assert_func>
 8009be6:	6046      	str	r6, [r0, #4]
 8009be8:	6086      	str	r6, [r0, #8]
 8009bea:	6006      	str	r6, [r0, #0]
 8009bec:	60c6      	str	r6, [r0, #12]
 8009bee:	2c00      	cmp	r4, #0
 8009bf0:	d007      	beq.n	8009c02 <_Bfree+0x3e>
 8009bf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bf4:	6862      	ldr	r2, [r4, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	0092      	lsls	r2, r2, #2
 8009bfa:	189b      	adds	r3, r3, r2
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	6022      	str	r2, [r4, #0]
 8009c00:	601c      	str	r4, [r3, #0]
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	0800b655 	.word	0x0800b655
 8009c08:	0800b6d8 	.word	0x0800b6d8

08009c0c <__multadd>:
 8009c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c0e:	000e      	movs	r6, r1
 8009c10:	9001      	str	r0, [sp, #4]
 8009c12:	000c      	movs	r4, r1
 8009c14:	001d      	movs	r5, r3
 8009c16:	2000      	movs	r0, #0
 8009c18:	690f      	ldr	r7, [r1, #16]
 8009c1a:	3614      	adds	r6, #20
 8009c1c:	6833      	ldr	r3, [r6, #0]
 8009c1e:	3001      	adds	r0, #1
 8009c20:	b299      	uxth	r1, r3
 8009c22:	4351      	muls	r1, r2
 8009c24:	0c1b      	lsrs	r3, r3, #16
 8009c26:	4353      	muls	r3, r2
 8009c28:	1949      	adds	r1, r1, r5
 8009c2a:	0c0d      	lsrs	r5, r1, #16
 8009c2c:	195b      	adds	r3, r3, r5
 8009c2e:	0c1d      	lsrs	r5, r3, #16
 8009c30:	b289      	uxth	r1, r1
 8009c32:	041b      	lsls	r3, r3, #16
 8009c34:	185b      	adds	r3, r3, r1
 8009c36:	c608      	stmia	r6!, {r3}
 8009c38:	4287      	cmp	r7, r0
 8009c3a:	dcef      	bgt.n	8009c1c <__multadd+0x10>
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	d022      	beq.n	8009c86 <__multadd+0x7a>
 8009c40:	68a3      	ldr	r3, [r4, #8]
 8009c42:	42bb      	cmp	r3, r7
 8009c44:	dc19      	bgt.n	8009c7a <__multadd+0x6e>
 8009c46:	6863      	ldr	r3, [r4, #4]
 8009c48:	9801      	ldr	r0, [sp, #4]
 8009c4a:	1c59      	adds	r1, r3, #1
 8009c4c:	f7ff ff76 	bl	8009b3c <_Balloc>
 8009c50:	1e06      	subs	r6, r0, #0
 8009c52:	d105      	bne.n	8009c60 <__multadd+0x54>
 8009c54:	0002      	movs	r2, r0
 8009c56:	21b5      	movs	r1, #181	; 0xb5
 8009c58:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <__multadd+0x80>)
 8009c5a:	480d      	ldr	r0, [pc, #52]	; (8009c90 <__multadd+0x84>)
 8009c5c:	f000 fd8c 	bl	800a778 <__assert_func>
 8009c60:	0021      	movs	r1, r4
 8009c62:	6923      	ldr	r3, [r4, #16]
 8009c64:	310c      	adds	r1, #12
 8009c66:	1c9a      	adds	r2, r3, #2
 8009c68:	0092      	lsls	r2, r2, #2
 8009c6a:	300c      	adds	r0, #12
 8009c6c:	f7fe fc06 	bl	800847c <memcpy>
 8009c70:	0021      	movs	r1, r4
 8009c72:	9801      	ldr	r0, [sp, #4]
 8009c74:	f7ff ffa6 	bl	8009bc4 <_Bfree>
 8009c78:	0034      	movs	r4, r6
 8009c7a:	1d3b      	adds	r3, r7, #4
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	18e3      	adds	r3, r4, r3
 8009c80:	605d      	str	r5, [r3, #4]
 8009c82:	1c7b      	adds	r3, r7, #1
 8009c84:	6123      	str	r3, [r4, #16]
 8009c86:	0020      	movs	r0, r4
 8009c88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c8a:	46c0      	nop			; (mov r8, r8)
 8009c8c:	0800b6c7 	.word	0x0800b6c7
 8009c90:	0800b6d8 	.word	0x0800b6d8

08009c94 <__hi0bits>:
 8009c94:	0003      	movs	r3, r0
 8009c96:	0c02      	lsrs	r2, r0, #16
 8009c98:	2000      	movs	r0, #0
 8009c9a:	4282      	cmp	r2, r0
 8009c9c:	d101      	bne.n	8009ca2 <__hi0bits+0xe>
 8009c9e:	041b      	lsls	r3, r3, #16
 8009ca0:	3010      	adds	r0, #16
 8009ca2:	0e1a      	lsrs	r2, r3, #24
 8009ca4:	d101      	bne.n	8009caa <__hi0bits+0x16>
 8009ca6:	3008      	adds	r0, #8
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	0f1a      	lsrs	r2, r3, #28
 8009cac:	d101      	bne.n	8009cb2 <__hi0bits+0x1e>
 8009cae:	3004      	adds	r0, #4
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	0f9a      	lsrs	r2, r3, #30
 8009cb4:	d101      	bne.n	8009cba <__hi0bits+0x26>
 8009cb6:	3002      	adds	r0, #2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	db03      	blt.n	8009cc6 <__hi0bits+0x32>
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	d400      	bmi.n	8009cc6 <__hi0bits+0x32>
 8009cc4:	2020      	movs	r0, #32
 8009cc6:	4770      	bx	lr

08009cc8 <__lo0bits>:
 8009cc8:	6803      	ldr	r3, [r0, #0]
 8009cca:	0002      	movs	r2, r0
 8009ccc:	2107      	movs	r1, #7
 8009cce:	0018      	movs	r0, r3
 8009cd0:	4008      	ands	r0, r1
 8009cd2:	420b      	tst	r3, r1
 8009cd4:	d00d      	beq.n	8009cf2 <__lo0bits+0x2a>
 8009cd6:	3906      	subs	r1, #6
 8009cd8:	2000      	movs	r0, #0
 8009cda:	420b      	tst	r3, r1
 8009cdc:	d105      	bne.n	8009cea <__lo0bits+0x22>
 8009cde:	3002      	adds	r0, #2
 8009ce0:	4203      	tst	r3, r0
 8009ce2:	d003      	beq.n	8009cec <__lo0bits+0x24>
 8009ce4:	40cb      	lsrs	r3, r1
 8009ce6:	0008      	movs	r0, r1
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	4770      	bx	lr
 8009cec:	089b      	lsrs	r3, r3, #2
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	e7fb      	b.n	8009cea <__lo0bits+0x22>
 8009cf2:	b299      	uxth	r1, r3
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	d101      	bne.n	8009cfc <__lo0bits+0x34>
 8009cf8:	2010      	movs	r0, #16
 8009cfa:	0c1b      	lsrs	r3, r3, #16
 8009cfc:	b2d9      	uxtb	r1, r3
 8009cfe:	2900      	cmp	r1, #0
 8009d00:	d101      	bne.n	8009d06 <__lo0bits+0x3e>
 8009d02:	3008      	adds	r0, #8
 8009d04:	0a1b      	lsrs	r3, r3, #8
 8009d06:	0719      	lsls	r1, r3, #28
 8009d08:	d101      	bne.n	8009d0e <__lo0bits+0x46>
 8009d0a:	3004      	adds	r0, #4
 8009d0c:	091b      	lsrs	r3, r3, #4
 8009d0e:	0799      	lsls	r1, r3, #30
 8009d10:	d101      	bne.n	8009d16 <__lo0bits+0x4e>
 8009d12:	3002      	adds	r0, #2
 8009d14:	089b      	lsrs	r3, r3, #2
 8009d16:	07d9      	lsls	r1, r3, #31
 8009d18:	d4e9      	bmi.n	8009cee <__lo0bits+0x26>
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	085b      	lsrs	r3, r3, #1
 8009d1e:	d1e6      	bne.n	8009cee <__lo0bits+0x26>
 8009d20:	2020      	movs	r0, #32
 8009d22:	e7e2      	b.n	8009cea <__lo0bits+0x22>

08009d24 <__i2b>:
 8009d24:	b510      	push	{r4, lr}
 8009d26:	000c      	movs	r4, r1
 8009d28:	2101      	movs	r1, #1
 8009d2a:	f7ff ff07 	bl	8009b3c <_Balloc>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d106      	bne.n	8009d40 <__i2b+0x1c>
 8009d32:	21a0      	movs	r1, #160	; 0xa0
 8009d34:	0002      	movs	r2, r0
 8009d36:	4b04      	ldr	r3, [pc, #16]	; (8009d48 <__i2b+0x24>)
 8009d38:	4804      	ldr	r0, [pc, #16]	; (8009d4c <__i2b+0x28>)
 8009d3a:	0049      	lsls	r1, r1, #1
 8009d3c:	f000 fd1c 	bl	800a778 <__assert_func>
 8009d40:	2301      	movs	r3, #1
 8009d42:	6144      	str	r4, [r0, #20]
 8009d44:	6103      	str	r3, [r0, #16]
 8009d46:	bd10      	pop	{r4, pc}
 8009d48:	0800b6c7 	.word	0x0800b6c7
 8009d4c:	0800b6d8 	.word	0x0800b6d8

08009d50 <__multiply>:
 8009d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d52:	690b      	ldr	r3, [r1, #16]
 8009d54:	0014      	movs	r4, r2
 8009d56:	6912      	ldr	r2, [r2, #16]
 8009d58:	000d      	movs	r5, r1
 8009d5a:	b089      	sub	sp, #36	; 0x24
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	da01      	bge.n	8009d64 <__multiply+0x14>
 8009d60:	0025      	movs	r5, r4
 8009d62:	000c      	movs	r4, r1
 8009d64:	692f      	ldr	r7, [r5, #16]
 8009d66:	6926      	ldr	r6, [r4, #16]
 8009d68:	6869      	ldr	r1, [r5, #4]
 8009d6a:	19bb      	adds	r3, r7, r6
 8009d6c:	9302      	str	r3, [sp, #8]
 8009d6e:	68ab      	ldr	r3, [r5, #8]
 8009d70:	19ba      	adds	r2, r7, r6
 8009d72:	4293      	cmp	r3, r2
 8009d74:	da00      	bge.n	8009d78 <__multiply+0x28>
 8009d76:	3101      	adds	r1, #1
 8009d78:	f7ff fee0 	bl	8009b3c <_Balloc>
 8009d7c:	9001      	str	r0, [sp, #4]
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d106      	bne.n	8009d90 <__multiply+0x40>
 8009d82:	215e      	movs	r1, #94	; 0x5e
 8009d84:	0002      	movs	r2, r0
 8009d86:	4b48      	ldr	r3, [pc, #288]	; (8009ea8 <__multiply+0x158>)
 8009d88:	4848      	ldr	r0, [pc, #288]	; (8009eac <__multiply+0x15c>)
 8009d8a:	31ff      	adds	r1, #255	; 0xff
 8009d8c:	f000 fcf4 	bl	800a778 <__assert_func>
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	3314      	adds	r3, #20
 8009d96:	469c      	mov	ip, r3
 8009d98:	19bb      	adds	r3, r7, r6
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4463      	add	r3, ip
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	4663      	mov	r3, ip
 8009da2:	9903      	ldr	r1, [sp, #12]
 8009da4:	428b      	cmp	r3, r1
 8009da6:	d32c      	bcc.n	8009e02 <__multiply+0xb2>
 8009da8:	002b      	movs	r3, r5
 8009daa:	0022      	movs	r2, r4
 8009dac:	3314      	adds	r3, #20
 8009dae:	00bf      	lsls	r7, r7, #2
 8009db0:	3214      	adds	r2, #20
 8009db2:	9306      	str	r3, [sp, #24]
 8009db4:	00b6      	lsls	r6, r6, #2
 8009db6:	19db      	adds	r3, r3, r7
 8009db8:	9304      	str	r3, [sp, #16]
 8009dba:	1993      	adds	r3, r2, r6
 8009dbc:	9307      	str	r3, [sp, #28]
 8009dbe:	2304      	movs	r3, #4
 8009dc0:	9305      	str	r3, [sp, #20]
 8009dc2:	002b      	movs	r3, r5
 8009dc4:	9904      	ldr	r1, [sp, #16]
 8009dc6:	3315      	adds	r3, #21
 8009dc8:	9200      	str	r2, [sp, #0]
 8009dca:	4299      	cmp	r1, r3
 8009dcc:	d305      	bcc.n	8009dda <__multiply+0x8a>
 8009dce:	1b4b      	subs	r3, r1, r5
 8009dd0:	3b15      	subs	r3, #21
 8009dd2:	089b      	lsrs	r3, r3, #2
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	9305      	str	r3, [sp, #20]
 8009dda:	9b07      	ldr	r3, [sp, #28]
 8009ddc:	9a00      	ldr	r2, [sp, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d311      	bcc.n	8009e06 <__multiply+0xb6>
 8009de2:	9b02      	ldr	r3, [sp, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	dd06      	ble.n	8009df6 <__multiply+0xa6>
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	3b04      	subs	r3, #4
 8009dec:	9303      	str	r3, [sp, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d053      	beq.n	8009e9e <__multiply+0x14e>
 8009df6:	9b01      	ldr	r3, [sp, #4]
 8009df8:	9a02      	ldr	r2, [sp, #8]
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	611a      	str	r2, [r3, #16]
 8009dfe:	b009      	add	sp, #36	; 0x24
 8009e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e02:	c304      	stmia	r3!, {r2}
 8009e04:	e7cd      	b.n	8009da2 <__multiply+0x52>
 8009e06:	9b00      	ldr	r3, [sp, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	b298      	uxth	r0, r3
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d01b      	beq.n	8009e48 <__multiply+0xf8>
 8009e10:	4667      	mov	r7, ip
 8009e12:	2400      	movs	r4, #0
 8009e14:	9e06      	ldr	r6, [sp, #24]
 8009e16:	ce02      	ldmia	r6!, {r1}
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	b28b      	uxth	r3, r1
 8009e1c:	4343      	muls	r3, r0
 8009e1e:	b292      	uxth	r2, r2
 8009e20:	189b      	adds	r3, r3, r2
 8009e22:	191b      	adds	r3, r3, r4
 8009e24:	0c0c      	lsrs	r4, r1, #16
 8009e26:	4344      	muls	r4, r0
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	0c11      	lsrs	r1, r2, #16
 8009e2c:	1861      	adds	r1, r4, r1
 8009e2e:	0c1c      	lsrs	r4, r3, #16
 8009e30:	1909      	adds	r1, r1, r4
 8009e32:	0c0c      	lsrs	r4, r1, #16
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	0409      	lsls	r1, r1, #16
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	c708      	stmia	r7!, {r3}
 8009e3c:	9b04      	ldr	r3, [sp, #16]
 8009e3e:	42b3      	cmp	r3, r6
 8009e40:	d8e9      	bhi.n	8009e16 <__multiply+0xc6>
 8009e42:	4663      	mov	r3, ip
 8009e44:	9a05      	ldr	r2, [sp, #20]
 8009e46:	509c      	str	r4, [r3, r2]
 8009e48:	9b00      	ldr	r3, [sp, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	0c1e      	lsrs	r6, r3, #16
 8009e4e:	d020      	beq.n	8009e92 <__multiply+0x142>
 8009e50:	4663      	mov	r3, ip
 8009e52:	002c      	movs	r4, r5
 8009e54:	4660      	mov	r0, ip
 8009e56:	2700      	movs	r7, #0
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3414      	adds	r4, #20
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	b291      	uxth	r1, r2
 8009e62:	4371      	muls	r1, r6
 8009e64:	6802      	ldr	r2, [r0, #0]
 8009e66:	0c12      	lsrs	r2, r2, #16
 8009e68:	1889      	adds	r1, r1, r2
 8009e6a:	19cf      	adds	r7, r1, r7
 8009e6c:	0439      	lsls	r1, r7, #16
 8009e6e:	430b      	orrs	r3, r1
 8009e70:	6003      	str	r3, [r0, #0]
 8009e72:	cc02      	ldmia	r4!, {r1}
 8009e74:	6843      	ldr	r3, [r0, #4]
 8009e76:	0c09      	lsrs	r1, r1, #16
 8009e78:	4371      	muls	r1, r6
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	0c3f      	lsrs	r7, r7, #16
 8009e7e:	18cb      	adds	r3, r1, r3
 8009e80:	9a04      	ldr	r2, [sp, #16]
 8009e82:	19db      	adds	r3, r3, r7
 8009e84:	0c1f      	lsrs	r7, r3, #16
 8009e86:	3004      	adds	r0, #4
 8009e88:	42a2      	cmp	r2, r4
 8009e8a:	d8e7      	bhi.n	8009e5c <__multiply+0x10c>
 8009e8c:	4662      	mov	r2, ip
 8009e8e:	9905      	ldr	r1, [sp, #20]
 8009e90:	5053      	str	r3, [r2, r1]
 8009e92:	9b00      	ldr	r3, [sp, #0]
 8009e94:	3304      	adds	r3, #4
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	2304      	movs	r3, #4
 8009e9a:	449c      	add	ip, r3
 8009e9c:	e79d      	b.n	8009dda <__multiply+0x8a>
 8009e9e:	9b02      	ldr	r3, [sp, #8]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	9302      	str	r3, [sp, #8]
 8009ea4:	e79d      	b.n	8009de2 <__multiply+0x92>
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	0800b6c7 	.word	0x0800b6c7
 8009eac:	0800b6d8 	.word	0x0800b6d8

08009eb0 <__pow5mult>:
 8009eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	0015      	movs	r5, r2
 8009eb6:	0007      	movs	r7, r0
 8009eb8:	000e      	movs	r6, r1
 8009eba:	401a      	ands	r2, r3
 8009ebc:	421d      	tst	r5, r3
 8009ebe:	d008      	beq.n	8009ed2 <__pow5mult+0x22>
 8009ec0:	4925      	ldr	r1, [pc, #148]	; (8009f58 <__pow5mult+0xa8>)
 8009ec2:	3a01      	subs	r2, #1
 8009ec4:	0092      	lsls	r2, r2, #2
 8009ec6:	5852      	ldr	r2, [r2, r1]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	0031      	movs	r1, r6
 8009ecc:	f7ff fe9e 	bl	8009c0c <__multadd>
 8009ed0:	0006      	movs	r6, r0
 8009ed2:	10ad      	asrs	r5, r5, #2
 8009ed4:	d03d      	beq.n	8009f52 <__pow5mult+0xa2>
 8009ed6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009ed8:	2c00      	cmp	r4, #0
 8009eda:	d10f      	bne.n	8009efc <__pow5mult+0x4c>
 8009edc:	2010      	movs	r0, #16
 8009ede:	f7ff fe17 	bl	8009b10 <malloc>
 8009ee2:	1e02      	subs	r2, r0, #0
 8009ee4:	6278      	str	r0, [r7, #36]	; 0x24
 8009ee6:	d105      	bne.n	8009ef4 <__pow5mult+0x44>
 8009ee8:	21d7      	movs	r1, #215	; 0xd7
 8009eea:	4b1c      	ldr	r3, [pc, #112]	; (8009f5c <__pow5mult+0xac>)
 8009eec:	481c      	ldr	r0, [pc, #112]	; (8009f60 <__pow5mult+0xb0>)
 8009eee:	0049      	lsls	r1, r1, #1
 8009ef0:	f000 fc42 	bl	800a778 <__assert_func>
 8009ef4:	6044      	str	r4, [r0, #4]
 8009ef6:	6084      	str	r4, [r0, #8]
 8009ef8:	6004      	str	r4, [r0, #0]
 8009efa:	60c4      	str	r4, [r0, #12]
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	689c      	ldr	r4, [r3, #8]
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	2c00      	cmp	r4, #0
 8009f04:	d108      	bne.n	8009f18 <__pow5mult+0x68>
 8009f06:	0038      	movs	r0, r7
 8009f08:	4916      	ldr	r1, [pc, #88]	; (8009f64 <__pow5mult+0xb4>)
 8009f0a:	f7ff ff0b 	bl	8009d24 <__i2b>
 8009f0e:	9b01      	ldr	r3, [sp, #4]
 8009f10:	0004      	movs	r4, r0
 8009f12:	6098      	str	r0, [r3, #8]
 8009f14:	2300      	movs	r3, #0
 8009f16:	6003      	str	r3, [r0, #0]
 8009f18:	2301      	movs	r3, #1
 8009f1a:	421d      	tst	r5, r3
 8009f1c:	d00a      	beq.n	8009f34 <__pow5mult+0x84>
 8009f1e:	0031      	movs	r1, r6
 8009f20:	0022      	movs	r2, r4
 8009f22:	0038      	movs	r0, r7
 8009f24:	f7ff ff14 	bl	8009d50 <__multiply>
 8009f28:	0031      	movs	r1, r6
 8009f2a:	9001      	str	r0, [sp, #4]
 8009f2c:	0038      	movs	r0, r7
 8009f2e:	f7ff fe49 	bl	8009bc4 <_Bfree>
 8009f32:	9e01      	ldr	r6, [sp, #4]
 8009f34:	106d      	asrs	r5, r5, #1
 8009f36:	d00c      	beq.n	8009f52 <__pow5mult+0xa2>
 8009f38:	6820      	ldr	r0, [r4, #0]
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d107      	bne.n	8009f4e <__pow5mult+0x9e>
 8009f3e:	0022      	movs	r2, r4
 8009f40:	0021      	movs	r1, r4
 8009f42:	0038      	movs	r0, r7
 8009f44:	f7ff ff04 	bl	8009d50 <__multiply>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	6020      	str	r0, [r4, #0]
 8009f4c:	6003      	str	r3, [r0, #0]
 8009f4e:	0004      	movs	r4, r0
 8009f50:	e7e2      	b.n	8009f18 <__pow5mult+0x68>
 8009f52:	0030      	movs	r0, r6
 8009f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f56:	46c0      	nop			; (mov r8, r8)
 8009f58:	0800b828 	.word	0x0800b828
 8009f5c:	0800b655 	.word	0x0800b655
 8009f60:	0800b6d8 	.word	0x0800b6d8
 8009f64:	00000271 	.word	0x00000271

08009f68 <__lshift>:
 8009f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f6a:	000c      	movs	r4, r1
 8009f6c:	0017      	movs	r7, r2
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	1155      	asrs	r5, r2, #5
 8009f72:	b087      	sub	sp, #28
 8009f74:	18eb      	adds	r3, r5, r3
 8009f76:	9302      	str	r3, [sp, #8]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	6849      	ldr	r1, [r1, #4]
 8009f7e:	68a3      	ldr	r3, [r4, #8]
 8009f80:	9004      	str	r0, [sp, #16]
 8009f82:	9a01      	ldr	r2, [sp, #4]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	db10      	blt.n	8009faa <__lshift+0x42>
 8009f88:	9804      	ldr	r0, [sp, #16]
 8009f8a:	f7ff fdd7 	bl	8009b3c <_Balloc>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	0002      	movs	r2, r0
 8009f92:	0006      	movs	r6, r0
 8009f94:	0019      	movs	r1, r3
 8009f96:	3214      	adds	r2, #20
 8009f98:	4298      	cmp	r0, r3
 8009f9a:	d10c      	bne.n	8009fb6 <__lshift+0x4e>
 8009f9c:	21da      	movs	r1, #218	; 0xda
 8009f9e:	0002      	movs	r2, r0
 8009fa0:	4b26      	ldr	r3, [pc, #152]	; (800a03c <__lshift+0xd4>)
 8009fa2:	4827      	ldr	r0, [pc, #156]	; (800a040 <__lshift+0xd8>)
 8009fa4:	31ff      	adds	r1, #255	; 0xff
 8009fa6:	f000 fbe7 	bl	800a778 <__assert_func>
 8009faa:	3101      	adds	r1, #1
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	e7e8      	b.n	8009f82 <__lshift+0x1a>
 8009fb0:	0098      	lsls	r0, r3, #2
 8009fb2:	5011      	str	r1, [r2, r0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	42ab      	cmp	r3, r5
 8009fb8:	dbfa      	blt.n	8009fb0 <__lshift+0x48>
 8009fba:	43eb      	mvns	r3, r5
 8009fbc:	17db      	asrs	r3, r3, #31
 8009fbe:	401d      	ands	r5, r3
 8009fc0:	211f      	movs	r1, #31
 8009fc2:	0023      	movs	r3, r4
 8009fc4:	0038      	movs	r0, r7
 8009fc6:	00ad      	lsls	r5, r5, #2
 8009fc8:	1955      	adds	r5, r2, r5
 8009fca:	6922      	ldr	r2, [r4, #16]
 8009fcc:	3314      	adds	r3, #20
 8009fce:	0092      	lsls	r2, r2, #2
 8009fd0:	4008      	ands	r0, r1
 8009fd2:	4684      	mov	ip, r0
 8009fd4:	189a      	adds	r2, r3, r2
 8009fd6:	420f      	tst	r7, r1
 8009fd8:	d02a      	beq.n	800a030 <__lshift+0xc8>
 8009fda:	3101      	adds	r1, #1
 8009fdc:	1a09      	subs	r1, r1, r0
 8009fde:	9105      	str	r1, [sp, #20]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	9503      	str	r5, [sp, #12]
 8009fe4:	4667      	mov	r7, ip
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	40b8      	lsls	r0, r7
 8009fea:	4301      	orrs	r1, r0
 8009fec:	9803      	ldr	r0, [sp, #12]
 8009fee:	c002      	stmia	r0!, {r1}
 8009ff0:	cb02      	ldmia	r3!, {r1}
 8009ff2:	9003      	str	r0, [sp, #12]
 8009ff4:	9805      	ldr	r0, [sp, #20]
 8009ff6:	40c1      	lsrs	r1, r0
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d8f3      	bhi.n	8009fe4 <__lshift+0x7c>
 8009ffc:	0020      	movs	r0, r4
 8009ffe:	3015      	adds	r0, #21
 800a000:	2304      	movs	r3, #4
 800a002:	4282      	cmp	r2, r0
 800a004:	d304      	bcc.n	800a010 <__lshift+0xa8>
 800a006:	1b13      	subs	r3, r2, r4
 800a008:	3b15      	subs	r3, #21
 800a00a:	089b      	lsrs	r3, r3, #2
 800a00c:	3301      	adds	r3, #1
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	50e9      	str	r1, [r5, r3]
 800a012:	2900      	cmp	r1, #0
 800a014:	d002      	beq.n	800a01c <__lshift+0xb4>
 800a016:	9b02      	ldr	r3, [sp, #8]
 800a018:	3302      	adds	r3, #2
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	9b01      	ldr	r3, [sp, #4]
 800a01e:	9804      	ldr	r0, [sp, #16]
 800a020:	3b01      	subs	r3, #1
 800a022:	0021      	movs	r1, r4
 800a024:	6133      	str	r3, [r6, #16]
 800a026:	f7ff fdcd 	bl	8009bc4 <_Bfree>
 800a02a:	0030      	movs	r0, r6
 800a02c:	b007      	add	sp, #28
 800a02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a030:	cb02      	ldmia	r3!, {r1}
 800a032:	c502      	stmia	r5!, {r1}
 800a034:	429a      	cmp	r2, r3
 800a036:	d8fb      	bhi.n	800a030 <__lshift+0xc8>
 800a038:	e7f0      	b.n	800a01c <__lshift+0xb4>
 800a03a:	46c0      	nop			; (mov r8, r8)
 800a03c:	0800b6c7 	.word	0x0800b6c7
 800a040:	0800b6d8 	.word	0x0800b6d8

0800a044 <__mcmp>:
 800a044:	6902      	ldr	r2, [r0, #16]
 800a046:	690b      	ldr	r3, [r1, #16]
 800a048:	b530      	push	{r4, r5, lr}
 800a04a:	0004      	movs	r4, r0
 800a04c:	1ad0      	subs	r0, r2, r3
 800a04e:	429a      	cmp	r2, r3
 800a050:	d10d      	bne.n	800a06e <__mcmp+0x2a>
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	3414      	adds	r4, #20
 800a056:	3114      	adds	r1, #20
 800a058:	18e2      	adds	r2, r4, r3
 800a05a:	18c9      	adds	r1, r1, r3
 800a05c:	3a04      	subs	r2, #4
 800a05e:	3904      	subs	r1, #4
 800a060:	6815      	ldr	r5, [r2, #0]
 800a062:	680b      	ldr	r3, [r1, #0]
 800a064:	429d      	cmp	r5, r3
 800a066:	d003      	beq.n	800a070 <__mcmp+0x2c>
 800a068:	2001      	movs	r0, #1
 800a06a:	429d      	cmp	r5, r3
 800a06c:	d303      	bcc.n	800a076 <__mcmp+0x32>
 800a06e:	bd30      	pop	{r4, r5, pc}
 800a070:	4294      	cmp	r4, r2
 800a072:	d3f3      	bcc.n	800a05c <__mcmp+0x18>
 800a074:	e7fb      	b.n	800a06e <__mcmp+0x2a>
 800a076:	4240      	negs	r0, r0
 800a078:	e7f9      	b.n	800a06e <__mcmp+0x2a>
	...

0800a07c <__mdiff>:
 800a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07e:	000e      	movs	r6, r1
 800a080:	0007      	movs	r7, r0
 800a082:	0011      	movs	r1, r2
 800a084:	0030      	movs	r0, r6
 800a086:	b087      	sub	sp, #28
 800a088:	0014      	movs	r4, r2
 800a08a:	f7ff ffdb 	bl	800a044 <__mcmp>
 800a08e:	1e05      	subs	r5, r0, #0
 800a090:	d110      	bne.n	800a0b4 <__mdiff+0x38>
 800a092:	0001      	movs	r1, r0
 800a094:	0038      	movs	r0, r7
 800a096:	f7ff fd51 	bl	8009b3c <_Balloc>
 800a09a:	1e02      	subs	r2, r0, #0
 800a09c:	d104      	bne.n	800a0a8 <__mdiff+0x2c>
 800a09e:	4b40      	ldr	r3, [pc, #256]	; (800a1a0 <__mdiff+0x124>)
 800a0a0:	4940      	ldr	r1, [pc, #256]	; (800a1a4 <__mdiff+0x128>)
 800a0a2:	4841      	ldr	r0, [pc, #260]	; (800a1a8 <__mdiff+0x12c>)
 800a0a4:	f000 fb68 	bl	800a778 <__assert_func>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	6145      	str	r5, [r0, #20]
 800a0ac:	6103      	str	r3, [r0, #16]
 800a0ae:	0010      	movs	r0, r2
 800a0b0:	b007      	add	sp, #28
 800a0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	db04      	blt.n	800a0c6 <__mdiff+0x4a>
 800a0bc:	0023      	movs	r3, r4
 800a0be:	0034      	movs	r4, r6
 800a0c0:	001e      	movs	r6, r3
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	0038      	movs	r0, r7
 800a0c8:	6861      	ldr	r1, [r4, #4]
 800a0ca:	f7ff fd37 	bl	8009b3c <_Balloc>
 800a0ce:	1e02      	subs	r2, r0, #0
 800a0d0:	d103      	bne.n	800a0da <__mdiff+0x5e>
 800a0d2:	2190      	movs	r1, #144	; 0x90
 800a0d4:	4b32      	ldr	r3, [pc, #200]	; (800a1a0 <__mdiff+0x124>)
 800a0d6:	0089      	lsls	r1, r1, #2
 800a0d8:	e7e3      	b.n	800a0a2 <__mdiff+0x26>
 800a0da:	9b01      	ldr	r3, [sp, #4]
 800a0dc:	2700      	movs	r7, #0
 800a0de:	60c3      	str	r3, [r0, #12]
 800a0e0:	6920      	ldr	r0, [r4, #16]
 800a0e2:	3414      	adds	r4, #20
 800a0e4:	9401      	str	r4, [sp, #4]
 800a0e6:	9b01      	ldr	r3, [sp, #4]
 800a0e8:	0084      	lsls	r4, r0, #2
 800a0ea:	191b      	adds	r3, r3, r4
 800a0ec:	0034      	movs	r4, r6
 800a0ee:	9302      	str	r3, [sp, #8]
 800a0f0:	6933      	ldr	r3, [r6, #16]
 800a0f2:	3414      	adds	r4, #20
 800a0f4:	0099      	lsls	r1, r3, #2
 800a0f6:	1863      	adds	r3, r4, r1
 800a0f8:	9303      	str	r3, [sp, #12]
 800a0fa:	0013      	movs	r3, r2
 800a0fc:	3314      	adds	r3, #20
 800a0fe:	469c      	mov	ip, r3
 800a100:	9305      	str	r3, [sp, #20]
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	9304      	str	r3, [sp, #16]
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	cc02      	ldmia	r4!, {r1}
 800a10a:	cb20      	ldmia	r3!, {r5}
 800a10c:	9304      	str	r3, [sp, #16]
 800a10e:	b2ab      	uxth	r3, r5
 800a110:	19df      	adds	r7, r3, r7
 800a112:	b28b      	uxth	r3, r1
 800a114:	1afb      	subs	r3, r7, r3
 800a116:	0c09      	lsrs	r1, r1, #16
 800a118:	0c2d      	lsrs	r5, r5, #16
 800a11a:	1a6d      	subs	r5, r5, r1
 800a11c:	1419      	asrs	r1, r3, #16
 800a11e:	186d      	adds	r5, r5, r1
 800a120:	4661      	mov	r1, ip
 800a122:	142f      	asrs	r7, r5, #16
 800a124:	b29b      	uxth	r3, r3
 800a126:	042d      	lsls	r5, r5, #16
 800a128:	432b      	orrs	r3, r5
 800a12a:	c108      	stmia	r1!, {r3}
 800a12c:	9b03      	ldr	r3, [sp, #12]
 800a12e:	468c      	mov	ip, r1
 800a130:	42a3      	cmp	r3, r4
 800a132:	d8e8      	bhi.n	800a106 <__mdiff+0x8a>
 800a134:	0031      	movs	r1, r6
 800a136:	9c03      	ldr	r4, [sp, #12]
 800a138:	3115      	adds	r1, #21
 800a13a:	2304      	movs	r3, #4
 800a13c:	428c      	cmp	r4, r1
 800a13e:	d304      	bcc.n	800a14a <__mdiff+0xce>
 800a140:	1ba3      	subs	r3, r4, r6
 800a142:	3b15      	subs	r3, #21
 800a144:	089b      	lsrs	r3, r3, #2
 800a146:	3301      	adds	r3, #1
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	9901      	ldr	r1, [sp, #4]
 800a14c:	18cc      	adds	r4, r1, r3
 800a14e:	9905      	ldr	r1, [sp, #20]
 800a150:	0026      	movs	r6, r4
 800a152:	18cb      	adds	r3, r1, r3
 800a154:	469c      	mov	ip, r3
 800a156:	9902      	ldr	r1, [sp, #8]
 800a158:	428e      	cmp	r6, r1
 800a15a:	d310      	bcc.n	800a17e <__mdiff+0x102>
 800a15c:	9e02      	ldr	r6, [sp, #8]
 800a15e:	1ee1      	subs	r1, r4, #3
 800a160:	2500      	movs	r5, #0
 800a162:	428e      	cmp	r6, r1
 800a164:	d304      	bcc.n	800a170 <__mdiff+0xf4>
 800a166:	0031      	movs	r1, r6
 800a168:	3103      	adds	r1, #3
 800a16a:	1b0c      	subs	r4, r1, r4
 800a16c:	08a4      	lsrs	r4, r4, #2
 800a16e:	00a5      	lsls	r5, r4, #2
 800a170:	195b      	adds	r3, r3, r5
 800a172:	3b04      	subs	r3, #4
 800a174:	6819      	ldr	r1, [r3, #0]
 800a176:	2900      	cmp	r1, #0
 800a178:	d00f      	beq.n	800a19a <__mdiff+0x11e>
 800a17a:	6110      	str	r0, [r2, #16]
 800a17c:	e797      	b.n	800a0ae <__mdiff+0x32>
 800a17e:	ce02      	ldmia	r6!, {r1}
 800a180:	b28d      	uxth	r5, r1
 800a182:	19ed      	adds	r5, r5, r7
 800a184:	0c0f      	lsrs	r7, r1, #16
 800a186:	1429      	asrs	r1, r5, #16
 800a188:	1879      	adds	r1, r7, r1
 800a18a:	140f      	asrs	r7, r1, #16
 800a18c:	b2ad      	uxth	r5, r5
 800a18e:	0409      	lsls	r1, r1, #16
 800a190:	430d      	orrs	r5, r1
 800a192:	4661      	mov	r1, ip
 800a194:	c120      	stmia	r1!, {r5}
 800a196:	468c      	mov	ip, r1
 800a198:	e7dd      	b.n	800a156 <__mdiff+0xda>
 800a19a:	3801      	subs	r0, #1
 800a19c:	e7e9      	b.n	800a172 <__mdiff+0xf6>
 800a19e:	46c0      	nop			; (mov r8, r8)
 800a1a0:	0800b6c7 	.word	0x0800b6c7
 800a1a4:	00000232 	.word	0x00000232
 800a1a8:	0800b6d8 	.word	0x0800b6d8

0800a1ac <__d2b>:
 800a1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	0014      	movs	r4, r2
 800a1b2:	001e      	movs	r6, r3
 800a1b4:	9f08      	ldr	r7, [sp, #32]
 800a1b6:	f7ff fcc1 	bl	8009b3c <_Balloc>
 800a1ba:	1e05      	subs	r5, r0, #0
 800a1bc:	d105      	bne.n	800a1ca <__d2b+0x1e>
 800a1be:	0002      	movs	r2, r0
 800a1c0:	4b26      	ldr	r3, [pc, #152]	; (800a25c <__d2b+0xb0>)
 800a1c2:	4927      	ldr	r1, [pc, #156]	; (800a260 <__d2b+0xb4>)
 800a1c4:	4827      	ldr	r0, [pc, #156]	; (800a264 <__d2b+0xb8>)
 800a1c6:	f000 fad7 	bl	800a778 <__assert_func>
 800a1ca:	0333      	lsls	r3, r6, #12
 800a1cc:	0076      	lsls	r6, r6, #1
 800a1ce:	0b1b      	lsrs	r3, r3, #12
 800a1d0:	0d76      	lsrs	r6, r6, #21
 800a1d2:	d124      	bne.n	800a21e <__d2b+0x72>
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	2c00      	cmp	r4, #0
 800a1d8:	d027      	beq.n	800a22a <__d2b+0x7e>
 800a1da:	4668      	mov	r0, sp
 800a1dc:	9400      	str	r4, [sp, #0]
 800a1de:	f7ff fd73 	bl	8009cc8 <__lo0bits>
 800a1e2:	9c00      	ldr	r4, [sp, #0]
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d01e      	beq.n	800a226 <__d2b+0x7a>
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	2120      	movs	r1, #32
 800a1ec:	001a      	movs	r2, r3
 800a1ee:	1a09      	subs	r1, r1, r0
 800a1f0:	408a      	lsls	r2, r1
 800a1f2:	40c3      	lsrs	r3, r0
 800a1f4:	4322      	orrs	r2, r4
 800a1f6:	616a      	str	r2, [r5, #20]
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	9c01      	ldr	r4, [sp, #4]
 800a1fc:	61ac      	str	r4, [r5, #24]
 800a1fe:	1e63      	subs	r3, r4, #1
 800a200:	419c      	sbcs	r4, r3
 800a202:	3401      	adds	r4, #1
 800a204:	612c      	str	r4, [r5, #16]
 800a206:	2e00      	cmp	r6, #0
 800a208:	d018      	beq.n	800a23c <__d2b+0x90>
 800a20a:	4b17      	ldr	r3, [pc, #92]	; (800a268 <__d2b+0xbc>)
 800a20c:	18f6      	adds	r6, r6, r3
 800a20e:	2335      	movs	r3, #53	; 0x35
 800a210:	1836      	adds	r6, r6, r0
 800a212:	1a18      	subs	r0, r3, r0
 800a214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a216:	603e      	str	r6, [r7, #0]
 800a218:	6018      	str	r0, [r3, #0]
 800a21a:	0028      	movs	r0, r5
 800a21c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a21e:	2280      	movs	r2, #128	; 0x80
 800a220:	0352      	lsls	r2, r2, #13
 800a222:	4313      	orrs	r3, r2
 800a224:	e7d6      	b.n	800a1d4 <__d2b+0x28>
 800a226:	616c      	str	r4, [r5, #20]
 800a228:	e7e7      	b.n	800a1fa <__d2b+0x4e>
 800a22a:	a801      	add	r0, sp, #4
 800a22c:	f7ff fd4c 	bl	8009cc8 <__lo0bits>
 800a230:	2401      	movs	r4, #1
 800a232:	9b01      	ldr	r3, [sp, #4]
 800a234:	612c      	str	r4, [r5, #16]
 800a236:	616b      	str	r3, [r5, #20]
 800a238:	3020      	adds	r0, #32
 800a23a:	e7e4      	b.n	800a206 <__d2b+0x5a>
 800a23c:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <__d2b+0xc0>)
 800a23e:	18c0      	adds	r0, r0, r3
 800a240:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <__d2b+0xc4>)
 800a242:	6038      	str	r0, [r7, #0]
 800a244:	18e3      	adds	r3, r4, r3
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	18eb      	adds	r3, r5, r3
 800a24a:	6958      	ldr	r0, [r3, #20]
 800a24c:	f7ff fd22 	bl	8009c94 <__hi0bits>
 800a250:	0164      	lsls	r4, r4, #5
 800a252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a254:	1a24      	subs	r4, r4, r0
 800a256:	601c      	str	r4, [r3, #0]
 800a258:	e7df      	b.n	800a21a <__d2b+0x6e>
 800a25a:	46c0      	nop			; (mov r8, r8)
 800a25c:	0800b6c7 	.word	0x0800b6c7
 800a260:	0000030a 	.word	0x0000030a
 800a264:	0800b6d8 	.word	0x0800b6d8
 800a268:	fffffbcd 	.word	0xfffffbcd
 800a26c:	fffffbce 	.word	0xfffffbce
 800a270:	3fffffff 	.word	0x3fffffff

0800a274 <_calloc_r>:
 800a274:	b570      	push	{r4, r5, r6, lr}
 800a276:	0c13      	lsrs	r3, r2, #16
 800a278:	0c0d      	lsrs	r5, r1, #16
 800a27a:	d11e      	bne.n	800a2ba <_calloc_r+0x46>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10c      	bne.n	800a29a <_calloc_r+0x26>
 800a280:	b289      	uxth	r1, r1
 800a282:	b294      	uxth	r4, r2
 800a284:	434c      	muls	r4, r1
 800a286:	0021      	movs	r1, r4
 800a288:	f000 f88c 	bl	800a3a4 <_malloc_r>
 800a28c:	1e05      	subs	r5, r0, #0
 800a28e:	d01b      	beq.n	800a2c8 <_calloc_r+0x54>
 800a290:	0022      	movs	r2, r4
 800a292:	2100      	movs	r1, #0
 800a294:	f7fe f8fb 	bl	800848e <memset>
 800a298:	e016      	b.n	800a2c8 <_calloc_r+0x54>
 800a29a:	1c1d      	adds	r5, r3, #0
 800a29c:	1c0b      	adds	r3, r1, #0
 800a29e:	b292      	uxth	r2, r2
 800a2a0:	b289      	uxth	r1, r1
 800a2a2:	b29c      	uxth	r4, r3
 800a2a4:	4351      	muls	r1, r2
 800a2a6:	b2ab      	uxth	r3, r5
 800a2a8:	4363      	muls	r3, r4
 800a2aa:	0c0c      	lsrs	r4, r1, #16
 800a2ac:	191c      	adds	r4, r3, r4
 800a2ae:	0c22      	lsrs	r2, r4, #16
 800a2b0:	d107      	bne.n	800a2c2 <_calloc_r+0x4e>
 800a2b2:	0424      	lsls	r4, r4, #16
 800a2b4:	b289      	uxth	r1, r1
 800a2b6:	430c      	orrs	r4, r1
 800a2b8:	e7e5      	b.n	800a286 <_calloc_r+0x12>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <_calloc_r+0x4e>
 800a2be:	1c13      	adds	r3, r2, #0
 800a2c0:	e7ed      	b.n	800a29e <_calloc_r+0x2a>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	2500      	movs	r5, #0
 800a2c6:	6003      	str	r3, [r0, #0]
 800a2c8:	0028      	movs	r0, r5
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}

0800a2cc <_free_r>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	0005      	movs	r5, r0
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	d010      	beq.n	800a2f6 <_free_r+0x2a>
 800a2d4:	1f0c      	subs	r4, r1, #4
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	da00      	bge.n	800a2de <_free_r+0x12>
 800a2dc:	18e4      	adds	r4, r4, r3
 800a2de:	0028      	movs	r0, r5
 800a2e0:	f000 fa9e 	bl	800a820 <__malloc_lock>
 800a2e4:	4a1d      	ldr	r2, [pc, #116]	; (800a35c <_free_r+0x90>)
 800a2e6:	6813      	ldr	r3, [r2, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d105      	bne.n	800a2f8 <_free_r+0x2c>
 800a2ec:	6063      	str	r3, [r4, #4]
 800a2ee:	6014      	str	r4, [r2, #0]
 800a2f0:	0028      	movs	r0, r5
 800a2f2:	f000 fa9d 	bl	800a830 <__malloc_unlock>
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}
 800a2f8:	42a3      	cmp	r3, r4
 800a2fa:	d908      	bls.n	800a30e <_free_r+0x42>
 800a2fc:	6821      	ldr	r1, [r4, #0]
 800a2fe:	1860      	adds	r0, r4, r1
 800a300:	4283      	cmp	r3, r0
 800a302:	d1f3      	bne.n	800a2ec <_free_r+0x20>
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	1841      	adds	r1, r0, r1
 800a30a:	6021      	str	r1, [r4, #0]
 800a30c:	e7ee      	b.n	800a2ec <_free_r+0x20>
 800a30e:	001a      	movs	r2, r3
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <_free_r+0x4e>
 800a316:	42a3      	cmp	r3, r4
 800a318:	d9f9      	bls.n	800a30e <_free_r+0x42>
 800a31a:	6811      	ldr	r1, [r2, #0]
 800a31c:	1850      	adds	r0, r2, r1
 800a31e:	42a0      	cmp	r0, r4
 800a320:	d10b      	bne.n	800a33a <_free_r+0x6e>
 800a322:	6820      	ldr	r0, [r4, #0]
 800a324:	1809      	adds	r1, r1, r0
 800a326:	1850      	adds	r0, r2, r1
 800a328:	6011      	str	r1, [r2, #0]
 800a32a:	4283      	cmp	r3, r0
 800a32c:	d1e0      	bne.n	800a2f0 <_free_r+0x24>
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	1841      	adds	r1, r0, r1
 800a334:	6011      	str	r1, [r2, #0]
 800a336:	6053      	str	r3, [r2, #4]
 800a338:	e7da      	b.n	800a2f0 <_free_r+0x24>
 800a33a:	42a0      	cmp	r0, r4
 800a33c:	d902      	bls.n	800a344 <_free_r+0x78>
 800a33e:	230c      	movs	r3, #12
 800a340:	602b      	str	r3, [r5, #0]
 800a342:	e7d5      	b.n	800a2f0 <_free_r+0x24>
 800a344:	6821      	ldr	r1, [r4, #0]
 800a346:	1860      	adds	r0, r4, r1
 800a348:	4283      	cmp	r3, r0
 800a34a:	d103      	bne.n	800a354 <_free_r+0x88>
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	1841      	adds	r1, r0, r1
 800a352:	6021      	str	r1, [r4, #0]
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	6054      	str	r4, [r2, #4]
 800a358:	e7ca      	b.n	800a2f0 <_free_r+0x24>
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	200004d0 	.word	0x200004d0

0800a360 <sbrk_aligned>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	4e0f      	ldr	r6, [pc, #60]	; (800a3a0 <sbrk_aligned+0x40>)
 800a364:	000d      	movs	r5, r1
 800a366:	6831      	ldr	r1, [r6, #0]
 800a368:	0004      	movs	r4, r0
 800a36a:	2900      	cmp	r1, #0
 800a36c:	d102      	bne.n	800a374 <sbrk_aligned+0x14>
 800a36e:	f000 f9f1 	bl	800a754 <_sbrk_r>
 800a372:	6030      	str	r0, [r6, #0]
 800a374:	0029      	movs	r1, r5
 800a376:	0020      	movs	r0, r4
 800a378:	f000 f9ec 	bl	800a754 <_sbrk_r>
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	d00a      	beq.n	800a396 <sbrk_aligned+0x36>
 800a380:	2303      	movs	r3, #3
 800a382:	1cc5      	adds	r5, r0, #3
 800a384:	439d      	bics	r5, r3
 800a386:	42a8      	cmp	r0, r5
 800a388:	d007      	beq.n	800a39a <sbrk_aligned+0x3a>
 800a38a:	1a29      	subs	r1, r5, r0
 800a38c:	0020      	movs	r0, r4
 800a38e:	f000 f9e1 	bl	800a754 <_sbrk_r>
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	d101      	bne.n	800a39a <sbrk_aligned+0x3a>
 800a396:	2501      	movs	r5, #1
 800a398:	426d      	negs	r5, r5
 800a39a:	0028      	movs	r0, r5
 800a39c:	bd70      	pop	{r4, r5, r6, pc}
 800a39e:	46c0      	nop			; (mov r8, r8)
 800a3a0:	200004d4 	.word	0x200004d4

0800a3a4 <_malloc_r>:
 800a3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3a6:	2203      	movs	r2, #3
 800a3a8:	1ccb      	adds	r3, r1, #3
 800a3aa:	4393      	bics	r3, r2
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	0006      	movs	r6, r0
 800a3b0:	001f      	movs	r7, r3
 800a3b2:	2b0c      	cmp	r3, #12
 800a3b4:	d232      	bcs.n	800a41c <_malloc_r+0x78>
 800a3b6:	270c      	movs	r7, #12
 800a3b8:	42b9      	cmp	r1, r7
 800a3ba:	d831      	bhi.n	800a420 <_malloc_r+0x7c>
 800a3bc:	0030      	movs	r0, r6
 800a3be:	f000 fa2f 	bl	800a820 <__malloc_lock>
 800a3c2:	4d32      	ldr	r5, [pc, #200]	; (800a48c <_malloc_r+0xe8>)
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	001c      	movs	r4, r3
 800a3c8:	2c00      	cmp	r4, #0
 800a3ca:	d12e      	bne.n	800a42a <_malloc_r+0x86>
 800a3cc:	0039      	movs	r1, r7
 800a3ce:	0030      	movs	r0, r6
 800a3d0:	f7ff ffc6 	bl	800a360 <sbrk_aligned>
 800a3d4:	0004      	movs	r4, r0
 800a3d6:	1c43      	adds	r3, r0, #1
 800a3d8:	d11e      	bne.n	800a418 <_malloc_r+0x74>
 800a3da:	682c      	ldr	r4, [r5, #0]
 800a3dc:	0025      	movs	r5, r4
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	d14a      	bne.n	800a478 <_malloc_r+0xd4>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	0029      	movs	r1, r5
 800a3e6:	18e3      	adds	r3, r4, r3
 800a3e8:	0030      	movs	r0, r6
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	f000 f9b2 	bl	800a754 <_sbrk_r>
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	4283      	cmp	r3, r0
 800a3f4:	d143      	bne.n	800a47e <_malloc_r+0xda>
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	3703      	adds	r7, #3
 800a3fa:	1aff      	subs	r7, r7, r3
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	439f      	bics	r7, r3
 800a400:	3708      	adds	r7, #8
 800a402:	2f0c      	cmp	r7, #12
 800a404:	d200      	bcs.n	800a408 <_malloc_r+0x64>
 800a406:	270c      	movs	r7, #12
 800a408:	0039      	movs	r1, r7
 800a40a:	0030      	movs	r0, r6
 800a40c:	f7ff ffa8 	bl	800a360 <sbrk_aligned>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d034      	beq.n	800a47e <_malloc_r+0xda>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	19df      	adds	r7, r3, r7
 800a418:	6027      	str	r7, [r4, #0]
 800a41a:	e013      	b.n	800a444 <_malloc_r+0xa0>
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dacb      	bge.n	800a3b8 <_malloc_r+0x14>
 800a420:	230c      	movs	r3, #12
 800a422:	2500      	movs	r5, #0
 800a424:	6033      	str	r3, [r6, #0]
 800a426:	0028      	movs	r0, r5
 800a428:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a42a:	6822      	ldr	r2, [r4, #0]
 800a42c:	1bd1      	subs	r1, r2, r7
 800a42e:	d420      	bmi.n	800a472 <_malloc_r+0xce>
 800a430:	290b      	cmp	r1, #11
 800a432:	d917      	bls.n	800a464 <_malloc_r+0xc0>
 800a434:	19e2      	adds	r2, r4, r7
 800a436:	6027      	str	r7, [r4, #0]
 800a438:	42a3      	cmp	r3, r4
 800a43a:	d111      	bne.n	800a460 <_malloc_r+0xbc>
 800a43c:	602a      	str	r2, [r5, #0]
 800a43e:	6863      	ldr	r3, [r4, #4]
 800a440:	6011      	str	r1, [r2, #0]
 800a442:	6053      	str	r3, [r2, #4]
 800a444:	0030      	movs	r0, r6
 800a446:	0025      	movs	r5, r4
 800a448:	f000 f9f2 	bl	800a830 <__malloc_unlock>
 800a44c:	2207      	movs	r2, #7
 800a44e:	350b      	adds	r5, #11
 800a450:	1d23      	adds	r3, r4, #4
 800a452:	4395      	bics	r5, r2
 800a454:	1aea      	subs	r2, r5, r3
 800a456:	429d      	cmp	r5, r3
 800a458:	d0e5      	beq.n	800a426 <_malloc_r+0x82>
 800a45a:	1b5b      	subs	r3, r3, r5
 800a45c:	50a3      	str	r3, [r4, r2]
 800a45e:	e7e2      	b.n	800a426 <_malloc_r+0x82>
 800a460:	605a      	str	r2, [r3, #4]
 800a462:	e7ec      	b.n	800a43e <_malloc_r+0x9a>
 800a464:	6862      	ldr	r2, [r4, #4]
 800a466:	42a3      	cmp	r3, r4
 800a468:	d101      	bne.n	800a46e <_malloc_r+0xca>
 800a46a:	602a      	str	r2, [r5, #0]
 800a46c:	e7ea      	b.n	800a444 <_malloc_r+0xa0>
 800a46e:	605a      	str	r2, [r3, #4]
 800a470:	e7e8      	b.n	800a444 <_malloc_r+0xa0>
 800a472:	0023      	movs	r3, r4
 800a474:	6864      	ldr	r4, [r4, #4]
 800a476:	e7a7      	b.n	800a3c8 <_malloc_r+0x24>
 800a478:	002c      	movs	r4, r5
 800a47a:	686d      	ldr	r5, [r5, #4]
 800a47c:	e7af      	b.n	800a3de <_malloc_r+0x3a>
 800a47e:	230c      	movs	r3, #12
 800a480:	0030      	movs	r0, r6
 800a482:	6033      	str	r3, [r6, #0]
 800a484:	f000 f9d4 	bl	800a830 <__malloc_unlock>
 800a488:	e7cd      	b.n	800a426 <_malloc_r+0x82>
 800a48a:	46c0      	nop			; (mov r8, r8)
 800a48c:	200004d0 	.word	0x200004d0

0800a490 <__ssputs_r>:
 800a490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a492:	688e      	ldr	r6, [r1, #8]
 800a494:	b085      	sub	sp, #20
 800a496:	0007      	movs	r7, r0
 800a498:	000c      	movs	r4, r1
 800a49a:	9203      	str	r2, [sp, #12]
 800a49c:	9301      	str	r3, [sp, #4]
 800a49e:	429e      	cmp	r6, r3
 800a4a0:	d83c      	bhi.n	800a51c <__ssputs_r+0x8c>
 800a4a2:	2390      	movs	r3, #144	; 0x90
 800a4a4:	898a      	ldrh	r2, [r1, #12]
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	421a      	tst	r2, r3
 800a4aa:	d034      	beq.n	800a516 <__ssputs_r+0x86>
 800a4ac:	6909      	ldr	r1, [r1, #16]
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	6960      	ldr	r0, [r4, #20]
 800a4b2:	1a5b      	subs	r3, r3, r1
 800a4b4:	9302      	str	r3, [sp, #8]
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	4343      	muls	r3, r0
 800a4ba:	0fdd      	lsrs	r5, r3, #31
 800a4bc:	18ed      	adds	r5, r5, r3
 800a4be:	9b01      	ldr	r3, [sp, #4]
 800a4c0:	9802      	ldr	r0, [sp, #8]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	181b      	adds	r3, r3, r0
 800a4c6:	106d      	asrs	r5, r5, #1
 800a4c8:	42ab      	cmp	r3, r5
 800a4ca:	d900      	bls.n	800a4ce <__ssputs_r+0x3e>
 800a4cc:	001d      	movs	r5, r3
 800a4ce:	0553      	lsls	r3, r2, #21
 800a4d0:	d532      	bpl.n	800a538 <__ssputs_r+0xa8>
 800a4d2:	0029      	movs	r1, r5
 800a4d4:	0038      	movs	r0, r7
 800a4d6:	f7ff ff65 	bl	800a3a4 <_malloc_r>
 800a4da:	1e06      	subs	r6, r0, #0
 800a4dc:	d109      	bne.n	800a4f2 <__ssputs_r+0x62>
 800a4de:	230c      	movs	r3, #12
 800a4e0:	603b      	str	r3, [r7, #0]
 800a4e2:	2340      	movs	r3, #64	; 0x40
 800a4e4:	2001      	movs	r0, #1
 800a4e6:	89a2      	ldrh	r2, [r4, #12]
 800a4e8:	4240      	negs	r0, r0
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	b005      	add	sp, #20
 800a4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f2:	9a02      	ldr	r2, [sp, #8]
 800a4f4:	6921      	ldr	r1, [r4, #16]
 800a4f6:	f7fd ffc1 	bl	800847c <memcpy>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	4a14      	ldr	r2, [pc, #80]	; (800a550 <__ssputs_r+0xc0>)
 800a4fe:	401a      	ands	r2, r3
 800a500:	2380      	movs	r3, #128	; 0x80
 800a502:	4313      	orrs	r3, r2
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	9b02      	ldr	r3, [sp, #8]
 800a508:	6126      	str	r6, [r4, #16]
 800a50a:	18f6      	adds	r6, r6, r3
 800a50c:	6026      	str	r6, [r4, #0]
 800a50e:	6165      	str	r5, [r4, #20]
 800a510:	9e01      	ldr	r6, [sp, #4]
 800a512:	1aed      	subs	r5, r5, r3
 800a514:	60a5      	str	r5, [r4, #8]
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	429e      	cmp	r6, r3
 800a51a:	d900      	bls.n	800a51e <__ssputs_r+0x8e>
 800a51c:	9e01      	ldr	r6, [sp, #4]
 800a51e:	0032      	movs	r2, r6
 800a520:	9903      	ldr	r1, [sp, #12]
 800a522:	6820      	ldr	r0, [r4, #0]
 800a524:	f000 f968 	bl	800a7f8 <memmove>
 800a528:	68a3      	ldr	r3, [r4, #8]
 800a52a:	2000      	movs	r0, #0
 800a52c:	1b9b      	subs	r3, r3, r6
 800a52e:	60a3      	str	r3, [r4, #8]
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	199e      	adds	r6, r3, r6
 800a534:	6026      	str	r6, [r4, #0]
 800a536:	e7da      	b.n	800a4ee <__ssputs_r+0x5e>
 800a538:	002a      	movs	r2, r5
 800a53a:	0038      	movs	r0, r7
 800a53c:	f000 f980 	bl	800a840 <_realloc_r>
 800a540:	1e06      	subs	r6, r0, #0
 800a542:	d1e0      	bne.n	800a506 <__ssputs_r+0x76>
 800a544:	0038      	movs	r0, r7
 800a546:	6921      	ldr	r1, [r4, #16]
 800a548:	f7ff fec0 	bl	800a2cc <_free_r>
 800a54c:	e7c7      	b.n	800a4de <__ssputs_r+0x4e>
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	fffffb7f 	.word	0xfffffb7f

0800a554 <_svfiprintf_r>:
 800a554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a556:	b0a1      	sub	sp, #132	; 0x84
 800a558:	9003      	str	r0, [sp, #12]
 800a55a:	001d      	movs	r5, r3
 800a55c:	898b      	ldrh	r3, [r1, #12]
 800a55e:	000f      	movs	r7, r1
 800a560:	0016      	movs	r6, r2
 800a562:	061b      	lsls	r3, r3, #24
 800a564:	d511      	bpl.n	800a58a <_svfiprintf_r+0x36>
 800a566:	690b      	ldr	r3, [r1, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10e      	bne.n	800a58a <_svfiprintf_r+0x36>
 800a56c:	2140      	movs	r1, #64	; 0x40
 800a56e:	f7ff ff19 	bl	800a3a4 <_malloc_r>
 800a572:	6038      	str	r0, [r7, #0]
 800a574:	6138      	str	r0, [r7, #16]
 800a576:	2800      	cmp	r0, #0
 800a578:	d105      	bne.n	800a586 <_svfiprintf_r+0x32>
 800a57a:	230c      	movs	r3, #12
 800a57c:	9a03      	ldr	r2, [sp, #12]
 800a57e:	3801      	subs	r0, #1
 800a580:	6013      	str	r3, [r2, #0]
 800a582:	b021      	add	sp, #132	; 0x84
 800a584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a586:	2340      	movs	r3, #64	; 0x40
 800a588:	617b      	str	r3, [r7, #20]
 800a58a:	2300      	movs	r3, #0
 800a58c:	ac08      	add	r4, sp, #32
 800a58e:	6163      	str	r3, [r4, #20]
 800a590:	3320      	adds	r3, #32
 800a592:	7663      	strb	r3, [r4, #25]
 800a594:	3310      	adds	r3, #16
 800a596:	76a3      	strb	r3, [r4, #26]
 800a598:	9507      	str	r5, [sp, #28]
 800a59a:	0035      	movs	r5, r6
 800a59c:	782b      	ldrb	r3, [r5, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <_svfiprintf_r+0x52>
 800a5a2:	2b25      	cmp	r3, #37	; 0x25
 800a5a4:	d147      	bne.n	800a636 <_svfiprintf_r+0xe2>
 800a5a6:	1bab      	subs	r3, r5, r6
 800a5a8:	9305      	str	r3, [sp, #20]
 800a5aa:	42b5      	cmp	r5, r6
 800a5ac:	d00c      	beq.n	800a5c8 <_svfiprintf_r+0x74>
 800a5ae:	0032      	movs	r2, r6
 800a5b0:	0039      	movs	r1, r7
 800a5b2:	9803      	ldr	r0, [sp, #12]
 800a5b4:	f7ff ff6c 	bl	800a490 <__ssputs_r>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d100      	bne.n	800a5be <_svfiprintf_r+0x6a>
 800a5bc:	e0ae      	b.n	800a71c <_svfiprintf_r+0x1c8>
 800a5be:	6962      	ldr	r2, [r4, #20]
 800a5c0:	9b05      	ldr	r3, [sp, #20]
 800a5c2:	4694      	mov	ip, r2
 800a5c4:	4463      	add	r3, ip
 800a5c6:	6163      	str	r3, [r4, #20]
 800a5c8:	782b      	ldrb	r3, [r5, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d100      	bne.n	800a5d0 <_svfiprintf_r+0x7c>
 800a5ce:	e0a5      	b.n	800a71c <_svfiprintf_r+0x1c8>
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	4252      	negs	r2, r2
 800a5d6:	6062      	str	r2, [r4, #4]
 800a5d8:	a904      	add	r1, sp, #16
 800a5da:	3254      	adds	r2, #84	; 0x54
 800a5dc:	1852      	adds	r2, r2, r1
 800a5de:	1c6e      	adds	r6, r5, #1
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	60e3      	str	r3, [r4, #12]
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	7013      	strb	r3, [r2, #0]
 800a5e8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a5ea:	2205      	movs	r2, #5
 800a5ec:	7831      	ldrb	r1, [r6, #0]
 800a5ee:	4854      	ldr	r0, [pc, #336]	; (800a740 <_svfiprintf_r+0x1ec>)
 800a5f0:	f7ff fa98 	bl	8009b24 <memchr>
 800a5f4:	1c75      	adds	r5, r6, #1
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d11f      	bne.n	800a63a <_svfiprintf_r+0xe6>
 800a5fa:	6822      	ldr	r2, [r4, #0]
 800a5fc:	06d3      	lsls	r3, r2, #27
 800a5fe:	d504      	bpl.n	800a60a <_svfiprintf_r+0xb6>
 800a600:	2353      	movs	r3, #83	; 0x53
 800a602:	a904      	add	r1, sp, #16
 800a604:	185b      	adds	r3, r3, r1
 800a606:	2120      	movs	r1, #32
 800a608:	7019      	strb	r1, [r3, #0]
 800a60a:	0713      	lsls	r3, r2, #28
 800a60c:	d504      	bpl.n	800a618 <_svfiprintf_r+0xc4>
 800a60e:	2353      	movs	r3, #83	; 0x53
 800a610:	a904      	add	r1, sp, #16
 800a612:	185b      	adds	r3, r3, r1
 800a614:	212b      	movs	r1, #43	; 0x2b
 800a616:	7019      	strb	r1, [r3, #0]
 800a618:	7833      	ldrb	r3, [r6, #0]
 800a61a:	2b2a      	cmp	r3, #42	; 0x2a
 800a61c:	d016      	beq.n	800a64c <_svfiprintf_r+0xf8>
 800a61e:	0035      	movs	r5, r6
 800a620:	2100      	movs	r1, #0
 800a622:	200a      	movs	r0, #10
 800a624:	68e3      	ldr	r3, [r4, #12]
 800a626:	782a      	ldrb	r2, [r5, #0]
 800a628:	1c6e      	adds	r6, r5, #1
 800a62a:	3a30      	subs	r2, #48	; 0x30
 800a62c:	2a09      	cmp	r2, #9
 800a62e:	d94e      	bls.n	800a6ce <_svfiprintf_r+0x17a>
 800a630:	2900      	cmp	r1, #0
 800a632:	d111      	bne.n	800a658 <_svfiprintf_r+0x104>
 800a634:	e017      	b.n	800a666 <_svfiprintf_r+0x112>
 800a636:	3501      	adds	r5, #1
 800a638:	e7b0      	b.n	800a59c <_svfiprintf_r+0x48>
 800a63a:	4b41      	ldr	r3, [pc, #260]	; (800a740 <_svfiprintf_r+0x1ec>)
 800a63c:	6822      	ldr	r2, [r4, #0]
 800a63e:	1ac0      	subs	r0, r0, r3
 800a640:	2301      	movs	r3, #1
 800a642:	4083      	lsls	r3, r0
 800a644:	4313      	orrs	r3, r2
 800a646:	002e      	movs	r6, r5
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	e7ce      	b.n	800a5ea <_svfiprintf_r+0x96>
 800a64c:	9b07      	ldr	r3, [sp, #28]
 800a64e:	1d19      	adds	r1, r3, #4
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	9107      	str	r1, [sp, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	db01      	blt.n	800a65c <_svfiprintf_r+0x108>
 800a658:	930b      	str	r3, [sp, #44]	; 0x2c
 800a65a:	e004      	b.n	800a666 <_svfiprintf_r+0x112>
 800a65c:	425b      	negs	r3, r3
 800a65e:	60e3      	str	r3, [r4, #12]
 800a660:	2302      	movs	r3, #2
 800a662:	4313      	orrs	r3, r2
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	782b      	ldrb	r3, [r5, #0]
 800a668:	2b2e      	cmp	r3, #46	; 0x2e
 800a66a:	d10a      	bne.n	800a682 <_svfiprintf_r+0x12e>
 800a66c:	786b      	ldrb	r3, [r5, #1]
 800a66e:	2b2a      	cmp	r3, #42	; 0x2a
 800a670:	d135      	bne.n	800a6de <_svfiprintf_r+0x18a>
 800a672:	9b07      	ldr	r3, [sp, #28]
 800a674:	3502      	adds	r5, #2
 800a676:	1d1a      	adds	r2, r3, #4
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	9207      	str	r2, [sp, #28]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	db2b      	blt.n	800a6d8 <_svfiprintf_r+0x184>
 800a680:	9309      	str	r3, [sp, #36]	; 0x24
 800a682:	4e30      	ldr	r6, [pc, #192]	; (800a744 <_svfiprintf_r+0x1f0>)
 800a684:	2203      	movs	r2, #3
 800a686:	0030      	movs	r0, r6
 800a688:	7829      	ldrb	r1, [r5, #0]
 800a68a:	f7ff fa4b 	bl	8009b24 <memchr>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d006      	beq.n	800a6a0 <_svfiprintf_r+0x14c>
 800a692:	2340      	movs	r3, #64	; 0x40
 800a694:	1b80      	subs	r0, r0, r6
 800a696:	4083      	lsls	r3, r0
 800a698:	6822      	ldr	r2, [r4, #0]
 800a69a:	3501      	adds	r5, #1
 800a69c:	4313      	orrs	r3, r2
 800a69e:	6023      	str	r3, [r4, #0]
 800a6a0:	7829      	ldrb	r1, [r5, #0]
 800a6a2:	2206      	movs	r2, #6
 800a6a4:	4828      	ldr	r0, [pc, #160]	; (800a748 <_svfiprintf_r+0x1f4>)
 800a6a6:	1c6e      	adds	r6, r5, #1
 800a6a8:	7621      	strb	r1, [r4, #24]
 800a6aa:	f7ff fa3b 	bl	8009b24 <memchr>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d03c      	beq.n	800a72c <_svfiprintf_r+0x1d8>
 800a6b2:	4b26      	ldr	r3, [pc, #152]	; (800a74c <_svfiprintf_r+0x1f8>)
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d125      	bne.n	800a704 <_svfiprintf_r+0x1b0>
 800a6b8:	2207      	movs	r2, #7
 800a6ba:	9b07      	ldr	r3, [sp, #28]
 800a6bc:	3307      	adds	r3, #7
 800a6be:	4393      	bics	r3, r2
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	9307      	str	r3, [sp, #28]
 800a6c4:	6963      	ldr	r3, [r4, #20]
 800a6c6:	9a04      	ldr	r2, [sp, #16]
 800a6c8:	189b      	adds	r3, r3, r2
 800a6ca:	6163      	str	r3, [r4, #20]
 800a6cc:	e765      	b.n	800a59a <_svfiprintf_r+0x46>
 800a6ce:	4343      	muls	r3, r0
 800a6d0:	0035      	movs	r5, r6
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	189b      	adds	r3, r3, r2
 800a6d6:	e7a6      	b.n	800a626 <_svfiprintf_r+0xd2>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	425b      	negs	r3, r3
 800a6dc:	e7d0      	b.n	800a680 <_svfiprintf_r+0x12c>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	200a      	movs	r0, #10
 800a6e2:	001a      	movs	r2, r3
 800a6e4:	3501      	adds	r5, #1
 800a6e6:	6063      	str	r3, [r4, #4]
 800a6e8:	7829      	ldrb	r1, [r5, #0]
 800a6ea:	1c6e      	adds	r6, r5, #1
 800a6ec:	3930      	subs	r1, #48	; 0x30
 800a6ee:	2909      	cmp	r1, #9
 800a6f0:	d903      	bls.n	800a6fa <_svfiprintf_r+0x1a6>
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0c5      	beq.n	800a682 <_svfiprintf_r+0x12e>
 800a6f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a6f8:	e7c3      	b.n	800a682 <_svfiprintf_r+0x12e>
 800a6fa:	4342      	muls	r2, r0
 800a6fc:	0035      	movs	r5, r6
 800a6fe:	2301      	movs	r3, #1
 800a700:	1852      	adds	r2, r2, r1
 800a702:	e7f1      	b.n	800a6e8 <_svfiprintf_r+0x194>
 800a704:	ab07      	add	r3, sp, #28
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	003a      	movs	r2, r7
 800a70a:	0021      	movs	r1, r4
 800a70c:	4b10      	ldr	r3, [pc, #64]	; (800a750 <_svfiprintf_r+0x1fc>)
 800a70e:	9803      	ldr	r0, [sp, #12]
 800a710:	f7fd ff70 	bl	80085f4 <_printf_float>
 800a714:	9004      	str	r0, [sp, #16]
 800a716:	9b04      	ldr	r3, [sp, #16]
 800a718:	3301      	adds	r3, #1
 800a71a:	d1d3      	bne.n	800a6c4 <_svfiprintf_r+0x170>
 800a71c:	89bb      	ldrh	r3, [r7, #12]
 800a71e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a720:	065b      	lsls	r3, r3, #25
 800a722:	d400      	bmi.n	800a726 <_svfiprintf_r+0x1d2>
 800a724:	e72d      	b.n	800a582 <_svfiprintf_r+0x2e>
 800a726:	2001      	movs	r0, #1
 800a728:	4240      	negs	r0, r0
 800a72a:	e72a      	b.n	800a582 <_svfiprintf_r+0x2e>
 800a72c:	ab07      	add	r3, sp, #28
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	003a      	movs	r2, r7
 800a732:	0021      	movs	r1, r4
 800a734:	4b06      	ldr	r3, [pc, #24]	; (800a750 <_svfiprintf_r+0x1fc>)
 800a736:	9803      	ldr	r0, [sp, #12]
 800a738:	f7fe fa0e 	bl	8008b58 <_printf_i>
 800a73c:	e7ea      	b.n	800a714 <_svfiprintf_r+0x1c0>
 800a73e:	46c0      	nop			; (mov r8, r8)
 800a740:	0800b834 	.word	0x0800b834
 800a744:	0800b83a 	.word	0x0800b83a
 800a748:	0800b83e 	.word	0x0800b83e
 800a74c:	080085f5 	.word	0x080085f5
 800a750:	0800a491 	.word	0x0800a491

0800a754 <_sbrk_r>:
 800a754:	2300      	movs	r3, #0
 800a756:	b570      	push	{r4, r5, r6, lr}
 800a758:	4d06      	ldr	r5, [pc, #24]	; (800a774 <_sbrk_r+0x20>)
 800a75a:	0004      	movs	r4, r0
 800a75c:	0008      	movs	r0, r1
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	f7f9 ff3a 	bl	80045d8 <_sbrk>
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	d103      	bne.n	800a770 <_sbrk_r+0x1c>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d000      	beq.n	800a770 <_sbrk_r+0x1c>
 800a76e:	6023      	str	r3, [r4, #0]
 800a770:	bd70      	pop	{r4, r5, r6, pc}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	200004d8 	.word	0x200004d8

0800a778 <__assert_func>:
 800a778:	b530      	push	{r4, r5, lr}
 800a77a:	0014      	movs	r4, r2
 800a77c:	001a      	movs	r2, r3
 800a77e:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <__assert_func+0x2c>)
 800a780:	0005      	movs	r5, r0
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	b085      	sub	sp, #20
 800a786:	68d8      	ldr	r0, [r3, #12]
 800a788:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <__assert_func+0x30>)
 800a78a:	2c00      	cmp	r4, #0
 800a78c:	d101      	bne.n	800a792 <__assert_func+0x1a>
 800a78e:	4b07      	ldr	r3, [pc, #28]	; (800a7ac <__assert_func+0x34>)
 800a790:	001c      	movs	r4, r3
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	9100      	str	r1, [sp, #0]
 800a796:	002b      	movs	r3, r5
 800a798:	4905      	ldr	r1, [pc, #20]	; (800a7b0 <__assert_func+0x38>)
 800a79a:	9402      	str	r4, [sp, #8]
 800a79c:	f000 f80a 	bl	800a7b4 <fiprintf>
 800a7a0:	f000 faba 	bl	800ad18 <abort>
 800a7a4:	20000014 	.word	0x20000014
 800a7a8:	0800b845 	.word	0x0800b845
 800a7ac:	0800b880 	.word	0x0800b880
 800a7b0:	0800b852 	.word	0x0800b852

0800a7b4 <fiprintf>:
 800a7b4:	b40e      	push	{r1, r2, r3}
 800a7b6:	b503      	push	{r0, r1, lr}
 800a7b8:	0001      	movs	r1, r0
 800a7ba:	ab03      	add	r3, sp, #12
 800a7bc:	4804      	ldr	r0, [pc, #16]	; (800a7d0 <fiprintf+0x1c>)
 800a7be:	cb04      	ldmia	r3!, {r2}
 800a7c0:	6800      	ldr	r0, [r0, #0]
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	f000 f892 	bl	800a8ec <_vfiprintf_r>
 800a7c8:	b002      	add	sp, #8
 800a7ca:	bc08      	pop	{r3}
 800a7cc:	b003      	add	sp, #12
 800a7ce:	4718      	bx	r3
 800a7d0:	20000014 	.word	0x20000014

0800a7d4 <__ascii_mbtowc>:
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	2900      	cmp	r1, #0
 800a7d8:	d100      	bne.n	800a7dc <__ascii_mbtowc+0x8>
 800a7da:	a901      	add	r1, sp, #4
 800a7dc:	1e10      	subs	r0, r2, #0
 800a7de:	d006      	beq.n	800a7ee <__ascii_mbtowc+0x1a>
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d006      	beq.n	800a7f2 <__ascii_mbtowc+0x1e>
 800a7e4:	7813      	ldrb	r3, [r2, #0]
 800a7e6:	600b      	str	r3, [r1, #0]
 800a7e8:	7810      	ldrb	r0, [r2, #0]
 800a7ea:	1e43      	subs	r3, r0, #1
 800a7ec:	4198      	sbcs	r0, r3
 800a7ee:	b002      	add	sp, #8
 800a7f0:	4770      	bx	lr
 800a7f2:	2002      	movs	r0, #2
 800a7f4:	4240      	negs	r0, r0
 800a7f6:	e7fa      	b.n	800a7ee <__ascii_mbtowc+0x1a>

0800a7f8 <memmove>:
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	4288      	cmp	r0, r1
 800a7fc:	d902      	bls.n	800a804 <memmove+0xc>
 800a7fe:	188b      	adds	r3, r1, r2
 800a800:	4298      	cmp	r0, r3
 800a802:	d303      	bcc.n	800a80c <memmove+0x14>
 800a804:	2300      	movs	r3, #0
 800a806:	e007      	b.n	800a818 <memmove+0x20>
 800a808:	5c8b      	ldrb	r3, [r1, r2]
 800a80a:	5483      	strb	r3, [r0, r2]
 800a80c:	3a01      	subs	r2, #1
 800a80e:	d2fb      	bcs.n	800a808 <memmove+0x10>
 800a810:	bd10      	pop	{r4, pc}
 800a812:	5ccc      	ldrb	r4, [r1, r3]
 800a814:	54c4      	strb	r4, [r0, r3]
 800a816:	3301      	adds	r3, #1
 800a818:	429a      	cmp	r2, r3
 800a81a:	d1fa      	bne.n	800a812 <memmove+0x1a>
 800a81c:	e7f8      	b.n	800a810 <memmove+0x18>
	...

0800a820 <__malloc_lock>:
 800a820:	b510      	push	{r4, lr}
 800a822:	4802      	ldr	r0, [pc, #8]	; (800a82c <__malloc_lock+0xc>)
 800a824:	f000 fc4f 	bl	800b0c6 <__retarget_lock_acquire_recursive>
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	46c0      	nop			; (mov r8, r8)
 800a82c:	200004dc 	.word	0x200004dc

0800a830 <__malloc_unlock>:
 800a830:	b510      	push	{r4, lr}
 800a832:	4802      	ldr	r0, [pc, #8]	; (800a83c <__malloc_unlock+0xc>)
 800a834:	f000 fc48 	bl	800b0c8 <__retarget_lock_release_recursive>
 800a838:	bd10      	pop	{r4, pc}
 800a83a:	46c0      	nop			; (mov r8, r8)
 800a83c:	200004dc 	.word	0x200004dc

0800a840 <_realloc_r>:
 800a840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a842:	0007      	movs	r7, r0
 800a844:	000e      	movs	r6, r1
 800a846:	0014      	movs	r4, r2
 800a848:	2900      	cmp	r1, #0
 800a84a:	d105      	bne.n	800a858 <_realloc_r+0x18>
 800a84c:	0011      	movs	r1, r2
 800a84e:	f7ff fda9 	bl	800a3a4 <_malloc_r>
 800a852:	0005      	movs	r5, r0
 800a854:	0028      	movs	r0, r5
 800a856:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a858:	2a00      	cmp	r2, #0
 800a85a:	d103      	bne.n	800a864 <_realloc_r+0x24>
 800a85c:	f7ff fd36 	bl	800a2cc <_free_r>
 800a860:	0025      	movs	r5, r4
 800a862:	e7f7      	b.n	800a854 <_realloc_r+0x14>
 800a864:	f000 fc9e 	bl	800b1a4 <_malloc_usable_size_r>
 800a868:	9001      	str	r0, [sp, #4]
 800a86a:	4284      	cmp	r4, r0
 800a86c:	d803      	bhi.n	800a876 <_realloc_r+0x36>
 800a86e:	0035      	movs	r5, r6
 800a870:	0843      	lsrs	r3, r0, #1
 800a872:	42a3      	cmp	r3, r4
 800a874:	d3ee      	bcc.n	800a854 <_realloc_r+0x14>
 800a876:	0021      	movs	r1, r4
 800a878:	0038      	movs	r0, r7
 800a87a:	f7ff fd93 	bl	800a3a4 <_malloc_r>
 800a87e:	1e05      	subs	r5, r0, #0
 800a880:	d0e8      	beq.n	800a854 <_realloc_r+0x14>
 800a882:	9b01      	ldr	r3, [sp, #4]
 800a884:	0022      	movs	r2, r4
 800a886:	429c      	cmp	r4, r3
 800a888:	d900      	bls.n	800a88c <_realloc_r+0x4c>
 800a88a:	001a      	movs	r2, r3
 800a88c:	0031      	movs	r1, r6
 800a88e:	0028      	movs	r0, r5
 800a890:	f7fd fdf4 	bl	800847c <memcpy>
 800a894:	0031      	movs	r1, r6
 800a896:	0038      	movs	r0, r7
 800a898:	f7ff fd18 	bl	800a2cc <_free_r>
 800a89c:	e7da      	b.n	800a854 <_realloc_r+0x14>

0800a89e <__sfputc_r>:
 800a89e:	6893      	ldr	r3, [r2, #8]
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	6093      	str	r3, [r2, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da04      	bge.n	800a8b4 <__sfputc_r+0x16>
 800a8aa:	6994      	ldr	r4, [r2, #24]
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	db07      	blt.n	800a8c0 <__sfputc_r+0x22>
 800a8b0:	290a      	cmp	r1, #10
 800a8b2:	d005      	beq.n	800a8c0 <__sfputc_r+0x22>
 800a8b4:	6813      	ldr	r3, [r2, #0]
 800a8b6:	1c58      	adds	r0, r3, #1
 800a8b8:	6010      	str	r0, [r2, #0]
 800a8ba:	7019      	strb	r1, [r3, #0]
 800a8bc:	0008      	movs	r0, r1
 800a8be:	bd10      	pop	{r4, pc}
 800a8c0:	f000 f94e 	bl	800ab60 <__swbuf_r>
 800a8c4:	0001      	movs	r1, r0
 800a8c6:	e7f9      	b.n	800a8bc <__sfputc_r+0x1e>

0800a8c8 <__sfputs_r>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	0006      	movs	r6, r0
 800a8cc:	000f      	movs	r7, r1
 800a8ce:	0014      	movs	r4, r2
 800a8d0:	18d5      	adds	r5, r2, r3
 800a8d2:	42ac      	cmp	r4, r5
 800a8d4:	d101      	bne.n	800a8da <__sfputs_r+0x12>
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e007      	b.n	800a8ea <__sfputs_r+0x22>
 800a8da:	7821      	ldrb	r1, [r4, #0]
 800a8dc:	003a      	movs	r2, r7
 800a8de:	0030      	movs	r0, r6
 800a8e0:	f7ff ffdd 	bl	800a89e <__sfputc_r>
 800a8e4:	3401      	adds	r4, #1
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	d1f3      	bne.n	800a8d2 <__sfputs_r+0xa>
 800a8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8ec <_vfiprintf_r>:
 800a8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ee:	b0a1      	sub	sp, #132	; 0x84
 800a8f0:	0006      	movs	r6, r0
 800a8f2:	000c      	movs	r4, r1
 800a8f4:	001f      	movs	r7, r3
 800a8f6:	9203      	str	r2, [sp, #12]
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d004      	beq.n	800a906 <_vfiprintf_r+0x1a>
 800a8fc:	6983      	ldr	r3, [r0, #24]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <_vfiprintf_r+0x1a>
 800a902:	f000 fb3f 	bl	800af84 <__sinit>
 800a906:	4b8e      	ldr	r3, [pc, #568]	; (800ab40 <_vfiprintf_r+0x254>)
 800a908:	429c      	cmp	r4, r3
 800a90a:	d11c      	bne.n	800a946 <_vfiprintf_r+0x5a>
 800a90c:	6874      	ldr	r4, [r6, #4]
 800a90e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a910:	07db      	lsls	r3, r3, #31
 800a912:	d405      	bmi.n	800a920 <_vfiprintf_r+0x34>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	059b      	lsls	r3, r3, #22
 800a918:	d402      	bmi.n	800a920 <_vfiprintf_r+0x34>
 800a91a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a91c:	f000 fbd3 	bl	800b0c6 <__retarget_lock_acquire_recursive>
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	071b      	lsls	r3, r3, #28
 800a924:	d502      	bpl.n	800a92c <_vfiprintf_r+0x40>
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d11d      	bne.n	800a968 <_vfiprintf_r+0x7c>
 800a92c:	0021      	movs	r1, r4
 800a92e:	0030      	movs	r0, r6
 800a930:	f000 f97a 	bl	800ac28 <__swsetup_r>
 800a934:	2800      	cmp	r0, #0
 800a936:	d017      	beq.n	800a968 <_vfiprintf_r+0x7c>
 800a938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a93a:	07db      	lsls	r3, r3, #31
 800a93c:	d50d      	bpl.n	800a95a <_vfiprintf_r+0x6e>
 800a93e:	2001      	movs	r0, #1
 800a940:	4240      	negs	r0, r0
 800a942:	b021      	add	sp, #132	; 0x84
 800a944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a946:	4b7f      	ldr	r3, [pc, #508]	; (800ab44 <_vfiprintf_r+0x258>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	d101      	bne.n	800a950 <_vfiprintf_r+0x64>
 800a94c:	68b4      	ldr	r4, [r6, #8]
 800a94e:	e7de      	b.n	800a90e <_vfiprintf_r+0x22>
 800a950:	4b7d      	ldr	r3, [pc, #500]	; (800ab48 <_vfiprintf_r+0x25c>)
 800a952:	429c      	cmp	r4, r3
 800a954:	d1db      	bne.n	800a90e <_vfiprintf_r+0x22>
 800a956:	68f4      	ldr	r4, [r6, #12]
 800a958:	e7d9      	b.n	800a90e <_vfiprintf_r+0x22>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	059b      	lsls	r3, r3, #22
 800a95e:	d4ee      	bmi.n	800a93e <_vfiprintf_r+0x52>
 800a960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a962:	f000 fbb1 	bl	800b0c8 <__retarget_lock_release_recursive>
 800a966:	e7ea      	b.n	800a93e <_vfiprintf_r+0x52>
 800a968:	2300      	movs	r3, #0
 800a96a:	ad08      	add	r5, sp, #32
 800a96c:	616b      	str	r3, [r5, #20]
 800a96e:	3320      	adds	r3, #32
 800a970:	766b      	strb	r3, [r5, #25]
 800a972:	3310      	adds	r3, #16
 800a974:	76ab      	strb	r3, [r5, #26]
 800a976:	9707      	str	r7, [sp, #28]
 800a978:	9f03      	ldr	r7, [sp, #12]
 800a97a:	783b      	ldrb	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <_vfiprintf_r+0x98>
 800a980:	2b25      	cmp	r3, #37	; 0x25
 800a982:	d14e      	bne.n	800aa22 <_vfiprintf_r+0x136>
 800a984:	9b03      	ldr	r3, [sp, #12]
 800a986:	1afb      	subs	r3, r7, r3
 800a988:	9305      	str	r3, [sp, #20]
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	429f      	cmp	r7, r3
 800a98e:	d00d      	beq.n	800a9ac <_vfiprintf_r+0xc0>
 800a990:	9b05      	ldr	r3, [sp, #20]
 800a992:	0021      	movs	r1, r4
 800a994:	0030      	movs	r0, r6
 800a996:	9a03      	ldr	r2, [sp, #12]
 800a998:	f7ff ff96 	bl	800a8c8 <__sfputs_r>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d100      	bne.n	800a9a2 <_vfiprintf_r+0xb6>
 800a9a0:	e0b5      	b.n	800ab0e <_vfiprintf_r+0x222>
 800a9a2:	696a      	ldr	r2, [r5, #20]
 800a9a4:	9b05      	ldr	r3, [sp, #20]
 800a9a6:	4694      	mov	ip, r2
 800a9a8:	4463      	add	r3, ip
 800a9aa:	616b      	str	r3, [r5, #20]
 800a9ac:	783b      	ldrb	r3, [r7, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d100      	bne.n	800a9b4 <_vfiprintf_r+0xc8>
 800a9b2:	e0ac      	b.n	800ab0e <_vfiprintf_r+0x222>
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	1c7b      	adds	r3, r7, #1
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	4252      	negs	r2, r2
 800a9be:	606a      	str	r2, [r5, #4]
 800a9c0:	a904      	add	r1, sp, #16
 800a9c2:	3254      	adds	r2, #84	; 0x54
 800a9c4:	1852      	adds	r2, r2, r1
 800a9c6:	602b      	str	r3, [r5, #0]
 800a9c8:	60eb      	str	r3, [r5, #12]
 800a9ca:	60ab      	str	r3, [r5, #8]
 800a9cc:	7013      	strb	r3, [r2, #0]
 800a9ce:	65ab      	str	r3, [r5, #88]	; 0x58
 800a9d0:	9b03      	ldr	r3, [sp, #12]
 800a9d2:	2205      	movs	r2, #5
 800a9d4:	7819      	ldrb	r1, [r3, #0]
 800a9d6:	485d      	ldr	r0, [pc, #372]	; (800ab4c <_vfiprintf_r+0x260>)
 800a9d8:	f7ff f8a4 	bl	8009b24 <memchr>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	1c5f      	adds	r7, r3, #1
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d120      	bne.n	800aa26 <_vfiprintf_r+0x13a>
 800a9e4:	682a      	ldr	r2, [r5, #0]
 800a9e6:	06d3      	lsls	r3, r2, #27
 800a9e8:	d504      	bpl.n	800a9f4 <_vfiprintf_r+0x108>
 800a9ea:	2353      	movs	r3, #83	; 0x53
 800a9ec:	a904      	add	r1, sp, #16
 800a9ee:	185b      	adds	r3, r3, r1
 800a9f0:	2120      	movs	r1, #32
 800a9f2:	7019      	strb	r1, [r3, #0]
 800a9f4:	0713      	lsls	r3, r2, #28
 800a9f6:	d504      	bpl.n	800aa02 <_vfiprintf_r+0x116>
 800a9f8:	2353      	movs	r3, #83	; 0x53
 800a9fa:	a904      	add	r1, sp, #16
 800a9fc:	185b      	adds	r3, r3, r1
 800a9fe:	212b      	movs	r1, #43	; 0x2b
 800aa00:	7019      	strb	r1, [r3, #0]
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b2a      	cmp	r3, #42	; 0x2a
 800aa08:	d016      	beq.n	800aa38 <_vfiprintf_r+0x14c>
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	68eb      	ldr	r3, [r5, #12]
 800aa0e:	9f03      	ldr	r7, [sp, #12]
 800aa10:	783a      	ldrb	r2, [r7, #0]
 800aa12:	1c78      	adds	r0, r7, #1
 800aa14:	3a30      	subs	r2, #48	; 0x30
 800aa16:	4684      	mov	ip, r0
 800aa18:	2a09      	cmp	r2, #9
 800aa1a:	d94f      	bls.n	800aabc <_vfiprintf_r+0x1d0>
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	d111      	bne.n	800aa44 <_vfiprintf_r+0x158>
 800aa20:	e017      	b.n	800aa52 <_vfiprintf_r+0x166>
 800aa22:	3701      	adds	r7, #1
 800aa24:	e7a9      	b.n	800a97a <_vfiprintf_r+0x8e>
 800aa26:	4b49      	ldr	r3, [pc, #292]	; (800ab4c <_vfiprintf_r+0x260>)
 800aa28:	682a      	ldr	r2, [r5, #0]
 800aa2a:	1ac0      	subs	r0, r0, r3
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	4083      	lsls	r3, r0
 800aa30:	4313      	orrs	r3, r2
 800aa32:	602b      	str	r3, [r5, #0]
 800aa34:	9703      	str	r7, [sp, #12]
 800aa36:	e7cb      	b.n	800a9d0 <_vfiprintf_r+0xe4>
 800aa38:	9b07      	ldr	r3, [sp, #28]
 800aa3a:	1d19      	adds	r1, r3, #4
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	9107      	str	r1, [sp, #28]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	db01      	blt.n	800aa48 <_vfiprintf_r+0x15c>
 800aa44:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa46:	e004      	b.n	800aa52 <_vfiprintf_r+0x166>
 800aa48:	425b      	negs	r3, r3
 800aa4a:	60eb      	str	r3, [r5, #12]
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	602b      	str	r3, [r5, #0]
 800aa52:	783b      	ldrb	r3, [r7, #0]
 800aa54:	2b2e      	cmp	r3, #46	; 0x2e
 800aa56:	d10a      	bne.n	800aa6e <_vfiprintf_r+0x182>
 800aa58:	787b      	ldrb	r3, [r7, #1]
 800aa5a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa5c:	d137      	bne.n	800aace <_vfiprintf_r+0x1e2>
 800aa5e:	9b07      	ldr	r3, [sp, #28]
 800aa60:	3702      	adds	r7, #2
 800aa62:	1d1a      	adds	r2, r3, #4
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	9207      	str	r2, [sp, #28]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	db2d      	blt.n	800aac8 <_vfiprintf_r+0x1dc>
 800aa6c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6e:	2203      	movs	r2, #3
 800aa70:	7839      	ldrb	r1, [r7, #0]
 800aa72:	4837      	ldr	r0, [pc, #220]	; (800ab50 <_vfiprintf_r+0x264>)
 800aa74:	f7ff f856 	bl	8009b24 <memchr>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d007      	beq.n	800aa8c <_vfiprintf_r+0x1a0>
 800aa7c:	4b34      	ldr	r3, [pc, #208]	; (800ab50 <_vfiprintf_r+0x264>)
 800aa7e:	682a      	ldr	r2, [r5, #0]
 800aa80:	1ac0      	subs	r0, r0, r3
 800aa82:	2340      	movs	r3, #64	; 0x40
 800aa84:	4083      	lsls	r3, r0
 800aa86:	4313      	orrs	r3, r2
 800aa88:	3701      	adds	r7, #1
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	7839      	ldrb	r1, [r7, #0]
 800aa8e:	1c7b      	adds	r3, r7, #1
 800aa90:	2206      	movs	r2, #6
 800aa92:	4830      	ldr	r0, [pc, #192]	; (800ab54 <_vfiprintf_r+0x268>)
 800aa94:	9303      	str	r3, [sp, #12]
 800aa96:	7629      	strb	r1, [r5, #24]
 800aa98:	f7ff f844 	bl	8009b24 <memchr>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d045      	beq.n	800ab2c <_vfiprintf_r+0x240>
 800aaa0:	4b2d      	ldr	r3, [pc, #180]	; (800ab58 <_vfiprintf_r+0x26c>)
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d127      	bne.n	800aaf6 <_vfiprintf_r+0x20a>
 800aaa6:	2207      	movs	r2, #7
 800aaa8:	9b07      	ldr	r3, [sp, #28]
 800aaaa:	3307      	adds	r3, #7
 800aaac:	4393      	bics	r3, r2
 800aaae:	3308      	adds	r3, #8
 800aab0:	9307      	str	r3, [sp, #28]
 800aab2:	696b      	ldr	r3, [r5, #20]
 800aab4:	9a04      	ldr	r2, [sp, #16]
 800aab6:	189b      	adds	r3, r3, r2
 800aab8:	616b      	str	r3, [r5, #20]
 800aaba:	e75d      	b.n	800a978 <_vfiprintf_r+0x8c>
 800aabc:	210a      	movs	r1, #10
 800aabe:	434b      	muls	r3, r1
 800aac0:	4667      	mov	r7, ip
 800aac2:	189b      	adds	r3, r3, r2
 800aac4:	3909      	subs	r1, #9
 800aac6:	e7a3      	b.n	800aa10 <_vfiprintf_r+0x124>
 800aac8:	2301      	movs	r3, #1
 800aaca:	425b      	negs	r3, r3
 800aacc:	e7ce      	b.n	800aa6c <_vfiprintf_r+0x180>
 800aace:	2300      	movs	r3, #0
 800aad0:	001a      	movs	r2, r3
 800aad2:	3701      	adds	r7, #1
 800aad4:	606b      	str	r3, [r5, #4]
 800aad6:	7839      	ldrb	r1, [r7, #0]
 800aad8:	1c78      	adds	r0, r7, #1
 800aada:	3930      	subs	r1, #48	; 0x30
 800aadc:	4684      	mov	ip, r0
 800aade:	2909      	cmp	r1, #9
 800aae0:	d903      	bls.n	800aaea <_vfiprintf_r+0x1fe>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0c3      	beq.n	800aa6e <_vfiprintf_r+0x182>
 800aae6:	9209      	str	r2, [sp, #36]	; 0x24
 800aae8:	e7c1      	b.n	800aa6e <_vfiprintf_r+0x182>
 800aaea:	230a      	movs	r3, #10
 800aaec:	435a      	muls	r2, r3
 800aaee:	4667      	mov	r7, ip
 800aaf0:	1852      	adds	r2, r2, r1
 800aaf2:	3b09      	subs	r3, #9
 800aaf4:	e7ef      	b.n	800aad6 <_vfiprintf_r+0x1ea>
 800aaf6:	ab07      	add	r3, sp, #28
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	0022      	movs	r2, r4
 800aafc:	0029      	movs	r1, r5
 800aafe:	0030      	movs	r0, r6
 800ab00:	4b16      	ldr	r3, [pc, #88]	; (800ab5c <_vfiprintf_r+0x270>)
 800ab02:	f7fd fd77 	bl	80085f4 <_printf_float>
 800ab06:	9004      	str	r0, [sp, #16]
 800ab08:	9b04      	ldr	r3, [sp, #16]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	d1d1      	bne.n	800aab2 <_vfiprintf_r+0x1c6>
 800ab0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab10:	07db      	lsls	r3, r3, #31
 800ab12:	d405      	bmi.n	800ab20 <_vfiprintf_r+0x234>
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	059b      	lsls	r3, r3, #22
 800ab18:	d402      	bmi.n	800ab20 <_vfiprintf_r+0x234>
 800ab1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab1c:	f000 fad4 	bl	800b0c8 <__retarget_lock_release_recursive>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	065b      	lsls	r3, r3, #25
 800ab24:	d500      	bpl.n	800ab28 <_vfiprintf_r+0x23c>
 800ab26:	e70a      	b.n	800a93e <_vfiprintf_r+0x52>
 800ab28:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ab2a:	e70a      	b.n	800a942 <_vfiprintf_r+0x56>
 800ab2c:	ab07      	add	r3, sp, #28
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	0022      	movs	r2, r4
 800ab32:	0029      	movs	r1, r5
 800ab34:	0030      	movs	r0, r6
 800ab36:	4b09      	ldr	r3, [pc, #36]	; (800ab5c <_vfiprintf_r+0x270>)
 800ab38:	f7fe f80e 	bl	8008b58 <_printf_i>
 800ab3c:	e7e3      	b.n	800ab06 <_vfiprintf_r+0x21a>
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	0800b9ac 	.word	0x0800b9ac
 800ab44:	0800b9cc 	.word	0x0800b9cc
 800ab48:	0800b98c 	.word	0x0800b98c
 800ab4c:	0800b834 	.word	0x0800b834
 800ab50:	0800b83a 	.word	0x0800b83a
 800ab54:	0800b83e 	.word	0x0800b83e
 800ab58:	080085f5 	.word	0x080085f5
 800ab5c:	0800a8c9 	.word	0x0800a8c9

0800ab60 <__swbuf_r>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	0005      	movs	r5, r0
 800ab64:	000e      	movs	r6, r1
 800ab66:	0014      	movs	r4, r2
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d004      	beq.n	800ab76 <__swbuf_r+0x16>
 800ab6c:	6983      	ldr	r3, [r0, #24]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <__swbuf_r+0x16>
 800ab72:	f000 fa07 	bl	800af84 <__sinit>
 800ab76:	4b22      	ldr	r3, [pc, #136]	; (800ac00 <__swbuf_r+0xa0>)
 800ab78:	429c      	cmp	r4, r3
 800ab7a:	d12e      	bne.n	800abda <__swbuf_r+0x7a>
 800ab7c:	686c      	ldr	r4, [r5, #4]
 800ab7e:	69a3      	ldr	r3, [r4, #24]
 800ab80:	60a3      	str	r3, [r4, #8]
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	071b      	lsls	r3, r3, #28
 800ab86:	d532      	bpl.n	800abee <__swbuf_r+0x8e>
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d02f      	beq.n	800abee <__swbuf_r+0x8e>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	6922      	ldr	r2, [r4, #16]
 800ab92:	b2f7      	uxtb	r7, r6
 800ab94:	1a98      	subs	r0, r3, r2
 800ab96:	6963      	ldr	r3, [r4, #20]
 800ab98:	b2f6      	uxtb	r6, r6
 800ab9a:	4283      	cmp	r3, r0
 800ab9c:	dc05      	bgt.n	800abaa <__swbuf_r+0x4a>
 800ab9e:	0021      	movs	r1, r4
 800aba0:	0028      	movs	r0, r5
 800aba2:	f000 f94d 	bl	800ae40 <_fflush_r>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d127      	bne.n	800abfa <__swbuf_r+0x9a>
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	3001      	adds	r0, #1
 800abae:	3b01      	subs	r3, #1
 800abb0:	60a3      	str	r3, [r4, #8]
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	6022      	str	r2, [r4, #0]
 800abb8:	701f      	strb	r7, [r3, #0]
 800abba:	6963      	ldr	r3, [r4, #20]
 800abbc:	4283      	cmp	r3, r0
 800abbe:	d004      	beq.n	800abca <__swbuf_r+0x6a>
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	07db      	lsls	r3, r3, #31
 800abc4:	d507      	bpl.n	800abd6 <__swbuf_r+0x76>
 800abc6:	2e0a      	cmp	r6, #10
 800abc8:	d105      	bne.n	800abd6 <__swbuf_r+0x76>
 800abca:	0021      	movs	r1, r4
 800abcc:	0028      	movs	r0, r5
 800abce:	f000 f937 	bl	800ae40 <_fflush_r>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d111      	bne.n	800abfa <__swbuf_r+0x9a>
 800abd6:	0030      	movs	r0, r6
 800abd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abda:	4b0a      	ldr	r3, [pc, #40]	; (800ac04 <__swbuf_r+0xa4>)
 800abdc:	429c      	cmp	r4, r3
 800abde:	d101      	bne.n	800abe4 <__swbuf_r+0x84>
 800abe0:	68ac      	ldr	r4, [r5, #8]
 800abe2:	e7cc      	b.n	800ab7e <__swbuf_r+0x1e>
 800abe4:	4b08      	ldr	r3, [pc, #32]	; (800ac08 <__swbuf_r+0xa8>)
 800abe6:	429c      	cmp	r4, r3
 800abe8:	d1c9      	bne.n	800ab7e <__swbuf_r+0x1e>
 800abea:	68ec      	ldr	r4, [r5, #12]
 800abec:	e7c7      	b.n	800ab7e <__swbuf_r+0x1e>
 800abee:	0021      	movs	r1, r4
 800abf0:	0028      	movs	r0, r5
 800abf2:	f000 f819 	bl	800ac28 <__swsetup_r>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d0c9      	beq.n	800ab8e <__swbuf_r+0x2e>
 800abfa:	2601      	movs	r6, #1
 800abfc:	4276      	negs	r6, r6
 800abfe:	e7ea      	b.n	800abd6 <__swbuf_r+0x76>
 800ac00:	0800b9ac 	.word	0x0800b9ac
 800ac04:	0800b9cc 	.word	0x0800b9cc
 800ac08:	0800b98c 	.word	0x0800b98c

0800ac0c <__ascii_wctomb>:
 800ac0c:	0003      	movs	r3, r0
 800ac0e:	1e08      	subs	r0, r1, #0
 800ac10:	d005      	beq.n	800ac1e <__ascii_wctomb+0x12>
 800ac12:	2aff      	cmp	r2, #255	; 0xff
 800ac14:	d904      	bls.n	800ac20 <__ascii_wctomb+0x14>
 800ac16:	228a      	movs	r2, #138	; 0x8a
 800ac18:	2001      	movs	r0, #1
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	4240      	negs	r0, r0
 800ac1e:	4770      	bx	lr
 800ac20:	2001      	movs	r0, #1
 800ac22:	700a      	strb	r2, [r1, #0]
 800ac24:	e7fb      	b.n	800ac1e <__ascii_wctomb+0x12>
	...

0800ac28 <__swsetup_r>:
 800ac28:	4b37      	ldr	r3, [pc, #220]	; (800ad08 <__swsetup_r+0xe0>)
 800ac2a:	b570      	push	{r4, r5, r6, lr}
 800ac2c:	681d      	ldr	r5, [r3, #0]
 800ac2e:	0006      	movs	r6, r0
 800ac30:	000c      	movs	r4, r1
 800ac32:	2d00      	cmp	r5, #0
 800ac34:	d005      	beq.n	800ac42 <__swsetup_r+0x1a>
 800ac36:	69ab      	ldr	r3, [r5, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <__swsetup_r+0x1a>
 800ac3c:	0028      	movs	r0, r5
 800ac3e:	f000 f9a1 	bl	800af84 <__sinit>
 800ac42:	4b32      	ldr	r3, [pc, #200]	; (800ad0c <__swsetup_r+0xe4>)
 800ac44:	429c      	cmp	r4, r3
 800ac46:	d10f      	bne.n	800ac68 <__swsetup_r+0x40>
 800ac48:	686c      	ldr	r4, [r5, #4]
 800ac4a:	230c      	movs	r3, #12
 800ac4c:	5ee2      	ldrsh	r2, [r4, r3]
 800ac4e:	b293      	uxth	r3, r2
 800ac50:	0711      	lsls	r1, r2, #28
 800ac52:	d42d      	bmi.n	800acb0 <__swsetup_r+0x88>
 800ac54:	06d9      	lsls	r1, r3, #27
 800ac56:	d411      	bmi.n	800ac7c <__swsetup_r+0x54>
 800ac58:	2309      	movs	r3, #9
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	6033      	str	r3, [r6, #0]
 800ac5e:	3337      	adds	r3, #55	; 0x37
 800ac60:	4313      	orrs	r3, r2
 800ac62:	81a3      	strh	r3, [r4, #12]
 800ac64:	4240      	negs	r0, r0
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
 800ac68:	4b29      	ldr	r3, [pc, #164]	; (800ad10 <__swsetup_r+0xe8>)
 800ac6a:	429c      	cmp	r4, r3
 800ac6c:	d101      	bne.n	800ac72 <__swsetup_r+0x4a>
 800ac6e:	68ac      	ldr	r4, [r5, #8]
 800ac70:	e7eb      	b.n	800ac4a <__swsetup_r+0x22>
 800ac72:	4b28      	ldr	r3, [pc, #160]	; (800ad14 <__swsetup_r+0xec>)
 800ac74:	429c      	cmp	r4, r3
 800ac76:	d1e8      	bne.n	800ac4a <__swsetup_r+0x22>
 800ac78:	68ec      	ldr	r4, [r5, #12]
 800ac7a:	e7e6      	b.n	800ac4a <__swsetup_r+0x22>
 800ac7c:	075b      	lsls	r3, r3, #29
 800ac7e:	d513      	bpl.n	800aca8 <__swsetup_r+0x80>
 800ac80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac82:	2900      	cmp	r1, #0
 800ac84:	d008      	beq.n	800ac98 <__swsetup_r+0x70>
 800ac86:	0023      	movs	r3, r4
 800ac88:	3344      	adds	r3, #68	; 0x44
 800ac8a:	4299      	cmp	r1, r3
 800ac8c:	d002      	beq.n	800ac94 <__swsetup_r+0x6c>
 800ac8e:	0030      	movs	r0, r6
 800ac90:	f7ff fb1c 	bl	800a2cc <_free_r>
 800ac94:	2300      	movs	r3, #0
 800ac96:	6363      	str	r3, [r4, #52]	; 0x34
 800ac98:	2224      	movs	r2, #36	; 0x24
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	4393      	bics	r3, r2
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	2300      	movs	r3, #0
 800aca2:	6063      	str	r3, [r4, #4]
 800aca4:	6923      	ldr	r3, [r4, #16]
 800aca6:	6023      	str	r3, [r4, #0]
 800aca8:	2308      	movs	r3, #8
 800acaa:	89a2      	ldrh	r2, [r4, #12]
 800acac:	4313      	orrs	r3, r2
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10b      	bne.n	800acce <__swsetup_r+0xa6>
 800acb6:	21a0      	movs	r1, #160	; 0xa0
 800acb8:	2280      	movs	r2, #128	; 0x80
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	0089      	lsls	r1, r1, #2
 800acbe:	0092      	lsls	r2, r2, #2
 800acc0:	400b      	ands	r3, r1
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d003      	beq.n	800acce <__swsetup_r+0xa6>
 800acc6:	0021      	movs	r1, r4
 800acc8:	0030      	movs	r0, r6
 800acca:	f000 fa27 	bl	800b11c <__smakebuf_r>
 800acce:	220c      	movs	r2, #12
 800acd0:	5ea3      	ldrsh	r3, [r4, r2]
 800acd2:	2001      	movs	r0, #1
 800acd4:	001a      	movs	r2, r3
 800acd6:	b299      	uxth	r1, r3
 800acd8:	4002      	ands	r2, r0
 800acda:	4203      	tst	r3, r0
 800acdc:	d00f      	beq.n	800acfe <__swsetup_r+0xd6>
 800acde:	2200      	movs	r2, #0
 800ace0:	60a2      	str	r2, [r4, #8]
 800ace2:	6962      	ldr	r2, [r4, #20]
 800ace4:	4252      	negs	r2, r2
 800ace6:	61a2      	str	r2, [r4, #24]
 800ace8:	2000      	movs	r0, #0
 800acea:	6922      	ldr	r2, [r4, #16]
 800acec:	4282      	cmp	r2, r0
 800acee:	d1ba      	bne.n	800ac66 <__swsetup_r+0x3e>
 800acf0:	060a      	lsls	r2, r1, #24
 800acf2:	d5b8      	bpl.n	800ac66 <__swsetup_r+0x3e>
 800acf4:	2240      	movs	r2, #64	; 0x40
 800acf6:	4313      	orrs	r3, r2
 800acf8:	81a3      	strh	r3, [r4, #12]
 800acfa:	3801      	subs	r0, #1
 800acfc:	e7b3      	b.n	800ac66 <__swsetup_r+0x3e>
 800acfe:	0788      	lsls	r0, r1, #30
 800ad00:	d400      	bmi.n	800ad04 <__swsetup_r+0xdc>
 800ad02:	6962      	ldr	r2, [r4, #20]
 800ad04:	60a2      	str	r2, [r4, #8]
 800ad06:	e7ef      	b.n	800ace8 <__swsetup_r+0xc0>
 800ad08:	20000014 	.word	0x20000014
 800ad0c:	0800b9ac 	.word	0x0800b9ac
 800ad10:	0800b9cc 	.word	0x0800b9cc
 800ad14:	0800b98c 	.word	0x0800b98c

0800ad18 <abort>:
 800ad18:	2006      	movs	r0, #6
 800ad1a:	b510      	push	{r4, lr}
 800ad1c:	f000 fa74 	bl	800b208 <raise>
 800ad20:	2001      	movs	r0, #1
 800ad22:	f7f9 fbe7 	bl	80044f4 <_exit>
	...

0800ad28 <__sflush_r>:
 800ad28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad2a:	898b      	ldrh	r3, [r1, #12]
 800ad2c:	0005      	movs	r5, r0
 800ad2e:	000c      	movs	r4, r1
 800ad30:	071a      	lsls	r2, r3, #28
 800ad32:	d45f      	bmi.n	800adf4 <__sflush_r+0xcc>
 800ad34:	684a      	ldr	r2, [r1, #4]
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	dc04      	bgt.n	800ad44 <__sflush_r+0x1c>
 800ad3a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	dc01      	bgt.n	800ad44 <__sflush_r+0x1c>
 800ad40:	2000      	movs	r0, #0
 800ad42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad44:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad46:	2f00      	cmp	r7, #0
 800ad48:	d0fa      	beq.n	800ad40 <__sflush_r+0x18>
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2180      	movs	r1, #128	; 0x80
 800ad4e:	682e      	ldr	r6, [r5, #0]
 800ad50:	602a      	str	r2, [r5, #0]
 800ad52:	001a      	movs	r2, r3
 800ad54:	0149      	lsls	r1, r1, #5
 800ad56:	400a      	ands	r2, r1
 800ad58:	420b      	tst	r3, r1
 800ad5a:	d034      	beq.n	800adc6 <__sflush_r+0x9e>
 800ad5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	075b      	lsls	r3, r3, #29
 800ad62:	d506      	bpl.n	800ad72 <__sflush_r+0x4a>
 800ad64:	6863      	ldr	r3, [r4, #4]
 800ad66:	1ac0      	subs	r0, r0, r3
 800ad68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <__sflush_r+0x4a>
 800ad6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad70:	1ac0      	subs	r0, r0, r3
 800ad72:	0002      	movs	r2, r0
 800ad74:	6a21      	ldr	r1, [r4, #32]
 800ad76:	2300      	movs	r3, #0
 800ad78:	0028      	movs	r0, r5
 800ad7a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad7c:	47b8      	blx	r7
 800ad7e:	89a1      	ldrh	r1, [r4, #12]
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d106      	bne.n	800ad92 <__sflush_r+0x6a>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	2b1d      	cmp	r3, #29
 800ad88:	d831      	bhi.n	800adee <__sflush_r+0xc6>
 800ad8a:	4a2c      	ldr	r2, [pc, #176]	; (800ae3c <__sflush_r+0x114>)
 800ad8c:	40da      	lsrs	r2, r3
 800ad8e:	07d3      	lsls	r3, r2, #31
 800ad90:	d52d      	bpl.n	800adee <__sflush_r+0xc6>
 800ad92:	2300      	movs	r3, #0
 800ad94:	6063      	str	r3, [r4, #4]
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	04cb      	lsls	r3, r1, #19
 800ad9c:	d505      	bpl.n	800adaa <__sflush_r+0x82>
 800ad9e:	1c43      	adds	r3, r0, #1
 800ada0:	d102      	bne.n	800ada8 <__sflush_r+0x80>
 800ada2:	682b      	ldr	r3, [r5, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d100      	bne.n	800adaa <__sflush_r+0x82>
 800ada8:	6560      	str	r0, [r4, #84]	; 0x54
 800adaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adac:	602e      	str	r6, [r5, #0]
 800adae:	2900      	cmp	r1, #0
 800adb0:	d0c6      	beq.n	800ad40 <__sflush_r+0x18>
 800adb2:	0023      	movs	r3, r4
 800adb4:	3344      	adds	r3, #68	; 0x44
 800adb6:	4299      	cmp	r1, r3
 800adb8:	d002      	beq.n	800adc0 <__sflush_r+0x98>
 800adba:	0028      	movs	r0, r5
 800adbc:	f7ff fa86 	bl	800a2cc <_free_r>
 800adc0:	2000      	movs	r0, #0
 800adc2:	6360      	str	r0, [r4, #52]	; 0x34
 800adc4:	e7bd      	b.n	800ad42 <__sflush_r+0x1a>
 800adc6:	2301      	movs	r3, #1
 800adc8:	0028      	movs	r0, r5
 800adca:	6a21      	ldr	r1, [r4, #32]
 800adcc:	47b8      	blx	r7
 800adce:	1c43      	adds	r3, r0, #1
 800add0:	d1c5      	bne.n	800ad5e <__sflush_r+0x36>
 800add2:	682b      	ldr	r3, [r5, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0c2      	beq.n	800ad5e <__sflush_r+0x36>
 800add8:	2b1d      	cmp	r3, #29
 800adda:	d001      	beq.n	800ade0 <__sflush_r+0xb8>
 800addc:	2b16      	cmp	r3, #22
 800adde:	d101      	bne.n	800ade4 <__sflush_r+0xbc>
 800ade0:	602e      	str	r6, [r5, #0]
 800ade2:	e7ad      	b.n	800ad40 <__sflush_r+0x18>
 800ade4:	2340      	movs	r3, #64	; 0x40
 800ade6:	89a2      	ldrh	r2, [r4, #12]
 800ade8:	4313      	orrs	r3, r2
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	e7a9      	b.n	800ad42 <__sflush_r+0x1a>
 800adee:	2340      	movs	r3, #64	; 0x40
 800adf0:	430b      	orrs	r3, r1
 800adf2:	e7fa      	b.n	800adea <__sflush_r+0xc2>
 800adf4:	690f      	ldr	r7, [r1, #16]
 800adf6:	2f00      	cmp	r7, #0
 800adf8:	d0a2      	beq.n	800ad40 <__sflush_r+0x18>
 800adfa:	680a      	ldr	r2, [r1, #0]
 800adfc:	600f      	str	r7, [r1, #0]
 800adfe:	1bd2      	subs	r2, r2, r7
 800ae00:	9201      	str	r2, [sp, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	079b      	lsls	r3, r3, #30
 800ae06:	d100      	bne.n	800ae0a <__sflush_r+0xe2>
 800ae08:	694a      	ldr	r2, [r1, #20]
 800ae0a:	60a2      	str	r2, [r4, #8]
 800ae0c:	9b01      	ldr	r3, [sp, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	dc00      	bgt.n	800ae14 <__sflush_r+0xec>
 800ae12:	e795      	b.n	800ad40 <__sflush_r+0x18>
 800ae14:	003a      	movs	r2, r7
 800ae16:	0028      	movs	r0, r5
 800ae18:	9b01      	ldr	r3, [sp, #4]
 800ae1a:	6a21      	ldr	r1, [r4, #32]
 800ae1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae1e:	47b0      	blx	r6
 800ae20:	2800      	cmp	r0, #0
 800ae22:	dc06      	bgt.n	800ae32 <__sflush_r+0x10a>
 800ae24:	2340      	movs	r3, #64	; 0x40
 800ae26:	2001      	movs	r0, #1
 800ae28:	89a2      	ldrh	r2, [r4, #12]
 800ae2a:	4240      	negs	r0, r0
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	81a3      	strh	r3, [r4, #12]
 800ae30:	e787      	b.n	800ad42 <__sflush_r+0x1a>
 800ae32:	9b01      	ldr	r3, [sp, #4]
 800ae34:	183f      	adds	r7, r7, r0
 800ae36:	1a1b      	subs	r3, r3, r0
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	e7e7      	b.n	800ae0c <__sflush_r+0xe4>
 800ae3c:	20400001 	.word	0x20400001

0800ae40 <_fflush_r>:
 800ae40:	690b      	ldr	r3, [r1, #16]
 800ae42:	b570      	push	{r4, r5, r6, lr}
 800ae44:	0005      	movs	r5, r0
 800ae46:	000c      	movs	r4, r1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <_fflush_r+0x12>
 800ae4c:	2500      	movs	r5, #0
 800ae4e:	0028      	movs	r0, r5
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d004      	beq.n	800ae60 <_fflush_r+0x20>
 800ae56:	6983      	ldr	r3, [r0, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <_fflush_r+0x20>
 800ae5c:	f000 f892 	bl	800af84 <__sinit>
 800ae60:	4b14      	ldr	r3, [pc, #80]	; (800aeb4 <_fflush_r+0x74>)
 800ae62:	429c      	cmp	r4, r3
 800ae64:	d11b      	bne.n	800ae9e <_fflush_r+0x5e>
 800ae66:	686c      	ldr	r4, [r5, #4]
 800ae68:	220c      	movs	r2, #12
 800ae6a:	5ea3      	ldrsh	r3, [r4, r2]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d0ed      	beq.n	800ae4c <_fflush_r+0xc>
 800ae70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae72:	07d2      	lsls	r2, r2, #31
 800ae74:	d404      	bmi.n	800ae80 <_fflush_r+0x40>
 800ae76:	059b      	lsls	r3, r3, #22
 800ae78:	d402      	bmi.n	800ae80 <_fflush_r+0x40>
 800ae7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7c:	f000 f923 	bl	800b0c6 <__retarget_lock_acquire_recursive>
 800ae80:	0028      	movs	r0, r5
 800ae82:	0021      	movs	r1, r4
 800ae84:	f7ff ff50 	bl	800ad28 <__sflush_r>
 800ae88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae8a:	0005      	movs	r5, r0
 800ae8c:	07db      	lsls	r3, r3, #31
 800ae8e:	d4de      	bmi.n	800ae4e <_fflush_r+0xe>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	059b      	lsls	r3, r3, #22
 800ae94:	d4db      	bmi.n	800ae4e <_fflush_r+0xe>
 800ae96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae98:	f000 f916 	bl	800b0c8 <__retarget_lock_release_recursive>
 800ae9c:	e7d7      	b.n	800ae4e <_fflush_r+0xe>
 800ae9e:	4b06      	ldr	r3, [pc, #24]	; (800aeb8 <_fflush_r+0x78>)
 800aea0:	429c      	cmp	r4, r3
 800aea2:	d101      	bne.n	800aea8 <_fflush_r+0x68>
 800aea4:	68ac      	ldr	r4, [r5, #8]
 800aea6:	e7df      	b.n	800ae68 <_fflush_r+0x28>
 800aea8:	4b04      	ldr	r3, [pc, #16]	; (800aebc <_fflush_r+0x7c>)
 800aeaa:	429c      	cmp	r4, r3
 800aeac:	d1dc      	bne.n	800ae68 <_fflush_r+0x28>
 800aeae:	68ec      	ldr	r4, [r5, #12]
 800aeb0:	e7da      	b.n	800ae68 <_fflush_r+0x28>
 800aeb2:	46c0      	nop			; (mov r8, r8)
 800aeb4:	0800b9ac 	.word	0x0800b9ac
 800aeb8:	0800b9cc 	.word	0x0800b9cc
 800aebc:	0800b98c 	.word	0x0800b98c

0800aec0 <std>:
 800aec0:	2300      	movs	r3, #0
 800aec2:	b510      	push	{r4, lr}
 800aec4:	0004      	movs	r4, r0
 800aec6:	6003      	str	r3, [r0, #0]
 800aec8:	6043      	str	r3, [r0, #4]
 800aeca:	6083      	str	r3, [r0, #8]
 800aecc:	8181      	strh	r1, [r0, #12]
 800aece:	6643      	str	r3, [r0, #100]	; 0x64
 800aed0:	0019      	movs	r1, r3
 800aed2:	81c2      	strh	r2, [r0, #14]
 800aed4:	6103      	str	r3, [r0, #16]
 800aed6:	6143      	str	r3, [r0, #20]
 800aed8:	6183      	str	r3, [r0, #24]
 800aeda:	2208      	movs	r2, #8
 800aedc:	305c      	adds	r0, #92	; 0x5c
 800aede:	f7fd fad6 	bl	800848e <memset>
 800aee2:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <std+0x38>)
 800aee4:	6224      	str	r4, [r4, #32]
 800aee6:	6263      	str	r3, [r4, #36]	; 0x24
 800aee8:	4b04      	ldr	r3, [pc, #16]	; (800aefc <std+0x3c>)
 800aeea:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeec:	4b04      	ldr	r3, [pc, #16]	; (800af00 <std+0x40>)
 800aeee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aef0:	4b04      	ldr	r3, [pc, #16]	; (800af04 <std+0x44>)
 800aef2:	6323      	str	r3, [r4, #48]	; 0x30
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	0800b249 	.word	0x0800b249
 800aefc:	0800b271 	.word	0x0800b271
 800af00:	0800b2a9 	.word	0x0800b2a9
 800af04:	0800b2d5 	.word	0x0800b2d5

0800af08 <_cleanup_r>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	4902      	ldr	r1, [pc, #8]	; (800af14 <_cleanup_r+0xc>)
 800af0c:	f000 f8ba 	bl	800b084 <_fwalk_reent>
 800af10:	bd10      	pop	{r4, pc}
 800af12:	46c0      	nop			; (mov r8, r8)
 800af14:	0800ae41 	.word	0x0800ae41

0800af18 <__sfmoreglue>:
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	2568      	movs	r5, #104	; 0x68
 800af1c:	1e4a      	subs	r2, r1, #1
 800af1e:	4355      	muls	r5, r2
 800af20:	000e      	movs	r6, r1
 800af22:	0029      	movs	r1, r5
 800af24:	3174      	adds	r1, #116	; 0x74
 800af26:	f7ff fa3d 	bl	800a3a4 <_malloc_r>
 800af2a:	1e04      	subs	r4, r0, #0
 800af2c:	d008      	beq.n	800af40 <__sfmoreglue+0x28>
 800af2e:	2100      	movs	r1, #0
 800af30:	002a      	movs	r2, r5
 800af32:	6001      	str	r1, [r0, #0]
 800af34:	6046      	str	r6, [r0, #4]
 800af36:	300c      	adds	r0, #12
 800af38:	60a0      	str	r0, [r4, #8]
 800af3a:	3268      	adds	r2, #104	; 0x68
 800af3c:	f7fd faa7 	bl	800848e <memset>
 800af40:	0020      	movs	r0, r4
 800af42:	bd70      	pop	{r4, r5, r6, pc}

0800af44 <__sfp_lock_acquire>:
 800af44:	b510      	push	{r4, lr}
 800af46:	4802      	ldr	r0, [pc, #8]	; (800af50 <__sfp_lock_acquire+0xc>)
 800af48:	f000 f8bd 	bl	800b0c6 <__retarget_lock_acquire_recursive>
 800af4c:	bd10      	pop	{r4, pc}
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	200004dd 	.word	0x200004dd

0800af54 <__sfp_lock_release>:
 800af54:	b510      	push	{r4, lr}
 800af56:	4802      	ldr	r0, [pc, #8]	; (800af60 <__sfp_lock_release+0xc>)
 800af58:	f000 f8b6 	bl	800b0c8 <__retarget_lock_release_recursive>
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	46c0      	nop			; (mov r8, r8)
 800af60:	200004dd 	.word	0x200004dd

0800af64 <__sinit_lock_acquire>:
 800af64:	b510      	push	{r4, lr}
 800af66:	4802      	ldr	r0, [pc, #8]	; (800af70 <__sinit_lock_acquire+0xc>)
 800af68:	f000 f8ad 	bl	800b0c6 <__retarget_lock_acquire_recursive>
 800af6c:	bd10      	pop	{r4, pc}
 800af6e:	46c0      	nop			; (mov r8, r8)
 800af70:	200004de 	.word	0x200004de

0800af74 <__sinit_lock_release>:
 800af74:	b510      	push	{r4, lr}
 800af76:	4802      	ldr	r0, [pc, #8]	; (800af80 <__sinit_lock_release+0xc>)
 800af78:	f000 f8a6 	bl	800b0c8 <__retarget_lock_release_recursive>
 800af7c:	bd10      	pop	{r4, pc}
 800af7e:	46c0      	nop			; (mov r8, r8)
 800af80:	200004de 	.word	0x200004de

0800af84 <__sinit>:
 800af84:	b513      	push	{r0, r1, r4, lr}
 800af86:	0004      	movs	r4, r0
 800af88:	f7ff ffec 	bl	800af64 <__sinit_lock_acquire>
 800af8c:	69a3      	ldr	r3, [r4, #24]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <__sinit+0x14>
 800af92:	f7ff ffef 	bl	800af74 <__sinit_lock_release>
 800af96:	bd13      	pop	{r0, r1, r4, pc}
 800af98:	64a3      	str	r3, [r4, #72]	; 0x48
 800af9a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800af9c:	6523      	str	r3, [r4, #80]	; 0x50
 800af9e:	4b13      	ldr	r3, [pc, #76]	; (800afec <__sinit+0x68>)
 800afa0:	4a13      	ldr	r2, [pc, #76]	; (800aff0 <__sinit+0x6c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	62a2      	str	r2, [r4, #40]	; 0x28
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	42a3      	cmp	r3, r4
 800afaa:	d101      	bne.n	800afb0 <__sinit+0x2c>
 800afac:	2301      	movs	r3, #1
 800afae:	61a3      	str	r3, [r4, #24]
 800afb0:	0020      	movs	r0, r4
 800afb2:	f000 f81f 	bl	800aff4 <__sfp>
 800afb6:	6060      	str	r0, [r4, #4]
 800afb8:	0020      	movs	r0, r4
 800afba:	f000 f81b 	bl	800aff4 <__sfp>
 800afbe:	60a0      	str	r0, [r4, #8]
 800afc0:	0020      	movs	r0, r4
 800afc2:	f000 f817 	bl	800aff4 <__sfp>
 800afc6:	2200      	movs	r2, #0
 800afc8:	2104      	movs	r1, #4
 800afca:	60e0      	str	r0, [r4, #12]
 800afcc:	6860      	ldr	r0, [r4, #4]
 800afce:	f7ff ff77 	bl	800aec0 <std>
 800afd2:	2201      	movs	r2, #1
 800afd4:	2109      	movs	r1, #9
 800afd6:	68a0      	ldr	r0, [r4, #8]
 800afd8:	f7ff ff72 	bl	800aec0 <std>
 800afdc:	2202      	movs	r2, #2
 800afde:	2112      	movs	r1, #18
 800afe0:	68e0      	ldr	r0, [r4, #12]
 800afe2:	f7ff ff6d 	bl	800aec0 <std>
 800afe6:	2301      	movs	r3, #1
 800afe8:	61a3      	str	r3, [r4, #24]
 800afea:	e7d2      	b.n	800af92 <__sinit+0xe>
 800afec:	0800b610 	.word	0x0800b610
 800aff0:	0800af09 	.word	0x0800af09

0800aff4 <__sfp>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	0007      	movs	r7, r0
 800aff8:	f7ff ffa4 	bl	800af44 <__sfp_lock_acquire>
 800affc:	4b1f      	ldr	r3, [pc, #124]	; (800b07c <__sfp+0x88>)
 800affe:	681e      	ldr	r6, [r3, #0]
 800b000:	69b3      	ldr	r3, [r6, #24]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d102      	bne.n	800b00c <__sfp+0x18>
 800b006:	0030      	movs	r0, r6
 800b008:	f7ff ffbc 	bl	800af84 <__sinit>
 800b00c:	3648      	adds	r6, #72	; 0x48
 800b00e:	68b4      	ldr	r4, [r6, #8]
 800b010:	6873      	ldr	r3, [r6, #4]
 800b012:	3b01      	subs	r3, #1
 800b014:	d504      	bpl.n	800b020 <__sfp+0x2c>
 800b016:	6833      	ldr	r3, [r6, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d022      	beq.n	800b062 <__sfp+0x6e>
 800b01c:	6836      	ldr	r6, [r6, #0]
 800b01e:	e7f6      	b.n	800b00e <__sfp+0x1a>
 800b020:	220c      	movs	r2, #12
 800b022:	5ea5      	ldrsh	r5, [r4, r2]
 800b024:	2d00      	cmp	r5, #0
 800b026:	d11a      	bne.n	800b05e <__sfp+0x6a>
 800b028:	0020      	movs	r0, r4
 800b02a:	4b15      	ldr	r3, [pc, #84]	; (800b080 <__sfp+0x8c>)
 800b02c:	3058      	adds	r0, #88	; 0x58
 800b02e:	60e3      	str	r3, [r4, #12]
 800b030:	6665      	str	r5, [r4, #100]	; 0x64
 800b032:	f000 f847 	bl	800b0c4 <__retarget_lock_init_recursive>
 800b036:	f7ff ff8d 	bl	800af54 <__sfp_lock_release>
 800b03a:	0020      	movs	r0, r4
 800b03c:	2208      	movs	r2, #8
 800b03e:	0029      	movs	r1, r5
 800b040:	6025      	str	r5, [r4, #0]
 800b042:	60a5      	str	r5, [r4, #8]
 800b044:	6065      	str	r5, [r4, #4]
 800b046:	6125      	str	r5, [r4, #16]
 800b048:	6165      	str	r5, [r4, #20]
 800b04a:	61a5      	str	r5, [r4, #24]
 800b04c:	305c      	adds	r0, #92	; 0x5c
 800b04e:	f7fd fa1e 	bl	800848e <memset>
 800b052:	6365      	str	r5, [r4, #52]	; 0x34
 800b054:	63a5      	str	r5, [r4, #56]	; 0x38
 800b056:	64a5      	str	r5, [r4, #72]	; 0x48
 800b058:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b05a:	0020      	movs	r0, r4
 800b05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05e:	3468      	adds	r4, #104	; 0x68
 800b060:	e7d7      	b.n	800b012 <__sfp+0x1e>
 800b062:	2104      	movs	r1, #4
 800b064:	0038      	movs	r0, r7
 800b066:	f7ff ff57 	bl	800af18 <__sfmoreglue>
 800b06a:	1e04      	subs	r4, r0, #0
 800b06c:	6030      	str	r0, [r6, #0]
 800b06e:	d1d5      	bne.n	800b01c <__sfp+0x28>
 800b070:	f7ff ff70 	bl	800af54 <__sfp_lock_release>
 800b074:	230c      	movs	r3, #12
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	e7ef      	b.n	800b05a <__sfp+0x66>
 800b07a:	46c0      	nop			; (mov r8, r8)
 800b07c:	0800b610 	.word	0x0800b610
 800b080:	ffff0001 	.word	0xffff0001

0800b084 <_fwalk_reent>:
 800b084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b086:	0004      	movs	r4, r0
 800b088:	0006      	movs	r6, r0
 800b08a:	2700      	movs	r7, #0
 800b08c:	9101      	str	r1, [sp, #4]
 800b08e:	3448      	adds	r4, #72	; 0x48
 800b090:	6863      	ldr	r3, [r4, #4]
 800b092:	68a5      	ldr	r5, [r4, #8]
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	9b00      	ldr	r3, [sp, #0]
 800b098:	3b01      	subs	r3, #1
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	d504      	bpl.n	800b0a8 <_fwalk_reent+0x24>
 800b09e:	6824      	ldr	r4, [r4, #0]
 800b0a0:	2c00      	cmp	r4, #0
 800b0a2:	d1f5      	bne.n	800b090 <_fwalk_reent+0xc>
 800b0a4:	0038      	movs	r0, r7
 800b0a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0a8:	89ab      	ldrh	r3, [r5, #12]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d908      	bls.n	800b0c0 <_fwalk_reent+0x3c>
 800b0ae:	220e      	movs	r2, #14
 800b0b0:	5eab      	ldrsh	r3, [r5, r2]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	d004      	beq.n	800b0c0 <_fwalk_reent+0x3c>
 800b0b6:	0029      	movs	r1, r5
 800b0b8:	0030      	movs	r0, r6
 800b0ba:	9b01      	ldr	r3, [sp, #4]
 800b0bc:	4798      	blx	r3
 800b0be:	4307      	orrs	r7, r0
 800b0c0:	3568      	adds	r5, #104	; 0x68
 800b0c2:	e7e8      	b.n	800b096 <_fwalk_reent+0x12>

0800b0c4 <__retarget_lock_init_recursive>:
 800b0c4:	4770      	bx	lr

0800b0c6 <__retarget_lock_acquire_recursive>:
 800b0c6:	4770      	bx	lr

0800b0c8 <__retarget_lock_release_recursive>:
 800b0c8:	4770      	bx	lr
	...

0800b0cc <__swhatbuf_r>:
 800b0cc:	b570      	push	{r4, r5, r6, lr}
 800b0ce:	000e      	movs	r6, r1
 800b0d0:	001d      	movs	r5, r3
 800b0d2:	230e      	movs	r3, #14
 800b0d4:	5ec9      	ldrsh	r1, [r1, r3]
 800b0d6:	0014      	movs	r4, r2
 800b0d8:	b096      	sub	sp, #88	; 0x58
 800b0da:	2900      	cmp	r1, #0
 800b0dc:	da08      	bge.n	800b0f0 <__swhatbuf_r+0x24>
 800b0de:	220c      	movs	r2, #12
 800b0e0:	5eb3      	ldrsh	r3, [r6, r2]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	602a      	str	r2, [r5, #0]
 800b0e6:	061b      	lsls	r3, r3, #24
 800b0e8:	d411      	bmi.n	800b10e <__swhatbuf_r+0x42>
 800b0ea:	2380      	movs	r3, #128	; 0x80
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	e00f      	b.n	800b110 <__swhatbuf_r+0x44>
 800b0f0:	466a      	mov	r2, sp
 800b0f2:	f000 f91b 	bl	800b32c <_fstat_r>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	dbf1      	blt.n	800b0de <__swhatbuf_r+0x12>
 800b0fa:	23f0      	movs	r3, #240	; 0xf0
 800b0fc:	9901      	ldr	r1, [sp, #4]
 800b0fe:	021b      	lsls	r3, r3, #8
 800b100:	4019      	ands	r1, r3
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <__swhatbuf_r+0x4c>)
 800b104:	18c9      	adds	r1, r1, r3
 800b106:	424b      	negs	r3, r1
 800b108:	4159      	adcs	r1, r3
 800b10a:	6029      	str	r1, [r5, #0]
 800b10c:	e7ed      	b.n	800b0ea <__swhatbuf_r+0x1e>
 800b10e:	2340      	movs	r3, #64	; 0x40
 800b110:	2000      	movs	r0, #0
 800b112:	6023      	str	r3, [r4, #0]
 800b114:	b016      	add	sp, #88	; 0x58
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	ffffe000 	.word	0xffffe000

0800b11c <__smakebuf_r>:
 800b11c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b11e:	2602      	movs	r6, #2
 800b120:	898b      	ldrh	r3, [r1, #12]
 800b122:	0005      	movs	r5, r0
 800b124:	000c      	movs	r4, r1
 800b126:	4233      	tst	r3, r6
 800b128:	d006      	beq.n	800b138 <__smakebuf_r+0x1c>
 800b12a:	0023      	movs	r3, r4
 800b12c:	3347      	adds	r3, #71	; 0x47
 800b12e:	6023      	str	r3, [r4, #0]
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	2301      	movs	r3, #1
 800b134:	6163      	str	r3, [r4, #20]
 800b136:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b138:	466a      	mov	r2, sp
 800b13a:	ab01      	add	r3, sp, #4
 800b13c:	f7ff ffc6 	bl	800b0cc <__swhatbuf_r>
 800b140:	9900      	ldr	r1, [sp, #0]
 800b142:	0007      	movs	r7, r0
 800b144:	0028      	movs	r0, r5
 800b146:	f7ff f92d 	bl	800a3a4 <_malloc_r>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d108      	bne.n	800b160 <__smakebuf_r+0x44>
 800b14e:	220c      	movs	r2, #12
 800b150:	5ea3      	ldrsh	r3, [r4, r2]
 800b152:	059a      	lsls	r2, r3, #22
 800b154:	d4ef      	bmi.n	800b136 <__smakebuf_r+0x1a>
 800b156:	2203      	movs	r2, #3
 800b158:	4393      	bics	r3, r2
 800b15a:	431e      	orrs	r6, r3
 800b15c:	81a6      	strh	r6, [r4, #12]
 800b15e:	e7e4      	b.n	800b12a <__smakebuf_r+0xe>
 800b160:	4b0f      	ldr	r3, [pc, #60]	; (800b1a0 <__smakebuf_r+0x84>)
 800b162:	62ab      	str	r3, [r5, #40]	; 0x28
 800b164:	2380      	movs	r3, #128	; 0x80
 800b166:	89a2      	ldrh	r2, [r4, #12]
 800b168:	6020      	str	r0, [r4, #0]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	81a3      	strh	r3, [r4, #12]
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	6120      	str	r0, [r4, #16]
 800b172:	6163      	str	r3, [r4, #20]
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00d      	beq.n	800b196 <__smakebuf_r+0x7a>
 800b17a:	0028      	movs	r0, r5
 800b17c:	230e      	movs	r3, #14
 800b17e:	5ee1      	ldrsh	r1, [r4, r3]
 800b180:	f000 f8e6 	bl	800b350 <_isatty_r>
 800b184:	2800      	cmp	r0, #0
 800b186:	d006      	beq.n	800b196 <__smakebuf_r+0x7a>
 800b188:	2203      	movs	r2, #3
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	4393      	bics	r3, r2
 800b18e:	001a      	movs	r2, r3
 800b190:	2301      	movs	r3, #1
 800b192:	4313      	orrs	r3, r2
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	89a0      	ldrh	r0, [r4, #12]
 800b198:	4307      	orrs	r7, r0
 800b19a:	81a7      	strh	r7, [r4, #12]
 800b19c:	e7cb      	b.n	800b136 <__smakebuf_r+0x1a>
 800b19e:	46c0      	nop			; (mov r8, r8)
 800b1a0:	0800af09 	.word	0x0800af09

0800b1a4 <_malloc_usable_size_r>:
 800b1a4:	1f0b      	subs	r3, r1, #4
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	1f18      	subs	r0, r3, #4
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	da01      	bge.n	800b1b2 <_malloc_usable_size_r+0xe>
 800b1ae:	580b      	ldr	r3, [r1, r0]
 800b1b0:	18c0      	adds	r0, r0, r3
 800b1b2:	4770      	bx	lr

0800b1b4 <_raise_r>:
 800b1b4:	b570      	push	{r4, r5, r6, lr}
 800b1b6:	0004      	movs	r4, r0
 800b1b8:	000d      	movs	r5, r1
 800b1ba:	291f      	cmp	r1, #31
 800b1bc:	d904      	bls.n	800b1c8 <_raise_r+0x14>
 800b1be:	2316      	movs	r3, #22
 800b1c0:	6003      	str	r3, [r0, #0]
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	4240      	negs	r0, r0
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}
 800b1c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d004      	beq.n	800b1d8 <_raise_r+0x24>
 800b1ce:	008a      	lsls	r2, r1, #2
 800b1d0:	189b      	adds	r3, r3, r2
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	2a00      	cmp	r2, #0
 800b1d6:	d108      	bne.n	800b1ea <_raise_r+0x36>
 800b1d8:	0020      	movs	r0, r4
 800b1da:	f000 f831 	bl	800b240 <_getpid_r>
 800b1de:	002a      	movs	r2, r5
 800b1e0:	0001      	movs	r1, r0
 800b1e2:	0020      	movs	r0, r4
 800b1e4:	f000 f81a 	bl	800b21c <_kill_r>
 800b1e8:	e7ed      	b.n	800b1c6 <_raise_r+0x12>
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	2a01      	cmp	r2, #1
 800b1ee:	d0ea      	beq.n	800b1c6 <_raise_r+0x12>
 800b1f0:	1c51      	adds	r1, r2, #1
 800b1f2:	d103      	bne.n	800b1fc <_raise_r+0x48>
 800b1f4:	2316      	movs	r3, #22
 800b1f6:	3001      	adds	r0, #1
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	e7e4      	b.n	800b1c6 <_raise_r+0x12>
 800b1fc:	2400      	movs	r4, #0
 800b1fe:	0028      	movs	r0, r5
 800b200:	601c      	str	r4, [r3, #0]
 800b202:	4790      	blx	r2
 800b204:	0020      	movs	r0, r4
 800b206:	e7de      	b.n	800b1c6 <_raise_r+0x12>

0800b208 <raise>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	4b03      	ldr	r3, [pc, #12]	; (800b218 <raise+0x10>)
 800b20c:	0001      	movs	r1, r0
 800b20e:	6818      	ldr	r0, [r3, #0]
 800b210:	f7ff ffd0 	bl	800b1b4 <_raise_r>
 800b214:	bd10      	pop	{r4, pc}
 800b216:	46c0      	nop			; (mov r8, r8)
 800b218:	20000014 	.word	0x20000014

0800b21c <_kill_r>:
 800b21c:	2300      	movs	r3, #0
 800b21e:	b570      	push	{r4, r5, r6, lr}
 800b220:	4d06      	ldr	r5, [pc, #24]	; (800b23c <_kill_r+0x20>)
 800b222:	0004      	movs	r4, r0
 800b224:	0008      	movs	r0, r1
 800b226:	0011      	movs	r1, r2
 800b228:	602b      	str	r3, [r5, #0]
 800b22a:	f7f9 f953 	bl	80044d4 <_kill>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d103      	bne.n	800b23a <_kill_r+0x1e>
 800b232:	682b      	ldr	r3, [r5, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d000      	beq.n	800b23a <_kill_r+0x1e>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	200004d8 	.word	0x200004d8

0800b240 <_getpid_r>:
 800b240:	b510      	push	{r4, lr}
 800b242:	f7f9 f941 	bl	80044c8 <_getpid>
 800b246:	bd10      	pop	{r4, pc}

0800b248 <__sread>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	000c      	movs	r4, r1
 800b24c:	250e      	movs	r5, #14
 800b24e:	5f49      	ldrsh	r1, [r1, r5]
 800b250:	f000 f8a4 	bl	800b39c <_read_r>
 800b254:	2800      	cmp	r0, #0
 800b256:	db03      	blt.n	800b260 <__sread+0x18>
 800b258:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b25a:	181b      	adds	r3, r3, r0
 800b25c:	6563      	str	r3, [r4, #84]	; 0x54
 800b25e:	bd70      	pop	{r4, r5, r6, pc}
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	4a02      	ldr	r2, [pc, #8]	; (800b26c <__sread+0x24>)
 800b264:	4013      	ands	r3, r2
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	e7f9      	b.n	800b25e <__sread+0x16>
 800b26a:	46c0      	nop			; (mov r8, r8)
 800b26c:	ffffefff 	.word	0xffffefff

0800b270 <__swrite>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	001f      	movs	r7, r3
 800b274:	898b      	ldrh	r3, [r1, #12]
 800b276:	0005      	movs	r5, r0
 800b278:	000c      	movs	r4, r1
 800b27a:	0016      	movs	r6, r2
 800b27c:	05db      	lsls	r3, r3, #23
 800b27e:	d505      	bpl.n	800b28c <__swrite+0x1c>
 800b280:	230e      	movs	r3, #14
 800b282:	5ec9      	ldrsh	r1, [r1, r3]
 800b284:	2200      	movs	r2, #0
 800b286:	2302      	movs	r3, #2
 800b288:	f000 f874 	bl	800b374 <_lseek_r>
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	4a05      	ldr	r2, [pc, #20]	; (800b2a4 <__swrite+0x34>)
 800b290:	0028      	movs	r0, r5
 800b292:	4013      	ands	r3, r2
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	0032      	movs	r2, r6
 800b298:	230e      	movs	r3, #14
 800b29a:	5ee1      	ldrsh	r1, [r4, r3]
 800b29c:	003b      	movs	r3, r7
 800b29e:	f000 f81f 	bl	800b2e0 <_write_r>
 800b2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a4:	ffffefff 	.word	0xffffefff

0800b2a8 <__sseek>:
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	000c      	movs	r4, r1
 800b2ac:	250e      	movs	r5, #14
 800b2ae:	5f49      	ldrsh	r1, [r1, r5]
 800b2b0:	f000 f860 	bl	800b374 <_lseek_r>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	1c42      	adds	r2, r0, #1
 800b2b8:	d103      	bne.n	800b2c2 <__sseek+0x1a>
 800b2ba:	4a05      	ldr	r2, [pc, #20]	; (800b2d0 <__sseek+0x28>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	bd70      	pop	{r4, r5, r6, pc}
 800b2c2:	2280      	movs	r2, #128	; 0x80
 800b2c4:	0152      	lsls	r2, r2, #5
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	81a3      	strh	r3, [r4, #12]
 800b2ca:	6560      	str	r0, [r4, #84]	; 0x54
 800b2cc:	e7f8      	b.n	800b2c0 <__sseek+0x18>
 800b2ce:	46c0      	nop			; (mov r8, r8)
 800b2d0:	ffffefff 	.word	0xffffefff

0800b2d4 <__sclose>:
 800b2d4:	b510      	push	{r4, lr}
 800b2d6:	230e      	movs	r3, #14
 800b2d8:	5ec9      	ldrsh	r1, [r1, r3]
 800b2da:	f000 f815 	bl	800b308 <_close_r>
 800b2de:	bd10      	pop	{r4, pc}

0800b2e0 <_write_r>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	0004      	movs	r4, r0
 800b2e4:	0008      	movs	r0, r1
 800b2e6:	0011      	movs	r1, r2
 800b2e8:	001a      	movs	r2, r3
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	4d05      	ldr	r5, [pc, #20]	; (800b304 <_write_r+0x24>)
 800b2ee:	602b      	str	r3, [r5, #0]
 800b2f0:	f7f9 f929 	bl	8004546 <_write>
 800b2f4:	1c43      	adds	r3, r0, #1
 800b2f6:	d103      	bne.n	800b300 <_write_r+0x20>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d000      	beq.n	800b300 <_write_r+0x20>
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	bd70      	pop	{r4, r5, r6, pc}
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	200004d8 	.word	0x200004d8

0800b308 <_close_r>:
 800b308:	2300      	movs	r3, #0
 800b30a:	b570      	push	{r4, r5, r6, lr}
 800b30c:	4d06      	ldr	r5, [pc, #24]	; (800b328 <_close_r+0x20>)
 800b30e:	0004      	movs	r4, r0
 800b310:	0008      	movs	r0, r1
 800b312:	602b      	str	r3, [r5, #0]
 800b314:	f7f9 f933 	bl	800457e <_close>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d103      	bne.n	800b324 <_close_r+0x1c>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d000      	beq.n	800b324 <_close_r+0x1c>
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	bd70      	pop	{r4, r5, r6, pc}
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	200004d8 	.word	0x200004d8

0800b32c <_fstat_r>:
 800b32c:	2300      	movs	r3, #0
 800b32e:	b570      	push	{r4, r5, r6, lr}
 800b330:	4d06      	ldr	r5, [pc, #24]	; (800b34c <_fstat_r+0x20>)
 800b332:	0004      	movs	r4, r0
 800b334:	0008      	movs	r0, r1
 800b336:	0011      	movs	r1, r2
 800b338:	602b      	str	r3, [r5, #0]
 800b33a:	f7f9 f92a 	bl	8004592 <_fstat>
 800b33e:	1c43      	adds	r3, r0, #1
 800b340:	d103      	bne.n	800b34a <_fstat_r+0x1e>
 800b342:	682b      	ldr	r3, [r5, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d000      	beq.n	800b34a <_fstat_r+0x1e>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	200004d8 	.word	0x200004d8

0800b350 <_isatty_r>:
 800b350:	2300      	movs	r3, #0
 800b352:	b570      	push	{r4, r5, r6, lr}
 800b354:	4d06      	ldr	r5, [pc, #24]	; (800b370 <_isatty_r+0x20>)
 800b356:	0004      	movs	r4, r0
 800b358:	0008      	movs	r0, r1
 800b35a:	602b      	str	r3, [r5, #0]
 800b35c:	f7f9 f927 	bl	80045ae <_isatty>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d103      	bne.n	800b36c <_isatty_r+0x1c>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d000      	beq.n	800b36c <_isatty_r+0x1c>
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	bd70      	pop	{r4, r5, r6, pc}
 800b36e:	46c0      	nop			; (mov r8, r8)
 800b370:	200004d8 	.word	0x200004d8

0800b374 <_lseek_r>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	0004      	movs	r4, r0
 800b378:	0008      	movs	r0, r1
 800b37a:	0011      	movs	r1, r2
 800b37c:	001a      	movs	r2, r3
 800b37e:	2300      	movs	r3, #0
 800b380:	4d05      	ldr	r5, [pc, #20]	; (800b398 <_lseek_r+0x24>)
 800b382:	602b      	str	r3, [r5, #0]
 800b384:	f7f9 f91c 	bl	80045c0 <_lseek>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d103      	bne.n	800b394 <_lseek_r+0x20>
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d000      	beq.n	800b394 <_lseek_r+0x20>
 800b392:	6023      	str	r3, [r4, #0]
 800b394:	bd70      	pop	{r4, r5, r6, pc}
 800b396:	46c0      	nop			; (mov r8, r8)
 800b398:	200004d8 	.word	0x200004d8

0800b39c <_read_r>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	0004      	movs	r4, r0
 800b3a0:	0008      	movs	r0, r1
 800b3a2:	0011      	movs	r1, r2
 800b3a4:	001a      	movs	r2, r3
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4d05      	ldr	r5, [pc, #20]	; (800b3c0 <_read_r+0x24>)
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	f7f9 f8ae 	bl	800450c <_read>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d103      	bne.n	800b3bc <_read_r+0x20>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d000      	beq.n	800b3bc <_read_r+0x20>
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	bd70      	pop	{r4, r5, r6, pc}
 800b3be:	46c0      	nop			; (mov r8, r8)
 800b3c0:	200004d8 	.word	0x200004d8

0800b3c4 <_init>:
 800b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c6:	46c0      	nop			; (mov r8, r8)
 800b3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ca:	bc08      	pop	{r3}
 800b3cc:	469e      	mov	lr, r3
 800b3ce:	4770      	bx	lr

0800b3d0 <_fini>:
 800b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d2:	46c0      	nop			; (mov r8, r8)
 800b3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d6:	bc08      	pop	{r3}
 800b3d8:	469e      	mov	lr, r3
 800b3da:	4770      	bx	lr
