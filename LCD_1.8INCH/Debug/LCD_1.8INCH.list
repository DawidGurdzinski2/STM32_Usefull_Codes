
LCD_1.8INCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000529c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce4  08005ce4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005ce4  08005ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cec  08005cec  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cec  08005cec  00015cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000080  08005d74  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08005d74  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012088  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb7  00000000  00000000  00032138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00034cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00035db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a03  00000000  00000000  00036d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a0a  00000000  00000000  0005071b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb02  00000000  00000000  00065125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101c27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c08  00000000  00000000  00101c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000080 	.word	0x20000080
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005418 	.word	0x08005418

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000084 	.word	0x20000084
 80001d0:	08005418 	.word	0x08005418

080001d4 <__aeabi_dmul>:
 80001d4:	b570      	push	{r4, r5, r6, lr}
 80001d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e2:	bf1d      	ittte	ne
 80001e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e8:	ea94 0f0c 	teqne	r4, ip
 80001ec:	ea95 0f0c 	teqne	r5, ip
 80001f0:	f000 f8de 	bleq	80003b0 <__aeabi_dmul+0x1dc>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea81 0603 	eor.w	r6, r1, r3
 80001fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000202:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000206:	bf18      	it	ne
 8000208:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800020c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000214:	d038      	beq.n	8000288 <__aeabi_dmul+0xb4>
 8000216:	fba0 ce02 	umull	ip, lr, r0, r2
 800021a:	f04f 0500 	mov.w	r5, #0
 800021e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000222:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000226:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022a:	f04f 0600 	mov.w	r6, #0
 800022e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000232:	f09c 0f00 	teq	ip, #0
 8000236:	bf18      	it	ne
 8000238:	f04e 0e01 	orrne.w	lr, lr, #1
 800023c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000240:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000244:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000248:	d204      	bcs.n	8000254 <__aeabi_dmul+0x80>
 800024a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024e:	416d      	adcs	r5, r5
 8000250:	eb46 0606 	adc.w	r6, r6, r6
 8000254:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000258:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800025c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000260:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000264:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000268:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800026c:	bf88      	it	hi
 800026e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000272:	d81e      	bhi.n	80002b2 <__aeabi_dmul+0xde>
 8000274:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800028c:	ea46 0101 	orr.w	r1, r6, r1
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	ea81 0103 	eor.w	r1, r1, r3
 8000298:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800029c:	bfc2      	ittt	gt
 800029e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a6:	bd70      	popgt	{r4, r5, r6, pc}
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f04f 0e00 	mov.w	lr, #0
 80002b0:	3c01      	subs	r4, #1
 80002b2:	f300 80ab 	bgt.w	800040c <__aeabi_dmul+0x238>
 80002b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ba:	bfde      	ittt	le
 80002bc:	2000      	movle	r0, #0
 80002be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c2:	bd70      	pople	{r4, r5, r6, pc}
 80002c4:	f1c4 0400 	rsb	r4, r4, #0
 80002c8:	3c20      	subs	r4, #32
 80002ca:	da35      	bge.n	8000338 <__aeabi_dmul+0x164>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc1b      	bgt.n	8000308 <__aeabi_dmul+0x134>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f305 	lsl.w	r3, r0, r5
 80002dc:	fa20 f004 	lsr.w	r0, r0, r4
 80002e0:	fa01 f205 	lsl.w	r2, r1, r5
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f4:	fa21 f604 	lsr.w	r6, r1, r4
 80002f8:	eb42 0106 	adc.w	r1, r2, r6
 80002fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000300:	bf08      	it	eq
 8000302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f1c4 040c 	rsb	r4, r4, #12
 800030c:	f1c4 0520 	rsb	r5, r4, #32
 8000310:	fa00 f304 	lsl.w	r3, r0, r4
 8000314:	fa20 f005 	lsr.w	r0, r0, r5
 8000318:	fa01 f204 	lsl.w	r2, r1, r4
 800031c:	ea40 0002 	orr.w	r0, r0, r2
 8000320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f205 	lsl.w	r2, r0, r5
 8000340:	ea4e 0e02 	orr.w	lr, lr, r2
 8000344:	fa20 f304 	lsr.w	r3, r0, r4
 8000348:	fa01 f205 	lsl.w	r2, r1, r5
 800034c:	ea43 0302 	orr.w	r3, r3, r2
 8000350:	fa21 f004 	lsr.w	r0, r1, r4
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	fa21 f204 	lsr.w	r2, r1, r4
 800035c:	ea20 0002 	bic.w	r0, r0, r2
 8000360:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000368:	bf08      	it	eq
 800036a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f094 0f00 	teq	r4, #0
 8000374:	d10f      	bne.n	8000396 <__aeabi_dmul+0x1c2>
 8000376:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037a:	0040      	lsls	r0, r0, #1
 800037c:	eb41 0101 	adc.w	r1, r1, r1
 8000380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000384:	bf08      	it	eq
 8000386:	3c01      	subeq	r4, #1
 8000388:	d0f7      	beq.n	800037a <__aeabi_dmul+0x1a6>
 800038a:	ea41 0106 	orr.w	r1, r1, r6
 800038e:	f095 0f00 	teq	r5, #0
 8000392:	bf18      	it	ne
 8000394:	4770      	bxne	lr
 8000396:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	eb43 0303 	adc.w	r3, r3, r3
 80003a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a4:	bf08      	it	eq
 80003a6:	3d01      	subeq	r5, #1
 80003a8:	d0f7      	beq.n	800039a <__aeabi_dmul+0x1c6>
 80003aa:	ea43 0306 	orr.w	r3, r3, r6
 80003ae:	4770      	bx	lr
 80003b0:	ea94 0f0c 	teq	r4, ip
 80003b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b8:	bf18      	it	ne
 80003ba:	ea95 0f0c 	teqne	r5, ip
 80003be:	d00c      	beq.n	80003da <__aeabi_dmul+0x206>
 80003c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c4:	bf18      	it	ne
 80003c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ca:	d1d1      	bne.n	8000370 <__aeabi_dmul+0x19c>
 80003cc:	ea81 0103 	eor.w	r1, r1, r3
 80003d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003de:	bf06      	itte	eq
 80003e0:	4610      	moveq	r0, r2
 80003e2:	4619      	moveq	r1, r3
 80003e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e8:	d019      	beq.n	800041e <__aeabi_dmul+0x24a>
 80003ea:	ea94 0f0c 	teq	r4, ip
 80003ee:	d102      	bne.n	80003f6 <__aeabi_dmul+0x222>
 80003f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f4:	d113      	bne.n	800041e <__aeabi_dmul+0x24a>
 80003f6:	ea95 0f0c 	teq	r5, ip
 80003fa:	d105      	bne.n	8000408 <__aeabi_dmul+0x234>
 80003fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000400:	bf1c      	itt	ne
 8000402:	4610      	movne	r0, r2
 8000404:	4619      	movne	r1, r3
 8000406:	d10a      	bne.n	800041e <__aeabi_dmul+0x24a>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000422:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000426:	bd70      	pop	{r4, r5, r6, pc}

08000428 <__aeabi_drsub>:
 8000428:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800042c:	e002      	b.n	8000434 <__adddf3>
 800042e:	bf00      	nop

08000430 <__aeabi_dsub>:
 8000430:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000434 <__adddf3>:
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	bf1f      	itttt	ne
 800044a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000452:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000456:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045a:	f000 80e2 	beq.w	8000622 <__adddf3+0x1ee>
 800045e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000462:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000466:	bfb8      	it	lt
 8000468:	426d      	neglt	r5, r5
 800046a:	dd0c      	ble.n	8000486 <__adddf3+0x52>
 800046c:	442c      	add	r4, r5
 800046e:	ea80 0202 	eor.w	r2, r0, r2
 8000472:	ea81 0303 	eor.w	r3, r1, r3
 8000476:	ea82 0000 	eor.w	r0, r2, r0
 800047a:	ea83 0101 	eor.w	r1, r3, r1
 800047e:	ea80 0202 	eor.w	r2, r0, r2
 8000482:	ea81 0303 	eor.w	r3, r1, r3
 8000486:	2d36      	cmp	r5, #54	; 0x36
 8000488:	bf88      	it	hi
 800048a:	bd30      	pophi	{r4, r5, pc}
 800048c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000490:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000494:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000498:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800049c:	d002      	beq.n	80004a4 <__adddf3+0x70>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x84>
 80004b2:	4252      	negs	r2, r2
 80004b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b8:	ea94 0f05 	teq	r4, r5
 80004bc:	f000 80a7 	beq.w	800060e <__adddf3+0x1da>
 80004c0:	f1a4 0401 	sub.w	r4, r4, #1
 80004c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c8:	db0d      	blt.n	80004e6 <__adddf3+0xb2>
 80004ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ce:	fa22 f205 	lsr.w	r2, r2, r5
 80004d2:	1880      	adds	r0, r0, r2
 80004d4:	f141 0100 	adc.w	r1, r1, #0
 80004d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004dc:	1880      	adds	r0, r0, r2
 80004de:	fa43 f305 	asr.w	r3, r3, r5
 80004e2:	4159      	adcs	r1, r3
 80004e4:	e00e      	b.n	8000504 <__adddf3+0xd0>
 80004e6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ea:	f10e 0e20 	add.w	lr, lr, #32
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f4:	bf28      	it	cs
 80004f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	18c0      	adds	r0, r0, r3
 8000500:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	d507      	bpl.n	800051a <__adddf3+0xe6>
 800050a:	f04f 0e00 	mov.w	lr, #0
 800050e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000512:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000516:	eb6e 0101 	sbc.w	r1, lr, r1
 800051a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051e:	d31b      	bcc.n	8000558 <__adddf3+0x124>
 8000520:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000524:	d30c      	bcc.n	8000540 <__adddf3+0x10c>
 8000526:	0849      	lsrs	r1, r1, #1
 8000528:	ea5f 0030 	movs.w	r0, r0, rrx
 800052c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000530:	f104 0401 	add.w	r4, r4, #1
 8000534:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000538:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800053c:	f080 809a 	bcs.w	8000674 <__adddf3+0x240>
 8000540:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	ea41 0105 	orr.w	r1, r1, r5
 8000556:	bd30      	pop	{r4, r5, pc}
 8000558:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800055c:	4140      	adcs	r0, r0
 800055e:	eb41 0101 	adc.w	r1, r1, r1
 8000562:	3c01      	subs	r4, #1
 8000564:	bf28      	it	cs
 8000566:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056a:	d2e9      	bcs.n	8000540 <__adddf3+0x10c>
 800056c:	f091 0f00 	teq	r1, #0
 8000570:	bf04      	itt	eq
 8000572:	4601      	moveq	r1, r0
 8000574:	2000      	moveq	r0, #0
 8000576:	fab1 f381 	clz	r3, r1
 800057a:	bf08      	it	eq
 800057c:	3320      	addeq	r3, #32
 800057e:	f1a3 030b 	sub.w	r3, r3, #11
 8000582:	f1b3 0220 	subs.w	r2, r3, #32
 8000586:	da0c      	bge.n	80005a2 <__adddf3+0x16e>
 8000588:	320c      	adds	r2, #12
 800058a:	dd08      	ble.n	800059e <__adddf3+0x16a>
 800058c:	f102 0c14 	add.w	ip, r2, #20
 8000590:	f1c2 020c 	rsb	r2, r2, #12
 8000594:	fa01 f00c 	lsl.w	r0, r1, ip
 8000598:	fa21 f102 	lsr.w	r1, r1, r2
 800059c:	e00c      	b.n	80005b8 <__adddf3+0x184>
 800059e:	f102 0214 	add.w	r2, r2, #20
 80005a2:	bfd8      	it	le
 80005a4:	f1c2 0c20 	rsble	ip, r2, #32
 80005a8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b0:	bfdc      	itt	le
 80005b2:	ea41 010c 	orrle.w	r1, r1, ip
 80005b6:	4090      	lslle	r0, r2
 80005b8:	1ae4      	subs	r4, r4, r3
 80005ba:	bfa2      	ittt	ge
 80005bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c0:	4329      	orrge	r1, r5
 80005c2:	bd30      	popge	{r4, r5, pc}
 80005c4:	ea6f 0404 	mvn.w	r4, r4
 80005c8:	3c1f      	subs	r4, #31
 80005ca:	da1c      	bge.n	8000606 <__adddf3+0x1d2>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc0e      	bgt.n	80005ee <__adddf3+0x1ba>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0220 	rsb	r2, r4, #32
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f302 	lsl.w	r3, r1, r2
 80005e0:	ea40 0003 	orr.w	r0, r0, r3
 80005e4:	fa21 f304 	lsr.w	r3, r1, r4
 80005e8:	ea45 0103 	orr.w	r1, r5, r3
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	f1c4 040c 	rsb	r4, r4, #12
 80005f2:	f1c4 0220 	rsb	r2, r4, #32
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 f304 	lsl.w	r3, r1, r4
 80005fe:	ea40 0003 	orr.w	r0, r0, r3
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	fa21 f004 	lsr.w	r0, r1, r4
 800060a:	4629      	mov	r1, r5
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	f094 0f00 	teq	r4, #0
 8000612:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000616:	bf06      	itte	eq
 8000618:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800061c:	3401      	addeq	r4, #1
 800061e:	3d01      	subne	r5, #1
 8000620:	e74e      	b.n	80004c0 <__adddf3+0x8c>
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf18      	it	ne
 8000628:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800062c:	d029      	beq.n	8000682 <__adddf3+0x24e>
 800062e:	ea94 0f05 	teq	r4, r5
 8000632:	bf08      	it	eq
 8000634:	ea90 0f02 	teqeq	r0, r2
 8000638:	d005      	beq.n	8000646 <__adddf3+0x212>
 800063a:	ea54 0c00 	orrs.w	ip, r4, r0
 800063e:	bf04      	itt	eq
 8000640:	4619      	moveq	r1, r3
 8000642:	4610      	moveq	r0, r2
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	ea91 0f03 	teq	r1, r3
 800064a:	bf1e      	ittt	ne
 800064c:	2100      	movne	r1, #0
 800064e:	2000      	movne	r0, #0
 8000650:	bd30      	popne	{r4, r5, pc}
 8000652:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000656:	d105      	bne.n	8000664 <__adddf3+0x230>
 8000658:	0040      	lsls	r0, r0, #1
 800065a:	4149      	adcs	r1, r1
 800065c:	bf28      	it	cs
 800065e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000668:	bf3c      	itt	cc
 800066a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066e:	bd30      	popcc	{r4, r5, pc}
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000678:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800067c:	f04f 0000 	mov.w	r0, #0
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000686:	bf1a      	itte	ne
 8000688:	4619      	movne	r1, r3
 800068a:	4610      	movne	r0, r2
 800068c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000690:	bf1c      	itt	ne
 8000692:	460b      	movne	r3, r1
 8000694:	4602      	movne	r2, r0
 8000696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069a:	bf06      	itte	eq
 800069c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a0:	ea91 0f03 	teqeq	r1, r3
 80006a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop

080006ac <__aeabi_ui2d>:
 80006ac:	f090 0f00 	teq	r0, #0
 80006b0:	bf04      	itt	eq
 80006b2:	2100      	moveq	r1, #0
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c0:	f04f 0500 	mov.w	r5, #0
 80006c4:	f04f 0100 	mov.w	r1, #0
 80006c8:	e750      	b.n	800056c <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_i2d>:
 80006cc:	f090 0f00 	teq	r0, #0
 80006d0:	bf04      	itt	eq
 80006d2:	2100      	moveq	r1, #0
 80006d4:	4770      	bxeq	lr
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e4:	bf48      	it	mi
 80006e6:	4240      	negmi	r0, r0
 80006e8:	f04f 0100 	mov.w	r1, #0
 80006ec:	e73e      	b.n	800056c <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2d>:
 80006f0:	0042      	lsls	r2, r0, #1
 80006f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fe:	bf1f      	itttt	ne
 8000700:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000708:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800070c:	4770      	bxne	lr
 800070e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000712:	bf08      	it	eq
 8000714:	4770      	bxeq	lr
 8000716:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071a:	bf04      	itt	eq
 800071c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	e71c      	b.n	800056c <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_ul2d>:
 8000734:	ea50 0201 	orrs.w	r2, r0, r1
 8000738:	bf08      	it	eq
 800073a:	4770      	bxeq	lr
 800073c:	b530      	push	{r4, r5, lr}
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	e00a      	b.n	800075a <__aeabi_l2d+0x16>

08000744 <__aeabi_l2d>:
 8000744:	ea50 0201 	orrs.w	r2, r0, r1
 8000748:	bf08      	it	eq
 800074a:	4770      	bxeq	lr
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000752:	d502      	bpl.n	800075a <__aeabi_l2d+0x16>
 8000754:	4240      	negs	r0, r0
 8000756:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000762:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000766:	f43f aed8 	beq.w	800051a <__adddf3+0xe6>
 800076a:	f04f 0203 	mov.w	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077a:	bf18      	it	ne
 800077c:	3203      	addne	r2, #3
 800077e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	fa00 fc03 	lsl.w	ip, r0, r3
 800078a:	fa20 f002 	lsr.w	r0, r0, r2
 800078e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000792:	ea40 000e 	orr.w	r0, r0, lr
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	4414      	add	r4, r2
 800079c:	e6bd      	b.n	800051a <__adddf3+0xe6>
 800079e:	bf00      	nop

080007a0 <__aeabi_d2uiz>:
 80007a0:	004a      	lsls	r2, r1, #1
 80007a2:	d211      	bcs.n	80007c8 <__aeabi_d2uiz+0x28>
 80007a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a8:	d211      	bcs.n	80007ce <__aeabi_d2uiz+0x2e>
 80007aa:	d50d      	bpl.n	80007c8 <__aeabi_d2uiz+0x28>
 80007ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b4:	d40e      	bmi.n	80007d4 <__aeabi_d2uiz+0x34>
 80007b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d2:	d102      	bne.n	80007da <__aeabi_d2uiz+0x3a>
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d8:	4770      	bx	lr
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	4770      	bx	lr

080007e0 <__aeabi_uldivmod>:
 80007e0:	b953      	cbnz	r3, 80007f8 <__aeabi_uldivmod+0x18>
 80007e2:	b94a      	cbnz	r2, 80007f8 <__aeabi_uldivmod+0x18>
 80007e4:	2900      	cmp	r1, #0
 80007e6:	bf08      	it	eq
 80007e8:	2800      	cmpeq	r0, #0
 80007ea:	bf1c      	itt	ne
 80007ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007f4:	f000 b974 	b.w	8000ae0 <__aeabi_idiv0>
 80007f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000800:	f000 f806 	bl	8000810 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4770      	bx	lr

08000810 <__udivmoddi4>:
 8000810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000814:	9d08      	ldr	r5, [sp, #32]
 8000816:	4604      	mov	r4, r0
 8000818:	468e      	mov	lr, r1
 800081a:	2b00      	cmp	r3, #0
 800081c:	d14d      	bne.n	80008ba <__udivmoddi4+0xaa>
 800081e:	428a      	cmp	r2, r1
 8000820:	4694      	mov	ip, r2
 8000822:	d969      	bls.n	80008f8 <__udivmoddi4+0xe8>
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	b152      	cbz	r2, 8000840 <__udivmoddi4+0x30>
 800082a:	fa01 f302 	lsl.w	r3, r1, r2
 800082e:	f1c2 0120 	rsb	r1, r2, #32
 8000832:	fa20 f101 	lsr.w	r1, r0, r1
 8000836:	fa0c fc02 	lsl.w	ip, ip, r2
 800083a:	ea41 0e03 	orr.w	lr, r1, r3
 800083e:	4094      	lsls	r4, r2
 8000840:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000844:	0c21      	lsrs	r1, r4, #16
 8000846:	fbbe f6f8 	udiv	r6, lr, r8
 800084a:	fa1f f78c 	uxth.w	r7, ip
 800084e:	fb08 e316 	mls	r3, r8, r6, lr
 8000852:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000856:	fb06 f107 	mul.w	r1, r6, r7
 800085a:	4299      	cmp	r1, r3
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x64>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000866:	f080 811f 	bcs.w	8000aa8 <__udivmoddi4+0x298>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 811c 	bls.w	8000aa8 <__udivmoddi4+0x298>
 8000870:	3e02      	subs	r6, #2
 8000872:	4463      	add	r3, ip
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f0f8 	udiv	r0, r3, r8
 800087c:	fb08 3310 	mls	r3, r8, r0, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb00 f707 	mul.w	r7, r0, r7
 8000888:	42a7      	cmp	r7, r4
 800088a:	d90a      	bls.n	80008a2 <__udivmoddi4+0x92>
 800088c:	eb1c 0404 	adds.w	r4, ip, r4
 8000890:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000894:	f080 810a 	bcs.w	8000aac <__udivmoddi4+0x29c>
 8000898:	42a7      	cmp	r7, r4
 800089a:	f240 8107 	bls.w	8000aac <__udivmoddi4+0x29c>
 800089e:	4464      	add	r4, ip
 80008a0:	3802      	subs	r0, #2
 80008a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a6:	1be4      	subs	r4, r4, r7
 80008a8:	2600      	movs	r6, #0
 80008aa:	b11d      	cbz	r5, 80008b4 <__udivmoddi4+0xa4>
 80008ac:	40d4      	lsrs	r4, r2
 80008ae:	2300      	movs	r3, #0
 80008b0:	e9c5 4300 	strd	r4, r3, [r5]
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d909      	bls.n	80008d2 <__udivmoddi4+0xc2>
 80008be:	2d00      	cmp	r5, #0
 80008c0:	f000 80ef 	beq.w	8000aa2 <__udivmoddi4+0x292>
 80008c4:	2600      	movs	r6, #0
 80008c6:	e9c5 0100 	strd	r0, r1, [r5]
 80008ca:	4630      	mov	r0, r6
 80008cc:	4631      	mov	r1, r6
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	fab3 f683 	clz	r6, r3
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	d14a      	bne.n	8000970 <__udivmoddi4+0x160>
 80008da:	428b      	cmp	r3, r1
 80008dc:	d302      	bcc.n	80008e4 <__udivmoddi4+0xd4>
 80008de:	4282      	cmp	r2, r0
 80008e0:	f200 80f9 	bhi.w	8000ad6 <__udivmoddi4+0x2c6>
 80008e4:	1a84      	subs	r4, r0, r2
 80008e6:	eb61 0303 	sbc.w	r3, r1, r3
 80008ea:	2001      	movs	r0, #1
 80008ec:	469e      	mov	lr, r3
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d0e0      	beq.n	80008b4 <__udivmoddi4+0xa4>
 80008f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80008f6:	e7dd      	b.n	80008b4 <__udivmoddi4+0xa4>
 80008f8:	b902      	cbnz	r2, 80008fc <__udivmoddi4+0xec>
 80008fa:	deff      	udf	#255	; 0xff
 80008fc:	fab2 f282 	clz	r2, r2
 8000900:	2a00      	cmp	r2, #0
 8000902:	f040 8092 	bne.w	8000a2a <__udivmoddi4+0x21a>
 8000906:	eba1 010c 	sub.w	r1, r1, ip
 800090a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090e:	fa1f fe8c 	uxth.w	lr, ip
 8000912:	2601      	movs	r6, #1
 8000914:	0c20      	lsrs	r0, r4, #16
 8000916:	fbb1 f3f7 	udiv	r3, r1, r7
 800091a:	fb07 1113 	mls	r1, r7, r3, r1
 800091e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000922:	fb0e f003 	mul.w	r0, lr, r3
 8000926:	4288      	cmp	r0, r1
 8000928:	d908      	bls.n	800093c <__udivmoddi4+0x12c>
 800092a:	eb1c 0101 	adds.w	r1, ip, r1
 800092e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000932:	d202      	bcs.n	800093a <__udivmoddi4+0x12a>
 8000934:	4288      	cmp	r0, r1
 8000936:	f200 80cb 	bhi.w	8000ad0 <__udivmoddi4+0x2c0>
 800093a:	4643      	mov	r3, r8
 800093c:	1a09      	subs	r1, r1, r0
 800093e:	b2a4      	uxth	r4, r4
 8000940:	fbb1 f0f7 	udiv	r0, r1, r7
 8000944:	fb07 1110 	mls	r1, r7, r0, r1
 8000948:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800094c:	fb0e fe00 	mul.w	lr, lr, r0
 8000950:	45a6      	cmp	lr, r4
 8000952:	d908      	bls.n	8000966 <__udivmoddi4+0x156>
 8000954:	eb1c 0404 	adds.w	r4, ip, r4
 8000958:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800095c:	d202      	bcs.n	8000964 <__udivmoddi4+0x154>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f200 80bb 	bhi.w	8000ada <__udivmoddi4+0x2ca>
 8000964:	4608      	mov	r0, r1
 8000966:	eba4 040e 	sub.w	r4, r4, lr
 800096a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800096e:	e79c      	b.n	80008aa <__udivmoddi4+0x9a>
 8000970:	f1c6 0720 	rsb	r7, r6, #32
 8000974:	40b3      	lsls	r3, r6
 8000976:	fa22 fc07 	lsr.w	ip, r2, r7
 800097a:	ea4c 0c03 	orr.w	ip, ip, r3
 800097e:	fa20 f407 	lsr.w	r4, r0, r7
 8000982:	fa01 f306 	lsl.w	r3, r1, r6
 8000986:	431c      	orrs	r4, r3
 8000988:	40f9      	lsrs	r1, r7
 800098a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800098e:	fa00 f306 	lsl.w	r3, r0, r6
 8000992:	fbb1 f8f9 	udiv	r8, r1, r9
 8000996:	0c20      	lsrs	r0, r4, #16
 8000998:	fa1f fe8c 	uxth.w	lr, ip
 800099c:	fb09 1118 	mls	r1, r9, r8, r1
 80009a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009a4:	fb08 f00e 	mul.w	r0, r8, lr
 80009a8:	4288      	cmp	r0, r1
 80009aa:	fa02 f206 	lsl.w	r2, r2, r6
 80009ae:	d90b      	bls.n	80009c8 <__udivmoddi4+0x1b8>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009b8:	f080 8088 	bcs.w	8000acc <__udivmoddi4+0x2bc>
 80009bc:	4288      	cmp	r0, r1
 80009be:	f240 8085 	bls.w	8000acc <__udivmoddi4+0x2bc>
 80009c2:	f1a8 0802 	sub.w	r8, r8, #2
 80009c6:	4461      	add	r1, ip
 80009c8:	1a09      	subs	r1, r1, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80009d0:	fb09 1110 	mls	r1, r9, r0, r1
 80009d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80009dc:	458e      	cmp	lr, r1
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x1e2>
 80009e0:	eb1c 0101 	adds.w	r1, ip, r1
 80009e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80009e8:	d26c      	bcs.n	8000ac4 <__udivmoddi4+0x2b4>
 80009ea:	458e      	cmp	lr, r1
 80009ec:	d96a      	bls.n	8000ac4 <__udivmoddi4+0x2b4>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4461      	add	r1, ip
 80009f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009f6:	fba0 9402 	umull	r9, r4, r0, r2
 80009fa:	eba1 010e 	sub.w	r1, r1, lr
 80009fe:	42a1      	cmp	r1, r4
 8000a00:	46c8      	mov	r8, r9
 8000a02:	46a6      	mov	lr, r4
 8000a04:	d356      	bcc.n	8000ab4 <__udivmoddi4+0x2a4>
 8000a06:	d053      	beq.n	8000ab0 <__udivmoddi4+0x2a0>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x212>
 8000a0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000a0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000a12:	fa01 f707 	lsl.w	r7, r1, r7
 8000a16:	fa22 f306 	lsr.w	r3, r2, r6
 8000a1a:	40f1      	lsrs	r1, r6
 8000a1c:	431f      	orrs	r7, r3
 8000a1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	f1c2 0320 	rsb	r3, r2, #32
 8000a2e:	40d8      	lsrs	r0, r3
 8000a30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a34:	fa21 f303 	lsr.w	r3, r1, r3
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	4301      	orrs	r1, r0
 8000a3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a40:	fa1f fe8c 	uxth.w	lr, ip
 8000a44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a48:	fb07 3610 	mls	r6, r7, r0, r3
 8000a4c:	0c0b      	lsrs	r3, r1, #16
 8000a4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a52:	fb00 f60e 	mul.w	r6, r0, lr
 8000a56:	429e      	cmp	r6, r3
 8000a58:	fa04 f402 	lsl.w	r4, r4, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x260>
 8000a5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a66:	d22f      	bcs.n	8000ac8 <__udivmoddi4+0x2b8>
 8000a68:	429e      	cmp	r6, r3
 8000a6a:	d92d      	bls.n	8000ac8 <__udivmoddi4+0x2b8>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1b9b      	subs	r3, r3, r6
 8000a72:	b289      	uxth	r1, r1
 8000a74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a78:	fb07 3316 	mls	r3, r7, r6, r3
 8000a7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a80:	fb06 f30e 	mul.w	r3, r6, lr
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x28a>
 8000a88:	eb1c 0101 	adds.w	r1, ip, r1
 8000a8c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a90:	d216      	bcs.n	8000ac0 <__udivmoddi4+0x2b0>
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d914      	bls.n	8000ac0 <__udivmoddi4+0x2b0>
 8000a96:	3e02      	subs	r6, #2
 8000a98:	4461      	add	r1, ip
 8000a9a:	1ac9      	subs	r1, r1, r3
 8000a9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000aa0:	e738      	b.n	8000914 <__udivmoddi4+0x104>
 8000aa2:	462e      	mov	r6, r5
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	e705      	b.n	80008b4 <__udivmoddi4+0xa4>
 8000aa8:	4606      	mov	r6, r0
 8000aaa:	e6e3      	b.n	8000874 <__udivmoddi4+0x64>
 8000aac:	4618      	mov	r0, r3
 8000aae:	e6f8      	b.n	80008a2 <__udivmoddi4+0x92>
 8000ab0:	454b      	cmp	r3, r9
 8000ab2:	d2a9      	bcs.n	8000a08 <__udivmoddi4+0x1f8>
 8000ab4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000abc:	3801      	subs	r0, #1
 8000abe:	e7a3      	b.n	8000a08 <__udivmoddi4+0x1f8>
 8000ac0:	4646      	mov	r6, r8
 8000ac2:	e7ea      	b.n	8000a9a <__udivmoddi4+0x28a>
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	e794      	b.n	80009f2 <__udivmoddi4+0x1e2>
 8000ac8:	4640      	mov	r0, r8
 8000aca:	e7d1      	b.n	8000a70 <__udivmoddi4+0x260>
 8000acc:	46d0      	mov	r8, sl
 8000ace:	e77b      	b.n	80009c8 <__udivmoddi4+0x1b8>
 8000ad0:	3b02      	subs	r3, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	e732      	b.n	800093c <__udivmoddi4+0x12c>
 8000ad6:	4630      	mov	r0, r6
 8000ad8:	e709      	b.n	80008ee <__udivmoddi4+0xde>
 8000ada:	4464      	add	r4, ip
 8000adc:	3802      	subs	r0, #2
 8000ade:	e742      	b.n	8000966 <__udivmoddi4+0x156>

08000ae0 <__aeabi_idiv0>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <SPI_Write_Byte>:
/*********************************************


*********************************************/	
 uint8_t SPI_Write_Byte(uint8_t value)                                    
{    
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
		Driver_Delay_us(10);
		value = (value << 1); 	
	}
#else
	
    __HAL_SPI_ENABLE(&hspi1);
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <SPI_Write_Byte+0x68>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <SPI_Write_Byte+0x68>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000afc:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= (1)<<12;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <SPI_Write_Byte+0x6c>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <SPI_Write_Byte+0x6c>)
 8000b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b08:	6053      	str	r3, [r2, #4]
	
	while((SPI1->SR & (1<<1)) == 0)
 8000b0a:	bf00      	nop
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <SPI_Write_Byte+0x6c>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f9      	beq.n	8000b0c <SPI_Write_Byte+0x28>
		;
        
        *((__IO uint8_t *)(&SPI1->DR)) = value;
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <SPI_Write_Byte+0x70>)
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	7013      	strb	r3, [r2, #0]
        
        while(SPI1->SR & (1<<7)) ; //Wait for not busy
 8000b1e:	bf00      	nop
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <SPI_Write_Byte+0x6c>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1f9      	bne.n	8000b20 <SPI_Write_Byte+0x3c>

        while((SPI1->SR & (1<<0)) == 0) ; // Wait for the receiving area to be empty
 8000b2c:	bf00      	nop
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SPI_Write_Byte+0x6c>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f9      	beq.n	8000b2e <SPI_Write_Byte+0x4a>
        
        return *((__IO uint8_t *)(&SPI1->DR));
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SPI_Write_Byte+0x70>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3

#endif
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	200000f4 	.word	0x200000f4
 8000b50:	40013000 	.word	0x40013000
 8000b54:	4001300c 	.word	0x4001300c

08000b58 <Driver_Delay_ms>:
/*********************************************


*********************************************/	
void Driver_Delay_ms(uint32_t xms)	
{	
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f002 f88b 	bl	8002c7c <HAL_Delay>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <LCD_Reset>:
***********************************************************************************************************************/
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_Reset(void){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	LCD_RST_1;
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LCD_Reset+0x40>)
 8000b7c:	f002 fdb2 	bl	80036e4 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000b80:	2064      	movs	r0, #100	; 0x64
 8000b82:	f7ff ffe9 	bl	8000b58 <Driver_Delay_ms>
	LCD_RST_0;
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <LCD_Reset+0x40>)
 8000b8e:	f002 fda9 	bl	80036e4 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000b92:	2064      	movs	r0, #100	; 0x64
 8000b94:	f7ff ffe0 	bl	8000b58 <Driver_Delay_ms>
	LCD_RST_1;
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <LCD_Reset+0x40>)
 8000ba0:	f002 fda0 	bl	80036e4 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000ba4:	2064      	movs	r0, #100	; 0x64
 8000ba6:	f7ff ffd7 	bl	8000b58 <Driver_Delay_ms>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <LCD_WriteReg>:

/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_WriteReg(uint8_t Reg){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	LCD_DC_0;
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <LCD_WriteReg+0x3c>)
 8000bc6:	f002 fd8d 	bl	80036e4 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <LCD_WriteReg+0x40>)
 8000bd0:	f002 fd88 	bl	80036e4 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Reg);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff84 	bl	8000ae4 <SPI_Write_Byte>
	LCD_CS_1;
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2140      	movs	r1, #64	; 0x40
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <LCD_WriteReg+0x40>)
 8000be2:	f002 fd7f 	bl	80036e4 <HAL_GPIO_WritePin>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <LCD_WriteData_8Bit>:

static void LCD_WriteData_8Bit(uint8_t Data){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	LCD_DC_1;
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <LCD_WriteData_8Bit+0x3c>)
 8000c0a:	f002 fd6b 	bl	80036e4 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	4809      	ldr	r0, [pc, #36]	; (8000c38 <LCD_WriteData_8Bit+0x40>)
 8000c14:	f002 fd66 	bl	80036e4 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Data);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff62 	bl	8000ae4 <SPI_Write_Byte>
	LCD_CS_1;
 8000c20:	2201      	movs	r2, #1
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <LCD_WriteData_8Bit+0x40>)
 8000c26:	f002 fd5d 	bl	80036e4 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020400 	.word	0x40020400

08000c3c <LCD_WriteData_NLen16Bit>:
	SPI_Write_Byte(Data >> 8);
	SPI_Write_Byte(Data & 0XFF);
	LCD_CS_1;
}*/

static void LCD_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	LCD_DC_1;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4e:	4813      	ldr	r0, [pc, #76]	; (8000c9c <LCD_WriteData_NLen16Bit+0x60>)
 8000c50:	f002 fd48 	bl	80036e4 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8000c54:	2200      	movs	r2, #0
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <LCD_WriteData_NLen16Bit+0x64>)
 8000c5a:	f002 fd43 	bl	80036e4 <HAL_GPIO_WritePin>
	for(i = 0; i < DataLen; i++){
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e00e      	b.n	8000c82 <LCD_WriteData_NLen16Bit+0x46>
		SPI_Write_Byte( (uint8_t)(Data >> 8) );
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff39 	bl	8000ae4 <SPI_Write_Byte>
		SPI_Write_Byte( (uint8_t)(Data & 0XFF) );
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff34 	bl	8000ae4 <SPI_Write_Byte>
	for(i = 0; i < DataLen; i++){
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3ec      	bcc.n	8000c64 <LCD_WriteData_NLen16Bit+0x28>
	}	
	LCD_CS_1;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2140      	movs	r1, #64	; 0x40
 8000c8e:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <LCD_WriteData_NLen16Bit+0x64>)
 8000c90:	f002 fd28 	bl	80036e4 <HAL_GPIO_WritePin>
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400

08000ca4 <LCD_InitReg>:

/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void){	
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	//ST7735R Frame Rate
	LCD_WriteReg(0xB1); 
 8000ca8:	20b1      	movs	r0, #177	; 0xb1
 8000caa:	f7ff ff83 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff ffa2 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000cb4:	202c      	movs	r0, #44	; 0x2c
 8000cb6:	f7ff ff9f 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000cba:	202d      	movs	r0, #45	; 0x2d
 8000cbc:	f7ff ff9c 	bl	8000bf8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB2); 
 8000cc0:	20b2      	movs	r0, #178	; 0xb2
 8000cc2:	f7ff ff77 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff ff96 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000ccc:	202c      	movs	r0, #44	; 0x2c
 8000cce:	f7ff ff93 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000cd2:	202d      	movs	r0, #45	; 0x2d
 8000cd4:	f7ff ff90 	bl	8000bf8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB3); 
 8000cd8:	20b3      	movs	r0, #179	; 0xb3
 8000cda:	f7ff ff6b 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff8a 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000ce4:	202c      	movs	r0, #44	; 0x2c
 8000ce6:	f7ff ff87 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000cea:	202d      	movs	r0, #45	; 0x2d
 8000cec:	f7ff ff84 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x01); 
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ff81 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000cf6:	202c      	movs	r0, #44	; 0x2c
 8000cf8:	f7ff ff7e 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000cfc:	202d      	movs	r0, #45	; 0x2d
 8000cfe:	f7ff ff7b 	bl	8000bf8 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xB4); //Column inversion 
 8000d02:	20b4      	movs	r0, #180	; 0xb4
 8000d04:	f7ff ff56 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x07); 
 8000d08:	2007      	movs	r0, #7
 8000d0a:	f7ff ff75 	bl	8000bf8 <LCD_WriteData_8Bit>
	
	//ST7735R Power Sequence
	LCD_WriteReg(0xC0); 
 8000d0e:	20c0      	movs	r0, #192	; 0xc0
 8000d10:	f7ff ff50 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xA2); 
 8000d14:	20a2      	movs	r0, #162	; 0xa2
 8000d16:	f7ff ff6f 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f7ff ff6c 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x84); 
 8000d20:	2084      	movs	r0, #132	; 0x84
 8000d22:	f7ff ff69 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC1); 
 8000d26:	20c1      	movs	r0, #193	; 0xc1
 8000d28:	f7ff ff44 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xC5); 
 8000d2c:	20c5      	movs	r0, #197	; 0xc5
 8000d2e:	f7ff ff63 	bl	8000bf8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC2); 
 8000d32:	20c2      	movs	r0, #194	; 0xc2
 8000d34:	f7ff ff3e 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0A); 
 8000d38:	200a      	movs	r0, #10
 8000d3a:	f7ff ff5d 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff ff5a 	bl	8000bf8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC3); 
 8000d44:	20c3      	movs	r0, #195	; 0xc3
 8000d46:	f7ff ff35 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 8000d4a:	208a      	movs	r0, #138	; 0x8a
 8000d4c:	f7ff ff54 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2A); 
 8000d50:	202a      	movs	r0, #42	; 0x2a
 8000d52:	f7ff ff51 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC4); 
 8000d56:	20c4      	movs	r0, #196	; 0xc4
 8000d58:	f7ff ff2c 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 8000d5c:	208a      	movs	r0, #138	; 0x8a
 8000d5e:	f7ff ff4b 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0xEE); 
 8000d62:	20ee      	movs	r0, #238	; 0xee
 8000d64:	f7ff ff48 	bl	8000bf8 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xC5); //VCOM 
 8000d68:	20c5      	movs	r0, #197	; 0xc5
 8000d6a:	f7ff ff23 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0E); 
 8000d6e:	200e      	movs	r0, #14
 8000d70:	f7ff ff42 	bl	8000bf8 <LCD_WriteData_8Bit>
	
	//ST7735R Gamma Sequence
	LCD_WriteReg(0xe0); 
 8000d74:	20e0      	movs	r0, #224	; 0xe0
 8000d76:	f7ff ff1d 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f7ff ff3c 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1a); 
 8000d80:	201a      	movs	r0, #26
 8000d82:	f7ff ff39 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8000d86:	200f      	movs	r0, #15
 8000d88:	f7ff ff36 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x18); 
 8000d8c:	2018      	movs	r0, #24
 8000d8e:	f7ff ff33 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2f); 
 8000d92:	202f      	movs	r0, #47	; 0x2f
 8000d94:	f7ff ff30 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x28); 
 8000d98:	2028      	movs	r0, #40	; 0x28
 8000d9a:	f7ff ff2d 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x20); 
 8000d9e:	2020      	movs	r0, #32
 8000da0:	f7ff ff2a 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x22); 
 8000da4:	2022      	movs	r0, #34	; 0x22
 8000da6:	f7ff ff27 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1f); 
 8000daa:	201f      	movs	r0, #31
 8000dac:	f7ff ff24 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 8000db0:	201b      	movs	r0, #27
 8000db2:	f7ff ff21 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x23); 
 8000db6:	2023      	movs	r0, #35	; 0x23
 8000db8:	f7ff ff1e 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x37); 
 8000dbc:	2037      	movs	r0, #55	; 0x37
 8000dbe:	f7ff ff1b 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 	
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff ff18 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8000dc8:	2007      	movs	r0, #7
 8000dca:	f7ff ff15 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f7ff ff12 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10); 
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f7ff ff0f 	bl	8000bf8 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xe1); 
 8000dda:	20e1      	movs	r0, #225	; 0xe1
 8000ddc:	f7ff feea 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 8000de0:	200f      	movs	r0, #15
 8000de2:	f7ff ff09 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 8000de6:	201b      	movs	r0, #27
 8000de8:	f7ff ff06 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8000dec:	200f      	movs	r0, #15
 8000dee:	f7ff ff03 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x17); 
 8000df2:	2017      	movs	r0, #23
 8000df4:	f7ff ff00 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x33); 
 8000df8:	2033      	movs	r0, #51	; 0x33
 8000dfa:	f7ff fefd 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2c); 
 8000dfe:	202c      	movs	r0, #44	; 0x2c
 8000e00:	f7ff fefa 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x29); 
 8000e04:	2029      	movs	r0, #41	; 0x29
 8000e06:	f7ff fef7 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2e); 
 8000e0a:	202e      	movs	r0, #46	; 0x2e
 8000e0c:	f7ff fef4 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 8000e10:	2030      	movs	r0, #48	; 0x30
 8000e12:	f7ff fef1 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 8000e16:	2030      	movs	r0, #48	; 0x30
 8000e18:	f7ff feee 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x39); 
 8000e1c:	2039      	movs	r0, #57	; 0x39
 8000e1e:	f7ff feeb 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x3f); 
 8000e22:	203f      	movs	r0, #63	; 0x3f
 8000e24:	f7ff fee8 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fee5 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8000e2e:	2007      	movs	r0, #7
 8000e30:	f7ff fee2 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x03); 
 8000e34:	2003      	movs	r0, #3
 8000e36:	f7ff fedf 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10);  
 8000e3a:	2010      	movs	r0, #16
 8000e3c:	f7ff fedc 	bl	8000bf8 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0xF0); //Enable test command  
 8000e40:	20f0      	movs	r0, #240	; 0xf0
 8000e42:	f7ff feb7 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fed6 	bl	8000bf8 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xF6); //Disable ram power save mode 
 8000e4c:	20f6      	movs	r0, #246	; 0xf6
 8000e4e:	f7ff feb1 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x00); 
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fed0 	bl	8000bf8 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0x3A); //65k mode 
 8000e58:	203a      	movs	r0, #58	; 0x3a
 8000e5a:	f7ff feab 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x05); 
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f7ff feca 	bl	8000bf8 <LCD_WriteData_8Bit>
		
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <LCD_SetGramScanWay>:
function:	Set the display scan and color transfer modes
parameter: 
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir){		
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8000e72:	4a34      	ldr	r2, [pc, #208]	; (8000f44 <LCD_SetGramScanWay+0xdc>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	7113      	strb	r3, [r2, #4]
	
	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d008      	beq.n	8000e90 <LCD_SetGramScanWay+0x28>
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d005      	beq.n	8000e90 <LCD_SetGramScanWay+0x28>
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d002      	beq.n	8000e90 <LCD_SetGramScanWay+0x28>
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d10c      	bne.n	8000eaa <LCD_SetGramScanWay+0x42>
		sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <LCD_SetGramScanWay+0xdc>)
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;		
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <LCD_SetGramScanWay+0xdc>)
 8000e98:	22a0      	movs	r2, #160	; 0xa0
 8000e9a:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_X;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <LCD_SetGramScanWay+0xdc>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_Y;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <LCD_SetGramScanWay+0xdc>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	811a      	strh	r2, [r3, #8]
 8000ea8:	e00b      	b.n	8000ec2 <LCD_SetGramScanWay+0x5a>
	}else{
		sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <LCD_SetGramScanWay+0xdc>)
 8000eac:	22a0      	movs	r2, #160	; 0xa0
 8000eae:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;	
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <LCD_SetGramScanWay+0xdc>)
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_Y;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <LCD_SetGramScanWay+0xdc>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_X;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <LCD_SetGramScanWay+0xdc>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	811a      	strh	r2, [r3, #8]
	}
	
	// Gets the scan direction of GRAM
	uint16_t MemoryAccessReg_Data=0;  //0x36	
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	81fb      	strh	r3, [r7, #14]
	switch (Scan_dir){				
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b07      	cmp	r3, #7
 8000eca:	d82b      	bhi.n	8000f24 <LCD_SetGramScanWay+0xbc>
 8000ecc:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <LCD_SetGramScanWay+0x6c>)
 8000ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed2:	bf00      	nop
 8000ed4:	08000ef5 	.word	0x08000ef5
 8000ed8:	08000efb 	.word	0x08000efb
 8000edc:	08000f01 	.word	0x08000f01
 8000ee0:	08000f07 	.word	0x08000f07
 8000ee4:	08000f0d 	.word	0x08000f0d
 8000ee8:	08000f13 	.word	0x08000f13
 8000eec:	08000f19 	.word	0x08000f19
 8000ef0:	08000f1f 	.word	0x08000f1f
		case L2R_U2D:
			MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	81fb      	strh	r3, [r7, #14]
			break;
 8000ef8:	e014      	b.n	8000f24 <LCD_SetGramScanWay+0xbc>
		case L2R_D2U:
			MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	81fb      	strh	r3, [r7, #14]
			break;
 8000efe:	e011      	b.n	8000f24 <LCD_SetGramScanWay+0xbc>
		case R2L_U2D://	0X4
			MemoryAccessReg_Data = 0x40 | 0x00;
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	81fb      	strh	r3, [r7, #14]
			break;
 8000f04:	e00e      	b.n	8000f24 <LCD_SetGramScanWay+0xbc>
		case R2L_D2U://	0XC
			MemoryAccessReg_Data = 0x40 | 0x80;
 8000f06:	23c0      	movs	r3, #192	; 0xc0
 8000f08:	81fb      	strh	r3, [r7, #14]
			break;
 8000f0a:	e00b      	b.n	8000f24 <LCD_SetGramScanWay+0xbc>
		case U2D_L2R://0X2
			MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	81fb      	strh	r3, [r7, #14]
			break;
 8000f10:	e008      	b.n	8000f24 <LCD_SetGramScanWay+0xbc>
		case U2D_R2L://0X6
			MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 8000f12:	2360      	movs	r3, #96	; 0x60
 8000f14:	81fb      	strh	r3, [r7, #14]
			break;
 8000f16:	e005      	b.n	8000f24 <LCD_SetGramScanWay+0xbc>
		case D2U_L2R://0XA
			MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8000f18:	23a0      	movs	r3, #160	; 0xa0
 8000f1a:	81fb      	strh	r3, [r7, #14]
			break;
 8000f1c:	e002      	b.n	8000f24 <LCD_SetGramScanWay+0xbc>
		case D2U_R2L://0XE
			MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 8000f1e:	23e0      	movs	r3, #224	; 0xe0
 8000f20:	81fb      	strh	r3, [r7, #14]
			break;
 8000f22:	bf00      	nop
	}
	

	// Set the read / write scan direction of the frame memory
	LCD_WriteReg(0x36); //MX, MY, RGB mode 	
 8000f24:	2036      	movs	r0, #54	; 0x36
 8000f26:	f7ff fe45 	bl	8000bb4 <LCD_WriteReg>
#if defined(LCD_1IN44)
	LCD_WriteData_8Bit( MemoryAccessReg_Data | 0x08);	//0x08 set RGB
#elif defined(LCD_1IN8)
	LCD_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f023 0308 	bic.w	r3, r3, #8
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fe5f 	bl	8000bf8 <LCD_WriteData_8Bit>
#endif
	
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000009c 	.word	0x2000009c

08000f48 <LCD_Init>:

/********************************************************************************
function:	
			initialization
********************************************************************************/
void LCD_Init( LCD_SCAN_DIR Lcd_ScanDir ){	
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	//Turn on the backlight
	LCD_BL_1;
 8000f52:	2201      	movs	r2, #1
 8000f54:	2110      	movs	r1, #16
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <LCD_Init+0x4c>)
 8000f58:	f002 fbc4 	bl	80036e4 <HAL_GPIO_WritePin>
	
	//Hardware reset
	LCD_Reset(); 
 8000f5c:	f7ff fe08 	bl	8000b70 <LCD_Reset>
	
	//Set the initialization register
	LCD_InitReg();
 8000f60:	f7ff fea0 	bl	8000ca4 <LCD_InitReg>
	
	//Set the display scan and color transfer modes	
	LCD_SetGramScanWay( Lcd_ScanDir );
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff7e 	bl	8000e68 <LCD_SetGramScanWay>
	Driver_Delay_ms(200); 
 8000f6c:	20c8      	movs	r0, #200	; 0xc8
 8000f6e:	f7ff fdf3 	bl	8000b58 <Driver_Delay_ms>
	
	//sleep out
	LCD_WriteReg(0x11);
 8000f72:	2011      	movs	r0, #17
 8000f74:	f7ff fe1e 	bl	8000bb4 <LCD_WriteReg>
	Driver_Delay_ms(120);
 8000f78:	2078      	movs	r0, #120	; 0x78
 8000f7a:	f7ff fded 	bl	8000b58 <Driver_Delay_ms>
	
	//Turn on the LCD display
	LCD_WriteReg(0x29);	
 8000f7e:	2029      	movs	r0, #41	; 0x29
 8000f80:	f7ff fe18 	bl	8000bb4 <LCD_WriteReg>

	//clear
	LCD_Clear(WHITE);	
 8000f84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f88:	f000 f8d8 	bl	800113c <LCD_Clear>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020000 	.word	0x40020000

08000f98 <LCD_SetWindows>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend ){
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	4603      	mov	r3, r0
 8000fac:	80bb      	strh	r3, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	807b      	strh	r3, [r7, #2]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	803b      	strh	r3, [r7, #0]

	//set the X coordinates
	LCD_WriteReg ( 0x2A ); 				
 8000fb6:	202a      	movs	r0, #42	; 0x2a
 8000fb8:	f7ff fdfc 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fe1b 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Xstart & 0xff) + sLCD_DIS.LCD_X_Adjust);			//Set the horizontal starting point to the low octet
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <LCD_SetWindows+0xa8>)
 8000fc8:	88db      	ldrh	r3, [r3, #6]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fe11 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fe0e 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_DIS.LCD_X_Adjust);	//Set the horizontal end to the low octet
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <LCD_SetWindows+0xa8>)
 8000fe2:	88db      	ldrh	r3, [r3, #6]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fe02 	bl	8000bf8 <LCD_WriteData_8Bit>

	//set the Y coordinates
	LCD_WriteReg ( 0x2B );
 8000ff4:	202b      	movs	r0, #43	; 0x2b
 8000ff6:	f7ff fddd 	bl	8000bb4 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fdfc 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Ystart & 0xff) + sLCD_DIS.LCD_Y_Adjust);
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <LCD_SetWindows+0xa8>)
 8001006:	891b      	ldrh	r3, [r3, #8]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4413      	add	r3, r2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fdf2 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fdef 	bl	8000bf8 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_DIS.LCD_Y_Adjust);
 800101a:	883b      	ldrh	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <LCD_SetWindows+0xa8>)
 8001020:	891b      	ldrh	r3, [r3, #8]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4413      	add	r3, r2
 8001026:	b2db      	uxtb	r3, r3
 8001028:	3b01      	subs	r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fde3 	bl	8000bf8 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0x2C);	
 8001032:	202c      	movs	r0, #44	; 0x2c
 8001034:	f7ff fdbe 	bl	8000bb4 <LCD_WriteReg>
	
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	2000009c 	.word	0x2000009c

08001044 <LCD_SetCursor>:
function:	Set the display point (Xpoint, Ypoint)
parameter: 
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor ( POINT Xpoint, POINT Ypoint ){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	80fb      	strh	r3, [r7, #6]
 8001050:	4613      	mov	r3, r2
 8001052:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	88fa      	ldrh	r2, [r7, #6]
 8001058:	88b9      	ldrh	r1, [r7, #4]
 800105a:	88f8      	ldrh	r0, [r7, #6]
 800105c:	f7ff ff9c 	bl	8000f98 <LCD_SetWindows>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <LCD_SetColor>:
function:	Set show color
parameter: 
		Color  :   Set show color
********************************************************************************/
//static void LCD_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint){		
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	807b      	strh	r3, [r7, #2]
	LCD_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint); 
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	887a      	ldrh	r2, [r7, #2]
 800107e:	fb03 f202 	mul.w	r2, r3, r2
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fdd8 	bl	8000c3c <LCD_WriteData_NLen16Bit>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <LCD_SetPointlColor>:
parameter: 
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor ( POINT Xpoint, POINT Ypoint, COLOR Color ){	
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
 800109e:	460b      	mov	r3, r1
 80010a0:	80bb      	strh	r3, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	807b      	strh	r3, [r7, #2]
	if ( ( Xpoint <= sLCD_DIS.LCD_Dis_Column ) && ( Ypoint <= sLCD_DIS.LCD_Dis_Page ) ){		
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <LCD_SetPointlColor+0x48>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	88fa      	ldrh	r2, [r7, #6]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d810      	bhi.n	80010d2 <LCD_SetPointlColor+0x3e>
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <LCD_SetPointlColor+0x48>)
 80010b2:	885b      	ldrh	r3, [r3, #2]
 80010b4:	88ba      	ldrh	r2, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d80b      	bhi.n	80010d2 <LCD_SetPointlColor+0x3e>
		LCD_SetCursor (Xpoint, Ypoint);		
 80010ba:	88ba      	ldrh	r2, [r7, #4]
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ffbf 	bl	8001044 <LCD_SetCursor>
		LCD_SetColor ( Color , 1 , 1);
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	2201      	movs	r2, #1
 80010ca:	2101      	movs	r1, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ffcb 	bl	8001068 <LCD_SetColor>
	}
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000009c 	.word	0x2000009c

080010e0 <LCD_SetArealColor>:
		Ystart :   Start point y coordinate
		Xend   :   End point coordinates
		Yend   :   End point coordinates
		Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor (POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR  Color){	
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4604      	mov	r4, r0
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	4623      	mov	r3, r4
 80010f0:	80fb      	strh	r3, [r7, #6]
 80010f2:	4603      	mov	r3, r0
 80010f4:	80bb      	strh	r3, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	807b      	strh	r3, [r7, #2]
 80010fa:	4613      	mov	r3, r2
 80010fc:	803b      	strh	r3, [r7, #0]
	if((Xend > Xstart) && (Yend > Ystart)){			
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	429a      	cmp	r2, r3
 8001104:	d915      	bls.n	8001132 <LCD_SetArealColor+0x52>
 8001106:	883a      	ldrh	r2, [r7, #0]
 8001108:	88bb      	ldrh	r3, [r7, #4]
 800110a:	429a      	cmp	r2, r3
 800110c:	d911      	bls.n	8001132 <LCD_SetArealColor+0x52>
		LCD_SetWindows( Xstart , Ystart , Xend , Yend  );
 800110e:	883b      	ldrh	r3, [r7, #0]
 8001110:	887a      	ldrh	r2, [r7, #2]
 8001112:	88b9      	ldrh	r1, [r7, #4]
 8001114:	88f8      	ldrh	r0, [r7, #6]
 8001116:	f7ff ff3f 	bl	8000f98 <LCD_SetWindows>
		LCD_SetColor ( Color ,Xend - Xstart , Yend - Ystart );
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	b299      	uxth	r1, r3
 8001122:	883a      	ldrh	r2, [r7, #0]
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	b29a      	uxth	r2, r3
 800112a:	8b3b      	ldrh	r3, [r7, #24]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff9b 	bl	8001068 <LCD_SetColor>
	}
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
	...

0800113c <LCD_Clear>:

/********************************************************************************
function:	
			Clear screen 
********************************************************************************/
void LCD_Clear(COLOR  Color){
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]

	LCD_SetArealColor(0,0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page  , Color);	
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <LCD_Clear+0x28>)
 8001148:	881a      	ldrh	r2, [r3, #0]
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <LCD_Clear+0x28>)
 800114c:	8859      	ldrh	r1, [r3, #2]
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	460b      	mov	r3, r1
 8001154:	2100      	movs	r1, #0
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ffc2 	bl	80010e0 <LCD_SetArealColor>

}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000009c 	.word	0x2000009c

08001168 <LCD_DrawPoint>:
			Dot_Pixel	:	point size
********************************************************************************/
void LCD_DrawPoint(	POINT Xpoint, POINT Ypoint, 
					COLOR Color, 
					DOT_PIXEL Dot_Pixel,
					DOT_STYLE DOT_STYLE){		
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	4603      	mov	r3, r0
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	707b      	strb	r3, [r7, #1]
						
	if ( Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page ) {
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <LCD_DrawPoint+0xec>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	429a      	cmp	r2, r3
 800118e:	d85c      	bhi.n	800124a <LCD_DrawPoint+0xe2>
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <LCD_DrawPoint+0xec>)
 8001192:	885b      	ldrh	r3, [r3, #2]
 8001194:	88ba      	ldrh	r2, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	d857      	bhi.n	800124a <LCD_DrawPoint+0xe2>
		return;
	}
	
	uint16_t XDir_Num ,YDir_Num;
	if(DOT_STYLE == DOT_FILL_AROUND){
 800119a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d12c      	bne.n	80011fc <LCD_DrawPoint+0x94>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 80011a2:	2300      	movs	r3, #0
 80011a4:	81fb      	strh	r3, [r7, #14]
 80011a6:	e022      	b.n	80011ee <LCD_DrawPoint+0x86>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 80011a8:	2300      	movs	r3, #0
 80011aa:	81bb      	strh	r3, [r7, #12]
 80011ac:	e016      	b.n	80011dc <LCD_DrawPoint+0x74>
				LCD_SetPointlColor( Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80011ae:	88fa      	ldrh	r2, [r7, #6]
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	4413      	add	r3, r2
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	787b      	ldrb	r3, [r7, #1]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	b298      	uxth	r0, r3
 80011be:	88ba      	ldrh	r2, [r7, #4]
 80011c0:	89bb      	ldrh	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	787b      	ldrb	r3, [r7, #1]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff ff5f 	bl	8001094 <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 80011d6:	89bb      	ldrh	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	81bb      	strh	r3, [r7, #12]
 80011dc:	89ba      	ldrh	r2, [r7, #12]
 80011de:	787b      	ldrb	r3, [r7, #1]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	3b01      	subs	r3, #1
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbe2      	blt.n	80011ae <LCD_DrawPoint+0x46>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	3301      	adds	r3, #1
 80011ec:	81fb      	strh	r3, [r7, #14]
 80011ee:	89fa      	ldrh	r2, [r7, #14]
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3b01      	subs	r3, #1
 80011f6:	429a      	cmp	r2, r3
 80011f8:	dbd6      	blt.n	80011a8 <LCD_DrawPoint+0x40>
 80011fa:	e027      	b.n	800124c <LCD_DrawPoint+0xe4>
			}
		}
	}else{
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 80011fc:	2300      	movs	r3, #0
 80011fe:	81fb      	strh	r3, [r7, #14]
 8001200:	e01d      	b.n	800123e <LCD_DrawPoint+0xd6>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8001202:	2300      	movs	r3, #0
 8001204:	81bb      	strh	r3, [r7, #12]
 8001206:	e012      	b.n	800122e <LCD_DrawPoint+0xc6>
				LCD_SetPointlColor( Xpoint + XDir_Num - 1 , Ypoint + YDir_Num -1 , Color);
 8001208:	88fa      	ldrh	r2, [r7, #6]
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	4413      	add	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	3b01      	subs	r3, #1
 8001212:	b298      	uxth	r0, r3
 8001214:	88ba      	ldrh	r2, [r7, #4]
 8001216:	89bb      	ldrh	r3, [r7, #12]
 8001218:	4413      	add	r3, r2
 800121a:	b29b      	uxth	r3, r3
 800121c:	3b01      	subs	r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff ff36 	bl	8001094 <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8001228:	89bb      	ldrh	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	81bb      	strh	r3, [r7, #12]
 800122e:	787b      	ldrb	r3, [r7, #1]
 8001230:	b29b      	uxth	r3, r3
 8001232:	89ba      	ldrh	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3e7      	bcc.n	8001208 <LCD_DrawPoint+0xa0>
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	3301      	adds	r3, #1
 800123c:	81fb      	strh	r3, [r7, #14]
 800123e:	787b      	ldrb	r3, [r7, #1]
 8001240:	b29b      	uxth	r3, r3
 8001242:	89fa      	ldrh	r2, [r7, #14]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3dc      	bcc.n	8001202 <LCD_DrawPoint+0x9a>
 8001248:	e000      	b.n	800124c <LCD_DrawPoint+0xe4>
		return;
 800124a:	bf00      	nop
			}
		}
	}	
}
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	bf00      	nop
 8001254:	2000009c 	.word	0x2000009c

08001258 <LCD_DrawLine>:
********************************************************************************/
void LCD_DrawLine ( POINT Xstart, POINT Ystart, 
					POINT Xend, POINT Yend, 
					COLOR Color,
					LINE_STYLE Line_Style,
					DOT_PIXEL Dot_Pixel){
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b08d      	sub	sp, #52	; 0x34
 800125c:	af02      	add	r7, sp, #8
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4623      	mov	r3, r4
 8001268:	80fb      	strh	r3, [r7, #6]
 800126a:	4603      	mov	r3, r0
 800126c:	80bb      	strh	r3, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	807b      	strh	r3, [r7, #2]
 8001272:	4613      	mov	r3, r2
 8001274:	803b      	strh	r3, [r7, #0]
						
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8001276:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <LCD_DrawLine+0x158>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	88fa      	ldrh	r2, [r7, #6]
 800127c:	429a      	cmp	r2, r3
 800127e:	f200 808f 	bhi.w	80013a0 <LCD_DrawLine+0x148>
 8001282:	4b4b      	ldr	r3, [pc, #300]	; (80013b0 <LCD_DrawLine+0x158>)
 8001284:	885b      	ldrh	r3, [r3, #2]
 8001286:	88ba      	ldrh	r2, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	f200 8089 	bhi.w	80013a0 <LCD_DrawLine+0x148>
 800128e:	4b48      	ldr	r3, [pc, #288]	; (80013b0 <LCD_DrawLine+0x158>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	429a      	cmp	r2, r3
 8001296:	f200 8083 	bhi.w	80013a0 <LCD_DrawLine+0x148>
 800129a:	4b45      	ldr	r3, [pc, #276]	; (80013b0 <LCD_DrawLine+0x158>)
 800129c:	885b      	ldrh	r3, [r3, #2]
 800129e:	883a      	ldrh	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d87d      	bhi.n	80013a0 <LCD_DrawLine+0x148>
		return;
	}	
	
	POINT Xpoint = Xstart; 
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	POINT Ypoint = Ystart; 
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	84bb      	strh	r3, [r7, #36]	; 0x24
	int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bfb8      	it	lt
 80012b6:	425b      	neglt	r3, r3
 80012b8:	61bb      	str	r3, [r7, #24]
	int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80012ba:	883a      	ldrh	r2, [r7, #0]
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bfb8      	it	lt
 80012c4:	425b      	neglt	r3, r3
 80012c6:	425b      	negs	r3, r3
 80012c8:	617b      	str	r3, [r7, #20]
	
	// Increment direction, 1 is positive, -1 is counter;
	int32_t XAddway = Xstart < Xend ? 1 : -1;
 80012ca:	88fa      	ldrh	r2, [r7, #6]
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d201      	bcs.n	80012d6 <LCD_DrawLine+0x7e>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e001      	b.n	80012da <LCD_DrawLine+0x82>
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012da:	613b      	str	r3, [r7, #16]
	int32_t YAddway = Ystart < Yend ? 1 : -1;
 80012dc:	88ba      	ldrh	r2, [r7, #4]
 80012de:	883b      	ldrh	r3, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d201      	bcs.n	80012e8 <LCD_DrawLine+0x90>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e001      	b.n	80012ec <LCD_DrawLine+0x94>
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ec:	60fb      	str	r3, [r7, #12]
	
	//Cumulative error
	int32_t Esp = dx + dy;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	4413      	add	r3, r2
 80012f4:	623b      	str	r3, [r7, #32]
	int8_t Line_Style_Temp = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	77fb      	strb	r3, [r7, #31]

	for (;;){
		Line_Style_Temp++;
 80012fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	3301      	adds	r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	77fb      	strb	r3, [r7, #31]
		//Painted dotted line, 2 point is really virtual
		if(Line_Style == LINE_DOTTED && Line_Style_Temp %3 == 0){
 8001306:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800130a:	2b01      	cmp	r3, #1
 800130c:	d11a      	bne.n	8001344 <LCD_DrawLine+0xec>
 800130e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <LCD_DrawLine+0x15c>)
 8001314:	fb83 3102 	smull	r3, r1, r3, r2
 8001318:	17d3      	asrs	r3, r2, #31
 800131a:	1ac9      	subs	r1, r1, r3
 800131c:	460b      	mov	r3, r1
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	440b      	add	r3, r1
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b25b      	sxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <LCD_DrawLine+0xec>
			LCD_DrawPoint( Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 800132a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800132e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001330:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001332:	2201      	movs	r2, #1
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133a:	f7ff ff15 	bl	8001168 <LCD_DrawPoint>
			Line_Style_Temp = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	e008      	b.n	8001356 <LCD_DrawLine+0xfe>
		}else{
			LCD_DrawPoint( Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 8001344:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001348:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800134a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800134c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800134e:	2401      	movs	r4, #1
 8001350:	9400      	str	r4, [sp, #0]
 8001352:	f7ff ff09 	bl	8001168 <LCD_DrawPoint>
		}	
        if (2 * Esp >= dy) {
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	dc0c      	bgt.n	800137a <LCD_DrawLine+0x122>
			if (Xpoint == Xend) break;			
 8001360:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	429a      	cmp	r2, r3
 8001366:	d01d      	beq.n	80013a4 <LCD_DrawLine+0x14c>
            Esp += dy; 
 8001368:	6a3a      	ldr	r2, [r7, #32]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	4413      	add	r3, r2
 800136e:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	b29a      	uxth	r2, r3
 8001374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001376:	4413      	add	r3, r2
 8001378:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbba      	blt.n	80012fa <LCD_DrawLine+0xa2>
			if (Ypoint == Yend) break;	
 8001384:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001386:	883b      	ldrh	r3, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d00d      	beq.n	80013a8 <LCD_DrawLine+0x150>
            Esp += dx; 
 800138c:	6a3a      	ldr	r2, [r7, #32]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4413      	add	r3, r2
 8001392:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	b29a      	uxth	r2, r3
 8001398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800139a:	4413      	add	r3, r2
 800139c:	84bb      	strh	r3, [r7, #36]	; 0x24
		Line_Style_Temp++;
 800139e:	e7ac      	b.n	80012fa <LCD_DrawLine+0xa2>
		return;
 80013a0:	bf00      	nop
 80013a2:	e002      	b.n	80013aa <LCD_DrawLine+0x152>
			if (Xpoint == Xend) break;			
 80013a4:	bf00      	nop
 80013a6:	e000      	b.n	80013aa <LCD_DrawLine+0x152>
			if (Ypoint == Yend) break;	
 80013a8:	bf00      	nop
        }
	}
}   
 80013aa:	372c      	adds	r7, #44	; 0x2c
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	2000009c 	.word	0x2000009c
 80013b4:	55555556 	.word	0x55555556

080013b8 <LCD_DrawRectangle>:
********************************************************************************/
void LCD_DrawRectangle ( 	POINT Xstart, POINT Ystart, 
							POINT Xend, POINT Yend, 
							COLOR Color, 
							DRAW_FILL Filled,
							DOT_PIXEL Dot_Pixel ){
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af04      	add	r7, sp, #16
 80013be:	4604      	mov	r4, r0
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4623      	mov	r3, r4
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	4603      	mov	r3, r0
 80013cc:	80bb      	strh	r3, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	807b      	strh	r3, [r7, #2]
 80013d2:	4613      	mov	r3, r2
 80013d4:	803b      	strh	r3, [r7, #0]
					
	if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page || Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <LCD_DrawRectangle+0xdc>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	88fa      	ldrh	r2, [r7, #6]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d854      	bhi.n	800148a <LCD_DrawRectangle+0xd2>
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <LCD_DrawRectangle+0xdc>)
 80013e2:	885b      	ldrh	r3, [r3, #2]
 80013e4:	88ba      	ldrh	r2, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d84f      	bhi.n	800148a <LCD_DrawRectangle+0xd2>
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <LCD_DrawRectangle+0xdc>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d84a      	bhi.n	800148a <LCD_DrawRectangle+0xd2>
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <LCD_DrawRectangle+0xdc>)
 80013f6:	885b      	ldrh	r3, [r3, #2]
 80013f8:	883a      	ldrh	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d845      	bhi.n	800148a <LCD_DrawRectangle+0xd2>
		return;
	}	
	
	if ( Filled ){
 80013fe:	7f3b      	ldrb	r3, [r7, #28]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d009      	beq.n	8001418 <LCD_DrawRectangle+0x60>
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 8001404:	883c      	ldrh	r4, [r7, #0]
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	88b9      	ldrh	r1, [r7, #4]
 800140a:	88f8      	ldrh	r0, [r7, #6]
 800140c:	8b3b      	ldrh	r3, [r7, #24]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4623      	mov	r3, r4
 8001412:	f7ff fe65 	bl	80010e0 <LCD_SetArealColor>
 8001416:	e039      	b.n	800148c <LCD_DrawRectangle+0xd4>
	}else{
		LCD_DrawLine ( Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8001418:	88bc      	ldrh	r4, [r7, #4]
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	88b9      	ldrh	r1, [r7, #4]
 800141e:	88f8      	ldrh	r0, [r7, #6]
 8001420:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2300      	movs	r3, #0
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	8b3b      	ldrh	r3, [r7, #24]
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4623      	mov	r3, r4
 8001430:	f7ff ff12 	bl	8001258 <LCD_DrawLine>
		LCD_DrawLine ( Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8001434:	883c      	ldrh	r4, [r7, #0]
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	88b9      	ldrh	r1, [r7, #4]
 800143a:	88f8      	ldrh	r0, [r7, #6]
 800143c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2300      	movs	r3, #0
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	8b3b      	ldrh	r3, [r7, #24]
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4623      	mov	r3, r4
 800144c:	f7ff ff04 	bl	8001258 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8001450:	88bc      	ldrh	r4, [r7, #4]
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	8839      	ldrh	r1, [r7, #0]
 8001456:	8878      	ldrh	r0, [r7, #2]
 8001458:	f897 3020 	ldrb.w	r3, [r7, #32]
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	2300      	movs	r3, #0
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	8b3b      	ldrh	r3, [r7, #24]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	4623      	mov	r3, r4
 8001468:	f7ff fef6 	bl	8001258 <LCD_DrawLine>
		LCD_DrawLine ( Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);		
 800146c:	883c      	ldrh	r4, [r7, #0]
 800146e:	88fa      	ldrh	r2, [r7, #6]
 8001470:	8839      	ldrh	r1, [r7, #0]
 8001472:	8878      	ldrh	r0, [r7, #2]
 8001474:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2300      	movs	r3, #0
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	8b3b      	ldrh	r3, [r7, #24]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4623      	mov	r3, r4
 8001484:	f7ff fee8 	bl	8001258 <LCD_DrawLine>
 8001488:	e000      	b.n	800148c <LCD_DrawRectangle+0xd4>
		return;
 800148a:	bf00      	nop
	}
}
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	2000009c 	.word	0x2000009c

08001498 <LCD_DrawCircle>:
			Filled : Whether it is filled: 1 filling 0��Do not
********************************************************************************/
void LCD_DrawCircle ( 	POINT X_Center, POINT Y_Center, LENGTH Radius, 
						COLOR Color, 
						DRAW_FILL  Draw_Fill ,
						DOT_PIXEL Dot_Pixel ){
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af02      	add	r7, sp, #8
 800149e:	4604      	mov	r4, r0
 80014a0:	4608      	mov	r0, r1
 80014a2:	4611      	mov	r1, r2
 80014a4:	461a      	mov	r2, r3
 80014a6:	4623      	mov	r3, r4
 80014a8:	80fb      	strh	r3, [r7, #6]
 80014aa:	4603      	mov	r3, r0
 80014ac:	80bb      	strh	r3, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	807b      	strh	r3, [r7, #2]
 80014b2:	4613      	mov	r3, r2
 80014b4:	803b      	strh	r3, [r7, #0]
							
	if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 80014b6:	4ba1      	ldr	r3, [pc, #644]	; (800173c <LCD_DrawCircle+0x2a4>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	88fa      	ldrh	r2, [r7, #6]
 80014bc:	429a      	cmp	r2, r3
 80014be:	f200 8161 	bhi.w	8001784 <LCD_DrawCircle+0x2ec>
 80014c2:	4b9e      	ldr	r3, [pc, #632]	; (800173c <LCD_DrawCircle+0x2a4>)
 80014c4:	885b      	ldrh	r3, [r3, #2]
 80014c6:	88ba      	ldrh	r2, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f080 815b 	bcs.w	8001784 <LCD_DrawCircle+0x2ec>
		return;
	}						
	
	//Draw a circle from (0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0; 
 80014ce:	2300      	movs	r3, #0
 80014d0:	81fb      	strh	r3, [r7, #14]
	YCurrent = Radius;	
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	81bb      	strh	r3, [r7, #12]
	
	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - ( Radius << 1 );
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f1c3 0303 	rsb	r3, r3, #3
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	817b      	strh	r3, [r7, #10]
	
	int16_t sCountY;
	if ( Draw_Fill ){
 80014e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8143 	beq.w	8001774 <LCD_DrawCircle+0x2dc>
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 80014ee:	e096      	b.n	800161e <LCD_DrawCircle+0x186>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	813b      	strh	r3, [r7, #8]
 80014f4:	e065      	b.n	80015c2 <LCD_DrawCircle+0x12a>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center + sCountY,   Color );           //1
 80014f6:	89fa      	ldrh	r2, [r7, #14]
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4413      	add	r3, r2
 80014fc:	b298      	uxth	r0, r3
 80014fe:	893a      	ldrh	r2, [r7, #8]
 8001500:	88bb      	ldrh	r3, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	883a      	ldrh	r2, [r7, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fdc3 	bl	8001094 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center + sCountY,   Color );           //2       
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	88fa      	ldrh	r2, [r7, #6]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	b298      	uxth	r0, r3
 8001516:	893a      	ldrh	r2, [r7, #8]
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	b29b      	uxth	r3, r3
 800151e:	883a      	ldrh	r2, [r7, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fdb7 	bl	8001094 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center + XCurrent, Color );           //3
 8001526:	893b      	ldrh	r3, [r7, #8]
 8001528:	88fa      	ldrh	r2, [r7, #6]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b298      	uxth	r0, r3
 800152e:	89fa      	ldrh	r2, [r7, #14]
 8001530:	88bb      	ldrh	r3, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	b29b      	uxth	r3, r3
 8001536:	883a      	ldrh	r2, [r7, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fdab 	bl	8001094 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center - XCurrent, Color );           //4
 800153e:	893b      	ldrh	r3, [r7, #8]
 8001540:	88fa      	ldrh	r2, [r7, #6]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	b298      	uxth	r0, r3
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	88ba      	ldrh	r2, [r7, #4]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	883a      	ldrh	r2, [r7, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fd9f 	bl	8001094 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center - sCountY,   Color );           //5    
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	88fa      	ldrh	r2, [r7, #6]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	b298      	uxth	r0, r3
 800155e:	893b      	ldrh	r3, [r7, #8]
 8001560:	88ba      	ldrh	r2, [r7, #4]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	b29b      	uxth	r3, r3
 8001566:	883a      	ldrh	r2, [r7, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fd93 	bl	8001094 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center - sCountY,   Color );           //6
 800156e:	89fa      	ldrh	r2, [r7, #14]
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	4413      	add	r3, r2
 8001574:	b298      	uxth	r0, r3
 8001576:	893b      	ldrh	r3, [r7, #8]
 8001578:	88ba      	ldrh	r2, [r7, #4]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	b29b      	uxth	r3, r3
 800157e:	883a      	ldrh	r2, [r7, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fd87 	bl	8001094 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center - XCurrent, Color );           //7 	
 8001586:	893a      	ldrh	r2, [r7, #8]
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	4413      	add	r3, r2
 800158c:	b298      	uxth	r0, r3
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	88ba      	ldrh	r2, [r7, #4]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	883a      	ldrh	r2, [r7, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fd7b 	bl	8001094 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center + XCurrent, Color );           //0				
 800159e:	893a      	ldrh	r2, [r7, #8]
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	4413      	add	r3, r2
 80015a4:	b298      	uxth	r0, r3
 80015a6:	89fa      	ldrh	r2, [r7, #14]
 80015a8:	88bb      	ldrh	r3, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	883a      	ldrh	r2, [r7, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fd6f 	bl	8001094 <LCD_SetPointlColor>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 80015b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	813b      	strh	r3, [r7, #8]
 80015c2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80015c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dd93      	ble.n	80014f6 <LCD_DrawCircle+0x5e>
			}
			if ( Esp < 0 ) 
 80015ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da09      	bge.n	80015ea <LCD_DrawCircle+0x152>
				Esp += 4 * XCurrent + 6;	  
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	b29a      	uxth	r2, r3
 80015dc:	897b      	ldrh	r3, [r7, #10]
 80015de:	4413      	add	r3, r2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	3306      	adds	r3, #6
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	817b      	strh	r3, [r7, #10]
 80015e8:	e013      	b.n	8001612 <LCD_DrawCircle+0x17a>
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 80015ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	897b      	ldrh	r3, [r7, #10]
 80015fc:	4413      	add	r3, r2
 80015fe:	b29b      	uxth	r3, r3
 8001600:	330a      	adds	r3, #10
 8001602:	b29b      	uxth	r3, r3
 8001604:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8001606:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b01      	subs	r3, #1
 800160e:	b29b      	uxth	r3, r3
 8001610:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8001612:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001616:	b29b      	uxth	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b29b      	uxth	r3, r3
 800161c:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 800161e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001622:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	f77f af62 	ble.w	80014f0 <LCD_DrawCircle+0x58>
 800162c:	e0ab      	b.n	8001786 <LCD_DrawCircle+0x2ee>
		}
	}else{ //Draw a hollow circle  
		while ( XCurrent <= YCurrent ){ 	
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //1
 800162e:	89fa      	ldrh	r2, [r7, #14]
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	4413      	add	r3, r2
 8001634:	b298      	uxth	r0, r3
 8001636:	89ba      	ldrh	r2, [r7, #12]
 8001638:	88bb      	ldrh	r3, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	b299      	uxth	r1, r3
 800163e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001642:	883a      	ldrh	r2, [r7, #0]
 8001644:	2401      	movs	r4, #1
 8001646:	9400      	str	r4, [sp, #0]
 8001648:	f7ff fd8e 	bl	8001168 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //2      
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b298      	uxth	r0, r3
 8001654:	89ba      	ldrh	r2, [r7, #12]
 8001656:	88bb      	ldrh	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	b299      	uxth	r1, r3
 800165c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001660:	883a      	ldrh	r2, [r7, #0]
 8001662:	2401      	movs	r4, #1
 8001664:	9400      	str	r4, [sp, #0]
 8001666:	f7ff fd7f 	bl	8001168 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //3
 800166a:	89bb      	ldrh	r3, [r7, #12]
 800166c:	88fa      	ldrh	r2, [r7, #6]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	b298      	uxth	r0, r3
 8001672:	89fa      	ldrh	r2, [r7, #14]
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	b299      	uxth	r1, r3
 800167a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800167e:	883a      	ldrh	r2, [r7, #0]
 8001680:	2401      	movs	r4, #1
 8001682:	9400      	str	r4, [sp, #0]
 8001684:	f7ff fd70 	bl	8001168 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //4
 8001688:	89bb      	ldrh	r3, [r7, #12]
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b298      	uxth	r0, r3
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	88ba      	ldrh	r2, [r7, #4]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	b299      	uxth	r1, r3
 8001698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800169c:	883a      	ldrh	r2, [r7, #0]
 800169e:	2401      	movs	r4, #1
 80016a0:	9400      	str	r4, [sp, #0]
 80016a2:	f7ff fd61 	bl	8001168 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //5       
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	88fa      	ldrh	r2, [r7, #6]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	b298      	uxth	r0, r3
 80016ae:	89bb      	ldrh	r3, [r7, #12]
 80016b0:	88ba      	ldrh	r2, [r7, #4]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b299      	uxth	r1, r3
 80016b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016ba:	883a      	ldrh	r2, [r7, #0]
 80016bc:	2401      	movs	r4, #1
 80016be:	9400      	str	r4, [sp, #0]
 80016c0:	f7ff fd52 	bl	8001168 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //6
 80016c4:	89fa      	ldrh	r2, [r7, #14]
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4413      	add	r3, r2
 80016ca:	b298      	uxth	r0, r3
 80016cc:	89bb      	ldrh	r3, [r7, #12]
 80016ce:	88ba      	ldrh	r2, [r7, #4]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b299      	uxth	r1, r3
 80016d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016d8:	883a      	ldrh	r2, [r7, #0]
 80016da:	2401      	movs	r4, #1
 80016dc:	9400      	str	r4, [sp, #0]
 80016de:	f7ff fd43 	bl	8001168 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //7 
 80016e2:	89ba      	ldrh	r2, [r7, #12]
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	4413      	add	r3, r2
 80016e8:	b298      	uxth	r0, r3
 80016ea:	89fb      	ldrh	r3, [r7, #14]
 80016ec:	88ba      	ldrh	r2, [r7, #4]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b299      	uxth	r1, r3
 80016f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016f6:	883a      	ldrh	r2, [r7, #0]
 80016f8:	2401      	movs	r4, #1
 80016fa:	9400      	str	r4, [sp, #0]
 80016fc:	f7ff fd34 	bl	8001168 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //0
 8001700:	89ba      	ldrh	r2, [r7, #12]
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	4413      	add	r3, r2
 8001706:	b298      	uxth	r0, r3
 8001708:	89fa      	ldrh	r2, [r7, #14]
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	b299      	uxth	r1, r3
 8001710:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001714:	883a      	ldrh	r2, [r7, #0]
 8001716:	2401      	movs	r4, #1
 8001718:	9400      	str	r4, [sp, #0]
 800171a:	f7ff fd25 	bl	8001168 <LCD_DrawPoint>
			
			if ( Esp < 0 ) 
 800171e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001722:	2b00      	cmp	r3, #0
 8001724:	da0c      	bge.n	8001740 <LCD_DrawCircle+0x2a8>
				Esp += 4 * XCurrent + 6;	  
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	b29a      	uxth	r2, r3
 800172c:	897b      	ldrh	r3, [r7, #10]
 800172e:	4413      	add	r3, r2
 8001730:	b29b      	uxth	r3, r3
 8001732:	3306      	adds	r3, #6
 8001734:	b29b      	uxth	r3, r3
 8001736:	817b      	strh	r3, [r7, #10]
 8001738:	e016      	b.n	8001768 <LCD_DrawCircle+0x2d0>
 800173a:	bf00      	nop
 800173c:	2000009c 	.word	0x2000009c
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8001740:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001744:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	b29b      	uxth	r3, r3
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	b29a      	uxth	r2, r3
 8001750:	897b      	ldrh	r3, [r7, #10]
 8001752:	4413      	add	r3, r2
 8001754:	b29b      	uxth	r3, r3
 8001756:	330a      	adds	r3, #10
 8001758:	b29b      	uxth	r3, r3
 800175a:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 800175c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001760:	b29b      	uxth	r3, r3
 8001762:	3b01      	subs	r3, #1
 8001764:	b29b      	uxth	r3, r3
 8001766:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8001768:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800176c:	b29b      	uxth	r3, r3
 800176e:	3301      	adds	r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ 	
 8001774:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001778:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	f77f af56 	ble.w	800162e <LCD_DrawCircle+0x196>
 8001782:	e000      	b.n	8001786 <LCD_DrawCircle+0x2ee>
		return;
 8001784:	bf00      	nop
		}
	}
}
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}

0800178c <LCD_DisplayChar>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayChar( 	POINT Xpoint, POINT Ypoint, const char Acsii_Char,
						sFONT* Font, COLOR Color_Background,	COLOR Color_Foreground ){
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	4603      	mov	r3, r0
 8001796:	81fb      	strh	r3, [r7, #14]
 8001798:	460b      	mov	r3, r1
 800179a:	81bb      	strh	r3, [r7, #12]
 800179c:	4613      	mov	r3, r2
 800179e:	72fb      	strb	r3, [r7, #11]
	POINT Page, Column;
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 80017a0:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <LCD_DisplayChar+0x14c>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	89fa      	ldrh	r2, [r7, #14]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	f080 8091 	bcs.w	80018ce <LCD_DisplayChar+0x142>
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <LCD_DisplayChar+0x14c>)
 80017ae:	885b      	ldrh	r3, [r3, #2]
 80017b0:	89ba      	ldrh	r2, [r7, #12]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	f080 808b 	bcs.w	80018ce <LCD_DisplayChar+0x142>
		return;
	}
	
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	3b20      	subs	r3, #32
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	88d2      	ldrh	r2, [r2, #6]
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	8892      	ldrh	r2, [r2, #4]
 80017c8:	08d2      	lsrs	r2, r2, #3
 80017ca:	b292      	uxth	r2, r2
 80017cc:	4611      	mov	r1, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	8892      	ldrh	r2, [r2, #4]
 80017d2:	f002 0207 	and.w	r2, r2, #7
 80017d6:	b292      	uxth	r2, r2
 80017d8:	2a00      	cmp	r2, #0
 80017da:	bf14      	ite	ne
 80017dc:	2201      	movne	r2, #1
 80017de:	2200      	moveq	r2, #0
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440a      	add	r2, r1
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
	const unsigned char* ptr = &Font->table[Char_Offset];
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	4413      	add	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]

	for ( Page = 0; Page < Font->Height; Page ++ ){
 80017f4:	2300      	movs	r3, #0
 80017f6:	83fb      	strh	r3, [r7, #30]
 80017f8:	e063      	b.n	80018c2 <LCD_DisplayChar+0x136>
		for ( Column = 0; Column < Font->Width; Column ++ ){
 80017fa:	2300      	movs	r3, #0
 80017fc:	83bb      	strh	r3, [r7, #28]
 80017fe:	e04e      	b.n	800189e <LCD_DisplayChar+0x112>
			
			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background){//this process is to speed up the scan
 8001800:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001806:	4293      	cmp	r3, r2
 8001808:	d118      	bne.n	800183c <LCD_DisplayChar+0xb0>
				if (*ptr & (0x80 >> (Column % 8)))
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	8bbb      	ldrh	r3, [r7, #28]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	fa42 f303 	asr.w	r3, r2, r3
 800181c:	400b      	ands	r3, r1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d031      	beq.n	8001886 <LCD_DisplayChar+0xfa>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8001822:	89fa      	ldrh	r2, [r7, #14]
 8001824:	8bbb      	ldrh	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	b298      	uxth	r0, r3
 800182a:	89ba      	ldrh	r2, [r7, #12]
 800182c:	8bfb      	ldrh	r3, [r7, #30]
 800182e:	4413      	add	r3, r2
 8001830:	b29b      	uxth	r3, r3
 8001832:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff fc2d 	bl	8001094 <LCD_SetPointlColor>
 800183a:	e024      	b.n	8001886 <LCD_DisplayChar+0xfa>
			}else{
				if (*ptr & (0x80 >> (Column % 8))){
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	8bbb      	ldrh	r3, [r7, #28]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	fa42 f303 	asr.w	r3, r2, r3
 800184e:	400b      	ands	r3, r1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00c      	beq.n	800186e <LCD_DisplayChar+0xe2>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8001854:	89fa      	ldrh	r2, [r7, #14]
 8001856:	8bbb      	ldrh	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	b298      	uxth	r0, r3
 800185c:	89ba      	ldrh	r2, [r7, #12]
 800185e:	8bfb      	ldrh	r3, [r7, #30]
 8001860:	4413      	add	r3, r2
 8001862:	b29b      	uxth	r3, r3
 8001864:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff fc14 	bl	8001094 <LCD_SetPointlColor>
 800186c:	e00b      	b.n	8001886 <LCD_DisplayChar+0xfa>
				}else{
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Background );
 800186e:	89fa      	ldrh	r2, [r7, #14]
 8001870:	8bbb      	ldrh	r3, [r7, #28]
 8001872:	4413      	add	r3, r2
 8001874:	b298      	uxth	r0, r3
 8001876:	89ba      	ldrh	r2, [r7, #12]
 8001878:	8bfb      	ldrh	r3, [r7, #30]
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff fc07 	bl	8001094 <LCD_SetPointlColor>
				}
			}
			//One pixel is 8 bits
            if (Column % 8 == 7) {
 8001886:	8bbb      	ldrh	r3, [r7, #28]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	b29b      	uxth	r3, r3
 800188e:	2b07      	cmp	r3, #7
 8001890:	d102      	bne.n	8001898 <LCD_DisplayChar+0x10c>
                ptr++;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	3301      	adds	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8001898:	8bbb      	ldrh	r3, [r7, #28]
 800189a:	3301      	adds	r3, #1
 800189c:	83bb      	strh	r3, [r7, #28]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	889b      	ldrh	r3, [r3, #4]
 80018a2:	8bba      	ldrh	r2, [r7, #28]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3ab      	bcc.n	8001800 <LCD_DisplayChar+0x74>
            }	
		}/* Write a line */
		if (Font->Width % 8 != 0) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	889b      	ldrh	r3, [r3, #4]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <LCD_DisplayChar+0x130>
				ptr++;
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	3301      	adds	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
	for ( Page = 0; Page < Font->Height; Page ++ ){
 80018bc:	8bfb      	ldrh	r3, [r7, #30]
 80018be:	3301      	adds	r3, #1
 80018c0:	83fb      	strh	r3, [r7, #30]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	88db      	ldrh	r3, [r3, #6]
 80018c6:	8bfa      	ldrh	r2, [r7, #30]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d396      	bcc.n	80017fa <LCD_DisplayChar+0x6e>
 80018cc:	e000      	b.n	80018d0 <LCD_DisplayChar+0x144>
		return;
 80018ce:	bf00      	nop
		}
	}/* Write all */
}
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000009c 	.word	0x2000009c

080018dc <LCD_DisplayString>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayString (	POINT Xstart, POINT Ystart, const char * pString, 
							sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	60ba      	str	r2, [r7, #8]
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4603      	mov	r3, r0
 80018e8:	81fb      	strh	r3, [r7, #14]
 80018ea:	460b      	mov	r3, r1
 80018ec:	81bb      	strh	r3, [r7, #12]
	POINT Xpoint = Xstart;
 80018ee:	89fb      	ldrh	r3, [r7, #14]
 80018f0:	82fb      	strh	r3, [r7, #22]
	POINT Ypoint = Ystart;
 80018f2:	89bb      	ldrh	r3, [r7, #12]
 80018f4:	82bb      	strh	r3, [r7, #20]

	if (Xstart >= sLCD_DIS.LCD_Dis_Column || Ystart >= sLCD_DIS.LCD_Dis_Page) {
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <LCD_DisplayString+0xa0>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	89fa      	ldrh	r2, [r7, #14]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d238      	bcs.n	8001972 <LCD_DisplayString+0x96>
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <LCD_DisplayString+0xa0>)
 8001902:	885b      	ldrh	r3, [r3, #2]
 8001904:	89ba      	ldrh	r2, [r7, #12]
 8001906:	429a      	cmp	r2, r3
 8001908:	d233      	bcs.n	8001972 <LCD_DisplayString+0x96>
		return;
	}
		
	while ( * pString != '\0')
 800190a:	e02d      	b.n	8001968 <LCD_DisplayString+0x8c>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
		if ( ( Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ){
 800190c:	8afb      	ldrh	r3, [r7, #22]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	8892      	ldrh	r2, [r2, #4]
 8001912:	4413      	add	r3, r2
 8001914:	4a19      	ldr	r2, [pc, #100]	; (800197c <LCD_DisplayString+0xa0>)
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	4293      	cmp	r3, r2
 800191a:	dd06      	ble.n	800192a <LCD_DisplayString+0x4e>
			Xpoint = Xstart;
 800191c:	89fb      	ldrh	r3, [r7, #14]
 800191e:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	88da      	ldrh	r2, [r3, #6]
 8001924:	8abb      	ldrh	r3, [r7, #20]
 8001926:	4413      	add	r3, r2
 8001928:	82bb      	strh	r3, [r7, #20]
		}
		
		// If the Y direction is full, reposition to (Xstart, Ystart)
		if ( ( Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ){
 800192a:	8abb      	ldrh	r3, [r7, #20]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	88d2      	ldrh	r2, [r2, #6]
 8001930:	4413      	add	r3, r2
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <LCD_DisplayString+0xa0>)
 8001934:	8852      	ldrh	r2, [r2, #2]
 8001936:	4293      	cmp	r3, r2
 8001938:	dd03      	ble.n	8001942 <LCD_DisplayString+0x66>
			Xpoint = Xstart;
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 800193e:	89bb      	ldrh	r3, [r7, #12]
 8001940:	82bb      	strh	r3, [r7, #20]
		}		
		LCD_DisplayChar ( Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground );
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	8ab9      	ldrh	r1, [r7, #20]
 8001948:	8af8      	ldrh	r0, [r7, #22]
 800194a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	8c3b      	ldrh	r3, [r7, #32]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f7ff ff1a 	bl	800178c <LCD_DisplayChar>
		
		//The next character of the address
		pString ++;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	3301      	adds	r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
		
		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;	
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	889a      	ldrh	r2, [r3, #4]
 8001962:	8afb      	ldrh	r3, [r7, #22]
 8001964:	4413      	add	r3, r2
 8001966:	82fb      	strh	r3, [r7, #22]
	while ( * pString != '\0')
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1cd      	bne.n	800190c <LCD_DisplayString+0x30>
 8001970:	e000      	b.n	8001974 <LCD_DisplayString+0x98>
		return;
 8001972:	bf00      	nop
	}
}
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000009c 	.word	0x2000009c

08001980 <LCD_DisplayNum>:
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
#define  ARRAY_LEN 255
void LCD_DisplayNum(	POINT Xpoint, POINT Ypoint, int32_t Nummber, 
						sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001986:	af02      	add	r7, sp, #8
 8001988:	4604      	mov	r4, r0
 800198a:	4608      	mov	r0, r1
 800198c:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8001990:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8001994:	600a      	str	r2, [r1, #0]
 8001996:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800199a:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80019a4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80019a8:	4622      	mov	r2, r4
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80019b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80019b4:	4602      	mov	r2, r0
 80019b6:	801a      	strh	r2, [r3, #0]
		
	int16_t Num_Bit = 0, Str_Bit = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80019be:	2300      	movs	r3, #0
 80019c0:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
	uint8_t Str_Array[ARRAY_LEN] = {0},Num_Array[ARRAY_LEN] = {0};
 80019c4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80019c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	3304      	adds	r3, #4
 80019d2:	22fb      	movs	r2, #251	; 0xfb
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 f818 	bl	8004a0c <memset>
 80019dc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80019e0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	3304      	adds	r3, #4
 80019ea:	22fb      	movs	r2, #251	; 0xfb
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 f80c 	bl	8004a0c <memset>
	uint8_t *pStr = Str_Array;
 80019f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019f8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 80019fc:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <LCD_DisplayNum+0x194>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001a04:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8001a08:	8812      	ldrh	r2, [r2, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d27d      	bcs.n	8001b0a <LCD_DisplayNum+0x18a>
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <LCD_DisplayNum+0x194>)
 8001a10:	885b      	ldrh	r3, [r3, #2]
 8001a12:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001a16:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001a1a:	8812      	ldrh	r2, [r2, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d274      	bcs.n	8001b0a <LCD_DisplayNum+0x18a>
		return;
	}
	
	//Converts a number to a string
	while(Nummber){
 8001a20:	e030      	b.n	8001a84 <LCD_DisplayNum+0x104>
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 8001a22:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001a26:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <LCD_DisplayNum+0x198>)
 8001a2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a32:	1099      	asrs	r1, r3, #2
 8001a34:	17d3      	asrs	r3, r2, #31
 8001a36:	1ac9      	subs	r1, r1, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	1ad1      	subs	r1, r2, r3
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001a48:	3230      	adds	r2, #48	; 0x30
 8001a4a:	b2d1      	uxtb	r1, r2
 8001a4c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001a50:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001a54:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8001a56:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
		Nummber /= 10;
 8001a64:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001a68:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8001a6c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001a70:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4928      	ldr	r1, [pc, #160]	; (8001b18 <LCD_DisplayNum+0x198>)
 8001a78:	fb81 0103 	smull	r0, r1, r1, r3
 8001a7c:	1089      	asrs	r1, r1, #2
 8001a7e:	17db      	asrs	r3, r3, #31
 8001a80:	1acb      	subs	r3, r1, r3
 8001a82:	6013      	str	r3, [r2, #0]
	while(Nummber){
 8001a84:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001a88:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1c7      	bne.n	8001a22 <LCD_DisplayNum+0xa2>
    }
	
	//The string is inverted
	while( Num_Bit > 0){
 8001a92:	e01c      	b.n	8001ace <LCD_DisplayNum+0x14e>
		Str_Array[Str_Bit] = Num_Array[Num_Bit -1];
 8001a94:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8001a9e:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8001aa2:	f5a1 7102 	sub.w	r1, r1, #520	; 0x208
 8001aa6:	5c89      	ldrb	r1, [r1, r2]
 8001aa8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001aac:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001ab0:	54d1      	strb	r1, [r2, r3]
		Str_Bit ++;
 8001ab2:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		Num_Bit --;
 8001ac0:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	while( Num_Bit > 0){
 8001ace:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	dcde      	bgt.n	8001a94 <LCD_DisplayNum+0x114>
	}
	
	//show
	LCD_DisplayString( Xpoint, Ypoint,  (const char*)pStr, Font, Color_Background, Color_Foreground );
 8001ad6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001ada:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001ade:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001ae2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001ae6:	8811      	ldrh	r1, [r2, #0]
 8001ae8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001aec:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8001af0:	8810      	ldrh	r0, [r2, #0]
 8001af2:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8001af6:	9201      	str	r2, [sp, #4]
 8001af8:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8001afc:	9200      	str	r2, [sp, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001b04:	f7ff feea 	bl	80018dc <LCD_DisplayString>
 8001b08:	e000      	b.n	8001b0c <LCD_DisplayNum+0x18c>
		return;
 8001b0a:	bf00      	nop
}
 8001b0c:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd90      	pop	{r4, r7, pc}
 8001b14:	2000009c 	.word	0x2000009c
 8001b18:	66666667 	.word	0x66666667

08001b1c <LCD_Show>:


void LCD_Show(void)
{
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b090      	sub	sp, #64	; 0x40
 8001b20:	af04      	add	r7, sp, #16
	if(sLCD_DIS.LCD_Dis_Column <= sLCD_DIS.LCD_Dis_Page){//Horizontal screen display
 8001b22:	4ba5      	ldr	r3, [pc, #660]	; (8001db8 <LCD_Show+0x29c>)
 8001b24:	881a      	ldrh	r2, [r3, #0]
 8001b26:	4ba4      	ldr	r3, [pc, #656]	; (8001db8 <LCD_Show+0x29c>)
 8001b28:	885b      	ldrh	r3, [r3, #2]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	f200 8160 	bhi.w	8001df0 <LCD_Show+0x2d4>

		printf("LCD Draw Line \r\n");
 8001b30:	48a2      	ldr	r0, [pc, #648]	; (8001dbc <LCD_Show+0x2a0>)
 8001b32:	f002 ffe1 	bl	8004af8 <puts>
		LCD_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column, 10, RED,LINE_SOLID, DOT_PIXEL_2X2);
 8001b36:	4ba0      	ldr	r3, [pc, #640]	; (8001db8 <LCD_Show+0x29c>)
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	230a      	movs	r3, #10
 8001b4a:	210a      	movs	r1, #10
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fb83 	bl	8001258 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 10, RED,LINE_SOLID, DOT_PIXEL_2X2);	
 8001b52:	4b99      	ldr	r3, [pc, #612]	; (8001db8 <LCD_Show+0x29c>)
 8001b54:	885b      	ldrh	r3, [r3, #2]
 8001b56:	3b0a      	subs	r3, #10
 8001b58:	b299      	uxth	r1, r3
 8001b5a:	4b97      	ldr	r3, [pc, #604]	; (8001db8 <LCD_Show+0x29c>)
 8001b5c:	881a      	ldrh	r2, [r3, #0]
 8001b5e:	4b96      	ldr	r3, [pc, #600]	; (8001db8 <LCD_Show+0x29c>)
 8001b60:	885b      	ldrh	r3, [r3, #2]
 8001b62:	3b0a      	subs	r3, #10
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2002      	movs	r0, #2
 8001b68:	9002      	str	r0, [sp, #8]
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	9001      	str	r0, [sp, #4]
 8001b6e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001b72:	9000      	str	r0, [sp, #0]
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fb6f 	bl	8001258 <LCD_DrawLine>
		LCD_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column, 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8001b7a:	4b8f      	ldr	r3, [pc, #572]	; (8001db8 <LCD_Show+0x29c>)
 8001b7c:	881a      	ldrh	r2, [r3, #0]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	2301      	movs	r3, #1
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2314      	movs	r3, #20
 8001b8e:	2114      	movs	r1, #20
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff fb61 	bl	8001258 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8001b96:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <LCD_Show+0x29c>)
 8001b98:	885b      	ldrh	r3, [r3, #2]
 8001b9a:	3b14      	subs	r3, #20
 8001b9c:	b299      	uxth	r1, r3
 8001b9e:	4b86      	ldr	r3, [pc, #536]	; (8001db8 <LCD_Show+0x29c>)
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	4b85      	ldr	r3, [pc, #532]	; (8001db8 <LCD_Show+0x29c>)
 8001ba4:	885b      	ldrh	r3, [r3, #2]
 8001ba6:	3b14      	subs	r3, #20
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2001      	movs	r0, #1
 8001bac:	9002      	str	r0, [sp, #8]
 8001bae:	2001      	movs	r0, #1
 8001bb0:	9001      	str	r0, [sp, #4]
 8001bb2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001bb6:	9000      	str	r0, [sp, #0]
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff fb4d 	bl	8001258 <LCD_DrawLine>

		printf("LCD Draw Rectangle \r\n");
 8001bbe:	4880      	ldr	r0, [pc, #512]	; (8001dc0 <LCD_Show+0x2a4>)
 8001bc0:	f002 ff9a 	bl	8004af8 <puts>
		LCD_DrawRectangle(0,0,sLCD_DIS.LCD_Dis_Column,8,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 8001bc4:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <LCD_Show+0x29c>)
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	231f      	movs	r3, #31
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fbed 	bl	80013b8 <LCD_DrawRectangle>
		LCD_DrawRectangle(0,sLCD_DIS.LCD_Dis_Page - 10,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 8001bde:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <LCD_Show+0x29c>)
 8001be0:	885b      	ldrh	r3, [r3, #2]
 8001be2:	3b0a      	subs	r3, #10
 8001be4:	b299      	uxth	r1, r3
 8001be6:	4b74      	ldr	r3, [pc, #464]	; (8001db8 <LCD_Show+0x29c>)
 8001be8:	881a      	ldrh	r2, [r3, #0]
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <LCD_Show+0x29c>)
 8001bec:	885b      	ldrh	r3, [r3, #2]
 8001bee:	2001      	movs	r0, #1
 8001bf0:	9002      	str	r0, [sp, #8]
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	9001      	str	r0, [sp, #4]
 8001bf6:	201f      	movs	r0, #31
 8001bf8:	9000      	str	r0, [sp, #0]
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff fbdc 	bl	80013b8 <LCD_DrawRectangle>
		LCD_DrawRectangle(1,1,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,RED,DRAW_EMPTY,DOT_PIXEL_2X2);
 8001c00:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <LCD_Show+0x29c>)
 8001c02:	881a      	ldrh	r2, [r3, #0]
 8001c04:	4b6c      	ldr	r3, [pc, #432]	; (8001db8 <LCD_Show+0x29c>)
 8001c06:	885b      	ldrh	r3, [r3, #2]
 8001c08:	2102      	movs	r1, #2
 8001c0a:	9102      	str	r1, [sp, #8]
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	9101      	str	r1, [sp, #4]
 8001c10:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001c14:	9100      	str	r1, [sp, #0]
 8001c16:	2101      	movs	r1, #1
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f7ff fbcd 	bl	80013b8 <LCD_DrawRectangle>
		
		printf("LCD Draw Olympic Rings\r\n");
 8001c1e:	4869      	ldr	r0, [pc, #420]	; (8001dc4 <LCD_Show+0x2a8>)
 8001c20:	f002 ff6a 	bl	8004af8 <puts>
		uint16_t Cx1 = 40, Cy1 = 85, Cr = 12;
 8001c24:	2328      	movs	r3, #40	; 0x28
 8001c26:	833b      	strh	r3, [r7, #24]
 8001c28:	2355      	movs	r3, #85	; 0x55
 8001c2a:	82fb      	strh	r3, [r7, #22]
 8001c2c:	230c      	movs	r3, #12
 8001c2e:	82bb      	strh	r3, [r7, #20]
		uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 8001c30:	8b3b      	ldrh	r3, [r7, #24]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fd4a 	bl	80006cc <__aeabi_i2d>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	8abb      	ldrh	r3, [r7, #20]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fd44 	bl	80006cc <__aeabi_i2d>
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <LCD_Show+0x2ac>)
 8001c4a:	f7fe fac3 	bl	80001d4 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fbed 	bl	8000434 <__adddf3>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe fd9d 	bl	80007a0 <__aeabi_d2uiz>
 8001c66:	4603      	mov	r3, r0
 8001c68:	827b      	strh	r3, [r7, #18]
 8001c6a:	8afb      	ldrh	r3, [r7, #22]
 8001c6c:	823b      	strh	r3, [r7, #16]
		uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8001c6e:	8abb      	ldrh	r3, [r7, #20]
 8001c70:	461a      	mov	r2, r3
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	8b3b      	ldrh	r3, [r7, #24]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	81fb      	strh	r3, [r7, #14]
 8001c7e:	8afb      	ldrh	r3, [r7, #22]
 8001c80:	81bb      	strh	r3, [r7, #12]
		uint16_t Cx4 = ( Cx1 + Cx2 )/2, Cy4 = Cy1 + Cr;
 8001c82:	8b3a      	ldrh	r2, [r7, #24]
 8001c84:	8a7b      	ldrh	r3, [r7, #18]
 8001c86:	4413      	add	r3, r2
 8001c88:	0fda      	lsrs	r2, r3, #31
 8001c8a:	4413      	add	r3, r2
 8001c8c:	105b      	asrs	r3, r3, #1
 8001c8e:	817b      	strh	r3, [r7, #10]
 8001c90:	8afa      	ldrh	r2, [r7, #22]
 8001c92:	8abb      	ldrh	r3, [r7, #20]
 8001c94:	4413      	add	r3, r2
 8001c96:	813b      	strh	r3, [r7, #8]
		uint16_t Cx5 = ( Cx2 + Cx3 )/2, Cy5 = Cy1 + Cr;
 8001c98:	8a7a      	ldrh	r2, [r7, #18]
 8001c9a:	89fb      	ldrh	r3, [r7, #14]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	0fda      	lsrs	r2, r3, #31
 8001ca0:	4413      	add	r3, r2
 8001ca2:	105b      	asrs	r3, r3, #1
 8001ca4:	80fb      	strh	r3, [r7, #6]
 8001ca6:	8afa      	ldrh	r2, [r7, #22]
 8001ca8:	8abb      	ldrh	r3, [r7, #20]
 8001caa:	4413      	add	r3, r2
 8001cac:	80bb      	strh	r3, [r7, #4]

		LCD_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001cae:	8aba      	ldrh	r2, [r7, #20]
 8001cb0:	8af9      	ldrh	r1, [r7, #22]
 8001cb2:	8b38      	ldrh	r0, [r7, #24]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	231f      	movs	r3, #31
 8001cbe:	f7ff fbeb 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001cc2:	8aba      	ldrh	r2, [r7, #20]
 8001cc4:	8a39      	ldrh	r1, [r7, #16]
 8001cc6:	8a78      	ldrh	r0, [r7, #18]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f7ff fbe1 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001cd6:	8aba      	ldrh	r2, [r7, #20]
 8001cd8:	89b9      	ldrh	r1, [r7, #12]
 8001cda:	89f8      	ldrh	r0, [r7, #14]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ce8:	f7ff fbd6 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001cec:	8aba      	ldrh	r2, [r7, #20]
 8001cee:	8939      	ldrh	r1, [r7, #8]
 8001cf0:	8978      	ldrh	r0, [r7, #10]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001cfe:	f7ff fbcb 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001d02:	8aba      	ldrh	r2, [r7, #20]
 8001d04:	88b9      	ldrh	r1, [r7, #4]
 8001d06:	88f8      	ldrh	r0, [r7, #6]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d14:	f7ff fbc0 	bl	8001498 <LCD_DrawCircle>

		printf("LCD Draw Realistic circles\r\n");
 8001d18:	482c      	ldr	r0, [pc, #176]	; (8001dcc <LCD_Show+0x2b0>)
 8001d1a:	f002 feed 	bl	8004af8 <puts>
		LCD_DrawCircle(15, 110, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 8001d1e:	2301      	movs	r3, #1
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2301      	movs	r3, #1
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8001d2a:	220a      	movs	r2, #10
 8001d2c:	216e      	movs	r1, #110	; 0x6e
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f7ff fbb2 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle(sLCD_DIS.LCD_Dis_Column - 15, 110, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <LCD_Show+0x29c>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	3b0f      	subs	r3, #15
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	2301      	movs	r3, #1
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8001d48:	220a      	movs	r2, #10
 8001d4a:	216e      	movs	r1, #110	; 0x6e
 8001d4c:	f7ff fba4 	bl	8001498 <LCD_DrawCircle>

		printf("LCD Display String \r\n");
 8001d50:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <LCD_Show+0x2b4>)
 8001d52:	f002 fed1 	bl	8004af8 <puts>
		LCD_DisplayString(35,20,"WaveShare",&Font12,LCD_BACKGROUND,BLUE);
 8001d56:	231f      	movs	r3, #31
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <LCD_Show+0x2b8>)
 8001d62:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <LCD_Show+0x2bc>)
 8001d64:	2114      	movs	r1, #20
 8001d66:	2023      	movs	r0, #35	; 0x23
 8001d68:	f7ff fdb8 	bl	80018dc <LCD_DisplayString>
		LCD_DisplayString(32,33,"Electronic",&Font12,LCD_BACKGROUND,BLUE);
 8001d6c:	231f      	movs	r3, #31
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <LCD_Show+0x2b8>)
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <LCD_Show+0x2c0>)
 8001d7a:	2121      	movs	r1, #33	; 0x21
 8001d7c:	2020      	movs	r0, #32
 8001d7e:	f7ff fdad 	bl	80018dc <LCD_DisplayString>
		LCD_DisplayString(28,45,"1.8inch TFTLCD",&Font8,RED,GRED);
 8001d82:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <LCD_Show+0x2c4>)
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <LCD_Show+0x2c8>)
 8001d92:	212d      	movs	r1, #45	; 0x2d
 8001d94:	201c      	movs	r0, #28
 8001d96:	f7ff fda1 	bl	80018dc <LCD_DisplayString>

		printf("LCD Display Nummber \r\n");
 8001d9a:	4813      	ldr	r0, [pc, #76]	; (8001de8 <LCD_Show+0x2cc>)
 8001d9c:	f002 feac 	bl	8004af8 <puts>
		LCD_DisplayNum(28,55,1234567890,&Font12,LCD_BACKGROUND,BLUE);
 8001da0:	231f      	movs	r3, #31
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <LCD_Show+0x2b8>)
 8001dac:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <LCD_Show+0x2d0>)
 8001dae:	2137      	movs	r1, #55	; 0x37
 8001db0:	201c      	movs	r0, #28
 8001db2:	f7ff fde5 	bl	8001980 <LCD_DisplayNum>

		printf("LCD Display Nummber \r\n");
		LCD_DisplayNum(35,50,1234567890,&Font12,LCD_BACKGROUND,BLUE);

	}
}
 8001db6:	e153      	b.n	8002060 <LCD_Show+0x544>
 8001db8:	2000009c 	.word	0x2000009c
 8001dbc:	08005430 	.word	0x08005430
 8001dc0:	08005440 	.word	0x08005440
 8001dc4:	08005458 	.word	0x08005458
 8001dc8:	40040000 	.word	0x40040000
 8001dcc:	08005470 	.word	0x08005470
 8001dd0:	0800548c 	.word	0x0800548c
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	080054a4 	.word	0x080054a4
 8001ddc:	080054b0 	.word	0x080054b0
 8001de0:	20000008 	.word	0x20000008
 8001de4:	080054bc 	.word	0x080054bc
 8001de8:	080054cc 	.word	0x080054cc
 8001dec:	499602d2 	.word	0x499602d2
		printf("LCD Draw Line \r\n");
 8001df0:	489d      	ldr	r0, [pc, #628]	; (8002068 <LCD_Show+0x54c>)
 8001df2:	f002 fe81 	bl	8004af8 <puts>
		LCD_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column, 10, RED,LINE_SOLID, DOT_PIXEL_2X2);
 8001df6:	4b9d      	ldr	r3, [pc, #628]	; (800206c <LCD_Show+0x550>)
 8001df8:	881a      	ldrh	r2, [r3, #0]
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	230a      	movs	r3, #10
 8001e0a:	210a      	movs	r1, #10
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fa23 	bl	8001258 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 10, RED,LINE_SOLID, DOT_PIXEL_2X2);	
 8001e12:	4b96      	ldr	r3, [pc, #600]	; (800206c <LCD_Show+0x550>)
 8001e14:	885b      	ldrh	r3, [r3, #2]
 8001e16:	3b0a      	subs	r3, #10
 8001e18:	b299      	uxth	r1, r3
 8001e1a:	4b94      	ldr	r3, [pc, #592]	; (800206c <LCD_Show+0x550>)
 8001e1c:	881a      	ldrh	r2, [r3, #0]
 8001e1e:	4b93      	ldr	r3, [pc, #588]	; (800206c <LCD_Show+0x550>)
 8001e20:	885b      	ldrh	r3, [r3, #2]
 8001e22:	3b0a      	subs	r3, #10
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2002      	movs	r0, #2
 8001e28:	9002      	str	r0, [sp, #8]
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	9001      	str	r0, [sp, #4]
 8001e2e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e32:	9000      	str	r0, [sp, #0]
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff fa0f 	bl	8001258 <LCD_DrawLine>
		LCD_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column, 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8001e3a:	4b8c      	ldr	r3, [pc, #560]	; (800206c <LCD_Show+0x550>)
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2301      	movs	r3, #1
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2314      	movs	r3, #20
 8001e4e:	2114      	movs	r1, #20
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff fa01 	bl	8001258 <LCD_DrawLine>
		LCD_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page - 20, RED,LINE_DOTTED, DOT_PIXEL_DFT);
 8001e56:	4b85      	ldr	r3, [pc, #532]	; (800206c <LCD_Show+0x550>)
 8001e58:	885b      	ldrh	r3, [r3, #2]
 8001e5a:	3b14      	subs	r3, #20
 8001e5c:	b299      	uxth	r1, r3
 8001e5e:	4b83      	ldr	r3, [pc, #524]	; (800206c <LCD_Show+0x550>)
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	4b82      	ldr	r3, [pc, #520]	; (800206c <LCD_Show+0x550>)
 8001e64:	885b      	ldrh	r3, [r3, #2]
 8001e66:	3b14      	subs	r3, #20
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	9002      	str	r0, [sp, #8]
 8001e6e:	2001      	movs	r0, #1
 8001e70:	9001      	str	r0, [sp, #4]
 8001e72:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e76:	9000      	str	r0, [sp, #0]
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff f9ed 	bl	8001258 <LCD_DrawLine>
		printf("LCD Draw Rectangle \r\n");
 8001e7e:	487c      	ldr	r0, [pc, #496]	; (8002070 <LCD_Show+0x554>)
 8001e80:	f002 fe3a 	bl	8004af8 <puts>
		LCD_DrawRectangle(0,0,sLCD_DIS.LCD_Dis_Column,8,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 8001e84:	4b79      	ldr	r3, [pc, #484]	; (800206c <LCD_Show+0x550>)
 8001e86:	881a      	ldrh	r2, [r3, #0]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	231f      	movs	r3, #31
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2308      	movs	r3, #8
 8001e96:	2100      	movs	r1, #0
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff fa8d 	bl	80013b8 <LCD_DrawRectangle>
		LCD_DrawRectangle(0,sLCD_DIS.LCD_Dis_Page - 10,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,BLUE, DRAW_FULL, DOT_PIXEL_1X1);
 8001e9e:	4b73      	ldr	r3, [pc, #460]	; (800206c <LCD_Show+0x550>)
 8001ea0:	885b      	ldrh	r3, [r3, #2]
 8001ea2:	3b0a      	subs	r3, #10
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	4b71      	ldr	r3, [pc, #452]	; (800206c <LCD_Show+0x550>)
 8001ea8:	881a      	ldrh	r2, [r3, #0]
 8001eaa:	4b70      	ldr	r3, [pc, #448]	; (800206c <LCD_Show+0x550>)
 8001eac:	885b      	ldrh	r3, [r3, #2]
 8001eae:	2001      	movs	r0, #1
 8001eb0:	9002      	str	r0, [sp, #8]
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	9001      	str	r0, [sp, #4]
 8001eb6:	201f      	movs	r0, #31
 8001eb8:	9000      	str	r0, [sp, #0]
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fa7c 	bl	80013b8 <LCD_DrawRectangle>
		LCD_DrawRectangle(1,1,sLCD_DIS.LCD_Dis_Column,sLCD_DIS.LCD_Dis_Page,RED,DRAW_EMPTY,DOT_PIXEL_2X2);
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <LCD_Show+0x550>)
 8001ec2:	881a      	ldrh	r2, [r3, #0]
 8001ec4:	4b69      	ldr	r3, [pc, #420]	; (800206c <LCD_Show+0x550>)
 8001ec6:	885b      	ldrh	r3, [r3, #2]
 8001ec8:	2102      	movs	r1, #2
 8001eca:	9102      	str	r1, [sp, #8]
 8001ecc:	2100      	movs	r1, #0
 8001ece:	9101      	str	r1, [sp, #4]
 8001ed0:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001ed4:	9100      	str	r1, [sp, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f7ff fa6d 	bl	80013b8 <LCD_DrawRectangle>
		printf("LCD Draw Olympic Rings\r\n");
 8001ede:	4865      	ldr	r0, [pc, #404]	; (8002074 <LCD_Show+0x558>)
 8001ee0:	f002 fe0a 	bl	8004af8 <puts>
		uint16_t Cx1 = 45, Cy1 = 80, Cr = 12;
 8001ee4:	232d      	movs	r3, #45	; 0x2d
 8001ee6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ee8:	2350      	movs	r3, #80	; 0x50
 8001eea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001eec:	230c      	movs	r3, #12
 8001eee:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 8001ef0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fbea 	bl	80006cc <__aeabi_i2d>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	460d      	mov	r5, r1
 8001efc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fbe4 	bl	80006cc <__aeabi_i2d>
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <LCD_Show+0x55c>)
 8001f0a:	f7fe f963 	bl	80001d4 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4620      	mov	r0, r4
 8001f14:	4629      	mov	r1, r5
 8001f16:	f7fe fa8d 	bl	8000434 <__adddf3>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fc3d 	bl	80007a0 <__aeabi_d2uiz>
 8001f26:	4603      	mov	r3, r0
 8001f28:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8001f2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f30:	461a      	mov	r2, r3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f3a:	4413      	add	r3, r2
 8001f3c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f40:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t Cx4 = ( Cx1 + Cx2 )/2, Cy4 = Cy1 + Cr;
 8001f42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001f44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f46:	4413      	add	r3, r2
 8001f48:	0fda      	lsrs	r2, r3, #31
 8001f4a:	4413      	add	r3, r2
 8001f4c:	105b      	asrs	r3, r3, #1
 8001f4e:	843b      	strh	r3, [r7, #32]
 8001f50:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001f52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f54:	4413      	add	r3, r2
 8001f56:	83fb      	strh	r3, [r7, #30]
		uint16_t Cx5 = ( Cx2 + Cx3 )/2, Cy5 = Cy1 + Cr;
 8001f58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f5c:	4413      	add	r3, r2
 8001f5e:	0fda      	lsrs	r2, r3, #31
 8001f60:	4413      	add	r3, r2
 8001f62:	105b      	asrs	r3, r3, #1
 8001f64:	83bb      	strh	r3, [r7, #28]
 8001f66:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001f68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f6a:	4413      	add	r3, r2
 8001f6c:	837b      	strh	r3, [r7, #26]
		LCD_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001f6e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001f70:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001f72:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001f74:	2301      	movs	r3, #1
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	231f      	movs	r3, #31
 8001f7e:	f7ff fa8b 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001f82:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001f84:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001f86:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8001f88:	2301      	movs	r3, #1
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	f7ff fa81 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001f96:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001f98:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001f9a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fa8:	f7ff fa76 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001fac:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001fae:	8bf9      	ldrh	r1, [r7, #30]
 8001fb0:	8c38      	ldrh	r0, [r7, #32]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fbe:	f7ff fa6b 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001fc2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001fc4:	8b79      	ldrh	r1, [r7, #26]
 8001fc6:	8bb8      	ldrh	r0, [r7, #28]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001fd4:	f7ff fa60 	bl	8001498 <LCD_DrawCircle>
		printf("LCD Draw Realistic circles\r\n");
 8001fd8:	4828      	ldr	r0, [pc, #160]	; (800207c <LCD_Show+0x560>)
 8001fda:	f002 fd8d 	bl	8004af8 <puts>
		LCD_DrawCircle(15, 90, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 8001fde:	2301      	movs	r3, #1
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8001fea:	220a      	movs	r2, #10
 8001fec:	215a      	movs	r1, #90	; 0x5a
 8001fee:	200f      	movs	r0, #15
 8001ff0:	f7ff fa52 	bl	8001498 <LCD_DrawCircle>
		LCD_DrawCircle(sLCD_DIS.LCD_Dis_Column - 15, 90, 10, BRRED, DRAW_FULL, DOT_PIXEL_DFT);
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <LCD_Show+0x550>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	3b0f      	subs	r3, #15
 8001ffa:	b298      	uxth	r0, r3
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2301      	movs	r3, #1
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8002008:	220a      	movs	r2, #10
 800200a:	215a      	movs	r1, #90	; 0x5a
 800200c:	f7ff fa44 	bl	8001498 <LCD_DrawCircle>
		printf("LCD Display String \r\n");
 8002010:	481b      	ldr	r0, [pc, #108]	; (8002080 <LCD_Show+0x564>)
 8002012:	f002 fd71 	bl	8004af8 <puts>
		LCD_DisplayString(10,20,"WaveShare Electronic",&Font12,LCD_BACKGROUND,BLUE);
 8002016:	231f      	movs	r3, #31
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <LCD_Show+0x568>)
 8002022:	4a19      	ldr	r2, [pc, #100]	; (8002088 <LCD_Show+0x56c>)
 8002024:	2114      	movs	r1, #20
 8002026:	200a      	movs	r0, #10
 8002028:	f7ff fc58 	bl	80018dc <LCD_DisplayString>
		LCD_DisplayString(35,35,"1.8inch TFTLCD",&Font12,RED,GRED);
 800202c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <LCD_Show+0x568>)
 800203a:	4a14      	ldr	r2, [pc, #80]	; (800208c <LCD_Show+0x570>)
 800203c:	2123      	movs	r1, #35	; 0x23
 800203e:	2023      	movs	r0, #35	; 0x23
 8002040:	f7ff fc4c 	bl	80018dc <LCD_DisplayString>
		printf("LCD Display Nummber \r\n");
 8002044:	4812      	ldr	r0, [pc, #72]	; (8002090 <LCD_Show+0x574>)
 8002046:	f002 fd57 	bl	8004af8 <puts>
		LCD_DisplayNum(35,50,1234567890,&Font12,LCD_BACKGROUND,BLUE);
 800204a:	231f      	movs	r3, #31
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <LCD_Show+0x568>)
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <LCD_Show+0x578>)
 8002058:	2132      	movs	r1, #50	; 0x32
 800205a:	2023      	movs	r0, #35	; 0x23
 800205c:	f7ff fc90 	bl	8001980 <LCD_DisplayNum>
}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bdb0      	pop	{r4, r5, r7, pc}
 8002068:	08005430 	.word	0x08005430
 800206c:	2000009c 	.word	0x2000009c
 8002070:	08005440 	.word	0x08005440
 8002074:	08005458 	.word	0x08005458
 8002078:	40040000 	.word	0x40040000
 800207c:	08005470 	.word	0x08005470
 8002080:	0800548c 	.word	0x0800548c
 8002084:	20000000 	.word	0x20000000
 8002088:	080054e4 	.word	0x080054e4
 800208c:	080054bc 	.word	0x080054bc
 8002090:	080054cc 	.word	0x080054cc
 8002094:	499602d2 	.word	0x499602d2

08002098 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800209e:	463b      	mov	r3, r7
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <MX_ADC1_Init+0x98>)
 80020ac:	4a21      	ldr	r2, [pc, #132]	; (8002134 <MX_ADC1_Init+0x9c>)
 80020ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <MX_ADC1_Init+0x98>)
 80020b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <MX_ADC1_Init+0x98>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MX_ADC1_Init+0x98>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_ADC1_Init+0x98>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <MX_ADC1_Init+0x98>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020d2:	4b17      	ldr	r3, [pc, #92]	; (8002130 <MX_ADC1_Init+0x98>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020d8:	4b15      	ldr	r3, [pc, #84]	; (8002130 <MX_ADC1_Init+0x98>)
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <MX_ADC1_Init+0xa0>)
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <MX_ADC1_Init+0x98>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_ADC1_Init+0x98>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <MX_ADC1_Init+0x98>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <MX_ADC1_Init+0x98>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <MX_ADC1_Init+0x98>)
 80020fa:	f000 fde3 	bl	8002cc4 <HAL_ADC_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002104:	f000 f994 	bl	8002430 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002108:	2305      	movs	r3, #5
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800210c:	2301      	movs	r3, #1
 800210e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002114:	463b      	mov	r3, r7
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_ADC1_Init+0x98>)
 800211a:	f000 fe17 	bl	8002d4c <HAL_ADC_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002124:	f000 f984 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200000a8 	.word	0x200000a8
 8002134:	40012000 	.word	0x40012000
 8002138:	0f000001 	.word	0x0f000001

0800213c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <HAL_ADC_MspInit+0x7c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d127      	bne.n	80021ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_ADC_MspInit+0x80>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <HAL_ADC_MspInit+0x80>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_ADC_MspInit+0x80>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_ADC_MspInit+0x80>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_ADC_MspInit+0x80>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_ADC_MspInit+0x80>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002196:	2320      	movs	r3, #32
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219a:	2303      	movs	r3, #3
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <HAL_ADC_MspInit+0x84>)
 80021aa:	f001 f8ff 	bl	80033ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40012000 	.word	0x40012000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020000 	.word	0x40020000

080021c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <MX_GPIO_Init+0xec>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a33      	ldr	r2, [pc, #204]	; (80022b0 <MX_GPIO_Init+0xec>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <MX_GPIO_Init+0xec>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <MX_GPIO_Init+0xec>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <MX_GPIO_Init+0xec>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <MX_GPIO_Init+0xec>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <MX_GPIO_Init+0xec>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a25      	ldr	r2, [pc, #148]	; (80022b0 <MX_GPIO_Init+0xec>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <MX_GPIO_Init+0xec>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 7144 	mov.w	r1, #784	; 0x310
 8002234:	481f      	ldr	r0, [pc, #124]	; (80022b4 <MX_GPIO_Init+0xf0>)
 8002236:	f001 fa55 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	2140      	movs	r1, #64	; 0x40
 800223e:	481e      	ldr	r0, [pc, #120]	; (80022b8 <MX_GPIO_Init+0xf4>)
 8002240:	f001 fa50 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8002244:	f44f 7344 	mov.w	r3, #784	; 0x310
 8002248:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224a:	2301      	movs	r3, #1
 800224c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 030c 	add.w	r3, r7, #12
 800225a:	4619      	mov	r1, r3
 800225c:	4815      	ldr	r0, [pc, #84]	; (80022b4 <MX_GPIO_Init+0xf0>)
 800225e:	f001 f8a5 	bl	80033ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002266:	2301      	movs	r3, #1
 8002268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4619      	mov	r1, r3
 8002278:	480f      	ldr	r0, [pc, #60]	; (80022b8 <MX_GPIO_Init+0xf4>)
 800227a:	f001 f897 	bl	80033ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002282:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4619      	mov	r1, r3
 8002292:	4809      	ldr	r0, [pc, #36]	; (80022b8 <MX_GPIO_Init+0xf4>)
 8002294:	f001 f88a 	bl	80033ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	2017      	movs	r0, #23
 800229e:	f001 f84e 	bl	800333e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022a2:	2017      	movs	r0, #23
 80022a4:	f001 f867 	bl	8003376 <HAL_NVIC_EnableIRQ>

}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40020400 	.word	0x40020400

080022bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c2:	f000 fc69 	bl	8002b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022c6:	f000 f81f 	bl	8002308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ca:	f7ff ff7b 	bl	80021c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80022ce:	f000 f8b5 	bl	800243c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80022d2:	f000 fb67 	bl	80029a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80022d6:	f7ff fedf 	bl	8002098 <MX_ADC1_Init>
  MX_SPI2_Init();
 80022da:	f000 f8e5 	bl	80024a8 <MX_SPI2_Init>
  MX_TIM3_Init();
 80022de:	f000 fac5 	bl	800286c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80022e2:	f000 fb89 	bl	80029f8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
 // printf("**********Init LCD**********\r\n");
  	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;//SCAN_DIR_DFT = D2U_L2R
 80022e6:	2300      	movs	r3, #0
 80022e8:	71fb      	strb	r3, [r7, #7]
  	LCD_Init( Lcd_ScanDir );
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fe2b 	bl	8000f48 <LCD_Init>
  	//printf("LCD Show \r\n");
  		LCD_Show();
 80022f2:	f7ff fc13 	bl	8001b1c <LCD_Show>
  		Driver_Delay_ms(1000);
 80022f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022fa:	f7fe fc2d 	bl	8000b58 <Driver_Delay_ms>

  		LCD_Clear(RED);
 80022fe:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002302:	f7fe ff1b 	bl	800113c <LCD_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002306:	e7fe      	b.n	8002306 <main+0x4a>

08002308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b094      	sub	sp, #80	; 0x50
 800230c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800230e:	f107 0320 	add.w	r3, r7, #32
 8002312:	2230      	movs	r2, #48	; 0x30
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f002 fb78 	bl	8004a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <SystemClock_Config+0xcc>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <SystemClock_Config+0xcc>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233a:	6413      	str	r3, [r2, #64]	; 0x40
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <SystemClock_Config+0xcc>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <SystemClock_Config+0xd0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002354:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <SystemClock_Config+0xd0>)
 8002356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <SystemClock_Config+0xd0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002368:	2302      	movs	r3, #2
 800236a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800236c:	2301      	movs	r3, #1
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002370:	2310      	movs	r3, #16
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002374:	2302      	movs	r3, #2
 8002376:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800237c:	2308      	movs	r3, #8
 800237e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002380:	2354      	movs	r3, #84	; 0x54
 8002382:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002384:	2302      	movs	r3, #2
 8002386:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002388:	2304      	movs	r3, #4
 800238a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	4618      	mov	r0, r3
 8002392:	f001 f9d9 	bl	8003748 <HAL_RCC_OscConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800239c:	f000 f848 	bl	8002430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a0:	230f      	movs	r3, #15
 80023a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a4:	2302      	movs	r3, #2
 80023a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	2102      	movs	r1, #2
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 fc3b 	bl	8003c38 <HAL_RCC_ClockConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80023c8:	f000 f832 	bl	8002430 <Error_Handler>
  }
}
 80023cc:	bf00      	nop
 80023ce:	3750      	adds	r7, #80	; 0x50
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40007000 	.word	0x40007000

080023dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]

		if(GPIO_Pin == SW_Pin && (bouncetime-HAL_GetTick())>20)
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	2b80      	cmp	r3, #128	; 0x80
 80023ea:	d118      	bne.n	800241e <HAL_GPIO_EXTI_Callback+0x42>
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_GPIO_EXTI_Callback+0x4c>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	461c      	mov	r4, r3
 80023f2:	f000 fc37 	bl	8002c64 <HAL_GetTick>
 80023f6:	4603      	mov	r3, r0
 80023f8:	1ae3      	subs	r3, r4, r3
 80023fa:	2b14      	cmp	r3, #20
 80023fc:	d90f      	bls.n	800241e <HAL_GPIO_EXTI_Callback+0x42>
		{	if(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin)==1)
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	480a      	ldr	r0, [pc, #40]	; (800242c <HAL_GPIO_EXTI_Callback+0x50>)
 8002402:	f001 f957 	bl	80036b4 <HAL_GPIO_ReadPin>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	d102      	bne.n	8002412 <HAL_GPIO_EXTI_Callback+0x36>
			{
				HAL_Delay(10);//JAKIES GOWNO DO OBSLUZENIA
 800240c:	200a      	movs	r0, #10
 800240e:	f000 fc35 	bl	8002c7c <HAL_Delay>
			}


			bouncetime=HAL_GetTick();
 8002412:	f000 fc27 	bl	8002c64 <HAL_GetTick>
 8002416:	4603      	mov	r3, r0
 8002418:	b29a      	uxth	r2, r3
 800241a:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_GPIO_EXTI_Callback+0x4c>)
 800241c:	801a      	strh	r2, [r3, #0]
		}

	}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	200000f0 	.word	0x200000f0
 800242c:	40020400 	.word	0x40020400

08002430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
}
 8002436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002438:	e7fe      	b.n	8002438 <Error_Handler+0x8>
	...

0800243c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <MX_SPI1_Init+0x68>)
 8002444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800244c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <MX_SPI1_Init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002470:	2218      	movs	r2, #24
 8002472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <MX_SPI1_Init+0x64>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002488:	220a      	movs	r2, #10
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <MX_SPI1_Init+0x64>)
 800248e:	f001 fdb3 	bl	8003ff8 <HAL_SPI_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002498:	f7ff ffca 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200000f4 	.word	0x200000f4
 80024a4:	40013000 	.word	0x40013000

080024a8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <MX_SPI2_Init+0x68>)
 80024ae:	4a19      	ldr	r2, [pc, #100]	; (8002514 <MX_SPI2_Init+0x6c>)
 80024b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_SPI2_Init+0x68>)
 80024b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <MX_SPI2_Init+0x68>)
 80024bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <MX_SPI2_Init+0x68>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <MX_SPI2_Init+0x68>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <MX_SPI2_Init+0x68>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_SPI2_Init+0x68>)
 80024d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <MX_SPI2_Init+0x68>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <MX_SPI2_Init+0x68>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_SPI2_Init+0x68>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <MX_SPI2_Init+0x68>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_SPI2_Init+0x68>)
 80024f6:	220a      	movs	r2, #10
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024fa:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_SPI2_Init+0x68>)
 80024fc:	f001 fd7c 	bl	8003ff8 <HAL_SPI_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002506:	f7ff ff93 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000014c 	.word	0x2000014c
 8002514:	40003800 	.word	0x40003800

08002518 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a41      	ldr	r2, [pc, #260]	; (800263c <HAL_SPI_MspInit+0x124>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d14a      	bne.n	80025d0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <HAL_SPI_MspInit+0x128>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4a3f      	ldr	r2, [pc, #252]	; (8002640 <HAL_SPI_MspInit+0x128>)
 8002544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002548:	6453      	str	r3, [r2, #68]	; 0x44
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_SPI_MspInit+0x128>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_SPI_MspInit+0x128>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a38      	ldr	r2, [pc, #224]	; (8002640 <HAL_SPI_MspInit+0x128>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_SPI_MspInit+0x128>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b32      	ldr	r3, [pc, #200]	; (8002640 <HAL_SPI_MspInit+0x128>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a31      	ldr	r2, [pc, #196]	; (8002640 <HAL_SPI_MspInit+0x128>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_SPI_MspInit+0x128>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800258e:	23c0      	movs	r3, #192	; 0xc0
 8002590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259e:	2305      	movs	r3, #5
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	4826      	ldr	r0, [pc, #152]	; (8002644 <HAL_SPI_MspInit+0x12c>)
 80025aa:	f000 feff 	bl	80033ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025ae:	2308      	movs	r3, #8
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025be:	2305      	movs	r3, #5
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	481f      	ldr	r0, [pc, #124]	; (8002648 <HAL_SPI_MspInit+0x130>)
 80025ca:	f000 feef 	bl	80033ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80025ce:	e031      	b.n	8002634 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_SPI_MspInit+0x134>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d12c      	bne.n	8002634 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_SPI_MspInit+0x128>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <HAL_SPI_MspInit+0x128>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_SPI_MspInit+0x128>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_SPI_MspInit+0x128>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a10      	ldr	r2, [pc, #64]	; (8002640 <HAL_SPI_MspInit+0x128>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_SPI_MspInit+0x128>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002612:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002624:	2305      	movs	r3, #5
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	4619      	mov	r1, r3
 800262e:	4806      	ldr	r0, [pc, #24]	; (8002648 <HAL_SPI_MspInit+0x130>)
 8002630:	f000 febc 	bl	80033ac <HAL_GPIO_Init>
}
 8002634:	bf00      	nop
 8002636:	3730      	adds	r7, #48	; 0x30
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40013000 	.word	0x40013000
 8002640:	40023800 	.word	0x40023800
 8002644:	40020000 	.word	0x40020000
 8002648:	40020400 	.word	0x40020400
 800264c:	40003800 	.word	0x40003800

08002650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_MspInit+0x4c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <HAL_MspInit+0x4c>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_MspInit+0x4c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_MspInit+0x4c>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800

080026a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <NMI_Handler+0x4>

080026a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026aa:	e7fe      	b.n	80026aa <HardFault_Handler+0x4>

080026ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <MemManage_Handler+0x4>

080026b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <BusFault_Handler+0x4>

080026b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <UsageFault_Handler+0x4>

080026be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ec:	f000 faa6 	bl	8002c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 80026f8:	2080      	movs	r0, #128	; 0x80
 80026fa:	f001 f80d 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}

08002702 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e00a      	b.n	800272a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002714:	f3af 8000 	nop.w
 8002718:	4601      	mov	r1, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	60ba      	str	r2, [r7, #8]
 8002720:	b2ca      	uxtb	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3301      	adds	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	dbf0      	blt.n	8002714 <_read+0x12>
	}

return len;
 8002732:	687b      	ldr	r3, [r7, #4]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e009      	b.n	8002762 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	60ba      	str	r2, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3301      	adds	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	dbf1      	blt.n	800274e <_write+0x12>
	}
	return len;
 800276a:	687b      	ldr	r3, [r7, #4]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_close>:

int _close(int file)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800279c:	605a      	str	r2, [r3, #4]
	return 0;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_isatty>:

int _isatty(int file)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	return 1;
 80027b4:	2301      	movs	r3, #1
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
	return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <_sbrk+0x5c>)
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <_sbrk+0x60>)
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <_sbrk+0x64>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <_sbrk+0x68>)
 80027fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d207      	bcs.n	800281c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800280c:	f002 f8d4 	bl	80049b8 <__errno>
 8002810:	4603      	mov	r3, r0
 8002812:	220c      	movs	r2, #12
 8002814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800281a:	e009      	b.n	8002830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <_sbrk+0x64>)
 800282c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20010000 	.word	0x20010000
 800283c:	00000400 	.word	0x00000400
 8002840:	200001a4 	.word	0x200001a4
 8002844:	20000290 	.word	0x20000290

08002848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <SystemInit+0x20>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <SystemInit+0x20>)
 8002854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	; 0x30
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f002 f8c6 	bl	8004a0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <MX_TIM3_Init+0xa0>)
 800288a:	4a21      	ldr	r2, [pc, #132]	; (8002910 <MX_TIM3_Init+0xa4>)
 800288c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800288e:	4b1f      	ldr	r3, [pc, #124]	; (800290c <MX_TIM3_Init+0xa0>)
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <MX_TIM3_Init+0xa0>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6;
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <MX_TIM3_Init+0xa0>)
 800289c:	2206      	movs	r2, #6
 800289e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <MX_TIM3_Init+0xa0>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <MX_TIM3_Init+0xa0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80028ac:	2301      	movs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028b4:	2301      	movs	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028c4:	2301      	movs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	4619      	mov	r1, r3
 80028d6:	480d      	ldr	r0, [pc, #52]	; (800290c <MX_TIM3_Init+0xa0>)
 80028d8:	f001 fc17 	bl	800410a <HAL_TIM_Encoder_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80028e2:	f7ff fda5 	bl	8002430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4806      	ldr	r0, [pc, #24]	; (800290c <MX_TIM3_Init+0xa0>)
 80028f4:	f001 fd30 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80028fe:	f7ff fd97 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002902:	bf00      	nop
 8002904:	3730      	adds	r7, #48	; 0x30
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200001a8 	.word	0x200001a8
 8002910:	40000400 	.word	0x40000400

08002914 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_TIM_Encoder_MspInit+0x84>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d12b      	bne.n	800298e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_TIM_Encoder_MspInit+0x88>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_TIM_Encoder_MspInit+0x88>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_TIM_Encoder_MspInit+0x88>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_TIM_Encoder_MspInit+0x88>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_TIM_Encoder_MspInit+0x88>)
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_TIM_Encoder_MspInit+0x88>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800296e:	2330      	movs	r3, #48	; 0x30
 8002970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800297e:	2302      	movs	r3, #2
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800298a:	f000 fd0f 	bl	80033ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800298e:	bf00      	nop
 8002990:	3728      	adds	r7, #40	; 0x28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40000400 	.word	0x40000400
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020400 	.word	0x40020400

080029a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <MX_USART2_UART_Init+0x50>)
 80029ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029ca:	220c      	movs	r2, #12
 80029cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <MX_USART2_UART_Init+0x4c>)
 80029dc:	f001 fd2a 	bl	8004434 <HAL_UART_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029e6:	f7ff fd23 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200001f0 	.word	0x200001f0
 80029f4:	40004400 	.word	0x40004400

080029f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <MX_USART6_UART_Init+0x4c>)
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <MX_USART6_UART_Init+0x50>)
 8002a00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <MX_USART6_UART_Init+0x4c>)
 8002a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_USART6_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_USART6_UART_Init+0x4c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <MX_USART6_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_USART6_UART_Init+0x4c>)
 8002a1e:	220c      	movs	r2, #12
 8002a20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <MX_USART6_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_USART6_UART_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_USART6_UART_Init+0x4c>)
 8002a30:	f001 fd00 	bl	8004434 <HAL_UART_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a3a:	f7ff fcf9 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000234 	.word	0x20000234
 8002a48:	40011400 	.word	0x40011400

08002a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	; 0x30
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a32      	ldr	r2, [pc, #200]	; (8002b34 <HAL_UART_MspInit+0xe8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d12c      	bne.n	8002ac8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a30      	ldr	r2, [pc, #192]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002aa6:	230c      	movs	r3, #12
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	481e      	ldr	r0, [pc, #120]	; (8002b3c <HAL_UART_MspInit+0xf0>)
 8002ac2:	f000 fc73 	bl	80033ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002ac6:	e031      	b.n	8002b2c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_UART_MspInit+0xf4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d12c      	bne.n	8002b2c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002adc:	f043 0320 	orr.w	r3, r3, #32
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_UART_MspInit+0xec>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	4619      	mov	r1, r3
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <HAL_UART_MspInit+0xf0>)
 8002b28:	f000 fc40 	bl	80033ac <HAL_GPIO_Init>
}
 8002b2c:	bf00      	nop
 8002b2e:	3730      	adds	r7, #48	; 0x30
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40004400 	.word	0x40004400
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40011400 	.word	0x40011400

08002b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b48:	480d      	ldr	r0, [pc, #52]	; (8002b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b4a:	490e      	ldr	r1, [pc, #56]	; (8002b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b50:	e002      	b.n	8002b58 <LoopCopyDataInit>

08002b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b56:	3304      	adds	r3, #4

08002b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b5c:	d3f9      	bcc.n	8002b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b60:	4c0b      	ldr	r4, [pc, #44]	; (8002b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b64:	e001      	b.n	8002b6a <LoopFillZerobss>

08002b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b68:	3204      	adds	r2, #4

08002b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b6c:	d3fb      	bcc.n	8002b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b6e:	f7ff fe6b 	bl	8002848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b72:	f001 ff27 	bl	80049c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b76:	f7ff fba1 	bl	80022bc <main>
  bx  lr    
 8002b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b84:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002b88:	08005cf4 	.word	0x08005cf4
  ldr r2, =_sbss
 8002b8c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002b90:	2000028c 	.word	0x2000028c

08002b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC_IRQHandler>
	...

08002b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <HAL_Init+0x40>)
 8002ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_Init+0x40>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_Init+0x40>)
 8002bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_Init+0x40>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_Init+0x40>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f000 fbb1 	bl	8003328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bc6:	200f      	movs	r0, #15
 8002bc8:	f000 f808 	bl	8002bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bcc:	f7ff fd40 	bl	8002650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023c00 	.word	0x40023c00

08002bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_InitTick+0x54>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_InitTick+0x58>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fbc9 	bl	8003392 <HAL_SYSTICK_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00e      	b.n	8002c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d80a      	bhi.n	8002c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c10:	2200      	movs	r2, #0
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c18:	f000 fb91 	bl	800333e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c1c:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <HAL_InitTick+0x5c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000010 	.word	0x20000010
 8002c34:	20000018 	.word	0x20000018
 8002c38:	20000014 	.word	0x20000014

08002c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_IncTick+0x20>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_IncTick+0x24>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_IncTick+0x24>)
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000018 	.word	0x20000018
 8002c60:	20000278 	.word	0x20000278

08002c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return uwTick;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_GetTick+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000278 	.word	0x20000278

08002c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff ffee 	bl	8002c64 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c94:	d005      	beq.n	8002ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_Delay+0x44>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ca2:	bf00      	nop
 8002ca4:	f7ff ffde 	bl	8002c64 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d8f7      	bhi.n	8002ca4 <HAL_Delay+0x28>
  {
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000018 	.word	0x20000018

08002cc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e033      	b.n	8002d42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff fa2a 	bl	800213c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d118      	bne.n	8002d34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d0a:	f023 0302 	bic.w	r3, r3, #2
 8002d0e:	f043 0202 	orr.w	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f93a 	bl	8002f90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f023 0303 	bic.w	r3, r3, #3
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
 8002d32:	e001      	b.n	8002d38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1c>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e105      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x228>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d925      	bls.n	8002dc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68d9      	ldr	r1, [r3, #12]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b1e      	subs	r3, #30
 8002d8e:	2207      	movs	r2, #7
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43da      	mvns	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68d9      	ldr	r1, [r3, #12]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	4603      	mov	r3, r0
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4403      	add	r3, r0
 8002db6:	3b1e      	subs	r3, #30
 8002db8:	409a      	lsls	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	e022      	b.n	8002e0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6919      	ldr	r1, [r3, #16]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	2207      	movs	r2, #7
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	400a      	ands	r2, r1
 8002de6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6919      	ldr	r1, [r3, #16]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4403      	add	r3, r0
 8002e00:	409a      	lsls	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d824      	bhi.n	8002e5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	3b05      	subs	r3, #5
 8002e24:	221f      	movs	r2, #31
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	400a      	ands	r2, r1
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	4618      	mov	r0, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b05      	subs	r3, #5
 8002e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5a:	e04c      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b0c      	cmp	r3, #12
 8002e62:	d824      	bhi.n	8002eae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b23      	subs	r3, #35	; 0x23
 8002e76:	221f      	movs	r2, #31
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	400a      	ands	r2, r1
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b23      	subs	r3, #35	; 0x23
 8002ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002eac:	e023      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b41      	subs	r3, #65	; 0x41
 8002ec0:	221f      	movs	r2, #31
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	400a      	ands	r2, r1
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b41      	subs	r3, #65	; 0x41
 8002eea:	fa00 f203 	lsl.w	r2, r0, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_ADC_ConfigChannel+0x234>)
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a21      	ldr	r2, [pc, #132]	; (8002f84 <HAL_ADC_ConfigChannel+0x238>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d109      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1cc>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b12      	cmp	r3, #18
 8002f0a:	d105      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <HAL_ADC_ConfigChannel+0x238>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d123      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x21e>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d003      	beq.n	8002f32 <HAL_ADC_ConfigChannel+0x1e6>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b11      	cmp	r3, #17
 8002f30:	d11b      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d111      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_ADC_ConfigChannel+0x23c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <HAL_ADC_ConfigChannel+0x240>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	0c9a      	lsrs	r2, r3, #18
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f5c:	e002      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f9      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40012300 	.word	0x40012300
 8002f84:	40012000 	.word	0x40012000
 8002f88:	20000010 	.word	0x20000010
 8002f8c:	431bde83 	.word	0x431bde83

08002f90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f98:	4b79      	ldr	r3, [pc, #484]	; (8003180 <ADC_Init+0x1f0>)
 8002f9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	021a      	lsls	r2, r3, #8
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fe8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800300a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	4a58      	ldr	r2, [pc, #352]	; (8003184 <ADC_Init+0x1f4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d022      	beq.n	800306e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003036:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003058:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6899      	ldr	r1, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	e00f      	b.n	800308e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800307c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800308c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0202 	bic.w	r2, r2, #2
 800309c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6899      	ldr	r1, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	7e1b      	ldrb	r3, [r3, #24]
 80030a8:	005a      	lsls	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01b      	beq.n	80030f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	3b01      	subs	r3, #1
 80030e8:	035a      	lsls	r2, r3, #13
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	e007      	b.n	8003104 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003102:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	3b01      	subs	r3, #1
 8003120:	051a      	lsls	r2, r3, #20
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003138:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003146:	025a      	lsls	r2, r3, #9
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6899      	ldr	r1, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	029a      	lsls	r2, r3, #10
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	609a      	str	r2, [r3, #8]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40012300 	.word	0x40012300
 8003184:	0f000001 	.word	0x0f000001

08003188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a4:	4013      	ands	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ba:	4a04      	ldr	r2, [pc, #16]	; (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	60d3      	str	r3, [r2, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <__NVIC_GetPriorityGrouping+0x18>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	f003 0307 	and.w	r3, r3, #7
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	db0b      	blt.n	8003216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	4907      	ldr	r1, [pc, #28]	; (8003224 <__NVIC_EnableIRQ+0x38>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2001      	movs	r0, #1
 800320e:	fa00 f202 	lsl.w	r2, r0, r2
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000e100 	.word	0xe000e100

08003228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	2b00      	cmp	r3, #0
 800323a:	db0a      	blt.n	8003252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	490c      	ldr	r1, [pc, #48]	; (8003274 <__NVIC_SetPriority+0x4c>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	440b      	add	r3, r1
 800324c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003250:	e00a      	b.n	8003268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4908      	ldr	r1, [pc, #32]	; (8003278 <__NVIC_SetPriority+0x50>)
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	3b04      	subs	r3, #4
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	440b      	add	r3, r1
 8003266:	761a      	strb	r2, [r3, #24]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000e100 	.word	0xe000e100
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f1c3 0307 	rsb	r3, r3, #7
 8003296:	2b04      	cmp	r3, #4
 8003298:	bf28      	it	cs
 800329a:	2304      	movcs	r3, #4
 800329c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d902      	bls.n	80032ac <NVIC_EncodePriority+0x30>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3b03      	subs	r3, #3
 80032aa:	e000      	b.n	80032ae <NVIC_EncodePriority+0x32>
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	43d9      	mvns	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	4313      	orrs	r3, r2
         );
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3724      	adds	r7, #36	; 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f4:	d301      	bcc.n	80032fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032f6:	2301      	movs	r3, #1
 80032f8:	e00f      	b.n	800331a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <SysTick_Config+0x40>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003302:	210f      	movs	r1, #15
 8003304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003308:	f7ff ff8e 	bl	8003228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <SysTick_Config+0x40>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <SysTick_Config+0x40>)
 8003314:	2207      	movs	r2, #7
 8003316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	e000e010 	.word	0xe000e010

08003328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff ff29 	bl	8003188 <__NVIC_SetPriorityGrouping>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	4603      	mov	r3, r0
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003350:	f7ff ff3e 	bl	80031d0 <__NVIC_GetPriorityGrouping>
 8003354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	6978      	ldr	r0, [r7, #20]
 800335c:	f7ff ff8e 	bl	800327c <NVIC_EncodePriority>
 8003360:	4602      	mov	r2, r0
 8003362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff5d 	bl	8003228 <__NVIC_SetPriority>
}
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff31 	bl	80031ec <__NVIC_EnableIRQ>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ffa2 	bl	80032e4 <SysTick_Config>
 80033a0:	4603      	mov	r3, r0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e159      	b.n	800367c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c8:	2201      	movs	r2, #1
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	f040 8148 	bne.w	8003676 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d005      	beq.n	80033fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d130      	bne.n	8003460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2203      	movs	r2, #3
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003434:	2201      	movs	r2, #1
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 0201 	and.w	r2, r3, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	2b03      	cmp	r3, #3
 800346a:	d017      	beq.n	800349c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	2203      	movs	r2, #3
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d123      	bne.n	80034f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	08da      	lsrs	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3208      	adds	r2, #8
 80034b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	220f      	movs	r2, #15
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	08da      	lsrs	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3208      	adds	r2, #8
 80034ea:	69b9      	ldr	r1, [r7, #24]
 80034ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0203 	and.w	r2, r3, #3
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80a2 	beq.w	8003676 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b57      	ldr	r3, [pc, #348]	; (8003694 <HAL_GPIO_Init+0x2e8>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	4a56      	ldr	r2, [pc, #344]	; (8003694 <HAL_GPIO_Init+0x2e8>)
 800353c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003540:	6453      	str	r3, [r2, #68]	; 0x44
 8003542:	4b54      	ldr	r3, [pc, #336]	; (8003694 <HAL_GPIO_Init+0x2e8>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800354e:	4a52      	ldr	r2, [pc, #328]	; (8003698 <HAL_GPIO_Init+0x2ec>)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	3302      	adds	r3, #2
 8003556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	220f      	movs	r2, #15
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a49      	ldr	r2, [pc, #292]	; (800369c <HAL_GPIO_Init+0x2f0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d019      	beq.n	80035ae <HAL_GPIO_Init+0x202>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a48      	ldr	r2, [pc, #288]	; (80036a0 <HAL_GPIO_Init+0x2f4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <HAL_GPIO_Init+0x1fe>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a47      	ldr	r2, [pc, #284]	; (80036a4 <HAL_GPIO_Init+0x2f8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00d      	beq.n	80035a6 <HAL_GPIO_Init+0x1fa>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a46      	ldr	r2, [pc, #280]	; (80036a8 <HAL_GPIO_Init+0x2fc>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <HAL_GPIO_Init+0x1f6>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a45      	ldr	r2, [pc, #276]	; (80036ac <HAL_GPIO_Init+0x300>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_GPIO_Init+0x1f2>
 800359a:	2304      	movs	r3, #4
 800359c:	e008      	b.n	80035b0 <HAL_GPIO_Init+0x204>
 800359e:	2307      	movs	r3, #7
 80035a0:	e006      	b.n	80035b0 <HAL_GPIO_Init+0x204>
 80035a2:	2303      	movs	r3, #3
 80035a4:	e004      	b.n	80035b0 <HAL_GPIO_Init+0x204>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e002      	b.n	80035b0 <HAL_GPIO_Init+0x204>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_GPIO_Init+0x204>
 80035ae:	2300      	movs	r3, #0
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	f002 0203 	and.w	r2, r2, #3
 80035b6:	0092      	lsls	r2, r2, #2
 80035b8:	4093      	lsls	r3, r2
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c0:	4935      	ldr	r1, [pc, #212]	; (8003698 <HAL_GPIO_Init+0x2ec>)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3302      	adds	r3, #2
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ce:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_GPIO_Init+0x304>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035f2:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <HAL_GPIO_Init+0x304>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <HAL_GPIO_Init+0x304>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800361c:	4a24      	ldr	r2, [pc, #144]	; (80036b0 <HAL_GPIO_Init+0x304>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003622:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <HAL_GPIO_Init+0x304>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003646:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_GPIO_Init+0x304>)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800364c:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <HAL_GPIO_Init+0x304>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003670:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <HAL_GPIO_Init+0x304>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3301      	adds	r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b0f      	cmp	r3, #15
 8003680:	f67f aea2 	bls.w	80033c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3724      	adds	r7, #36	; 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	40013800 	.word	0x40013800
 800369c:	40020000 	.word	0x40020000
 80036a0:	40020400 	.word	0x40020400
 80036a4:	40020800 	.word	0x40020800
 80036a8:	40020c00 	.word	0x40020c00
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40013c00 	.word	0x40013c00

080036b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
 80036d0:	e001      	b.n	80036d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
 80036f0:	4613      	mov	r3, r2
 80036f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f4:	787b      	ldrb	r3, [r7, #1]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fa:	887a      	ldrh	r2, [r7, #2]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003700:	e003      	b.n	800370a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	041a      	lsls	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	619a      	str	r2, [r3, #24]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800372e:	4a05      	ldr	r2, [pc, #20]	; (8003744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fe50 	bl	80023dc <HAL_GPIO_EXTI_Callback>
  }
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40013c00 	.word	0x40013c00

08003748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e267      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d075      	beq.n	8003852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003766:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b04      	cmp	r3, #4
 8003770:	d00c      	beq.n	800378c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b85      	ldr	r3, [pc, #532]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377a:	2b08      	cmp	r3, #8
 800377c:	d112      	bne.n	80037a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800377e:	4b82      	ldr	r3, [pc, #520]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378a:	d10b      	bne.n	80037a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	4b7e      	ldr	r3, [pc, #504]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d05b      	beq.n	8003850 <HAL_RCC_OscConfig+0x108>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d157      	bne.n	8003850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e242      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d106      	bne.n	80037bc <HAL_RCC_OscConfig+0x74>
 80037ae:	4b76      	ldr	r3, [pc, #472]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a75      	ldr	r2, [pc, #468]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xb0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x98>
 80037c6:	4b70      	ldr	r3, [pc, #448]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6f      	ldr	r2, [pc, #444]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b6d      	ldr	r3, [pc, #436]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a6c      	ldr	r2, [pc, #432]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xb0>
 80037e0:	4b69      	ldr	r3, [pc, #420]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a68      	ldr	r2, [pc, #416]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b66      	ldr	r3, [pc, #408]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a65      	ldr	r2, [pc, #404]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7ff fa30 	bl	8002c64 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff fa2c 	bl	8002c64 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e207      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xc0>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7ff fa1c 	bl	8002c64 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003830:	f7ff fa18 	bl	8002c64 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e1f3      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	4b51      	ldr	r3, [pc, #324]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0xe8>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d063      	beq.n	8003926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800385e:	4b4a      	ldr	r3, [pc, #296]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003872:	2b08      	cmp	r3, #8
 8003874:	d11c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003876:	4b44      	ldr	r3, [pc, #272]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d116      	bne.n	80038b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	4b41      	ldr	r3, [pc, #260]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_RCC_OscConfig+0x152>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e1c7      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4937      	ldr	r1, [pc, #220]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	e03a      	b.n	8003926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b8:	4b34      	ldr	r3, [pc, #208]	; (800398c <HAL_RCC_OscConfig+0x244>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7ff f9d1 	bl	8002c64 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c6:	f7ff f9cd 	bl	8002c64 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e1a8      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e4:	4b28      	ldr	r3, [pc, #160]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4925      	ldr	r1, [pc, #148]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]
 80038f8:	e015      	b.n	8003926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fa:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_OscConfig+0x244>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7ff f9b0 	bl	8002c64 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003908:	f7ff f9ac 	bl	8002c64 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e187      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d036      	beq.n	80039a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_RCC_OscConfig+0x248>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7ff f990 	bl	8002c64 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003948:	f7ff f98c 	bl	8002c64 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e167      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_OscConfig+0x240>)
 800395c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x200>
 8003966:	e01b      	b.n	80039a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_OscConfig+0x248>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396e:	f7ff f979 	bl	8002c64 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003974:	e00e      	b.n	8003994 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003976:	f7ff f975 	bl	8002c64 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d907      	bls.n	8003994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e150      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
 8003988:	40023800 	.word	0x40023800
 800398c:	42470000 	.word	0x42470000
 8003990:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ea      	bne.n	8003976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8097 	beq.w	8003adc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b2:	4b81      	ldr	r3, [pc, #516]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10f      	bne.n	80039de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	4b7d      	ldr	r3, [pc, #500]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4a7c      	ldr	r2, [pc, #496]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039cc:	6413      	str	r3, [r2, #64]	; 0x40
 80039ce:	4b7a      	ldr	r3, [pc, #488]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039de:	4b77      	ldr	r3, [pc, #476]	; (8003bbc <HAL_RCC_OscConfig+0x474>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d118      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ea:	4b74      	ldr	r3, [pc, #464]	; (8003bbc <HAL_RCC_OscConfig+0x474>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a73      	ldr	r2, [pc, #460]	; (8003bbc <HAL_RCC_OscConfig+0x474>)
 80039f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f6:	f7ff f935 	bl	8002c64 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fe:	f7ff f931 	bl	8002c64 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e10c      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a10:	4b6a      	ldr	r3, [pc, #424]	; (8003bbc <HAL_RCC_OscConfig+0x474>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x2ea>
 8003a24:	4b64      	ldr	r3, [pc, #400]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a63      	ldr	r2, [pc, #396]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	e01c      	b.n	8003a6c <HAL_RCC_OscConfig+0x324>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x30c>
 8003a3a:	4b5f      	ldr	r3, [pc, #380]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a5e      	ldr	r2, [pc, #376]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	4b5c      	ldr	r3, [pc, #368]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a5b      	ldr	r2, [pc, #364]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0x324>
 8003a54:	4b58      	ldr	r3, [pc, #352]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	4a57      	ldr	r2, [pc, #348]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a60:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	4a54      	ldr	r2, [pc, #336]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a66:	f023 0304 	bic.w	r3, r3, #4
 8003a6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7ff f8f6 	bl	8002c64 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7c:	f7ff f8f2 	bl	8002c64 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e0cb      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a92:	4b49      	ldr	r3, [pc, #292]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ee      	beq.n	8003a7c <HAL_RCC_OscConfig+0x334>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa0:	f7ff f8e0 	bl	8002c64 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7ff f8dc 	bl	8002c64 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e0b5      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abe:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ee      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d105      	bne.n	8003adc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad0:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	4a38      	ldr	r2, [pc, #224]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ada:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80a1 	beq.w	8003c28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae6:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d05c      	beq.n	8003bac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d141      	bne.n	8003b7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <HAL_RCC_OscConfig+0x478>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7ff f8b0 	bl	8002c64 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b08:	f7ff f8ac 	bl	8002c64 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e087      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	019b      	lsls	r3, r3, #6
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	491b      	ldr	r1, [pc, #108]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_RCC_OscConfig+0x478>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7ff f885 	bl	8002c64 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5e:	f7ff f881 	bl	8002c64 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e05c      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x416>
 8003b7c:	e054      	b.n	8003c28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <HAL_RCC_OscConfig+0x478>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7ff f86e 	bl	8002c64 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7ff f86a 	bl	8002c64 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e045      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x444>
 8003baa:	e03d      	b.n	8003c28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e038      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40007000 	.word	0x40007000
 8003bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_RCC_OscConfig+0x4ec>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d121      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d11a      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d111      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800

08003c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0cc      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b68      	ldr	r3, [pc, #416]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d90c      	bls.n	8003c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b65      	ldr	r3, [pc, #404]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b63      	ldr	r3, [pc, #396]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0b8      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c8c:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a58      	ldr	r2, [pc, #352]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca4:	4b53      	ldr	r3, [pc, #332]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a52      	ldr	r2, [pc, #328]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	494d      	ldr	r1, [pc, #308]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d044      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d119      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e07f      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf6:	4b3f      	ldr	r3, [pc, #252]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e06f      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e067      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f023 0203 	bic.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4934      	ldr	r1, [pc, #208]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d28:	f7fe ff9c 	bl	8002c64 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f7fe ff98 	bl	8002c64 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e04f      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 020c 	and.w	r2, r3, #12
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1eb      	bne.n	8003d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d20c      	bcs.n	8003d80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e032      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4916      	ldr	r1, [pc, #88]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	490e      	ldr	r1, [pc, #56]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dbe:	f000 f821 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	490a      	ldr	r1, [pc, #40]	; (8003df8 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	5ccb      	ldrb	r3, [r1, r3]
 8003dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd6:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fefc 	bl	8002bdc <HAL_InitTick>

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023c00 	.word	0x40023c00
 8003df4:	40023800 	.word	0x40023800
 8003df8:	08005c68 	.word	0x08005c68
 8003dfc:	20000010 	.word	0x20000010
 8003e00:	20000014 	.word	0x20000014

08003e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e08:	b090      	sub	sp, #64	; 0x40
 8003e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e10:	2300      	movs	r3, #0
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e14:	2300      	movs	r3, #0
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e1c:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d00d      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x40>
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	f200 80a1 	bhi.w	8003f70 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x34>
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e36:	e09b      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e3c:	e09b      	b.n	8003f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e3e:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e42:	e098      	b.n	8003f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e44:	4b4f      	ldr	r3, [pc, #316]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4e:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d028      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	2200      	movs	r2, #0
 8003e62:	623b      	str	r3, [r7, #32]
 8003e64:	627a      	str	r2, [r7, #36]	; 0x24
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e70:	fb03 f201 	mul.w	r2, r3, r1
 8003e74:	2300      	movs	r3, #0
 8003e76:	fb00 f303 	mul.w	r3, r0, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	4a43      	ldr	r2, [pc, #268]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e7e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e84:	460a      	mov	r2, r1
 8003e86:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e8a:	4413      	add	r3, r2
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e90:	2200      	movs	r2, #0
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	61fa      	str	r2, [r7, #28]
 8003e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e9e:	f7fc fc9f 	bl	80007e0 <__aeabi_uldivmod>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eaa:	e053      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	617a      	str	r2, [r7, #20]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ebe:	f04f 0b00 	mov.w	fp, #0
 8003ec2:	4652      	mov	r2, sl
 8003ec4:	465b      	mov	r3, fp
 8003ec6:	f04f 0000 	mov.w	r0, #0
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	0159      	lsls	r1, r3, #5
 8003ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed4:	0150      	lsls	r0, r2, #5
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	ebb2 080a 	subs.w	r8, r2, sl
 8003ede:	eb63 090b 	sbc.w	r9, r3, fp
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ef2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ef6:	ebb2 0408 	subs.w	r4, r2, r8
 8003efa:	eb63 0509 	sbc.w	r5, r3, r9
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	00eb      	lsls	r3, r5, #3
 8003f08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f0c:	00e2      	lsls	r2, r4, #3
 8003f0e:	4614      	mov	r4, r2
 8003f10:	461d      	mov	r5, r3
 8003f12:	eb14 030a 	adds.w	r3, r4, sl
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	eb45 030b 	adc.w	r3, r5, fp
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	028b      	lsls	r3, r1, #10
 8003f2e:	4621      	mov	r1, r4
 8003f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f34:	4621      	mov	r1, r4
 8003f36:	028a      	lsls	r2, r1, #10
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	60fa      	str	r2, [r7, #12]
 8003f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f48:	f7fc fc4a 	bl	80007e0 <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4613      	mov	r3, r2
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f6e:	e002      	b.n	8003f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3740      	adds	r7, #64	; 0x40
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	00f42400 	.word	0x00f42400
 8003f8c:	017d7840 	.word	0x017d7840

08003f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000010 	.word	0x20000010

08003fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fac:	f7ff fff0 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	0a9b      	lsrs	r3, r3, #10
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4903      	ldr	r1, [pc, #12]	; (8003fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	08005c78 	.word	0x08005c78

08003fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fd4:	f7ff ffdc 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0b5b      	lsrs	r3, r3, #13
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4903      	ldr	r1, [pc, #12]	; (8003ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	08005c78 	.word	0x08005c78

08003ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e07b      	b.n	8004102 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d108      	bne.n	8004024 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401a:	d009      	beq.n	8004030 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	61da      	str	r2, [r3, #28]
 8004022:	e005      	b.n	8004030 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fe fa64 	bl	8002518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004066:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	ea42 0103 	orr.w	r1, r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f003 0104 	and.w	r1, r3, #4
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	f003 0210 	and.w	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e097      	b.n	800424e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fe fbee 	bl	8002914 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800414e:	f023 0307 	bic.w	r3, r3, #7
 8004152:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 f87a 	bl	8004258 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	f023 0303 	bic.w	r3, r3, #3
 8004190:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	4313      	orrs	r3, r2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041aa:	f023 030c 	bic.w	r3, r3, #12
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	4313      	orrs	r3, r2
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	011a      	lsls	r2, r3, #4
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	031b      	lsls	r3, r3, #12
 80041da:	4313      	orrs	r3, r2
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80041e8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80041f0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	4313      	orrs	r3, r2
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a34      	ldr	r2, [pc, #208]	; (800433c <TIM_Base_SetConfig+0xe4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00f      	beq.n	8004290 <TIM_Base_SetConfig+0x38>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x38>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a31      	ldr	r2, [pc, #196]	; (8004340 <TIM_Base_SetConfig+0xe8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x38>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a30      	ldr	r2, [pc, #192]	; (8004344 <TIM_Base_SetConfig+0xec>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x38>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2f      	ldr	r2, [pc, #188]	; (8004348 <TIM_Base_SetConfig+0xf0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a25      	ldr	r2, [pc, #148]	; (800433c <TIM_Base_SetConfig+0xe4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01b      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d017      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a22      	ldr	r2, [pc, #136]	; (8004340 <TIM_Base_SetConfig+0xe8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a21      	ldr	r2, [pc, #132]	; (8004344 <TIM_Base_SetConfig+0xec>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00f      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a20      	ldr	r2, [pc, #128]	; (8004348 <TIM_Base_SetConfig+0xf0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <TIM_Base_SetConfig+0xf4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <TIM_Base_SetConfig+0xf8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <TIM_Base_SetConfig+0xfc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <TIM_Base_SetConfig+0xe4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d103      	bne.n	8004328 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	615a      	str	r2, [r3, #20]
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40010000 	.word	0x40010000
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800

08004358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800436c:	2302      	movs	r3, #2
 800436e:	e050      	b.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d013      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a16      	ldr	r2, [pc, #88]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a13      	ldr	r2, [pc, #76]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10c      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40010000 	.word	0x40010000
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40014000 	.word	0x40014000

08004434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e03f      	b.n	80044c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fe faf6 	bl	8002a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	; 0x24
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f829 	bl	80044d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800448c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800449c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d4:	b0c0      	sub	sp, #256	; 0x100
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	68d9      	ldr	r1, [r3, #12]
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	ea40 0301 	orr.w	r3, r0, r1
 80044f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	431a      	orrs	r2, r3
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	431a      	orrs	r2, r3
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004528:	f021 010c 	bic.w	r1, r1, #12
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004536:	430b      	orrs	r3, r1
 8004538:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454a:	6999      	ldr	r1, [r3, #24]
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	ea40 0301 	orr.w	r3, r0, r1
 8004556:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b8f      	ldr	r3, [pc, #572]	; (800479c <UART_SetConfig+0x2cc>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d005      	beq.n	8004570 <UART_SetConfig+0xa0>
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b8d      	ldr	r3, [pc, #564]	; (80047a0 <UART_SetConfig+0x2d0>)
 800456c:	429a      	cmp	r2, r3
 800456e:	d104      	bne.n	800457a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004570:	f7ff fd2e 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8004574:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004578:	e003      	b.n	8004582 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800457a:	f7ff fd15 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 800457e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458c:	f040 810c 	bne.w	80047a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800459a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800459e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045a2:	4622      	mov	r2, r4
 80045a4:	462b      	mov	r3, r5
 80045a6:	1891      	adds	r1, r2, r2
 80045a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80045aa:	415b      	adcs	r3, r3
 80045ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045b2:	4621      	mov	r1, r4
 80045b4:	eb12 0801 	adds.w	r8, r2, r1
 80045b8:	4629      	mov	r1, r5
 80045ba:	eb43 0901 	adc.w	r9, r3, r1
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045d2:	4690      	mov	r8, r2
 80045d4:	4699      	mov	r9, r3
 80045d6:	4623      	mov	r3, r4
 80045d8:	eb18 0303 	adds.w	r3, r8, r3
 80045dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045e0:	462b      	mov	r3, r5
 80045e2:	eb49 0303 	adc.w	r3, r9, r3
 80045e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045fe:	460b      	mov	r3, r1
 8004600:	18db      	adds	r3, r3, r3
 8004602:	653b      	str	r3, [r7, #80]	; 0x50
 8004604:	4613      	mov	r3, r2
 8004606:	eb42 0303 	adc.w	r3, r2, r3
 800460a:	657b      	str	r3, [r7, #84]	; 0x54
 800460c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004610:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004614:	f7fc f8e4 	bl	80007e0 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4b61      	ldr	r3, [pc, #388]	; (80047a4 <UART_SetConfig+0x2d4>)
 800461e:	fba3 2302 	umull	r2, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	011c      	lsls	r4, r3, #4
 8004626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004630:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004634:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004638:	4642      	mov	r2, r8
 800463a:	464b      	mov	r3, r9
 800463c:	1891      	adds	r1, r2, r2
 800463e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004640:	415b      	adcs	r3, r3
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004648:	4641      	mov	r1, r8
 800464a:	eb12 0a01 	adds.w	sl, r2, r1
 800464e:	4649      	mov	r1, r9
 8004650:	eb43 0b01 	adc.w	fp, r3, r1
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004660:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004664:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004668:	4692      	mov	sl, r2
 800466a:	469b      	mov	fp, r3
 800466c:	4643      	mov	r3, r8
 800466e:	eb1a 0303 	adds.w	r3, sl, r3
 8004672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004676:	464b      	mov	r3, r9
 8004678:	eb4b 0303 	adc.w	r3, fp, r3
 800467c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800468c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004690:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004694:	460b      	mov	r3, r1
 8004696:	18db      	adds	r3, r3, r3
 8004698:	643b      	str	r3, [r7, #64]	; 0x40
 800469a:	4613      	mov	r3, r2
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	647b      	str	r3, [r7, #68]	; 0x44
 80046a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046aa:	f7fc f899 	bl	80007e0 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	4b3b      	ldr	r3, [pc, #236]	; (80047a4 <UART_SetConfig+0x2d4>)
 80046b6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2264      	movs	r2, #100	; 0x64
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	1acb      	subs	r3, r1, r3
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046ca:	4b36      	ldr	r3, [pc, #216]	; (80047a4 <UART_SetConfig+0x2d4>)
 80046cc:	fba3 2302 	umull	r2, r3, r3, r2
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046d8:	441c      	add	r4, r3
 80046da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046ec:	4642      	mov	r2, r8
 80046ee:	464b      	mov	r3, r9
 80046f0:	1891      	adds	r1, r2, r2
 80046f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80046f4:	415b      	adcs	r3, r3
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046fc:	4641      	mov	r1, r8
 80046fe:	1851      	adds	r1, r2, r1
 8004700:	6339      	str	r1, [r7, #48]	; 0x30
 8004702:	4649      	mov	r1, r9
 8004704:	414b      	adcs	r3, r1
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004714:	4659      	mov	r1, fp
 8004716:	00cb      	lsls	r3, r1, #3
 8004718:	4651      	mov	r1, sl
 800471a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800471e:	4651      	mov	r1, sl
 8004720:	00ca      	lsls	r2, r1, #3
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	4603      	mov	r3, r0
 8004728:	4642      	mov	r2, r8
 800472a:	189b      	adds	r3, r3, r2
 800472c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004730:	464b      	mov	r3, r9
 8004732:	460a      	mov	r2, r1
 8004734:	eb42 0303 	adc.w	r3, r2, r3
 8004738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004748:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800474c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004750:	460b      	mov	r3, r1
 8004752:	18db      	adds	r3, r3, r3
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
 8004756:	4613      	mov	r3, r2
 8004758:	eb42 0303 	adc.w	r3, r2, r3
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800475e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004762:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004766:	f7fc f83b 	bl	80007e0 <__aeabi_uldivmod>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <UART_SetConfig+0x2d4>)
 8004770:	fba3 1302 	umull	r1, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	2164      	movs	r1, #100	; 0x64
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	3332      	adds	r3, #50	; 0x32
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <UART_SetConfig+0x2d4>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	f003 0207 	and.w	r2, r3, #7
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4422      	add	r2, r4
 8004796:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004798:	e105      	b.n	80049a6 <UART_SetConfig+0x4d6>
 800479a:	bf00      	nop
 800479c:	40011000 	.word	0x40011000
 80047a0:	40011400 	.word	0x40011400
 80047a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ac:	2200      	movs	r2, #0
 80047ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ba:	4642      	mov	r2, r8
 80047bc:	464b      	mov	r3, r9
 80047be:	1891      	adds	r1, r2, r2
 80047c0:	6239      	str	r1, [r7, #32]
 80047c2:	415b      	adcs	r3, r3
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ca:	4641      	mov	r1, r8
 80047cc:	1854      	adds	r4, r2, r1
 80047ce:	4649      	mov	r1, r9
 80047d0:	eb43 0501 	adc.w	r5, r3, r1
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	00eb      	lsls	r3, r5, #3
 80047de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047e2:	00e2      	lsls	r2, r4, #3
 80047e4:	4614      	mov	r4, r2
 80047e6:	461d      	mov	r5, r3
 80047e8:	4643      	mov	r3, r8
 80047ea:	18e3      	adds	r3, r4, r3
 80047ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047f0:	464b      	mov	r3, r9
 80047f2:	eb45 0303 	adc.w	r3, r5, r3
 80047f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004816:	4629      	mov	r1, r5
 8004818:	008b      	lsls	r3, r1, #2
 800481a:	4621      	mov	r1, r4
 800481c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004820:	4621      	mov	r1, r4
 8004822:	008a      	lsls	r2, r1, #2
 8004824:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004828:	f7fb ffda 	bl	80007e0 <__aeabi_uldivmod>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4b60      	ldr	r3, [pc, #384]	; (80049b4 <UART_SetConfig+0x4e4>)
 8004832:	fba3 2302 	umull	r2, r3, r3, r2
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	011c      	lsls	r4, r3, #4
 800483a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800483e:	2200      	movs	r2, #0
 8004840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004844:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004848:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800484c:	4642      	mov	r2, r8
 800484e:	464b      	mov	r3, r9
 8004850:	1891      	adds	r1, r2, r2
 8004852:	61b9      	str	r1, [r7, #24]
 8004854:	415b      	adcs	r3, r3
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800485c:	4641      	mov	r1, r8
 800485e:	1851      	adds	r1, r2, r1
 8004860:	6139      	str	r1, [r7, #16]
 8004862:	4649      	mov	r1, r9
 8004864:	414b      	adcs	r3, r1
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004874:	4659      	mov	r1, fp
 8004876:	00cb      	lsls	r3, r1, #3
 8004878:	4651      	mov	r1, sl
 800487a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800487e:	4651      	mov	r1, sl
 8004880:	00ca      	lsls	r2, r1, #3
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	4603      	mov	r3, r0
 8004888:	4642      	mov	r2, r8
 800488a:	189b      	adds	r3, r3, r2
 800488c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004890:	464b      	mov	r3, r9
 8004892:	460a      	mov	r2, r1
 8004894:	eb42 0303 	adc.w	r3, r2, r3
 8004898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80048a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048b4:	4649      	mov	r1, r9
 80048b6:	008b      	lsls	r3, r1, #2
 80048b8:	4641      	mov	r1, r8
 80048ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048be:	4641      	mov	r1, r8
 80048c0:	008a      	lsls	r2, r1, #2
 80048c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048c6:	f7fb ff8b 	bl	80007e0 <__aeabi_uldivmod>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <UART_SetConfig+0x4e4>)
 80048d0:	fba3 1302 	umull	r1, r3, r3, r2
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	2164      	movs	r1, #100	; 0x64
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	3332      	adds	r3, #50	; 0x32
 80048e2:	4a34      	ldr	r2, [pc, #208]	; (80049b4 <UART_SetConfig+0x4e4>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ee:	441c      	add	r4, r3
 80048f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f4:	2200      	movs	r2, #0
 80048f6:	673b      	str	r3, [r7, #112]	; 0x70
 80048f8:	677a      	str	r2, [r7, #116]	; 0x74
 80048fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048fe:	4642      	mov	r2, r8
 8004900:	464b      	mov	r3, r9
 8004902:	1891      	adds	r1, r2, r2
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	415b      	adcs	r3, r3
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800490e:	4641      	mov	r1, r8
 8004910:	1851      	adds	r1, r2, r1
 8004912:	6039      	str	r1, [r7, #0]
 8004914:	4649      	mov	r1, r9
 8004916:	414b      	adcs	r3, r1
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004926:	4659      	mov	r1, fp
 8004928:	00cb      	lsls	r3, r1, #3
 800492a:	4651      	mov	r1, sl
 800492c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004930:	4651      	mov	r1, sl
 8004932:	00ca      	lsls	r2, r1, #3
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	4603      	mov	r3, r0
 800493a:	4642      	mov	r2, r8
 800493c:	189b      	adds	r3, r3, r2
 800493e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004940:	464b      	mov	r3, r9
 8004942:	460a      	mov	r2, r1
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	663b      	str	r3, [r7, #96]	; 0x60
 8004954:	667a      	str	r2, [r7, #100]	; 0x64
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004962:	4649      	mov	r1, r9
 8004964:	008b      	lsls	r3, r1, #2
 8004966:	4641      	mov	r1, r8
 8004968:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800496c:	4641      	mov	r1, r8
 800496e:	008a      	lsls	r2, r1, #2
 8004970:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004974:	f7fb ff34 	bl	80007e0 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <UART_SetConfig+0x4e4>)
 800497e:	fba3 1302 	umull	r1, r3, r3, r2
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2164      	movs	r1, #100	; 0x64
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <UART_SetConfig+0x4e4>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 020f 	and.w	r2, r3, #15
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4422      	add	r2, r4
 80049a4:	609a      	str	r2, [r3, #8]
}
 80049a6:	bf00      	nop
 80049a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049ac:	46bd      	mov	sp, r7
 80049ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b2:	bf00      	nop
 80049b4:	51eb851f 	.word	0x51eb851f

080049b8 <__errno>:
 80049b8:	4b01      	ldr	r3, [pc, #4]	; (80049c0 <__errno+0x8>)
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	2000001c 	.word	0x2000001c

080049c4 <__libc_init_array>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4d0d      	ldr	r5, [pc, #52]	; (80049fc <__libc_init_array+0x38>)
 80049c8:	4c0d      	ldr	r4, [pc, #52]	; (8004a00 <__libc_init_array+0x3c>)
 80049ca:	1b64      	subs	r4, r4, r5
 80049cc:	10a4      	asrs	r4, r4, #2
 80049ce:	2600      	movs	r6, #0
 80049d0:	42a6      	cmp	r6, r4
 80049d2:	d109      	bne.n	80049e8 <__libc_init_array+0x24>
 80049d4:	4d0b      	ldr	r5, [pc, #44]	; (8004a04 <__libc_init_array+0x40>)
 80049d6:	4c0c      	ldr	r4, [pc, #48]	; (8004a08 <__libc_init_array+0x44>)
 80049d8:	f000 fd1e 	bl	8005418 <_init>
 80049dc:	1b64      	subs	r4, r4, r5
 80049de:	10a4      	asrs	r4, r4, #2
 80049e0:	2600      	movs	r6, #0
 80049e2:	42a6      	cmp	r6, r4
 80049e4:	d105      	bne.n	80049f2 <__libc_init_array+0x2e>
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ec:	4798      	blx	r3
 80049ee:	3601      	adds	r6, #1
 80049f0:	e7ee      	b.n	80049d0 <__libc_init_array+0xc>
 80049f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f6:	4798      	blx	r3
 80049f8:	3601      	adds	r6, #1
 80049fa:	e7f2      	b.n	80049e2 <__libc_init_array+0x1e>
 80049fc:	08005cec 	.word	0x08005cec
 8004a00:	08005cec 	.word	0x08005cec
 8004a04:	08005cec 	.word	0x08005cec
 8004a08:	08005cf0 	.word	0x08005cf0

08004a0c <memset>:
 8004a0c:	4402      	add	r2, r0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d100      	bne.n	8004a16 <memset+0xa>
 8004a14:	4770      	bx	lr
 8004a16:	f803 1b01 	strb.w	r1, [r3], #1
 8004a1a:	e7f9      	b.n	8004a10 <memset+0x4>

08004a1c <_puts_r>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	460e      	mov	r6, r1
 8004a20:	4605      	mov	r5, r0
 8004a22:	b118      	cbz	r0, 8004a2c <_puts_r+0x10>
 8004a24:	6983      	ldr	r3, [r0, #24]
 8004a26:	b90b      	cbnz	r3, 8004a2c <_puts_r+0x10>
 8004a28:	f000 fa48 	bl	8004ebc <__sinit>
 8004a2c:	69ab      	ldr	r3, [r5, #24]
 8004a2e:	68ac      	ldr	r4, [r5, #8]
 8004a30:	b913      	cbnz	r3, 8004a38 <_puts_r+0x1c>
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 fa42 	bl	8004ebc <__sinit>
 8004a38:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <_puts_r+0xd0>)
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	d120      	bne.n	8004a80 <_puts_r+0x64>
 8004a3e:	686c      	ldr	r4, [r5, #4]
 8004a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a42:	07db      	lsls	r3, r3, #31
 8004a44:	d405      	bmi.n	8004a52 <_puts_r+0x36>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	0598      	lsls	r0, r3, #22
 8004a4a:	d402      	bmi.n	8004a52 <_puts_r+0x36>
 8004a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a4e:	f000 fad3 	bl	8004ff8 <__retarget_lock_acquire_recursive>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	0719      	lsls	r1, r3, #28
 8004a56:	d51d      	bpl.n	8004a94 <_puts_r+0x78>
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	b1db      	cbz	r3, 8004a94 <_puts_r+0x78>
 8004a5c:	3e01      	subs	r6, #1
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a64:	3b01      	subs	r3, #1
 8004a66:	60a3      	str	r3, [r4, #8]
 8004a68:	bb39      	cbnz	r1, 8004aba <_puts_r+0x9e>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	da38      	bge.n	8004ae0 <_puts_r+0xc4>
 8004a6e:	4622      	mov	r2, r4
 8004a70:	210a      	movs	r1, #10
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 f848 	bl	8004b08 <__swbuf_r>
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d011      	beq.n	8004aa0 <_puts_r+0x84>
 8004a7c:	250a      	movs	r5, #10
 8004a7e:	e011      	b.n	8004aa4 <_puts_r+0x88>
 8004a80:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <_puts_r+0xd4>)
 8004a82:	429c      	cmp	r4, r3
 8004a84:	d101      	bne.n	8004a8a <_puts_r+0x6e>
 8004a86:	68ac      	ldr	r4, [r5, #8]
 8004a88:	e7da      	b.n	8004a40 <_puts_r+0x24>
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <_puts_r+0xd8>)
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	bf08      	it	eq
 8004a90:	68ec      	ldreq	r4, [r5, #12]
 8004a92:	e7d5      	b.n	8004a40 <_puts_r+0x24>
 8004a94:	4621      	mov	r1, r4
 8004a96:	4628      	mov	r0, r5
 8004a98:	f000 f888 	bl	8004bac <__swsetup_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d0dd      	beq.n	8004a5c <_puts_r+0x40>
 8004aa0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aa6:	07da      	lsls	r2, r3, #31
 8004aa8:	d405      	bmi.n	8004ab6 <_puts_r+0x9a>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	059b      	lsls	r3, r3, #22
 8004aae:	d402      	bmi.n	8004ab6 <_puts_r+0x9a>
 8004ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ab2:	f000 faa2 	bl	8004ffa <__retarget_lock_release_recursive>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	da04      	bge.n	8004ac8 <_puts_r+0xac>
 8004abe:	69a2      	ldr	r2, [r4, #24]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	dc06      	bgt.n	8004ad2 <_puts_r+0xb6>
 8004ac4:	290a      	cmp	r1, #10
 8004ac6:	d004      	beq.n	8004ad2 <_puts_r+0xb6>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	6022      	str	r2, [r4, #0]
 8004ace:	7019      	strb	r1, [r3, #0]
 8004ad0:	e7c5      	b.n	8004a5e <_puts_r+0x42>
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 f817 	bl	8004b08 <__swbuf_r>
 8004ada:	3001      	adds	r0, #1
 8004adc:	d1bf      	bne.n	8004a5e <_puts_r+0x42>
 8004ade:	e7df      	b.n	8004aa0 <_puts_r+0x84>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	250a      	movs	r5, #10
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	701d      	strb	r5, [r3, #0]
 8004aea:	e7db      	b.n	8004aa4 <_puts_r+0x88>
 8004aec:	08005ca4 	.word	0x08005ca4
 8004af0:	08005cc4 	.word	0x08005cc4
 8004af4:	08005c84 	.word	0x08005c84

08004af8 <puts>:
 8004af8:	4b02      	ldr	r3, [pc, #8]	; (8004b04 <puts+0xc>)
 8004afa:	4601      	mov	r1, r0
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	f7ff bf8d 	b.w	8004a1c <_puts_r>
 8004b02:	bf00      	nop
 8004b04:	2000001c 	.word	0x2000001c

08004b08 <__swbuf_r>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	460e      	mov	r6, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	4605      	mov	r5, r0
 8004b10:	b118      	cbz	r0, 8004b1a <__swbuf_r+0x12>
 8004b12:	6983      	ldr	r3, [r0, #24]
 8004b14:	b90b      	cbnz	r3, 8004b1a <__swbuf_r+0x12>
 8004b16:	f000 f9d1 	bl	8004ebc <__sinit>
 8004b1a:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <__swbuf_r+0x98>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d12b      	bne.n	8004b78 <__swbuf_r+0x70>
 8004b20:	686c      	ldr	r4, [r5, #4]
 8004b22:	69a3      	ldr	r3, [r4, #24]
 8004b24:	60a3      	str	r3, [r4, #8]
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	071a      	lsls	r2, r3, #28
 8004b2a:	d52f      	bpl.n	8004b8c <__swbuf_r+0x84>
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	b36b      	cbz	r3, 8004b8c <__swbuf_r+0x84>
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	1ac0      	subs	r0, r0, r3
 8004b36:	6963      	ldr	r3, [r4, #20]
 8004b38:	b2f6      	uxtb	r6, r6
 8004b3a:	4283      	cmp	r3, r0
 8004b3c:	4637      	mov	r7, r6
 8004b3e:	dc04      	bgt.n	8004b4a <__swbuf_r+0x42>
 8004b40:	4621      	mov	r1, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f926 	bl	8004d94 <_fflush_r>
 8004b48:	bb30      	cbnz	r0, 8004b98 <__swbuf_r+0x90>
 8004b4a:	68a3      	ldr	r3, [r4, #8]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	60a3      	str	r3, [r4, #8]
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	6022      	str	r2, [r4, #0]
 8004b56:	701e      	strb	r6, [r3, #0]
 8004b58:	6963      	ldr	r3, [r4, #20]
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	4283      	cmp	r3, r0
 8004b5e:	d004      	beq.n	8004b6a <__swbuf_r+0x62>
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	07db      	lsls	r3, r3, #31
 8004b64:	d506      	bpl.n	8004b74 <__swbuf_r+0x6c>
 8004b66:	2e0a      	cmp	r6, #10
 8004b68:	d104      	bne.n	8004b74 <__swbuf_r+0x6c>
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 f911 	bl	8004d94 <_fflush_r>
 8004b72:	b988      	cbnz	r0, 8004b98 <__swbuf_r+0x90>
 8004b74:	4638      	mov	r0, r7
 8004b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <__swbuf_r+0x9c>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d101      	bne.n	8004b82 <__swbuf_r+0x7a>
 8004b7e:	68ac      	ldr	r4, [r5, #8]
 8004b80:	e7cf      	b.n	8004b22 <__swbuf_r+0x1a>
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <__swbuf_r+0xa0>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	bf08      	it	eq
 8004b88:	68ec      	ldreq	r4, [r5, #12]
 8004b8a:	e7ca      	b.n	8004b22 <__swbuf_r+0x1a>
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 f80c 	bl	8004bac <__swsetup_r>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d0cb      	beq.n	8004b30 <__swbuf_r+0x28>
 8004b98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004b9c:	e7ea      	b.n	8004b74 <__swbuf_r+0x6c>
 8004b9e:	bf00      	nop
 8004ba0:	08005ca4 	.word	0x08005ca4
 8004ba4:	08005cc4 	.word	0x08005cc4
 8004ba8:	08005c84 	.word	0x08005c84

08004bac <__swsetup_r>:
 8004bac:	4b32      	ldr	r3, [pc, #200]	; (8004c78 <__swsetup_r+0xcc>)
 8004bae:	b570      	push	{r4, r5, r6, lr}
 8004bb0:	681d      	ldr	r5, [r3, #0]
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	b125      	cbz	r5, 8004bc2 <__swsetup_r+0x16>
 8004bb8:	69ab      	ldr	r3, [r5, #24]
 8004bba:	b913      	cbnz	r3, 8004bc2 <__swsetup_r+0x16>
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f000 f97d 	bl	8004ebc <__sinit>
 8004bc2:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <__swsetup_r+0xd0>)
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	d10f      	bne.n	8004be8 <__swsetup_r+0x3c>
 8004bc8:	686c      	ldr	r4, [r5, #4]
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bd0:	0719      	lsls	r1, r3, #28
 8004bd2:	d42c      	bmi.n	8004c2e <__swsetup_r+0x82>
 8004bd4:	06dd      	lsls	r5, r3, #27
 8004bd6:	d411      	bmi.n	8004bfc <__swsetup_r+0x50>
 8004bd8:	2309      	movs	r3, #9
 8004bda:	6033      	str	r3, [r6, #0]
 8004bdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004be6:	e03e      	b.n	8004c66 <__swsetup_r+0xba>
 8004be8:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <__swsetup_r+0xd4>)
 8004bea:	429c      	cmp	r4, r3
 8004bec:	d101      	bne.n	8004bf2 <__swsetup_r+0x46>
 8004bee:	68ac      	ldr	r4, [r5, #8]
 8004bf0:	e7eb      	b.n	8004bca <__swsetup_r+0x1e>
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <__swsetup_r+0xd8>)
 8004bf4:	429c      	cmp	r4, r3
 8004bf6:	bf08      	it	eq
 8004bf8:	68ec      	ldreq	r4, [r5, #12]
 8004bfa:	e7e6      	b.n	8004bca <__swsetup_r+0x1e>
 8004bfc:	0758      	lsls	r0, r3, #29
 8004bfe:	d512      	bpl.n	8004c26 <__swsetup_r+0x7a>
 8004c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c02:	b141      	cbz	r1, 8004c16 <__swsetup_r+0x6a>
 8004c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d002      	beq.n	8004c12 <__swsetup_r+0x66>
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f000 fa5b 	bl	80050c8 <_free_r>
 8004c12:	2300      	movs	r3, #0
 8004c14:	6363      	str	r3, [r4, #52]	; 0x34
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6063      	str	r3, [r4, #4]
 8004c22:	6923      	ldr	r3, [r4, #16]
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	f043 0308 	orr.w	r3, r3, #8
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	6923      	ldr	r3, [r4, #16]
 8004c30:	b94b      	cbnz	r3, 8004c46 <__swsetup_r+0x9a>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3c:	d003      	beq.n	8004c46 <__swsetup_r+0x9a>
 8004c3e:	4621      	mov	r1, r4
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 fa01 	bl	8005048 <__smakebuf_r>
 8004c46:	89a0      	ldrh	r0, [r4, #12]
 8004c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c4c:	f010 0301 	ands.w	r3, r0, #1
 8004c50:	d00a      	beq.n	8004c68 <__swsetup_r+0xbc>
 8004c52:	2300      	movs	r3, #0
 8004c54:	60a3      	str	r3, [r4, #8]
 8004c56:	6963      	ldr	r3, [r4, #20]
 8004c58:	425b      	negs	r3, r3
 8004c5a:	61a3      	str	r3, [r4, #24]
 8004c5c:	6923      	ldr	r3, [r4, #16]
 8004c5e:	b943      	cbnz	r3, 8004c72 <__swsetup_r+0xc6>
 8004c60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c64:	d1ba      	bne.n	8004bdc <__swsetup_r+0x30>
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	0781      	lsls	r1, r0, #30
 8004c6a:	bf58      	it	pl
 8004c6c:	6963      	ldrpl	r3, [r4, #20]
 8004c6e:	60a3      	str	r3, [r4, #8]
 8004c70:	e7f4      	b.n	8004c5c <__swsetup_r+0xb0>
 8004c72:	2000      	movs	r0, #0
 8004c74:	e7f7      	b.n	8004c66 <__swsetup_r+0xba>
 8004c76:	bf00      	nop
 8004c78:	2000001c 	.word	0x2000001c
 8004c7c:	08005ca4 	.word	0x08005ca4
 8004c80:	08005cc4 	.word	0x08005cc4
 8004c84:	08005c84 	.word	0x08005c84

08004c88 <__sflush_r>:
 8004c88:	898a      	ldrh	r2, [r1, #12]
 8004c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8e:	4605      	mov	r5, r0
 8004c90:	0710      	lsls	r0, r2, #28
 8004c92:	460c      	mov	r4, r1
 8004c94:	d458      	bmi.n	8004d48 <__sflush_r+0xc0>
 8004c96:	684b      	ldr	r3, [r1, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	dc05      	bgt.n	8004ca8 <__sflush_r+0x20>
 8004c9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	dc02      	bgt.n	8004ca8 <__sflush_r+0x20>
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004caa:	2e00      	cmp	r6, #0
 8004cac:	d0f9      	beq.n	8004ca2 <__sflush_r+0x1a>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cb4:	682f      	ldr	r7, [r5, #0]
 8004cb6:	602b      	str	r3, [r5, #0]
 8004cb8:	d032      	beq.n	8004d20 <__sflush_r+0x98>
 8004cba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	075a      	lsls	r2, r3, #29
 8004cc0:	d505      	bpl.n	8004cce <__sflush_r+0x46>
 8004cc2:	6863      	ldr	r3, [r4, #4]
 8004cc4:	1ac0      	subs	r0, r0, r3
 8004cc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cc8:	b10b      	cbz	r3, 8004cce <__sflush_r+0x46>
 8004cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ccc:	1ac0      	subs	r0, r0, r3
 8004cce:	2300      	movs	r3, #0
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cd4:	6a21      	ldr	r1, [r4, #32]
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b0      	blx	r6
 8004cda:	1c43      	adds	r3, r0, #1
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	d106      	bne.n	8004cee <__sflush_r+0x66>
 8004ce0:	6829      	ldr	r1, [r5, #0]
 8004ce2:	291d      	cmp	r1, #29
 8004ce4:	d82c      	bhi.n	8004d40 <__sflush_r+0xb8>
 8004ce6:	4a2a      	ldr	r2, [pc, #168]	; (8004d90 <__sflush_r+0x108>)
 8004ce8:	40ca      	lsrs	r2, r1
 8004cea:	07d6      	lsls	r6, r2, #31
 8004cec:	d528      	bpl.n	8004d40 <__sflush_r+0xb8>
 8004cee:	2200      	movs	r2, #0
 8004cf0:	6062      	str	r2, [r4, #4]
 8004cf2:	04d9      	lsls	r1, r3, #19
 8004cf4:	6922      	ldr	r2, [r4, #16]
 8004cf6:	6022      	str	r2, [r4, #0]
 8004cf8:	d504      	bpl.n	8004d04 <__sflush_r+0x7c>
 8004cfa:	1c42      	adds	r2, r0, #1
 8004cfc:	d101      	bne.n	8004d02 <__sflush_r+0x7a>
 8004cfe:	682b      	ldr	r3, [r5, #0]
 8004d00:	b903      	cbnz	r3, 8004d04 <__sflush_r+0x7c>
 8004d02:	6560      	str	r0, [r4, #84]	; 0x54
 8004d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d06:	602f      	str	r7, [r5, #0]
 8004d08:	2900      	cmp	r1, #0
 8004d0a:	d0ca      	beq.n	8004ca2 <__sflush_r+0x1a>
 8004d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d10:	4299      	cmp	r1, r3
 8004d12:	d002      	beq.n	8004d1a <__sflush_r+0x92>
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f9d7 	bl	80050c8 <_free_r>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	6360      	str	r0, [r4, #52]	; 0x34
 8004d1e:	e7c1      	b.n	8004ca4 <__sflush_r+0x1c>
 8004d20:	6a21      	ldr	r1, [r4, #32]
 8004d22:	2301      	movs	r3, #1
 8004d24:	4628      	mov	r0, r5
 8004d26:	47b0      	blx	r6
 8004d28:	1c41      	adds	r1, r0, #1
 8004d2a:	d1c7      	bne.n	8004cbc <__sflush_r+0x34>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0c4      	beq.n	8004cbc <__sflush_r+0x34>
 8004d32:	2b1d      	cmp	r3, #29
 8004d34:	d001      	beq.n	8004d3a <__sflush_r+0xb2>
 8004d36:	2b16      	cmp	r3, #22
 8004d38:	d101      	bne.n	8004d3e <__sflush_r+0xb6>
 8004d3a:	602f      	str	r7, [r5, #0]
 8004d3c:	e7b1      	b.n	8004ca2 <__sflush_r+0x1a>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d44:	81a3      	strh	r3, [r4, #12]
 8004d46:	e7ad      	b.n	8004ca4 <__sflush_r+0x1c>
 8004d48:	690f      	ldr	r7, [r1, #16]
 8004d4a:	2f00      	cmp	r7, #0
 8004d4c:	d0a9      	beq.n	8004ca2 <__sflush_r+0x1a>
 8004d4e:	0793      	lsls	r3, r2, #30
 8004d50:	680e      	ldr	r6, [r1, #0]
 8004d52:	bf08      	it	eq
 8004d54:	694b      	ldreq	r3, [r1, #20]
 8004d56:	600f      	str	r7, [r1, #0]
 8004d58:	bf18      	it	ne
 8004d5a:	2300      	movne	r3, #0
 8004d5c:	eba6 0807 	sub.w	r8, r6, r7
 8004d60:	608b      	str	r3, [r1, #8]
 8004d62:	f1b8 0f00 	cmp.w	r8, #0
 8004d66:	dd9c      	ble.n	8004ca2 <__sflush_r+0x1a>
 8004d68:	6a21      	ldr	r1, [r4, #32]
 8004d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d6c:	4643      	mov	r3, r8
 8004d6e:	463a      	mov	r2, r7
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b0      	blx	r6
 8004d74:	2800      	cmp	r0, #0
 8004d76:	dc06      	bgt.n	8004d86 <__sflush_r+0xfe>
 8004d78:	89a3      	ldrh	r3, [r4, #12]
 8004d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d84:	e78e      	b.n	8004ca4 <__sflush_r+0x1c>
 8004d86:	4407      	add	r7, r0
 8004d88:	eba8 0800 	sub.w	r8, r8, r0
 8004d8c:	e7e9      	b.n	8004d62 <__sflush_r+0xda>
 8004d8e:	bf00      	nop
 8004d90:	20400001 	.word	0x20400001

08004d94 <_fflush_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	690b      	ldr	r3, [r1, #16]
 8004d98:	4605      	mov	r5, r0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	b913      	cbnz	r3, 8004da4 <_fflush_r+0x10>
 8004d9e:	2500      	movs	r5, #0
 8004da0:	4628      	mov	r0, r5
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	b118      	cbz	r0, 8004dae <_fflush_r+0x1a>
 8004da6:	6983      	ldr	r3, [r0, #24]
 8004da8:	b90b      	cbnz	r3, 8004dae <_fflush_r+0x1a>
 8004daa:	f000 f887 	bl	8004ebc <__sinit>
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <_fflush_r+0x6c>)
 8004db0:	429c      	cmp	r4, r3
 8004db2:	d11b      	bne.n	8004dec <_fflush_r+0x58>
 8004db4:	686c      	ldr	r4, [r5, #4]
 8004db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ef      	beq.n	8004d9e <_fflush_r+0xa>
 8004dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dc0:	07d0      	lsls	r0, r2, #31
 8004dc2:	d404      	bmi.n	8004dce <_fflush_r+0x3a>
 8004dc4:	0599      	lsls	r1, r3, #22
 8004dc6:	d402      	bmi.n	8004dce <_fflush_r+0x3a>
 8004dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dca:	f000 f915 	bl	8004ff8 <__retarget_lock_acquire_recursive>
 8004dce:	4628      	mov	r0, r5
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	f7ff ff59 	bl	8004c88 <__sflush_r>
 8004dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd8:	07da      	lsls	r2, r3, #31
 8004dda:	4605      	mov	r5, r0
 8004ddc:	d4e0      	bmi.n	8004da0 <_fflush_r+0xc>
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	059b      	lsls	r3, r3, #22
 8004de2:	d4dd      	bmi.n	8004da0 <_fflush_r+0xc>
 8004de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004de6:	f000 f908 	bl	8004ffa <__retarget_lock_release_recursive>
 8004dea:	e7d9      	b.n	8004da0 <_fflush_r+0xc>
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <_fflush_r+0x70>)
 8004dee:	429c      	cmp	r4, r3
 8004df0:	d101      	bne.n	8004df6 <_fflush_r+0x62>
 8004df2:	68ac      	ldr	r4, [r5, #8]
 8004df4:	e7df      	b.n	8004db6 <_fflush_r+0x22>
 8004df6:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <_fflush_r+0x74>)
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	bf08      	it	eq
 8004dfc:	68ec      	ldreq	r4, [r5, #12]
 8004dfe:	e7da      	b.n	8004db6 <_fflush_r+0x22>
 8004e00:	08005ca4 	.word	0x08005ca4
 8004e04:	08005cc4 	.word	0x08005cc4
 8004e08:	08005c84 	.word	0x08005c84

08004e0c <std>:
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	4604      	mov	r4, r0
 8004e12:	e9c0 3300 	strd	r3, r3, [r0]
 8004e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e1a:	6083      	str	r3, [r0, #8]
 8004e1c:	8181      	strh	r1, [r0, #12]
 8004e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e20:	81c2      	strh	r2, [r0, #14]
 8004e22:	6183      	str	r3, [r0, #24]
 8004e24:	4619      	mov	r1, r3
 8004e26:	2208      	movs	r2, #8
 8004e28:	305c      	adds	r0, #92	; 0x5c
 8004e2a:	f7ff fdef 	bl	8004a0c <memset>
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <std+0x38>)
 8004e30:	6263      	str	r3, [r4, #36]	; 0x24
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <std+0x3c>)
 8004e34:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <std+0x40>)
 8004e38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <std+0x44>)
 8004e3c:	6224      	str	r4, [r4, #32]
 8004e3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	bf00      	nop
 8004e44:	080052a9 	.word	0x080052a9
 8004e48:	080052cb 	.word	0x080052cb
 8004e4c:	08005303 	.word	0x08005303
 8004e50:	08005327 	.word	0x08005327

08004e54 <_cleanup_r>:
 8004e54:	4901      	ldr	r1, [pc, #4]	; (8004e5c <_cleanup_r+0x8>)
 8004e56:	f000 b8af 	b.w	8004fb8 <_fwalk_reent>
 8004e5a:	bf00      	nop
 8004e5c:	08004d95 	.word	0x08004d95

08004e60 <__sfmoreglue>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	2268      	movs	r2, #104	; 0x68
 8004e64:	1e4d      	subs	r5, r1, #1
 8004e66:	4355      	muls	r5, r2
 8004e68:	460e      	mov	r6, r1
 8004e6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e6e:	f000 f997 	bl	80051a0 <_malloc_r>
 8004e72:	4604      	mov	r4, r0
 8004e74:	b140      	cbz	r0, 8004e88 <__sfmoreglue+0x28>
 8004e76:	2100      	movs	r1, #0
 8004e78:	e9c0 1600 	strd	r1, r6, [r0]
 8004e7c:	300c      	adds	r0, #12
 8004e7e:	60a0      	str	r0, [r4, #8]
 8004e80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e84:	f7ff fdc2 	bl	8004a0c <memset>
 8004e88:	4620      	mov	r0, r4
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}

08004e8c <__sfp_lock_acquire>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__sfp_lock_acquire+0x8>)
 8004e8e:	f000 b8b3 	b.w	8004ff8 <__retarget_lock_acquire_recursive>
 8004e92:	bf00      	nop
 8004e94:	2000027d 	.word	0x2000027d

08004e98 <__sfp_lock_release>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__sfp_lock_release+0x8>)
 8004e9a:	f000 b8ae 	b.w	8004ffa <__retarget_lock_release_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	2000027d 	.word	0x2000027d

08004ea4 <__sinit_lock_acquire>:
 8004ea4:	4801      	ldr	r0, [pc, #4]	; (8004eac <__sinit_lock_acquire+0x8>)
 8004ea6:	f000 b8a7 	b.w	8004ff8 <__retarget_lock_acquire_recursive>
 8004eaa:	bf00      	nop
 8004eac:	2000027e 	.word	0x2000027e

08004eb0 <__sinit_lock_release>:
 8004eb0:	4801      	ldr	r0, [pc, #4]	; (8004eb8 <__sinit_lock_release+0x8>)
 8004eb2:	f000 b8a2 	b.w	8004ffa <__retarget_lock_release_recursive>
 8004eb6:	bf00      	nop
 8004eb8:	2000027e 	.word	0x2000027e

08004ebc <__sinit>:
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	f7ff fff0 	bl	8004ea4 <__sinit_lock_acquire>
 8004ec4:	69a3      	ldr	r3, [r4, #24]
 8004ec6:	b11b      	cbz	r3, 8004ed0 <__sinit+0x14>
 8004ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ecc:	f7ff bff0 	b.w	8004eb0 <__sinit_lock_release>
 8004ed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ed4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ed6:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <__sinit+0x68>)
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <__sinit+0x6c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ede:	42a3      	cmp	r3, r4
 8004ee0:	bf04      	itt	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	61a3      	streq	r3, [r4, #24]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f820 	bl	8004f2c <__sfp>
 8004eec:	6060      	str	r0, [r4, #4]
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f000 f81c 	bl	8004f2c <__sfp>
 8004ef4:	60a0      	str	r0, [r4, #8]
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f000 f818 	bl	8004f2c <__sfp>
 8004efc:	2200      	movs	r2, #0
 8004efe:	60e0      	str	r0, [r4, #12]
 8004f00:	2104      	movs	r1, #4
 8004f02:	6860      	ldr	r0, [r4, #4]
 8004f04:	f7ff ff82 	bl	8004e0c <std>
 8004f08:	68a0      	ldr	r0, [r4, #8]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	2109      	movs	r1, #9
 8004f0e:	f7ff ff7d 	bl	8004e0c <std>
 8004f12:	68e0      	ldr	r0, [r4, #12]
 8004f14:	2202      	movs	r2, #2
 8004f16:	2112      	movs	r1, #18
 8004f18:	f7ff ff78 	bl	8004e0c <std>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	61a3      	str	r3, [r4, #24]
 8004f20:	e7d2      	b.n	8004ec8 <__sinit+0xc>
 8004f22:	bf00      	nop
 8004f24:	08005c80 	.word	0x08005c80
 8004f28:	08004e55 	.word	0x08004e55

08004f2c <__sfp>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	4607      	mov	r7, r0
 8004f30:	f7ff ffac 	bl	8004e8c <__sfp_lock_acquire>
 8004f34:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <__sfp+0x84>)
 8004f36:	681e      	ldr	r6, [r3, #0]
 8004f38:	69b3      	ldr	r3, [r6, #24]
 8004f3a:	b913      	cbnz	r3, 8004f42 <__sfp+0x16>
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f7ff ffbd 	bl	8004ebc <__sinit>
 8004f42:	3648      	adds	r6, #72	; 0x48
 8004f44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	d503      	bpl.n	8004f54 <__sfp+0x28>
 8004f4c:	6833      	ldr	r3, [r6, #0]
 8004f4e:	b30b      	cbz	r3, 8004f94 <__sfp+0x68>
 8004f50:	6836      	ldr	r6, [r6, #0]
 8004f52:	e7f7      	b.n	8004f44 <__sfp+0x18>
 8004f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f58:	b9d5      	cbnz	r5, 8004f90 <__sfp+0x64>
 8004f5a:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <__sfp+0x88>)
 8004f5c:	60e3      	str	r3, [r4, #12]
 8004f5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f62:	6665      	str	r5, [r4, #100]	; 0x64
 8004f64:	f000 f847 	bl	8004ff6 <__retarget_lock_init_recursive>
 8004f68:	f7ff ff96 	bl	8004e98 <__sfp_lock_release>
 8004f6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f74:	6025      	str	r5, [r4, #0]
 8004f76:	61a5      	str	r5, [r4, #24]
 8004f78:	2208      	movs	r2, #8
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f80:	f7ff fd44 	bl	8004a0c <memset>
 8004f84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f90:	3468      	adds	r4, #104	; 0x68
 8004f92:	e7d9      	b.n	8004f48 <__sfp+0x1c>
 8004f94:	2104      	movs	r1, #4
 8004f96:	4638      	mov	r0, r7
 8004f98:	f7ff ff62 	bl	8004e60 <__sfmoreglue>
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	6030      	str	r0, [r6, #0]
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d1d5      	bne.n	8004f50 <__sfp+0x24>
 8004fa4:	f7ff ff78 	bl	8004e98 <__sfp_lock_release>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	e7ee      	b.n	8004f8c <__sfp+0x60>
 8004fae:	bf00      	nop
 8004fb0:	08005c80 	.word	0x08005c80
 8004fb4:	ffff0001 	.word	0xffff0001

08004fb8 <_fwalk_reent>:
 8004fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	4688      	mov	r8, r1
 8004fc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fc4:	2700      	movs	r7, #0
 8004fc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fca:	f1b9 0901 	subs.w	r9, r9, #1
 8004fce:	d505      	bpl.n	8004fdc <_fwalk_reent+0x24>
 8004fd0:	6824      	ldr	r4, [r4, #0]
 8004fd2:	2c00      	cmp	r4, #0
 8004fd4:	d1f7      	bne.n	8004fc6 <_fwalk_reent+0xe>
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fdc:	89ab      	ldrh	r3, [r5, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d907      	bls.n	8004ff2 <_fwalk_reent+0x3a>
 8004fe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	d003      	beq.n	8004ff2 <_fwalk_reent+0x3a>
 8004fea:	4629      	mov	r1, r5
 8004fec:	4630      	mov	r0, r6
 8004fee:	47c0      	blx	r8
 8004ff0:	4307      	orrs	r7, r0
 8004ff2:	3568      	adds	r5, #104	; 0x68
 8004ff4:	e7e9      	b.n	8004fca <_fwalk_reent+0x12>

08004ff6 <__retarget_lock_init_recursive>:
 8004ff6:	4770      	bx	lr

08004ff8 <__retarget_lock_acquire_recursive>:
 8004ff8:	4770      	bx	lr

08004ffa <__retarget_lock_release_recursive>:
 8004ffa:	4770      	bx	lr

08004ffc <__swhatbuf_r>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	460e      	mov	r6, r1
 8005000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005004:	2900      	cmp	r1, #0
 8005006:	b096      	sub	sp, #88	; 0x58
 8005008:	4614      	mov	r4, r2
 800500a:	461d      	mov	r5, r3
 800500c:	da08      	bge.n	8005020 <__swhatbuf_r+0x24>
 800500e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	602a      	str	r2, [r5, #0]
 8005016:	061a      	lsls	r2, r3, #24
 8005018:	d410      	bmi.n	800503c <__swhatbuf_r+0x40>
 800501a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501e:	e00e      	b.n	800503e <__swhatbuf_r+0x42>
 8005020:	466a      	mov	r2, sp
 8005022:	f000 f9a7 	bl	8005374 <_fstat_r>
 8005026:	2800      	cmp	r0, #0
 8005028:	dbf1      	blt.n	800500e <__swhatbuf_r+0x12>
 800502a:	9a01      	ldr	r2, [sp, #4]
 800502c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005030:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005034:	425a      	negs	r2, r3
 8005036:	415a      	adcs	r2, r3
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	e7ee      	b.n	800501a <__swhatbuf_r+0x1e>
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	2000      	movs	r0, #0
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	b016      	add	sp, #88	; 0x58
 8005044:	bd70      	pop	{r4, r5, r6, pc}
	...

08005048 <__smakebuf_r>:
 8005048:	898b      	ldrh	r3, [r1, #12]
 800504a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800504c:	079d      	lsls	r5, r3, #30
 800504e:	4606      	mov	r6, r0
 8005050:	460c      	mov	r4, r1
 8005052:	d507      	bpl.n	8005064 <__smakebuf_r+0x1c>
 8005054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	6123      	str	r3, [r4, #16]
 800505c:	2301      	movs	r3, #1
 800505e:	6163      	str	r3, [r4, #20]
 8005060:	b002      	add	sp, #8
 8005062:	bd70      	pop	{r4, r5, r6, pc}
 8005064:	ab01      	add	r3, sp, #4
 8005066:	466a      	mov	r2, sp
 8005068:	f7ff ffc8 	bl	8004ffc <__swhatbuf_r>
 800506c:	9900      	ldr	r1, [sp, #0]
 800506e:	4605      	mov	r5, r0
 8005070:	4630      	mov	r0, r6
 8005072:	f000 f895 	bl	80051a0 <_malloc_r>
 8005076:	b948      	cbnz	r0, 800508c <__smakebuf_r+0x44>
 8005078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800507c:	059a      	lsls	r2, r3, #22
 800507e:	d4ef      	bmi.n	8005060 <__smakebuf_r+0x18>
 8005080:	f023 0303 	bic.w	r3, r3, #3
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	e7e3      	b.n	8005054 <__smakebuf_r+0xc>
 800508c:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <__smakebuf_r+0x7c>)
 800508e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	6020      	str	r0, [r4, #0]
 8005094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	9b00      	ldr	r3, [sp, #0]
 800509c:	6163      	str	r3, [r4, #20]
 800509e:	9b01      	ldr	r3, [sp, #4]
 80050a0:	6120      	str	r0, [r4, #16]
 80050a2:	b15b      	cbz	r3, 80050bc <__smakebuf_r+0x74>
 80050a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a8:	4630      	mov	r0, r6
 80050aa:	f000 f975 	bl	8005398 <_isatty_r>
 80050ae:	b128      	cbz	r0, 80050bc <__smakebuf_r+0x74>
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	81a3      	strh	r3, [r4, #12]
 80050bc:	89a0      	ldrh	r0, [r4, #12]
 80050be:	4305      	orrs	r5, r0
 80050c0:	81a5      	strh	r5, [r4, #12]
 80050c2:	e7cd      	b.n	8005060 <__smakebuf_r+0x18>
 80050c4:	08004e55 	.word	0x08004e55

080050c8 <_free_r>:
 80050c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ca:	2900      	cmp	r1, #0
 80050cc:	d044      	beq.n	8005158 <_free_r+0x90>
 80050ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d2:	9001      	str	r0, [sp, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f1a1 0404 	sub.w	r4, r1, #4
 80050da:	bfb8      	it	lt
 80050dc:	18e4      	addlt	r4, r4, r3
 80050de:	f000 f97d 	bl	80053dc <__malloc_lock>
 80050e2:	4a1e      	ldr	r2, [pc, #120]	; (800515c <_free_r+0x94>)
 80050e4:	9801      	ldr	r0, [sp, #4]
 80050e6:	6813      	ldr	r3, [r2, #0]
 80050e8:	b933      	cbnz	r3, 80050f8 <_free_r+0x30>
 80050ea:	6063      	str	r3, [r4, #4]
 80050ec:	6014      	str	r4, [r2, #0]
 80050ee:	b003      	add	sp, #12
 80050f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050f4:	f000 b978 	b.w	80053e8 <__malloc_unlock>
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	d908      	bls.n	800510e <_free_r+0x46>
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	1961      	adds	r1, r4, r5
 8005100:	428b      	cmp	r3, r1
 8005102:	bf01      	itttt	eq
 8005104:	6819      	ldreq	r1, [r3, #0]
 8005106:	685b      	ldreq	r3, [r3, #4]
 8005108:	1949      	addeq	r1, r1, r5
 800510a:	6021      	streq	r1, [r4, #0]
 800510c:	e7ed      	b.n	80050ea <_free_r+0x22>
 800510e:	461a      	mov	r2, r3
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	b10b      	cbz	r3, 8005118 <_free_r+0x50>
 8005114:	42a3      	cmp	r3, r4
 8005116:	d9fa      	bls.n	800510e <_free_r+0x46>
 8005118:	6811      	ldr	r1, [r2, #0]
 800511a:	1855      	adds	r5, r2, r1
 800511c:	42a5      	cmp	r5, r4
 800511e:	d10b      	bne.n	8005138 <_free_r+0x70>
 8005120:	6824      	ldr	r4, [r4, #0]
 8005122:	4421      	add	r1, r4
 8005124:	1854      	adds	r4, r2, r1
 8005126:	42a3      	cmp	r3, r4
 8005128:	6011      	str	r1, [r2, #0]
 800512a:	d1e0      	bne.n	80050ee <_free_r+0x26>
 800512c:	681c      	ldr	r4, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	6053      	str	r3, [r2, #4]
 8005132:	4421      	add	r1, r4
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	e7da      	b.n	80050ee <_free_r+0x26>
 8005138:	d902      	bls.n	8005140 <_free_r+0x78>
 800513a:	230c      	movs	r3, #12
 800513c:	6003      	str	r3, [r0, #0]
 800513e:	e7d6      	b.n	80050ee <_free_r+0x26>
 8005140:	6825      	ldr	r5, [r4, #0]
 8005142:	1961      	adds	r1, r4, r5
 8005144:	428b      	cmp	r3, r1
 8005146:	bf04      	itt	eq
 8005148:	6819      	ldreq	r1, [r3, #0]
 800514a:	685b      	ldreq	r3, [r3, #4]
 800514c:	6063      	str	r3, [r4, #4]
 800514e:	bf04      	itt	eq
 8005150:	1949      	addeq	r1, r1, r5
 8005152:	6021      	streq	r1, [r4, #0]
 8005154:	6054      	str	r4, [r2, #4]
 8005156:	e7ca      	b.n	80050ee <_free_r+0x26>
 8005158:	b003      	add	sp, #12
 800515a:	bd30      	pop	{r4, r5, pc}
 800515c:	20000280 	.word	0x20000280

08005160 <sbrk_aligned>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	4e0e      	ldr	r6, [pc, #56]	; (800519c <sbrk_aligned+0x3c>)
 8005164:	460c      	mov	r4, r1
 8005166:	6831      	ldr	r1, [r6, #0]
 8005168:	4605      	mov	r5, r0
 800516a:	b911      	cbnz	r1, 8005172 <sbrk_aligned+0x12>
 800516c:	f000 f88c 	bl	8005288 <_sbrk_r>
 8005170:	6030      	str	r0, [r6, #0]
 8005172:	4621      	mov	r1, r4
 8005174:	4628      	mov	r0, r5
 8005176:	f000 f887 	bl	8005288 <_sbrk_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d00a      	beq.n	8005194 <sbrk_aligned+0x34>
 800517e:	1cc4      	adds	r4, r0, #3
 8005180:	f024 0403 	bic.w	r4, r4, #3
 8005184:	42a0      	cmp	r0, r4
 8005186:	d007      	beq.n	8005198 <sbrk_aligned+0x38>
 8005188:	1a21      	subs	r1, r4, r0
 800518a:	4628      	mov	r0, r5
 800518c:	f000 f87c 	bl	8005288 <_sbrk_r>
 8005190:	3001      	adds	r0, #1
 8005192:	d101      	bne.n	8005198 <sbrk_aligned+0x38>
 8005194:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005198:	4620      	mov	r0, r4
 800519a:	bd70      	pop	{r4, r5, r6, pc}
 800519c:	20000284 	.word	0x20000284

080051a0 <_malloc_r>:
 80051a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a4:	1ccd      	adds	r5, r1, #3
 80051a6:	f025 0503 	bic.w	r5, r5, #3
 80051aa:	3508      	adds	r5, #8
 80051ac:	2d0c      	cmp	r5, #12
 80051ae:	bf38      	it	cc
 80051b0:	250c      	movcc	r5, #12
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	4607      	mov	r7, r0
 80051b6:	db01      	blt.n	80051bc <_malloc_r+0x1c>
 80051b8:	42a9      	cmp	r1, r5
 80051ba:	d905      	bls.n	80051c8 <_malloc_r+0x28>
 80051bc:	230c      	movs	r3, #12
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	2600      	movs	r6, #0
 80051c2:	4630      	mov	r0, r6
 80051c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c8:	4e2e      	ldr	r6, [pc, #184]	; (8005284 <_malloc_r+0xe4>)
 80051ca:	f000 f907 	bl	80053dc <__malloc_lock>
 80051ce:	6833      	ldr	r3, [r6, #0]
 80051d0:	461c      	mov	r4, r3
 80051d2:	bb34      	cbnz	r4, 8005222 <_malloc_r+0x82>
 80051d4:	4629      	mov	r1, r5
 80051d6:	4638      	mov	r0, r7
 80051d8:	f7ff ffc2 	bl	8005160 <sbrk_aligned>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	4604      	mov	r4, r0
 80051e0:	d14d      	bne.n	800527e <_malloc_r+0xde>
 80051e2:	6834      	ldr	r4, [r6, #0]
 80051e4:	4626      	mov	r6, r4
 80051e6:	2e00      	cmp	r6, #0
 80051e8:	d140      	bne.n	800526c <_malloc_r+0xcc>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	4631      	mov	r1, r6
 80051ee:	4638      	mov	r0, r7
 80051f0:	eb04 0803 	add.w	r8, r4, r3
 80051f4:	f000 f848 	bl	8005288 <_sbrk_r>
 80051f8:	4580      	cmp	r8, r0
 80051fa:	d13a      	bne.n	8005272 <_malloc_r+0xd2>
 80051fc:	6821      	ldr	r1, [r4, #0]
 80051fe:	3503      	adds	r5, #3
 8005200:	1a6d      	subs	r5, r5, r1
 8005202:	f025 0503 	bic.w	r5, r5, #3
 8005206:	3508      	adds	r5, #8
 8005208:	2d0c      	cmp	r5, #12
 800520a:	bf38      	it	cc
 800520c:	250c      	movcc	r5, #12
 800520e:	4629      	mov	r1, r5
 8005210:	4638      	mov	r0, r7
 8005212:	f7ff ffa5 	bl	8005160 <sbrk_aligned>
 8005216:	3001      	adds	r0, #1
 8005218:	d02b      	beq.n	8005272 <_malloc_r+0xd2>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	442b      	add	r3, r5
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	e00e      	b.n	8005240 <_malloc_r+0xa0>
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	1b52      	subs	r2, r2, r5
 8005226:	d41e      	bmi.n	8005266 <_malloc_r+0xc6>
 8005228:	2a0b      	cmp	r2, #11
 800522a:	d916      	bls.n	800525a <_malloc_r+0xba>
 800522c:	1961      	adds	r1, r4, r5
 800522e:	42a3      	cmp	r3, r4
 8005230:	6025      	str	r5, [r4, #0]
 8005232:	bf18      	it	ne
 8005234:	6059      	strne	r1, [r3, #4]
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	bf08      	it	eq
 800523a:	6031      	streq	r1, [r6, #0]
 800523c:	5162      	str	r2, [r4, r5]
 800523e:	604b      	str	r3, [r1, #4]
 8005240:	4638      	mov	r0, r7
 8005242:	f104 060b 	add.w	r6, r4, #11
 8005246:	f000 f8cf 	bl	80053e8 <__malloc_unlock>
 800524a:	f026 0607 	bic.w	r6, r6, #7
 800524e:	1d23      	adds	r3, r4, #4
 8005250:	1af2      	subs	r2, r6, r3
 8005252:	d0b6      	beq.n	80051c2 <_malloc_r+0x22>
 8005254:	1b9b      	subs	r3, r3, r6
 8005256:	50a3      	str	r3, [r4, r2]
 8005258:	e7b3      	b.n	80051c2 <_malloc_r+0x22>
 800525a:	6862      	ldr	r2, [r4, #4]
 800525c:	42a3      	cmp	r3, r4
 800525e:	bf0c      	ite	eq
 8005260:	6032      	streq	r2, [r6, #0]
 8005262:	605a      	strne	r2, [r3, #4]
 8005264:	e7ec      	b.n	8005240 <_malloc_r+0xa0>
 8005266:	4623      	mov	r3, r4
 8005268:	6864      	ldr	r4, [r4, #4]
 800526a:	e7b2      	b.n	80051d2 <_malloc_r+0x32>
 800526c:	4634      	mov	r4, r6
 800526e:	6876      	ldr	r6, [r6, #4]
 8005270:	e7b9      	b.n	80051e6 <_malloc_r+0x46>
 8005272:	230c      	movs	r3, #12
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	4638      	mov	r0, r7
 8005278:	f000 f8b6 	bl	80053e8 <__malloc_unlock>
 800527c:	e7a1      	b.n	80051c2 <_malloc_r+0x22>
 800527e:	6025      	str	r5, [r4, #0]
 8005280:	e7de      	b.n	8005240 <_malloc_r+0xa0>
 8005282:	bf00      	nop
 8005284:	20000280 	.word	0x20000280

08005288 <_sbrk_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4d06      	ldr	r5, [pc, #24]	; (80052a4 <_sbrk_r+0x1c>)
 800528c:	2300      	movs	r3, #0
 800528e:	4604      	mov	r4, r0
 8005290:	4608      	mov	r0, r1
 8005292:	602b      	str	r3, [r5, #0]
 8005294:	f7fd faa2 	bl	80027dc <_sbrk>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_sbrk_r+0x1a>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_sbrk_r+0x1a>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20000288 	.word	0x20000288

080052a8 <__sread>:
 80052a8:	b510      	push	{r4, lr}
 80052aa:	460c      	mov	r4, r1
 80052ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b0:	f000 f8a0 	bl	80053f4 <_read_r>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	bfab      	itete	ge
 80052b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052ba:	89a3      	ldrhlt	r3, [r4, #12]
 80052bc:	181b      	addge	r3, r3, r0
 80052be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052c2:	bfac      	ite	ge
 80052c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052c6:	81a3      	strhlt	r3, [r4, #12]
 80052c8:	bd10      	pop	{r4, pc}

080052ca <__swrite>:
 80052ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ce:	461f      	mov	r7, r3
 80052d0:	898b      	ldrh	r3, [r1, #12]
 80052d2:	05db      	lsls	r3, r3, #23
 80052d4:	4605      	mov	r5, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	4616      	mov	r6, r2
 80052da:	d505      	bpl.n	80052e8 <__swrite+0x1e>
 80052dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e0:	2302      	movs	r3, #2
 80052e2:	2200      	movs	r2, #0
 80052e4:	f000 f868 	bl	80053b8 <_lseek_r>
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052f2:	81a3      	strh	r3, [r4, #12]
 80052f4:	4632      	mov	r2, r6
 80052f6:	463b      	mov	r3, r7
 80052f8:	4628      	mov	r0, r5
 80052fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052fe:	f000 b817 	b.w	8005330 <_write_r>

08005302 <__sseek>:
 8005302:	b510      	push	{r4, lr}
 8005304:	460c      	mov	r4, r1
 8005306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530a:	f000 f855 	bl	80053b8 <_lseek_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	bf15      	itete	ne
 8005314:	6560      	strne	r0, [r4, #84]	; 0x54
 8005316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800531a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800531e:	81a3      	strheq	r3, [r4, #12]
 8005320:	bf18      	it	ne
 8005322:	81a3      	strhne	r3, [r4, #12]
 8005324:	bd10      	pop	{r4, pc}

08005326 <__sclose>:
 8005326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532a:	f000 b813 	b.w	8005354 <_close_r>
	...

08005330 <_write_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d07      	ldr	r5, [pc, #28]	; (8005350 <_write_r+0x20>)
 8005334:	4604      	mov	r4, r0
 8005336:	4608      	mov	r0, r1
 8005338:	4611      	mov	r1, r2
 800533a:	2200      	movs	r2, #0
 800533c:	602a      	str	r2, [r5, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	f7fd f9fc 	bl	800273c <_write>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_write_r+0x1e>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_write_r+0x1e>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20000288 	.word	0x20000288

08005354 <_close_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4d06      	ldr	r5, [pc, #24]	; (8005370 <_close_r+0x1c>)
 8005358:	2300      	movs	r3, #0
 800535a:	4604      	mov	r4, r0
 800535c:	4608      	mov	r0, r1
 800535e:	602b      	str	r3, [r5, #0]
 8005360:	f7fd fa08 	bl	8002774 <_close>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_close_r+0x1a>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b103      	cbz	r3, 800536e <_close_r+0x1a>
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20000288 	.word	0x20000288

08005374 <_fstat_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4d07      	ldr	r5, [pc, #28]	; (8005394 <_fstat_r+0x20>)
 8005378:	2300      	movs	r3, #0
 800537a:	4604      	mov	r4, r0
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	602b      	str	r3, [r5, #0]
 8005382:	f7fd fa03 	bl	800278c <_fstat>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	d102      	bne.n	8005390 <_fstat_r+0x1c>
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	b103      	cbz	r3, 8005390 <_fstat_r+0x1c>
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	bd38      	pop	{r3, r4, r5, pc}
 8005392:	bf00      	nop
 8005394:	20000288 	.word	0x20000288

08005398 <_isatty_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4d06      	ldr	r5, [pc, #24]	; (80053b4 <_isatty_r+0x1c>)
 800539c:	2300      	movs	r3, #0
 800539e:	4604      	mov	r4, r0
 80053a0:	4608      	mov	r0, r1
 80053a2:	602b      	str	r3, [r5, #0]
 80053a4:	f7fd fa02 	bl	80027ac <_isatty>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_isatty_r+0x1a>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_isatty_r+0x1a>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	20000288 	.word	0x20000288

080053b8 <_lseek_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4d07      	ldr	r5, [pc, #28]	; (80053d8 <_lseek_r+0x20>)
 80053bc:	4604      	mov	r4, r0
 80053be:	4608      	mov	r0, r1
 80053c0:	4611      	mov	r1, r2
 80053c2:	2200      	movs	r2, #0
 80053c4:	602a      	str	r2, [r5, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	f7fd f9fb 	bl	80027c2 <_lseek>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_lseek_r+0x1e>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_lseek_r+0x1e>
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	20000288 	.word	0x20000288

080053dc <__malloc_lock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_lock+0x8>)
 80053de:	f7ff be0b 	b.w	8004ff8 <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	2000027c 	.word	0x2000027c

080053e8 <__malloc_unlock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_unlock+0x8>)
 80053ea:	f7ff be06 	b.w	8004ffa <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	2000027c 	.word	0x2000027c

080053f4 <_read_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4d07      	ldr	r5, [pc, #28]	; (8005414 <_read_r+0x20>)
 80053f8:	4604      	mov	r4, r0
 80053fa:	4608      	mov	r0, r1
 80053fc:	4611      	mov	r1, r2
 80053fe:	2200      	movs	r2, #0
 8005400:	602a      	str	r2, [r5, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	f7fd f97d 	bl	8002702 <_read>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d102      	bne.n	8005412 <_read_r+0x1e>
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	b103      	cbz	r3, 8005412 <_read_r+0x1e>
 8005410:	6023      	str	r3, [r4, #0]
 8005412:	bd38      	pop	{r3, r4, r5, pc}
 8005414:	20000288 	.word	0x20000288

08005418 <_init>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr

08005424 <_fini>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	bf00      	nop
 8005428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542a:	bc08      	pop	{r3}
 800542c:	469e      	mov	lr, r3
 800542e:	4770      	bx	lr
