
F334R8T6_ServoEncoderLcdic2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055cc  080055cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080055cc  080055cc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055cc  080055cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055cc  080055cc  000155cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001c4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a74  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027e4  00000000  00000000  00032b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  000352f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e88  00000000  00000000  000362a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021541  00000000  00000000  00037130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e7e  00000000  00000000  00058671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4720  00000000  00000000  0006d4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131c0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044d8  00000000  00000000  00131c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005520 	.word	0x08005520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005520 	.word	0x08005520

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b2f      	ldr	r3, [pc, #188]	; (8000354 <MX_GPIO_Init+0xd4>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a2e      	ldr	r2, [pc, #184]	; (8000354 <MX_GPIO_Init+0xd4>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b2c      	ldr	r3, [pc, #176]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b29      	ldr	r3, [pc, #164]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a28      	ldr	r2, [pc, #160]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b26      	ldr	r3, [pc, #152]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b23      	ldr	r3, [pc, #140]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a22      	ldr	r2, [pc, #136]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b20      	ldr	r3, [pc, #128]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b1d      	ldr	r3, [pc, #116]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <MX_GPIO_Init+0xd4>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2120      	movs	r1, #32
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fe:	f001 f8fd 	bl	80014fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = P1_Pin;
 8000302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000308:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800030c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	4619      	mov	r1, r3
 8000318:	480f      	ldr	r0, [pc, #60]	; (8000358 <MX_GPIO_Init+0xd8>)
 800031a:	f000 ff7d 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800031e:	2320      	movs	r3, #32
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2300      	movs	r3, #0
 800032c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	4619      	mov	r1, r3
 8000334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000338:	f000 ff6e 	bl	8001218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	2100      	movs	r1, #0
 8000340:	2028      	movs	r0, #40	; 0x28
 8000342:	f000 ff32 	bl	80011aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000346:	2028      	movs	r0, #40	; 0x28
 8000348:	f000 ff4b 	bl	80011e2 <HAL_NVIC_EnableIRQ>

}
 800034c:	bf00      	nop
 800034e:	3728      	adds	r7, #40	; 0x28
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	48000800 	.word	0x48000800

0800035c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	; (80003d4 <MX_I2C1_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000368:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <MX_I2C1_Init+0x7c>)
 800036a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000374:	2201      	movs	r2, #1
 8000376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_I2C1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000396:	480e      	ldr	r0, [pc, #56]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000398:	f001 f8fa 	bl	8001590 <HAL_I2C_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003a2:	f000 faf1 	bl	8000988 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003a6:	2100      	movs	r1, #0
 80003a8:	4809      	ldr	r0, [pc, #36]	; (80003d0 <MX_I2C1_Init+0x74>)
 80003aa:	f001 fbf9 	bl	8001ba0 <HAL_I2CEx_ConfigAnalogFilter>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003b4:	f000 fae8 	bl	8000988 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003b8:	2100      	movs	r1, #0
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_I2C1_Init+0x74>)
 80003bc:	f001 fc3b 	bl	8001c36 <HAL_I2CEx_ConfigDigitalFilter>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 fadf 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	2000008c 	.word	0x2000008c
 80003d4:	40005400 	.word	0x40005400
 80003d8:	2000090e 	.word	0x2000090e

080003dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	; 0x28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a26      	ldr	r2, [pc, #152]	; (8000494 <HAL_I2C_MspInit+0xb8>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d145      	bne.n	800048a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <HAL_I2C_MspInit+0xbc>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a25      	ldr	r2, [pc, #148]	; (8000498 <HAL_I2C_MspInit+0xbc>)
 8000404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b23      	ldr	r3, [pc, #140]	; (8000498 <HAL_I2C_MspInit+0xbc>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000416:	4b20      	ldr	r3, [pc, #128]	; (8000498 <HAL_I2C_MspInit+0xbc>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a1f      	ldr	r2, [pc, #124]	; (8000498 <HAL_I2C_MspInit+0xbc>)
 800041c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <HAL_I2C_MspInit+0xbc>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800042e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000434:	2312      	movs	r3, #18
 8000436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043c:	2303      	movs	r3, #3
 800043e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000440:	2304      	movs	r3, #4
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0314 	add.w	r3, r7, #20
 8000448:	4619      	mov	r1, r3
 800044a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044e:	f000 fee3 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000456:	2312      	movs	r3, #18
 8000458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800045e:	2303      	movs	r3, #3
 8000460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000462:	2304      	movs	r3, #4
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4619      	mov	r1, r3
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <HAL_I2C_MspInit+0xc0>)
 800046e:	f000 fed3 	bl	8001218 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <HAL_I2C_MspInit+0xbc>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a08      	ldr	r2, [pc, #32]	; (8000498 <HAL_I2C_MspInit+0xbc>)
 8000478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HAL_I2C_MspInit+0xbc>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800048a:	bf00      	nop
 800048c:	3728      	adds	r7, #40	; 0x28
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40005400 	.word	0x40005400
 8000498:	40021000 	.word	0x40021000
 800049c:	48000400 	.word	0x48000400

080004a0 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80004b6:	2308      	movs	r3, #8
 80004b8:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80004ba:	2028      	movs	r0, #40	; 0x28
 80004bc:	f000 fd76 	bl	8000fac <HAL_Delay>
	lcd_init_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	461a      	mov	r2, r3
 80004ca:	2130      	movs	r1, #48	; 0x30
 80004cc:	f000 f82e 	bl	800052c <lcd_init_write>
	HAL_Delay(5);
 80004d0:	2005      	movs	r0, #5
 80004d2:	f000 fd6b 	bl	8000fac <HAL_Delay>
	lcd_init_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	461a      	mov	r2, r3
 80004e0:	2130      	movs	r1, #48	; 0x30
 80004e2:	f000 f823 	bl	800052c <lcd_init_write>
	HAL_Delay(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fd60 	bl	8000fac <HAL_Delay>
	lcd_init_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	461a      	mov	r2, r3
 80004f6:	2130      	movs	r1, #48	; 0x30
 80004f8:	f000 f818 	bl	800052c <lcd_init_write>

	/* set 4-bit mode */
	lcd_init_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	461a      	mov	r2, r3
 8000506:	2102      	movs	r1, #2
 8000508:	f000 f810 	bl	800052c <lcd_init_write>

	/* set cursor mode */
	lcd_init_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	461a      	mov	r2, r3
 8000516:	210c      	movs	r1, #12
 8000518:	f000 f808 	bl	800052c <lcd_init_write>

	/* clear */
	lcd_clear(lcd);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 f8e2 	bl	80006e6 <lcd_clear>

}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <lcd_init_write>:


void lcd_init_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	460b      	mov	r3, r1
 8000538:	71bb      	strb	r3, [r7, #6]
 800053a:	4613      	mov	r3, r2
 800053c:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	f023 030f 	bic.w	r3, r3, #15
 8000544:	b2da      	uxtb	r2, r3
 8000546:	797b      	ldrb	r3, [r7, #5]
 8000548:	4313      	orrs	r3, r2
 800054a:	b2db      	uxtb	r3, r3
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	b2db      	uxtb	r3, r3
 8000552:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000554:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000558:	f023 030f 	bic.w	r3, r3, #15
 800055c:	b25a      	sxtb	r2, r3
 800055e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000562:	4313      	orrs	r3, r2
 8000564:	b25b      	sxtb	r3, r3
 8000566:	b2db      	uxtb	r3, r3
 8000568:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	b2da      	uxtb	r2, r3
 8000570:	797b      	ldrb	r3, [r7, #5]
 8000572:	4313      	orrs	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	b2db      	uxtb	r3, r3
 800057c:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 800057e:	79bb      	ldrb	r3, [r7, #6]
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	b25a      	sxtb	r2, r3
 8000584:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000588:	4313      	orrs	r3, r2
 800058a:	b25b      	sxtb	r3, r3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	b299      	uxth	r1, r3
 8000594:	f107 020c 	add.w	r2, r7, #12
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2304      	movs	r3, #4
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <lcd_init_write+0x88>)
 80005a0:	f001 f886 	bl	80016b0 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80005a4:	2005      	movs	r0, #5
 80005a6:	f000 fd01 	bl	8000fac <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000008c 	.word	0x2000008c

080005b8 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
 80005c2:	460b      	mov	r3, r1
 80005c4:	71bb      	strb	r3, [r7, #6]
 80005c6:	4613      	mov	r3, r2
 80005c8:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	f023 030f 	bic.w	r3, r3, #15
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	797b      	ldrb	r3, [r7, #5]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80005e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005e4:	f023 030f 	bic.w	r3, r3, #15
 80005e8:	b25a      	sxtb	r2, r3
 80005ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	4313      	orrs	r3, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	b25a      	sxtb	r2, r3
 8000610:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000614:	4313      	orrs	r3, r2
 8000616:	b25b      	sxtb	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	b299      	uxth	r1, r3
 8000620:	f107 020c 	add.w	r2, r7, #12
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2304      	movs	r3, #4
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <lcd_write+0x80>)
 800062c:	f001 f840 	bl	80016b0 <HAL_I2C_Master_Transmit>


}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000008c 	.word	0x2000008c

0800063c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	2300      	movs	r3, #0
 800064a:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000656:	2308      	movs	r3, #8
 8000658:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f843 	bl	80006e6 <lcd_clear>

	/* send first line data */
	lcd_init_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	7bfa      	ldrb	r2, [r7, #15]
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff5f 	bl	800052c <lcd_init_write>
	while(lcd->f_line[i])
 800066e:	e00f      	b.n	8000690 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7818      	ldrb	r0, [r3, #0]
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	7859      	ldrb	r1, [r3, #1]
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	f7ff ff97 	bl	80005b8 <lcd_write>
		i++;
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	3301      	adds	r3, #1
 800068e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8000690:	7bbb      	ldrb	r3, [r7, #14]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	785b      	ldrb	r3, [r3, #1]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1e9      	bne.n	8000670 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	73bb      	strb	r3, [r7, #14]
	lcd_init_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	7bfa      	ldrb	r2, [r7, #15]
 80006a6:	21c0      	movs	r1, #192	; 0xc0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff3f 	bl	800052c <lcd_init_write>
	while(lcd->s_line[i])
 80006ae:	e00f      	b.n	80006d0 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7818      	ldrb	r0, [r3, #0]
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	7c99      	ldrb	r1, [r3, #18]
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	f7ff ff77 	bl	80005b8 <lcd_write>
		i++;
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	3301      	adds	r3, #1
 80006ce:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	7c9b      	ldrb	r3, [r3, #18]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e9      	bne.n	80006b0 <lcd_display+0x74>
	}

}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b084      	sub	sp, #16
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80006fc:	2308      	movs	r3, #8
 80006fe:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7bfa      	ldrb	r2, [r7, #15]
 8000706:	2101      	movs	r1, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff55 	bl	80005b8 <lcd_write>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <change_cursor>:
void change_cursor(struct lcd_disp * lcd,uint8_t mode)
{	// mode=1 _OFF BLINK OFF
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
	// mode=1 _OFF BLINK ON
	// mode=1 _ON BLINK OFF
	// mode=1 _ON BLINK ON
	uint8_t xpin = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]
	if(lcd->bl)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <change_cursor+0x1e>
	{
		xpin = BL_PIN;
 8000732:	2308      	movs	r3, #8
 8000734:	73fb      	strb	r3, [r7, #15]
	}
	switch(mode)
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	3b01      	subs	r3, #1
 800073a:	2b03      	cmp	r3, #3
 800073c:	d82a      	bhi.n	8000794 <change_cursor+0x7c>
 800073e:	a201      	add	r2, pc, #4	; (adr r2, 8000744 <change_cursor+0x2c>)
 8000740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000744:	08000755 	.word	0x08000755
 8000748:	08000765 	.word	0x08000765
 800074c:	08000775 	.word	0x08000775
 8000750:	08000785 	.word	0x08000785
	{	case 1:
			lcd_init_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	210c      	movs	r1, #12
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fee5 	bl	800052c <lcd_init_write>
			break;
 8000762:	e017      	b.n	8000794 <change_cursor+0x7c>
		case 2:
			lcd_init_write(lcd->addr, UNDERLINE_OFF_BLINK_ON, xpin);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	210d      	movs	r1, #13
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fedd 	bl	800052c <lcd_init_write>
			break;
 8000772:	e00f      	b.n	8000794 <change_cursor+0x7c>
		case 3:
			lcd_init_write(lcd->addr, UNDERLINE_ON_BLINK_OFF, xpin);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	210e      	movs	r1, #14
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fed5 	bl	800052c <lcd_init_write>
			break;
 8000782:	e007      	b.n	8000794 <change_cursor+0x7c>
		case 4:
			lcd_init_write(lcd->addr, UNDERLINE_ON_BLINK_ON, xpin);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	7bfa      	ldrb	r2, [r7, #15]
 800078a:	210f      	movs	r1, #15
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fecd 	bl	800052c <lcd_init_write>
			break;
 8000792:	bf00      	nop
	}
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b092      	sub	sp, #72	; 0x48
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fb9d 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f875 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff fd69 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ae:	f000 fafb 	bl	8000da8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007b2:	f000 f9a9 	bl	8000b08 <MX_TIM3_Init>
  MX_TIM16_Init();
 80007b6:	f000 f9fb 	bl	8000bb0 <MX_TIM16_Init>
  MX_I2C1_Init();
 80007ba:	f7ff fdcf 	bl	800035c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1 );//incjalizuje timer16 chanel1 jako pwm output
 80007be:	2100      	movs	r1, #0
 80007c0:	4829      	ldr	r0, [pc, #164]	; (8000868 <main+0xcc>)
 80007c2:	f002 fee7 	bl	8003594 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80007c6:	213c      	movs	r1, #60	; 0x3c
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <main+0xd0>)
 80007ca:	f003 f875 	bl	80038b8 <HAL_TIM_Encoder_Start>
  disp.addr= (0x27<<1);
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <main+0xd4>)
 80007d0:	224e      	movs	r2, #78	; 0x4e
 80007d2:	701a      	strb	r2, [r3, #0]
  disp.bl= true;
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <main+0xd4>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 80007dc:	4824      	ldr	r0, [pc, #144]	; (8000870 <main+0xd4>)
 80007de:	f7ff fe5f 	bl	80004a0 <lcd_init>
  sprintf((char*)disp.f_line,"Napierdalaj");
 80007e2:	4924      	ldr	r1, [pc, #144]	; (8000874 <main+0xd8>)
 80007e4:	4824      	ldr	r0, [pc, #144]	; (8000878 <main+0xdc>)
 80007e6:	f004 fa2d 	bl	8004c44 <siprintf>
  sprintf((char*)disp.s_line,"Rusz tym");
 80007ea:	4924      	ldr	r1, [pc, #144]	; (800087c <main+0xe0>)
 80007ec:	4824      	ldr	r0, [pc, #144]	; (8000880 <main+0xe4>)
 80007ee:	f004 fa29 	bl	8004c44 <siprintf>
  lcd_display(&disp);
 80007f2:	481f      	ldr	r0, [pc, #124]	; (8000870 <main+0xd4>)
 80007f4:	f7ff ff22 	bl	800063c <lcd_display>
   	  char msg[64];

   	uint8_t oldcount=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 count=__HAL_TIM_GET_COUNTER(&htim3)/2;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <main+0xd0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <main+0xe8>)
 800080a:	701a      	strb	r2, [r3, #0]
	 if(oldcount!=count){
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <main+0xe8>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000814:	429a      	cmp	r2, r3
 8000816:	d0f2      	beq.n	80007fe <main+0x62>
		 oldcount=count;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <main+0xe8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		 sprintf((char*)msg,"NIGGA: %d\n",count);
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <main+0xe8>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4917      	ldr	r1, [pc, #92]	; (8000888 <main+0xec>)
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fa0a 	bl	8004c44 <siprintf>
	 	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fccc 	bl	80001d0 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	1d39      	adds	r1, r7, #4
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <main+0xf0>)
 8000844:	f003 fe52 	bl	80044ec <HAL_UART_Transmit>
	 	 change_cursor(&disp,4);
 8000848:	2104      	movs	r1, #4
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <main+0xd4>)
 800084c:	f7ff ff64 	bl	8000718 <change_cursor>
	 	 sprintf((char*)disp.s_line,"%d",count);
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <main+0xe8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <main+0xf4>)
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <main+0xe4>)
 800085a:	f004 f9f3 	bl	8004c44 <siprintf>
	 	lcd_display(&disp);
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <main+0xd4>)
 8000860:	f7ff feec 	bl	800063c <lcd_display>
	 count=__HAL_TIM_GET_COUNTER(&htim3)/2;
 8000864:	e7cb      	b.n	80007fe <main+0x62>
 8000866:	bf00      	nop
 8000868:	20000150 	.word	0x20000150
 800086c:	20000104 	.word	0x20000104
 8000870:	200000d8 	.word	0x200000d8
 8000874:	08005538 	.word	0x08005538
 8000878:	200000d9 	.word	0x200000d9
 800087c:	08005544 	.word	0x08005544
 8000880:	200000ea 	.word	0x200000ea
 8000884:	200000fc 	.word	0x200000fc
 8000888:	08005550 	.word	0x08005550
 800088c:	2000019c 	.word	0x2000019c
 8000890:	0800555c 	.word	0x0800555c

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800089e:	2228      	movs	r2, #40	; 0x28
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 f9c6 	bl	8004c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	463b      	mov	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ca:	2302      	movs	r3, #2
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ce:	2301      	movs	r3, #1
 80008d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d2:	2310      	movs	r3, #16
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008da:	2300      	movs	r3, #0
 80008dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008de:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80008e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 f9f1 	bl	8001cd0 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80008f4:	f000 f848 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2102      	movs	r1, #2
 8000914:	4618      	mov	r0, r3
 8000916:	f002 fa19 	bl	8002d4c <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000920:	f000 f832 	bl	8000988 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000924:	2320      	movs	r3, #32
 8000926:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fc42 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800093a:	f000 f825 	bl	8000988 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3758      	adds	r7, #88	; 0x58
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin== P1_Pin)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000958:	d10f      	bne.n	800097a <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800095a:	2120      	movs	r1, #32
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f000 fde4 	bl	800152c <HAL_GPIO_TogglePin>
		set_ang(count*20);
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	b29b      	uxth	r3, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f000 f80d 	bl	8000994 <set_ang>
	}



}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000fc 	.word	0x200000fc

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <set_ang>:
/*
 * ang - kat obrotu walu serwomechanizmu
 * mode - tryb obrotu zgodnie/przeciwnie do wskazowek zegara
 */
void set_ang(uint16_t ang)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
	uint16_t val;

	if(ang > ANGLE_MAX)
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80009a4:	d902      	bls.n	80009ac <set_ang+0x18>
	{
		ang = ANGLE_MAX;
 80009a6:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80009aa:	80fb      	strh	r3, [r7, #6]
	}
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}
	val = PWM_MIN + (ang * STEP) / 1000;
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80009b2:	81fb      	strh	r3, [r7, #14]



	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <set_ang+0x34>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	89fa      	ldrh	r2, [r7, #14]
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	20000150 	.word	0x20000150

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x44>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_MspInit+0x44>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_MspInit+0x44>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x44>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x44>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f000 fbc6 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 fa84 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P1_Pin);
 8000a6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a70:	f000 fd76 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f004 f89a 	bl	8004be0 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20003000 	.word	0x20003000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	20000100 	.word	0x20000100
 8000ae0:	20000238 	.word	0x20000238

08000ae4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2224      	movs	r2, #36	; 0x24
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 f88c 	bl	8004c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b28:	4a20      	ldr	r2, [pc, #128]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 181;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b3a:	22b5      	movs	r2, #181	; 0xb5
 8000b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b62:	2301      	movs	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b76:	f002 fdf9 	bl	800376c <HAL_TIM_Encoder_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f7ff ff02 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b92:	f003 fb77 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b9c:	f7ff fef4 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000104 	.word	0x20000104
 8000bac:	40000400 	.word	0x40000400

08000bb0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b092      	sub	sp, #72	; 0x48
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	222c      	movs	r2, #44	; 0x2c
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 f82f 	bl	8004c34 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000bd8:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <MX_TIM16_Init+0xe8>)
 8000bda:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000bde:	223f      	movs	r2, #63	; 0x3f
 8000be0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000bea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000bee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c02:	4824      	ldr	r0, [pc, #144]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000c04:	f002 fc0e 	bl	8003424 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000c0e:	f7ff febb 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000c12:	4820      	ldr	r0, [pc, #128]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000c14:	f002 fc5d 	bl	80034d2 <HAL_TIM_PWM_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000c1e:	f7ff feb3 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c22:	2360      	movs	r3, #96	; 0x60
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4813      	ldr	r0, [pc, #76]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000c48:	f002 fec4 	bl	80039d4 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000c52:	f7ff fe99 	bl	8000988 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_TIM16_Init+0xe4>)
 8000c7e:	f003 fb6f 	bl	8004360 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000c88:	f7ff fe7e 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	3748      	adds	r7, #72	; 0x48
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000150 	.word	0x20000150
 8000c98:	40014400 	.word	0x40014400

08000c9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d128      	bne.n	8000d10 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_TIM_Encoder_MspInit+0x80>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <HAL_TIM_Encoder_MspInit+0x80>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	61d3      	str	r3, [r2, #28]
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_TIM_Encoder_MspInit+0x80>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_TIM_Encoder_MspInit+0x80>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_TIM_Encoder_MspInit+0x80>)
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_TIM_Encoder_MspInit+0x80>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000cee:	2350      	movs	r3, #80	; 0x50
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f000 fa84 	bl	8001218 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM16)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_TIM_Base_MspInit+0x80>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d129      	bne.n	8000d96 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	6193      	str	r3, [r2, #24]
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PA12     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000d84:	2301      	movs	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f000 fa41 	bl	8001218 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40014400 	.word	0x40014400
 8000da4:	40021000 	.word	0x40021000

08000da8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <MX_USART2_UART_Init+0x5c>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_USART2_UART_Init+0x58>)
 8000dec:	f003 fb30 	bl	8004450 <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000df6:	f7ff fdc7 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000019c 	.word	0x2000019c
 8000e04:	40004400 	.word	0x40004400

08000e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_UART_MspInit+0x7c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d128      	bne.n	8000e7c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0x80>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <HAL_UART_MspInit+0x80>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0x80>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0x80>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_UART_MspInit+0x80>)
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	6153      	str	r3, [r2, #20]
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_UART_MspInit+0x80>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f000 f9ce 	bl	8001218 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40021000 	.word	0x40021000

08000e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eb6:	f7ff fe15 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f003 fe97 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ebe:	f7ff fc6d 	bl	800079c <main>

08000ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ed0:	080055d4 	.word	0x080055d4
  ldr r2, =_sbss
 8000ed4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed8:	20000234 	.word	0x20000234

08000edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x28>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x28>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f94f 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fd66 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f967 	bl	80011fe <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f48:	f000 f92f 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000220 	.word	0x20000220

08000f94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000220 	.word	0x20000220

08000fac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff3e 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff8e 	bl	80010e8 <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff31 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e14e      	b.n	80014c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8140 	beq.w	80014c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x40>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 0201 	and.w	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	6939      	ldr	r1, [r7, #16]
 8001346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0203 	and.w	r2, r3, #3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 809a 	beq.w	80014c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a54      	ldr	r2, [pc, #336]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b52      	ldr	r3, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a4:	4a50      	ldr	r2, [pc, #320]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ce:	d013      	beq.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a46      	ldr	r2, [pc, #280]	; (80014ec <HAL_GPIO_Init+0x2d4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d00d      	beq.n	80013f4 <HAL_GPIO_Init+0x1dc>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a45      	ldr	r2, [pc, #276]	; (80014f0 <HAL_GPIO_Init+0x2d8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d007      	beq.n	80013f0 <HAL_GPIO_Init+0x1d8>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a44      	ldr	r2, [pc, #272]	; (80014f4 <HAL_GPIO_Init+0x2dc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_GPIO_Init+0x1d4>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e006      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013ec:	2305      	movs	r3, #5
 80013ee:	e004      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f8:	2300      	movs	r3, #0
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140a:	4937      	ldr	r1, [pc, #220]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001418:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800143c:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001466:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014ba:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <HAL_GPIO_Init+0x2e0>)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f aea9 	bne.w	8001228 <HAL_GPIO_Init+0x10>
  }
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	48000800 	.word	0x48000800
 80014f4:	48000c00 	.word	0x48000c00
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001518:	e002      	b.n	8001520 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4013      	ands	r3, r2
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43d9      	mvns	r1, r3
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	400b      	ands	r3, r1
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	4013      	ands	r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f9e2 	bl	8000948 <HAL_GPIO_EXTI_Callback>
  }
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e081      	b.n	80016a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7fe ff10 	bl	80003dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2224      	movs	r2, #36	; 0x24
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	e006      	b.n	8001618 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001616:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d104      	bne.n	800162a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001628:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800164c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69d9      	ldr	r1, [r3, #28]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2220      	movs	r2, #32
 8001692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	461a      	mov	r2, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	817b      	strh	r3, [r7, #10]
 80016c0:	4613      	mov	r3, r2
 80016c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	f040 80da 	bne.w	8001886 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_I2C_Master_Transmit+0x30>
 80016dc:	2302      	movs	r3, #2
 80016de:	e0d3      	b.n	8001888 <HAL_I2C_Master_Transmit+0x1d8>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016e8:	f7ff fc54 	bl	8000f94 <HAL_GetTick>
 80016ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2319      	movs	r3, #25
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 f8f0 	bl	80018e0 <I2C_WaitOnFlagUntilTimeout>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0be      	b.n	8001888 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2221      	movs	r2, #33	; 0x21
 800170e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2210      	movs	r2, #16
 8001716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	893a      	ldrh	r2, [r7, #8]
 800172a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001736:	b29b      	uxth	r3, r3
 8001738:	2bff      	cmp	r3, #255	; 0xff
 800173a:	d90e      	bls.n	800175a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	22ff      	movs	r2, #255	; 0xff
 8001740:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	b2da      	uxtb	r2, r3
 8001748:	8979      	ldrh	r1, [r7, #10]
 800174a:	4b51      	ldr	r3, [pc, #324]	; (8001890 <HAL_I2C_Master_Transmit+0x1e0>)
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 f9f6 	bl	8001b44 <I2C_TransferConfig>
 8001758:	e06c      	b.n	8001834 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001768:	b2da      	uxtb	r2, r3
 800176a:	8979      	ldrh	r1, [r7, #10]
 800176c:	4b48      	ldr	r3, [pc, #288]	; (8001890 <HAL_I2C_Master_Transmit+0x1e0>)
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 f9e5 	bl	8001b44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800177a:	e05b      	b.n	8001834 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	6a39      	ldr	r1, [r7, #32]
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 f8ed 	bl	8001960 <I2C_WaitOnTXISFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e07b      	b.n	8001888 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d034      	beq.n	8001834 <HAL_I2C_Master_Transmit+0x184>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d130      	bne.n	8001834 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	2200      	movs	r2, #0
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f87f 	bl	80018e0 <I2C_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e04d      	b.n	8001888 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d90e      	bls.n	8001814 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	22ff      	movs	r2, #255	; 0xff
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	b2da      	uxtb	r2, r3
 8001802:	8979      	ldrh	r1, [r7, #10]
 8001804:	2300      	movs	r3, #0
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f999 	bl	8001b44 <I2C_TransferConfig>
 8001812:	e00f      	b.n	8001834 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001822:	b2da      	uxtb	r2, r3
 8001824:	8979      	ldrh	r1, [r7, #10]
 8001826:	2300      	movs	r3, #0
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f988 	bl	8001b44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d19e      	bne.n	800177c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	6a39      	ldr	r1, [r7, #32]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f8cc 	bl	80019e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e01a      	b.n	8001888 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2220      	movs	r2, #32
 8001858:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_I2C_Master_Transmit+0x1e4>)
 8001866:	400b      	ands	r3, r1
 8001868:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001886:	2302      	movs	r3, #2
  }
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	80002000 	.word	0x80002000
 8001894:	fe00e800 	.word	0xfe00e800

08001898 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d103      	bne.n	80018b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d007      	beq.n	80018d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	619a      	str	r2, [r3, #24]
  }
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f0:	e022      	b.n	8001938 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018f8:	d01e      	beq.n	8001938 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fa:	f7ff fb4b 	bl	8000f94 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d302      	bcc.n	8001910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d113      	bne.n	8001938 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e00f      	b.n	8001958 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	4013      	ands	r3, r2
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	429a      	cmp	r2, r3
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	429a      	cmp	r2, r3
 8001954:	d0cd      	beq.n	80018f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800196c:	e02c      	b.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f870 	bl	8001a58 <I2C_IsAcknowledgeFailed>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e02a      	b.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001988:	d01e      	beq.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198a:	f7ff fb03 	bl	8000f94 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	429a      	cmp	r2, r3
 8001998:	d302      	bcc.n	80019a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d113      	bne.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e007      	b.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d1cb      	bne.n	800196e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ec:	e028      	b.n	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f830 	bl	8001a58 <I2C_IsAcknowledgeFailed>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e026      	b.n	8001a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a02:	f7ff fac7 	bl	8000f94 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d302      	bcc.n	8001a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d113      	bne.n	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	f043 0220 	orr.w	r2, r3, #32
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e007      	b.n	8001a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d1cf      	bne.n	80019ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d161      	bne.n	8001b36 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a80:	d02b      	beq.n	8001ada <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a90:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a92:	e022      	b.n	8001ada <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a9a:	d01e      	beq.n	8001ada <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9c:	f7ff fa7a 	bl	8000f94 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d302      	bcc.n	8001ab2 <I2C_IsAcknowledgeFailed+0x5a>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d113      	bne.n	8001ada <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f043 0220 	orr.w	r2, r3, #32
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e02e      	b.n	8001b38 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	d1d5      	bne.n	8001a94 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2210      	movs	r2, #16
 8001aee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2220      	movs	r2, #32
 8001af6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fecd 	bl	8001898 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <I2C_IsAcknowledgeFailed+0xe8>)
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f043 0204 	orr.w	r2, r3, #4
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	fe00e800 	.word	0xfe00e800

08001b44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	817b      	strh	r3, [r7, #10]
 8001b52:	4613      	mov	r3, r2
 8001b54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	0d5b      	lsrs	r3, r3, #21
 8001b60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <I2C_TransferConfig+0x58>)
 8001b66:	430b      	orrs	r3, r1
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	ea02 0103 	and.w	r1, r2, r3
 8001b6e:	897b      	ldrh	r3, [r7, #10]
 8001b70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b74:	7a7b      	ldrb	r3, [r7, #9]
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	03ff63ff 	.word	0x03ff63ff

08001ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d138      	bne.n	8001c28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e032      	b.n	8001c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e000      	b.n	8001c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c28:	2302      	movs	r3, #2
  }
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d139      	bne.n	8001cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e033      	b.n	8001cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2224      	movs	r2, #36	; 0x24
 8001c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cc0:	2302      	movs	r3, #2
  }
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f001 b823 	b.w	8002d3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 817d 	beq.w	8002006 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d0c:	4bbc      	ldr	r3, [pc, #752]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d00c      	beq.n	8001d32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d18:	4bb9      	ldr	r3, [pc, #740]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d15c      	bne.n	8001dde <HAL_RCC_OscConfig+0x10e>
 8001d24:	4bb6      	ldr	r3, [pc, #728]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d155      	bne.n	8001dde <HAL_RCC_OscConfig+0x10e>
 8001d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	095b      	lsrs	r3, r3, #5
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_OscConfig+0x94>
 8001d5e:	4ba8      	ldr	r3, [pc, #672]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	e015      	b.n	8001d90 <HAL_RCC_OscConfig+0xc0>
 8001d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d8c:	4b9c      	ldr	r3, [pc, #624]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d94:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001d98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d9c:	fa92 f2a2 	rbit	r2, r2
 8001da0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001da4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001da8:	fab2 f282 	clz	r2, r2
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f002 021f 	and.w	r2, r2, #31
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 811f 	beq.w	8002004 <HAL_RCC_OscConfig+0x334>
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 8116 	bne.w	8002004 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f000 bfaf 	b.w	8002d3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x12e>
 8001df0:	4b83      	ldr	r3, [pc, #524]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a82      	ldr	r2, [pc, #520]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e036      	b.n	8001e6c <HAL_RCC_OscConfig+0x19c>
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x158>
 8001e0e:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a7b      	ldr	r2, [pc, #492]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a78      	ldr	r2, [pc, #480]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e021      	b.n	8001e6c <HAL_RCC_OscConfig+0x19c>
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x184>
 8001e3a:	4b71      	ldr	r3, [pc, #452]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a70      	ldr	r2, [pc, #448]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b6e      	ldr	r3, [pc, #440]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6d      	ldr	r2, [pc, #436]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0x19c>
 8001e54:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6c:	4b64      	ldr	r3, [pc, #400]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	f023 020f 	bic.w	r2, r3, #15
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	495f      	ldr	r1, [pc, #380]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d059      	beq.n	8001f4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff f87d 	bl	8000f94 <HAL_GetTick>
 8001e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f878 	bl	8000f94 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	; 0x64
 8001eae:	d902      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f000 bf43 	b.w	8002d3c <HAL_RCC_OscConfig+0x106c>
 8001eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001eca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x218>
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e015      	b.n	8001f14 <HAL_RCC_OscConfig+0x244>
 8001ee8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f00:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f10:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f18:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f20:	fa92 f2a2 	rbit	r2, r2
 8001f24:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f2c:	fab2 f282 	clz	r2, r2
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	f042 0220 	orr.w	r2, r2, #32
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f002 021f 	and.w	r2, r2, #31
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ab      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x1d0>
 8001f48:	e05d      	b.n	8002006 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff f823 	bl	8000f94 <HAL_GetTick>
 8001f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff f81e 	bl	8000f94 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	; 0x64
 8001f62:	d902      	bls.n	8001f6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	f000 bee9 	b.w	8002d3c <HAL_RCC_OscConfig+0x106c>
 8001f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	095b      	lsrs	r3, r3, #5
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d102      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2cc>
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	e015      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2f8>
 8001f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fcc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001fd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fd4:	fa92 f2a2 	rbit	r2, r2
 8001fd8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001fdc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001fe0:	fab2 f282 	clz	r2, r2
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f042 0220 	orr.w	r2, r2, #32
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f002 021f 	and.w	r2, r2, #31
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ab      	bne.n	8001f54 <HAL_RCC_OscConfig+0x284>
 8001ffc:	e003      	b.n	8002006 <HAL_RCC_OscConfig+0x336>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 817d 	beq.w	8002316 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800201c:	4ba6      	ldr	r3, [pc, #664]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002028:	4ba3      	ldr	r3, [pc, #652]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d172      	bne.n	800211a <HAL_RCC_OscConfig+0x44a>
 8002034:	4ba0      	ldr	r3, [pc, #640]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d16c      	bne.n	800211a <HAL_RCC_OscConfig+0x44a>
 8002040:	2302      	movs	r3, #2
 8002042:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002052:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_RCC_OscConfig+0x3a0>
 800206a:	4b93      	ldr	r3, [pc, #588]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	e013      	b.n	8002098 <HAL_RCC_OscConfig+0x3c8>
 8002070:	2302      	movs	r3, #2
 8002072:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002082:	2302      	movs	r3, #2
 8002084:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002088:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002094:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	2202      	movs	r2, #2
 800209a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800209e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020a2:	fa92 f2a2 	rbit	r2, r2
 80020a6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCC_OscConfig+0x410>
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d002      	beq.n	80020e0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	f000 be2e 	b.w	8002d3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b75      	ldr	r3, [pc, #468]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	21f8      	movs	r1, #248	; 0xf8
 80020f6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020fe:	fa91 f1a1 	rbit	r1, r1
 8002102:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002106:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800210a:	fab1 f181 	clz	r1, r1
 800210e:	b2c9      	uxtb	r1, r1
 8002110:	408b      	lsls	r3, r1
 8002112:	4969      	ldr	r1, [pc, #420]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002118:	e0fd      	b.n	8002316 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8088 	beq.w	800223c <HAL_RCC_OscConfig+0x56c>
 800212c:	2301      	movs	r3, #1
 800212e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800213e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800214c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	461a      	mov	r2, r3
 8002154:	2301      	movs	r3, #1
 8002156:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe ff1c 	bl	8000f94 <HAL_GetTick>
 800215c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002162:	f7fe ff17 	bl	8000f94 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d902      	bls.n	8002178 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	f000 bde2 	b.w	8002d3c <HAL_RCC_OscConfig+0x106c>
 8002178:	2302      	movs	r3, #2
 800217a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800218a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d102      	bne.n	80021a8 <HAL_RCC_OscConfig+0x4d8>
 80021a2:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	e013      	b.n	80021d0 <HAL_RCC_OscConfig+0x500>
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021ba:	2302      	movs	r3, #2
 80021bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021cc:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2202      	movs	r2, #2
 80021d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021da:	fa92 f2a2 	rbit	r2, r2
 80021de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80021e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0af      	beq.n	8002162 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	21f8      	movs	r1, #248	; 0xf8
 8002218:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002220:	fa91 f1a1 	rbit	r1, r1
 8002224:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002228:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800222c:	fab1 f181 	clz	r1, r1
 8002230:	b2c9      	uxtb	r1, r1
 8002232:	408b      	lsls	r3, r1
 8002234:	4920      	ldr	r1, [pc, #128]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
 800223a:	e06c      	b.n	8002316 <HAL_RCC_OscConfig+0x646>
 800223c:	2301      	movs	r3, #1
 800223e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800224e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800225c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	461a      	mov	r2, r3
 8002264:	2300      	movs	r3, #0
 8002266:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fe94 	bl	8000f94 <HAL_GetTick>
 800226c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002272:	f7fe fe8f 	bl	8000f94 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d902      	bls.n	8002288 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	f000 bd5a 	b.w	8002d3c <HAL_RCC_OscConfig+0x106c>
 8002288:	2302      	movs	r3, #2
 800228a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800229a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d104      	bne.n	80022bc <HAL_RCC_OscConfig+0x5ec>
 80022b2:	4b01      	ldr	r3, [pc, #4]	; (80022b8 <HAL_RCC_OscConfig+0x5e8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	e015      	b.n	80022e4 <HAL_RCC_OscConfig+0x614>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022e0:	4bc8      	ldr	r3, [pc, #800]	; (8002604 <HAL_RCC_OscConfig+0x934>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2202      	movs	r2, #2
 80022e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80022ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022ee:	fa92 f2a2 	rbit	r2, r2
 80022f2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80022f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f042 0220 	orr.w	r2, r2, #32
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f002 021f 	and.w	r2, r2, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ad      	bne.n	8002272 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8110 	beq.w	800254c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d079      	beq.n	8002430 <HAL_RCC_OscConfig+0x760>
 800233c:	2301      	movs	r3, #1
 800233e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800234e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	4bab      	ldr	r3, [pc, #684]	; (8002608 <HAL_RCC_OscConfig+0x938>)
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	461a      	mov	r2, r3
 8002362:	2301      	movs	r3, #1
 8002364:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe fe15 	bl	8000f94 <HAL_GetTick>
 800236a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002370:	f7fe fe10 	bl	8000f94 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d902      	bls.n	8002386 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	f000 bcdb 	b.w	8002d3c <HAL_RCC_OscConfig+0x106c>
 8002386:	2302      	movs	r3, #2
 8002388:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023a0:	2202      	movs	r2, #2
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	fa93 f2a3 	rbit	r2, r3
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023c4:	2202      	movs	r2, #2
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e0:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x934>)
 80023e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023ec:	2102      	movs	r1, #2
 80023ee:	6019      	str	r1, [r3, #0]
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f1a3 	rbit	r1, r3
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002406:	6019      	str	r1, [r3, #0]
  return result;
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0a0      	beq.n	8002370 <HAL_RCC_OscConfig+0x6a0>
 800242e:	e08d      	b.n	800254c <HAL_RCC_OscConfig+0x87c>
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002452:	601a      	str	r2, [r3, #0]
  return result;
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800245c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x938>)
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	461a      	mov	r2, r3
 800246e:	2300      	movs	r3, #0
 8002470:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7fe fd8f 	bl	8000f94 <HAL_GetTick>
 8002476:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247a:	e00a      	b.n	8002492 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800247c:	f7fe fd8a 	bl	8000f94 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d902      	bls.n	8002492 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	f000 bc55 	b.w	8002d3c <HAL_RCC_OscConfig+0x106c>
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800249a:	2202      	movs	r2, #2
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f2a3 	rbit	r2, r3
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024be:	2202      	movs	r2, #2
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024e2:	2202      	movs	r2, #2
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_OscConfig+0x934>)
 8002500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800250a:	2102      	movs	r1, #2
 800250c:	6019      	str	r1, [r3, #0]
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f1a3 	rbit	r1, r3
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002524:	6019      	str	r1, [r3, #0]
  return result;
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d197      	bne.n	800247c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 81a1 	beq.w	80028a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCC_OscConfig+0x934>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d116      	bne.n	80025a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_RCC_OscConfig+0x934>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_RCC_OscConfig+0x934>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	61d3      	str	r3, [r2, #28]
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCC_OscConfig+0x934>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800259a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_OscConfig+0x93c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11a      	bne.n	80025e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <HAL_RCC_OscConfig+0x93c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_RCC_OscConfig+0x93c>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fceb 	bl	8000f94 <HAL_GetTick>
 80025be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	e009      	b.n	80025d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c4:	f7fe fce6 	bl	8000f94 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e3b1      	b.n	8002d3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_RCC_OscConfig+0x93c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ef      	beq.n	80025c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10d      	bne.n	8002610 <HAL_RCC_OscConfig+0x940>
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCC_OscConfig+0x934>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4a02      	ldr	r2, [pc, #8]	; (8002604 <HAL_RCC_OscConfig+0x934>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6213      	str	r3, [r2, #32]
 8002600:	e03c      	b.n	800267c <HAL_RCC_OscConfig+0x9ac>
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	10908120 	.word	0x10908120
 800260c:	40007000 	.word	0x40007000
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10c      	bne.n	800263a <HAL_RCC_OscConfig+0x96a>
 8002620:	4bc1      	ldr	r3, [pc, #772]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4ac0      	ldr	r2, [pc, #768]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	4bbe      	ldr	r3, [pc, #760]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4abd      	ldr	r2, [pc, #756]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	e020      	b.n	800267c <HAL_RCC_OscConfig+0x9ac>
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b05      	cmp	r3, #5
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x994>
 800264a:	4bb7      	ldr	r3, [pc, #732]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4ab6      	ldr	r2, [pc, #728]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6213      	str	r3, [r2, #32]
 8002656:	4bb4      	ldr	r3, [pc, #720]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4ab3      	ldr	r2, [pc, #716]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0x9ac>
 8002664:	4bb0      	ldr	r3, [pc, #704]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4aaf      	ldr	r2, [pc, #700]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	4bad      	ldr	r3, [pc, #692]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4aac      	ldr	r2, [pc, #688]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8081 	beq.w	8002790 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7fe fc81 	bl	8000f94 <HAL_GetTick>
 8002692:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7fe fc7c 	bl	8000f94 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e345      	b.n	8002d3c <HAL_RCC_OscConfig+0x106c>
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026b8:	2202      	movs	r2, #2
 80026ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026dc:	2202      	movs	r2, #2
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fa93 f2a3 	rbit	r2, r3
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026f6:	601a      	str	r2, [r3, #0]
  return result;
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002700:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d102      	bne.n	800271c <HAL_RCC_OscConfig+0xa4c>
 8002716:	4b84      	ldr	r3, [pc, #528]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	e013      	b.n	8002744 <HAL_RCC_OscConfig+0xa74>
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002724:	2202      	movs	r2, #2
 8002726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	4b79      	ldr	r3, [pc, #484]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002748:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800274c:	2102      	movs	r1, #2
 800274e:	6011      	str	r1, [r2, #0]
 8002750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002754:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	fa92 f1a2 	rbit	r1, r2
 800275e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002762:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002766:	6011      	str	r1, [r2, #0]
  return result;
 8002768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800276c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	fab2 f282 	clz	r2, r2
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f002 021f 	and.w	r2, r2, #31
 8002782:	2101      	movs	r1, #1
 8002784:	fa01 f202 	lsl.w	r2, r1, r2
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d084      	beq.n	8002698 <HAL_RCC_OscConfig+0x9c8>
 800278e:	e07f      	b.n	8002890 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7fe fc00 	bl	8000f94 <HAL_GetTick>
 8002794:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00b      	b.n	80027b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe fbfb 	bl	8000f94 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e2c4      	b.n	8002d3c <HAL_RCC_OscConfig+0x106c>
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027ba:	2202      	movs	r2, #2
 80027bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027de:	2202      	movs	r2, #2
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027f8:	601a      	str	r2, [r3, #0]
  return result;
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002802:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d102      	bne.n	800281e <HAL_RCC_OscConfig+0xb4e>
 8002818:	4b43      	ldr	r3, [pc, #268]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	e013      	b.n	8002846 <HAL_RCC_OscConfig+0xb76>
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002826:	2202      	movs	r2, #2
 8002828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fa93 f2a3 	rbit	r2, r3
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800284a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800284e:	2102      	movs	r1, #2
 8002850:	6011      	str	r1, [r2, #0]
 8002852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002856:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	fa92 f1a2 	rbit	r1, r2
 8002860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002864:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002868:	6011      	str	r1, [r2, #0]
  return result;
 800286a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	fab2 f282 	clz	r2, r2
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f002 021f 	and.w	r2, r2, #31
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f202 	lsl.w	r2, r1, r2
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d184      	bne.n	800279a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002890:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002898:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8242 	beq.w	8002d3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_RCC_OscConfig+0xc58>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b08      	cmp	r3, #8
 80028c0:	f000 8213 	beq.w	8002cea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	f040 8162 	bne.w	8002b9a <HAL_RCC_OscConfig+0xeca>
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028fa:	601a      	str	r2, [r3, #0]
  return result;
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002904:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002910:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	461a      	mov	r2, r3
 8002918:	2300      	movs	r3, #0
 800291a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fb3a 	bl	8000f94 <HAL_GetTick>
 8002920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	e00c      	b.n	8002940 <HAL_RCC_OscConfig+0xc70>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fb32 	bl	8000f94 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e1fd      	b.n	8002d3c <HAL_RCC_OscConfig+0x106c>
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800294c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	fa93 f2a3 	rbit	r2, r3
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002964:	601a      	str	r2, [r3, #0]
  return result;
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800296e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_RCC_OscConfig+0xcba>
 8002984:	4bb0      	ldr	r3, [pc, #704]	; (8002c48 <HAL_RCC_OscConfig+0xf78>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e027      	b.n	80029da <HAL_RCC_OscConfig+0xd0a>
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fa93 f2a3 	rbit	r2, r3
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	4b9c      	ldr	r3, [pc, #624]	; (8002c48 <HAL_RCC_OscConfig+0xf78>)
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029de:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029e6:	6011      	str	r1, [r2, #0]
 80029e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	fa92 f1a2 	rbit	r1, r2
 80029f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029fa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029fe:	6011      	str	r1, [r2, #0]
  return result;
 8002a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a04:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0220 	orr.w	r2, r2, #32
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d182      	bne.n	800292c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0xf78>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	430b      	orrs	r3, r1
 8002a48:	497f      	ldr	r1, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0xf78>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a72:	601a      	str	r2, [r3, #0]
  return result;
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a7c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2301      	movs	r3, #1
 8002a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fa7e 	bl	8000f94 <HAL_GetTick>
 8002a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7fe fa79 	bl	8000f94 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e144      	b.n	8002d3c <HAL_RCC_OscConfig+0x106c>
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fa93 f2a3 	rbit	r2, r3
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ad6:	601a      	str	r2, [r3, #0]
  return result;
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ae0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_OscConfig+0xe2c>
 8002af6:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <HAL_RCC_OscConfig+0xf78>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e027      	b.n	8002b4c <HAL_RCC_OscConfig+0xe7c>
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_OscConfig+0xf78>)
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b50:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b58:	6011      	str	r1, [r2, #0]
 8002b5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b5e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	fa92 f1a2 	rbit	r1, r2
 8002b68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b6c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b70:	6011      	str	r1, [r2, #0]
  return result;
 8002b72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	fab2 f282 	clz	r2, r2
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f002 021f 	and.w	r2, r2, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d082      	beq.n	8002a9e <HAL_RCC_OscConfig+0xdce>
 8002b98:	e0cf      	b.n	8002d3a <HAL_RCC_OscConfig+0x106a>
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ba2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	fa93 f2a3 	rbit	r2, r3
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bbe:	601a      	str	r2, [r3, #0]
  return result;
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2300      	movs	r3, #0
 8002bde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe f9d8 	bl	8000f94 <HAL_GetTick>
 8002be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be8:	e009      	b.n	8002bfe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe f9d3 	bl	8000f94 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e09e      	b.n	8002d3c <HAL_RCC_OscConfig+0x106c>
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c22:	601a      	str	r2, [r3, #0]
  return result;
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d104      	bne.n	8002c4c <HAL_RCC_OscConfig+0xf7c>
 8002c42:	4b01      	ldr	r3, [pc, #4]	; (8002c48 <HAL_RCC_OscConfig+0xf78>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e029      	b.n	8002c9c <HAL_RCC_OscConfig+0xfcc>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	fa93 f2a3 	rbit	r2, r3
 8002c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c76:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <HAL_RCC_OscConfig+0x1078>)
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ca0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ca4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ca8:	6011      	str	r1, [r2, #0]
 8002caa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	fa92 f1a2 	rbit	r1, r2
 8002cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cbc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cc0:	6011      	str	r1, [r2, #0]
  return result;
 8002cc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	fab2 f282 	clz	r2, r2
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f042 0220 	orr.w	r2, r2, #32
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f002 021f 	and.w	r2, r2, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d180      	bne.n	8002bea <HAL_RCC_OscConfig+0xf1a>
 8002ce8:	e027      	b.n	8002d3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e01e      	b.n	8002d3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_RCC_OscConfig+0x1078>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d0a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d10b      	bne.n	8002d36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000

08002d4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b09e      	sub	sp, #120	; 0x78
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e162      	b.n	800302a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b90      	ldr	r3, [pc, #576]	; (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d910      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b8d      	ldr	r3, [pc, #564]	; (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 0207 	bic.w	r2, r3, #7
 8002d7a:	498b      	ldr	r1, [pc, #556]	; (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b89      	ldr	r3, [pc, #548]	; (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e14a      	b.n	800302a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da0:	4b82      	ldr	r3, [pc, #520]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	497f      	ldr	r1, [pc, #508]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80dc 	beq.w	8002f78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d13c      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xf6>
 8002dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dcc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xa6>
 8002dec:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	e00f      	b.n	8002e12 <HAL_RCC_ClockConfig+0xc6>
 8002df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	667b      	str	r3, [r7, #100]	; 0x64
 8002e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e04:	663b      	str	r3, [r7, #96]	; 0x60
 8002e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e0e:	4b67      	ldr	r3, [pc, #412]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e16:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e1a:	fa92 f2a2 	rbit	r2, r2
 8002e1e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e22:	fab2 f282 	clz	r2, r2
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	f042 0220 	orr.w	r2, r2, #32
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	f002 021f 	and.w	r2, r2, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f202 	lsl.w	r2, r1, r2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d17b      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0f3      	b.n	800302a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d13c      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x178>
 8002e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d102      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x128>
 8002e6e:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e00f      	b.n	8002e94 <HAL_RCC_ClockConfig+0x148>
 8002e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	647b      	str	r3, [r7, #68]	; 0x44
 8002e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
 8002e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e98:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e9c:	fa92 f2a2 	rbit	r2, r2
 8002ea0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ea4:	fab2 f282 	clz	r2, r2
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f042 0220 	orr.w	r2, r2, #32
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f002 021f 	and.w	r2, r2, #31
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d13a      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b2      	b.n	800302a <HAL_RCC_ClockConfig+0x2de>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d102      	bne.n	8002eec <HAL_RCC_ClockConfig+0x1a0>
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	e00d      	b.n	8002f08 <HAL_RCC_ClockConfig+0x1bc>
 8002eec:	2302      	movs	r3, #2
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef8:	2302      	movs	r3, #2
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	2202      	movs	r2, #2
 8002f0a:	61ba      	str	r2, [r7, #24]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	fa92 f2a2 	rbit	r2, r2
 8002f12:	617a      	str	r2, [r7, #20]
  return result;
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	fab2 f282 	clz	r2, r2
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f042 0220 	orr.w	r2, r2, #32
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f002 021f 	and.w	r2, r2, #31
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e079      	b.n	800302a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	491a      	ldr	r1, [pc, #104]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f48:	f7fe f824 	bl	8000f94 <HAL_GetTick>
 8002f4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fe f820 	bl	8000f94 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e061      	b.n	800302a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_RCC_ClockConfig+0x260>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d214      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 0207 	bic.w	r2, r3, #7
 8002f8e:	4906      	ldr	r1, [pc, #24]	; (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <HAL_RCC_ClockConfig+0x25c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e040      	b.n	800302a <HAL_RCC_ClockConfig+0x2de>
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_RCC_ClockConfig+0x2e8>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	491a      	ldr	r1, [pc, #104]	; (8003034 <HAL_RCC_ClockConfig+0x2e8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <HAL_RCC_ClockConfig+0x2e8>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4912      	ldr	r1, [pc, #72]	; (8003034 <HAL_RCC_ClockConfig+0x2e8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fee:	f000 f829 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <HAL_RCC_ClockConfig+0x2e8>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ffc:	22f0      	movs	r2, #240	; 0xf0
 8002ffe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	fa92 f2a2 	rbit	r2, r2
 8003006:	60fa      	str	r2, [r7, #12]
  return result;
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	fab2 f282 	clz	r2, r2
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	40d3      	lsrs	r3, r2
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x2ec>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	fa21 f303 	lsr.w	r3, r1, r3
 800301a:	4a08      	ldr	r2, [pc, #32]	; (800303c <HAL_RCC_ClockConfig+0x2f0>)
 800301c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <HAL_RCC_ClockConfig+0x2f4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd ff72 	bl	8000f0c <HAL_InitTick>
  
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3778      	adds	r7, #120	; 0x78
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	08005560 	.word	0x08005560
 800303c:	20000000 	.word	0x20000000
 8003040:	20000004 	.word	0x20000004

08003044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b08b      	sub	sp, #44	; 0x2c
 8003048:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800305e:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b04      	cmp	r3, #4
 800306c:	d002      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x30>
 800306e:	2b08      	cmp	r3, #8
 8003070:	d003      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x36>
 8003072:	e03c      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003076:	623b      	str	r3, [r7, #32]
      break;
 8003078:	e03c      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003080:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003084:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	fa92 f2a2 	rbit	r2, r2
 800308c:	607a      	str	r2, [r7, #4]
  return result;
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	fab2 f282 	clz	r2, r2
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	40d3      	lsrs	r3, r2
 8003098:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_RCC_GetSysClockFreq+0xc8>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	220f      	movs	r2, #15
 80030a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	fa92 f2a2 	rbit	r2, r2
 80030b0:	60fa      	str	r2, [r7, #12]
  return result;
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	40d3      	lsrs	r3, r2
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030cc:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
 80030dc:	e004      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	623b      	str	r3, [r7, #32]
      break;
 80030ec:	e002      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030f0:	623b      	str	r3, [r7, #32]
      break;
 80030f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	372c      	adds	r7, #44	; 0x2c
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	007a1200 	.word	0x007a1200
 800310c:	08005578 	.word	0x08005578
 8003110:	08005588 	.word	0x08005588
 8003114:	003d0900 	.word	0x003d0900

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <HAL_RCC_GetHCLKFreq+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000000 	.word	0x20000000

08003130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003136:	f7ff ffef 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 800313a:	4601      	mov	r1, r0
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003144:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003148:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	fa92 f2a2 	rbit	r2, r2
 8003150:	603a      	str	r2, [r7, #0]
  return result;
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	fab2 f282 	clz	r2, r2
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	40d3      	lsrs	r3, r2
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_RCC_GetPCLK1Freq+0x40>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	08005570 	.word	0x08005570

08003174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800317a:	f7ff ffcd 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 800317e:	4601      	mov	r1, r0
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003188:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800318c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	fa92 f2a2 	rbit	r2, r2
 8003194:	603a      	str	r2, [r7, #0]
  return result;
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	fab2 f282 	clz	r2, r2
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	40d3      	lsrs	r3, r2
 80031a0:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80031a2:	5cd3      	ldrb	r3, [r2, r3]
 80031a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08005570 	.word	0x08005570

080031b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b092      	sub	sp, #72	; 0x48
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 80cd 	beq.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031dc:	4b8e      	ldr	r3, [pc, #568]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10e      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	4b8b      	ldr	r3, [pc, #556]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	4a8a      	ldr	r2, [pc, #552]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	61d3      	str	r3, [r2, #28]
 80031f4:	4b88      	ldr	r3, [pc, #544]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003200:	2301      	movs	r3, #1
 8003202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003206:	4b85      	ldr	r3, [pc, #532]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d118      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003212:	4b82      	ldr	r3, [pc, #520]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a81      	ldr	r2, [pc, #516]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321e:	f7fd feb9 	bl	8000f94 <HAL_GetTick>
 8003222:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003224:	e008      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003226:	f7fd feb5 	bl	8000f94 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b64      	cmp	r3, #100	; 0x64
 8003232:	d901      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0ea      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	4b78      	ldr	r3, [pc, #480]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003244:	4b74      	ldr	r3, [pc, #464]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d07d      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800325e:	429a      	cmp	r2, r3
 8003260:	d076      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003262:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	4b66      	ldr	r3, [pc, #408]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	461a      	mov	r2, r3
 800328c:	2301      	movs	r3, #1
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800329e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b5d      	ldr	r3, [pc, #372]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	461a      	mov	r2, r3
 80032b0:	2300      	movs	r3, #0
 80032b2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d045      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fd fe66 	bl	8000f94 <HAL_GetTick>
 80032c8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fd fe62 	bl	8000f94 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e095      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80032e2:	2302      	movs	r3, #2
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
 80032ee:	2302      	movs	r3, #2
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	61fb      	str	r3, [r7, #28]
  return result;
 80032fa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f043 0302 	orr.w	r3, r3, #2
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d102      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003310:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	e007      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003316:	2302      	movs	r3, #2
 8003318:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2202      	movs	r2, #2
 8003328:	613a      	str	r2, [r7, #16]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	fa92 f2a2 	rbit	r2, r2
 8003330:	60fa      	str	r2, [r7, #12]
  return result;
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	fab2 f282 	clz	r2, r2
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f002 021f 	and.w	r2, r2, #31
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f202 	lsl.w	r2, r1, r2
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0bd      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003350:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	492e      	ldr	r1, [pc, #184]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	4313      	orrs	r3, r2
 8003360:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003362:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003374:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003382:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f023 0203 	bic.w	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4922      	ldr	r1, [pc, #136]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003390:	4313      	orrs	r3, r2
 8003392:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f023 0210 	bic.w	r2, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	491a      	ldr	r1, [pc, #104]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	4913      	ldr	r1, [pc, #76]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	490b      	ldr	r1, [pc, #44]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	4904      	ldr	r1, [pc, #16]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	4313      	orrs	r3, r2
 800340a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3748      	adds	r7, #72	; 0x48
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
 8003420:	10908100 	.word	0x10908100

08003424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e049      	b.n	80034ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd fc68 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f000 fbca 	bl	8003bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e049      	b.n	8003578 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d106      	bne.n	80034fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f841 	bl	8003580 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f000 fb73 	bl	8003bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_TIM_PWM_Start+0x24>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e03c      	b.n	8003632 <HAL_TIM_PWM_Start+0x9e>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d109      	bne.n	80035d2 <HAL_TIM_PWM_Start+0x3e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	bf14      	ite	ne
 80035ca:	2301      	movne	r3, #1
 80035cc:	2300      	moveq	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	e02f      	b.n	8003632 <HAL_TIM_PWM_Start+0x9e>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d109      	bne.n	80035ec <HAL_TIM_PWM_Start+0x58>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e022      	b.n	8003632 <HAL_TIM_PWM_Start+0x9e>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d109      	bne.n	8003606 <HAL_TIM_PWM_Start+0x72>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	e015      	b.n	8003632 <HAL_TIM_PWM_Start+0x9e>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b10      	cmp	r3, #16
 800360a:	d109      	bne.n	8003620 <HAL_TIM_PWM_Start+0x8c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e008      	b.n	8003632 <HAL_TIM_PWM_Start+0x9e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e088      	b.n	800374c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0xb6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003648:	e023      	b.n	8003692 <HAL_TIM_PWM_Start+0xfe>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d104      	bne.n	800365a <HAL_TIM_PWM_Start+0xc6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003658:	e01b      	b.n	8003692 <HAL_TIM_PWM_Start+0xfe>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d104      	bne.n	800366a <HAL_TIM_PWM_Start+0xd6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003668:	e013      	b.n	8003692 <HAL_TIM_PWM_Start+0xfe>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	d104      	bne.n	800367a <HAL_TIM_PWM_Start+0xe6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003678:	e00b      	b.n	8003692 <HAL_TIM_PWM_Start+0xfe>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b10      	cmp	r3, #16
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_Start+0xf6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003688:	e003      	b.n	8003692 <HAL_TIM_PWM_Start+0xfe>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2201      	movs	r2, #1
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fdcc 	bl	8004238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2b      	ldr	r2, [pc, #172]	; (8003754 <HAL_TIM_PWM_Start+0x1c0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x134>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <HAL_TIM_PWM_Start+0x1c4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x134>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a28      	ldr	r2, [pc, #160]	; (800375c <HAL_TIM_PWM_Start+0x1c8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x134>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a27      	ldr	r2, [pc, #156]	; (8003760 <HAL_TIM_PWM_Start+0x1cc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_TIM_PWM_Start+0x138>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_TIM_PWM_Start+0x13a>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <HAL_TIM_PWM_Start+0x1c0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_TIM_PWM_Start+0x176>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f4:	d009      	beq.n	800370a <HAL_TIM_PWM_Start+0x176>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <HAL_TIM_PWM_Start+0x1d0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_TIM_PWM_Start+0x176>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a14      	ldr	r2, [pc, #80]	; (8003758 <HAL_TIM_PWM_Start+0x1c4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d115      	bne.n	8003736 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_TIM_PWM_Start+0x1d4>)
 8003712:	4013      	ands	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b06      	cmp	r3, #6
 800371a:	d015      	beq.n	8003748 <HAL_TIM_PWM_Start+0x1b4>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003722:	d011      	beq.n	8003748 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003734:	e008      	b.n	8003748 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e000      	b.n	800374a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003748:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40014000 	.word	0x40014000
 800375c:	40014400 	.word	0x40014400
 8003760:	40014800 	.word	0x40014800
 8003764:	40000400 	.word	0x40000400
 8003768:	00010007 	.word	0x00010007

0800376c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e097      	b.n	80038b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fd fa81 	bl	8000c9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80037b0:	f023 0307 	bic.w	r3, r3, #7
 80037b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f000 fa1b 	bl	8003bfc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	4313      	orrs	r3, r2
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800380c:	f023 030c 	bic.w	r3, r3, #12
 8003810:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003818:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800381c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	4313      	orrs	r3, r2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	011a      	lsls	r2, r3, #4
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	031b      	lsls	r3, r3, #12
 800383c:	4313      	orrs	r3, r2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003852:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4313      	orrs	r3, r2
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d110      	bne.n	800390a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ee:	7b7b      	ldrb	r3, [r7, #13]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e069      	b.n	80039cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003908:	e031      	b.n	800396e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d110      	bne.n	8003932 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003910:	7bbb      	ldrb	r3, [r7, #14]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d102      	bne.n	800391c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003916:	7b3b      	ldrb	r3, [r7, #12]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d001      	beq.n	8003920 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e055      	b.n	80039cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003930:	e01d      	b.n	800396e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d108      	bne.n	800394a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003938:	7bbb      	ldrb	r3, [r7, #14]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d105      	bne.n	800394a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800393e:	7b7b      	ldrb	r3, [r7, #13]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d102      	bne.n	800394a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003944:	7b3b      	ldrb	r3, [r7, #12]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d001      	beq.n	800394e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e03e      	b.n	80039cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_TIM_Encoder_Start+0xc4>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b04      	cmp	r3, #4
 8003978:	d008      	beq.n	800398c <HAL_TIM_Encoder_Start+0xd4>
 800397a:	e00f      	b.n	800399c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fc57 	bl	8004238 <TIM_CCxChannelCmd>
      break;
 800398a:	e016      	b.n	80039ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	2104      	movs	r1, #4
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fc4f 	bl	8004238 <TIM_CCxChannelCmd>
      break;
 800399a:	e00e      	b.n	80039ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2201      	movs	r2, #1
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fc47 	bl	8004238 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2201      	movs	r2, #1
 80039b0:	2104      	movs	r1, #4
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fc40 	bl	8004238 <TIM_CCxChannelCmd>
      break;
 80039b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e0ff      	b.n	8003bf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b14      	cmp	r3, #20
 80039fe:	f200 80f0 	bhi.w	8003be2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a5d 	.word	0x08003a5d
 8003a0c:	08003be3 	.word	0x08003be3
 8003a10:	08003be3 	.word	0x08003be3
 8003a14:	08003be3 	.word	0x08003be3
 8003a18:	08003a9d 	.word	0x08003a9d
 8003a1c:	08003be3 	.word	0x08003be3
 8003a20:	08003be3 	.word	0x08003be3
 8003a24:	08003be3 	.word	0x08003be3
 8003a28:	08003adf 	.word	0x08003adf
 8003a2c:	08003be3 	.word	0x08003be3
 8003a30:	08003be3 	.word	0x08003be3
 8003a34:	08003be3 	.word	0x08003be3
 8003a38:	08003b1f 	.word	0x08003b1f
 8003a3c:	08003be3 	.word	0x08003be3
 8003a40:	08003be3 	.word	0x08003be3
 8003a44:	08003be3 	.word	0x08003be3
 8003a48:	08003b61 	.word	0x08003b61
 8003a4c:	08003be3 	.word	0x08003be3
 8003a50:	08003be3 	.word	0x08003be3
 8003a54:	08003be3 	.word	0x08003be3
 8003a58:	08003ba1 	.word	0x08003ba1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f942 	bl	8003cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	619a      	str	r2, [r3, #24]
      break;
 8003a9a:	e0a5      	b.n	8003be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f9a8 	bl	8003df8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	619a      	str	r2, [r3, #24]
      break;
 8003adc:	e084      	b.n	8003be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa07 	bl	8003ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0208 	orr.w	r2, r2, #8
 8003af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0204 	bic.w	r2, r2, #4
 8003b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69d9      	ldr	r1, [r3, #28]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	61da      	str	r2, [r3, #28]
      break;
 8003b1c:	e064      	b.n	8003be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fa65 	bl	8003ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	021a      	lsls	r2, r3, #8
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]
      break;
 8003b5e:	e043      	b.n	8003be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 faa8 	bl	80040bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0208 	orr.w	r2, r2, #8
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0204 	bic.w	r2, r2, #4
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b9e:	e023      	b.n	8003be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fae6 	bl	8004178 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	021a      	lsls	r2, r3, #8
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003be0:	e002      	b.n	8003be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
      break;
 8003be6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop

08003bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a32      	ldr	r2, [pc, #200]	; (8003cd8 <TIM_Base_SetConfig+0xdc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d007      	beq.n	8003c24 <TIM_Base_SetConfig+0x28>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1a:	d003      	beq.n	8003c24 <TIM_Base_SetConfig+0x28>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <TIM_Base_SetConfig+0xe0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d108      	bne.n	8003c36 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <TIM_Base_SetConfig+0xdc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <TIM_Base_SetConfig+0x6a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c44:	d00f      	beq.n	8003c66 <TIM_Base_SetConfig+0x6a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <TIM_Base_SetConfig+0xe0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00b      	beq.n	8003c66 <TIM_Base_SetConfig+0x6a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <TIM_Base_SetConfig+0xe4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d007      	beq.n	8003c66 <TIM_Base_SetConfig+0x6a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <TIM_Base_SetConfig+0xe8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_Base_SetConfig+0x6a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <TIM_Base_SetConfig+0xec>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <TIM_Base_SetConfig+0xdc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00b      	beq.n	8003cbc <TIM_Base_SetConfig+0xc0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <TIM_Base_SetConfig+0xe4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d007      	beq.n	8003cbc <TIM_Base_SetConfig+0xc0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a0d      	ldr	r2, [pc, #52]	; (8003ce4 <TIM_Base_SetConfig+0xe8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_Base_SetConfig+0xc0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a0c      	ldr	r2, [pc, #48]	; (8003ce8 <TIM_Base_SetConfig+0xec>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d103      	bne.n	8003cc4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	615a      	str	r2, [r3, #20]
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800

08003cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f023 0302 	bic.w	r3, r3, #2
 8003d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <TIM_OC1_SetConfig+0xfc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <TIM_OC1_SetConfig+0x78>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a27      	ldr	r2, [pc, #156]	; (8003dec <TIM_OC1_SetConfig+0x100>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <TIM_OC1_SetConfig+0x78>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <TIM_OC1_SetConfig+0x104>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <TIM_OC1_SetConfig+0x78>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a25      	ldr	r2, [pc, #148]	; (8003df4 <TIM_OC1_SetConfig+0x108>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d10c      	bne.n	8003d7e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f023 0308 	bic.w	r3, r3, #8
 8003d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 0304 	bic.w	r3, r3, #4
 8003d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a19      	ldr	r2, [pc, #100]	; (8003de8 <TIM_OC1_SetConfig+0xfc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <TIM_OC1_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a18      	ldr	r2, [pc, #96]	; (8003dec <TIM_OC1_SetConfig+0x100>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <TIM_OC1_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <TIM_OC1_SetConfig+0x104>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d003      	beq.n	8003d9e <TIM_OC1_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <TIM_OC1_SetConfig+0x108>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d111      	bne.n	8003dc2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800

08003df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0210 	bic.w	r2, r3, #16
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0320 	bic.w	r3, r3, #32
 8003e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a24      	ldr	r2, [pc, #144]	; (8003ee8 <TIM_OC2_SetConfig+0xf0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10d      	bne.n	8003e78 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <TIM_OC2_SetConfig+0xf0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <TIM_OC2_SetConfig+0xa0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <TIM_OC2_SetConfig+0xf4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_OC2_SetConfig+0xa0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <TIM_OC2_SetConfig+0xf8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC2_SetConfig+0xa0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <TIM_OC2_SetConfig+0xfc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d113      	bne.n	8003ec0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e9e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ea6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40014800 	.word	0x40014800

08003ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0303 	bic.w	r3, r3, #3
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a23      	ldr	r2, [pc, #140]	; (8003fe4 <TIM_OC3_SetConfig+0xec>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10d      	bne.n	8003f76 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f74:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <TIM_OC3_SetConfig+0xec>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00b      	beq.n	8003f96 <TIM_OC3_SetConfig+0x9e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <TIM_OC3_SetConfig+0xf0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d007      	beq.n	8003f96 <TIM_OC3_SetConfig+0x9e>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a18      	ldr	r2, [pc, #96]	; (8003fec <TIM_OC3_SetConfig+0xf4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_OC3_SetConfig+0x9e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <TIM_OC3_SetConfig+0xf8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d113      	bne.n	8003fbe <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	621a      	str	r2, [r3, #32]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40014400 	.word	0x40014400
 8003ff0:	40014800 	.word	0x40014800

08003ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a16      	ldr	r2, [pc, #88]	; (80040ac <TIM_OC4_SetConfig+0xb8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00b      	beq.n	8004070 <TIM_OC4_SetConfig+0x7c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <TIM_OC4_SetConfig+0xbc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d007      	beq.n	8004070 <TIM_OC4_SetConfig+0x7c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a14      	ldr	r2, [pc, #80]	; (80040b4 <TIM_OC4_SetConfig+0xc0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <TIM_OC4_SetConfig+0x7c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <TIM_OC4_SetConfig+0xc4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d109      	bne.n	8004084 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	019b      	lsls	r3, r3, #6
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800

080040bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004100:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <TIM_OC5_SetConfig+0xac>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00b      	beq.n	800412e <TIM_OC5_SetConfig+0x72>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a14      	ldr	r2, [pc, #80]	; (800416c <TIM_OC5_SetConfig+0xb0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d007      	beq.n	800412e <TIM_OC5_SetConfig+0x72>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a13      	ldr	r2, [pc, #76]	; (8004170 <TIM_OC5_SetConfig+0xb4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d003      	beq.n	800412e <TIM_OC5_SetConfig+0x72>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a12      	ldr	r2, [pc, #72]	; (8004174 <TIM_OC5_SetConfig+0xb8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d109      	bne.n	8004142 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004134:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	621a      	str	r2, [r3, #32]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800

08004178 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	051b      	lsls	r3, r3, #20
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a16      	ldr	r2, [pc, #88]	; (8004228 <TIM_OC6_SetConfig+0xb0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00b      	beq.n	80041ec <TIM_OC6_SetConfig+0x74>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a15      	ldr	r2, [pc, #84]	; (800422c <TIM_OC6_SetConfig+0xb4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_OC6_SetConfig+0x74>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a14      	ldr	r2, [pc, #80]	; (8004230 <TIM_OC6_SetConfig+0xb8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_OC6_SetConfig+0x74>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <TIM_OC6_SetConfig+0xbc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d109      	bne.n	8004200 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	029b      	lsls	r3, r3, #10
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800

08004238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	2201      	movs	r2, #1
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	43db      	mvns	r3, r3
 800425a:	401a      	ands	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	fa01 f303 	lsl.w	r3, r1, r3
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004298:	2302      	movs	r3, #2
 800429a:	e054      	b.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a24      	ldr	r2, [pc, #144]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d108      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004304:	d009      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a13      	ldr	r2, [pc, #76]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10c      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40000400 	.word	0x40000400
 800435c:	40014000 	.word	0x40014000

08004360 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004378:	2302      	movs	r3, #2
 800437a:	e060      	b.n	800443e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a14      	ldr	r2, [pc, #80]	; (800444c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d115      	bne.n	800442c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	051b      	lsls	r3, r3, #20
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40012c00 	.word	0x40012c00

08004450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e040      	b.n	80044e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc fcc8 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2224      	movs	r2, #36	; 0x24
 800447c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8c0 	bl	8004614 <UART_SetConfig>
 8004494:	4603      	mov	r3, r0
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e022      	b.n	80044e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f9ea 	bl	8004880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fa71 	bl	80049c4 <UART_CheckIdleState>
 80044e2:	4603      	mov	r3, r0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004500:	2b20      	cmp	r3, #32
 8004502:	f040 8082 	bne.w	800460a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_UART_Transmit+0x26>
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e07a      	b.n	800460c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_UART_Transmit+0x38>
 8004520:	2302      	movs	r3, #2
 8004522:	e073      	b.n	800460c <HAL_UART_Transmit+0x120>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2221      	movs	r2, #33	; 0x21
 8004538:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800453a:	f7fc fd2b 	bl	8000f94 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004558:	d108      	bne.n	800456c <HAL_UART_Transmit+0x80>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e003      	b.n	8004574 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800457c:	e02d      	b.n	80045da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fa64 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e039      	b.n	800460c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	881a      	ldrh	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045aa:	b292      	uxth	r2, r2
 80045ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	3302      	adds	r3, #2
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	e008      	b.n	80045c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b292      	uxth	r2, r2
 80045c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1cb      	bne.n	800457e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2140      	movs	r1, #64	; 0x40
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fa30 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e005      	b.n	800460c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b8a      	ldr	r3, [pc, #552]	; (8004868 <UART_SetConfig+0x254>)
 8004640:	4013      	ands	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	6979      	ldr	r1, [r7, #20]
 8004648:	430b      	orrs	r3, r1
 800464a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a78      	ldr	r2, [pc, #480]	; (800486c <UART_SetConfig+0x258>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d120      	bne.n	80046d2 <UART_SetConfig+0xbe>
 8004690:	4b77      	ldr	r3, [pc, #476]	; (8004870 <UART_SetConfig+0x25c>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b03      	cmp	r3, #3
 800469a:	d817      	bhi.n	80046cc <UART_SetConfig+0xb8>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <UART_SetConfig+0x90>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046c1 	.word	0x080046c1
 80046ac:	080046c7 	.word	0x080046c7
 80046b0:	080046bb 	.word	0x080046bb
 80046b4:	2300      	movs	r3, #0
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e01d      	b.n	80046f6 <UART_SetConfig+0xe2>
 80046ba:	2302      	movs	r3, #2
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e01a      	b.n	80046f6 <UART_SetConfig+0xe2>
 80046c0:	2304      	movs	r3, #4
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e017      	b.n	80046f6 <UART_SetConfig+0xe2>
 80046c6:	2308      	movs	r3, #8
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	e014      	b.n	80046f6 <UART_SetConfig+0xe2>
 80046cc:	2310      	movs	r3, #16
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e011      	b.n	80046f6 <UART_SetConfig+0xe2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a67      	ldr	r2, [pc, #412]	; (8004874 <UART_SetConfig+0x260>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d102      	bne.n	80046e2 <UART_SetConfig+0xce>
 80046dc:	2300      	movs	r3, #0
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e009      	b.n	80046f6 <UART_SetConfig+0xe2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a64      	ldr	r2, [pc, #400]	; (8004878 <UART_SetConfig+0x264>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d102      	bne.n	80046f2 <UART_SetConfig+0xde>
 80046ec:	2300      	movs	r3, #0
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e001      	b.n	80046f6 <UART_SetConfig+0xe2>
 80046f2:	2310      	movs	r3, #16
 80046f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fe:	d15b      	bne.n	80047b8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004700:	7ffb      	ldrb	r3, [r7, #31]
 8004702:	2b08      	cmp	r3, #8
 8004704:	d827      	bhi.n	8004756 <UART_SetConfig+0x142>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0xf8>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004731 	.word	0x08004731
 8004710:	08004739 	.word	0x08004739
 8004714:	08004741 	.word	0x08004741
 8004718:	08004757 	.word	0x08004757
 800471c:	08004747 	.word	0x08004747
 8004720:	08004757 	.word	0x08004757
 8004724:	08004757 	.word	0x08004757
 8004728:	08004757 	.word	0x08004757
 800472c:	0800474f 	.word	0x0800474f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fe fcfe 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004734:	61b8      	str	r0, [r7, #24]
        break;
 8004736:	e013      	b.n	8004760 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004738:	f7fe fd1c 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 800473c:	61b8      	str	r0, [r7, #24]
        break;
 800473e:	e00f      	b.n	8004760 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004740:	4b4e      	ldr	r3, [pc, #312]	; (800487c <UART_SetConfig+0x268>)
 8004742:	61bb      	str	r3, [r7, #24]
        break;
 8004744:	e00c      	b.n	8004760 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004746:	f7fe fc7d 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 800474a:	61b8      	str	r0, [r7, #24]
        break;
 800474c:	e008      	b.n	8004760 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	61bb      	str	r3, [r7, #24]
        break;
 8004754:	e004      	b.n	8004760 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	77bb      	strb	r3, [r7, #30]
        break;
 800475e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d074      	beq.n	8004850 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	005a      	lsls	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	441a      	add	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	b29b      	uxth	r3, r3
 800477c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b0f      	cmp	r3, #15
 8004782:	d916      	bls.n	80047b2 <UART_SetConfig+0x19e>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478a:	d212      	bcs.n	80047b2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f023 030f 	bic.w	r3, r3, #15
 8004794:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	89fa      	ldrh	r2, [r7, #14]
 80047ae:	60da      	str	r2, [r3, #12]
 80047b0:	e04e      	b.n	8004850 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	77bb      	strb	r3, [r7, #30]
 80047b6:	e04b      	b.n	8004850 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047b8:	7ffb      	ldrb	r3, [r7, #31]
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d827      	bhi.n	800480e <UART_SetConfig+0x1fa>
 80047be:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x1b0>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	0800480f 	.word	0x0800480f
 80047d4:	080047ff 	.word	0x080047ff
 80047d8:	0800480f 	.word	0x0800480f
 80047dc:	0800480f 	.word	0x0800480f
 80047e0:	0800480f 	.word	0x0800480f
 80047e4:	08004807 	.word	0x08004807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e8:	f7fe fca2 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 80047ec:	61b8      	str	r0, [r7, #24]
        break;
 80047ee:	e013      	b.n	8004818 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7fe fcc0 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 80047f4:	61b8      	str	r0, [r7, #24]
        break;
 80047f6:	e00f      	b.n	8004818 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f8:	4b20      	ldr	r3, [pc, #128]	; (800487c <UART_SetConfig+0x268>)
 80047fa:	61bb      	str	r3, [r7, #24]
        break;
 80047fc:	e00c      	b.n	8004818 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fe:	f7fe fc21 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8004802:	61b8      	str	r0, [r7, #24]
        break;
 8004804:	e008      	b.n	8004818 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	61bb      	str	r3, [r7, #24]
        break;
 800480c:	e004      	b.n	8004818 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	77bb      	strb	r3, [r7, #30]
        break;
 8004816:	bf00      	nop
    }

    if (pclk != 0U)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	085a      	lsrs	r2, r3, #1
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	441a      	add	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	b29b      	uxth	r3, r3
 8004832:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b0f      	cmp	r3, #15
 8004838:	d908      	bls.n	800484c <UART_SetConfig+0x238>
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d204      	bcs.n	800484c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	e001      	b.n	8004850 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800485c:	7fbb      	ldrb	r3, [r7, #30]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	efff69f3 	.word	0xefff69f3
 800486c:	40013800 	.word	0x40013800
 8004870:	40021000 	.word	0x40021000
 8004874:	40004400 	.word	0x40004400
 8004878:	40004800 	.word	0x40004800
 800487c:	007a1200 	.word	0x007a1200

08004880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01a      	beq.n	8004996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800497e:	d10a      	bne.n	8004996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049d4:	f7fc fade 	bl	8000f94 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d10e      	bne.n	8004a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f82d 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e023      	b.n	8004a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d10e      	bne.n	8004a32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f817 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e00d      	b.n	8004a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b09c      	sub	sp, #112	; 0x70
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a66:	e0a5      	b.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a6e:	f000 80a1 	beq.w	8004bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	f7fc fa8f 	bl	8000f94 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d13e      	bne.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e6      	bne.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ada:	64ba      	str	r2, [r7, #72]	; 0x48
 8004adc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e5      	bne.n	8004aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e067      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d04f      	beq.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b22:	d147      	bne.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e6      	bne.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b80:	623a      	str	r2, [r7, #32]
 8004b82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	69f9      	ldr	r1, [r7, #28]
 8004b86:	6a3a      	ldr	r2, [r7, #32]
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e010      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	bf0c      	ite	eq
 8004bc4:	2301      	moveq	r3, #1
 8004bc6:	2300      	movne	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	f43f af4a 	beq.w	8004a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3770      	adds	r7, #112	; 0x70
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <__errno>:
 8004be0:	4b01      	ldr	r3, [pc, #4]	; (8004be8 <__errno+0x8>)
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	2000000c 	.word	0x2000000c

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4d0d      	ldr	r5, [pc, #52]	; (8004c24 <__libc_init_array+0x38>)
 8004bf0:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf2:	1b64      	subs	r4, r4, r5
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	4d0b      	ldr	r5, [pc, #44]	; (8004c2c <__libc_init_array+0x40>)
 8004bfe:	4c0c      	ldr	r4, [pc, #48]	; (8004c30 <__libc_init_array+0x44>)
 8004c00:	f000 fc8e 	bl	8005520 <_init>
 8004c04:	1b64      	subs	r4, r4, r5
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	2600      	movs	r6, #0
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	080055cc 	.word	0x080055cc
 8004c28:	080055cc 	.word	0x080055cc
 8004c2c:	080055cc 	.word	0x080055cc
 8004c30:	080055d0 	.word	0x080055d0

08004c34 <memset>:
 8004c34:	4402      	add	r2, r0
 8004c36:	4603      	mov	r3, r0
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d100      	bne.n	8004c3e <memset+0xa>
 8004c3c:	4770      	bx	lr
 8004c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c42:	e7f9      	b.n	8004c38 <memset+0x4>

08004c44 <siprintf>:
 8004c44:	b40e      	push	{r1, r2, r3}
 8004c46:	b500      	push	{lr}
 8004c48:	b09c      	sub	sp, #112	; 0x70
 8004c4a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c4c:	9002      	str	r0, [sp, #8]
 8004c4e:	9006      	str	r0, [sp, #24]
 8004c50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c54:	4809      	ldr	r0, [pc, #36]	; (8004c7c <siprintf+0x38>)
 8004c56:	9107      	str	r1, [sp, #28]
 8004c58:	9104      	str	r1, [sp, #16]
 8004c5a:	4909      	ldr	r1, [pc, #36]	; (8004c80 <siprintf+0x3c>)
 8004c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c60:	9105      	str	r1, [sp, #20]
 8004c62:	6800      	ldr	r0, [r0, #0]
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	a902      	add	r1, sp, #8
 8004c68:	f000 f868 	bl	8004d3c <_svfiprintf_r>
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	b01c      	add	sp, #112	; 0x70
 8004c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c78:	b003      	add	sp, #12
 8004c7a:	4770      	bx	lr
 8004c7c:	2000000c 	.word	0x2000000c
 8004c80:	ffff0208 	.word	0xffff0208

08004c84 <__ssputs_r>:
 8004c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	688e      	ldr	r6, [r1, #8]
 8004c8a:	429e      	cmp	r6, r3
 8004c8c:	4682      	mov	sl, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	4690      	mov	r8, r2
 8004c92:	461f      	mov	r7, r3
 8004c94:	d838      	bhi.n	8004d08 <__ssputs_r+0x84>
 8004c96:	898a      	ldrh	r2, [r1, #12]
 8004c98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c9c:	d032      	beq.n	8004d04 <__ssputs_r+0x80>
 8004c9e:	6825      	ldr	r5, [r4, #0]
 8004ca0:	6909      	ldr	r1, [r1, #16]
 8004ca2:	eba5 0901 	sub.w	r9, r5, r1
 8004ca6:	6965      	ldr	r5, [r4, #20]
 8004ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	444b      	add	r3, r9
 8004cb4:	106d      	asrs	r5, r5, #1
 8004cb6:	429d      	cmp	r5, r3
 8004cb8:	bf38      	it	cc
 8004cba:	461d      	movcc	r5, r3
 8004cbc:	0553      	lsls	r3, r2, #21
 8004cbe:	d531      	bpl.n	8004d24 <__ssputs_r+0xa0>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	f000 fb63 	bl	800538c <_malloc_r>
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	b950      	cbnz	r0, 8004ce0 <__ssputs_r+0x5c>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	f8ca 3000 	str.w	r3, [sl]
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd6:	81a3      	strh	r3, [r4, #12]
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce0:	6921      	ldr	r1, [r4, #16]
 8004ce2:	464a      	mov	r2, r9
 8004ce4:	f000 fabe 	bl	8005264 <memcpy>
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	6126      	str	r6, [r4, #16]
 8004cf6:	6165      	str	r5, [r4, #20]
 8004cf8:	444e      	add	r6, r9
 8004cfa:	eba5 0509 	sub.w	r5, r5, r9
 8004cfe:	6026      	str	r6, [r4, #0]
 8004d00:	60a5      	str	r5, [r4, #8]
 8004d02:	463e      	mov	r6, r7
 8004d04:	42be      	cmp	r6, r7
 8004d06:	d900      	bls.n	8004d0a <__ssputs_r+0x86>
 8004d08:	463e      	mov	r6, r7
 8004d0a:	6820      	ldr	r0, [r4, #0]
 8004d0c:	4632      	mov	r2, r6
 8004d0e:	4641      	mov	r1, r8
 8004d10:	f000 fab6 	bl	8005280 <memmove>
 8004d14:	68a3      	ldr	r3, [r4, #8]
 8004d16:	1b9b      	subs	r3, r3, r6
 8004d18:	60a3      	str	r3, [r4, #8]
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	4433      	add	r3, r6
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	2000      	movs	r0, #0
 8004d22:	e7db      	b.n	8004cdc <__ssputs_r+0x58>
 8004d24:	462a      	mov	r2, r5
 8004d26:	f000 fba5 	bl	8005474 <_realloc_r>
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d1e1      	bne.n	8004cf4 <__ssputs_r+0x70>
 8004d30:	6921      	ldr	r1, [r4, #16]
 8004d32:	4650      	mov	r0, sl
 8004d34:	f000 fabe 	bl	80052b4 <_free_r>
 8004d38:	e7c7      	b.n	8004cca <__ssputs_r+0x46>
	...

08004d3c <_svfiprintf_r>:
 8004d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d40:	4698      	mov	r8, r3
 8004d42:	898b      	ldrh	r3, [r1, #12]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	b09d      	sub	sp, #116	; 0x74
 8004d48:	4607      	mov	r7, r0
 8004d4a:	460d      	mov	r5, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	d50e      	bpl.n	8004d6e <_svfiprintf_r+0x32>
 8004d50:	690b      	ldr	r3, [r1, #16]
 8004d52:	b963      	cbnz	r3, 8004d6e <_svfiprintf_r+0x32>
 8004d54:	2140      	movs	r1, #64	; 0x40
 8004d56:	f000 fb19 	bl	800538c <_malloc_r>
 8004d5a:	6028      	str	r0, [r5, #0]
 8004d5c:	6128      	str	r0, [r5, #16]
 8004d5e:	b920      	cbnz	r0, 8004d6a <_svfiprintf_r+0x2e>
 8004d60:	230c      	movs	r3, #12
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d68:	e0d1      	b.n	8004f0e <_svfiprintf_r+0x1d2>
 8004d6a:	2340      	movs	r3, #64	; 0x40
 8004d6c:	616b      	str	r3, [r5, #20]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9309      	str	r3, [sp, #36]	; 0x24
 8004d72:	2320      	movs	r3, #32
 8004d74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d7c:	2330      	movs	r3, #48	; 0x30
 8004d7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f28 <_svfiprintf_r+0x1ec>
 8004d82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d86:	f04f 0901 	mov.w	r9, #1
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	469a      	mov	sl, r3
 8004d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d92:	b10a      	cbz	r2, 8004d98 <_svfiprintf_r+0x5c>
 8004d94:	2a25      	cmp	r2, #37	; 0x25
 8004d96:	d1f9      	bne.n	8004d8c <_svfiprintf_r+0x50>
 8004d98:	ebba 0b04 	subs.w	fp, sl, r4
 8004d9c:	d00b      	beq.n	8004db6 <_svfiprintf_r+0x7a>
 8004d9e:	465b      	mov	r3, fp
 8004da0:	4622      	mov	r2, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	4638      	mov	r0, r7
 8004da6:	f7ff ff6d 	bl	8004c84 <__ssputs_r>
 8004daa:	3001      	adds	r0, #1
 8004dac:	f000 80aa 	beq.w	8004f04 <_svfiprintf_r+0x1c8>
 8004db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004db2:	445a      	add	r2, fp
 8004db4:	9209      	str	r2, [sp, #36]	; 0x24
 8004db6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80a2 	beq.w	8004f04 <_svfiprintf_r+0x1c8>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dca:	f10a 0a01 	add.w	sl, sl, #1
 8004dce:	9304      	str	r3, [sp, #16]
 8004dd0:	9307      	str	r3, [sp, #28]
 8004dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dd6:	931a      	str	r3, [sp, #104]	; 0x68
 8004dd8:	4654      	mov	r4, sl
 8004dda:	2205      	movs	r2, #5
 8004ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de0:	4851      	ldr	r0, [pc, #324]	; (8004f28 <_svfiprintf_r+0x1ec>)
 8004de2:	f7fb f9fd 	bl	80001e0 <memchr>
 8004de6:	9a04      	ldr	r2, [sp, #16]
 8004de8:	b9d8      	cbnz	r0, 8004e22 <_svfiprintf_r+0xe6>
 8004dea:	06d0      	lsls	r0, r2, #27
 8004dec:	bf44      	itt	mi
 8004dee:	2320      	movmi	r3, #32
 8004df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004df4:	0711      	lsls	r1, r2, #28
 8004df6:	bf44      	itt	mi
 8004df8:	232b      	movmi	r3, #43	; 0x2b
 8004dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8004e02:	2b2a      	cmp	r3, #42	; 0x2a
 8004e04:	d015      	beq.n	8004e32 <_svfiprintf_r+0xf6>
 8004e06:	9a07      	ldr	r2, [sp, #28]
 8004e08:	4654      	mov	r4, sl
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f04f 0c0a 	mov.w	ip, #10
 8004e10:	4621      	mov	r1, r4
 8004e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e16:	3b30      	subs	r3, #48	; 0x30
 8004e18:	2b09      	cmp	r3, #9
 8004e1a:	d94e      	bls.n	8004eba <_svfiprintf_r+0x17e>
 8004e1c:	b1b0      	cbz	r0, 8004e4c <_svfiprintf_r+0x110>
 8004e1e:	9207      	str	r2, [sp, #28]
 8004e20:	e014      	b.n	8004e4c <_svfiprintf_r+0x110>
 8004e22:	eba0 0308 	sub.w	r3, r0, r8
 8004e26:	fa09 f303 	lsl.w	r3, r9, r3
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	9304      	str	r3, [sp, #16]
 8004e2e:	46a2      	mov	sl, r4
 8004e30:	e7d2      	b.n	8004dd8 <_svfiprintf_r+0x9c>
 8004e32:	9b03      	ldr	r3, [sp, #12]
 8004e34:	1d19      	adds	r1, r3, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	9103      	str	r1, [sp, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bfbb      	ittet	lt
 8004e3e:	425b      	neglt	r3, r3
 8004e40:	f042 0202 	orrlt.w	r2, r2, #2
 8004e44:	9307      	strge	r3, [sp, #28]
 8004e46:	9307      	strlt	r3, [sp, #28]
 8004e48:	bfb8      	it	lt
 8004e4a:	9204      	strlt	r2, [sp, #16]
 8004e4c:	7823      	ldrb	r3, [r4, #0]
 8004e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e50:	d10c      	bne.n	8004e6c <_svfiprintf_r+0x130>
 8004e52:	7863      	ldrb	r3, [r4, #1]
 8004e54:	2b2a      	cmp	r3, #42	; 0x2a
 8004e56:	d135      	bne.n	8004ec4 <_svfiprintf_r+0x188>
 8004e58:	9b03      	ldr	r3, [sp, #12]
 8004e5a:	1d1a      	adds	r2, r3, #4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	9203      	str	r2, [sp, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bfb8      	it	lt
 8004e64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e68:	3402      	adds	r4, #2
 8004e6a:	9305      	str	r3, [sp, #20]
 8004e6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f38 <_svfiprintf_r+0x1fc>
 8004e70:	7821      	ldrb	r1, [r4, #0]
 8004e72:	2203      	movs	r2, #3
 8004e74:	4650      	mov	r0, sl
 8004e76:	f7fb f9b3 	bl	80001e0 <memchr>
 8004e7a:	b140      	cbz	r0, 8004e8e <_svfiprintf_r+0x152>
 8004e7c:	2340      	movs	r3, #64	; 0x40
 8004e7e:	eba0 000a 	sub.w	r0, r0, sl
 8004e82:	fa03 f000 	lsl.w	r0, r3, r0
 8004e86:	9b04      	ldr	r3, [sp, #16]
 8004e88:	4303      	orrs	r3, r0
 8004e8a:	3401      	adds	r4, #1
 8004e8c:	9304      	str	r3, [sp, #16]
 8004e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e92:	4826      	ldr	r0, [pc, #152]	; (8004f2c <_svfiprintf_r+0x1f0>)
 8004e94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e98:	2206      	movs	r2, #6
 8004e9a:	f7fb f9a1 	bl	80001e0 <memchr>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d038      	beq.n	8004f14 <_svfiprintf_r+0x1d8>
 8004ea2:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <_svfiprintf_r+0x1f4>)
 8004ea4:	bb1b      	cbnz	r3, 8004eee <_svfiprintf_r+0x1b2>
 8004ea6:	9b03      	ldr	r3, [sp, #12]
 8004ea8:	3307      	adds	r3, #7
 8004eaa:	f023 0307 	bic.w	r3, r3, #7
 8004eae:	3308      	adds	r3, #8
 8004eb0:	9303      	str	r3, [sp, #12]
 8004eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb4:	4433      	add	r3, r6
 8004eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb8:	e767      	b.n	8004d8a <_svfiprintf_r+0x4e>
 8004eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	e7a5      	b.n	8004e10 <_svfiprintf_r+0xd4>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	3401      	adds	r4, #1
 8004ec8:	9305      	str	r3, [sp, #20]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f04f 0c0a 	mov.w	ip, #10
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ed6:	3a30      	subs	r2, #48	; 0x30
 8004ed8:	2a09      	cmp	r2, #9
 8004eda:	d903      	bls.n	8004ee4 <_svfiprintf_r+0x1a8>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0c5      	beq.n	8004e6c <_svfiprintf_r+0x130>
 8004ee0:	9105      	str	r1, [sp, #20]
 8004ee2:	e7c3      	b.n	8004e6c <_svfiprintf_r+0x130>
 8004ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ee8:	4604      	mov	r4, r0
 8004eea:	2301      	movs	r3, #1
 8004eec:	e7f0      	b.n	8004ed0 <_svfiprintf_r+0x194>
 8004eee:	ab03      	add	r3, sp, #12
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	462a      	mov	r2, r5
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <_svfiprintf_r+0x1f8>)
 8004ef6:	a904      	add	r1, sp, #16
 8004ef8:	4638      	mov	r0, r7
 8004efa:	f3af 8000 	nop.w
 8004efe:	1c42      	adds	r2, r0, #1
 8004f00:	4606      	mov	r6, r0
 8004f02:	d1d6      	bne.n	8004eb2 <_svfiprintf_r+0x176>
 8004f04:	89ab      	ldrh	r3, [r5, #12]
 8004f06:	065b      	lsls	r3, r3, #25
 8004f08:	f53f af2c 	bmi.w	8004d64 <_svfiprintf_r+0x28>
 8004f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f0e:	b01d      	add	sp, #116	; 0x74
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	ab03      	add	r3, sp, #12
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	462a      	mov	r2, r5
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <_svfiprintf_r+0x1f8>)
 8004f1c:	a904      	add	r1, sp, #16
 8004f1e:	4638      	mov	r0, r7
 8004f20:	f000 f87a 	bl	8005018 <_printf_i>
 8004f24:	e7eb      	b.n	8004efe <_svfiprintf_r+0x1c2>
 8004f26:	bf00      	nop
 8004f28:	08005598 	.word	0x08005598
 8004f2c:	080055a2 	.word	0x080055a2
 8004f30:	00000000 	.word	0x00000000
 8004f34:	08004c85 	.word	0x08004c85
 8004f38:	0800559e 	.word	0x0800559e

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4616      	mov	r6, r2
 8004f42:	4699      	mov	r9, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bfb8      	it	lt
 8004f50:	4613      	movlt	r3, r2
 8004f52:	6033      	str	r3, [r6, #0]
 8004f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f58:	4607      	mov	r7, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	b10a      	cbz	r2, 8004f62 <_printf_common+0x26>
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6033      	str	r3, [r6, #0]
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	0699      	lsls	r1, r3, #26
 8004f66:	bf42      	ittt	mi
 8004f68:	6833      	ldrmi	r3, [r6, #0]
 8004f6a:	3302      	addmi	r3, #2
 8004f6c:	6033      	strmi	r3, [r6, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	f015 0506 	ands.w	r5, r5, #6
 8004f74:	d106      	bne.n	8004f84 <_printf_common+0x48>
 8004f76:	f104 0a19 	add.w	sl, r4, #25
 8004f7a:	68e3      	ldr	r3, [r4, #12]
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	dc26      	bgt.n	8004fd2 <_printf_common+0x96>
 8004f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f88:	1e13      	subs	r3, r2, #0
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	bf18      	it	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	0692      	lsls	r2, r2, #26
 8004f92:	d42b      	bmi.n	8004fec <_printf_common+0xb0>
 8004f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f98:	4649      	mov	r1, r9
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	47c0      	blx	r8
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d01e      	beq.n	8004fe0 <_printf_common+0xa4>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	68e5      	ldr	r5, [r4, #12]
 8004fa6:	6832      	ldr	r2, [r6, #0]
 8004fa8:	f003 0306 	and.w	r3, r3, #6
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	bf08      	it	eq
 8004fb0:	1aad      	subeq	r5, r5, r2
 8004fb2:	68a3      	ldr	r3, [r4, #8]
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	bf0c      	ite	eq
 8004fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fbc:	2500      	movne	r5, #0
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bfc4      	itt	gt
 8004fc2:	1a9b      	subgt	r3, r3, r2
 8004fc4:	18ed      	addgt	r5, r5, r3
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	341a      	adds	r4, #26
 8004fca:	42b5      	cmp	r5, r6
 8004fcc:	d11a      	bne.n	8005004 <_printf_common+0xc8>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e008      	b.n	8004fe4 <_printf_common+0xa8>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4638      	mov	r0, r7
 8004fda:	47c0      	blx	r8
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d103      	bne.n	8004fe8 <_printf_common+0xac>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe8:	3501      	adds	r5, #1
 8004fea:	e7c6      	b.n	8004f7a <_printf_common+0x3e>
 8004fec:	18e1      	adds	r1, r4, r3
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	2030      	movs	r0, #48	; 0x30
 8004ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ff6:	4422      	add	r2, r4
 8004ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005000:	3302      	adds	r3, #2
 8005002:	e7c7      	b.n	8004f94 <_printf_common+0x58>
 8005004:	2301      	movs	r3, #1
 8005006:	4622      	mov	r2, r4
 8005008:	4649      	mov	r1, r9
 800500a:	4638      	mov	r0, r7
 800500c:	47c0      	blx	r8
 800500e:	3001      	adds	r0, #1
 8005010:	d0e6      	beq.n	8004fe0 <_printf_common+0xa4>
 8005012:	3601      	adds	r6, #1
 8005014:	e7d9      	b.n	8004fca <_printf_common+0x8e>
	...

08005018 <_printf_i>:
 8005018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	7e0f      	ldrb	r7, [r1, #24]
 800501e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005020:	2f78      	cmp	r7, #120	; 0x78
 8005022:	4691      	mov	r9, r2
 8005024:	4680      	mov	r8, r0
 8005026:	460c      	mov	r4, r1
 8005028:	469a      	mov	sl, r3
 800502a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800502e:	d807      	bhi.n	8005040 <_printf_i+0x28>
 8005030:	2f62      	cmp	r7, #98	; 0x62
 8005032:	d80a      	bhi.n	800504a <_printf_i+0x32>
 8005034:	2f00      	cmp	r7, #0
 8005036:	f000 80d8 	beq.w	80051ea <_printf_i+0x1d2>
 800503a:	2f58      	cmp	r7, #88	; 0x58
 800503c:	f000 80a3 	beq.w	8005186 <_printf_i+0x16e>
 8005040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005048:	e03a      	b.n	80050c0 <_printf_i+0xa8>
 800504a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800504e:	2b15      	cmp	r3, #21
 8005050:	d8f6      	bhi.n	8005040 <_printf_i+0x28>
 8005052:	a101      	add	r1, pc, #4	; (adr r1, 8005058 <_printf_i+0x40>)
 8005054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005058:	080050b1 	.word	0x080050b1
 800505c:	080050c5 	.word	0x080050c5
 8005060:	08005041 	.word	0x08005041
 8005064:	08005041 	.word	0x08005041
 8005068:	08005041 	.word	0x08005041
 800506c:	08005041 	.word	0x08005041
 8005070:	080050c5 	.word	0x080050c5
 8005074:	08005041 	.word	0x08005041
 8005078:	08005041 	.word	0x08005041
 800507c:	08005041 	.word	0x08005041
 8005080:	08005041 	.word	0x08005041
 8005084:	080051d1 	.word	0x080051d1
 8005088:	080050f5 	.word	0x080050f5
 800508c:	080051b3 	.word	0x080051b3
 8005090:	08005041 	.word	0x08005041
 8005094:	08005041 	.word	0x08005041
 8005098:	080051f3 	.word	0x080051f3
 800509c:	08005041 	.word	0x08005041
 80050a0:	080050f5 	.word	0x080050f5
 80050a4:	08005041 	.word	0x08005041
 80050a8:	08005041 	.word	0x08005041
 80050ac:	080051bb 	.word	0x080051bb
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	1d1a      	adds	r2, r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	602a      	str	r2, [r5, #0]
 80050b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0a3      	b.n	800520c <_printf_i+0x1f4>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	6829      	ldr	r1, [r5, #0]
 80050c8:	0606      	lsls	r6, r0, #24
 80050ca:	f101 0304 	add.w	r3, r1, #4
 80050ce:	d50a      	bpl.n	80050e6 <_printf_i+0xce>
 80050d0:	680e      	ldr	r6, [r1, #0]
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	2e00      	cmp	r6, #0
 80050d6:	da03      	bge.n	80050e0 <_printf_i+0xc8>
 80050d8:	232d      	movs	r3, #45	; 0x2d
 80050da:	4276      	negs	r6, r6
 80050dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e0:	485e      	ldr	r0, [pc, #376]	; (800525c <_printf_i+0x244>)
 80050e2:	230a      	movs	r3, #10
 80050e4:	e019      	b.n	800511a <_printf_i+0x102>
 80050e6:	680e      	ldr	r6, [r1, #0]
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050ee:	bf18      	it	ne
 80050f0:	b236      	sxthne	r6, r6
 80050f2:	e7ef      	b.n	80050d4 <_printf_i+0xbc>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	6820      	ldr	r0, [r4, #0]
 80050f8:	1d19      	adds	r1, r3, #4
 80050fa:	6029      	str	r1, [r5, #0]
 80050fc:	0601      	lsls	r1, r0, #24
 80050fe:	d501      	bpl.n	8005104 <_printf_i+0xec>
 8005100:	681e      	ldr	r6, [r3, #0]
 8005102:	e002      	b.n	800510a <_printf_i+0xf2>
 8005104:	0646      	lsls	r6, r0, #25
 8005106:	d5fb      	bpl.n	8005100 <_printf_i+0xe8>
 8005108:	881e      	ldrh	r6, [r3, #0]
 800510a:	4854      	ldr	r0, [pc, #336]	; (800525c <_printf_i+0x244>)
 800510c:	2f6f      	cmp	r7, #111	; 0x6f
 800510e:	bf0c      	ite	eq
 8005110:	2308      	moveq	r3, #8
 8005112:	230a      	movne	r3, #10
 8005114:	2100      	movs	r1, #0
 8005116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800511a:	6865      	ldr	r5, [r4, #4]
 800511c:	60a5      	str	r5, [r4, #8]
 800511e:	2d00      	cmp	r5, #0
 8005120:	bfa2      	ittt	ge
 8005122:	6821      	ldrge	r1, [r4, #0]
 8005124:	f021 0104 	bicge.w	r1, r1, #4
 8005128:	6021      	strge	r1, [r4, #0]
 800512a:	b90e      	cbnz	r6, 8005130 <_printf_i+0x118>
 800512c:	2d00      	cmp	r5, #0
 800512e:	d04d      	beq.n	80051cc <_printf_i+0x1b4>
 8005130:	4615      	mov	r5, r2
 8005132:	fbb6 f1f3 	udiv	r1, r6, r3
 8005136:	fb03 6711 	mls	r7, r3, r1, r6
 800513a:	5dc7      	ldrb	r7, [r0, r7]
 800513c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005140:	4637      	mov	r7, r6
 8005142:	42bb      	cmp	r3, r7
 8005144:	460e      	mov	r6, r1
 8005146:	d9f4      	bls.n	8005132 <_printf_i+0x11a>
 8005148:	2b08      	cmp	r3, #8
 800514a:	d10b      	bne.n	8005164 <_printf_i+0x14c>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	07de      	lsls	r6, r3, #31
 8005150:	d508      	bpl.n	8005164 <_printf_i+0x14c>
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	6861      	ldr	r1, [r4, #4]
 8005156:	4299      	cmp	r1, r3
 8005158:	bfde      	ittt	le
 800515a:	2330      	movle	r3, #48	; 0x30
 800515c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005160:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005164:	1b52      	subs	r2, r2, r5
 8005166:	6122      	str	r2, [r4, #16]
 8005168:	f8cd a000 	str.w	sl, [sp]
 800516c:	464b      	mov	r3, r9
 800516e:	aa03      	add	r2, sp, #12
 8005170:	4621      	mov	r1, r4
 8005172:	4640      	mov	r0, r8
 8005174:	f7ff fee2 	bl	8004f3c <_printf_common>
 8005178:	3001      	adds	r0, #1
 800517a:	d14c      	bne.n	8005216 <_printf_i+0x1fe>
 800517c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005180:	b004      	add	sp, #16
 8005182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005186:	4835      	ldr	r0, [pc, #212]	; (800525c <_printf_i+0x244>)
 8005188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800518c:	6829      	ldr	r1, [r5, #0]
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f851 6b04 	ldr.w	r6, [r1], #4
 8005194:	6029      	str	r1, [r5, #0]
 8005196:	061d      	lsls	r5, r3, #24
 8005198:	d514      	bpl.n	80051c4 <_printf_i+0x1ac>
 800519a:	07df      	lsls	r7, r3, #31
 800519c:	bf44      	itt	mi
 800519e:	f043 0320 	orrmi.w	r3, r3, #32
 80051a2:	6023      	strmi	r3, [r4, #0]
 80051a4:	b91e      	cbnz	r6, 80051ae <_printf_i+0x196>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	f023 0320 	bic.w	r3, r3, #32
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	2310      	movs	r3, #16
 80051b0:	e7b0      	b.n	8005114 <_printf_i+0xfc>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	f043 0320 	orr.w	r3, r3, #32
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	2378      	movs	r3, #120	; 0x78
 80051bc:	4828      	ldr	r0, [pc, #160]	; (8005260 <_printf_i+0x248>)
 80051be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051c2:	e7e3      	b.n	800518c <_printf_i+0x174>
 80051c4:	0659      	lsls	r1, r3, #25
 80051c6:	bf48      	it	mi
 80051c8:	b2b6      	uxthmi	r6, r6
 80051ca:	e7e6      	b.n	800519a <_printf_i+0x182>
 80051cc:	4615      	mov	r5, r2
 80051ce:	e7bb      	b.n	8005148 <_printf_i+0x130>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	6826      	ldr	r6, [r4, #0]
 80051d4:	6961      	ldr	r1, [r4, #20]
 80051d6:	1d18      	adds	r0, r3, #4
 80051d8:	6028      	str	r0, [r5, #0]
 80051da:	0635      	lsls	r5, r6, #24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	d501      	bpl.n	80051e4 <_printf_i+0x1cc>
 80051e0:	6019      	str	r1, [r3, #0]
 80051e2:	e002      	b.n	80051ea <_printf_i+0x1d2>
 80051e4:	0670      	lsls	r0, r6, #25
 80051e6:	d5fb      	bpl.n	80051e0 <_printf_i+0x1c8>
 80051e8:	8019      	strh	r1, [r3, #0]
 80051ea:	2300      	movs	r3, #0
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	4615      	mov	r5, r2
 80051f0:	e7ba      	b.n	8005168 <_printf_i+0x150>
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	1d1a      	adds	r2, r3, #4
 80051f6:	602a      	str	r2, [r5, #0]
 80051f8:	681d      	ldr	r5, [r3, #0]
 80051fa:	6862      	ldr	r2, [r4, #4]
 80051fc:	2100      	movs	r1, #0
 80051fe:	4628      	mov	r0, r5
 8005200:	f7fa ffee 	bl	80001e0 <memchr>
 8005204:	b108      	cbz	r0, 800520a <_printf_i+0x1f2>
 8005206:	1b40      	subs	r0, r0, r5
 8005208:	6060      	str	r0, [r4, #4]
 800520a:	6863      	ldr	r3, [r4, #4]
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	2300      	movs	r3, #0
 8005210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005214:	e7a8      	b.n	8005168 <_printf_i+0x150>
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	462a      	mov	r2, r5
 800521a:	4649      	mov	r1, r9
 800521c:	4640      	mov	r0, r8
 800521e:	47d0      	blx	sl
 8005220:	3001      	adds	r0, #1
 8005222:	d0ab      	beq.n	800517c <_printf_i+0x164>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	079b      	lsls	r3, r3, #30
 8005228:	d413      	bmi.n	8005252 <_printf_i+0x23a>
 800522a:	68e0      	ldr	r0, [r4, #12]
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	4298      	cmp	r0, r3
 8005230:	bfb8      	it	lt
 8005232:	4618      	movlt	r0, r3
 8005234:	e7a4      	b.n	8005180 <_printf_i+0x168>
 8005236:	2301      	movs	r3, #1
 8005238:	4632      	mov	r2, r6
 800523a:	4649      	mov	r1, r9
 800523c:	4640      	mov	r0, r8
 800523e:	47d0      	blx	sl
 8005240:	3001      	adds	r0, #1
 8005242:	d09b      	beq.n	800517c <_printf_i+0x164>
 8005244:	3501      	adds	r5, #1
 8005246:	68e3      	ldr	r3, [r4, #12]
 8005248:	9903      	ldr	r1, [sp, #12]
 800524a:	1a5b      	subs	r3, r3, r1
 800524c:	42ab      	cmp	r3, r5
 800524e:	dcf2      	bgt.n	8005236 <_printf_i+0x21e>
 8005250:	e7eb      	b.n	800522a <_printf_i+0x212>
 8005252:	2500      	movs	r5, #0
 8005254:	f104 0619 	add.w	r6, r4, #25
 8005258:	e7f5      	b.n	8005246 <_printf_i+0x22e>
 800525a:	bf00      	nop
 800525c:	080055a9 	.word	0x080055a9
 8005260:	080055ba 	.word	0x080055ba

08005264 <memcpy>:
 8005264:	440a      	add	r2, r1
 8005266:	4291      	cmp	r1, r2
 8005268:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800526c:	d100      	bne.n	8005270 <memcpy+0xc>
 800526e:	4770      	bx	lr
 8005270:	b510      	push	{r4, lr}
 8005272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800527a:	4291      	cmp	r1, r2
 800527c:	d1f9      	bne.n	8005272 <memcpy+0xe>
 800527e:	bd10      	pop	{r4, pc}

08005280 <memmove>:
 8005280:	4288      	cmp	r0, r1
 8005282:	b510      	push	{r4, lr}
 8005284:	eb01 0402 	add.w	r4, r1, r2
 8005288:	d902      	bls.n	8005290 <memmove+0x10>
 800528a:	4284      	cmp	r4, r0
 800528c:	4623      	mov	r3, r4
 800528e:	d807      	bhi.n	80052a0 <memmove+0x20>
 8005290:	1e43      	subs	r3, r0, #1
 8005292:	42a1      	cmp	r1, r4
 8005294:	d008      	beq.n	80052a8 <memmove+0x28>
 8005296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800529a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800529e:	e7f8      	b.n	8005292 <memmove+0x12>
 80052a0:	4402      	add	r2, r0
 80052a2:	4601      	mov	r1, r0
 80052a4:	428a      	cmp	r2, r1
 80052a6:	d100      	bne.n	80052aa <memmove+0x2a>
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052b2:	e7f7      	b.n	80052a4 <memmove+0x24>

080052b4 <_free_r>:
 80052b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052b6:	2900      	cmp	r1, #0
 80052b8:	d044      	beq.n	8005344 <_free_r+0x90>
 80052ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052be:	9001      	str	r0, [sp, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f1a1 0404 	sub.w	r4, r1, #4
 80052c6:	bfb8      	it	lt
 80052c8:	18e4      	addlt	r4, r4, r3
 80052ca:	f000 f913 	bl	80054f4 <__malloc_lock>
 80052ce:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <_free_r+0x94>)
 80052d0:	9801      	ldr	r0, [sp, #4]
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	b933      	cbnz	r3, 80052e4 <_free_r+0x30>
 80052d6:	6063      	str	r3, [r4, #4]
 80052d8:	6014      	str	r4, [r2, #0]
 80052da:	b003      	add	sp, #12
 80052dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052e0:	f000 b90e 	b.w	8005500 <__malloc_unlock>
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d908      	bls.n	80052fa <_free_r+0x46>
 80052e8:	6825      	ldr	r5, [r4, #0]
 80052ea:	1961      	adds	r1, r4, r5
 80052ec:	428b      	cmp	r3, r1
 80052ee:	bf01      	itttt	eq
 80052f0:	6819      	ldreq	r1, [r3, #0]
 80052f2:	685b      	ldreq	r3, [r3, #4]
 80052f4:	1949      	addeq	r1, r1, r5
 80052f6:	6021      	streq	r1, [r4, #0]
 80052f8:	e7ed      	b.n	80052d6 <_free_r+0x22>
 80052fa:	461a      	mov	r2, r3
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	b10b      	cbz	r3, 8005304 <_free_r+0x50>
 8005300:	42a3      	cmp	r3, r4
 8005302:	d9fa      	bls.n	80052fa <_free_r+0x46>
 8005304:	6811      	ldr	r1, [r2, #0]
 8005306:	1855      	adds	r5, r2, r1
 8005308:	42a5      	cmp	r5, r4
 800530a:	d10b      	bne.n	8005324 <_free_r+0x70>
 800530c:	6824      	ldr	r4, [r4, #0]
 800530e:	4421      	add	r1, r4
 8005310:	1854      	adds	r4, r2, r1
 8005312:	42a3      	cmp	r3, r4
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	d1e0      	bne.n	80052da <_free_r+0x26>
 8005318:	681c      	ldr	r4, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	6053      	str	r3, [r2, #4]
 800531e:	4421      	add	r1, r4
 8005320:	6011      	str	r1, [r2, #0]
 8005322:	e7da      	b.n	80052da <_free_r+0x26>
 8005324:	d902      	bls.n	800532c <_free_r+0x78>
 8005326:	230c      	movs	r3, #12
 8005328:	6003      	str	r3, [r0, #0]
 800532a:	e7d6      	b.n	80052da <_free_r+0x26>
 800532c:	6825      	ldr	r5, [r4, #0]
 800532e:	1961      	adds	r1, r4, r5
 8005330:	428b      	cmp	r3, r1
 8005332:	bf04      	itt	eq
 8005334:	6819      	ldreq	r1, [r3, #0]
 8005336:	685b      	ldreq	r3, [r3, #4]
 8005338:	6063      	str	r3, [r4, #4]
 800533a:	bf04      	itt	eq
 800533c:	1949      	addeq	r1, r1, r5
 800533e:	6021      	streq	r1, [r4, #0]
 8005340:	6054      	str	r4, [r2, #4]
 8005342:	e7ca      	b.n	80052da <_free_r+0x26>
 8005344:	b003      	add	sp, #12
 8005346:	bd30      	pop	{r4, r5, pc}
 8005348:	20000224 	.word	0x20000224

0800534c <sbrk_aligned>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	4e0e      	ldr	r6, [pc, #56]	; (8005388 <sbrk_aligned+0x3c>)
 8005350:	460c      	mov	r4, r1
 8005352:	6831      	ldr	r1, [r6, #0]
 8005354:	4605      	mov	r5, r0
 8005356:	b911      	cbnz	r1, 800535e <sbrk_aligned+0x12>
 8005358:	f000 f8bc 	bl	80054d4 <_sbrk_r>
 800535c:	6030      	str	r0, [r6, #0]
 800535e:	4621      	mov	r1, r4
 8005360:	4628      	mov	r0, r5
 8005362:	f000 f8b7 	bl	80054d4 <_sbrk_r>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	d00a      	beq.n	8005380 <sbrk_aligned+0x34>
 800536a:	1cc4      	adds	r4, r0, #3
 800536c:	f024 0403 	bic.w	r4, r4, #3
 8005370:	42a0      	cmp	r0, r4
 8005372:	d007      	beq.n	8005384 <sbrk_aligned+0x38>
 8005374:	1a21      	subs	r1, r4, r0
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f8ac 	bl	80054d4 <_sbrk_r>
 800537c:	3001      	adds	r0, #1
 800537e:	d101      	bne.n	8005384 <sbrk_aligned+0x38>
 8005380:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005384:	4620      	mov	r0, r4
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	20000228 	.word	0x20000228

0800538c <_malloc_r>:
 800538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005390:	1ccd      	adds	r5, r1, #3
 8005392:	f025 0503 	bic.w	r5, r5, #3
 8005396:	3508      	adds	r5, #8
 8005398:	2d0c      	cmp	r5, #12
 800539a:	bf38      	it	cc
 800539c:	250c      	movcc	r5, #12
 800539e:	2d00      	cmp	r5, #0
 80053a0:	4607      	mov	r7, r0
 80053a2:	db01      	blt.n	80053a8 <_malloc_r+0x1c>
 80053a4:	42a9      	cmp	r1, r5
 80053a6:	d905      	bls.n	80053b4 <_malloc_r+0x28>
 80053a8:	230c      	movs	r3, #12
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	2600      	movs	r6, #0
 80053ae:	4630      	mov	r0, r6
 80053b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b4:	4e2e      	ldr	r6, [pc, #184]	; (8005470 <_malloc_r+0xe4>)
 80053b6:	f000 f89d 	bl	80054f4 <__malloc_lock>
 80053ba:	6833      	ldr	r3, [r6, #0]
 80053bc:	461c      	mov	r4, r3
 80053be:	bb34      	cbnz	r4, 800540e <_malloc_r+0x82>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4638      	mov	r0, r7
 80053c4:	f7ff ffc2 	bl	800534c <sbrk_aligned>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	4604      	mov	r4, r0
 80053cc:	d14d      	bne.n	800546a <_malloc_r+0xde>
 80053ce:	6834      	ldr	r4, [r6, #0]
 80053d0:	4626      	mov	r6, r4
 80053d2:	2e00      	cmp	r6, #0
 80053d4:	d140      	bne.n	8005458 <_malloc_r+0xcc>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	4631      	mov	r1, r6
 80053da:	4638      	mov	r0, r7
 80053dc:	eb04 0803 	add.w	r8, r4, r3
 80053e0:	f000 f878 	bl	80054d4 <_sbrk_r>
 80053e4:	4580      	cmp	r8, r0
 80053e6:	d13a      	bne.n	800545e <_malloc_r+0xd2>
 80053e8:	6821      	ldr	r1, [r4, #0]
 80053ea:	3503      	adds	r5, #3
 80053ec:	1a6d      	subs	r5, r5, r1
 80053ee:	f025 0503 	bic.w	r5, r5, #3
 80053f2:	3508      	adds	r5, #8
 80053f4:	2d0c      	cmp	r5, #12
 80053f6:	bf38      	it	cc
 80053f8:	250c      	movcc	r5, #12
 80053fa:	4629      	mov	r1, r5
 80053fc:	4638      	mov	r0, r7
 80053fe:	f7ff ffa5 	bl	800534c <sbrk_aligned>
 8005402:	3001      	adds	r0, #1
 8005404:	d02b      	beq.n	800545e <_malloc_r+0xd2>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	442b      	add	r3, r5
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	e00e      	b.n	800542c <_malloc_r+0xa0>
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	1b52      	subs	r2, r2, r5
 8005412:	d41e      	bmi.n	8005452 <_malloc_r+0xc6>
 8005414:	2a0b      	cmp	r2, #11
 8005416:	d916      	bls.n	8005446 <_malloc_r+0xba>
 8005418:	1961      	adds	r1, r4, r5
 800541a:	42a3      	cmp	r3, r4
 800541c:	6025      	str	r5, [r4, #0]
 800541e:	bf18      	it	ne
 8005420:	6059      	strne	r1, [r3, #4]
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	bf08      	it	eq
 8005426:	6031      	streq	r1, [r6, #0]
 8005428:	5162      	str	r2, [r4, r5]
 800542a:	604b      	str	r3, [r1, #4]
 800542c:	4638      	mov	r0, r7
 800542e:	f104 060b 	add.w	r6, r4, #11
 8005432:	f000 f865 	bl	8005500 <__malloc_unlock>
 8005436:	f026 0607 	bic.w	r6, r6, #7
 800543a:	1d23      	adds	r3, r4, #4
 800543c:	1af2      	subs	r2, r6, r3
 800543e:	d0b6      	beq.n	80053ae <_malloc_r+0x22>
 8005440:	1b9b      	subs	r3, r3, r6
 8005442:	50a3      	str	r3, [r4, r2]
 8005444:	e7b3      	b.n	80053ae <_malloc_r+0x22>
 8005446:	6862      	ldr	r2, [r4, #4]
 8005448:	42a3      	cmp	r3, r4
 800544a:	bf0c      	ite	eq
 800544c:	6032      	streq	r2, [r6, #0]
 800544e:	605a      	strne	r2, [r3, #4]
 8005450:	e7ec      	b.n	800542c <_malloc_r+0xa0>
 8005452:	4623      	mov	r3, r4
 8005454:	6864      	ldr	r4, [r4, #4]
 8005456:	e7b2      	b.n	80053be <_malloc_r+0x32>
 8005458:	4634      	mov	r4, r6
 800545a:	6876      	ldr	r6, [r6, #4]
 800545c:	e7b9      	b.n	80053d2 <_malloc_r+0x46>
 800545e:	230c      	movs	r3, #12
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4638      	mov	r0, r7
 8005464:	f000 f84c 	bl	8005500 <__malloc_unlock>
 8005468:	e7a1      	b.n	80053ae <_malloc_r+0x22>
 800546a:	6025      	str	r5, [r4, #0]
 800546c:	e7de      	b.n	800542c <_malloc_r+0xa0>
 800546e:	bf00      	nop
 8005470:	20000224 	.word	0x20000224

08005474 <_realloc_r>:
 8005474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005478:	4680      	mov	r8, r0
 800547a:	4614      	mov	r4, r2
 800547c:	460e      	mov	r6, r1
 800547e:	b921      	cbnz	r1, 800548a <_realloc_r+0x16>
 8005480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005484:	4611      	mov	r1, r2
 8005486:	f7ff bf81 	b.w	800538c <_malloc_r>
 800548a:	b92a      	cbnz	r2, 8005498 <_realloc_r+0x24>
 800548c:	f7ff ff12 	bl	80052b4 <_free_r>
 8005490:	4625      	mov	r5, r4
 8005492:	4628      	mov	r0, r5
 8005494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005498:	f000 f838 	bl	800550c <_malloc_usable_size_r>
 800549c:	4284      	cmp	r4, r0
 800549e:	4607      	mov	r7, r0
 80054a0:	d802      	bhi.n	80054a8 <_realloc_r+0x34>
 80054a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054a6:	d812      	bhi.n	80054ce <_realloc_r+0x5a>
 80054a8:	4621      	mov	r1, r4
 80054aa:	4640      	mov	r0, r8
 80054ac:	f7ff ff6e 	bl	800538c <_malloc_r>
 80054b0:	4605      	mov	r5, r0
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d0ed      	beq.n	8005492 <_realloc_r+0x1e>
 80054b6:	42bc      	cmp	r4, r7
 80054b8:	4622      	mov	r2, r4
 80054ba:	4631      	mov	r1, r6
 80054bc:	bf28      	it	cs
 80054be:	463a      	movcs	r2, r7
 80054c0:	f7ff fed0 	bl	8005264 <memcpy>
 80054c4:	4631      	mov	r1, r6
 80054c6:	4640      	mov	r0, r8
 80054c8:	f7ff fef4 	bl	80052b4 <_free_r>
 80054cc:	e7e1      	b.n	8005492 <_realloc_r+0x1e>
 80054ce:	4635      	mov	r5, r6
 80054d0:	e7df      	b.n	8005492 <_realloc_r+0x1e>
	...

080054d4 <_sbrk_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d06      	ldr	r5, [pc, #24]	; (80054f0 <_sbrk_r+0x1c>)
 80054d8:	2300      	movs	r3, #0
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	f7fb faca 	bl	8000a78 <_sbrk>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_sbrk_r+0x1a>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_sbrk_r+0x1a>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	2000022c 	.word	0x2000022c

080054f4 <__malloc_lock>:
 80054f4:	4801      	ldr	r0, [pc, #4]	; (80054fc <__malloc_lock+0x8>)
 80054f6:	f000 b811 	b.w	800551c <__retarget_lock_acquire_recursive>
 80054fa:	bf00      	nop
 80054fc:	20000230 	.word	0x20000230

08005500 <__malloc_unlock>:
 8005500:	4801      	ldr	r0, [pc, #4]	; (8005508 <__malloc_unlock+0x8>)
 8005502:	f000 b80c 	b.w	800551e <__retarget_lock_release_recursive>
 8005506:	bf00      	nop
 8005508:	20000230 	.word	0x20000230

0800550c <_malloc_usable_size_r>:
 800550c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005510:	1f18      	subs	r0, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	bfbc      	itt	lt
 8005516:	580b      	ldrlt	r3, [r1, r0]
 8005518:	18c0      	addlt	r0, r0, r3
 800551a:	4770      	bx	lr

0800551c <__retarget_lock_acquire_recursive>:
 800551c:	4770      	bx	lr

0800551e <__retarget_lock_release_recursive>:
 800551e:	4770      	bx	lr

08005520 <_init>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr

0800552c <_fini>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr
