
Artificial_Horizon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aef4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001408  0800b098  0800b098  0001b098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4a0  0800c4a0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4a0  0800c4a0  0001c4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4a8  0800c4a8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4a8  0800c4a8  0001c4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4ac  0800c4ac  0001c4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c4b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001f4  0800c6a4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800c6a4  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b58  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2c  00000000  00000000  00031d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  000348a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00035938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ecb  00000000  00000000  00036860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e00  00000000  00000000  0004f72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092835  00000000  00000000  0006452b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6d60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000599c  00000000  00000000  000f6db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b07c 	.word	0x0800b07c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800b07c 	.word	0x0800b07c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MPU6050_Init>:




void MPU6050_Init (void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&I2C_NO, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	2275      	movs	r2, #117	; 0x75
 8000f74:	21d0      	movs	r1, #208	; 0xd0
 8000f76:	4824      	ldr	r0, [pc, #144]	; (8001008 <MPU6050_Init+0xac>)
 8000f78:	f003 fb58 	bl	800462c <HAL_I2C_Mem_Read>

 	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b68      	cmp	r3, #104	; 0x68
 8000f80:	d13c      	bne.n	8000ffc <MPU6050_Init+0xa0>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&I2C_NO, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	1dbb      	adds	r3, r7, #6
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	226b      	movs	r2, #107	; 0x6b
 8000f98:	21d0      	movs	r1, #208	; 0xd0
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <MPU6050_Init+0xac>)
 8000f9c:	f003 fa4c 	bl	8004438 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&I2C_NO, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2219      	movs	r2, #25
 8000fb6:	21d0      	movs	r1, #208	; 0xd0
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <MPU6050_Init+0xac>)
 8000fba:	f003 fa3d 	bl	8004438 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&I2C_NO, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	221c      	movs	r2, #28
 8000fd4:	21d0      	movs	r1, #208	; 0xd0
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <MPU6050_Init+0xac>)
 8000fd8:	f003 fa2e 	bl	8004438 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&I2C_NO, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	1dbb      	adds	r3, r7, #6
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	221b      	movs	r2, #27
 8000ff2:	21d0      	movs	r1, #208	; 0xd0
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MPU6050_Init+0xac>)
 8000ff6:	f003 fa1f 	bl	8004438 <HAL_I2C_Mem_Write>
	}
	else {
		Error_Handler();
	}

}
 8000ffa:	e001      	b.n	8001000 <MPU6050_Init+0xa4>
		Error_Handler();
 8000ffc:	f001 ff6c 	bl	8002ed8 <Error_Handler>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000021c 	.word	0x2000021c
 800100c:	00000000 	.word	0x00000000

08001010 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&I2C_NO, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2306      	movs	r3, #6
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	463b      	mov	r3, r7
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	223b      	movs	r2, #59	; 0x3b
 8001028:	21d0      	movs	r1, #208	; 0xd0
 800102a:	4831      	ldr	r0, [pc, #196]	; (80010f0 <MPU6050_Read_Accel+0xe0>)
 800102c:	f003 fafe 	bl	800462c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001030:	783b      	ldrb	r3, [r7, #0]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	787b      	ldrb	r3, [r7, #1]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <MPU6050_Read_Accel+0xe4>)
 8001040:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001042:	78bb      	ldrb	r3, [r7, #2]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <MPU6050_Read_Accel+0xe8>)
 8001052:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001054:	793b      	ldrb	r3, [r7, #4]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	797b      	ldrb	r3, [r7, #5]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MPU6050_Read_Accel+0xec>)
 8001064:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <MPU6050_Read_Accel+0xe4>)
 8001068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa61 	bl	8000534 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MPU6050_Read_Accel+0xf0>)
 8001078:	f7ff fbf0 	bl	800085c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd98 	bl	8000bb8 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <MPU6050_Read_Accel+0xf4>)
 800108c:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/17500.0;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MPU6050_Read_Accel+0xe8>)
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa4d 	bl	8000534 <__aeabi_i2d>
 800109a:	a313      	add	r3, pc, #76	; (adr r3, 80010e8 <MPU6050_Read_Accel+0xd8>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fbdc 	bl	800085c <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd84 	bl	8000bb8 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MPU6050_Read_Accel+0xf8>)
 80010b4:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/17500.0 ;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MPU6050_Read_Accel+0xec>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa39 	bl	8000534 <__aeabi_i2d>
 80010c2:	a309      	add	r3, pc, #36	; (adr r3, 80010e8 <MPU6050_Read_Accel+0xd8>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fbc8 	bl	800085c <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd70 	bl	8000bb8 <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a0c      	ldr	r2, [pc, #48]	; (800110c <MPU6050_Read_Accel+0xfc>)
 80010dc:	6013      	str	r3, [r2, #0]
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	00000000 	.word	0x00000000
 80010ec:	40d11700 	.word	0x40d11700
 80010f0:	2000021c 	.word	0x2000021c
 80010f4:	20000210 	.word	0x20000210
 80010f8:	20000212 	.word	0x20000212
 80010fc:	20000214 	.word	0x20000214
 8001100:	40d00000 	.word	0x40d00000
 8001104:	200002f4 	.word	0x200002f4
 8001108:	200002f8 	.word	0x200002f8
 800110c:	200002fc 	.word	0x200002fc

08001110 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&I2C_NO, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2306      	movs	r3, #6
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	463b      	mov	r3, r7
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2243      	movs	r2, #67	; 0x43
 8001128:	21d0      	movs	r1, #208	; 0xd0
 800112a:	4831      	ldr	r0, [pc, #196]	; (80011f0 <MPU6050_Read_Gyro+0xe0>)
 800112c:	f003 fa7e 	bl	800462c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001130:	783b      	ldrb	r3, [r7, #0]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	787b      	ldrb	r3, [r7, #1]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MPU6050_Read_Gyro+0xe4>)
 8001140:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001142:	78bb      	ldrb	r3, [r7, #2]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MPU6050_Read_Gyro+0xe8>)
 8001152:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	797b      	ldrb	r3, [r7, #5]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MPU6050_Read_Gyro+0xec>)
 8001164:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MPU6050_Read_Gyro+0xe4>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9e1 	bl	8000534 <__aeabi_i2d>
 8001172:	a31d      	add	r3, pc, #116	; (adr r3, 80011e8 <MPU6050_Read_Gyro+0xd8>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fb70 	bl	800085c <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fd18 	bl	8000bb8 <__aeabi_d2f>
 8001188:	4603      	mov	r3, r0
 800118a:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <MPU6050_Read_Gyro+0xf0>)
 800118c:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MPU6050_Read_Gyro+0xe8>)
 8001190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9cd 	bl	8000534 <__aeabi_i2d>
 800119a:	a313      	add	r3, pc, #76	; (adr r3, 80011e8 <MPU6050_Read_Gyro+0xd8>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb5c 	bl	800085c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fd04 	bl	8000bb8 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <MPU6050_Read_Gyro+0xf4>)
 80011b4:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MPU6050_Read_Gyro+0xec>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9b9 	bl	8000534 <__aeabi_i2d>
 80011c2:	a309      	add	r3, pc, #36	; (adr r3, 80011e8 <MPU6050_Read_Gyro+0xd8>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fb48 	bl	800085c <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fcf0 	bl	8000bb8 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <MPU6050_Read_Gyro+0xf8>)
 80011dc:	6013      	str	r3, [r2, #0]
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40606000 	.word	0x40606000
 80011f0:	2000021c 	.word	0x2000021c
 80011f4:	20000216 	.word	0x20000216
 80011f8:	20000218 	.word	0x20000218
 80011fc:	2000021a 	.word	0x2000021a
 8001200:	20000300 	.word	0x20000300
 8001204:	20000304 	.word	0x20000304
 8001208:	20000308 	.word	0x20000308

0800120c <QMC_init>:
#include"QMC5883.h"
#include "math.h"

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af04      	add	r7, sp, #16
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	4613      	mov	r3, r2
 8001218:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2211      	movs	r2, #17
 8001224:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 8001226:	2301      	movs	r3, #1
 8001228:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	791b      	ldrb	r3, [r3, #4]
 800122e:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2bc8      	cmp	r3, #200	; 0xc8
 8001234:	d107      	bne.n	8001246 <QMC_init+0x3a>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	791b      	ldrb	r3, [r3, #4]
 800123a:	f043 030c 	orr.w	r3, r3, #12
 800123e:	b2da      	uxtb	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	711a      	strb	r2, [r3, #4]
 8001244:	e024      	b.n	8001290 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b64      	cmp	r3, #100	; 0x64
 800124a:	d107      	bne.n	800125c <QMC_init+0x50>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	791b      	ldrb	r3, [r3, #4]
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	b2da      	uxtb	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	711a      	strb	r2, [r3, #4]
 800125a:	e019      	b.n	8001290 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b32      	cmp	r3, #50	; 0x32
 8001260:	d107      	bne.n	8001272 <QMC_init+0x66>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	791b      	ldrb	r3, [r3, #4]
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	b2da      	uxtb	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	711a      	strb	r2, [r3, #4]
 8001270:	e00e      	b.n	8001290 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b0a      	cmp	r3, #10
 8001276:	d104      	bne.n	8001282 <QMC_init+0x76>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	791a      	ldrb	r2, [r3, #4]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	711a      	strb	r2, [r3, #4]
 8001280:	e006      	b.n	8001290 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	f043 030c 	orr.w	r3, r3, #12
 800128a:	b2da      	uxtb	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2301      	movs	r3, #1
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	220b      	movs	r2, #11
 80012a6:	211a      	movs	r1, #26
 80012a8:	f003 f8c6 	bl	8004438 <HAL_I2C_Mem_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <QMC_init+0xaa>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e014      	b.n	80012e0 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	2364      	movs	r3, #100	; 0x64
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	2301      	movs	r3, #1
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	3301      	adds	r3, #1
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	2209      	movs	r2, #9
 80012ce:	211a      	movs	r1, #26
 80012d0:	f003 f8b2 	bl	8004438 <HAL_I2C_Mem_Write>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <QMC_init+0xd2>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <QMC_init+0xd4>

	return 0;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <QMC_read>:

uint8_t QMC_read(QMC_t *qmc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af04      	add	r7, sp, #16
 80012ee:	6078      	str	r0, [r7, #4]
	  qmc->datas[0]=0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x06, 1, qmc->datas, 1, 100);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3305      	adds	r3, #5
 80012fe:	2264      	movs	r2, #100	; 0x64
 8001300:	9202      	str	r2, [sp, #8]
 8001302:	2201      	movs	r2, #1
 8001304:	9201      	str	r2, [sp, #4]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	2206      	movs	r2, #6
 800130c:	211a      	movs	r1, #26
 800130e:	f003 f98d 	bl	800462c <HAL_I2C_Mem_Read>

	  if((qmc->datas[0]&0x01)==1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	795b      	ldrb	r3, [r3, #5]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d076      	beq.n	800140c <QMC_read+0x124>
	  {
		  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x00, 1, qmc->datas, 6, 100);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3305      	adds	r3, #5
 8001326:	2264      	movs	r2, #100	; 0x64
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	2206      	movs	r2, #6
 800132c:	9201      	str	r2, [sp, #4]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	2200      	movs	r2, #0
 8001334:	211a      	movs	r1, #26
 8001336:	f003 f979 	bl	800462c <HAL_I2C_Mem_Read>
		  qmc->Xaxis= (qmc->datas[1]<<8) | qmc->datas[0];
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	799b      	ldrb	r3, [r3, #6]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	795b      	ldrb	r3, [r3, #5]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21a      	sxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	819a      	strh	r2, [r3, #12]
		  qmc->Yaxis= (qmc->datas[3]<<8) | qmc->datas[2];
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7a1b      	ldrb	r3, [r3, #8]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	79db      	ldrb	r3, [r3, #7]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21a      	sxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	81da      	strh	r2, [r3, #14]
		  qmc->Zaxis= (qmc->datas[5]<<8) | qmc->datas[4];
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7a9b      	ldrb	r3, [r3, #10]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7a5b      	ldrb	r3, [r3, #9]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	821a      	strh	r2, [r3, #16]

		  qmc->compas=atan2f(qmc->Yaxis,qmc->Xaxis)*180.00/M_PI;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001390:	ee07 3a10 	vmov	s14, r3
 8001394:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001398:	eef0 0a47 	vmov.f32	s1, s14
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	f008 f9de 	bl	8009760 <atan2f>
 80013a4:	ee10 3a10 	vmov	r3, s0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8d5 	bl	8000558 <__aeabi_f2d>
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <QMC_read+0x140>)
 80013b4:	f7ff f928 	bl	8000608 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	a317      	add	r3, pc, #92	; (adr r3, 8001420 <QMC_read+0x138>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff fa49 	bl	800085c <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbf1 	bl	8000bb8 <__aeabi_d2f>
 80013d6:	4602      	mov	r2, r0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]

		  if(qmc->compas>0)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edd3 7a06 	vldr	s15, [r3, #24]
 80013e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	dd04      	ble.n	80013f6 <QMC_read+0x10e>
		  {
			  qmc->heading= qmc->compas;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	e00c      	b.n	8001410 <QMC_read+0x128>
		  }
		  else
		  {
			  qmc->heading=360+qmc->compas;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80013fc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800142c <QMC_read+0x144>
 8001400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	edc3 7a05 	vstr	s15, [r3, #20]
 800140a:	e001      	b.n	8001410 <QMC_read+0x128>
		  }
	  }
	  else
	  {
		  return 1;
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <QMC_read+0x12a>
	  }
return 0;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	f3af 8000 	nop.w
 8001420:	54442d18 	.word	0x54442d18
 8001424:	400921fb 	.word	0x400921fb
 8001428:	40668000 	.word	0x40668000
 800142c:	43b40000 	.word	0x43b40000

08001430 <setPitchAngle>:
extern float triangle_point_h;

extern float alfay;
extern float alfax;

void setPitchAngle(float xg, float zg){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
 800143a:	edc7 0a00 	vstr	s1, [r7]
	if(zg > 0 && xg > 0){ // 1 cwiartka plaszczyzny gziemskiego i y samolot (obrot od 0 do 90 w prawo) alfa od 0 do pi/2
 800143e:	edd7 7a00 	vldr	s15, [r7]
 8001442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144a:	dd19      	ble.n	8001480 <setPitchAngle+0x50>
 800144c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	dd12      	ble.n	8001480 <setPitchAngle+0x50>
			alfax = acos(xg);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff f87c 	bl	8000558 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	ec43 2b10 	vmov	d0, r2, r3
 8001468:	f008 f946 	bl	80096f8 <acos>
 800146c:	ec53 2b10 	vmov	r2, r3, d0
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fba0 	bl	8000bb8 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	4a3f      	ldr	r2, [pc, #252]	; (8001578 <setPitchAngle+0x148>)
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e072      	b.n	8001566 <setPitchAngle+0x136>

		}
		else if(zg > 0 && xg < 0){ // cwiartka 2 (obrot od 0 do -90 w prawo) alfa od pi/2 do pi
 8001480:	edd7 7a00 	vldr	s15, [r7]
 8001484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	dd19      	ble.n	80014c2 <setPitchAngle+0x92>
 800148e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001492:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	d512      	bpl.n	80014c2 <setPitchAngle+0x92>
			alfax = acos(xg);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff f85b 	bl	8000558 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	ec43 2b10 	vmov	d0, r2, r3
 80014aa:	f008 f925 	bl	80096f8 <acos>
 80014ae:	ec53 2b10 	vmov	r2, r3, d0
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fb7f 	bl	8000bb8 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <setPitchAngle+0x148>)
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e051      	b.n	8001566 <setPitchAngle+0x136>

		}
		else if(zg < 0 && xg < 0){ // cwiartka 3 (obrot od -90 do -180 w prawo) alfa od pi do 3/4 pi
 80014c2:	edd7 7a00 	vldr	s15, [r7]
 80014c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	d520      	bpl.n	8001512 <setPitchAngle+0xe2>
 80014d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d519      	bpl.n	8001512 <setPitchAngle+0xe2>
			alfax = 2*M_PI - acos(xg); // te same co w 2 cwiartce ale alfa wieksza o 90 stopni
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff f83a 	bl	8000558 <__aeabi_f2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	ec43 2b10 	vmov	d0, r2, r3
 80014ec:	f008 f904 	bl	80096f8 <acos>
 80014f0:	ec53 2b10 	vmov	r2, r3, d0
 80014f4:	a11e      	add	r1, pc, #120	; (adr r1, 8001570 <setPitchAngle+0x140>)
 80014f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014fa:	f7fe fecd 	bl	8000298 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fb57 	bl	8000bb8 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	4a1a      	ldr	r2, [pc, #104]	; (8001578 <setPitchAngle+0x148>)
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e029      	b.n	8001566 <setPitchAngle+0x136>

		}
		else if(zg < 0 && xg > 0){ // cwiartka 4 (obrot od -180 do -270 w prawo) alfa od 3/4 pi do 2 pi
 8001512:	edd7 7a00 	vldr	s15, [r7]
 8001516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	d400      	bmi.n	8001522 <setPitchAngle+0xf2>
			alfax = 2*M_PI - acos(xg); //te same wartosci co w 1 cwiartce ale alfa wieksza o 270 stopni

		}
}
 8001520:	e021      	b.n	8001566 <setPitchAngle+0x136>
		else if(zg < 0 && xg > 0){ // cwiartka 4 (obrot od -180 do -270 w prawo) alfa od 3/4 pi do 2 pi
 8001522:	edd7 7a01 	vldr	s15, [r7, #4]
 8001526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	dc00      	bgt.n	8001532 <setPitchAngle+0x102>
}
 8001530:	e019      	b.n	8001566 <setPitchAngle+0x136>
			alfax = 2*M_PI - acos(xg); //te same wartosci co w 1 cwiartce ale alfa wieksza o 270 stopni
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff f810 	bl	8000558 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	ec43 2b10 	vmov	d0, r2, r3
 8001540:	f008 f8da 	bl	80096f8 <acos>
 8001544:	ec53 2b10 	vmov	r2, r3, d0
 8001548:	a109      	add	r1, pc, #36	; (adr r1, 8001570 <setPitchAngle+0x140>)
 800154a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800154e:	f7fe fea3 	bl	8000298 <__aeabi_dsub>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb2d 	bl	8000bb8 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	4a05      	ldr	r2, [pc, #20]	; (8001578 <setPitchAngle+0x148>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	e7ff      	b.n	8001566 <setPitchAngle+0x136>
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	54442d18 	.word	0x54442d18
 8001574:	401921fb 	.word	0x401921fb
 8001578:	20000324 	.word	0x20000324
 800157c:	00000000 	.word	0x00000000

08001580 <setBankLine>:
void setBankLine(float zg, float yg){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	ed87 0a01 	vstr	s0, [r7, #4]
 800158a:	edc7 0a00 	vstr	s1, [r7]


	if(zg > 0 && yg > 0){ // 1 cwiartka plaszczyzny gziemskiego i y samolot (obrot od 0 do 90 w prawo) alfa od 0 do pi/2
 800158e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	f340 80ab 	ble.w	80016f4 <setBankLine+0x174>
 800159e:	edd7 7a00 	vldr	s15, [r7]
 80015a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	f340 80a3 	ble.w	80016f4 <setBankLine+0x174>
		alfay = acos(yg);
 80015ae:	6838      	ldr	r0, [r7, #0]
 80015b0:	f7fe ffd2 	bl	8000558 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	ec43 2b10 	vmov	d0, r2, r3
 80015bc:	f008 f89c 	bl	80096f8 <acos>
 80015c0:	ec53 2b10 	vmov	r2, r3, d0
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff faf6 	bl	8000bb8 <__aeabi_d2f>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4aa6      	ldr	r2, [pc, #664]	; (8001868 <setBankLine+0x2e8>)
 80015d0:	6013      	str	r3, [r2, #0]
		height_point = sin(alfay-M_PI_2)*Image_radius;
 80015d2:	4ba5      	ldr	r3, [pc, #660]	; (8001868 <setBankLine+0x2e8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffbe 	bl	8000558 <__aeabi_f2d>
 80015dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8001860 <setBankLine+0x2e0>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7fe fe59 	bl	8000298 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	ec43 2b17 	vmov	d7, r2, r3
 80015ee:	eeb0 0a47 	vmov.f32	s0, s14
 80015f2:	eef0 0a67 	vmov.f32	s1, s15
 80015f6:	f008 f827 	bl	8009648 <sin>
 80015fa:	ec51 0b10 	vmov	r0, r1, d0
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b9a      	ldr	r3, [pc, #616]	; (800186c <setBankLine+0x2ec>)
 8001604:	f7ff f800 	bl	8000608 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fad2 	bl	8000bb8 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4a96      	ldr	r2, [pc, #600]	; (8001870 <setBankLine+0x2f0>)
 8001618:	6013      	str	r3, [r2, #0]
		width_point = cos(alfay-M_PI_2)*Image_radius;
 800161a:	4b93      	ldr	r3, [pc, #588]	; (8001868 <setBankLine+0x2e8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff9a 	bl	8000558 <__aeabi_f2d>
 8001624:	a38e      	add	r3, pc, #568	; (adr r3, 8001860 <setBankLine+0x2e0>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe fe35 	bl	8000298 <__aeabi_dsub>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	ec43 2b17 	vmov	d7, r2, r3
 8001636:	eeb0 0a47 	vmov.f32	s0, s14
 800163a:	eef0 0a67 	vmov.f32	s1, s15
 800163e:	f007 ffaf 	bl	80095a0 <cos>
 8001642:	ec51 0b10 	vmov	r0, r1, d0
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b88      	ldr	r3, [pc, #544]	; (800186c <setBankLine+0x2ec>)
 800164c:	f7fe ffdc 	bl	8000608 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff faae 	bl	8000bb8 <__aeabi_d2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4a85      	ldr	r2, [pc, #532]	; (8001874 <setBankLine+0x2f4>)
 8001660:	6013      	str	r3, [r2, #0]
		triangle_point_h = sin(alfay)*Image_radius/5;
 8001662:	4b81      	ldr	r3, [pc, #516]	; (8001868 <setBankLine+0x2e8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff76 	bl	8000558 <__aeabi_f2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	ec43 2b10 	vmov	d0, r2, r3
 8001674:	f007 ffe8 	bl	8009648 <sin>
 8001678:	ec51 0b10 	vmov	r0, r1, d0
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b7a      	ldr	r3, [pc, #488]	; (800186c <setBankLine+0x2ec>)
 8001682:	f7fe ffc1 	bl	8000608 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b79      	ldr	r3, [pc, #484]	; (8001878 <setBankLine+0x2f8>)
 8001694:	f7ff f8e2 	bl	800085c <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa8a 	bl	8000bb8 <__aeabi_d2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a75      	ldr	r2, [pc, #468]	; (800187c <setBankLine+0x2fc>)
 80016a8:	6013      	str	r3, [r2, #0]
		triangle_point_w = cos(alfay)*Image_radius/5;
 80016aa:	4b6f      	ldr	r3, [pc, #444]	; (8001868 <setBankLine+0x2e8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff52 	bl	8000558 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b10 	vmov	d0, r2, r3
 80016bc:	f007 ff70 	bl	80095a0 <cos>
 80016c0:	ec51 0b10 	vmov	r0, r1, d0
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b68      	ldr	r3, [pc, #416]	; (800186c <setBankLine+0x2ec>)
 80016ca:	f7fe ff9d 	bl	8000608 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <setBankLine+0x2f8>)
 80016dc:	f7ff f8be 	bl	800085c <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff fa66 	bl	8000bb8 <__aeabi_d2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a64      	ldr	r2, [pc, #400]	; (8001880 <setBankLine+0x300>)
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e23b      	b.n	8001b6c <setBankLine+0x5ec>
	}
	else if(zg > 0 && yg < 0){ // cwiartka 2 (obrot od 0 do -90 w prawo) alfa od pi/2 do pi
 80016f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	f340 80c0 	ble.w	8001884 <setBankLine+0x304>
 8001704:	edd7 7a00 	vldr	s15, [r7]
 8001708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	f140 80b8 	bpl.w	8001884 <setBankLine+0x304>
		alfay = acos(yg);
 8001714:	6838      	ldr	r0, [r7, #0]
 8001716:	f7fe ff1f 	bl	8000558 <__aeabi_f2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	ec43 2b10 	vmov	d0, r2, r3
 8001722:	f007 ffe9 	bl	80096f8 <acos>
 8001726:	ec53 2b10 	vmov	r2, r3, d0
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa43 	bl	8000bb8 <__aeabi_d2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <setBankLine+0x2e8>)
 8001736:	6013      	str	r3, [r2, #0]
		height_point = sin(alfay-M_PI_2)*Image_radius;
 8001738:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <setBankLine+0x2e8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff0b 	bl	8000558 <__aeabi_f2d>
 8001742:	a347      	add	r3, pc, #284	; (adr r3, 8001860 <setBankLine+0x2e0>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe fda6 	bl	8000298 <__aeabi_dsub>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	ec43 2b17 	vmov	d7, r2, r3
 8001754:	eeb0 0a47 	vmov.f32	s0, s14
 8001758:	eef0 0a67 	vmov.f32	s1, s15
 800175c:	f007 ff74 	bl	8009648 <sin>
 8001760:	ec51 0b10 	vmov	r0, r1, d0
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <setBankLine+0x2ec>)
 800176a:	f7fe ff4d 	bl	8000608 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa1f 	bl	8000bb8 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
 800177c:	4a3c      	ldr	r2, [pc, #240]	; (8001870 <setBankLine+0x2f0>)
 800177e:	6013      	str	r3, [r2, #0]
		width_point = cos(alfay-M_PI_2)*Image_radius;
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <setBankLine+0x2e8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fee7 	bl	8000558 <__aeabi_f2d>
 800178a:	a335      	add	r3, pc, #212	; (adr r3, 8001860 <setBankLine+0x2e0>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe fd82 	bl	8000298 <__aeabi_dsub>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	ec43 2b17 	vmov	d7, r2, r3
 800179c:	eeb0 0a47 	vmov.f32	s0, s14
 80017a0:	eef0 0a67 	vmov.f32	s1, s15
 80017a4:	f007 fefc 	bl	80095a0 <cos>
 80017a8:	ec51 0b10 	vmov	r0, r1, d0
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b2e      	ldr	r3, [pc, #184]	; (800186c <setBankLine+0x2ec>)
 80017b2:	f7fe ff29 	bl	8000608 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9fb 	bl	8000bb8 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a2b      	ldr	r2, [pc, #172]	; (8001874 <setBankLine+0x2f4>)
 80017c6:	6013      	str	r3, [r2, #0]
		triangle_point_h = sin(alfay)*Image_radius/5;
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <setBankLine+0x2e8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fec3 	bl	8000558 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	ec43 2b10 	vmov	d0, r2, r3
 80017da:	f007 ff35 	bl	8009648 <sin>
 80017de:	ec51 0b10 	vmov	r0, r1, d0
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <setBankLine+0x2ec>)
 80017e8:	f7fe ff0e 	bl	8000608 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <setBankLine+0x2f8>)
 80017fa:	f7ff f82f 	bl	800085c <__aeabi_ddiv>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f9d7 	bl	8000bb8 <__aeabi_d2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4a1b      	ldr	r2, [pc, #108]	; (800187c <setBankLine+0x2fc>)
 800180e:	6013      	str	r3, [r2, #0]
		triangle_point_w = cos(alfay)*Image_radius/5;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <setBankLine+0x2e8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe9f 	bl	8000558 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b10 	vmov	d0, r2, r3
 8001822:	f007 febd 	bl	80095a0 <cos>
 8001826:	ec51 0b10 	vmov	r0, r1, d0
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <setBankLine+0x2ec>)
 8001830:	f7fe feea 	bl	8000608 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <setBankLine+0x2f8>)
 8001842:	f7ff f80b 	bl	800085c <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9b3 	bl	8000bb8 <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <setBankLine+0x300>)
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e188      	b.n	8001b6c <setBankLine+0x5ec>
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	54442d18 	.word	0x54442d18
 8001864:	3ff921fb 	.word	0x3ff921fb
 8001868:	20000320 	.word	0x20000320
 800186c:	40490000 	.word	0x40490000
 8001870:	20000314 	.word	0x20000314
 8001874:	20000310 	.word	0x20000310
 8001878:	40140000 	.word	0x40140000
 800187c:	2000031c 	.word	0x2000031c
 8001880:	20000318 	.word	0x20000318
	}
	else if(zg < 0 && yg < 0){ // cwiartka 3 (obrot od -90 do -180 w prawo) alfa od pi do 3/4 pi
 8001884:	edd7 7a01 	vldr	s15, [r7, #4]
 8001888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	f140 80b2 	bpl.w	80019f8 <setBankLine+0x478>
 8001894:	edd7 7a00 	vldr	s15, [r7]
 8001898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	f140 80aa 	bpl.w	80019f8 <setBankLine+0x478>
		alfay = 2*M_PI - acos(yg); // te same co w 2 cwiartce ale alfa wieksza o 90 stopni
 80018a4:	6838      	ldr	r0, [r7, #0]
 80018a6:	f7fe fe57 	bl	8000558 <__aeabi_f2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	ec43 2b10 	vmov	d0, r2, r3
 80018b2:	f007 ff21 	bl	80096f8 <acos>
 80018b6:	ec53 2b10 	vmov	r2, r3, d0
 80018ba:	a1b1      	add	r1, pc, #708	; (adr r1, 8001b80 <setBankLine+0x600>)
 80018bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018c0:	f7fe fcea 	bl	8000298 <__aeabi_dsub>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f974 	bl	8000bb8 <__aeabi_d2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4aad      	ldr	r2, [pc, #692]	; (8001b88 <setBankLine+0x608>)
 80018d4:	6013      	str	r3, [r2, #0]
		height_point = sin(alfay-M_PI_2)*Image_radius;
 80018d6:	4bac      	ldr	r3, [pc, #688]	; (8001b88 <setBankLine+0x608>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe3c 	bl	8000558 <__aeabi_f2d>
 80018e0:	a3a5      	add	r3, pc, #660	; (adr r3, 8001b78 <setBankLine+0x5f8>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fcd7 	bl	8000298 <__aeabi_dsub>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	ec43 2b17 	vmov	d7, r2, r3
 80018f2:	eeb0 0a47 	vmov.f32	s0, s14
 80018f6:	eef0 0a67 	vmov.f32	s1, s15
 80018fa:	f007 fea5 	bl	8009648 <sin>
 80018fe:	ec51 0b10 	vmov	r0, r1, d0
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4ba1      	ldr	r3, [pc, #644]	; (8001b8c <setBankLine+0x60c>)
 8001908:	f7fe fe7e 	bl	8000608 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f950 	bl	8000bb8 <__aeabi_d2f>
 8001918:	4603      	mov	r3, r0
 800191a:	4a9d      	ldr	r2, [pc, #628]	; (8001b90 <setBankLine+0x610>)
 800191c:	6013      	str	r3, [r2, #0]
		width_point = cos(alfay-M_PI_2)*Image_radius;
 800191e:	4b9a      	ldr	r3, [pc, #616]	; (8001b88 <setBankLine+0x608>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe18 	bl	8000558 <__aeabi_f2d>
 8001928:	a393      	add	r3, pc, #588	; (adr r3, 8001b78 <setBankLine+0x5f8>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fcb3 	bl	8000298 <__aeabi_dsub>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	ec43 2b17 	vmov	d7, r2, r3
 800193a:	eeb0 0a47 	vmov.f32	s0, s14
 800193e:	eef0 0a67 	vmov.f32	s1, s15
 8001942:	f007 fe2d 	bl	80095a0 <cos>
 8001946:	ec51 0b10 	vmov	r0, r1, d0
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b8f      	ldr	r3, [pc, #572]	; (8001b8c <setBankLine+0x60c>)
 8001950:	f7fe fe5a 	bl	8000608 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f92c 	bl	8000bb8 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	4a8c      	ldr	r2, [pc, #560]	; (8001b94 <setBankLine+0x614>)
 8001964:	6013      	str	r3, [r2, #0]
		triangle_point_h = sin(alfay)*Image_radius/5;
 8001966:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <setBankLine+0x608>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdf4 	bl	8000558 <__aeabi_f2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	ec43 2b10 	vmov	d0, r2, r3
 8001978:	f007 fe66 	bl	8009648 <sin>
 800197c:	ec51 0b10 	vmov	r0, r1, d0
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <setBankLine+0x60c>)
 8001986:	f7fe fe3f 	bl	8000608 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <setBankLine+0x618>)
 8001998:	f7fe ff60 	bl	800085c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f908 	bl	8000bb8 <__aeabi_d2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a7c      	ldr	r2, [pc, #496]	; (8001b9c <setBankLine+0x61c>)
 80019ac:	6013      	str	r3, [r2, #0]
		triangle_point_w = cos(alfay)*Image_radius/5;
 80019ae:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <setBankLine+0x608>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdd0 	bl	8000558 <__aeabi_f2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	ec43 2b10 	vmov	d0, r2, r3
 80019c0:	f007 fdee 	bl	80095a0 <cos>
 80019c4:	ec51 0b10 	vmov	r0, r1, d0
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <setBankLine+0x60c>)
 80019ce:	f7fe fe1b 	bl	8000608 <__aeabi_dmul>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <setBankLine+0x618>)
 80019e0:	f7fe ff3c 	bl	800085c <__aeabi_ddiv>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f8e4 	bl	8000bb8 <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a6b      	ldr	r2, [pc, #428]	; (8001ba0 <setBankLine+0x620>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e0b9      	b.n	8001b6c <setBankLine+0x5ec>
	}
	else if(zg < 0 && yg > 0){ // cwiartka 4 (obrot od -180 do -270 w prawo) alfa od 3/4 pi do 2 pi
 80019f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a04:	d400      	bmi.n	8001a08 <setBankLine+0x488>
		height_point = sin(alfay-M_PI_2)*Image_radius;
		width_point = cos(alfay-M_PI_2)*Image_radius;
		triangle_point_h = sin(alfay)*Image_radius/5;
		triangle_point_w = cos(alfay)*Image_radius/5;
	}
}
 8001a06:	e0b1      	b.n	8001b6c <setBankLine+0x5ec>
	else if(zg < 0 && yg > 0){ // cwiartka 4 (obrot od -180 do -270 w prawo) alfa od 3/4 pi do 2 pi
 8001a08:	edd7 7a00 	vldr	s15, [r7]
 8001a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	dc00      	bgt.n	8001a18 <setBankLine+0x498>
}
 8001a16:	e0a9      	b.n	8001b6c <setBankLine+0x5ec>
		alfay = 2*M_PI - acos(yg); //te same wartosci co w 1 cwiartce ale alfa wieksza o 270 stopni
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f7fe fd9d 	bl	8000558 <__aeabi_f2d>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	ec43 2b10 	vmov	d0, r2, r3
 8001a26:	f007 fe67 	bl	80096f8 <acos>
 8001a2a:	ec53 2b10 	vmov	r2, r3, d0
 8001a2e:	a154      	add	r1, pc, #336	; (adr r1, 8001b80 <setBankLine+0x600>)
 8001a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a34:	f7fe fc30 	bl	8000298 <__aeabi_dsub>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8ba 	bl	8000bb8 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a50      	ldr	r2, [pc, #320]	; (8001b88 <setBankLine+0x608>)
 8001a48:	6013      	str	r3, [r2, #0]
		height_point = sin(alfay-M_PI_2)*Image_radius;
 8001a4a:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <setBankLine+0x608>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd82 	bl	8000558 <__aeabi_f2d>
 8001a54:	a348      	add	r3, pc, #288	; (adr r3, 8001b78 <setBankLine+0x5f8>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe fc1d 	bl	8000298 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	ec43 2b17 	vmov	d7, r2, r3
 8001a66:	eeb0 0a47 	vmov.f32	s0, s14
 8001a6a:	eef0 0a67 	vmov.f32	s1, s15
 8001a6e:	f007 fdeb 	bl	8009648 <sin>
 8001a72:	ec51 0b10 	vmov	r0, r1, d0
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <setBankLine+0x60c>)
 8001a7c:	f7fe fdc4 	bl	8000608 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f896 	bl	8000bb8 <__aeabi_d2f>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a40      	ldr	r2, [pc, #256]	; (8001b90 <setBankLine+0x610>)
 8001a90:	6013      	str	r3, [r2, #0]
		width_point = cos(alfay-M_PI_2)*Image_radius;
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <setBankLine+0x608>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd5e 	bl	8000558 <__aeabi_f2d>
 8001a9c:	a336      	add	r3, pc, #216	; (adr r3, 8001b78 <setBankLine+0x5f8>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fbf9 	bl	8000298 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	ec43 2b17 	vmov	d7, r2, r3
 8001aae:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab2:	eef0 0a67 	vmov.f32	s1, s15
 8001ab6:	f007 fd73 	bl	80095a0 <cos>
 8001aba:	ec51 0b10 	vmov	r0, r1, d0
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <setBankLine+0x60c>)
 8001ac4:	f7fe fda0 	bl	8000608 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7ff f872 	bl	8000bb8 <__aeabi_d2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a2f      	ldr	r2, [pc, #188]	; (8001b94 <setBankLine+0x614>)
 8001ad8:	6013      	str	r3, [r2, #0]
		triangle_point_h = sin(alfay)*Image_radius/5;
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <setBankLine+0x608>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd3a 	bl	8000558 <__aeabi_f2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	ec43 2b10 	vmov	d0, r2, r3
 8001aec:	f007 fdac 	bl	8009648 <sin>
 8001af0:	ec51 0b10 	vmov	r0, r1, d0
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <setBankLine+0x60c>)
 8001afa:	f7fe fd85 	bl	8000608 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <setBankLine+0x618>)
 8001b0c:	f7fe fea6 	bl	800085c <__aeabi_ddiv>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff f84e 	bl	8000bb8 <__aeabi_d2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <setBankLine+0x61c>)
 8001b20:	6013      	str	r3, [r2, #0]
		triangle_point_w = cos(alfay)*Image_radius/5;
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <setBankLine+0x608>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fd16 	bl	8000558 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	ec43 2b10 	vmov	d0, r2, r3
 8001b34:	f007 fd34 	bl	80095a0 <cos>
 8001b38:	ec51 0b10 	vmov	r0, r1, d0
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <setBankLine+0x60c>)
 8001b42:	f7fe fd61 	bl	8000608 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <setBankLine+0x618>)
 8001b54:	f7fe fe82 	bl	800085c <__aeabi_ddiv>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff f82a 	bl	8000bb8 <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <setBankLine+0x620>)
 8001b68:	6013      	str	r3, [r2, #0]
}
 8001b6a:	e7ff      	b.n	8001b6c <setBankLine+0x5ec>
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	f3af 8000 	nop.w
 8001b78:	54442d18 	.word	0x54442d18
 8001b7c:	3ff921fb 	.word	0x3ff921fb
 8001b80:	54442d18 	.word	0x54442d18
 8001b84:	401921fb 	.word	0x401921fb
 8001b88:	20000320 	.word	0x20000320
 8001b8c:	40490000 	.word	0x40490000
 8001b90:	20000314 	.word	0x20000314
 8001b94:	20000310 	.word	0x20000310
 8001b98:	40140000 	.word	0x40140000
 8001b9c:	2000031c 	.word	0x2000031c
 8001ba0:	20000318 	.word	0x20000318
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <setPitchPoint>:

void setPitchPoint(float alfax){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	ed87 0a01 	vstr	s0, [r7, #4]

	if(alfax >Horizon_1_high && alfax < Horizon_1_low){ //zakres normalny nachylenia od -60 do 60 stopni
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fcd0 	bl	8000558 <__aeabi_f2d>
 8001bb8:	a35d      	add	r3, pc, #372	; (adr r3, 8001d30 <setPitchPoint+0x188>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe ffb3 	bl	8000b28 <__aeabi_dcmpgt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d025      	beq.n	8001c14 <setPitchPoint+0x6c>
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7fe fcc5 	bl	8000558 <__aeabi_f2d>
 8001bce:	a356      	add	r3, pc, #344	; (adr r3, 8001d28 <setPitchPoint+0x180>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe ff8a 	bl	8000aec <__aeabi_dcmplt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d01a      	beq.n	8001c14 <setPitchPoint+0x6c>
	        pitch_point = ((240/M_PI)*alfax -40);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fcba 	bl	8000558 <__aeabi_f2d>
 8001be4:	a35a      	add	r3, pc, #360	; (adr r3, 8001d50 <setPitchPoint+0x1a8>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fd0d 	bl	8000608 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <setPitchPoint+0x198>)
 8001bfc:	f7fe fb4c 	bl	8000298 <__aeabi_dsub>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7fe ffd6 	bl	8000bb8 <__aeabi_d2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <setPitchPoint+0x19c>)
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e079      	b.n	8001d08 <setPitchPoint+0x160>

	    }
	    else if(alfax >Horizon_2_low && alfax < Horizon_2_high){
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7fe fc9f 	bl	8000558 <__aeabi_f2d>
 8001c1a:	a33d      	add	r3, pc, #244	; (adr r3, 8001d10 <setPitchPoint+0x168>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe ff82 	bl	8000b28 <__aeabi_dcmpgt>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d025      	beq.n	8001c76 <setPitchPoint+0xce>
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fc94 	bl	8000558 <__aeabi_f2d>
 8001c30:	a339      	add	r3, pc, #228	; (adr r3, 8001d18 <setPitchPoint+0x170>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe ff59 	bl	8000aec <__aeabi_dcmplt>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01a      	beq.n	8001c76 <setPitchPoint+0xce>
	        pitch_point = ((-240/M_PI)*alfax +440);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7fe fc89 	bl	8000558 <__aeabi_f2d>
 8001c46:	a336      	add	r3, pc, #216	; (adr r3, 8001d20 <setPitchPoint+0x178>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fcdc 	bl	8000608 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <setPitchPoint+0x1a0>)
 8001c5e:	f7fe fb1d 	bl	800029c <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffa5 	bl	8000bb8 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <setPitchPoint+0x19c>)
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e048      	b.n	8001d08 <setPitchPoint+0x160>

	    }
	    else if(alfax >Horizon_1_low && alfax < Horizon_2_low){
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7fe fc6e 	bl	8000558 <__aeabi_f2d>
 8001c7c:	a32a      	add	r3, pc, #168	; (adr r3, 8001d28 <setPitchPoint+0x180>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe ff51 	bl	8000b28 <__aeabi_dcmpgt>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00e      	beq.n	8001caa <setPitchPoint+0x102>
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7fe fc63 	bl	8000558 <__aeabi_f2d>
 8001c92:	a31f      	add	r3, pc, #124	; (adr r3, 8001d10 <setPitchPoint+0x168>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe ff28 	bl	8000aec <__aeabi_dcmplt>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <setPitchPoint+0x102>
	        pitch_point = 160;
 8001ca2:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <setPitchPoint+0x19c>)
 8001ca4:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <setPitchPoint+0x1a4>)
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e02e      	b.n	8001d08 <setPitchPoint+0x160>

	    }
	    else if((alfax >0 && alfax < Horizon_1_high) || (alfax >Horizon_2_high && alfax < Air_high)){
 8001caa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	dd0a      	ble.n	8001cce <setPitchPoint+0x126>
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fc4d 	bl	8000558 <__aeabi_f2d>
 8001cbe:	a31c      	add	r3, pc, #112	; (adr r3, 8001d30 <setPitchPoint+0x188>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe ff12 	bl	8000aec <__aeabi_dcmplt>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d117      	bne.n	8001cfe <setPitchPoint+0x156>
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fc42 	bl	8000558 <__aeabi_f2d>
 8001cd4:	a310      	add	r3, pc, #64	; (adr r3, 8001d18 <setPitchPoint+0x170>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe ff25 	bl	8000b28 <__aeabi_dcmpgt>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d100      	bne.n	8001ce6 <setPitchPoint+0x13e>
	        pitch_point = 0;

	    }
}
 8001ce4:	e010      	b.n	8001d08 <setPitchPoint+0x160>
	    else if((alfax >0 && alfax < Horizon_1_high) || (alfax >Horizon_2_high && alfax < Air_high)){
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fc36 	bl	8000558 <__aeabi_f2d>
 8001cec:	a312      	add	r3, pc, #72	; (adr r3, 8001d38 <setPitchPoint+0x190>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fefb 	bl	8000aec <__aeabi_dcmplt>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d100      	bne.n	8001cfe <setPitchPoint+0x156>
}
 8001cfc:	e004      	b.n	8001d08 <setPitchPoint+0x160>
	        pitch_point = 0;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <setPitchPoint+0x19c>)
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	e7ff      	b.n	8001d08 <setPitchPoint+0x160>
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	60aa64c3 	.word	0x60aa64c3
 8001d14:	400d5254 	.word	0x400d5254
 8001d18:	95182a99 	.word	0x95182a99
 8001d1c:	401709d4 	.word	0x401709d4
 8001d20:	66ed2bfb 	.word	0x66ed2bfb
 8001d24:	c053193d 	.word	0xc053193d
 8001d28:	fbe76c8b 	.word	0xfbe76c8b
 8001d2c:	4004f1a9 	.word	0x4004f1a9
 8001d30:	7ef9db23 	.word	0x7ef9db23
 8001d34:	3fe0bc6a 	.word	0x3fe0bc6a
 8001d38:	f765fd8b 	.word	0xf765fd8b
 8001d3c:	401921e4 	.word	0x401921e4
 8001d40:	40440000 	.word	0x40440000
 8001d44:	2000030c 	.word	0x2000030c
 8001d48:	407b8000 	.word	0x407b8000
 8001d4c:	43200000 	.word	0x43200000
 8001d50:	66ed2bfb 	.word	0x66ed2bfb
 8001d54:	4053193d 	.word	0x4053193d

08001d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a4f      	ldr	r2, [pc, #316]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a48      	ldr	r2, [pc, #288]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a41      	ldr	r2, [pc, #260]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <MX_GPIO_Init+0x15c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de4:	4834      	ldr	r0, [pc, #208]	; (8001eb8 <MX_GPIO_Init+0x160>)
 8001de6:	f002 f9b1 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2158      	movs	r1, #88	; 0x58
 8001dee:	4833      	ldr	r0, [pc, #204]	; (8001ebc <MX_GPIO_Init+0x164>)
 8001df0:	f002 f9ac 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R4_Pin|R3_Pin|R2_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001dfa:	4831      	ldr	r0, [pc, #196]	; (8001ec0 <MX_GPIO_Init+0x168>)
 8001dfc:	f002 f9a6 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e06:	482e      	ldr	r0, [pc, #184]	; (8001ec0 <MX_GPIO_Init+0x168>)
 8001e08:	f002 f9a0 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	4824      	ldr	r0, [pc, #144]	; (8001eb8 <MX_GPIO_Init+0x160>)
 8001e26:	f001 fff5 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin;
 8001e2a:	2358      	movs	r3, #88	; 0x58
 8001e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	481e      	ldr	r0, [pc, #120]	; (8001ebc <MX_GPIO_Init+0x164>)
 8001e42:	f001 ffe7 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 8001e46:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <MX_GPIO_Init+0x168>)
 8001e60:	f001 ffd8 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Mag_Data_Ready_Pin;
 8001e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mag_Data_Ready_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4810      	ldr	r0, [pc, #64]	; (8001ebc <MX_GPIO_Init+0x164>)
 8001e7a:	f001 ffcb 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8001e7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	480a      	ldr	r0, [pc, #40]	; (8001ec0 <MX_GPIO_Init+0x168>)
 8001e96:	f001 ffbd 	bl	8003e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2017      	movs	r0, #23
 8001ea0:	f001 ff81 	bl	8003da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ea4:	2017      	movs	r0, #23
 8001ea6:	f001 ff9a 	bl	8003dde <HAL_NVIC_EnableIRQ>

}
 8001eaa:	bf00      	nop
 8001eac:	3728      	adds	r7, #40	; 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40020400 	.word	0x40020400

08001ec4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <MX_I2C3_Init+0x54>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001ed0:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_I2C3_Init+0x58>)
 8001ed2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <MX_I2C3_Init+0x50>)
 8001f02:	f002 f955 	bl	80041b0 <HAL_I2C_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f0c:	f000 ffe4 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	2000021c 	.word	0x2000021c
 8001f18:	40005c00 	.word	0x40005c00
 8001f1c:	000186a0 	.word	0x000186a0

08001f20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <HAL_I2C_MspInit+0xc0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d14a      	bne.n	8001fd8 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_I2C_MspInit+0xc4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <HAL_I2C_MspInit+0xc4>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_I2C_MspInit+0xc4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_I2C_MspInit+0xc4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <HAL_I2C_MspInit+0xc4>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_I2C_MspInit+0xc4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f80:	2312      	movs	r3, #18
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <HAL_I2C_MspInit+0xc8>)
 8001f98:	f001 ff3c 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa0:	2312      	movs	r3, #18
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001fac:	2309      	movs	r3, #9
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480d      	ldr	r0, [pc, #52]	; (8001fec <HAL_I2C_MspInit+0xcc>)
 8001fb8:	f001 ff2c 	bl	8003e14 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_I2C_MspInit+0xc4>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_I2C_MspInit+0xc4>)
 8001fc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fca:	6413      	str	r3, [r2, #64]	; 0x40
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_I2C_MspInit+0xc4>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40005c00 	.word	0x40005c00
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40020400 	.word	0x40020400

08001ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff6:	f001 fd65 	bl	8003ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ffa:	f000 fdab 	bl	8002b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffe:	f7ff feab 	bl	8001d58 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002002:	f000 ff6f 	bl	8002ee4 <MX_SPI1_Init>
  MX_I2C3_Init();
 8002006:	f7ff ff5d 	bl	8001ec4 <MX_I2C3_Init>
  MX_TIM3_Init();
 800200a:	f001 fcbb 	bl	8003984 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init();
 800200e:	f001 f8cf 	bl	80031b0 <ST7735_Init>
  QMC_init(&pusula_sensor, &hi2c3, 200);
 8002012:	22c8      	movs	r2, #200	; 0xc8
 8002014:	49b6      	ldr	r1, [pc, #728]	; (80022f0 <main+0x300>)
 8002016:	48b7      	ldr	r0, [pc, #732]	; (80022f4 <main+0x304>)
 8002018:	f7ff f8f8 	bl	800120c <QMC_init>
  HAL_Delay(1000);
 800201c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002020:	f001 fdc2 	bl	8003ba8 <HAL_Delay>
  MPU6050_Init();
 8002024:	f7fe ff9a 	bl	8000f5c <MPU6050_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8002028:	2000      	movs	r0, #0
 800202a:	f001 fac7 	bl	80035bc <ST7735_FillScreen>
  ST7735_FillRectangleFast(0, 0, 128, 80, ST7735_BLUE);
 800202e:	231f      	movs	r3, #31
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2350      	movs	r3, #80	; 0x50
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	2100      	movs	r1, #0
 8002038:	2000      	movs	r0, #0
 800203a:	f001 fa3b 	bl	80034b4 <ST7735_FillRectangleFast>
  ST7735_FillRectangleFast(0, 80, 128, 80, ST7735_BROWN);
 800203e:	f246 13a2 	movw	r3, #24994	; 0x61a2
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2350      	movs	r3, #80	; 0x50
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	2150      	movs	r1, #80	; 0x50
 800204a:	2000      	movs	r0, #0
 800204c:	f001 fa32 	bl	80034b4 <ST7735_FillRectangleFast>
  HAL_Delay(1000);
 8002050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002054:	f001 fda8 	bl	8003ba8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 8002058:	48a7      	ldr	r0, [pc, #668]	; (80022f8 <main+0x308>)
 800205a:	f003 ff8d 	bl	8005f78 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 800205e:	4ba7      	ldr	r3, [pc, #668]	; (80022fc <main+0x30c>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002300 <main+0x310>
 8002068:	ee77 7a87 	vadd.f32	s15, s15, s14
 800206c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002070:	ee17 3a90 	vmov	r3, s15
 8002074:	b298      	uxth	r0, r3
 8002076:	4ba3      	ldr	r3, [pc, #652]	; (8002304 <main+0x314>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002308 <main+0x318>
 8002080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002088:	ee17 3a90 	vmov	r3, s15
 800208c:	b299      	uxth	r1, r3
 800208e:	4b9b      	ldr	r3, [pc, #620]	; (80022fc <main+0x30c>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002300 <main+0x310>
 8002098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b97      	ldr	r3, [pc, #604]	; (8002304 <main+0x314>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002308 <main+0x318>
 80020b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b8:	ee17 3a90 	vmov	r3, s15
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2400      	movs	r4, #0
 80020c0:	9400      	str	r4, [sp, #0]
 80020c2:	f001 fa8c 	bl	80035de <ST7735_DrawLine>
		  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 80020c6:	4b8d      	ldr	r3, [pc, #564]	; (80022fc <main+0x30c>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002300 <main+0x310>
 80020d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d8:	ee17 3a90 	vmov	r3, s15
 80020dc:	b298      	uxth	r0, r3
 80020de:	4b89      	ldr	r3, [pc, #548]	; (8002304 <main+0x314>)
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8002308 <main+0x318>
 80020e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f0:	ee17 3a90 	vmov	r3, s15
 80020f4:	b299      	uxth	r1, r3
 80020f6:	4b81      	ldr	r3, [pc, #516]	; (80022fc <main+0x30c>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002300 <main+0x310>
 8002100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002108:	ee17 3a90 	vmov	r3, s15
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <main+0x314>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002308 <main+0x318>
 8002118:	ee77 7a87 	vadd.f32	s15, s15, s14
 800211c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002120:	ee17 3a90 	vmov	r3, s15
 8002124:	b29b      	uxth	r3, r3
 8002126:	2400      	movs	r4, #0
 8002128:	9400      	str	r4, [sp, #0]
 800212a:	f001 fa58 	bl	80035de <ST7735_DrawLine>
		  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, w/5,h/5, ST7735_BLACK);
 800212e:	4b77      	ldr	r3, [pc, #476]	; (800230c <main+0x31c>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002300 <main+0x310>
 8002138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800213c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002140:	ee17 3a90 	vmov	r3, s15
 8002144:	b298      	uxth	r0, r3
 8002146:	4b72      	ldr	r3, [pc, #456]	; (8002310 <main+0x320>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002308 <main+0x318>
 8002150:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002158:	ee17 3a90 	vmov	r3, s15
 800215c:	b299      	uxth	r1, r3
 800215e:	4b67      	ldr	r3, [pc, #412]	; (80022fc <main+0x30c>)
 8002160:	ed93 7a00 	vldr	s14, [r3]
 8002164:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002300 <main+0x310>
 8002170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002178:	ee17 3a90 	vmov	r3, s15
 800217c:	b29a      	uxth	r2, r3
 800217e:	4b61      	ldr	r3, [pc, #388]	; (8002304 <main+0x314>)
 8002180:	ed93 7a00 	vldr	s14, [r3]
 8002184:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002188:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002308 <main+0x318>
 8002190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002198:	ee17 3a90 	vmov	r3, s15
 800219c:	b29b      	uxth	r3, r3
 800219e:	2400      	movs	r4, #0
 80021a0:	9400      	str	r4, [sp, #0]
 80021a2:	f001 fa1c 	bl	80035de <ST7735_DrawLine>
		  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, minus_w/5,minus_h/5, ST7735_BLACK);
 80021a6:	4b59      	ldr	r3, [pc, #356]	; (800230c <main+0x31c>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002300 <main+0x310>
 80021b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b8:	ee17 3a90 	vmov	r3, s15
 80021bc:	b298      	uxth	r0, r3
 80021be:	4b54      	ldr	r3, [pc, #336]	; (8002310 <main+0x320>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002308 <main+0x318>
 80021c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d0:	ee17 3a90 	vmov	r3, s15
 80021d4:	b299      	uxth	r1, r3
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <main+0x30c>)
 80021d8:	ed93 7a00 	vldr	s14, [r3]
 80021dc:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80021e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002300 <main+0x310>
 80021e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f0:	ee17 3a90 	vmov	r3, s15
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b43      	ldr	r3, [pc, #268]	; (8002304 <main+0x314>)
 80021f8:	ed93 7a00 	vldr	s14, [r3]
 80021fc:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002204:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002308 <main+0x318>
 8002208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800220c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002210:	ee17 3a90 	vmov	r3, s15
 8002214:	b29b      	uxth	r3, r3
 8002216:	2400      	movs	r4, #0
 8002218:	9400      	str	r4, [sp, #0]
 800221a:	f001 f9e0 	bl	80035de <ST7735_DrawLine>
//	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	  HAL_Delay(1000);
	  for(uint8_t i=0; i<16;i++){
 800221e:	2300      	movs	r3, #0
 8002220:	71fb      	strb	r3, [r7, #7]
 8002222:	e021      	b.n	8002268 <main+0x278>

	  			if(mySwitches[i]){
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	4a3b      	ldr	r2, [pc, #236]	; (8002314 <main+0x324>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d019      	beq.n	8002262 <main+0x272>

					sprintf(tab ,"przycisk %c\n"  , Keypad_keys[i]);
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	4a39      	ldr	r2, [pc, #228]	; (8002318 <main+0x328>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	461a      	mov	r2, r3
 8002236:	4939      	ldr	r1, [pc, #228]	; (800231c <main+0x32c>)
 8002238:	4839      	ldr	r0, [pc, #228]	; (8002320 <main+0x330>)
 800223a:	f005 f82f 	bl	800729c <siprintf>

					ST7735_WriteString(0, 0, tab, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800223e:	4b39      	ldr	r3, [pc, #228]	; (8002324 <main+0x334>)
 8002240:	2200      	movs	r2, #0
 8002242:	9202      	str	r2, [sp, #8]
 8002244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002248:	9201      	str	r2, [sp, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	9200      	str	r2, [sp, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a33      	ldr	r2, [pc, #204]	; (8002320 <main+0x330>)
 8002252:	2100      	movs	r1, #0
 8002254:	2000      	movs	r0, #0
 8002256:	f001 f870 	bl	800333a <ST7735_WriteString>

	  				mySwitches[i]=false;
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	4a2d      	ldr	r2, [pc, #180]	; (8002314 <main+0x324>)
 800225e:	2100      	movs	r1, #0
 8002260:	54d1      	strb	r1, [r2, r3]
	  for(uint8_t i=0; i<16;i++){
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	3301      	adds	r3, #1
 8002266:	71fb      	strb	r3, [r7, #7]
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	2b0f      	cmp	r3, #15
 800226c:	d9da      	bls.n	8002224 <main+0x234>
	  				}
	  	}
	  if(HAL_GPIO_ReadPin(Mag_Data_Ready_GPIO_Port, Mag_Data_Ready_Pin) == GPIO_PIN_SET){
 800226e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002272:	482d      	ldr	r0, [pc, #180]	; (8002328 <main+0x338>)
 8002274:	f001 ff52 	bl	800411c <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b01      	cmp	r3, #1
 800227c:	d162      	bne.n	8002344 <main+0x354>
		  if(QMC_read(&pusula_sensor)==0 )
 800227e:	481d      	ldr	r0, [pc, #116]	; (80022f4 <main+0x304>)
 8002280:	f7ff f832 	bl	80012e8 <QMC_read>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d156      	bne.n	8002338 <main+0x348>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002290:	4826      	ldr	r0, [pc, #152]	; (800232c <main+0x33c>)
 8002292:	f001 ff5b 	bl	800414c <HAL_GPIO_WritePin>
				Compas_Value=pusula_sensor.heading;
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <main+0x304>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a25      	ldr	r2, [pc, #148]	; (8002330 <main+0x340>)
 800229c:	6013      	str	r3, [r2, #0]
				sprintf(tab ,"kat %f\n X %d\n Y %d\n Z %d\n"  , pusula_sensor.heading,pusula_sensor.Xaxis,pusula_sensor.Yaxis,pusula_sensor.Zaxis);
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <main+0x304>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f958 	bl	8000558 <__aeabi_f2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4911      	ldr	r1, [pc, #68]	; (80022f4 <main+0x304>)
 80022ae:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80022b2:	4608      	mov	r0, r1
 80022b4:	490f      	ldr	r1, [pc, #60]	; (80022f4 <main+0x304>)
 80022b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ba:	460c      	mov	r4, r1
 80022bc:	490d      	ldr	r1, [pc, #52]	; (80022f4 <main+0x304>)
 80022be:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 80022c2:	9102      	str	r1, [sp, #8]
 80022c4:	9401      	str	r4, [sp, #4]
 80022c6:	9000      	str	r0, [sp, #0]
 80022c8:	491a      	ldr	r1, [pc, #104]	; (8002334 <main+0x344>)
 80022ca:	4815      	ldr	r0, [pc, #84]	; (8002320 <main+0x330>)
 80022cc:	f004 ffe6 	bl	800729c <siprintf>



				ST7735_WriteString(0, 0, tab, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <main+0x334>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <main+0x330>)
 80022e4:	2100      	movs	r1, #0
 80022e6:	2000      	movs	r0, #0
 80022e8:	f001 f827 	bl	800333a <ST7735_WriteString>
 80022ec:	e02a      	b.n	8002344 <main+0x354>
 80022ee:	bf00      	nop
 80022f0:	2000021c 	.word	0x2000021c
 80022f4:	20000270 	.word	0x20000270
 80022f8:	20000398 	.word	0x20000398
 80022fc:	20000310 	.word	0x20000310
 8002300:	42700000 	.word	0x42700000
 8002304:	20000314 	.word	0x20000314
 8002308:	42a00000 	.word	0x42a00000
 800230c:	20000318 	.word	0x20000318
 8002310:	2000031c 	.word	0x2000031c
 8002314:	2000032c 	.word	0x2000032c
 8002318:	20000008 	.word	0x20000008
 800231c:	0800b098 	.word	0x0800b098
 8002320:	20000290 	.word	0x20000290
 8002324:	20000000 	.word	0x20000000
 8002328:	40020000 	.word	0x40020000
 800232c:	40020800 	.word	0x40020800
 8002330:	2000028c 	.word	0x2000028c
 8002334:	0800b0a8 	.word	0x0800b0a8
			}
			else
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800233e:	48da      	ldr	r0, [pc, #872]	; (80026a8 <main+0x6b8>)
 8002340:	f001 ff04 	bl	800414c <HAL_GPIO_WritePin>
			}
	  }


	  MPU6050_Read_Accel();
 8002344:	f7fe fe64 	bl	8001010 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8002348:	f7fe fee2 	bl	8001110 <MPU6050_Read_Gyro>
	  setBankLine(Az, Ay);
 800234c:	4bd7      	ldr	r3, [pc, #860]	; (80026ac <main+0x6bc>)
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	4bd7      	ldr	r3, [pc, #860]	; (80026b0 <main+0x6c0>)
 8002354:	ed93 7a00 	vldr	s14, [r3]
 8002358:	eef0 0a47 	vmov.f32	s1, s14
 800235c:	eeb0 0a67 	vmov.f32	s0, s15
 8002360:	f7ff f90e 	bl	8001580 <setBankLine>
	  setPitchAngle(Ax, Az);
 8002364:	4bd3      	ldr	r3, [pc, #844]	; (80026b4 <main+0x6c4>)
 8002366:	edd3 7a00 	vldr	s15, [r3]
 800236a:	4bd0      	ldr	r3, [pc, #832]	; (80026ac <main+0x6bc>)
 800236c:	ed93 7a00 	vldr	s14, [r3]
 8002370:	eef0 0a47 	vmov.f32	s1, s14
 8002374:	eeb0 0a67 	vmov.f32	s0, s15
 8002378:	f7ff f85a 	bl	8001430 <setPitchAngle>
	  setPitchPoint(alfax);
 800237c:	4bce      	ldr	r3, [pc, #824]	; (80026b8 <main+0x6c8>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eeb0 0a67 	vmov.f32	s0, s15
 8002386:	f7ff fc0f 	bl	8001ba8 <setPitchPoint>
	  ST7735_FillRectangleFast(0, 0, 128, 160-pitch_point, ST7735_BLUE);
 800238a:	4bcc      	ldr	r3, [pc, #816]	; (80026bc <main+0x6cc>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	ed9f 7acb 	vldr	s14, [pc, #812]	; 80026c0 <main+0x6d0>
 8002394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239c:	ee17 3a90 	vmov	r3, s15
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	221f      	movs	r2, #31
 80023a4:	9200      	str	r2, [sp, #0]
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	2100      	movs	r1, #0
 80023aa:	2000      	movs	r0, #0
 80023ac:	f001 f882 	bl	80034b4 <ST7735_FillRectangleFast>
	  ST7735_FillRectangleFast(0, 160-pitch_point, 128, pitch_point, ST7735_BROWN);
 80023b0:	4bc2      	ldr	r3, [pc, #776]	; (80026bc <main+0x6cc>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 80026c0 <main+0x6d0>
 80023ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c2:	ee17 3a90 	vmov	r3, s15
 80023c6:	b299      	uxth	r1, r3
 80023c8:	4bbc      	ldr	r3, [pc, #752]	; (80026bc <main+0x6cc>)
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d2:	ee17 3a90 	vmov	r3, s15
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f246 12a2 	movw	r2, #24994	; 0x61a2
 80023dc:	9200      	str	r2, [sp, #0]
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	2000      	movs	r0, #0
 80023e2:	f001 f867 	bl	80034b4 <ST7735_FillRectangleFast>
	  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 80023e6:	4bb7      	ldr	r3, [pc, #732]	; (80026c4 <main+0x6d4>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80026c8 <main+0x6d8>
 80023f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f8:	ee17 3a90 	vmov	r3, s15
 80023fc:	b298      	uxth	r0, r3
 80023fe:	4bb3      	ldr	r3, [pc, #716]	; (80026cc <main+0x6dc>)
 8002400:	edd3 7a00 	vldr	s15, [r3]
 8002404:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80026d0 <main+0x6e0>
 8002408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002410:	ee17 3a90 	vmov	r3, s15
 8002414:	b299      	uxth	r1, r3
 8002416:	4bab      	ldr	r3, [pc, #684]	; (80026c4 <main+0x6d4>)
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80026c8 <main+0x6d8>
 8002420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002428:	ee17 3a90 	vmov	r3, s15
 800242c:	b29a      	uxth	r2, r3
 800242e:	4ba7      	ldr	r3, [pc, #668]	; (80026cc <main+0x6dc>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80026d0 <main+0x6e0>
 8002438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800243c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002440:	ee17 3a90 	vmov	r3, s15
 8002444:	b29b      	uxth	r3, r3
 8002446:	2400      	movs	r4, #0
 8002448:	9400      	str	r4, [sp, #0]
 800244a:	f001 f8c8 	bl	80035de <ST7735_DrawLine>
	  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 800244e:	4b9d      	ldr	r3, [pc, #628]	; (80026c4 <main+0x6d4>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80026c8 <main+0x6d8>
 8002458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800245c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002460:	ee17 3a90 	vmov	r3, s15
 8002464:	b298      	uxth	r0, r3
 8002466:	4b99      	ldr	r3, [pc, #612]	; (80026cc <main+0x6dc>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80026d0 <main+0x6e0>
 8002470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002478:	ee17 3a90 	vmov	r3, s15
 800247c:	b299      	uxth	r1, r3
 800247e:	4b91      	ldr	r3, [pc, #580]	; (80026c4 <main+0x6d4>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80026c8 <main+0x6d8>
 8002488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002490:	ee17 3a90 	vmov	r3, s15
 8002494:	b29a      	uxth	r2, r3
 8002496:	4b8d      	ldr	r3, [pc, #564]	; (80026cc <main+0x6dc>)
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80026d0 <main+0x6e0>
 80024a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a8:	ee17 3a90 	vmov	r3, s15
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2400      	movs	r4, #0
 80024b0:	9400      	str	r4, [sp, #0]
 80024b2:	f001 f894 	bl	80035de <ST7735_DrawLine>
	  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, w/5,h/5, ST7735_BLACK);
 80024b6:	4b87      	ldr	r3, [pc, #540]	; (80026d4 <main+0x6e4>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80026c8 <main+0x6d8>
 80024c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c8:	ee17 3a90 	vmov	r3, s15
 80024cc:	b298      	uxth	r0, r3
 80024ce:	4b82      	ldr	r3, [pc, #520]	; (80026d8 <main+0x6e8>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80026d0 <main+0x6e0>
 80024d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e0:	ee17 3a90 	vmov	r3, s15
 80024e4:	b299      	uxth	r1, r3
 80024e6:	4b77      	ldr	r3, [pc, #476]	; (80026c4 <main+0x6d4>)
 80024e8:	ed93 7a00 	vldr	s14, [r3]
 80024ec:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80024f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024f4:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80026c8 <main+0x6d8>
 80024f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002500:	ee17 3a90 	vmov	r3, s15
 8002504:	b29a      	uxth	r2, r3
 8002506:	4b71      	ldr	r3, [pc, #452]	; (80026cc <main+0x6dc>)
 8002508:	ed93 7a00 	vldr	s14, [r3]
 800250c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002514:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80026d0 <main+0x6e0>
 8002518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800251c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002520:	ee17 3a90 	vmov	r3, s15
 8002524:	b29b      	uxth	r3, r3
 8002526:	2400      	movs	r4, #0
 8002528:	9400      	str	r4, [sp, #0]
 800252a:	f001 f858 	bl	80035de <ST7735_DrawLine>
	  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, minus_w/5,minus_h/5, ST7735_BLACK);
 800252e:	4b69      	ldr	r3, [pc, #420]	; (80026d4 <main+0x6e4>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80026c8 <main+0x6d8>
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002540:	ee17 3a90 	vmov	r3, s15
 8002544:	b298      	uxth	r0, r3
 8002546:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <main+0x6e8>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80026d0 <main+0x6e0>
 8002550:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002558:	ee17 3a90 	vmov	r3, s15
 800255c:	b299      	uxth	r1, r3
 800255e:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <main+0x6d4>)
 8002560:	ed93 7a00 	vldr	s14, [r3]
 8002564:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80026c8 <main+0x6d8>
 8002570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002578:	ee17 3a90 	vmov	r3, s15
 800257c:	b29a      	uxth	r2, r3
 800257e:	4b53      	ldr	r3, [pc, #332]	; (80026cc <main+0x6dc>)
 8002580:	ed93 7a00 	vldr	s14, [r3]
 8002584:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800258c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80026d0 <main+0x6e0>
 8002590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002598:	ee17 3a90 	vmov	r3, s15
 800259c:	b29b      	uxth	r3, r3
 800259e:	2400      	movs	r4, #0
 80025a0:	9400      	str	r4, [sp, #0]
 80025a2:	f001 f81c 	bl	80035de <ST7735_DrawLine>
	  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <main+0x6d4>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80026c8 <main+0x6d8>
 80025b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b8:	ee17 3a90 	vmov	r3, s15
 80025bc:	b298      	uxth	r0, r3
 80025be:	4b43      	ldr	r3, [pc, #268]	; (80026cc <main+0x6dc>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80026d0 <main+0x6e0>
 80025c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d0:	ee17 3a90 	vmov	r3, s15
 80025d4:	b299      	uxth	r1, r3
 80025d6:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <main+0x6d4>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80026c8 <main+0x6d8>
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e8:	ee17 3a90 	vmov	r3, s15
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <main+0x6dc>)
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80026d0 <main+0x6e0>
 80025f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002600:	ee17 3a90 	vmov	r3, s15
 8002604:	b29b      	uxth	r3, r3
 8002606:	2400      	movs	r4, #0
 8002608:	9400      	str	r4, [sp, #0]
 800260a:	f000 ffe8 	bl	80035de <ST7735_DrawLine>
		  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <main+0x6d4>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80026c8 <main+0x6d8>
 8002618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800261c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002620:	ee17 3a90 	vmov	r3, s15
 8002624:	b298      	uxth	r0, r3
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <main+0x6dc>)
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80026d0 <main+0x6e0>
 8002630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002638:	ee17 3a90 	vmov	r3, s15
 800263c:	b299      	uxth	r1, r3
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <main+0x6d4>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80026c8 <main+0x6d8>
 8002648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002650:	ee17 3a90 	vmov	r3, s15
 8002654:	b29a      	uxth	r2, r3
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <main+0x6dc>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80026d0 <main+0x6e0>
 8002660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002668:	ee17 3a90 	vmov	r3, s15
 800266c:	b29b      	uxth	r3, r3
 800266e:	2400      	movs	r4, #0
 8002670:	9400      	str	r4, [sp, #0]
 8002672:	f000 ffb4 	bl	80035de <ST7735_DrawLine>
		  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, w/5,h/5, ST7735_BLACK);
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <main+0x6e4>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80026c8 <main+0x6d8>
 8002680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002688:	ee17 3a90 	vmov	r3, s15
 800268c:	b298      	uxth	r0, r3
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <main+0x6e8>)
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80026d0 <main+0x6e0>
 8002698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800269c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026a0:	ee17 3a90 	vmov	r3, s15
 80026a4:	b299      	uxth	r1, r3
 80026a6:	e019      	b.n	80026dc <main+0x6ec>
 80026a8:	40020800 	.word	0x40020800
 80026ac:	200002fc 	.word	0x200002fc
 80026b0:	200002f8 	.word	0x200002f8
 80026b4:	200002f4 	.word	0x200002f4
 80026b8:	20000324 	.word	0x20000324
 80026bc:	2000030c 	.word	0x2000030c
 80026c0:	43200000 	.word	0x43200000
 80026c4:	20000310 	.word	0x20000310
 80026c8:	42700000 	.word	0x42700000
 80026cc:	20000314 	.word	0x20000314
 80026d0:	42a00000 	.word	0x42a00000
 80026d4:	20000318 	.word	0x20000318
 80026d8:	2000031c 	.word	0x2000031c
 80026dc:	4bda      	ldr	r3, [pc, #872]	; (8002a48 <main+0xa58>)
 80026de:	ed93 7a00 	vldr	s14, [r3]
 80026e2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80026e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ea:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 8002a4c <main+0xa5c>
 80026ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f6:	ee17 3a90 	vmov	r3, s15
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4bd4      	ldr	r3, [pc, #848]	; (8002a50 <main+0xa60>)
 80026fe:	ed93 7a00 	vldr	s14, [r3]
 8002702:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800270a:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 8002a54 <main+0xa64>
 800270e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002716:	ee17 3a90 	vmov	r3, s15
 800271a:	b29b      	uxth	r3, r3
 800271c:	2400      	movs	r4, #0
 800271e:	9400      	str	r4, [sp, #0]
 8002720:	f000 ff5d 	bl	80035de <ST7735_DrawLine>
		  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, minus_w/5,minus_h/5, ST7735_BLACK);
 8002724:	4bcc      	ldr	r3, [pc, #816]	; (8002a58 <main+0xa68>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8002a4c <main+0xa5c>
 800272e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002736:	ee17 3a90 	vmov	r3, s15
 800273a:	b298      	uxth	r0, r3
 800273c:	4bc7      	ldr	r3, [pc, #796]	; (8002a5c <main+0xa6c>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002a54 <main+0xa64>
 8002746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800274a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800274e:	ee17 3a90 	vmov	r3, s15
 8002752:	b299      	uxth	r1, r3
 8002754:	4bbc      	ldr	r3, [pc, #752]	; (8002a48 <main+0xa58>)
 8002756:	ed93 7a00 	vldr	s14, [r3]
 800275a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800275e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002762:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8002a4c <main+0xa5c>
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800276e:	ee17 3a90 	vmov	r3, s15
 8002772:	b29a      	uxth	r2, r3
 8002774:	4bb6      	ldr	r3, [pc, #728]	; (8002a50 <main+0xa60>)
 8002776:	ed93 7a00 	vldr	s14, [r3]
 800277a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800277e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002782:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8002a54 <main+0xa64>
 8002786:	ee77 7a87 	vadd.f32	s15, s15, s14
 800278a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800278e:	ee17 3a90 	vmov	r3, s15
 8002792:	b29b      	uxth	r3, r3
 8002794:	2400      	movs	r4, #0
 8002796:	9400      	str	r4, [sp, #0]
 8002798:	f000 ff21 	bl	80035de <ST7735_DrawLine>
		  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 800279c:	4baa      	ldr	r3, [pc, #680]	; (8002a48 <main+0xa58>)
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002a4c <main+0xa5c>
 80027a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ae:	ee17 3a90 	vmov	r3, s15
 80027b2:	b298      	uxth	r0, r3
 80027b4:	4ba6      	ldr	r3, [pc, #664]	; (8002a50 <main+0xa60>)
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002a54 <main+0xa64>
 80027be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c6:	ee17 3a90 	vmov	r3, s15
 80027ca:	b299      	uxth	r1, r3
 80027cc:	4b9e      	ldr	r3, [pc, #632]	; (8002a48 <main+0xa58>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8002a4c <main+0xa5c>
 80027d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027de:	ee17 3a90 	vmov	r3, s15
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	4b9a      	ldr	r3, [pc, #616]	; (8002a50 <main+0xa60>)
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002a54 <main+0xa64>
 80027ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f6:	ee17 3a90 	vmov	r3, s15
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2400      	movs	r4, #0
 80027fe:	9400      	str	r4, [sp, #0]
 8002800:	f000 feed 	bl	80035de <ST7735_DrawLine>
			  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 8002804:	4b90      	ldr	r3, [pc, #576]	; (8002a48 <main+0xa58>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a4c <main+0xa5c>
 800280e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002816:	ee17 3a90 	vmov	r3, s15
 800281a:	b298      	uxth	r0, r3
 800281c:	4b8c      	ldr	r3, [pc, #560]	; (8002a50 <main+0xa60>)
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002a54 <main+0xa64>
 8002826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282e:	ee17 3a90 	vmov	r3, s15
 8002832:	b299      	uxth	r1, r3
 8002834:	4b84      	ldr	r3, [pc, #528]	; (8002a48 <main+0xa58>)
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002a4c <main+0xa5c>
 800283e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002846:	ee17 3a90 	vmov	r3, s15
 800284a:	b29a      	uxth	r2, r3
 800284c:	4b80      	ldr	r3, [pc, #512]	; (8002a50 <main+0xa60>)
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a54 <main+0xa64>
 8002856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800285a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800285e:	ee17 3a90 	vmov	r3, s15
 8002862:	b29b      	uxth	r3, r3
 8002864:	2400      	movs	r4, #0
 8002866:	9400      	str	r4, [sp, #0]
 8002868:	f000 feb9 	bl	80035de <ST7735_DrawLine>
			  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, w/5,h/5, ST7735_BLACK);
 800286c:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <main+0xa68>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002a4c <main+0xa5c>
 8002876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800287e:	ee17 3a90 	vmov	r3, s15
 8002882:	b298      	uxth	r0, r3
 8002884:	4b75      	ldr	r3, [pc, #468]	; (8002a5c <main+0xa6c>)
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002a54 <main+0xa64>
 800288e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002896:	ee17 3a90 	vmov	r3, s15
 800289a:	b299      	uxth	r1, r3
 800289c:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <main+0xa58>)
 800289e:	ed93 7a00 	vldr	s14, [r3]
 80028a2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80028a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028aa:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002a4c <main+0xa5c>
 80028ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b6:	ee17 3a90 	vmov	r3, s15
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <main+0xa60>)
 80028be:	ed93 7a00 	vldr	s14, [r3]
 80028c2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80028c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028ca:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002a54 <main+0xa64>
 80028ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028d6:	ee17 3a90 	vmov	r3, s15
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2400      	movs	r4, #0
 80028de:	9400      	str	r4, [sp, #0]
 80028e0:	f000 fe7d 	bl	80035de <ST7735_DrawLine>
			  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, minus_w/5,minus_h/5, ST7735_BLACK);
 80028e4:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <main+0xa68>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a4c <main+0xa5c>
 80028ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f6:	ee17 3a90 	vmov	r3, s15
 80028fa:	b298      	uxth	r0, r3
 80028fc:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <main+0xa6c>)
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002a54 <main+0xa64>
 8002906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800290a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800290e:	ee17 3a90 	vmov	r3, s15
 8002912:	b299      	uxth	r1, r3
 8002914:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <main+0xa58>)
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800291e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002922:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a4c <main+0xa5c>
 8002926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800292e:	ee17 3a90 	vmov	r3, s15
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <main+0xa60>)
 8002936:	ed93 7a00 	vldr	s14, [r3]
 800293a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800293e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002942:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002a54 <main+0xa64>
 8002946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800294a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294e:	ee17 3a90 	vmov	r3, s15
 8002952:	b29b      	uxth	r3, r3
 8002954:	2400      	movs	r4, #0
 8002956:	9400      	str	r4, [sp, #0]
 8002958:	f000 fe41 	bl	80035de <ST7735_DrawLine>
			  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 800295c:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <main+0xa58>)
 800295e:	edd3 7a00 	vldr	s15, [r3]
 8002962:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002a4c <main+0xa5c>
 8002966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800296a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800296e:	ee17 3a90 	vmov	r3, s15
 8002972:	b298      	uxth	r0, r3
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <main+0xa60>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002a54 <main+0xa64>
 800297e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002986:	ee17 3a90 	vmov	r3, s15
 800298a:	b299      	uxth	r1, r3
 800298c:	4b2e      	ldr	r3, [pc, #184]	; (8002a48 <main+0xa58>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002a4c <main+0xa5c>
 8002996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299e:	ee17 3a90 	vmov	r3, s15
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <main+0xa60>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002a54 <main+0xa64>
 80029ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b6:	ee17 3a90 	vmov	r3, s15
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2400      	movs	r4, #0
 80029be:	9400      	str	r4, [sp, #0]
 80029c0:	f000 fe0d 	bl	80035de <ST7735_DrawLine>
				  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <main+0xa58>)
 80029c6:	edd3 7a00 	vldr	s15, [r3]
 80029ca:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002a4c <main+0xa5c>
 80029ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d6:	ee17 3a90 	vmov	r3, s15
 80029da:	b298      	uxth	r0, r3
 80029dc:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <main+0xa60>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002a54 <main+0xa64>
 80029e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ee:	ee17 3a90 	vmov	r3, s15
 80029f2:	b299      	uxth	r1, r3
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <main+0xa58>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002a4c <main+0xa5c>
 80029fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a06:	ee17 3a90 	vmov	r3, s15
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <main+0xa60>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002a54 <main+0xa64>
 8002a16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a1e:	ee17 3a90 	vmov	r3, s15
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2400      	movs	r4, #0
 8002a26:	9400      	str	r4, [sp, #0]
 8002a28:	f000 fdd9 	bl	80035de <ST7735_DrawLine>
				  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, w/5,h/5, ST7735_BLACK);
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <main+0xa68>)
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002a4c <main+0xa5c>
 8002a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a3e:	ee17 3a90 	vmov	r3, s15
 8002a42:	b298      	uxth	r0, r3
 8002a44:	e00c      	b.n	8002a60 <main+0xa70>
 8002a46:	bf00      	nop
 8002a48:	20000310 	.word	0x20000310
 8002a4c:	42700000 	.word	0x42700000
 8002a50:	20000314 	.word	0x20000314
 8002a54:	42a00000 	.word	0x42a00000
 8002a58:	20000318 	.word	0x20000318
 8002a5c:	2000031c 	.word	0x2000031c
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <main+0xb4c>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002b40 <main+0xb50>
 8002a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a72:	ee17 3a90 	vmov	r3, s15
 8002a76:	b299      	uxth	r1, r3
 8002a78:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <main+0xb54>)
 8002a7a:	ed93 7a00 	vldr	s14, [r3]
 8002a7e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a86:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002b48 <main+0xb58>
 8002a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a92:	ee17 3a90 	vmov	r3, s15
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <main+0xb5c>)
 8002a9a:	ed93 7a00 	vldr	s14, [r3]
 8002a9e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aa6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b40 <main+0xb50>
 8002aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab2:	ee17 3a90 	vmov	r3, s15
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2400      	movs	r4, #0
 8002aba:	9400      	str	r4, [sp, #0]
 8002abc:	f000 fd8f 	bl	80035de <ST7735_DrawLine>
				  ST7735_DrawLine(60-triangle_point_w, 80+triangle_point_h, minus_w/5,minus_h/5, ST7735_BLACK);
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <main+0xb60>)
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002b48 <main+0xb58>
 8002aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad2:	ee17 3a90 	vmov	r3, s15
 8002ad6:	b298      	uxth	r0, r3
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <main+0xb4c>)
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002b40 <main+0xb50>
 8002ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aea:	ee17 3a90 	vmov	r3, s15
 8002aee:	b299      	uxth	r1, r3
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <main+0xb54>)
 8002af2:	ed93 7a00 	vldr	s14, [r3]
 8002af6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002afe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002b48 <main+0xb58>
 8002b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0a:	ee17 3a90 	vmov	r3, s15
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <main+0xb5c>)
 8002b12:	ed93 7a00 	vldr	s14, [r3]
 8002b16:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b1e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002b40 <main+0xb50>
 8002b22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b2a:	ee17 3a90 	vmov	r3, s15
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2400      	movs	r4, #0
 8002b32:	9400      	str	r4, [sp, #0]
 8002b34:	f000 fd53 	bl	80035de <ST7735_DrawLine>
	  ST7735_DrawLine((60+width_point),80-height_point,60-width_point,80+height_point, ST7735_BLACK); //narysowac samolocik w stosunku do wyznaczonych punktow na okregu
 8002b38:	f7ff ba91 	b.w	800205e <main+0x6e>
 8002b3c:	2000031c 	.word	0x2000031c
 8002b40:	42a00000 	.word	0x42a00000
 8002b44:	20000310 	.word	0x20000310
 8002b48:	42700000 	.word	0x42700000
 8002b4c:	20000314 	.word	0x20000314
 8002b50:	20000318 	.word	0x20000318

08002b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b094      	sub	sp, #80	; 0x50
 8002b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b5a:	f107 0320 	add.w	r3, r7, #32
 8002b5e:	2230      	movs	r2, #48	; 0x30
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fe38 	bl	80067d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <SystemClock_Config+0xc8>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <SystemClock_Config+0xc8>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6413      	str	r3, [r2, #64]	; 0x40
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <SystemClock_Config+0xc8>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b94:	2300      	movs	r3, #0
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <SystemClock_Config+0xcc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <SystemClock_Config+0xcc>)
 8002b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <SystemClock_Config+0xcc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bb8:	2310      	movs	r3, #16
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bc4:	2308      	movs	r3, #8
 8002bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002bc8:	2364      	movs	r3, #100	; 0x64
 8002bca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd4:	f107 0320 	add.w	r3, r7, #32
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 faa9 	bl	8005130 <HAL_RCC_OscConfig>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002be4:	f000 f978 	bl	8002ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002be8:	230f      	movs	r3, #15
 8002bea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bec:	2302      	movs	r3, #2
 8002bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	2103      	movs	r1, #3
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 fd0b 	bl	8005620 <HAL_RCC_ClockConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c10:	f000 f962 	bl	8002ed8 <Error_Handler>
  }
}
 8002c14:	bf00      	nop
 8002c16:	3750      	adds	r7, #80	; 0x50
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a2e      	ldr	r2, [pc, #184]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d156      	bne.n	8002ce4 <HAL_TIM_PeriodElapsedCallback+0xc0>
		if(HAL_GPIO_ReadPin(R1_GPIO_Port, R1_Pin)){ ///pb5 1 wiersz
 8002c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c3a:	482d      	ldr	r0, [pc, #180]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c3c:	f001 fa6e 	bl	800411c <HAL_GPIO_ReadPin>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00f      	beq.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x42>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8002c46:	2200      	movs	r2, #0
 8002c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c4c:	4828      	ldr	r0, [pc, #160]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c4e:	f001 fa7d 	bl	800414c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8002c52:	2201      	movs	r2, #1
 8002c54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c58:	4825      	ldr	r0, [pc, #148]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c5a:	f001 fa77 	bl	800414c <HAL_GPIO_WritePin>
			row = 1;
 8002c5e:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
			row = 0;
		}
	}
}
 8002c64:	e03e      	b.n	8002ce4 <HAL_TIM_PeriodElapsedCallback+0xc0>
		else if(HAL_GPIO_ReadPin(R2_GPIO_Port, R2_Pin)){
 8002c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c6a:	4821      	ldr	r0, [pc, #132]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c6c:	f001 fa56 	bl	800411c <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00f      	beq.n	8002c96 <HAL_TIM_PeriodElapsedCallback+0x72>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c7c:	481c      	ldr	r0, [pc, #112]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c7e:	f001 fa65 	bl	800414c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8002c82:	2201      	movs	r2, #1
 8002c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c88:	4819      	ldr	r0, [pc, #100]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c8a:	f001 fa5f 	bl	800414c <HAL_GPIO_WritePin>
			row = 2;
 8002c8e:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002c90:	2202      	movs	r2, #2
 8002c92:	701a      	strb	r2, [r3, #0]
}
 8002c94:	e026      	b.n	8002ce4 <HAL_TIM_PeriodElapsedCallback+0xc0>
		else if(HAL_GPIO_ReadPin(R3_GPIO_Port, R3_Pin)){
 8002c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c9a:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c9c:	f001 fa3e 	bl	800411c <HAL_GPIO_ReadPin>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00f      	beq.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0xa2>
			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cac:	4810      	ldr	r0, [pc, #64]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002cae:	f001 fa4d 	bl	800414c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cb8:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002cba:	f001 fa47 	bl	800414c <HAL_GPIO_WritePin>
			row = 3;
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	701a      	strb	r2, [r3, #0]
}
 8002cc4:	e00e      	b.n	8002ce4 <HAL_TIM_PeriodElapsedCallback+0xc0>
			HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ccc:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002cce:	f001 fa3d 	bl	800414c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002cda:	f001 fa37 	bl	800414c <HAL_GPIO_WritePin>
			row = 0;
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	20000328 	.word	0x20000328

08002cf8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == C1_Pin){
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d133      	bne.n	8002d70 <HAL_GPIO_EXTI_Callback+0x78>
		column = 0;
 8002d08:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
		switch(row){
 8002d0e:	4b70      	ldr	r3, [pc, #448]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	f200 80d2 	bhi.w	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_GPIO_EXTI_Callback+0x28>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002d41 	.word	0x08002d41
 8002d28:	08002d51 	.word	0x08002d51
 8002d2c:	08002d61 	.word	0x08002d61
			case 0 : mySwitches[column] = true; break;
 8002d30:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	5499      	strb	r1, [r3, r2]
 8002d3e:	e0be      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 1 : mySwitches[4+column] = true; break;
 8002d40:	4b62      	ldr	r3, [pc, #392]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	3304      	adds	r3, #4
 8002d48:	4a62      	ldr	r2, [pc, #392]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	54d1      	strb	r1, [r2, r3]
 8002d4e:	e0b6      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 2 : mySwitches[8+column] = true; break;
 8002d50:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	3308      	adds	r3, #8
 8002d58:	4a5e      	ldr	r2, [pc, #376]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	54d1      	strb	r1, [r2, r3]
 8002d5e:	e0ae      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 3 : mySwitches[12+column] = true; break;
 8002d60:	4b5a      	ldr	r3, [pc, #360]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	330c      	adds	r3, #12
 8002d68:	4a5a      	ldr	r2, [pc, #360]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	54d1      	strb	r1, [r2, r3]
 8002d6e:	e0a6      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
		}
	}
	else if(GPIO_Pin == C2_Pin){
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d134      	bne.n	8002de0 <HAL_GPIO_EXTI_Callback+0xe8>
		column = 1;
 8002d76:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
		switch(row){
 8002d7c:	4b54      	ldr	r3, [pc, #336]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	f200 809b 	bhi.w	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
 8002d88:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <HAL_GPIO_EXTI_Callback+0x98>)
 8002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8e:	bf00      	nop
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002db1 	.word	0x08002db1
 8002d98:	08002dc1 	.word	0x08002dc1
 8002d9c:	08002dd1 	.word	0x08002dd1
			case 0 : mySwitches[column] = true; break;
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]
 8002dae:	e086      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 1 : mySwitches[4+column] = true; break;
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	3304      	adds	r3, #4
 8002db8:	4a46      	ldr	r2, [pc, #280]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	54d1      	strb	r1, [r2, r3]
 8002dbe:	e07e      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 2 : mySwitches[8+column] = true; break;
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	4a42      	ldr	r2, [pc, #264]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	54d1      	strb	r1, [r2, r3]
 8002dce:	e076      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 3 : mySwitches[12+column] = true; break;
 8002dd0:	4b3e      	ldr	r3, [pc, #248]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	4a3e      	ldr	r2, [pc, #248]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002dda:	2101      	movs	r1, #1
 8002ddc:	54d1      	strb	r1, [r2, r3]
 8002dde:	e06e      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
		}
	}
	else if(GPIO_Pin == C3_Pin){
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	2b80      	cmp	r3, #128	; 0x80
 8002de4:	d132      	bne.n	8002e4c <HAL_GPIO_EXTI_Callback+0x154>
		column = 2;
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002de8:	2202      	movs	r2, #2
 8002dea:	701a      	strb	r2, [r3, #0]
		switch(row){
 8002dec:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d863      	bhi.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
 8002df6:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <HAL_GPIO_EXTI_Callback+0x104>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e1d 	.word	0x08002e1d
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	08002e3d 	.word	0x08002e3d
			case 0 : mySwitches[column] = true; break;
 8002e0c:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
 8002e1a:	e050      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 1 : mySwitches[4+column] = true; break;
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	3304      	adds	r3, #4
 8002e24:	4a2b      	ldr	r2, [pc, #172]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	54d1      	strb	r1, [r2, r3]
 8002e2a:	e048      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 2 : mySwitches[8+column] = true; break;
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3308      	adds	r3, #8
 8002e34:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	54d1      	strb	r1, [r2, r3]
 8002e3a:	e040      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 3 : mySwitches[12+column] = true; break;
 8002e3c:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	330c      	adds	r3, #12
 8002e44:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	54d1      	strb	r1, [r2, r3]
 8002e4a:	e038      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
		}
	}
	else if (GPIO_Pin == C4_Pin){
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e52:	d133      	bne.n	8002ebc <HAL_GPIO_EXTI_Callback+0x1c4>
		column = 3;
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002e56:	2203      	movs	r2, #3
 8002e58:	701a      	strb	r2, [r3, #0]
		switch(row){
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d82c      	bhi.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <HAL_GPIO_EXTI_Callback+0x174>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e8d 	.word	0x08002e8d
 8002e74:	08002e9d 	.word	0x08002e9d
 8002e78:	08002ead 	.word	0x08002ead
			case 0 : mySwitches[column] = true; break;
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
 8002e8a:	e018      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 1 : mySwitches[4+column] = true; break;
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3304      	adds	r3, #4
 8002e94:	4a0f      	ldr	r2, [pc, #60]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002e96:	2101      	movs	r1, #1
 8002e98:	54d1      	strb	r1, [r2, r3]
 8002e9a:	e010      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 2 : mySwitches[8+column] = true; break;
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	54d1      	strb	r1, [r2, r3]
 8002eaa:	e008      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
			case 3 : mySwitches[12+column] = true; break;
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	54d1      	strb	r1, [r2, r3]
 8002eba:	e000      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x1c6>
		}
	}
 8002ebc:	bf00      	nop


}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000329 	.word	0x20000329
 8002ed0:	20000328 	.word	0x20000328
 8002ed4:	2000032c 	.word	0x2000032c

08002ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002edc:	b672      	cpsid	i
}
 8002ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <Error_Handler+0x8>
	...

08002ee4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <MX_SPI1_Init+0x6c>)
 8002eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002ef8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002efc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f32:	220a      	movs	r2, #10
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f36:	4805      	ldr	r0, [pc, #20]	; (8002f4c <MX_SPI1_Init+0x68>)
 8002f38:	f002 fd3e 	bl	80059b8 <HAL_SPI_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002f42:	f7ff ffc9 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000033c 	.word	0x2000033c
 8002f50:	40013000 	.word	0x40013000

08002f54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_SPI_MspInit+0x84>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d12b      	bne.n	8002fce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <HAL_SPI_MspInit+0x88>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_SPI_MspInit+0x88>)
 8002f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f84:	6453      	str	r3, [r2, #68]	; 0x44
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_SPI_MspInit+0x88>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_SPI_MspInit+0x88>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <HAL_SPI_MspInit+0x88>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_SPI_MspInit+0x88>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002fae:	23a0      	movs	r3, #160	; 0xa0
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4805      	ldr	r0, [pc, #20]	; (8002fe0 <HAL_SPI_MspInit+0x8c>)
 8002fca:	f000 ff23 	bl	8003e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002fce:	bf00      	nop
 8002fd0:	3728      	adds	r7, #40	; 0x28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40013000 	.word	0x40013000
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40020000 	.word	0x40020000

08002fe4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2140      	movs	r1, #64	; 0x40
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <ST7735_Select+0x14>)
 8002fee:	f001 f8ad 	bl	800414c <HAL_GPIO_WritePin>
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40020000 	.word	0x40020000

08002ffc <ST7735_Unselect>:

void ST7735_Unselect() {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8003000:	2201      	movs	r2, #1
 8003002:	2140      	movs	r1, #64	; 0x40
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <ST7735_Unselect+0x14>)
 8003006:	f001 f8a1 	bl	800414c <HAL_GPIO_WritePin>
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40020000 	.word	0x40020000

08003014 <ST7735_Reset>:

static void ST7735_Reset() {
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8003018:	2200      	movs	r2, #0
 800301a:	2108      	movs	r1, #8
 800301c:	4806      	ldr	r0, [pc, #24]	; (8003038 <ST7735_Reset+0x24>)
 800301e:	f001 f895 	bl	800414c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003022:	2005      	movs	r0, #5
 8003024:	f000 fdc0 	bl	8003ba8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8003028:	2201      	movs	r2, #1
 800302a:	2108      	movs	r1, #8
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <ST7735_Reset+0x24>)
 800302e:	f001 f88d 	bl	800414c <HAL_GPIO_WritePin>
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40020000 	.word	0x40020000

0800303c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8003046:	2200      	movs	r2, #0
 8003048:	2110      	movs	r1, #16
 800304a:	4807      	ldr	r0, [pc, #28]	; (8003068 <ST7735_WriteCommand+0x2c>)
 800304c:	f001 f87e 	bl	800414c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003050:	1df9      	adds	r1, r7, #7
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	2201      	movs	r2, #1
 8003058:	4804      	ldr	r0, [pc, #16]	; (800306c <ST7735_WriteCommand+0x30>)
 800305a:	f002 fd36 	bl	8005aca <HAL_SPI_Transmit>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40020000 	.word	0x40020000
 800306c:	2000033c 	.word	0x2000033c

08003070 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800307a:	2201      	movs	r2, #1
 800307c:	2110      	movs	r1, #16
 800307e:	4807      	ldr	r0, [pc, #28]	; (800309c <ST7735_WriteData+0x2c>)
 8003080:	f001 f864 	bl	800414c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b29a      	uxth	r2, r3
 8003088:	f04f 33ff 	mov.w	r3, #4294967295
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4804      	ldr	r0, [pc, #16]	; (80030a0 <ST7735_WriteData+0x30>)
 8003090:	f002 fd1b 	bl	8005aca <HAL_SPI_Transmit>
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40020000 	.word	0x40020000
 80030a0:	2000033c 	.word	0x2000033c

080030a4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80030b6:	e034      	b.n	8003122 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ffb9 	bl	800303c <ST7735_WriteCommand>

        numArgs = *addr++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80030d4:	7abb      	ldrb	r3, [r7, #10]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80030de:	7abb      	ldrb	r3, [r7, #10]
 80030e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030e4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80030e6:	7abb      	ldrb	r3, [r7, #10]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80030ec:	7abb      	ldrb	r3, [r7, #10]
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ffbd 	bl	8003070 <ST7735_WriteData>
            addr += numArgs;
 80030f6:	7abb      	ldrb	r3, [r7, #10]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80030fe:	89bb      	ldrh	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800310e:	89bb      	ldrh	r3, [r7, #12]
 8003110:	2bff      	cmp	r3, #255	; 0xff
 8003112:	d102      	bne.n	800311a <ST7735_ExecuteCommandList+0x76>
 8003114:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003118:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800311a:	89bb      	ldrh	r3, [r7, #12]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fd43 	bl	8003ba8 <HAL_Delay>
    while(numCommands--) {
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	1e5a      	subs	r2, r3, #1
 8003126:	73fa      	strb	r2, [r7, #15]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1c5      	bne.n	80030b8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003136:	b590      	push	{r4, r7, lr}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	4604      	mov	r4, r0
 800313e:	4608      	mov	r0, r1
 8003140:	4611      	mov	r1, r2
 8003142:	461a      	mov	r2, r3
 8003144:	4623      	mov	r3, r4
 8003146:	71fb      	strb	r3, [r7, #7]
 8003148:	4603      	mov	r3, r0
 800314a:	71bb      	strb	r3, [r7, #6]
 800314c:	460b      	mov	r3, r1
 800314e:	717b      	strb	r3, [r7, #5]
 8003150:	4613      	mov	r3, r2
 8003152:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003154:	202a      	movs	r0, #42	; 0x2a
 8003156:	f7ff ff71 	bl	800303c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800315a:	2300      	movs	r3, #0
 800315c:	733b      	strb	r3, [r7, #12]
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	3302      	adds	r3, #2
 8003162:	b2db      	uxtb	r3, r3
 8003164:	737b      	strb	r3, [r7, #13]
 8003166:	2300      	movs	r3, #0
 8003168:	73bb      	strb	r3, [r7, #14]
 800316a:	797b      	ldrb	r3, [r7, #5]
 800316c:	3302      	adds	r3, #2
 800316e:	b2db      	uxtb	r3, r3
 8003170:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003172:	f107 030c 	add.w	r3, r7, #12
 8003176:	2104      	movs	r1, #4
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff79 	bl	8003070 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800317e:	202b      	movs	r0, #43	; 0x2b
 8003180:	f7ff ff5c 	bl	800303c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8003184:	79bb      	ldrb	r3, [r7, #6]
 8003186:	3301      	adds	r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800318c:	793b      	ldrb	r3, [r7, #4]
 800318e:	3301      	adds	r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003194:	f107 030c 	add.w	r3, r7, #12
 8003198:	2104      	movs	r1, #4
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ff68 	bl	8003070 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80031a0:	202c      	movs	r0, #44	; 0x2c
 80031a2:	f7ff ff4b 	bl	800303c <ST7735_WriteCommand>
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}
	...

080031b0 <ST7735_Init>:

void ST7735_Init() {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
    ST7735_Select();
 80031b4:	f7ff ff16 	bl	8002fe4 <ST7735_Select>
    ST7735_Reset();
 80031b8:	f7ff ff2c 	bl	8003014 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80031bc:	4806      	ldr	r0, [pc, #24]	; (80031d8 <ST7735_Init+0x28>)
 80031be:	f7ff ff71 	bl	80030a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80031c2:	4806      	ldr	r0, [pc, #24]	; (80031dc <ST7735_Init+0x2c>)
 80031c4:	f7ff ff6e 	bl	80030a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80031c8:	4805      	ldr	r0, [pc, #20]	; (80031e0 <ST7735_Init+0x30>)
 80031ca:	f7ff ff6b 	bl	80030a4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80031ce:	f7ff ff15 	bl	8002ffc <ST7735_Unselect>
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	0800be20 	.word	0x0800be20
 80031dc:	0800be5c 	.word	0x0800be5c
 80031e0:	0800be6c 	.word	0x0800be6c

080031e4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	80fb      	strh	r3, [r7, #6]
 80031ee:	460b      	mov	r3, r1
 80031f0:	80bb      	strh	r3, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b7f      	cmp	r3, #127	; 0x7f
 80031fa:	d823      	bhi.n	8003244 <ST7735_DrawPixel+0x60>
 80031fc:	88bb      	ldrh	r3, [r7, #4]
 80031fe:	2b9f      	cmp	r3, #159	; 0x9f
 8003200:	d820      	bhi.n	8003244 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8003202:	f7ff feef 	bl	8002fe4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	b2d8      	uxtb	r0, r3
 800320a:	88bb      	ldrh	r3, [r7, #4]
 800320c:	b2d9      	uxtb	r1, r3
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	3301      	adds	r3, #1
 8003214:	b2da      	uxtb	r2, r3
 8003216:	88bb      	ldrh	r3, [r7, #4]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	3301      	adds	r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f7ff ff8a 	bl	8003136 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	b29b      	uxth	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	733b      	strb	r3, [r7, #12]
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8003232:	f107 030c 	add.w	r3, r7, #12
 8003236:	2102      	movs	r1, #2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff19 	bl	8003070 <ST7735_WriteData>

    ST7735_Unselect();
 800323e:	f7ff fedd 	bl	8002ffc <ST7735_Unselect>
 8003242:	e000      	b.n	8003246 <ST7735_DrawPixel+0x62>
        return;
 8003244:	bf00      	nop
}
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800324c:	b082      	sub	sp, #8
 800324e:	b590      	push	{r4, r7, lr}
 8003250:	b089      	sub	sp, #36	; 0x24
 8003252:	af00      	add	r7, sp, #0
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
 8003256:	4603      	mov	r3, r0
 8003258:	80fb      	strh	r3, [r7, #6]
 800325a:	460b      	mov	r3, r1
 800325c:	80bb      	strh	r3, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	b2d8      	uxtb	r0, r3
 8003266:	88bb      	ldrh	r3, [r7, #4]
 8003268:	b2d9      	uxtb	r1, r3
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003272:	4413      	add	r3, r2
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b2dc      	uxtb	r4, r3
 800327a:	88bb      	ldrh	r3, [r7, #4]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003282:	4413      	add	r3, r2
 8003284:	b2db      	uxtb	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4622      	mov	r2, r4
 800328c:	f7ff ff53 	bl	8003136 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	e043      	b.n	800331e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8003296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	3b20      	subs	r3, #32
 800329c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4619      	mov	r1, r3
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	440b      	add	r3, r1
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e029      	b.n	800330c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80032c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	743b      	strb	r3, [r7, #16]
 80032d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	2102      	movs	r1, #2
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fec6 	bl	8003070 <ST7735_WriteData>
 80032e4:	e00f      	b.n	8003306 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80032e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	733b      	strb	r3, [r7, #12]
 80032f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff feb5 	bl	8003070 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	3301      	adds	r3, #1
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003310:	461a      	mov	r2, r3
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4293      	cmp	r3, r2
 8003316:	d3cf      	bcc.n	80032b8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3301      	adds	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003322:	461a      	mov	r2, r3
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	4293      	cmp	r3, r2
 8003328:	d3b5      	bcc.n	8003296 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	3724      	adds	r7, #36	; 0x24
 8003330:	46bd      	mov	sp, r7
 8003332:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003336:	b002      	add	sp, #8
 8003338:	4770      	bx	lr

0800333a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800333a:	b082      	sub	sp, #8
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af04      	add	r7, sp, #16
 8003342:	603a      	str	r2, [r7, #0]
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
 800334a:	460b      	mov	r3, r1
 800334c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800334e:	f7ff fe49 	bl	8002fe4 <ST7735_Select>

    while(*str) {
 8003352:	e02d      	b.n	80033b0 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	7d3a      	ldrb	r2, [r7, #20]
 8003358:	4413      	add	r3, r2
 800335a:	2b7f      	cmp	r3, #127	; 0x7f
 800335c:	dd13      	ble.n	8003386 <ST7735_WriteString+0x4c>
            x = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8003362:	7d7b      	ldrb	r3, [r7, #21]
 8003364:	b29a      	uxth	r2, r3
 8003366:	88bb      	ldrh	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800336c:	88bb      	ldrh	r3, [r7, #4]
 800336e:	7d7a      	ldrb	r2, [r7, #21]
 8003370:	4413      	add	r3, r2
 8003372:	2b9f      	cmp	r3, #159	; 0x9f
 8003374:	dc21      	bgt.n	80033ba <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b20      	cmp	r3, #32
 800337c:	d103      	bne.n	8003386 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	603b      	str	r3, [r7, #0]
                continue;
 8003384:	e014      	b.n	80033b0 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	88b9      	ldrh	r1, [r7, #4]
 800338c:	88f8      	ldrh	r0, [r7, #6]
 800338e:	8c3b      	ldrh	r3, [r7, #32]
 8003390:	9302      	str	r3, [sp, #8]
 8003392:	8bbb      	ldrh	r3, [r7, #28]
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f7ff ff56 	bl	800324c <ST7735_WriteChar>
        x += font.width;
 80033a0:	7d3b      	ldrb	r3, [r7, #20]
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	4413      	add	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
        str++;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	603b      	str	r3, [r7, #0]
    while(*str) {
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1cd      	bne.n	8003354 <ST7735_WriteString+0x1a>
 80033b8:	e000      	b.n	80033bc <ST7735_WriteString+0x82>
                break;
 80033ba:	bf00      	nop
    }

    ST7735_Unselect();
 80033bc:	f7ff fe1e 	bl	8002ffc <ST7735_Unselect>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ca:	b002      	add	sp, #8
 80033cc:	4770      	bx	lr
	...

080033d0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4604      	mov	r4, r0
 80033d8:	4608      	mov	r0, r1
 80033da:	4611      	mov	r1, r2
 80033dc:	461a      	mov	r2, r3
 80033de:	4623      	mov	r3, r4
 80033e0:	80fb      	strh	r3, [r7, #6]
 80033e2:	4603      	mov	r3, r0
 80033e4:	80bb      	strh	r3, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	807b      	strh	r3, [r7, #2]
 80033ea:	4613      	mov	r3, r2
 80033ec:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b7f      	cmp	r3, #127	; 0x7f
 80033f2:	d857      	bhi.n	80034a4 <ST7735_FillRectangle+0xd4>
 80033f4:	88bb      	ldrh	r3, [r7, #4]
 80033f6:	2b9f      	cmp	r3, #159	; 0x9f
 80033f8:	d854      	bhi.n	80034a4 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80033fa:	88fa      	ldrh	r2, [r7, #6]
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	4413      	add	r3, r2
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	dd03      	ble.n	800340c <ST7735_FillRectangle+0x3c>
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800340a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800340c:	88ba      	ldrh	r2, [r7, #4]
 800340e:	883b      	ldrh	r3, [r7, #0]
 8003410:	4413      	add	r3, r2
 8003412:	2ba0      	cmp	r3, #160	; 0xa0
 8003414:	dd03      	ble.n	800341e <ST7735_FillRectangle+0x4e>
 8003416:	88bb      	ldrh	r3, [r7, #4]
 8003418:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800341c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800341e:	f7ff fde1 	bl	8002fe4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	b2d8      	uxtb	r0, r3
 8003426:	88bb      	ldrh	r3, [r7, #4]
 8003428:	b2d9      	uxtb	r1, r3
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	887b      	ldrh	r3, [r7, #2]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4413      	add	r3, r2
 8003434:	b2db      	uxtb	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b2dc      	uxtb	r4, r3
 800343a:	88bb      	ldrh	r3, [r7, #4]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	883b      	ldrh	r3, [r7, #0]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4413      	add	r3, r2
 8003444:	b2db      	uxtb	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4622      	mov	r2, r4
 800344c:	f7ff fe73 	bl	8003136 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8003450:	8c3b      	ldrh	r3, [r7, #32]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	b29b      	uxth	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	733b      	strb	r3, [r7, #12]
 800345a:	8c3b      	ldrh	r3, [r7, #32]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003460:	2201      	movs	r2, #1
 8003462:	2110      	movs	r1, #16
 8003464:	4811      	ldr	r0, [pc, #68]	; (80034ac <ST7735_FillRectangle+0xdc>)
 8003466:	f000 fe71 	bl	800414c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800346a:	883b      	ldrh	r3, [r7, #0]
 800346c:	80bb      	strh	r3, [r7, #4]
 800346e:	e013      	b.n	8003498 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	80fb      	strh	r3, [r7, #6]
 8003474:	e00a      	b.n	800348c <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003476:	f107 010c 	add.w	r1, r7, #12
 800347a:	f04f 33ff 	mov.w	r3, #4294967295
 800347e:	2202      	movs	r2, #2
 8003480:	480b      	ldr	r0, [pc, #44]	; (80034b0 <ST7735_FillRectangle+0xe0>)
 8003482:	f002 fb22 	bl	8005aca <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	3b01      	subs	r3, #1
 800348a:	80fb      	strh	r3, [r7, #6]
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f1      	bne.n	8003476 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8003492:	88bb      	ldrh	r3, [r7, #4]
 8003494:	3b01      	subs	r3, #1
 8003496:	80bb      	strh	r3, [r7, #4]
 8003498:	88bb      	ldrh	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e8      	bne.n	8003470 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800349e:	f7ff fdad 	bl	8002ffc <ST7735_Unselect>
 80034a2:	e000      	b.n	80034a6 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80034a4:	bf00      	nop
}
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	40020000 	.word	0x40020000
 80034b0:	2000033c 	.word	0x2000033c

080034b4 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4604      	mov	r4, r0
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	461a      	mov	r2, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	80fb      	strh	r3, [r7, #6]
 80034c6:	4603      	mov	r3, r0
 80034c8:	80bb      	strh	r3, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	807b      	strh	r3, [r7, #2]
 80034ce:	4613      	mov	r3, r2
 80034d0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b7f      	cmp	r3, #127	; 0x7f
 80034d6:	d869      	bhi.n	80035ac <ST7735_FillRectangleFast+0xf8>
 80034d8:	88bb      	ldrh	r3, [r7, #4]
 80034da:	2b9f      	cmp	r3, #159	; 0x9f
 80034dc:	d866      	bhi.n	80035ac <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	4413      	add	r3, r2
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	dd03      	ble.n	80034f0 <ST7735_FillRectangleFast+0x3c>
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80034ee:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80034f0:	88ba      	ldrh	r2, [r7, #4]
 80034f2:	883b      	ldrh	r3, [r7, #0]
 80034f4:	4413      	add	r3, r2
 80034f6:	2ba0      	cmp	r3, #160	; 0xa0
 80034f8:	dd03      	ble.n	8003502 <ST7735_FillRectangleFast+0x4e>
 80034fa:	88bb      	ldrh	r3, [r7, #4]
 80034fc:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8003500:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8003502:	f7ff fd6f 	bl	8002fe4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	b2d8      	uxtb	r0, r3
 800350a:	88bb      	ldrh	r3, [r7, #4]
 800350c:	b2d9      	uxtb	r1, r3
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	887b      	ldrh	r3, [r7, #2]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	4413      	add	r3, r2
 8003518:	b2db      	uxtb	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b2dc      	uxtb	r4, r3
 800351e:	88bb      	ldrh	r3, [r7, #4]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	883b      	ldrh	r3, [r7, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	4413      	add	r3, r2
 8003528:	b2db      	uxtb	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b2db      	uxtb	r3, r3
 800352e:	4622      	mov	r2, r4
 8003530:	f7ff fe01 	bl	8003136 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8003534:	8c3b      	ldrh	r3, [r7, #32]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	b29b      	uxth	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	723b      	strb	r3, [r7, #8]
 800353e:	8c3b      	ldrh	r3, [r7, #32]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f003 f935 	bl	80067b8 <malloc>
 800354e:	4603      	mov	r3, r0
 8003550:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8003552:	2300      	movs	r3, #0
 8003554:	80fb      	strh	r3, [r7, #6]
 8003556:	e008      	b.n	800356a <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	893a      	ldrh	r2, [r7, #8]
 8003562:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	3301      	adds	r3, #1
 8003568:	80fb      	strh	r3, [r7, #6]
 800356a:	88fa      	ldrh	r2, [r7, #6]
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	429a      	cmp	r2, r3
 8003570:	d3f2      	bcc.n	8003558 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003572:	2201      	movs	r2, #1
 8003574:	2110      	movs	r1, #16
 8003576:	480f      	ldr	r0, [pc, #60]	; (80035b4 <ST7735_FillRectangleFast+0x100>)
 8003578:	f000 fde8 	bl	800414c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 800357c:	883b      	ldrh	r3, [r7, #0]
 800357e:	80bb      	strh	r3, [r7, #4]
 8003580:	e00b      	b.n	800359a <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8003582:	887b      	ldrh	r3, [r7, #2]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	f04f 33ff 	mov.w	r3, #4294967295
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	480a      	ldr	r0, [pc, #40]	; (80035b8 <ST7735_FillRectangleFast+0x104>)
 8003590:	f002 fa9b 	bl	8005aca <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8003594:	88bb      	ldrh	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	80bb      	strh	r3, [r7, #4]
 800359a:	88bb      	ldrh	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <ST7735_FillRectangleFast+0xce>

    free(line);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f003 f911 	bl	80067c8 <free>
    ST7735_Unselect();
 80035a6:	f7ff fd29 	bl	8002ffc <ST7735_Unselect>
 80035aa:	e000      	b.n	80035ae <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80035ac:	bf00      	nop
}
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}
 80035b4:	40020000 	.word	0x40020000
 80035b8:	2000033c 	.word	0x2000033c

080035bc <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	23a0      	movs	r3, #160	; 0xa0
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	2100      	movs	r1, #0
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7ff fefd 	bl	80033d0 <ST7735_FillRectangle>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <ST7735_DrawLine>:
	ST7735_WriteData(&gamma, sizeof(gamma));
	ST7735_Unselect();
}

void ST7735_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 80035de:	b590      	push	{r4, r7, lr}
 80035e0:	b087      	sub	sp, #28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4604      	mov	r4, r0
 80035e6:	4608      	mov	r0, r1
 80035e8:	4611      	mov	r1, r2
 80035ea:	461a      	mov	r2, r3
 80035ec:	4623      	mov	r3, r4
 80035ee:	80fb      	strh	r3, [r7, #6]
 80035f0:	4603      	mov	r3, r0
 80035f2:	80bb      	strh	r3, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80035fc:	883a      	ldrh	r2, [r7, #0]
 80035fe:	88bb      	ldrh	r3, [r7, #4]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003606:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800360a:	8879      	ldrh	r1, [r7, #2]
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	1acb      	subs	r3, r1, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bfb8      	it	lt
 8003614:	425b      	neglt	r3, r3
 8003616:	429a      	cmp	r2, r3
 8003618:	bfcc      	ite	gt
 800361a:	2301      	movgt	r3, #1
 800361c:	2300      	movle	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8003622:	8a7b      	ldrh	r3, [r7, #18]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <ST7735_DrawLine+0x62>
		swap = x0;
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 800362c:	88bb      	ldrh	r3, [r7, #4]
 800362e:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8003630:	8a3b      	ldrh	r3, [r7, #16]
 8003632:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8003638:	883b      	ldrh	r3, [r7, #0]
 800363a:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 800363c:	8a3b      	ldrh	r3, [r7, #16]
 800363e:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	887b      	ldrh	r3, [r7, #2]
 8003644:	429a      	cmp	r2, r3
 8003646:	d90b      	bls.n	8003660 <ST7735_DrawLine+0x82>
		swap = x0;
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8003650:	8a3b      	ldrh	r3, [r7, #16]
 8003652:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8003654:	88bb      	ldrh	r3, [r7, #4]
 8003656:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8003658:	883b      	ldrh	r3, [r7, #0]
 800365a:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 800365c:	8a3b      	ldrh	r3, [r7, #16]
 800365e:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	b29b      	uxth	r3, r3
 8003668:	81fb      	strh	r3, [r7, #14]
    dy = abs(y1 - y0);
 800366a:	883a      	ldrh	r2, [r7, #0]
 800366c:	88bb      	ldrh	r3, [r7, #4]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	bfb8      	it	lt
 8003674:	425b      	neglt	r3, r3
 8003676:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8003678:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800367c:	0fda      	lsrs	r2, r3, #31
 800367e:	4413      	add	r3, r2
 8003680:	105b      	asrs	r3, r3, #1
 8003682:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8003684:	88ba      	ldrh	r2, [r7, #4]
 8003686:	883b      	ldrh	r3, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d202      	bcs.n	8003692 <ST7735_DrawLine+0xb4>
        ystep = 1;
 800368c:	2301      	movs	r3, #1
 800368e:	82bb      	strh	r3, [r7, #20]
 8003690:	e028      	b.n	80036e4 <ST7735_DrawLine+0x106>
    } else {
        ystep = -1;
 8003692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003696:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8003698:	e024      	b.n	80036e4 <ST7735_DrawLine+0x106>
        if (steep) {
 800369a:	8a7b      	ldrh	r3, [r7, #18]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d006      	beq.n	80036ae <ST7735_DrawLine+0xd0>
        	ST7735_DrawPixel(y0, x0, color);
 80036a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036a2:	88f9      	ldrh	r1, [r7, #6]
 80036a4:	88bb      	ldrh	r3, [r7, #4]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fd9c 	bl	80031e4 <ST7735_DrawPixel>
 80036ac:	e005      	b.n	80036ba <ST7735_DrawLine+0xdc>
        } else {
        	ST7735_DrawPixel(x0, y0, color);
 80036ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036b0:	88b9      	ldrh	r1, [r7, #4]
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fd95 	bl	80031e4 <ST7735_DrawPixel>
        }
        err -= dy;
 80036ba:	8afa      	ldrh	r2, [r7, #22]
 80036bc:	89bb      	ldrh	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 80036c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	da08      	bge.n	80036de <ST7735_DrawLine+0x100>
            y0 += ystep;
 80036cc:	8aba      	ldrh	r2, [r7, #20]
 80036ce:	88bb      	ldrh	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80036d4:	8afa      	ldrh	r2, [r7, #22]
 80036d6:	89fb      	ldrh	r3, [r7, #14]
 80036d8:	4413      	add	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	3301      	adds	r3, #1
 80036e2:	80fb      	strh	r3, [r7, #6]
 80036e4:	88fa      	ldrh	r2, [r7, #6]
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d9d6      	bls.n	800369a <ST7735_DrawLine+0xbc>
        }
    }
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd90      	pop	{r4, r7, pc}
	...

080036f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_MspInit+0x4c>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	4a0f      	ldr	r2, [pc, #60]	; (8003744 <HAL_MspInit+0x4c>)
 8003708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800370c:	6453      	str	r3, [r2, #68]	; 0x44
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_MspInit+0x4c>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_MspInit+0x4c>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <HAL_MspInit+0x4c>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_MspInit+0x4c>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800374c:	e7fe      	b.n	800374c <NMI_Handler+0x4>

0800374e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003752:	e7fe      	b.n	8003752 <HardFault_Handler+0x4>

08003754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003758:	e7fe      	b.n	8003758 <MemManage_Handler+0x4>

0800375a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800375e:	e7fe      	b.n	800375e <BusFault_Handler+0x4>

08003760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003764:	e7fe      	b.n	8003764 <UsageFault_Handler+0x4>

08003766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003794:	f000 f9e8 	bl	8003b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}

0800379c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 80037a0:	2020      	movs	r0, #32
 80037a2:	f000 fced 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C2_Pin);
 80037a6:	2040      	movs	r0, #64	; 0x40
 80037a8:	f000 fcea 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C3_Pin);
 80037ac:	2080      	movs	r0, #128	; 0x80
 80037ae:	f000 fce7 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C4_Pin);
 80037b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037b6:	f000 fce3 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037c4:	4802      	ldr	r0, [pc, #8]	; (80037d0 <TIM3_IRQHandler+0x10>)
 80037c6:	f002 fc39 	bl	800603c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000398 	.word	0x20000398

080037d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
	return 1;
 80037d8:	2301      	movs	r3, #1
}
 80037da:	4618      	mov	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <_kill>:

int _kill(int pid, int sig)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ee:	f002 ffb9 	bl	8006764 <__errno>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2216      	movs	r2, #22
 80037f6:	601a      	str	r2, [r3, #0]
	return -1;
 80037f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <_exit>:

void _exit (int status)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800380c:	f04f 31ff 	mov.w	r1, #4294967295
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ffe7 	bl	80037e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003816:	e7fe      	b.n	8003816 <_exit+0x12>

08003818 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e00a      	b.n	8003840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800382a:	f3af 8000 	nop.w
 800382e:	4601      	mov	r1, r0
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	60ba      	str	r2, [r7, #8]
 8003836:	b2ca      	uxtb	r2, r1
 8003838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	dbf0      	blt.n	800382a <_read+0x12>
	}

return len;
 8003848:	687b      	ldr	r3, [r7, #4]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e009      	b.n	8003878 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	60ba      	str	r2, [r7, #8]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	3301      	adds	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	dbf1      	blt.n	8003864 <_write+0x12>
	}
	return len;
 8003880:	687b      	ldr	r3, [r7, #4]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_close>:

int _close(int file)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
	return -1;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038b2:	605a      	str	r2, [r3, #4]
	return 0;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <_isatty>:

int _isatty(int file)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
	return 1;
 80038ca:	2301      	movs	r3, #1
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	return 0;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <_sbrk+0x5c>)
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <_sbrk+0x60>)
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <_sbrk+0x64>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <_sbrk+0x64>)
 8003912:	4a12      	ldr	r2, [pc, #72]	; (800395c <_sbrk+0x68>)
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <_sbrk+0x64>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d207      	bcs.n	8003934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003924:	f002 ff1e 	bl	8006764 <__errno>
 8003928:	4603      	mov	r3, r0
 800392a:	220c      	movs	r2, #12
 800392c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	e009      	b.n	8003948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <_sbrk+0x64>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <_sbrk+0x64>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <_sbrk+0x64>)
 8003944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003946:	68fb      	ldr	r3, [r7, #12]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20020000 	.word	0x20020000
 8003954:	00000400 	.word	0x00000400
 8003958:	20000394 	.word	0x20000394
 800395c:	200003f8 	.word	0x200003f8

08003960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <SystemInit+0x20>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	4a05      	ldr	r2, [pc, #20]	; (8003980 <SystemInit+0x20>)
 800396c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800398a:	f107 0308 	add.w	r3, r7, #8
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003998:	463b      	mov	r3, r7
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <MX_TIM3_Init+0x94>)
 80039a2:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <MX_TIM3_Init+0x98>)
 80039a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80039a6:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <MX_TIM3_Init+0x94>)
 80039a8:	2263      	movs	r2, #99	; 0x63
 80039aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ac:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <MX_TIM3_Init+0x94>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80039b2:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <MX_TIM3_Init+0x94>)
 80039b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80039b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <MX_TIM3_Init+0x94>)
 80039bc:	2200      	movs	r2, #0
 80039be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c0:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <MX_TIM3_Init+0x94>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039c6:	4814      	ldr	r0, [pc, #80]	; (8003a18 <MX_TIM3_Init+0x94>)
 80039c8:	f002 fa86 	bl	8005ed8 <HAL_TIM_Base_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80039d2:	f7ff fa81 	bl	8002ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039dc:	f107 0308 	add.w	r3, r7, #8
 80039e0:	4619      	mov	r1, r3
 80039e2:	480d      	ldr	r0, [pc, #52]	; (8003a18 <MX_TIM3_Init+0x94>)
 80039e4:	f002 fc32 	bl	800624c <HAL_TIM_ConfigClockSource>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80039ee:	f7ff fa73 	bl	8002ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039fa:	463b      	mov	r3, r7
 80039fc:	4619      	mov	r1, r3
 80039fe:	4806      	ldr	r0, [pc, #24]	; (8003a18 <MX_TIM3_Init+0x94>)
 8003a00:	f002 fe2e 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003a0a:	f7ff fa65 	bl	8002ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000398 	.word	0x20000398
 8003a1c:	40000400 	.word	0x40000400

08003a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <HAL_TIM_Base_MspInit+0x48>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d115      	bne.n	8003a5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <HAL_TIM_Base_MspInit+0x4c>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	; (8003a6c <HAL_TIM_Base_MspInit+0x4c>)
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <HAL_TIM_Base_MspInit+0x4c>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	201d      	movs	r0, #29
 8003a54:	f000 f9a7 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a58:	201d      	movs	r0, #29
 8003a5a:	f000 f9c0 	bl	8003dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40023800 	.word	0x40023800

08003a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a74:	480d      	ldr	r0, [pc, #52]	; (8003aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a76:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a78:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a7c:	e002      	b.n	8003a84 <LoopCopyDataInit>

08003a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a82:	3304      	adds	r3, #4

08003a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a88:	d3f9      	bcc.n	8003a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a8a:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a8c:	4c0b      	ldr	r4, [pc, #44]	; (8003abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a90:	e001      	b.n	8003a96 <LoopFillZerobss>

08003a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a94:	3204      	adds	r2, #4

08003a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a98:	d3fb      	bcc.n	8003a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a9a:	f7ff ff61 	bl	8003960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a9e:	f002 fe67 	bl	8006770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aa2:	f7fe faa5 	bl	8001ff0 <main>
  bx  lr    
 8003aa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003ab4:	0800c4b0 	.word	0x0800c4b0
  ldr r2, =_sbss
 8003ab8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003abc:	200003f4 	.word	0x200003f4

08003ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ac0:	e7fe      	b.n	8003ac0 <ADC_IRQHandler>
	...

08003ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <HAL_Init+0x40>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0d      	ldr	r2, [pc, #52]	; (8003b04 <HAL_Init+0x40>)
 8003ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <HAL_Init+0x40>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <HAL_Init+0x40>)
 8003ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_Init+0x40>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <HAL_Init+0x40>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aec:	2003      	movs	r0, #3
 8003aee:	f000 f94f 	bl	8003d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003af2:	200f      	movs	r0, #15
 8003af4:	f000 f808 	bl	8003b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003af8:	f7ff fdfe 	bl	80036f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40023c00 	.word	0x40023c00

08003b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_InitTick+0x54>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_InitTick+0x58>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f967 	bl	8003dfa <HAL_SYSTICK_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00e      	b.n	8003b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b0f      	cmp	r3, #15
 8003b3a:	d80a      	bhi.n	8003b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f000 f92f 	bl	8003da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b48:	4a06      	ldr	r2, [pc, #24]	; (8003b64 <HAL_InitTick+0x5c>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000018 	.word	0x20000018
 8003b60:	20000020 	.word	0x20000020
 8003b64:	2000001c 	.word	0x2000001c

08003b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_IncTick+0x20>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_IncTick+0x24>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <HAL_IncTick+0x24>)
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000020 	.word	0x20000020
 8003b8c:	200003e0 	.word	0x200003e0

08003b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return uwTick;
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_GetTick+0x14>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	200003e0 	.word	0x200003e0

08003ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff ffee 	bl	8003b90 <HAL_GetTick>
 8003bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d005      	beq.n	8003bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_Delay+0x44>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bce:	bf00      	nop
 8003bd0:	f7ff ffde 	bl	8003b90 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d8f7      	bhi.n	8003bd0 <HAL_Delay+0x28>
  {
  }
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000020 	.word	0x20000020

08003bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c22:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	60d3      	str	r3, [r2, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <__NVIC_GetPriorityGrouping+0x18>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	f003 0307 	and.w	r3, r3, #7
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	db0b      	blt.n	8003c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	4907      	ldr	r1, [pc, #28]	; (8003c8c <__NVIC_EnableIRQ+0x38>)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2001      	movs	r0, #1
 8003c76:	fa00 f202 	lsl.w	r2, r0, r2
 8003c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000e100 	.word	0xe000e100

08003c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	db0a      	blt.n	8003cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	490c      	ldr	r1, [pc, #48]	; (8003cdc <__NVIC_SetPriority+0x4c>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb8:	e00a      	b.n	8003cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4908      	ldr	r1, [pc, #32]	; (8003ce0 <__NVIC_SetPriority+0x50>)
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	3b04      	subs	r3, #4
 8003cc8:	0112      	lsls	r2, r2, #4
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	440b      	add	r3, r1
 8003cce:	761a      	strb	r2, [r3, #24]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000e100 	.word	0xe000e100
 8003ce0:	e000ed00 	.word	0xe000ed00

08003ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f1c3 0307 	rsb	r3, r3, #7
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	bf28      	it	cs
 8003d02:	2304      	movcs	r3, #4
 8003d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	2b06      	cmp	r3, #6
 8003d0c:	d902      	bls.n	8003d14 <NVIC_EncodePriority+0x30>
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3b03      	subs	r3, #3
 8003d12:	e000      	b.n	8003d16 <NVIC_EncodePriority+0x32>
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43da      	mvns	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	401a      	ands	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	43d9      	mvns	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d3c:	4313      	orrs	r3, r2
         );
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3724      	adds	r7, #36	; 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d5c:	d301      	bcc.n	8003d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e00f      	b.n	8003d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <SysTick_Config+0x40>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d6a:	210f      	movs	r1, #15
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	f7ff ff8e 	bl	8003c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <SysTick_Config+0x40>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d7a:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <SysTick_Config+0x40>)
 8003d7c:	2207      	movs	r2, #7
 8003d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	e000e010 	.word	0xe000e010

08003d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff29 	bl	8003bf0 <__NVIC_SetPriorityGrouping>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db8:	f7ff ff3e 	bl	8003c38 <__NVIC_GetPriorityGrouping>
 8003dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f7ff ff8e 	bl	8003ce4 <NVIC_EncodePriority>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff5d 	bl	8003c90 <__NVIC_SetPriority>
}
 8003dd6:	bf00      	nop
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff31 	bl	8003c54 <__NVIC_EnableIRQ>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ffa2 	bl	8003d4c <SysTick_Config>
 8003e08:	4603      	mov	r3, r0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e159      	b.n	80040e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	f040 8148 	bne.w	80040de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d005      	beq.n	8003e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d130      	bne.n	8003ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 0201 	and.w	r2, r3, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d017      	beq.n	8003f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d123      	bne.n	8003f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3208      	adds	r2, #8
 8003f52:	69b9      	ldr	r1, [r7, #24]
 8003f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0203 	and.w	r2, r3, #3
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a2 	beq.w	80040de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	4b57      	ldr	r3, [pc, #348]	; (80040fc <HAL_GPIO_Init+0x2e8>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	4a56      	ldr	r2, [pc, #344]	; (80040fc <HAL_GPIO_Init+0x2e8>)
 8003fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003faa:	4b54      	ldr	r3, [pc, #336]	; (80040fc <HAL_GPIO_Init+0x2e8>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fb6:	4a52      	ldr	r2, [pc, #328]	; (8004100 <HAL_GPIO_Init+0x2ec>)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a49      	ldr	r2, [pc, #292]	; (8004104 <HAL_GPIO_Init+0x2f0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d019      	beq.n	8004016 <HAL_GPIO_Init+0x202>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a48      	ldr	r2, [pc, #288]	; (8004108 <HAL_GPIO_Init+0x2f4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_GPIO_Init+0x1fe>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a47      	ldr	r2, [pc, #284]	; (800410c <HAL_GPIO_Init+0x2f8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00d      	beq.n	800400e <HAL_GPIO_Init+0x1fa>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a46      	ldr	r2, [pc, #280]	; (8004110 <HAL_GPIO_Init+0x2fc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d007      	beq.n	800400a <HAL_GPIO_Init+0x1f6>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a45      	ldr	r2, [pc, #276]	; (8004114 <HAL_GPIO_Init+0x300>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d101      	bne.n	8004006 <HAL_GPIO_Init+0x1f2>
 8004002:	2304      	movs	r3, #4
 8004004:	e008      	b.n	8004018 <HAL_GPIO_Init+0x204>
 8004006:	2307      	movs	r3, #7
 8004008:	e006      	b.n	8004018 <HAL_GPIO_Init+0x204>
 800400a:	2303      	movs	r3, #3
 800400c:	e004      	b.n	8004018 <HAL_GPIO_Init+0x204>
 800400e:	2302      	movs	r3, #2
 8004010:	e002      	b.n	8004018 <HAL_GPIO_Init+0x204>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_GPIO_Init+0x204>
 8004016:	2300      	movs	r3, #0
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	f002 0203 	and.w	r2, r2, #3
 800401e:	0092      	lsls	r2, r2, #2
 8004020:	4093      	lsls	r3, r2
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004028:	4935      	ldr	r1, [pc, #212]	; (8004100 <HAL_GPIO_Init+0x2ec>)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	089b      	lsrs	r3, r3, #2
 800402e:	3302      	adds	r3, #2
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004036:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_GPIO_Init+0x304>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405a:	4a2f      	ldr	r2, [pc, #188]	; (8004118 <HAL_GPIO_Init+0x304>)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004060:	4b2d      	ldr	r3, [pc, #180]	; (8004118 <HAL_GPIO_Init+0x304>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004084:	4a24      	ldr	r2, [pc, #144]	; (8004118 <HAL_GPIO_Init+0x304>)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800408a:	4b23      	ldr	r3, [pc, #140]	; (8004118 <HAL_GPIO_Init+0x304>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ae:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <HAL_GPIO_Init+0x304>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <HAL_GPIO_Init+0x304>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040d8:	4a0f      	ldr	r2, [pc, #60]	; (8004118 <HAL_GPIO_Init+0x304>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b0f      	cmp	r3, #15
 80040e8:	f67f aea2 	bls.w	8003e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3724      	adds	r7, #36	; 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	40013800 	.word	0x40013800
 8004104:	40020000 	.word	0x40020000
 8004108:	40020400 	.word	0x40020400
 800410c:	40020800 	.word	0x40020800
 8004110:	40020c00 	.word	0x40020c00
 8004114:	40021000 	.word	0x40021000
 8004118:	40013c00 	.word	0x40013c00

0800411c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e001      	b.n	800413e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
 8004158:	4613      	mov	r3, r2
 800415a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800415c:	787b      	ldrb	r3, [r7, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004168:	e003      	b.n	8004172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	041a      	lsls	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	619a      	str	r2, [r3, #24]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004196:	4a05      	ldr	r2, [pc, #20]	; (80041ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fdaa 	bl	8002cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40013c00 	.word	0x40013c00

080041b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e12b      	b.n	800441a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd fea2 	bl	8001f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2224      	movs	r2, #36	; 0x24
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0201 	bic.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004214:	f001 fbbc 	bl	8005990 <HAL_RCC_GetPCLK1Freq>
 8004218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4a81      	ldr	r2, [pc, #516]	; (8004424 <HAL_I2C_Init+0x274>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d807      	bhi.n	8004234 <HAL_I2C_Init+0x84>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a80      	ldr	r2, [pc, #512]	; (8004428 <HAL_I2C_Init+0x278>)
 8004228:	4293      	cmp	r3, r2
 800422a:	bf94      	ite	ls
 800422c:	2301      	movls	r3, #1
 800422e:	2300      	movhi	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	e006      	b.n	8004242 <HAL_I2C_Init+0x92>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a7d      	ldr	r2, [pc, #500]	; (800442c <HAL_I2C_Init+0x27c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	bf94      	ite	ls
 800423c:	2301      	movls	r3, #1
 800423e:	2300      	movhi	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0e7      	b.n	800441a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a78      	ldr	r2, [pc, #480]	; (8004430 <HAL_I2C_Init+0x280>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	0c9b      	lsrs	r3, r3, #18
 8004254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a6a      	ldr	r2, [pc, #424]	; (8004424 <HAL_I2C_Init+0x274>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d802      	bhi.n	8004284 <HAL_I2C_Init+0xd4>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	3301      	adds	r3, #1
 8004282:	e009      	b.n	8004298 <HAL_I2C_Init+0xe8>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	4a69      	ldr	r2, [pc, #420]	; (8004434 <HAL_I2C_Init+0x284>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	3301      	adds	r3, #1
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	430b      	orrs	r3, r1
 800429e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	495c      	ldr	r1, [pc, #368]	; (8004424 <HAL_I2C_Init+0x274>)
 80042b4:	428b      	cmp	r3, r1
 80042b6:	d819      	bhi.n	80042ec <HAL_I2C_Init+0x13c>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1e59      	subs	r1, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042c6:	1c59      	adds	r1, r3, #1
 80042c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042cc:	400b      	ands	r3, r1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_I2C_Init+0x138>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1e59      	subs	r1, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e0:	3301      	adds	r3, #1
 80042e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e6:	e051      	b.n	800438c <HAL_I2C_Init+0x1dc>
 80042e8:	2304      	movs	r3, #4
 80042ea:	e04f      	b.n	800438c <HAL_I2C_Init+0x1dc>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d111      	bne.n	8004318 <HAL_I2C_Init+0x168>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e58      	subs	r0, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	440b      	add	r3, r1
 8004302:	fbb0 f3f3 	udiv	r3, r0, r3
 8004306:	3301      	adds	r3, #1
 8004308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e012      	b.n	800433e <HAL_I2C_Init+0x18e>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1e58      	subs	r0, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	0099      	lsls	r1, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	fbb0 f3f3 	udiv	r3, r0, r3
 800432e:	3301      	adds	r3, #1
 8004330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Init+0x196>
 8004342:	2301      	movs	r3, #1
 8004344:	e022      	b.n	800438c <HAL_I2C_Init+0x1dc>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10e      	bne.n	800436c <HAL_I2C_Init+0x1bc>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1e58      	subs	r0, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	460b      	mov	r3, r1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	440b      	add	r3, r1
 800435c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004360:	3301      	adds	r3, #1
 8004362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436a:	e00f      	b.n	800438c <HAL_I2C_Init+0x1dc>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1e58      	subs	r0, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	0099      	lsls	r1, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004382:	3301      	adds	r3, #1
 8004384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	6809      	ldr	r1, [r1, #0]
 8004390:	4313      	orrs	r3, r2
 8004392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6911      	ldr	r1, [r2, #16]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68d2      	ldr	r2, [r2, #12]
 80043c6:	4311      	orrs	r1, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	000186a0 	.word	0x000186a0
 8004428:	001e847f 	.word	0x001e847f
 800442c:	003d08ff 	.word	0x003d08ff
 8004430:	431bde83 	.word	0x431bde83
 8004434:	10624dd3 	.word	0x10624dd3

08004438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	4608      	mov	r0, r1
 8004442:	4611      	mov	r1, r2
 8004444:	461a      	mov	r2, r3
 8004446:	4603      	mov	r3, r0
 8004448:	817b      	strh	r3, [r7, #10]
 800444a:	460b      	mov	r3, r1
 800444c:	813b      	strh	r3, [r7, #8]
 800444e:	4613      	mov	r3, r2
 8004450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004452:	f7ff fb9d 	bl	8003b90 <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b20      	cmp	r3, #32
 8004462:	f040 80d9 	bne.w	8004618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2319      	movs	r3, #25
 800446c:	2201      	movs	r2, #1
 800446e:	496d      	ldr	r1, [pc, #436]	; (8004624 <HAL_I2C_Mem_Write+0x1ec>)
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fc7f 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
 800447e:	e0cc      	b.n	800461a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_I2C_Mem_Write+0x56>
 800448a:	2302      	movs	r3, #2
 800448c:	e0c5      	b.n	800461a <HAL_I2C_Mem_Write+0x1e2>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d007      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2221      	movs	r2, #33	; 0x21
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a3a      	ldr	r2, [r7, #32]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a4d      	ldr	r2, [pc, #308]	; (8004628 <HAL_I2C_Mem_Write+0x1f0>)
 80044f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044f6:	88f8      	ldrh	r0, [r7, #6]
 80044f8:	893a      	ldrh	r2, [r7, #8]
 80044fa:	8979      	ldrh	r1, [r7, #10]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4603      	mov	r3, r0
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fab6 	bl	8004a78 <I2C_RequestMemoryWrite>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d052      	beq.n	80045b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e081      	b.n	800461a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fd00 	bl	8004f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2b04      	cmp	r3, #4
 800452c:	d107      	bne.n	800453e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e06b      	b.n	800461a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b04      	cmp	r3, #4
 800457e:	d11b      	bne.n	80045b8 <HAL_I2C_Mem_Write+0x180>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d017      	beq.n	80045b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1aa      	bne.n	8004516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fcec 	bl	8004fa2 <I2C_WaitOnBTFFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00d      	beq.n	80045ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d107      	bne.n	80045e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e016      	b.n	800461a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	e000      	b.n	800461a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004618:	2302      	movs	r3, #2
  }
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	00100002 	.word	0x00100002
 8004628:	ffff0000 	.word	0xffff0000

0800462c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	; 0x30
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	461a      	mov	r2, r3
 800463a:	4603      	mov	r3, r0
 800463c:	817b      	strh	r3, [r7, #10]
 800463e:	460b      	mov	r3, r1
 8004640:	813b      	strh	r3, [r7, #8]
 8004642:	4613      	mov	r3, r2
 8004644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004646:	f7ff faa3 	bl	8003b90 <HAL_GetTick>
 800464a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b20      	cmp	r3, #32
 8004656:	f040 8208 	bne.w	8004a6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	2319      	movs	r3, #25
 8004660:	2201      	movs	r2, #1
 8004662:	497b      	ldr	r1, [pc, #492]	; (8004850 <HAL_I2C_Mem_Read+0x224>)
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fb85 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
 8004672:	e1fb      	b.n	8004a6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_I2C_Mem_Read+0x56>
 800467e:	2302      	movs	r3, #2
 8004680:	e1f4      	b.n	8004a6c <HAL_I2C_Mem_Read+0x440>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d007      	beq.n	80046a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2222      	movs	r2, #34	; 0x22
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4a5b      	ldr	r2, [pc, #364]	; (8004854 <HAL_I2C_Mem_Read+0x228>)
 80046e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ea:	88f8      	ldrh	r0, [r7, #6]
 80046ec:	893a      	ldrh	r2, [r7, #8]
 80046ee:	8979      	ldrh	r1, [r7, #10]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	4603      	mov	r3, r0
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fa52 	bl	8004ba4 <I2C_RequestMemoryRead>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e1b0      	b.n	8004a6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d113      	bne.n	800473a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004712:	2300      	movs	r3, #0
 8004714:	623b      	str	r3, [r7, #32]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	623b      	str	r3, [r7, #32]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	623b      	str	r3, [r7, #32]
 8004726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e184      	b.n	8004a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473e:	2b01      	cmp	r3, #1
 8004740:	d11b      	bne.n	800477a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e164      	b.n	8004a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	2b02      	cmp	r3, #2
 8004780:	d11b      	bne.n	80047ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	e144      	b.n	8004a44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047d0:	e138      	b.n	8004a44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	f200 80f1 	bhi.w	80049be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d123      	bne.n	800482c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fc1b 	bl	8005024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e139      	b.n	8004a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	855a      	strh	r2, [r3, #42]	; 0x2a
 800482a:	e10b      	b.n	8004a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	2b02      	cmp	r3, #2
 8004832:	d14e      	bne.n	80048d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	2200      	movs	r2, #0
 800483c:	4906      	ldr	r1, [pc, #24]	; (8004858 <HAL_I2C_Mem_Read+0x22c>)
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fa98 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e10e      	b.n	8004a6c <HAL_I2C_Mem_Read+0x440>
 800484e:	bf00      	nop
 8004850:	00100002 	.word	0x00100002
 8004854:	ffff0000 	.word	0xffff0000
 8004858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048d0:	e0b8      	b.n	8004a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	2200      	movs	r2, #0
 80048da:	4966      	ldr	r1, [pc, #408]	; (8004a74 <HAL_I2C_Mem_Read+0x448>)
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fa49 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0bf      	b.n	8004a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	2200      	movs	r2, #0
 8004936:	494f      	ldr	r1, [pc, #316]	; (8004a74 <HAL_I2C_Mem_Read+0x448>)
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fa1b 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e091      	b.n	8004a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049bc:	e042      	b.n	8004a44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fb2e 	bl	8005024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e04c      	b.n	8004a6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d118      	bne.n	8004a44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f47f aec2 	bne.w	80047d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3728      	adds	r7, #40	; 0x28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	00010004 	.word	0x00010004

08004a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	4608      	mov	r0, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	461a      	mov	r2, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	817b      	strh	r3, [r7, #10]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	813b      	strh	r3, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f960 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00d      	beq.n	8004ad6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac8:	d103      	bne.n	8004ad2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e05f      	b.n	8004b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ad6:	897b      	ldrh	r3, [r7, #10]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	492d      	ldr	r1, [pc, #180]	; (8004ba0 <I2C_RequestMemoryWrite+0x128>)
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f998 	bl	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e04c      	b.n	8004b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b14:	6a39      	ldr	r1, [r7, #32]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fa02 	bl	8004f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d107      	bne.n	8004b3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e02b      	b.n	8004b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d105      	bne.n	8004b50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b44:	893b      	ldrh	r3, [r7, #8]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	611a      	str	r2, [r3, #16]
 8004b4e:	e021      	b.n	8004b94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b50:	893b      	ldrh	r3, [r7, #8]
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b60:	6a39      	ldr	r1, [r7, #32]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f9dc 	bl	8004f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d107      	bne.n	8004b86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e005      	b.n	8004b96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b8a:	893b      	ldrh	r3, [r7, #8]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	00010002 	.word	0x00010002

08004ba4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	4608      	mov	r0, r1
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	817b      	strh	r3, [r7, #10]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	813b      	strh	r3, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f8c2 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c04:	d103      	bne.n	8004c0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0aa      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	4952      	ldr	r1, [pc, #328]	; (8004d70 <I2C_RequestMemoryRead+0x1cc>)
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f8fa 	bl	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e097      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c50:	6a39      	ldr	r1, [r7, #32]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f964 	bl	8004f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d107      	bne.n	8004c76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e076      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d105      	bne.n	8004c8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c80:	893b      	ldrh	r3, [r7, #8]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e021      	b.n	8004cd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f93e 	bl	8004f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e050      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc6:	893b      	ldrh	r3, [r7, #8]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd2:	6a39      	ldr	r1, [r7, #32]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f923 	bl	8004f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d107      	bne.n	8004cf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e035      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f82b 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00d      	beq.n	8004d40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d32:	d103      	bne.n	8004d3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e013      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d40:	897b      	ldrh	r3, [r7, #10]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	4906      	ldr	r1, [pc, #24]	; (8004d70 <I2C_RequestMemoryRead+0x1cc>)
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f863 	bl	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	00010002 	.word	0x00010002

08004d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	4613      	mov	r3, r2
 8004d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d84:	e025      	b.n	8004dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d021      	beq.n	8004dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8e:	f7fe feff 	bl	8003b90 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d302      	bcc.n	8004da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d116      	bne.n	8004dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f043 0220 	orr.w	r2, r3, #32
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e023      	b.n	8004e1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10d      	bne.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	43da      	mvns	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4013      	ands	r3, r2
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf0c      	ite	eq
 8004dee:	2301      	moveq	r3, #1
 8004df0:	2300      	movne	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	e00c      	b.n	8004e12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4013      	ands	r3, r2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf0c      	ite	eq
 8004e0a:	2301      	moveq	r3, #1
 8004e0c:	2300      	movne	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d0b6      	beq.n	8004d86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e30:	e051      	b.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e40:	d123      	bne.n	8004e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e046      	b.n	8004f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d021      	beq.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7fe fe7d 	bl	8003b90 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d116      	bne.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e020      	b.n	8004f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d10c      	bne.n	8004efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	43da      	mvns	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4013      	ands	r3, r2
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bf14      	ite	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	2300      	moveq	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	e00b      	b.n	8004f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	43da      	mvns	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	4013      	ands	r3, r2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bf14      	ite	ne
 8004f0c:	2301      	movne	r3, #1
 8004f0e:	2300      	moveq	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d18d      	bne.n	8004e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f2c:	e02d      	b.n	8004f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f8ce 	bl	80050d0 <I2C_IsAcknowledgeFailed>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e02d      	b.n	8004f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d021      	beq.n	8004f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f46:	f7fe fe23 	bl	8003b90 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d116      	bne.n	8004f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e007      	b.n	8004f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b80      	cmp	r3, #128	; 0x80
 8004f96:	d1ca      	bne.n	8004f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fae:	e02d      	b.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f88d 	bl	80050d0 <I2C_IsAcknowledgeFailed>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e02d      	b.n	800501c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d021      	beq.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc8:	f7fe fde2 	bl	8003b90 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d116      	bne.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e007      	b.n	800501c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b04      	cmp	r3, #4
 8005018:	d1ca      	bne.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005030:	e042      	b.n	80050b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b10      	cmp	r3, #16
 800503e:	d119      	bne.n	8005074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0210 	mvn.w	r2, #16
 8005048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e029      	b.n	80050c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005074:	f7fe fd8c 	bl	8003b90 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d116      	bne.n	80050b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	f043 0220 	orr.w	r2, r3, #32
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e007      	b.n	80050c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d1b5      	bne.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e6:	d11b      	bne.n	8005120 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	f043 0204 	orr.w	r2, r3, #4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e267      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d075      	beq.n	800523a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800514e:	4b88      	ldr	r3, [pc, #544]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b04      	cmp	r3, #4
 8005158:	d00c      	beq.n	8005174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800515a:	4b85      	ldr	r3, [pc, #532]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005162:	2b08      	cmp	r3, #8
 8005164:	d112      	bne.n	800518c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005166:	4b82      	ldr	r3, [pc, #520]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005172:	d10b      	bne.n	800518c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005174:	4b7e      	ldr	r3, [pc, #504]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d05b      	beq.n	8005238 <HAL_RCC_OscConfig+0x108>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d157      	bne.n	8005238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e242      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005194:	d106      	bne.n	80051a4 <HAL_RCC_OscConfig+0x74>
 8005196:	4b76      	ldr	r3, [pc, #472]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a75      	ldr	r2, [pc, #468]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 800519c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	e01d      	b.n	80051e0 <HAL_RCC_OscConfig+0xb0>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCC_OscConfig+0x98>
 80051ae:	4b70      	ldr	r3, [pc, #448]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a6f      	ldr	r2, [pc, #444]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80051b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4b6d      	ldr	r3, [pc, #436]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a6c      	ldr	r2, [pc, #432]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80051c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e00b      	b.n	80051e0 <HAL_RCC_OscConfig+0xb0>
 80051c8:	4b69      	ldr	r3, [pc, #420]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a68      	ldr	r2, [pc, #416]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80051ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	4b66      	ldr	r3, [pc, #408]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a65      	ldr	r2, [pc, #404]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80051da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d013      	beq.n	8005210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fe fcd2 	bl	8003b90 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051f0:	f7fe fcce 	bl	8003b90 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	; 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e207      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	4b5b      	ldr	r3, [pc, #364]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0xc0>
 800520e:	e014      	b.n	800523a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005210:	f7fe fcbe 	bl	8003b90 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005218:	f7fe fcba 	bl	8003b90 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b64      	cmp	r3, #100	; 0x64
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e1f3      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800522a:	4b51      	ldr	r3, [pc, #324]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0xe8>
 8005236:	e000      	b.n	800523a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d063      	beq.n	800530e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005246:	4b4a      	ldr	r3, [pc, #296]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00b      	beq.n	800526a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005252:	4b47      	ldr	r3, [pc, #284]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800525a:	2b08      	cmp	r3, #8
 800525c:	d11c      	bne.n	8005298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800525e:	4b44      	ldr	r3, [pc, #272]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d116      	bne.n	8005298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800526a:	4b41      	ldr	r3, [pc, #260]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_RCC_OscConfig+0x152>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d001      	beq.n	8005282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e1c7      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005282:	4b3b      	ldr	r3, [pc, #236]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4937      	ldr	r1, [pc, #220]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005292:	4313      	orrs	r3, r2
 8005294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005296:	e03a      	b.n	800530e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d020      	beq.n	80052e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052a0:	4b34      	ldr	r3, [pc, #208]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a6:	f7fe fc73 	bl	8003b90 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ae:	f7fe fc6f 	bl	8003b90 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e1a8      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c0:	4b2b      	ldr	r3, [pc, #172]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052cc:	4b28      	ldr	r3, [pc, #160]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	4925      	ldr	r1, [pc, #148]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]
 80052e0:	e015      	b.n	800530e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052e2:	4b24      	ldr	r3, [pc, #144]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fe fc52 	bl	8003b90 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f0:	f7fe fc4e 	bl	8003b90 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e187      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005302:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d036      	beq.n	8005388 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d016      	beq.n	8005350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <HAL_RCC_OscConfig+0x248>)
 8005324:	2201      	movs	r2, #1
 8005326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005328:	f7fe fc32 	bl	8003b90 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005330:	f7fe fc2e 	bl	8003b90 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e167      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005342:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_RCC_OscConfig+0x240>)
 8005344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0x200>
 800534e:	e01b      	b.n	8005388 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCC_OscConfig+0x248>)
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005356:	f7fe fc1b 	bl	8003b90 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800535c:	e00e      	b.n	800537c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800535e:	f7fe fc17 	bl	8003b90 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d907      	bls.n	800537c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e150      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
 8005370:	40023800 	.word	0x40023800
 8005374:	42470000 	.word	0x42470000
 8005378:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800537c:	4b88      	ldr	r3, [pc, #544]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 800537e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ea      	bne.n	800535e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8097 	beq.w	80054c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005396:	2300      	movs	r3, #0
 8005398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539a:	4b81      	ldr	r3, [pc, #516]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	2300      	movs	r3, #0
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	4b7d      	ldr	r3, [pc, #500]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	4a7c      	ldr	r2, [pc, #496]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 80053b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b4:	6413      	str	r3, [r2, #64]	; 0x40
 80053b6:	4b7a      	ldr	r3, [pc, #488]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053be:	60bb      	str	r3, [r7, #8]
 80053c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c2:	2301      	movs	r3, #1
 80053c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c6:	4b77      	ldr	r3, [pc, #476]	; (80055a4 <HAL_RCC_OscConfig+0x474>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d118      	bne.n	8005404 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053d2:	4b74      	ldr	r3, [pc, #464]	; (80055a4 <HAL_RCC_OscConfig+0x474>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a73      	ldr	r2, [pc, #460]	; (80055a4 <HAL_RCC_OscConfig+0x474>)
 80053d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053de:	f7fe fbd7 	bl	8003b90 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e6:	f7fe fbd3 	bl	8003b90 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e10c      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f8:	4b6a      	ldr	r3, [pc, #424]	; (80055a4 <HAL_RCC_OscConfig+0x474>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f0      	beq.n	80053e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d106      	bne.n	800541a <HAL_RCC_OscConfig+0x2ea>
 800540c:	4b64      	ldr	r3, [pc, #400]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	4a63      	ldr	r2, [pc, #396]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	6713      	str	r3, [r2, #112]	; 0x70
 8005418:	e01c      	b.n	8005454 <HAL_RCC_OscConfig+0x324>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b05      	cmp	r3, #5
 8005420:	d10c      	bne.n	800543c <HAL_RCC_OscConfig+0x30c>
 8005422:	4b5f      	ldr	r3, [pc, #380]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005426:	4a5e      	ldr	r2, [pc, #376]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 8005428:	f043 0304 	orr.w	r3, r3, #4
 800542c:	6713      	str	r3, [r2, #112]	; 0x70
 800542e:	4b5c      	ldr	r3, [pc, #368]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	4a5b      	ldr	r2, [pc, #364]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	6713      	str	r3, [r2, #112]	; 0x70
 800543a:	e00b      	b.n	8005454 <HAL_RCC_OscConfig+0x324>
 800543c:	4b58      	ldr	r3, [pc, #352]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005440:	4a57      	ldr	r2, [pc, #348]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	6713      	str	r3, [r2, #112]	; 0x70
 8005448:	4b55      	ldr	r3, [pc, #340]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544c:	4a54      	ldr	r2, [pc, #336]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 800544e:	f023 0304 	bic.w	r3, r3, #4
 8005452:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d015      	beq.n	8005488 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fe fb98 	bl	8003b90 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005462:	e00a      	b.n	800547a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005464:	f7fe fb94 	bl	8003b90 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005472:	4293      	cmp	r3, r2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e0cb      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547a:	4b49      	ldr	r3, [pc, #292]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0ee      	beq.n	8005464 <HAL_RCC_OscConfig+0x334>
 8005486:	e014      	b.n	80054b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005488:	f7fe fb82 	bl	8003b90 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800548e:	e00a      	b.n	80054a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005490:	f7fe fb7e 	bl	8003b90 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	; 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e0b5      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a6:	4b3e      	ldr	r3, [pc, #248]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1ee      	bne.n	8005490 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d105      	bne.n	80054c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b8:	4b39      	ldr	r3, [pc, #228]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	4a38      	ldr	r2, [pc, #224]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 80054be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80a1 	beq.w	8005610 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ce:	4b34      	ldr	r3, [pc, #208]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d05c      	beq.n	8005594 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d141      	bne.n	8005566 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e2:	4b31      	ldr	r3, [pc, #196]	; (80055a8 <HAL_RCC_OscConfig+0x478>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e8:	f7fe fb52 	bl	8003b90 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f0:	f7fe fb4e 	bl	8003b90 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e087      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005502:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69da      	ldr	r2, [r3, #28]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	019b      	lsls	r3, r3, #6
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	3b01      	subs	r3, #1
 8005528:	041b      	lsls	r3, r3, #16
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	491b      	ldr	r1, [pc, #108]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 8005534:	4313      	orrs	r3, r2
 8005536:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005538:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <HAL_RCC_OscConfig+0x478>)
 800553a:	2201      	movs	r2, #1
 800553c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553e:	f7fe fb27 	bl	8003b90 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005546:	f7fe fb23 	bl	8003b90 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e05c      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x416>
 8005564:	e054      	b.n	8005610 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <HAL_RCC_OscConfig+0x478>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fe fb10 	bl	8003b90 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005574:	f7fe fb0c 	bl	8003b90 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e045      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_RCC_OscConfig+0x470>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x444>
 8005592:	e03d      	b.n	8005610 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d107      	bne.n	80055ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e038      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40007000 	.word	0x40007000
 80055a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <HAL_RCC_OscConfig+0x4ec>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d028      	beq.n	800560c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d121      	bne.n	800560c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d11a      	bne.n	800560c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d111      	bne.n	800560c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	3b01      	subs	r3, #1
 80055f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d107      	bne.n	800560c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005608:	429a      	cmp	r2, r3
 800560a:	d001      	beq.n	8005610 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40023800 	.word	0x40023800

08005620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0cc      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005634:	4b68      	ldr	r3, [pc, #416]	; (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d90c      	bls.n	800565c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	4b65      	ldr	r3, [pc, #404]	; (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800564a:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d001      	beq.n	800565c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0b8      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d020      	beq.n	80056aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005674:	4b59      	ldr	r3, [pc, #356]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4a58      	ldr	r2, [pc, #352]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800567e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800568c:	4b53      	ldr	r3, [pc, #332]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4a52      	ldr	r2, [pc, #328]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005698:	4b50      	ldr	r3, [pc, #320]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	494d      	ldr	r1, [pc, #308]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d044      	beq.n	8005740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d107      	bne.n	80056ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056be:	4b47      	ldr	r3, [pc, #284]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d119      	bne.n	80056fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e07f      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d003      	beq.n	80056de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d107      	bne.n	80056ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056de:	4b3f      	ldr	r3, [pc, #252]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e06f      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ee:	4b3b      	ldr	r3, [pc, #236]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e067      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056fe:	4b37      	ldr	r3, [pc, #220]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f023 0203 	bic.w	r2, r3, #3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4934      	ldr	r1, [pc, #208]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 800570c:	4313      	orrs	r3, r2
 800570e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005710:	f7fe fa3e 	bl	8003b90 <HAL_GetTick>
 8005714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005716:	e00a      	b.n	800572e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005718:	f7fe fa3a 	bl	8003b90 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f241 3288 	movw	r2, #5000	; 0x1388
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e04f      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572e:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 020c 	and.w	r2, r3, #12
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	429a      	cmp	r2, r3
 800573e:	d1eb      	bne.n	8005718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d20c      	bcs.n	8005768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574e:	4b22      	ldr	r3, [pc, #136]	; (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005756:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d001      	beq.n	8005768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e032      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005774:	4b19      	ldr	r3, [pc, #100]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4916      	ldr	r1, [pc, #88]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	490e      	ldr	r1, [pc, #56]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057a6:	f000 f821 	bl	80057ec <HAL_RCC_GetSysClockFreq>
 80057aa:	4602      	mov	r2, r0
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	490a      	ldr	r1, [pc, #40]	; (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 80057b8:	5ccb      	ldrb	r3, [r1, r3]
 80057ba:	fa22 f303 	lsr.w	r3, r2, r3
 80057be:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 80057c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057c2:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <HAL_RCC_ClockConfig+0x1c8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe f99e 	bl	8003b08 <HAL_InitTick>

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40023c00 	.word	0x40023c00
 80057dc:	40023800 	.word	0x40023800
 80057e0:	0800be98 	.word	0x0800be98
 80057e4:	20000018 	.word	0x20000018
 80057e8:	2000001c 	.word	0x2000001c

080057ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f0:	b090      	sub	sp, #64	; 0x40
 80057f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
 80057f8:	2300      	movs	r3, #0
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fc:	2300      	movs	r3, #0
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005804:	4b59      	ldr	r3, [pc, #356]	; (800596c <HAL_RCC_GetSysClockFreq+0x180>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 030c 	and.w	r3, r3, #12
 800580c:	2b08      	cmp	r3, #8
 800580e:	d00d      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0x40>
 8005810:	2b08      	cmp	r3, #8
 8005812:	f200 80a1 	bhi.w	8005958 <HAL_RCC_GetSysClockFreq+0x16c>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_RCC_GetSysClockFreq+0x34>
 800581a:	2b04      	cmp	r3, #4
 800581c:	d003      	beq.n	8005826 <HAL_RCC_GetSysClockFreq+0x3a>
 800581e:	e09b      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005820:	4b53      	ldr	r3, [pc, #332]	; (8005970 <HAL_RCC_GetSysClockFreq+0x184>)
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005824:	e09b      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005826:	4b53      	ldr	r3, [pc, #332]	; (8005974 <HAL_RCC_GetSysClockFreq+0x188>)
 8005828:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800582a:	e098      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800582c:	4b4f      	ldr	r3, [pc, #316]	; (800596c <HAL_RCC_GetSysClockFreq+0x180>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005836:	4b4d      	ldr	r3, [pc, #308]	; (800596c <HAL_RCC_GetSysClockFreq+0x180>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d028      	beq.n	8005894 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005842:	4b4a      	ldr	r3, [pc, #296]	; (800596c <HAL_RCC_GetSysClockFreq+0x180>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	099b      	lsrs	r3, r3, #6
 8005848:	2200      	movs	r2, #0
 800584a:	623b      	str	r3, [r7, #32]
 800584c:	627a      	str	r2, [r7, #36]	; 0x24
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005854:	2100      	movs	r1, #0
 8005856:	4b47      	ldr	r3, [pc, #284]	; (8005974 <HAL_RCC_GetSysClockFreq+0x188>)
 8005858:	fb03 f201 	mul.w	r2, r3, r1
 800585c:	2300      	movs	r3, #0
 800585e:	fb00 f303 	mul.w	r3, r0, r3
 8005862:	4413      	add	r3, r2
 8005864:	4a43      	ldr	r2, [pc, #268]	; (8005974 <HAL_RCC_GetSysClockFreq+0x188>)
 8005866:	fba0 1202 	umull	r1, r2, r0, r2
 800586a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800586c:	460a      	mov	r2, r1
 800586e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005872:	4413      	add	r3, r2
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	2200      	movs	r2, #0
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	61fa      	str	r2, [r7, #28]
 800587e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005882:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005886:	f7fb f9e7 	bl	8000c58 <__aeabi_uldivmod>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4613      	mov	r3, r2
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005892:	e053      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005894:	4b35      	ldr	r3, [pc, #212]	; (800596c <HAL_RCC_GetSysClockFreq+0x180>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	099b      	lsrs	r3, r3, #6
 800589a:	2200      	movs	r2, #0
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	617a      	str	r2, [r7, #20]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80058a6:	f04f 0b00 	mov.w	fp, #0
 80058aa:	4652      	mov	r2, sl
 80058ac:	465b      	mov	r3, fp
 80058ae:	f04f 0000 	mov.w	r0, #0
 80058b2:	f04f 0100 	mov.w	r1, #0
 80058b6:	0159      	lsls	r1, r3, #5
 80058b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058bc:	0150      	lsls	r0, r2, #5
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	ebb2 080a 	subs.w	r8, r2, sl
 80058c6:	eb63 090b 	sbc.w	r9, r3, fp
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80058d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80058da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80058de:	ebb2 0408 	subs.w	r4, r2, r8
 80058e2:	eb63 0509 	sbc.w	r5, r3, r9
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	00eb      	lsls	r3, r5, #3
 80058f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058f4:	00e2      	lsls	r2, r4, #3
 80058f6:	4614      	mov	r4, r2
 80058f8:	461d      	mov	r5, r3
 80058fa:	eb14 030a 	adds.w	r3, r4, sl
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	eb45 030b 	adc.w	r3, r5, fp
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005912:	4629      	mov	r1, r5
 8005914:	028b      	lsls	r3, r1, #10
 8005916:	4621      	mov	r1, r4
 8005918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800591c:	4621      	mov	r1, r4
 800591e:	028a      	lsls	r2, r1, #10
 8005920:	4610      	mov	r0, r2
 8005922:	4619      	mov	r1, r3
 8005924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005926:	2200      	movs	r2, #0
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	60fa      	str	r2, [r7, #12]
 800592c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005930:	f7fb f992 	bl	8000c58 <__aeabi_uldivmod>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4613      	mov	r3, r2
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCC_GetSysClockFreq+0x180>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	3301      	adds	r3, #1
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800594c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005956:	e002      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <HAL_RCC_GetSysClockFreq+0x184>)
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800595c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005960:	4618      	mov	r0, r3
 8005962:	3740      	adds	r7, #64	; 0x40
 8005964:	46bd      	mov	sp, r7
 8005966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800
 8005970:	00f42400 	.word	0x00f42400
 8005974:	017d7840 	.word	0x017d7840

08005978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <HAL_RCC_GetHCLKFreq+0x14>)
 800597e:	681b      	ldr	r3, [r3, #0]
}
 8005980:	4618      	mov	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	20000018 	.word	0x20000018

08005990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005994:	f7ff fff0 	bl	8005978 <HAL_RCC_GetHCLKFreq>
 8005998:	4602      	mov	r2, r0
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	0a9b      	lsrs	r3, r3, #10
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	4903      	ldr	r1, [pc, #12]	; (80059b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a6:	5ccb      	ldrb	r3, [r1, r3]
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40023800 	.word	0x40023800
 80059b4:	0800bea8 	.word	0x0800bea8

080059b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e07b      	b.n	8005ac2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d108      	bne.n	80059e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059da:	d009      	beq.n	80059f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	61da      	str	r2, [r3, #28]
 80059e2:	e005      	b.n	80059f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fd faa2 	bl	8002f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a74:	ea42 0103 	orr.w	r1, r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	0c1b      	lsrs	r3, r3, #16
 8005a8e:	f003 0104 	and.w	r1, r3, #4
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	f003 0210 	and.w	r2, r3, #16
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69da      	ldr	r2, [r3, #28]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ab0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b088      	sub	sp, #32
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	603b      	str	r3, [r7, #0]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_SPI_Transmit+0x22>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e126      	b.n	8005d3a <HAL_SPI_Transmit+0x270>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005af4:	f7fe f84c 	bl	8003b90 <HAL_GetTick>
 8005af8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d002      	beq.n	8005b10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b0e:	e10b      	b.n	8005d28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_SPI_Transmit+0x52>
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b20:	e102      	b.n	8005d28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2203      	movs	r2, #3
 8005b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b68:	d10f      	bne.n	8005b8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d007      	beq.n	8005ba8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb0:	d14b      	bne.n	8005c4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_SPI_Transmit+0xf6>
 8005bba:	8afb      	ldrh	r3, [r7, #22]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d13e      	bne.n	8005c3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	881a      	ldrh	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	1c9a      	adds	r2, r3, #2
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005be4:	e02b      	b.n	8005c3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d112      	bne.n	8005c1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	881a      	ldrh	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	1c9a      	adds	r2, r3, #2
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c18:	e011      	b.n	8005c3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c1a:	f7fd ffb9 	bl	8003b90 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d803      	bhi.n	8005c32 <HAL_SPI_Transmit+0x168>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d102      	bne.n	8005c38 <HAL_SPI_Transmit+0x16e>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c3c:	e074      	b.n	8005d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1ce      	bne.n	8005be6 <HAL_SPI_Transmit+0x11c>
 8005c48:	e04c      	b.n	8005ce4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_SPI_Transmit+0x18e>
 8005c52:	8afb      	ldrh	r3, [r7, #22]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d140      	bne.n	8005cda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	330c      	adds	r3, #12
 8005c62:	7812      	ldrb	r2, [r2, #0]
 8005c64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c7e:	e02c      	b.n	8005cda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d113      	bne.n	8005cb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cb4:	e011      	b.n	8005cda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cb6:	f7fd ff6b 	bl	8003b90 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d803      	bhi.n	8005cce <HAL_SPI_Transmit+0x204>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d102      	bne.n	8005cd4 <HAL_SPI_Transmit+0x20a>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cd8:	e026      	b.n	8005d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1cd      	bne.n	8005c80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f8b3 	bl	8005e54 <SPI_EndRxTxTransaction>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d02:	2300      	movs	r3, #0
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e000      	b.n	8005d28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d54:	f7fd ff1c 	bl	8003b90 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	4413      	add	r3, r2
 8005d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d64:	f7fd ff14 	bl	8003b90 <HAL_GetTick>
 8005d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d6a:	4b39      	ldr	r3, [pc, #228]	; (8005e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	015b      	lsls	r3, r3, #5
 8005d70:	0d1b      	lsrs	r3, r3, #20
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	fb02 f303 	mul.w	r3, r2, r3
 8005d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d7a:	e054      	b.n	8005e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d050      	beq.n	8005e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d84:	f7fd ff04 	bl	8003b90 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d902      	bls.n	8005d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d13d      	bne.n	8005e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005db2:	d111      	bne.n	8005dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dbc:	d004      	beq.n	8005dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc6:	d107      	bne.n	8005dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de0:	d10f      	bne.n	8005e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e017      	b.n	8005e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	bf0c      	ite	eq
 8005e36:	2301      	moveq	r3, #1
 8005e38:	2300      	movne	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d19b      	bne.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000018 	.word	0x20000018

08005e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <SPI_EndRxTxTransaction+0x7c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1b      	ldr	r2, [pc, #108]	; (8005ed4 <SPI_EndRxTxTransaction+0x80>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	0d5b      	lsrs	r3, r3, #21
 8005e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e7e:	d112      	bne.n	8005ea6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2200      	movs	r2, #0
 8005e88:	2180      	movs	r1, #128	; 0x80
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f7ff ff5a 	bl	8005d44 <SPI_WaitFlagStateUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e00f      	b.n	8005ec6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebc:	2b80      	cmp	r3, #128	; 0x80
 8005ebe:	d0f2      	beq.n	8005ea6 <SPI_EndRxTxTransaction+0x52>
 8005ec0:	e000      	b.n	8005ec4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ec2:	bf00      	nop
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000018 	.word	0x20000018
 8005ed4:	165e9f81 	.word	0x165e9f81

08005ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e041      	b.n	8005f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fd fd8e 	bl	8003a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f000 fa88 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d001      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e044      	b.n	800601a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <HAL_TIM_Base_Start_IT+0xb0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d013      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1a      	ldr	r2, [pc, #104]	; (800602c <HAL_TIM_Base_Start_IT+0xb4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a19      	ldr	r2, [pc, #100]	; (8006030 <HAL_TIM_Base_Start_IT+0xb8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a17      	ldr	r2, [pc, #92]	; (8006034 <HAL_TIM_Base_Start_IT+0xbc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a16      	ldr	r2, [pc, #88]	; (8006038 <HAL_TIM_Base_Start_IT+0xc0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d111      	bne.n	8006008 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d010      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006006:	e007      	b.n	8006018 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40014000 	.word	0x40014000

0800603c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b02      	cmp	r3, #2
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b02      	cmp	r3, #2
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0202 	mvn.w	r2, #2
 8006068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f9b5 	bl	80063ee <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f9a7 	bl	80063da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f9b8 	bl	8006402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d122      	bne.n	80060ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d11b      	bne.n	80060ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0204 	mvn.w	r2, #4
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f98b 	bl	80063ee <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f97d 	bl	80063da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f98e 	bl	8006402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d122      	bne.n	8006140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b08      	cmp	r3, #8
 8006106:	d11b      	bne.n	8006140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0208 	mvn.w	r2, #8
 8006110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2204      	movs	r2, #4
 8006116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f961 	bl	80063ee <HAL_TIM_IC_CaptureCallback>
 800612c:	e005      	b.n	800613a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f953 	bl	80063da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f964 	bl	8006402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b10      	cmp	r3, #16
 800614c:	d122      	bne.n	8006194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b10      	cmp	r3, #16
 800615a:	d11b      	bne.n	8006194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0210 	mvn.w	r2, #16
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2208      	movs	r2, #8
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f937 	bl	80063ee <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f929 	bl	80063da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f93a 	bl	8006402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d10e      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0201 	mvn.w	r2, #1
 80061b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fc fd32 	bl	8002c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b80      	cmp	r3, #128	; 0x80
 80061cc:	d10e      	bne.n	80061ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d8:	2b80      	cmp	r3, #128	; 0x80
 80061da:	d107      	bne.n	80061ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fab2 	bl	8006750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d10e      	bne.n	8006218 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d107      	bne.n	8006218 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f8ff 	bl	8006416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b20      	cmp	r3, #32
 8006224:	d10e      	bne.n	8006244 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b20      	cmp	r3, #32
 8006232:	d107      	bne.n	8006244 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0220 	mvn.w	r2, #32
 800623c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fa7c 	bl	800673c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_TIM_ConfigClockSource+0x1c>
 8006264:	2302      	movs	r3, #2
 8006266:	e0b4      	b.n	80063d2 <HAL_TIM_ConfigClockSource+0x186>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800628e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a0:	d03e      	beq.n	8006320 <HAL_TIM_ConfigClockSource+0xd4>
 80062a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a6:	f200 8087 	bhi.w	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ae:	f000 8086 	beq.w	80063be <HAL_TIM_ConfigClockSource+0x172>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b6:	d87f      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b70      	cmp	r3, #112	; 0x70
 80062ba:	d01a      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0xa6>
 80062bc:	2b70      	cmp	r3, #112	; 0x70
 80062be:	d87b      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b60      	cmp	r3, #96	; 0x60
 80062c2:	d050      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x11a>
 80062c4:	2b60      	cmp	r3, #96	; 0x60
 80062c6:	d877      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b50      	cmp	r3, #80	; 0x50
 80062ca:	d03c      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0xfa>
 80062cc:	2b50      	cmp	r3, #80	; 0x50
 80062ce:	d873      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d058      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x13a>
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d86f      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b30      	cmp	r3, #48	; 0x30
 80062da:	d064      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062dc:	2b30      	cmp	r3, #48	; 0x30
 80062de:	d86b      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d060      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d867      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d05c      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062ec:	2b10      	cmp	r3, #16
 80062ee:	d05a      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062f0:	e062      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6899      	ldr	r1, [r3, #8]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f000 f98d 	bl	8006620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	609a      	str	r2, [r3, #8]
      break;
 800631e:	e04f      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	6899      	ldr	r1, [r3, #8]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f000 f976 	bl	8006620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006342:	609a      	str	r2, [r3, #8]
      break;
 8006344:	e03c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	461a      	mov	r2, r3
 8006354:	f000 f8ea 	bl	800652c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2150      	movs	r1, #80	; 0x50
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f943 	bl	80065ea <TIM_ITRx_SetConfig>
      break;
 8006364:	e02c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	461a      	mov	r2, r3
 8006374:	f000 f909 	bl	800658a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2160      	movs	r1, #96	; 0x60
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f933 	bl	80065ea <TIM_ITRx_SetConfig>
      break;
 8006384:	e01c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	461a      	mov	r2, r3
 8006394:	f000 f8ca 	bl	800652c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2140      	movs	r1, #64	; 0x40
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 f923 	bl	80065ea <TIM_ITRx_SetConfig>
      break;
 80063a4:	e00c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f000 f91a 	bl	80065ea <TIM_ITRx_SetConfig>
      break;
 80063b6:	e003      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e000      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a34      	ldr	r2, [pc, #208]	; (8006510 <TIM_Base_SetConfig+0xe4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00f      	beq.n	8006464 <TIM_Base_SetConfig+0x38>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644a:	d00b      	beq.n	8006464 <TIM_Base_SetConfig+0x38>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a31      	ldr	r2, [pc, #196]	; (8006514 <TIM_Base_SetConfig+0xe8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d007      	beq.n	8006464 <TIM_Base_SetConfig+0x38>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a30      	ldr	r2, [pc, #192]	; (8006518 <TIM_Base_SetConfig+0xec>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_Base_SetConfig+0x38>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a2f      	ldr	r2, [pc, #188]	; (800651c <TIM_Base_SetConfig+0xf0>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d108      	bne.n	8006476 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a25      	ldr	r2, [pc, #148]	; (8006510 <TIM_Base_SetConfig+0xe4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01b      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006484:	d017      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a22      	ldr	r2, [pc, #136]	; (8006514 <TIM_Base_SetConfig+0xe8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a21      	ldr	r2, [pc, #132]	; (8006518 <TIM_Base_SetConfig+0xec>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00f      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a20      	ldr	r2, [pc, #128]	; (800651c <TIM_Base_SetConfig+0xf0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00b      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a1f      	ldr	r2, [pc, #124]	; (8006520 <TIM_Base_SetConfig+0xf4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d007      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <TIM_Base_SetConfig+0xf8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a1d      	ldr	r2, [pc, #116]	; (8006528 <TIM_Base_SetConfig+0xfc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d108      	bne.n	80064c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a08      	ldr	r2, [pc, #32]	; (8006510 <TIM_Base_SetConfig+0xe4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d103      	bne.n	80064fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	615a      	str	r2, [r3, #20]
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40010000 	.word	0x40010000
 8006514:	40000400 	.word	0x40000400
 8006518:	40000800 	.word	0x40000800
 800651c:	40000c00 	.word	0x40000c00
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800

0800652c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f023 0201 	bic.w	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 030a 	bic.w	r3, r3, #10
 8006568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800658a:	b480      	push	{r7}
 800658c:	b087      	sub	sp, #28
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f023 0210 	bic.w	r2, r3, #16
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	031b      	lsls	r3, r3, #12
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	f043 0307 	orr.w	r3, r3, #7
 800660c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	609a      	str	r2, [r3, #8]
}
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800663a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	021a      	lsls	r2, r3, #8
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	431a      	orrs	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4313      	orrs	r3, r2
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	609a      	str	r2, [r3, #8]
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006674:	2302      	movs	r3, #2
 8006676:	e050      	b.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d018      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c4:	d013      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a18      	ldr	r2, [pc, #96]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a16      	ldr	r2, [pc, #88]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a15      	ldr	r2, [pc, #84]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a13      	ldr	r2, [pc, #76]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d10c      	bne.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40010000 	.word	0x40010000
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40000c00 	.word	0x40000c00
 8006738:	40014000 	.word	0x40014000

0800673c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <__errno>:
 8006764:	4b01      	ldr	r3, [pc, #4]	; (800676c <__errno+0x8>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000024 	.word	0x20000024

08006770 <__libc_init_array>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	4d0d      	ldr	r5, [pc, #52]	; (80067a8 <__libc_init_array+0x38>)
 8006774:	4c0d      	ldr	r4, [pc, #52]	; (80067ac <__libc_init_array+0x3c>)
 8006776:	1b64      	subs	r4, r4, r5
 8006778:	10a4      	asrs	r4, r4, #2
 800677a:	2600      	movs	r6, #0
 800677c:	42a6      	cmp	r6, r4
 800677e:	d109      	bne.n	8006794 <__libc_init_array+0x24>
 8006780:	4d0b      	ldr	r5, [pc, #44]	; (80067b0 <__libc_init_array+0x40>)
 8006782:	4c0c      	ldr	r4, [pc, #48]	; (80067b4 <__libc_init_array+0x44>)
 8006784:	f004 fc7a 	bl	800b07c <_init>
 8006788:	1b64      	subs	r4, r4, r5
 800678a:	10a4      	asrs	r4, r4, #2
 800678c:	2600      	movs	r6, #0
 800678e:	42a6      	cmp	r6, r4
 8006790:	d105      	bne.n	800679e <__libc_init_array+0x2e>
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	f855 3b04 	ldr.w	r3, [r5], #4
 8006798:	4798      	blx	r3
 800679a:	3601      	adds	r6, #1
 800679c:	e7ee      	b.n	800677c <__libc_init_array+0xc>
 800679e:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a2:	4798      	blx	r3
 80067a4:	3601      	adds	r6, #1
 80067a6:	e7f2      	b.n	800678e <__libc_init_array+0x1e>
 80067a8:	0800c4a8 	.word	0x0800c4a8
 80067ac:	0800c4a8 	.word	0x0800c4a8
 80067b0:	0800c4a8 	.word	0x0800c4a8
 80067b4:	0800c4ac 	.word	0x0800c4ac

080067b8 <malloc>:
 80067b8:	4b02      	ldr	r3, [pc, #8]	; (80067c4 <malloc+0xc>)
 80067ba:	4601      	mov	r1, r0
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	f000 b87f 	b.w	80068c0 <_malloc_r>
 80067c2:	bf00      	nop
 80067c4:	20000024 	.word	0x20000024

080067c8 <free>:
 80067c8:	4b02      	ldr	r3, [pc, #8]	; (80067d4 <free+0xc>)
 80067ca:	4601      	mov	r1, r0
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	f000 b80b 	b.w	80067e8 <_free_r>
 80067d2:	bf00      	nop
 80067d4:	20000024 	.word	0x20000024

080067d8 <memset>:
 80067d8:	4402      	add	r2, r0
 80067da:	4603      	mov	r3, r0
 80067dc:	4293      	cmp	r3, r2
 80067de:	d100      	bne.n	80067e2 <memset+0xa>
 80067e0:	4770      	bx	lr
 80067e2:	f803 1b01 	strb.w	r1, [r3], #1
 80067e6:	e7f9      	b.n	80067dc <memset+0x4>

080067e8 <_free_r>:
 80067e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ea:	2900      	cmp	r1, #0
 80067ec:	d044      	beq.n	8006878 <_free_r+0x90>
 80067ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f2:	9001      	str	r0, [sp, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f1a1 0404 	sub.w	r4, r1, #4
 80067fa:	bfb8      	it	lt
 80067fc:	18e4      	addlt	r4, r4, r3
 80067fe:	f001 fbfb 	bl	8007ff8 <__malloc_lock>
 8006802:	4a1e      	ldr	r2, [pc, #120]	; (800687c <_free_r+0x94>)
 8006804:	9801      	ldr	r0, [sp, #4]
 8006806:	6813      	ldr	r3, [r2, #0]
 8006808:	b933      	cbnz	r3, 8006818 <_free_r+0x30>
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	6014      	str	r4, [r2, #0]
 800680e:	b003      	add	sp, #12
 8006810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006814:	f001 bbf6 	b.w	8008004 <__malloc_unlock>
 8006818:	42a3      	cmp	r3, r4
 800681a:	d908      	bls.n	800682e <_free_r+0x46>
 800681c:	6825      	ldr	r5, [r4, #0]
 800681e:	1961      	adds	r1, r4, r5
 8006820:	428b      	cmp	r3, r1
 8006822:	bf01      	itttt	eq
 8006824:	6819      	ldreq	r1, [r3, #0]
 8006826:	685b      	ldreq	r3, [r3, #4]
 8006828:	1949      	addeq	r1, r1, r5
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	e7ed      	b.n	800680a <_free_r+0x22>
 800682e:	461a      	mov	r2, r3
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	b10b      	cbz	r3, 8006838 <_free_r+0x50>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d9fa      	bls.n	800682e <_free_r+0x46>
 8006838:	6811      	ldr	r1, [r2, #0]
 800683a:	1855      	adds	r5, r2, r1
 800683c:	42a5      	cmp	r5, r4
 800683e:	d10b      	bne.n	8006858 <_free_r+0x70>
 8006840:	6824      	ldr	r4, [r4, #0]
 8006842:	4421      	add	r1, r4
 8006844:	1854      	adds	r4, r2, r1
 8006846:	42a3      	cmp	r3, r4
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	d1e0      	bne.n	800680e <_free_r+0x26>
 800684c:	681c      	ldr	r4, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	6053      	str	r3, [r2, #4]
 8006852:	4421      	add	r1, r4
 8006854:	6011      	str	r1, [r2, #0]
 8006856:	e7da      	b.n	800680e <_free_r+0x26>
 8006858:	d902      	bls.n	8006860 <_free_r+0x78>
 800685a:	230c      	movs	r3, #12
 800685c:	6003      	str	r3, [r0, #0]
 800685e:	e7d6      	b.n	800680e <_free_r+0x26>
 8006860:	6825      	ldr	r5, [r4, #0]
 8006862:	1961      	adds	r1, r4, r5
 8006864:	428b      	cmp	r3, r1
 8006866:	bf04      	itt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	bf04      	itt	eq
 8006870:	1949      	addeq	r1, r1, r5
 8006872:	6021      	streq	r1, [r4, #0]
 8006874:	6054      	str	r4, [r2, #4]
 8006876:	e7ca      	b.n	800680e <_free_r+0x26>
 8006878:	b003      	add	sp, #12
 800687a:	bd30      	pop	{r4, r5, pc}
 800687c:	200003e4 	.word	0x200003e4

08006880 <sbrk_aligned>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4e0e      	ldr	r6, [pc, #56]	; (80068bc <sbrk_aligned+0x3c>)
 8006884:	460c      	mov	r4, r1
 8006886:	6831      	ldr	r1, [r6, #0]
 8006888:	4605      	mov	r5, r0
 800688a:	b911      	cbnz	r1, 8006892 <sbrk_aligned+0x12>
 800688c:	f000 fcf6 	bl	800727c <_sbrk_r>
 8006890:	6030      	str	r0, [r6, #0]
 8006892:	4621      	mov	r1, r4
 8006894:	4628      	mov	r0, r5
 8006896:	f000 fcf1 	bl	800727c <_sbrk_r>
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	d00a      	beq.n	80068b4 <sbrk_aligned+0x34>
 800689e:	1cc4      	adds	r4, r0, #3
 80068a0:	f024 0403 	bic.w	r4, r4, #3
 80068a4:	42a0      	cmp	r0, r4
 80068a6:	d007      	beq.n	80068b8 <sbrk_aligned+0x38>
 80068a8:	1a21      	subs	r1, r4, r0
 80068aa:	4628      	mov	r0, r5
 80068ac:	f000 fce6 	bl	800727c <_sbrk_r>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d101      	bne.n	80068b8 <sbrk_aligned+0x38>
 80068b4:	f04f 34ff 	mov.w	r4, #4294967295
 80068b8:	4620      	mov	r0, r4
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	200003e8 	.word	0x200003e8

080068c0 <_malloc_r>:
 80068c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c4:	1ccd      	adds	r5, r1, #3
 80068c6:	f025 0503 	bic.w	r5, r5, #3
 80068ca:	3508      	adds	r5, #8
 80068cc:	2d0c      	cmp	r5, #12
 80068ce:	bf38      	it	cc
 80068d0:	250c      	movcc	r5, #12
 80068d2:	2d00      	cmp	r5, #0
 80068d4:	4607      	mov	r7, r0
 80068d6:	db01      	blt.n	80068dc <_malloc_r+0x1c>
 80068d8:	42a9      	cmp	r1, r5
 80068da:	d905      	bls.n	80068e8 <_malloc_r+0x28>
 80068dc:	230c      	movs	r3, #12
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	2600      	movs	r6, #0
 80068e2:	4630      	mov	r0, r6
 80068e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e8:	4e2e      	ldr	r6, [pc, #184]	; (80069a4 <_malloc_r+0xe4>)
 80068ea:	f001 fb85 	bl	8007ff8 <__malloc_lock>
 80068ee:	6833      	ldr	r3, [r6, #0]
 80068f0:	461c      	mov	r4, r3
 80068f2:	bb34      	cbnz	r4, 8006942 <_malloc_r+0x82>
 80068f4:	4629      	mov	r1, r5
 80068f6:	4638      	mov	r0, r7
 80068f8:	f7ff ffc2 	bl	8006880 <sbrk_aligned>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	4604      	mov	r4, r0
 8006900:	d14d      	bne.n	800699e <_malloc_r+0xde>
 8006902:	6834      	ldr	r4, [r6, #0]
 8006904:	4626      	mov	r6, r4
 8006906:	2e00      	cmp	r6, #0
 8006908:	d140      	bne.n	800698c <_malloc_r+0xcc>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	4631      	mov	r1, r6
 800690e:	4638      	mov	r0, r7
 8006910:	eb04 0803 	add.w	r8, r4, r3
 8006914:	f000 fcb2 	bl	800727c <_sbrk_r>
 8006918:	4580      	cmp	r8, r0
 800691a:	d13a      	bne.n	8006992 <_malloc_r+0xd2>
 800691c:	6821      	ldr	r1, [r4, #0]
 800691e:	3503      	adds	r5, #3
 8006920:	1a6d      	subs	r5, r5, r1
 8006922:	f025 0503 	bic.w	r5, r5, #3
 8006926:	3508      	adds	r5, #8
 8006928:	2d0c      	cmp	r5, #12
 800692a:	bf38      	it	cc
 800692c:	250c      	movcc	r5, #12
 800692e:	4629      	mov	r1, r5
 8006930:	4638      	mov	r0, r7
 8006932:	f7ff ffa5 	bl	8006880 <sbrk_aligned>
 8006936:	3001      	adds	r0, #1
 8006938:	d02b      	beq.n	8006992 <_malloc_r+0xd2>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	442b      	add	r3, r5
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	e00e      	b.n	8006960 <_malloc_r+0xa0>
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	1b52      	subs	r2, r2, r5
 8006946:	d41e      	bmi.n	8006986 <_malloc_r+0xc6>
 8006948:	2a0b      	cmp	r2, #11
 800694a:	d916      	bls.n	800697a <_malloc_r+0xba>
 800694c:	1961      	adds	r1, r4, r5
 800694e:	42a3      	cmp	r3, r4
 8006950:	6025      	str	r5, [r4, #0]
 8006952:	bf18      	it	ne
 8006954:	6059      	strne	r1, [r3, #4]
 8006956:	6863      	ldr	r3, [r4, #4]
 8006958:	bf08      	it	eq
 800695a:	6031      	streq	r1, [r6, #0]
 800695c:	5162      	str	r2, [r4, r5]
 800695e:	604b      	str	r3, [r1, #4]
 8006960:	4638      	mov	r0, r7
 8006962:	f104 060b 	add.w	r6, r4, #11
 8006966:	f001 fb4d 	bl	8008004 <__malloc_unlock>
 800696a:	f026 0607 	bic.w	r6, r6, #7
 800696e:	1d23      	adds	r3, r4, #4
 8006970:	1af2      	subs	r2, r6, r3
 8006972:	d0b6      	beq.n	80068e2 <_malloc_r+0x22>
 8006974:	1b9b      	subs	r3, r3, r6
 8006976:	50a3      	str	r3, [r4, r2]
 8006978:	e7b3      	b.n	80068e2 <_malloc_r+0x22>
 800697a:	6862      	ldr	r2, [r4, #4]
 800697c:	42a3      	cmp	r3, r4
 800697e:	bf0c      	ite	eq
 8006980:	6032      	streq	r2, [r6, #0]
 8006982:	605a      	strne	r2, [r3, #4]
 8006984:	e7ec      	b.n	8006960 <_malloc_r+0xa0>
 8006986:	4623      	mov	r3, r4
 8006988:	6864      	ldr	r4, [r4, #4]
 800698a:	e7b2      	b.n	80068f2 <_malloc_r+0x32>
 800698c:	4634      	mov	r4, r6
 800698e:	6876      	ldr	r6, [r6, #4]
 8006990:	e7b9      	b.n	8006906 <_malloc_r+0x46>
 8006992:	230c      	movs	r3, #12
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	4638      	mov	r0, r7
 8006998:	f001 fb34 	bl	8008004 <__malloc_unlock>
 800699c:	e7a1      	b.n	80068e2 <_malloc_r+0x22>
 800699e:	6025      	str	r5, [r4, #0]
 80069a0:	e7de      	b.n	8006960 <_malloc_r+0xa0>
 80069a2:	bf00      	nop
 80069a4:	200003e4 	.word	0x200003e4

080069a8 <__cvt>:
 80069a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	ec55 4b10 	vmov	r4, r5, d0
 80069b0:	2d00      	cmp	r5, #0
 80069b2:	460e      	mov	r6, r1
 80069b4:	4619      	mov	r1, r3
 80069b6:	462b      	mov	r3, r5
 80069b8:	bfbb      	ittet	lt
 80069ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069be:	461d      	movlt	r5, r3
 80069c0:	2300      	movge	r3, #0
 80069c2:	232d      	movlt	r3, #45	; 0x2d
 80069c4:	700b      	strb	r3, [r1, #0]
 80069c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069cc:	4691      	mov	r9, r2
 80069ce:	f023 0820 	bic.w	r8, r3, #32
 80069d2:	bfbc      	itt	lt
 80069d4:	4622      	movlt	r2, r4
 80069d6:	4614      	movlt	r4, r2
 80069d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069dc:	d005      	beq.n	80069ea <__cvt+0x42>
 80069de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069e2:	d100      	bne.n	80069e6 <__cvt+0x3e>
 80069e4:	3601      	adds	r6, #1
 80069e6:	2102      	movs	r1, #2
 80069e8:	e000      	b.n	80069ec <__cvt+0x44>
 80069ea:	2103      	movs	r1, #3
 80069ec:	ab03      	add	r3, sp, #12
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	ab02      	add	r3, sp, #8
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	ec45 4b10 	vmov	d0, r4, r5
 80069f8:	4653      	mov	r3, sl
 80069fa:	4632      	mov	r2, r6
 80069fc:	f000 fcfc 	bl	80073f8 <_dtoa_r>
 8006a00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a04:	4607      	mov	r7, r0
 8006a06:	d102      	bne.n	8006a0e <__cvt+0x66>
 8006a08:	f019 0f01 	tst.w	r9, #1
 8006a0c:	d022      	beq.n	8006a54 <__cvt+0xac>
 8006a0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a12:	eb07 0906 	add.w	r9, r7, r6
 8006a16:	d110      	bne.n	8006a3a <__cvt+0x92>
 8006a18:	783b      	ldrb	r3, [r7, #0]
 8006a1a:	2b30      	cmp	r3, #48	; 0x30
 8006a1c:	d10a      	bne.n	8006a34 <__cvt+0x8c>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2300      	movs	r3, #0
 8006a22:	4620      	mov	r0, r4
 8006a24:	4629      	mov	r1, r5
 8006a26:	f7fa f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a2a:	b918      	cbnz	r0, 8006a34 <__cvt+0x8c>
 8006a2c:	f1c6 0601 	rsb	r6, r6, #1
 8006a30:	f8ca 6000 	str.w	r6, [sl]
 8006a34:	f8da 3000 	ldr.w	r3, [sl]
 8006a38:	4499      	add	r9, r3
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4620      	mov	r0, r4
 8006a40:	4629      	mov	r1, r5
 8006a42:	f7fa f849 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a46:	b108      	cbz	r0, 8006a4c <__cvt+0xa4>
 8006a48:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a4c:	2230      	movs	r2, #48	; 0x30
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	454b      	cmp	r3, r9
 8006a52:	d307      	bcc.n	8006a64 <__cvt+0xbc>
 8006a54:	9b03      	ldr	r3, [sp, #12]
 8006a56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a58:	1bdb      	subs	r3, r3, r7
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	b004      	add	sp, #16
 8006a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a64:	1c59      	adds	r1, r3, #1
 8006a66:	9103      	str	r1, [sp, #12]
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	e7f0      	b.n	8006a4e <__cvt+0xa6>

08006a6c <__exponent>:
 8006a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2900      	cmp	r1, #0
 8006a72:	bfb8      	it	lt
 8006a74:	4249      	neglt	r1, r1
 8006a76:	f803 2b02 	strb.w	r2, [r3], #2
 8006a7a:	bfb4      	ite	lt
 8006a7c:	222d      	movlt	r2, #45	; 0x2d
 8006a7e:	222b      	movge	r2, #43	; 0x2b
 8006a80:	2909      	cmp	r1, #9
 8006a82:	7042      	strb	r2, [r0, #1]
 8006a84:	dd2a      	ble.n	8006adc <__exponent+0x70>
 8006a86:	f10d 0407 	add.w	r4, sp, #7
 8006a8a:	46a4      	mov	ip, r4
 8006a8c:	270a      	movs	r7, #10
 8006a8e:	46a6      	mov	lr, r4
 8006a90:	460a      	mov	r2, r1
 8006a92:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a96:	fb07 1516 	mls	r5, r7, r6, r1
 8006a9a:	3530      	adds	r5, #48	; 0x30
 8006a9c:	2a63      	cmp	r2, #99	; 0x63
 8006a9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006aa2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	dcf1      	bgt.n	8006a8e <__exponent+0x22>
 8006aaa:	3130      	adds	r1, #48	; 0x30
 8006aac:	f1ae 0502 	sub.w	r5, lr, #2
 8006ab0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ab4:	1c44      	adds	r4, r0, #1
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4561      	cmp	r1, ip
 8006aba:	d30a      	bcc.n	8006ad2 <__exponent+0x66>
 8006abc:	f10d 0209 	add.w	r2, sp, #9
 8006ac0:	eba2 020e 	sub.w	r2, r2, lr
 8006ac4:	4565      	cmp	r5, ip
 8006ac6:	bf88      	it	hi
 8006ac8:	2200      	movhi	r2, #0
 8006aca:	4413      	add	r3, r2
 8006acc:	1a18      	subs	r0, r3, r0
 8006ace:	b003      	add	sp, #12
 8006ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ad6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ada:	e7ed      	b.n	8006ab8 <__exponent+0x4c>
 8006adc:	2330      	movs	r3, #48	; 0x30
 8006ade:	3130      	adds	r1, #48	; 0x30
 8006ae0:	7083      	strb	r3, [r0, #2]
 8006ae2:	70c1      	strb	r1, [r0, #3]
 8006ae4:	1d03      	adds	r3, r0, #4
 8006ae6:	e7f1      	b.n	8006acc <__exponent+0x60>

08006ae8 <_printf_float>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	ed2d 8b02 	vpush	{d8}
 8006af0:	b08d      	sub	sp, #52	; 0x34
 8006af2:	460c      	mov	r4, r1
 8006af4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006af8:	4616      	mov	r6, r2
 8006afa:	461f      	mov	r7, r3
 8006afc:	4605      	mov	r5, r0
 8006afe:	f001 fa69 	bl	8007fd4 <_localeconv_r>
 8006b02:	f8d0 a000 	ldr.w	sl, [r0]
 8006b06:	4650      	mov	r0, sl
 8006b08:	f7f9 fb6a 	bl	80001e0 <strlen>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	f8d8 3000 	ldr.w	r3, [r8]
 8006b18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b1c:	3307      	adds	r3, #7
 8006b1e:	f023 0307 	bic.w	r3, r3, #7
 8006b22:	f103 0208 	add.w	r2, r3, #8
 8006b26:	f8c8 2000 	str.w	r2, [r8]
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b3a:	9307      	str	r3, [sp, #28]
 8006b3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b40:	ee08 0a10 	vmov	s16, r0
 8006b44:	4b9f      	ldr	r3, [pc, #636]	; (8006dc4 <_printf_float+0x2dc>)
 8006b46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4e:	f7f9 fff5 	bl	8000b3c <__aeabi_dcmpun>
 8006b52:	bb88      	cbnz	r0, 8006bb8 <_printf_float+0xd0>
 8006b54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b58:	4b9a      	ldr	r3, [pc, #616]	; (8006dc4 <_printf_float+0x2dc>)
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5e:	f7f9 ffcf 	bl	8000b00 <__aeabi_dcmple>
 8006b62:	bb48      	cbnz	r0, 8006bb8 <_printf_float+0xd0>
 8006b64:	2200      	movs	r2, #0
 8006b66:	2300      	movs	r3, #0
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 ffbe 	bl	8000aec <__aeabi_dcmplt>
 8006b70:	b110      	cbz	r0, 8006b78 <_printf_float+0x90>
 8006b72:	232d      	movs	r3, #45	; 0x2d
 8006b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b78:	4b93      	ldr	r3, [pc, #588]	; (8006dc8 <_printf_float+0x2e0>)
 8006b7a:	4894      	ldr	r0, [pc, #592]	; (8006dcc <_printf_float+0x2e4>)
 8006b7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b80:	bf94      	ite	ls
 8006b82:	4698      	movls	r8, r3
 8006b84:	4680      	movhi	r8, r0
 8006b86:	2303      	movs	r3, #3
 8006b88:	6123      	str	r3, [r4, #16]
 8006b8a:	9b05      	ldr	r3, [sp, #20]
 8006b8c:	f023 0204 	bic.w	r2, r3, #4
 8006b90:	6022      	str	r2, [r4, #0]
 8006b92:	f04f 0900 	mov.w	r9, #0
 8006b96:	9700      	str	r7, [sp, #0]
 8006b98:	4633      	mov	r3, r6
 8006b9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 f9d8 	bl	8006f54 <_printf_common>
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	f040 8090 	bne.w	8006cca <_printf_float+0x1e2>
 8006baa:	f04f 30ff 	mov.w	r0, #4294967295
 8006bae:	b00d      	add	sp, #52	; 0x34
 8006bb0:	ecbd 8b02 	vpop	{d8}
 8006bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	f7f9 ffbc 	bl	8000b3c <__aeabi_dcmpun>
 8006bc4:	b140      	cbz	r0, 8006bd8 <_printf_float+0xf0>
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfbc      	itt	lt
 8006bcc:	232d      	movlt	r3, #45	; 0x2d
 8006bce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bd2:	487f      	ldr	r0, [pc, #508]	; (8006dd0 <_printf_float+0x2e8>)
 8006bd4:	4b7f      	ldr	r3, [pc, #508]	; (8006dd4 <_printf_float+0x2ec>)
 8006bd6:	e7d1      	b.n	8006b7c <_printf_float+0x94>
 8006bd8:	6863      	ldr	r3, [r4, #4]
 8006bda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006bde:	9206      	str	r2, [sp, #24]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	d13f      	bne.n	8006c64 <_printf_float+0x17c>
 8006be4:	2306      	movs	r3, #6
 8006be6:	6063      	str	r3, [r4, #4]
 8006be8:	9b05      	ldr	r3, [sp, #20]
 8006bea:	6861      	ldr	r1, [r4, #4]
 8006bec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	9303      	str	r3, [sp, #12]
 8006bf4:	ab0a      	add	r3, sp, #40	; 0x28
 8006bf6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bfa:	ab09      	add	r3, sp, #36	; 0x24
 8006bfc:	ec49 8b10 	vmov	d0, r8, r9
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	6022      	str	r2, [r4, #0]
 8006c04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f7ff fecd 	bl	80069a8 <__cvt>
 8006c0e:	9b06      	ldr	r3, [sp, #24]
 8006c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c12:	2b47      	cmp	r3, #71	; 0x47
 8006c14:	4680      	mov	r8, r0
 8006c16:	d108      	bne.n	8006c2a <_printf_float+0x142>
 8006c18:	1cc8      	adds	r0, r1, #3
 8006c1a:	db02      	blt.n	8006c22 <_printf_float+0x13a>
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	dd41      	ble.n	8006ca6 <_printf_float+0x1be>
 8006c22:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c26:	fa5f fb8b 	uxtb.w	fp, fp
 8006c2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c2e:	d820      	bhi.n	8006c72 <_printf_float+0x18a>
 8006c30:	3901      	subs	r1, #1
 8006c32:	465a      	mov	r2, fp
 8006c34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c38:	9109      	str	r1, [sp, #36]	; 0x24
 8006c3a:	f7ff ff17 	bl	8006a6c <__exponent>
 8006c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c40:	1813      	adds	r3, r2, r0
 8006c42:	2a01      	cmp	r2, #1
 8006c44:	4681      	mov	r9, r0
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	dc02      	bgt.n	8006c50 <_printf_float+0x168>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	07d2      	lsls	r2, r2, #31
 8006c4e:	d501      	bpl.n	8006c54 <_printf_float+0x16c>
 8006c50:	3301      	adds	r3, #1
 8006c52:	6123      	str	r3, [r4, #16]
 8006c54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d09c      	beq.n	8006b96 <_printf_float+0xae>
 8006c5c:	232d      	movs	r3, #45	; 0x2d
 8006c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c62:	e798      	b.n	8006b96 <_printf_float+0xae>
 8006c64:	9a06      	ldr	r2, [sp, #24]
 8006c66:	2a47      	cmp	r2, #71	; 0x47
 8006c68:	d1be      	bne.n	8006be8 <_printf_float+0x100>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1bc      	bne.n	8006be8 <_printf_float+0x100>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e7b9      	b.n	8006be6 <_printf_float+0xfe>
 8006c72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c76:	d118      	bne.n	8006caa <_printf_float+0x1c2>
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	dd0b      	ble.n	8006c96 <_printf_float+0x1ae>
 8006c7e:	6121      	str	r1, [r4, #16]
 8006c80:	b913      	cbnz	r3, 8006c88 <_printf_float+0x1a0>
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	07d0      	lsls	r0, r2, #31
 8006c86:	d502      	bpl.n	8006c8e <_printf_float+0x1a6>
 8006c88:	3301      	adds	r3, #1
 8006c8a:	440b      	add	r3, r1
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c90:	f04f 0900 	mov.w	r9, #0
 8006c94:	e7de      	b.n	8006c54 <_printf_float+0x16c>
 8006c96:	b913      	cbnz	r3, 8006c9e <_printf_float+0x1b6>
 8006c98:	6822      	ldr	r2, [r4, #0]
 8006c9a:	07d2      	lsls	r2, r2, #31
 8006c9c:	d501      	bpl.n	8006ca2 <_printf_float+0x1ba>
 8006c9e:	3302      	adds	r3, #2
 8006ca0:	e7f4      	b.n	8006c8c <_printf_float+0x1a4>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e7f2      	b.n	8006c8c <_printf_float+0x1a4>
 8006ca6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cac:	4299      	cmp	r1, r3
 8006cae:	db05      	blt.n	8006cbc <_printf_float+0x1d4>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	6121      	str	r1, [r4, #16]
 8006cb4:	07d8      	lsls	r0, r3, #31
 8006cb6:	d5ea      	bpl.n	8006c8e <_printf_float+0x1a6>
 8006cb8:	1c4b      	adds	r3, r1, #1
 8006cba:	e7e7      	b.n	8006c8c <_printf_float+0x1a4>
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	bfd4      	ite	le
 8006cc0:	f1c1 0202 	rsble	r2, r1, #2
 8006cc4:	2201      	movgt	r2, #1
 8006cc6:	4413      	add	r3, r2
 8006cc8:	e7e0      	b.n	8006c8c <_printf_float+0x1a4>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	055a      	lsls	r2, r3, #21
 8006cce:	d407      	bmi.n	8006ce0 <_printf_float+0x1f8>
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d12c      	bne.n	8006d38 <_printf_float+0x250>
 8006cde:	e764      	b.n	8006baa <_printf_float+0xc2>
 8006ce0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ce4:	f240 80e0 	bls.w	8006ea8 <_printf_float+0x3c0>
 8006ce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cec:	2200      	movs	r2, #0
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f7f9 fef2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d034      	beq.n	8006d62 <_printf_float+0x27a>
 8006cf8:	4a37      	ldr	r2, [pc, #220]	; (8006dd8 <_printf_float+0x2f0>)
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b8      	blx	r7
 8006d02:	3001      	adds	r0, #1
 8006d04:	f43f af51 	beq.w	8006baa <_printf_float+0xc2>
 8006d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	db02      	blt.n	8006d16 <_printf_float+0x22e>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	07d8      	lsls	r0, r3, #31
 8006d14:	d510      	bpl.n	8006d38 <_printf_float+0x250>
 8006d16:	ee18 3a10 	vmov	r3, s16
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4628      	mov	r0, r5
 8006d20:	47b8      	blx	r7
 8006d22:	3001      	adds	r0, #1
 8006d24:	f43f af41 	beq.w	8006baa <_printf_float+0xc2>
 8006d28:	f04f 0800 	mov.w	r8, #0
 8006d2c:	f104 091a 	add.w	r9, r4, #26
 8006d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d32:	3b01      	subs	r3, #1
 8006d34:	4543      	cmp	r3, r8
 8006d36:	dc09      	bgt.n	8006d4c <_printf_float+0x264>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	079b      	lsls	r3, r3, #30
 8006d3c:	f100 8105 	bmi.w	8006f4a <_printf_float+0x462>
 8006d40:	68e0      	ldr	r0, [r4, #12]
 8006d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d44:	4298      	cmp	r0, r3
 8006d46:	bfb8      	it	lt
 8006d48:	4618      	movlt	r0, r3
 8006d4a:	e730      	b.n	8006bae <_printf_float+0xc6>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	464a      	mov	r2, r9
 8006d50:	4631      	mov	r1, r6
 8006d52:	4628      	mov	r0, r5
 8006d54:	47b8      	blx	r7
 8006d56:	3001      	adds	r0, #1
 8006d58:	f43f af27 	beq.w	8006baa <_printf_float+0xc2>
 8006d5c:	f108 0801 	add.w	r8, r8, #1
 8006d60:	e7e6      	b.n	8006d30 <_printf_float+0x248>
 8006d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dc39      	bgt.n	8006ddc <_printf_float+0x2f4>
 8006d68:	4a1b      	ldr	r2, [pc, #108]	; (8006dd8 <_printf_float+0x2f0>)
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4631      	mov	r1, r6
 8006d6e:	4628      	mov	r0, r5
 8006d70:	47b8      	blx	r7
 8006d72:	3001      	adds	r0, #1
 8006d74:	f43f af19 	beq.w	8006baa <_printf_float+0xc2>
 8006d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	d102      	bne.n	8006d86 <_printf_float+0x29e>
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	07d9      	lsls	r1, r3, #31
 8006d84:	d5d8      	bpl.n	8006d38 <_printf_float+0x250>
 8006d86:	ee18 3a10 	vmov	r3, s16
 8006d8a:	4652      	mov	r2, sl
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	f43f af09 	beq.w	8006baa <_printf_float+0xc2>
 8006d98:	f04f 0900 	mov.w	r9, #0
 8006d9c:	f104 0a1a 	add.w	sl, r4, #26
 8006da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da2:	425b      	negs	r3, r3
 8006da4:	454b      	cmp	r3, r9
 8006da6:	dc01      	bgt.n	8006dac <_printf_float+0x2c4>
 8006da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006daa:	e792      	b.n	8006cd2 <_printf_float+0x1ea>
 8006dac:	2301      	movs	r3, #1
 8006dae:	4652      	mov	r2, sl
 8006db0:	4631      	mov	r1, r6
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b8      	blx	r7
 8006db6:	3001      	adds	r0, #1
 8006db8:	f43f aef7 	beq.w	8006baa <_printf_float+0xc2>
 8006dbc:	f109 0901 	add.w	r9, r9, #1
 8006dc0:	e7ee      	b.n	8006da0 <_printf_float+0x2b8>
 8006dc2:	bf00      	nop
 8006dc4:	7fefffff 	.word	0x7fefffff
 8006dc8:	0800beb4 	.word	0x0800beb4
 8006dcc:	0800beb8 	.word	0x0800beb8
 8006dd0:	0800bec0 	.word	0x0800bec0
 8006dd4:	0800bebc 	.word	0x0800bebc
 8006dd8:	0800bec4 	.word	0x0800bec4
 8006ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006de0:	429a      	cmp	r2, r3
 8006de2:	bfa8      	it	ge
 8006de4:	461a      	movge	r2, r3
 8006de6:	2a00      	cmp	r2, #0
 8006de8:	4691      	mov	r9, r2
 8006dea:	dc37      	bgt.n	8006e5c <_printf_float+0x374>
 8006dec:	f04f 0b00 	mov.w	fp, #0
 8006df0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df4:	f104 021a 	add.w	r2, r4, #26
 8006df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dfa:	9305      	str	r3, [sp, #20]
 8006dfc:	eba3 0309 	sub.w	r3, r3, r9
 8006e00:	455b      	cmp	r3, fp
 8006e02:	dc33      	bgt.n	8006e6c <_printf_float+0x384>
 8006e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	db3b      	blt.n	8006e84 <_printf_float+0x39c>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07da      	lsls	r2, r3, #31
 8006e10:	d438      	bmi.n	8006e84 <_printf_float+0x39c>
 8006e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e14:	9a05      	ldr	r2, [sp, #20]
 8006e16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e18:	1a9a      	subs	r2, r3, r2
 8006e1a:	eba3 0901 	sub.w	r9, r3, r1
 8006e1e:	4591      	cmp	r9, r2
 8006e20:	bfa8      	it	ge
 8006e22:	4691      	movge	r9, r2
 8006e24:	f1b9 0f00 	cmp.w	r9, #0
 8006e28:	dc35      	bgt.n	8006e96 <_printf_float+0x3ae>
 8006e2a:	f04f 0800 	mov.w	r8, #0
 8006e2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e32:	f104 0a1a 	add.w	sl, r4, #26
 8006e36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e3a:	1a9b      	subs	r3, r3, r2
 8006e3c:	eba3 0309 	sub.w	r3, r3, r9
 8006e40:	4543      	cmp	r3, r8
 8006e42:	f77f af79 	ble.w	8006d38 <_printf_float+0x250>
 8006e46:	2301      	movs	r3, #1
 8006e48:	4652      	mov	r2, sl
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	47b8      	blx	r7
 8006e50:	3001      	adds	r0, #1
 8006e52:	f43f aeaa 	beq.w	8006baa <_printf_float+0xc2>
 8006e56:	f108 0801 	add.w	r8, r8, #1
 8006e5a:	e7ec      	b.n	8006e36 <_printf_float+0x34e>
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4642      	mov	r2, r8
 8006e62:	4628      	mov	r0, r5
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	d1c0      	bne.n	8006dec <_printf_float+0x304>
 8006e6a:	e69e      	b.n	8006baa <_printf_float+0xc2>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	9205      	str	r2, [sp, #20]
 8006e74:	47b8      	blx	r7
 8006e76:	3001      	adds	r0, #1
 8006e78:	f43f ae97 	beq.w	8006baa <_printf_float+0xc2>
 8006e7c:	9a05      	ldr	r2, [sp, #20]
 8006e7e:	f10b 0b01 	add.w	fp, fp, #1
 8006e82:	e7b9      	b.n	8006df8 <_printf_float+0x310>
 8006e84:	ee18 3a10 	vmov	r3, s16
 8006e88:	4652      	mov	r2, sl
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b8      	blx	r7
 8006e90:	3001      	adds	r0, #1
 8006e92:	d1be      	bne.n	8006e12 <_printf_float+0x32a>
 8006e94:	e689      	b.n	8006baa <_printf_float+0xc2>
 8006e96:	9a05      	ldr	r2, [sp, #20]
 8006e98:	464b      	mov	r3, r9
 8006e9a:	4442      	add	r2, r8
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d1c1      	bne.n	8006e2a <_printf_float+0x342>
 8006ea6:	e680      	b.n	8006baa <_printf_float+0xc2>
 8006ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eaa:	2a01      	cmp	r2, #1
 8006eac:	dc01      	bgt.n	8006eb2 <_printf_float+0x3ca>
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d538      	bpl.n	8006f24 <_printf_float+0x43c>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b8      	blx	r7
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f43f ae74 	beq.w	8006baa <_printf_float+0xc2>
 8006ec2:	ee18 3a10 	vmov	r3, s16
 8006ec6:	4652      	mov	r2, sl
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	f43f ae6b 	beq.w	8006baa <_printf_float+0xc2>
 8006ed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2300      	movs	r3, #0
 8006edc:	f7f9 fdfc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ee0:	b9d8      	cbnz	r0, 8006f1a <_printf_float+0x432>
 8006ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee4:	f108 0201 	add.w	r2, r8, #1
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d10e      	bne.n	8006f12 <_printf_float+0x42a>
 8006ef4:	e659      	b.n	8006baa <_printf_float+0xc2>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4652      	mov	r2, sl
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	f43f ae52 	beq.w	8006baa <_printf_float+0xc2>
 8006f06:	f108 0801 	add.w	r8, r8, #1
 8006f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	4543      	cmp	r3, r8
 8006f10:	dcf1      	bgt.n	8006ef6 <_printf_float+0x40e>
 8006f12:	464b      	mov	r3, r9
 8006f14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f18:	e6dc      	b.n	8006cd4 <_printf_float+0x1ec>
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	f104 0a1a 	add.w	sl, r4, #26
 8006f22:	e7f2      	b.n	8006f0a <_printf_float+0x422>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4642      	mov	r2, r8
 8006f28:	e7df      	b.n	8006eea <_printf_float+0x402>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	464a      	mov	r2, r9
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	f43f ae38 	beq.w	8006baa <_printf_float+0xc2>
 8006f3a:	f108 0801 	add.w	r8, r8, #1
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f42:	1a5b      	subs	r3, r3, r1
 8006f44:	4543      	cmp	r3, r8
 8006f46:	dcf0      	bgt.n	8006f2a <_printf_float+0x442>
 8006f48:	e6fa      	b.n	8006d40 <_printf_float+0x258>
 8006f4a:	f04f 0800 	mov.w	r8, #0
 8006f4e:	f104 0919 	add.w	r9, r4, #25
 8006f52:	e7f4      	b.n	8006f3e <_printf_float+0x456>

08006f54 <_printf_common>:
 8006f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	4616      	mov	r6, r2
 8006f5a:	4699      	mov	r9, r3
 8006f5c:	688a      	ldr	r2, [r1, #8]
 8006f5e:	690b      	ldr	r3, [r1, #16]
 8006f60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	bfb8      	it	lt
 8006f68:	4613      	movlt	r3, r2
 8006f6a:	6033      	str	r3, [r6, #0]
 8006f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f70:	4607      	mov	r7, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b10a      	cbz	r2, 8006f7a <_printf_common+0x26>
 8006f76:	3301      	adds	r3, #1
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	0699      	lsls	r1, r3, #26
 8006f7e:	bf42      	ittt	mi
 8006f80:	6833      	ldrmi	r3, [r6, #0]
 8006f82:	3302      	addmi	r3, #2
 8006f84:	6033      	strmi	r3, [r6, #0]
 8006f86:	6825      	ldr	r5, [r4, #0]
 8006f88:	f015 0506 	ands.w	r5, r5, #6
 8006f8c:	d106      	bne.n	8006f9c <_printf_common+0x48>
 8006f8e:	f104 0a19 	add.w	sl, r4, #25
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	6832      	ldr	r2, [r6, #0]
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dc26      	bgt.n	8006fea <_printf_common+0x96>
 8006f9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fa0:	1e13      	subs	r3, r2, #0
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	bf18      	it	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	0692      	lsls	r2, r2, #26
 8006faa:	d42b      	bmi.n	8007004 <_printf_common+0xb0>
 8006fac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	47c0      	blx	r8
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d01e      	beq.n	8006ff8 <_printf_common+0xa4>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	68e5      	ldr	r5, [r4, #12]
 8006fbe:	6832      	ldr	r2, [r6, #0]
 8006fc0:	f003 0306 	and.w	r3, r3, #6
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	bf08      	it	eq
 8006fc8:	1aad      	subeq	r5, r5, r2
 8006fca:	68a3      	ldr	r3, [r4, #8]
 8006fcc:	6922      	ldr	r2, [r4, #16]
 8006fce:	bf0c      	ite	eq
 8006fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd4:	2500      	movne	r5, #0
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	bfc4      	itt	gt
 8006fda:	1a9b      	subgt	r3, r3, r2
 8006fdc:	18ed      	addgt	r5, r5, r3
 8006fde:	2600      	movs	r6, #0
 8006fe0:	341a      	adds	r4, #26
 8006fe2:	42b5      	cmp	r5, r6
 8006fe4:	d11a      	bne.n	800701c <_printf_common+0xc8>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e008      	b.n	8006ffc <_printf_common+0xa8>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4652      	mov	r2, sl
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	47c0      	blx	r8
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d103      	bne.n	8007000 <_printf_common+0xac>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	3501      	adds	r5, #1
 8007002:	e7c6      	b.n	8006f92 <_printf_common+0x3e>
 8007004:	18e1      	adds	r1, r4, r3
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	2030      	movs	r0, #48	; 0x30
 800700a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800700e:	4422      	add	r2, r4
 8007010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007014:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007018:	3302      	adds	r3, #2
 800701a:	e7c7      	b.n	8006fac <_printf_common+0x58>
 800701c:	2301      	movs	r3, #1
 800701e:	4622      	mov	r2, r4
 8007020:	4649      	mov	r1, r9
 8007022:	4638      	mov	r0, r7
 8007024:	47c0      	blx	r8
 8007026:	3001      	adds	r0, #1
 8007028:	d0e6      	beq.n	8006ff8 <_printf_common+0xa4>
 800702a:	3601      	adds	r6, #1
 800702c:	e7d9      	b.n	8006fe2 <_printf_common+0x8e>
	...

08007030 <_printf_i>:
 8007030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	7e0f      	ldrb	r7, [r1, #24]
 8007036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007038:	2f78      	cmp	r7, #120	; 0x78
 800703a:	4691      	mov	r9, r2
 800703c:	4680      	mov	r8, r0
 800703e:	460c      	mov	r4, r1
 8007040:	469a      	mov	sl, r3
 8007042:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007046:	d807      	bhi.n	8007058 <_printf_i+0x28>
 8007048:	2f62      	cmp	r7, #98	; 0x62
 800704a:	d80a      	bhi.n	8007062 <_printf_i+0x32>
 800704c:	2f00      	cmp	r7, #0
 800704e:	f000 80d8 	beq.w	8007202 <_printf_i+0x1d2>
 8007052:	2f58      	cmp	r7, #88	; 0x58
 8007054:	f000 80a3 	beq.w	800719e <_printf_i+0x16e>
 8007058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800705c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007060:	e03a      	b.n	80070d8 <_printf_i+0xa8>
 8007062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007066:	2b15      	cmp	r3, #21
 8007068:	d8f6      	bhi.n	8007058 <_printf_i+0x28>
 800706a:	a101      	add	r1, pc, #4	; (adr r1, 8007070 <_printf_i+0x40>)
 800706c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007070:	080070c9 	.word	0x080070c9
 8007074:	080070dd 	.word	0x080070dd
 8007078:	08007059 	.word	0x08007059
 800707c:	08007059 	.word	0x08007059
 8007080:	08007059 	.word	0x08007059
 8007084:	08007059 	.word	0x08007059
 8007088:	080070dd 	.word	0x080070dd
 800708c:	08007059 	.word	0x08007059
 8007090:	08007059 	.word	0x08007059
 8007094:	08007059 	.word	0x08007059
 8007098:	08007059 	.word	0x08007059
 800709c:	080071e9 	.word	0x080071e9
 80070a0:	0800710d 	.word	0x0800710d
 80070a4:	080071cb 	.word	0x080071cb
 80070a8:	08007059 	.word	0x08007059
 80070ac:	08007059 	.word	0x08007059
 80070b0:	0800720b 	.word	0x0800720b
 80070b4:	08007059 	.word	0x08007059
 80070b8:	0800710d 	.word	0x0800710d
 80070bc:	08007059 	.word	0x08007059
 80070c0:	08007059 	.word	0x08007059
 80070c4:	080071d3 	.word	0x080071d3
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	1d1a      	adds	r2, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	602a      	str	r2, [r5, #0]
 80070d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d8:	2301      	movs	r3, #1
 80070da:	e0a3      	b.n	8007224 <_printf_i+0x1f4>
 80070dc:	6820      	ldr	r0, [r4, #0]
 80070de:	6829      	ldr	r1, [r5, #0]
 80070e0:	0606      	lsls	r6, r0, #24
 80070e2:	f101 0304 	add.w	r3, r1, #4
 80070e6:	d50a      	bpl.n	80070fe <_printf_i+0xce>
 80070e8:	680e      	ldr	r6, [r1, #0]
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	2e00      	cmp	r6, #0
 80070ee:	da03      	bge.n	80070f8 <_printf_i+0xc8>
 80070f0:	232d      	movs	r3, #45	; 0x2d
 80070f2:	4276      	negs	r6, r6
 80070f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f8:	485e      	ldr	r0, [pc, #376]	; (8007274 <_printf_i+0x244>)
 80070fa:	230a      	movs	r3, #10
 80070fc:	e019      	b.n	8007132 <_printf_i+0x102>
 80070fe:	680e      	ldr	r6, [r1, #0]
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007106:	bf18      	it	ne
 8007108:	b236      	sxthne	r6, r6
 800710a:	e7ef      	b.n	80070ec <_printf_i+0xbc>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	6820      	ldr	r0, [r4, #0]
 8007110:	1d19      	adds	r1, r3, #4
 8007112:	6029      	str	r1, [r5, #0]
 8007114:	0601      	lsls	r1, r0, #24
 8007116:	d501      	bpl.n	800711c <_printf_i+0xec>
 8007118:	681e      	ldr	r6, [r3, #0]
 800711a:	e002      	b.n	8007122 <_printf_i+0xf2>
 800711c:	0646      	lsls	r6, r0, #25
 800711e:	d5fb      	bpl.n	8007118 <_printf_i+0xe8>
 8007120:	881e      	ldrh	r6, [r3, #0]
 8007122:	4854      	ldr	r0, [pc, #336]	; (8007274 <_printf_i+0x244>)
 8007124:	2f6f      	cmp	r7, #111	; 0x6f
 8007126:	bf0c      	ite	eq
 8007128:	2308      	moveq	r3, #8
 800712a:	230a      	movne	r3, #10
 800712c:	2100      	movs	r1, #0
 800712e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007132:	6865      	ldr	r5, [r4, #4]
 8007134:	60a5      	str	r5, [r4, #8]
 8007136:	2d00      	cmp	r5, #0
 8007138:	bfa2      	ittt	ge
 800713a:	6821      	ldrge	r1, [r4, #0]
 800713c:	f021 0104 	bicge.w	r1, r1, #4
 8007140:	6021      	strge	r1, [r4, #0]
 8007142:	b90e      	cbnz	r6, 8007148 <_printf_i+0x118>
 8007144:	2d00      	cmp	r5, #0
 8007146:	d04d      	beq.n	80071e4 <_printf_i+0x1b4>
 8007148:	4615      	mov	r5, r2
 800714a:	fbb6 f1f3 	udiv	r1, r6, r3
 800714e:	fb03 6711 	mls	r7, r3, r1, r6
 8007152:	5dc7      	ldrb	r7, [r0, r7]
 8007154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007158:	4637      	mov	r7, r6
 800715a:	42bb      	cmp	r3, r7
 800715c:	460e      	mov	r6, r1
 800715e:	d9f4      	bls.n	800714a <_printf_i+0x11a>
 8007160:	2b08      	cmp	r3, #8
 8007162:	d10b      	bne.n	800717c <_printf_i+0x14c>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	07de      	lsls	r6, r3, #31
 8007168:	d508      	bpl.n	800717c <_printf_i+0x14c>
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	6861      	ldr	r1, [r4, #4]
 800716e:	4299      	cmp	r1, r3
 8007170:	bfde      	ittt	le
 8007172:	2330      	movle	r3, #48	; 0x30
 8007174:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007178:	f105 35ff 	addle.w	r5, r5, #4294967295
 800717c:	1b52      	subs	r2, r2, r5
 800717e:	6122      	str	r2, [r4, #16]
 8007180:	f8cd a000 	str.w	sl, [sp]
 8007184:	464b      	mov	r3, r9
 8007186:	aa03      	add	r2, sp, #12
 8007188:	4621      	mov	r1, r4
 800718a:	4640      	mov	r0, r8
 800718c:	f7ff fee2 	bl	8006f54 <_printf_common>
 8007190:	3001      	adds	r0, #1
 8007192:	d14c      	bne.n	800722e <_printf_i+0x1fe>
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	b004      	add	sp, #16
 800719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719e:	4835      	ldr	r0, [pc, #212]	; (8007274 <_printf_i+0x244>)
 80071a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071a4:	6829      	ldr	r1, [r5, #0]
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ac:	6029      	str	r1, [r5, #0]
 80071ae:	061d      	lsls	r5, r3, #24
 80071b0:	d514      	bpl.n	80071dc <_printf_i+0x1ac>
 80071b2:	07df      	lsls	r7, r3, #31
 80071b4:	bf44      	itt	mi
 80071b6:	f043 0320 	orrmi.w	r3, r3, #32
 80071ba:	6023      	strmi	r3, [r4, #0]
 80071bc:	b91e      	cbnz	r6, 80071c6 <_printf_i+0x196>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	f023 0320 	bic.w	r3, r3, #32
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	2310      	movs	r3, #16
 80071c8:	e7b0      	b.n	800712c <_printf_i+0xfc>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	f043 0320 	orr.w	r3, r3, #32
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	2378      	movs	r3, #120	; 0x78
 80071d4:	4828      	ldr	r0, [pc, #160]	; (8007278 <_printf_i+0x248>)
 80071d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071da:	e7e3      	b.n	80071a4 <_printf_i+0x174>
 80071dc:	0659      	lsls	r1, r3, #25
 80071de:	bf48      	it	mi
 80071e0:	b2b6      	uxthmi	r6, r6
 80071e2:	e7e6      	b.n	80071b2 <_printf_i+0x182>
 80071e4:	4615      	mov	r5, r2
 80071e6:	e7bb      	b.n	8007160 <_printf_i+0x130>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	6826      	ldr	r6, [r4, #0]
 80071ec:	6961      	ldr	r1, [r4, #20]
 80071ee:	1d18      	adds	r0, r3, #4
 80071f0:	6028      	str	r0, [r5, #0]
 80071f2:	0635      	lsls	r5, r6, #24
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	d501      	bpl.n	80071fc <_printf_i+0x1cc>
 80071f8:	6019      	str	r1, [r3, #0]
 80071fa:	e002      	b.n	8007202 <_printf_i+0x1d2>
 80071fc:	0670      	lsls	r0, r6, #25
 80071fe:	d5fb      	bpl.n	80071f8 <_printf_i+0x1c8>
 8007200:	8019      	strh	r1, [r3, #0]
 8007202:	2300      	movs	r3, #0
 8007204:	6123      	str	r3, [r4, #16]
 8007206:	4615      	mov	r5, r2
 8007208:	e7ba      	b.n	8007180 <_printf_i+0x150>
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	1d1a      	adds	r2, r3, #4
 800720e:	602a      	str	r2, [r5, #0]
 8007210:	681d      	ldr	r5, [r3, #0]
 8007212:	6862      	ldr	r2, [r4, #4]
 8007214:	2100      	movs	r1, #0
 8007216:	4628      	mov	r0, r5
 8007218:	f7f8 ffea 	bl	80001f0 <memchr>
 800721c:	b108      	cbz	r0, 8007222 <_printf_i+0x1f2>
 800721e:	1b40      	subs	r0, r0, r5
 8007220:	6060      	str	r0, [r4, #4]
 8007222:	6863      	ldr	r3, [r4, #4]
 8007224:	6123      	str	r3, [r4, #16]
 8007226:	2300      	movs	r3, #0
 8007228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800722c:	e7a8      	b.n	8007180 <_printf_i+0x150>
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	462a      	mov	r2, r5
 8007232:	4649      	mov	r1, r9
 8007234:	4640      	mov	r0, r8
 8007236:	47d0      	blx	sl
 8007238:	3001      	adds	r0, #1
 800723a:	d0ab      	beq.n	8007194 <_printf_i+0x164>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	079b      	lsls	r3, r3, #30
 8007240:	d413      	bmi.n	800726a <_printf_i+0x23a>
 8007242:	68e0      	ldr	r0, [r4, #12]
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	4298      	cmp	r0, r3
 8007248:	bfb8      	it	lt
 800724a:	4618      	movlt	r0, r3
 800724c:	e7a4      	b.n	8007198 <_printf_i+0x168>
 800724e:	2301      	movs	r3, #1
 8007250:	4632      	mov	r2, r6
 8007252:	4649      	mov	r1, r9
 8007254:	4640      	mov	r0, r8
 8007256:	47d0      	blx	sl
 8007258:	3001      	adds	r0, #1
 800725a:	d09b      	beq.n	8007194 <_printf_i+0x164>
 800725c:	3501      	adds	r5, #1
 800725e:	68e3      	ldr	r3, [r4, #12]
 8007260:	9903      	ldr	r1, [sp, #12]
 8007262:	1a5b      	subs	r3, r3, r1
 8007264:	42ab      	cmp	r3, r5
 8007266:	dcf2      	bgt.n	800724e <_printf_i+0x21e>
 8007268:	e7eb      	b.n	8007242 <_printf_i+0x212>
 800726a:	2500      	movs	r5, #0
 800726c:	f104 0619 	add.w	r6, r4, #25
 8007270:	e7f5      	b.n	800725e <_printf_i+0x22e>
 8007272:	bf00      	nop
 8007274:	0800bec6 	.word	0x0800bec6
 8007278:	0800bed7 	.word	0x0800bed7

0800727c <_sbrk_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	4d06      	ldr	r5, [pc, #24]	; (8007298 <_sbrk_r+0x1c>)
 8007280:	2300      	movs	r3, #0
 8007282:	4604      	mov	r4, r0
 8007284:	4608      	mov	r0, r1
 8007286:	602b      	str	r3, [r5, #0]
 8007288:	f7fc fb34 	bl	80038f4 <_sbrk>
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	d102      	bne.n	8007296 <_sbrk_r+0x1a>
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	b103      	cbz	r3, 8007296 <_sbrk_r+0x1a>
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	bd38      	pop	{r3, r4, r5, pc}
 8007298:	200003ec 	.word	0x200003ec

0800729c <siprintf>:
 800729c:	b40e      	push	{r1, r2, r3}
 800729e:	b500      	push	{lr}
 80072a0:	b09c      	sub	sp, #112	; 0x70
 80072a2:	ab1d      	add	r3, sp, #116	; 0x74
 80072a4:	9002      	str	r0, [sp, #8]
 80072a6:	9006      	str	r0, [sp, #24]
 80072a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072ac:	4809      	ldr	r0, [pc, #36]	; (80072d4 <siprintf+0x38>)
 80072ae:	9107      	str	r1, [sp, #28]
 80072b0:	9104      	str	r1, [sp, #16]
 80072b2:	4909      	ldr	r1, [pc, #36]	; (80072d8 <siprintf+0x3c>)
 80072b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b8:	9105      	str	r1, [sp, #20]
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	a902      	add	r1, sp, #8
 80072c0:	f001 fa9c 	bl	80087fc <_svfiprintf_r>
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	b01c      	add	sp, #112	; 0x70
 80072cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072d0:	b003      	add	sp, #12
 80072d2:	4770      	bx	lr
 80072d4:	20000024 	.word	0x20000024
 80072d8:	ffff0208 	.word	0xffff0208

080072dc <quorem>:
 80072dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	6903      	ldr	r3, [r0, #16]
 80072e2:	690c      	ldr	r4, [r1, #16]
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	4607      	mov	r7, r0
 80072e8:	f2c0 8081 	blt.w	80073ee <quorem+0x112>
 80072ec:	3c01      	subs	r4, #1
 80072ee:	f101 0814 	add.w	r8, r1, #20
 80072f2:	f100 0514 	add.w	r5, r0, #20
 80072f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007304:	3301      	adds	r3, #1
 8007306:	429a      	cmp	r2, r3
 8007308:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800730c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007310:	fbb2 f6f3 	udiv	r6, r2, r3
 8007314:	d331      	bcc.n	800737a <quorem+0x9e>
 8007316:	f04f 0e00 	mov.w	lr, #0
 800731a:	4640      	mov	r0, r8
 800731c:	46ac      	mov	ip, r5
 800731e:	46f2      	mov	sl, lr
 8007320:	f850 2b04 	ldr.w	r2, [r0], #4
 8007324:	b293      	uxth	r3, r2
 8007326:	fb06 e303 	mla	r3, r6, r3, lr
 800732a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800732e:	b29b      	uxth	r3, r3
 8007330:	ebaa 0303 	sub.w	r3, sl, r3
 8007334:	f8dc a000 	ldr.w	sl, [ip]
 8007338:	0c12      	lsrs	r2, r2, #16
 800733a:	fa13 f38a 	uxtah	r3, r3, sl
 800733e:	fb06 e202 	mla	r2, r6, r2, lr
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	9b00      	ldr	r3, [sp, #0]
 8007346:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800734a:	b292      	uxth	r2, r2
 800734c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007350:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007354:	f8bd 3000 	ldrh.w	r3, [sp]
 8007358:	4581      	cmp	r9, r0
 800735a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800735e:	f84c 3b04 	str.w	r3, [ip], #4
 8007362:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007366:	d2db      	bcs.n	8007320 <quorem+0x44>
 8007368:	f855 300b 	ldr.w	r3, [r5, fp]
 800736c:	b92b      	cbnz	r3, 800737a <quorem+0x9e>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	3b04      	subs	r3, #4
 8007372:	429d      	cmp	r5, r3
 8007374:	461a      	mov	r2, r3
 8007376:	d32e      	bcc.n	80073d6 <quorem+0xfa>
 8007378:	613c      	str	r4, [r7, #16]
 800737a:	4638      	mov	r0, r7
 800737c:	f001 f8ca 	bl	8008514 <__mcmp>
 8007380:	2800      	cmp	r0, #0
 8007382:	db24      	blt.n	80073ce <quorem+0xf2>
 8007384:	3601      	adds	r6, #1
 8007386:	4628      	mov	r0, r5
 8007388:	f04f 0c00 	mov.w	ip, #0
 800738c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007390:	f8d0 e000 	ldr.w	lr, [r0]
 8007394:	b293      	uxth	r3, r2
 8007396:	ebac 0303 	sub.w	r3, ip, r3
 800739a:	0c12      	lsrs	r2, r2, #16
 800739c:	fa13 f38e 	uxtah	r3, r3, lr
 80073a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ae:	45c1      	cmp	r9, r8
 80073b0:	f840 3b04 	str.w	r3, [r0], #4
 80073b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073b8:	d2e8      	bcs.n	800738c <quorem+0xb0>
 80073ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073c2:	b922      	cbnz	r2, 80073ce <quorem+0xf2>
 80073c4:	3b04      	subs	r3, #4
 80073c6:	429d      	cmp	r5, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	d30a      	bcc.n	80073e2 <quorem+0x106>
 80073cc:	613c      	str	r4, [r7, #16]
 80073ce:	4630      	mov	r0, r6
 80073d0:	b003      	add	sp, #12
 80073d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	3b04      	subs	r3, #4
 80073da:	2a00      	cmp	r2, #0
 80073dc:	d1cc      	bne.n	8007378 <quorem+0x9c>
 80073de:	3c01      	subs	r4, #1
 80073e0:	e7c7      	b.n	8007372 <quorem+0x96>
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	3b04      	subs	r3, #4
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	d1f0      	bne.n	80073cc <quorem+0xf0>
 80073ea:	3c01      	subs	r4, #1
 80073ec:	e7eb      	b.n	80073c6 <quorem+0xea>
 80073ee:	2000      	movs	r0, #0
 80073f0:	e7ee      	b.n	80073d0 <quorem+0xf4>
 80073f2:	0000      	movs	r0, r0
 80073f4:	0000      	movs	r0, r0
	...

080073f8 <_dtoa_r>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	ed2d 8b04 	vpush	{d8-d9}
 8007400:	ec57 6b10 	vmov	r6, r7, d0
 8007404:	b093      	sub	sp, #76	; 0x4c
 8007406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007408:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800740c:	9106      	str	r1, [sp, #24]
 800740e:	ee10 aa10 	vmov	sl, s0
 8007412:	4604      	mov	r4, r0
 8007414:	9209      	str	r2, [sp, #36]	; 0x24
 8007416:	930c      	str	r3, [sp, #48]	; 0x30
 8007418:	46bb      	mov	fp, r7
 800741a:	b975      	cbnz	r5, 800743a <_dtoa_r+0x42>
 800741c:	2010      	movs	r0, #16
 800741e:	f7ff f9cb 	bl	80067b8 <malloc>
 8007422:	4602      	mov	r2, r0
 8007424:	6260      	str	r0, [r4, #36]	; 0x24
 8007426:	b920      	cbnz	r0, 8007432 <_dtoa_r+0x3a>
 8007428:	4ba7      	ldr	r3, [pc, #668]	; (80076c8 <_dtoa_r+0x2d0>)
 800742a:	21ea      	movs	r1, #234	; 0xea
 800742c:	48a7      	ldr	r0, [pc, #668]	; (80076cc <_dtoa_r+0x2d4>)
 800742e:	f001 fae5 	bl	80089fc <__assert_func>
 8007432:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007436:	6005      	str	r5, [r0, #0]
 8007438:	60c5      	str	r5, [r0, #12]
 800743a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800743c:	6819      	ldr	r1, [r3, #0]
 800743e:	b151      	cbz	r1, 8007456 <_dtoa_r+0x5e>
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	604a      	str	r2, [r1, #4]
 8007444:	2301      	movs	r3, #1
 8007446:	4093      	lsls	r3, r2
 8007448:	608b      	str	r3, [r1, #8]
 800744a:	4620      	mov	r0, r4
 800744c:	f000 fe20 	bl	8008090 <_Bfree>
 8007450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	1e3b      	subs	r3, r7, #0
 8007458:	bfaa      	itet	ge
 800745a:	2300      	movge	r3, #0
 800745c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007460:	f8c8 3000 	strge.w	r3, [r8]
 8007464:	4b9a      	ldr	r3, [pc, #616]	; (80076d0 <_dtoa_r+0x2d8>)
 8007466:	bfbc      	itt	lt
 8007468:	2201      	movlt	r2, #1
 800746a:	f8c8 2000 	strlt.w	r2, [r8]
 800746e:	ea33 030b 	bics.w	r3, r3, fp
 8007472:	d11b      	bne.n	80074ac <_dtoa_r+0xb4>
 8007474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007476:	f242 730f 	movw	r3, #9999	; 0x270f
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007480:	4333      	orrs	r3, r6
 8007482:	f000 8592 	beq.w	8007faa <_dtoa_r+0xbb2>
 8007486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007488:	b963      	cbnz	r3, 80074a4 <_dtoa_r+0xac>
 800748a:	4b92      	ldr	r3, [pc, #584]	; (80076d4 <_dtoa_r+0x2dc>)
 800748c:	e022      	b.n	80074d4 <_dtoa_r+0xdc>
 800748e:	4b92      	ldr	r3, [pc, #584]	; (80076d8 <_dtoa_r+0x2e0>)
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	3308      	adds	r3, #8
 8007494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	9801      	ldr	r0, [sp, #4]
 800749a:	b013      	add	sp, #76	; 0x4c
 800749c:	ecbd 8b04 	vpop	{d8-d9}
 80074a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a4:	4b8b      	ldr	r3, [pc, #556]	; (80076d4 <_dtoa_r+0x2dc>)
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	3303      	adds	r3, #3
 80074aa:	e7f3      	b.n	8007494 <_dtoa_r+0x9c>
 80074ac:	2200      	movs	r2, #0
 80074ae:	2300      	movs	r3, #0
 80074b0:	4650      	mov	r0, sl
 80074b2:	4659      	mov	r1, fp
 80074b4:	f7f9 fb10 	bl	8000ad8 <__aeabi_dcmpeq>
 80074b8:	ec4b ab19 	vmov	d9, sl, fp
 80074bc:	4680      	mov	r8, r0
 80074be:	b158      	cbz	r0, 80074d8 <_dtoa_r+0xe0>
 80074c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074c2:	2301      	movs	r3, #1
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 856b 	beq.w	8007fa4 <_dtoa_r+0xbac>
 80074ce:	4883      	ldr	r0, [pc, #524]	; (80076dc <_dtoa_r+0x2e4>)
 80074d0:	6018      	str	r0, [r3, #0]
 80074d2:	1e43      	subs	r3, r0, #1
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	e7df      	b.n	8007498 <_dtoa_r+0xa0>
 80074d8:	ec4b ab10 	vmov	d0, sl, fp
 80074dc:	aa10      	add	r2, sp, #64	; 0x40
 80074de:	a911      	add	r1, sp, #68	; 0x44
 80074e0:	4620      	mov	r0, r4
 80074e2:	f001 f8bd 	bl	8008660 <__d2b>
 80074e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80074ea:	ee08 0a10 	vmov	s16, r0
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	f000 8084 	beq.w	80075fc <_dtoa_r+0x204>
 80074f4:	ee19 3a90 	vmov	r3, s19
 80074f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007500:	4656      	mov	r6, sl
 8007502:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800750a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800750e:	4b74      	ldr	r3, [pc, #464]	; (80076e0 <_dtoa_r+0x2e8>)
 8007510:	2200      	movs	r2, #0
 8007512:	4630      	mov	r0, r6
 8007514:	4639      	mov	r1, r7
 8007516:	f7f8 febf 	bl	8000298 <__aeabi_dsub>
 800751a:	a365      	add	r3, pc, #404	; (adr r3, 80076b0 <_dtoa_r+0x2b8>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f9 f872 	bl	8000608 <__aeabi_dmul>
 8007524:	a364      	add	r3, pc, #400	; (adr r3, 80076b8 <_dtoa_r+0x2c0>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f7f8 feb7 	bl	800029c <__adddf3>
 800752e:	4606      	mov	r6, r0
 8007530:	4628      	mov	r0, r5
 8007532:	460f      	mov	r7, r1
 8007534:	f7f8 fffe 	bl	8000534 <__aeabi_i2d>
 8007538:	a361      	add	r3, pc, #388	; (adr r3, 80076c0 <_dtoa_r+0x2c8>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 f863 	bl	8000608 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	f7f8 fea7 	bl	800029c <__adddf3>
 800754e:	4606      	mov	r6, r0
 8007550:	460f      	mov	r7, r1
 8007552:	f7f9 fb09 	bl	8000b68 <__aeabi_d2iz>
 8007556:	2200      	movs	r2, #0
 8007558:	9000      	str	r0, [sp, #0]
 800755a:	2300      	movs	r3, #0
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7f9 fac4 	bl	8000aec <__aeabi_dcmplt>
 8007564:	b150      	cbz	r0, 800757c <_dtoa_r+0x184>
 8007566:	9800      	ldr	r0, [sp, #0]
 8007568:	f7f8 ffe4 	bl	8000534 <__aeabi_i2d>
 800756c:	4632      	mov	r2, r6
 800756e:	463b      	mov	r3, r7
 8007570:	f7f9 fab2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007574:	b910      	cbnz	r0, 800757c <_dtoa_r+0x184>
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	3b01      	subs	r3, #1
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	9b00      	ldr	r3, [sp, #0]
 800757e:	2b16      	cmp	r3, #22
 8007580:	d85a      	bhi.n	8007638 <_dtoa_r+0x240>
 8007582:	9a00      	ldr	r2, [sp, #0]
 8007584:	4b57      	ldr	r3, [pc, #348]	; (80076e4 <_dtoa_r+0x2ec>)
 8007586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	ec51 0b19 	vmov	r0, r1, d9
 8007592:	f7f9 faab 	bl	8000aec <__aeabi_dcmplt>
 8007596:	2800      	cmp	r0, #0
 8007598:	d050      	beq.n	800763c <_dtoa_r+0x244>
 800759a:	9b00      	ldr	r3, [sp, #0]
 800759c:	3b01      	subs	r3, #1
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2300      	movs	r3, #0
 80075a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80075a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075a6:	1b5d      	subs	r5, r3, r5
 80075a8:	1e6b      	subs	r3, r5, #1
 80075aa:	9305      	str	r3, [sp, #20]
 80075ac:	bf45      	ittet	mi
 80075ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80075b2:	9304      	strmi	r3, [sp, #16]
 80075b4:	2300      	movpl	r3, #0
 80075b6:	2300      	movmi	r3, #0
 80075b8:	bf4c      	ite	mi
 80075ba:	9305      	strmi	r3, [sp, #20]
 80075bc:	9304      	strpl	r3, [sp, #16]
 80075be:	9b00      	ldr	r3, [sp, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	db3d      	blt.n	8007640 <_dtoa_r+0x248>
 80075c4:	9b05      	ldr	r3, [sp, #20]
 80075c6:	9a00      	ldr	r2, [sp, #0]
 80075c8:	920a      	str	r2, [sp, #40]	; 0x28
 80075ca:	4413      	add	r3, r2
 80075cc:	9305      	str	r3, [sp, #20]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	9b06      	ldr	r3, [sp, #24]
 80075d4:	2b09      	cmp	r3, #9
 80075d6:	f200 8089 	bhi.w	80076ec <_dtoa_r+0x2f4>
 80075da:	2b05      	cmp	r3, #5
 80075dc:	bfc4      	itt	gt
 80075de:	3b04      	subgt	r3, #4
 80075e0:	9306      	strgt	r3, [sp, #24]
 80075e2:	9b06      	ldr	r3, [sp, #24]
 80075e4:	f1a3 0302 	sub.w	r3, r3, #2
 80075e8:	bfcc      	ite	gt
 80075ea:	2500      	movgt	r5, #0
 80075ec:	2501      	movle	r5, #1
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	f200 8087 	bhi.w	8007702 <_dtoa_r+0x30a>
 80075f4:	e8df f003 	tbb	[pc, r3]
 80075f8:	59383a2d 	.word	0x59383a2d
 80075fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007600:	441d      	add	r5, r3
 8007602:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007606:	2b20      	cmp	r3, #32
 8007608:	bfc1      	itttt	gt
 800760a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800760e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007612:	fa0b f303 	lslgt.w	r3, fp, r3
 8007616:	fa26 f000 	lsrgt.w	r0, r6, r0
 800761a:	bfda      	itte	le
 800761c:	f1c3 0320 	rsble	r3, r3, #32
 8007620:	fa06 f003 	lslle.w	r0, r6, r3
 8007624:	4318      	orrgt	r0, r3
 8007626:	f7f8 ff75 	bl	8000514 <__aeabi_ui2d>
 800762a:	2301      	movs	r3, #1
 800762c:	4606      	mov	r6, r0
 800762e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007632:	3d01      	subs	r5, #1
 8007634:	930e      	str	r3, [sp, #56]	; 0x38
 8007636:	e76a      	b.n	800750e <_dtoa_r+0x116>
 8007638:	2301      	movs	r3, #1
 800763a:	e7b2      	b.n	80075a2 <_dtoa_r+0x1aa>
 800763c:	900b      	str	r0, [sp, #44]	; 0x2c
 800763e:	e7b1      	b.n	80075a4 <_dtoa_r+0x1ac>
 8007640:	9b04      	ldr	r3, [sp, #16]
 8007642:	9a00      	ldr	r2, [sp, #0]
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	9304      	str	r3, [sp, #16]
 8007648:	4253      	negs	r3, r2
 800764a:	9307      	str	r3, [sp, #28]
 800764c:	2300      	movs	r3, #0
 800764e:	930a      	str	r3, [sp, #40]	; 0x28
 8007650:	e7bf      	b.n	80075d2 <_dtoa_r+0x1da>
 8007652:	2300      	movs	r3, #0
 8007654:	9308      	str	r3, [sp, #32]
 8007656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	dc55      	bgt.n	8007708 <_dtoa_r+0x310>
 800765c:	2301      	movs	r3, #1
 800765e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007662:	461a      	mov	r2, r3
 8007664:	9209      	str	r2, [sp, #36]	; 0x24
 8007666:	e00c      	b.n	8007682 <_dtoa_r+0x28a>
 8007668:	2301      	movs	r3, #1
 800766a:	e7f3      	b.n	8007654 <_dtoa_r+0x25c>
 800766c:	2300      	movs	r3, #0
 800766e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007670:	9308      	str	r3, [sp, #32]
 8007672:	9b00      	ldr	r3, [sp, #0]
 8007674:	4413      	add	r3, r2
 8007676:	9302      	str	r3, [sp, #8]
 8007678:	3301      	adds	r3, #1
 800767a:	2b01      	cmp	r3, #1
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	bfb8      	it	lt
 8007680:	2301      	movlt	r3, #1
 8007682:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007684:	2200      	movs	r2, #0
 8007686:	6042      	str	r2, [r0, #4]
 8007688:	2204      	movs	r2, #4
 800768a:	f102 0614 	add.w	r6, r2, #20
 800768e:	429e      	cmp	r6, r3
 8007690:	6841      	ldr	r1, [r0, #4]
 8007692:	d93d      	bls.n	8007710 <_dtoa_r+0x318>
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fcbb 	bl	8008010 <_Balloc>
 800769a:	9001      	str	r0, [sp, #4]
 800769c:	2800      	cmp	r0, #0
 800769e:	d13b      	bne.n	8007718 <_dtoa_r+0x320>
 80076a0:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <_dtoa_r+0x2f0>)
 80076a2:	4602      	mov	r2, r0
 80076a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076a8:	e6c0      	b.n	800742c <_dtoa_r+0x34>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e7df      	b.n	800766e <_dtoa_r+0x276>
 80076ae:	bf00      	nop
 80076b0:	636f4361 	.word	0x636f4361
 80076b4:	3fd287a7 	.word	0x3fd287a7
 80076b8:	8b60c8b3 	.word	0x8b60c8b3
 80076bc:	3fc68a28 	.word	0x3fc68a28
 80076c0:	509f79fb 	.word	0x509f79fb
 80076c4:	3fd34413 	.word	0x3fd34413
 80076c8:	0800bef5 	.word	0x0800bef5
 80076cc:	0800bf0c 	.word	0x0800bf0c
 80076d0:	7ff00000 	.word	0x7ff00000
 80076d4:	0800bef1 	.word	0x0800bef1
 80076d8:	0800bee8 	.word	0x0800bee8
 80076dc:	0800bec5 	.word	0x0800bec5
 80076e0:	3ff80000 	.word	0x3ff80000
 80076e4:	0800c000 	.word	0x0800c000
 80076e8:	0800bf67 	.word	0x0800bf67
 80076ec:	2501      	movs	r5, #1
 80076ee:	2300      	movs	r3, #0
 80076f0:	9306      	str	r3, [sp, #24]
 80076f2:	9508      	str	r5, [sp, #32]
 80076f4:	f04f 33ff 	mov.w	r3, #4294967295
 80076f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	2312      	movs	r3, #18
 8007700:	e7b0      	b.n	8007664 <_dtoa_r+0x26c>
 8007702:	2301      	movs	r3, #1
 8007704:	9308      	str	r3, [sp, #32]
 8007706:	e7f5      	b.n	80076f4 <_dtoa_r+0x2fc>
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800770e:	e7b8      	b.n	8007682 <_dtoa_r+0x28a>
 8007710:	3101      	adds	r1, #1
 8007712:	6041      	str	r1, [r0, #4]
 8007714:	0052      	lsls	r2, r2, #1
 8007716:	e7b8      	b.n	800768a <_dtoa_r+0x292>
 8007718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	2b0e      	cmp	r3, #14
 8007722:	f200 809d 	bhi.w	8007860 <_dtoa_r+0x468>
 8007726:	2d00      	cmp	r5, #0
 8007728:	f000 809a 	beq.w	8007860 <_dtoa_r+0x468>
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	dd32      	ble.n	8007798 <_dtoa_r+0x3a0>
 8007732:	4ab7      	ldr	r2, [pc, #732]	; (8007a10 <_dtoa_r+0x618>)
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800773c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007740:	9b00      	ldr	r3, [sp, #0]
 8007742:	05d8      	lsls	r0, r3, #23
 8007744:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007748:	d516      	bpl.n	8007778 <_dtoa_r+0x380>
 800774a:	4bb2      	ldr	r3, [pc, #712]	; (8007a14 <_dtoa_r+0x61c>)
 800774c:	ec51 0b19 	vmov	r0, r1, d9
 8007750:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007754:	f7f9 f882 	bl	800085c <__aeabi_ddiv>
 8007758:	f007 070f 	and.w	r7, r7, #15
 800775c:	4682      	mov	sl, r0
 800775e:	468b      	mov	fp, r1
 8007760:	2503      	movs	r5, #3
 8007762:	4eac      	ldr	r6, [pc, #688]	; (8007a14 <_dtoa_r+0x61c>)
 8007764:	b957      	cbnz	r7, 800777c <_dtoa_r+0x384>
 8007766:	4642      	mov	r2, r8
 8007768:	464b      	mov	r3, r9
 800776a:	4650      	mov	r0, sl
 800776c:	4659      	mov	r1, fp
 800776e:	f7f9 f875 	bl	800085c <__aeabi_ddiv>
 8007772:	4682      	mov	sl, r0
 8007774:	468b      	mov	fp, r1
 8007776:	e028      	b.n	80077ca <_dtoa_r+0x3d2>
 8007778:	2502      	movs	r5, #2
 800777a:	e7f2      	b.n	8007762 <_dtoa_r+0x36a>
 800777c:	07f9      	lsls	r1, r7, #31
 800777e:	d508      	bpl.n	8007792 <_dtoa_r+0x39a>
 8007780:	4640      	mov	r0, r8
 8007782:	4649      	mov	r1, r9
 8007784:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007788:	f7f8 ff3e 	bl	8000608 <__aeabi_dmul>
 800778c:	3501      	adds	r5, #1
 800778e:	4680      	mov	r8, r0
 8007790:	4689      	mov	r9, r1
 8007792:	107f      	asrs	r7, r7, #1
 8007794:	3608      	adds	r6, #8
 8007796:	e7e5      	b.n	8007764 <_dtoa_r+0x36c>
 8007798:	f000 809b 	beq.w	80078d2 <_dtoa_r+0x4da>
 800779c:	9b00      	ldr	r3, [sp, #0]
 800779e:	4f9d      	ldr	r7, [pc, #628]	; (8007a14 <_dtoa_r+0x61c>)
 80077a0:	425e      	negs	r6, r3
 80077a2:	4b9b      	ldr	r3, [pc, #620]	; (8007a10 <_dtoa_r+0x618>)
 80077a4:	f006 020f 	and.w	r2, r6, #15
 80077a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	ec51 0b19 	vmov	r0, r1, d9
 80077b4:	f7f8 ff28 	bl	8000608 <__aeabi_dmul>
 80077b8:	1136      	asrs	r6, r6, #4
 80077ba:	4682      	mov	sl, r0
 80077bc:	468b      	mov	fp, r1
 80077be:	2300      	movs	r3, #0
 80077c0:	2502      	movs	r5, #2
 80077c2:	2e00      	cmp	r6, #0
 80077c4:	d17a      	bne.n	80078bc <_dtoa_r+0x4c4>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1d3      	bne.n	8007772 <_dtoa_r+0x37a>
 80077ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8082 	beq.w	80078d6 <_dtoa_r+0x4de>
 80077d2:	4b91      	ldr	r3, [pc, #580]	; (8007a18 <_dtoa_r+0x620>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	4650      	mov	r0, sl
 80077d8:	4659      	mov	r1, fp
 80077da:	f7f9 f987 	bl	8000aec <__aeabi_dcmplt>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d079      	beq.n	80078d6 <_dtoa_r+0x4de>
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d076      	beq.n	80078d6 <_dtoa_r+0x4de>
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	dd36      	ble.n	800785c <_dtoa_r+0x464>
 80077ee:	9b00      	ldr	r3, [sp, #0]
 80077f0:	4650      	mov	r0, sl
 80077f2:	4659      	mov	r1, fp
 80077f4:	1e5f      	subs	r7, r3, #1
 80077f6:	2200      	movs	r2, #0
 80077f8:	4b88      	ldr	r3, [pc, #544]	; (8007a1c <_dtoa_r+0x624>)
 80077fa:	f7f8 ff05 	bl	8000608 <__aeabi_dmul>
 80077fe:	9e02      	ldr	r6, [sp, #8]
 8007800:	4682      	mov	sl, r0
 8007802:	468b      	mov	fp, r1
 8007804:	3501      	adds	r5, #1
 8007806:	4628      	mov	r0, r5
 8007808:	f7f8 fe94 	bl	8000534 <__aeabi_i2d>
 800780c:	4652      	mov	r2, sl
 800780e:	465b      	mov	r3, fp
 8007810:	f7f8 fefa 	bl	8000608 <__aeabi_dmul>
 8007814:	4b82      	ldr	r3, [pc, #520]	; (8007a20 <_dtoa_r+0x628>)
 8007816:	2200      	movs	r2, #0
 8007818:	f7f8 fd40 	bl	800029c <__adddf3>
 800781c:	46d0      	mov	r8, sl
 800781e:	46d9      	mov	r9, fp
 8007820:	4682      	mov	sl, r0
 8007822:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007826:	2e00      	cmp	r6, #0
 8007828:	d158      	bne.n	80078dc <_dtoa_r+0x4e4>
 800782a:	4b7e      	ldr	r3, [pc, #504]	; (8007a24 <_dtoa_r+0x62c>)
 800782c:	2200      	movs	r2, #0
 800782e:	4640      	mov	r0, r8
 8007830:	4649      	mov	r1, r9
 8007832:	f7f8 fd31 	bl	8000298 <__aeabi_dsub>
 8007836:	4652      	mov	r2, sl
 8007838:	465b      	mov	r3, fp
 800783a:	4680      	mov	r8, r0
 800783c:	4689      	mov	r9, r1
 800783e:	f7f9 f973 	bl	8000b28 <__aeabi_dcmpgt>
 8007842:	2800      	cmp	r0, #0
 8007844:	f040 8295 	bne.w	8007d72 <_dtoa_r+0x97a>
 8007848:	4652      	mov	r2, sl
 800784a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800784e:	4640      	mov	r0, r8
 8007850:	4649      	mov	r1, r9
 8007852:	f7f9 f94b 	bl	8000aec <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	f040 8289 	bne.w	8007d6e <_dtoa_r+0x976>
 800785c:	ec5b ab19 	vmov	sl, fp, d9
 8007860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007862:	2b00      	cmp	r3, #0
 8007864:	f2c0 8148 	blt.w	8007af8 <_dtoa_r+0x700>
 8007868:	9a00      	ldr	r2, [sp, #0]
 800786a:	2a0e      	cmp	r2, #14
 800786c:	f300 8144 	bgt.w	8007af8 <_dtoa_r+0x700>
 8007870:	4b67      	ldr	r3, [pc, #412]	; (8007a10 <_dtoa_r+0x618>)
 8007872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007876:	e9d3 8900 	ldrd	r8, r9, [r3]
 800787a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	f280 80d5 	bge.w	8007a2c <_dtoa_r+0x634>
 8007882:	9b03      	ldr	r3, [sp, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f300 80d1 	bgt.w	8007a2c <_dtoa_r+0x634>
 800788a:	f040 826f 	bne.w	8007d6c <_dtoa_r+0x974>
 800788e:	4b65      	ldr	r3, [pc, #404]	; (8007a24 <_dtoa_r+0x62c>)
 8007890:	2200      	movs	r2, #0
 8007892:	4640      	mov	r0, r8
 8007894:	4649      	mov	r1, r9
 8007896:	f7f8 feb7 	bl	8000608 <__aeabi_dmul>
 800789a:	4652      	mov	r2, sl
 800789c:	465b      	mov	r3, fp
 800789e:	f7f9 f939 	bl	8000b14 <__aeabi_dcmpge>
 80078a2:	9e03      	ldr	r6, [sp, #12]
 80078a4:	4637      	mov	r7, r6
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f040 8245 	bne.w	8007d36 <_dtoa_r+0x93e>
 80078ac:	9d01      	ldr	r5, [sp, #4]
 80078ae:	2331      	movs	r3, #49	; 0x31
 80078b0:	f805 3b01 	strb.w	r3, [r5], #1
 80078b4:	9b00      	ldr	r3, [sp, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	e240      	b.n	8007d3e <_dtoa_r+0x946>
 80078bc:	07f2      	lsls	r2, r6, #31
 80078be:	d505      	bpl.n	80078cc <_dtoa_r+0x4d4>
 80078c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c4:	f7f8 fea0 	bl	8000608 <__aeabi_dmul>
 80078c8:	3501      	adds	r5, #1
 80078ca:	2301      	movs	r3, #1
 80078cc:	1076      	asrs	r6, r6, #1
 80078ce:	3708      	adds	r7, #8
 80078d0:	e777      	b.n	80077c2 <_dtoa_r+0x3ca>
 80078d2:	2502      	movs	r5, #2
 80078d4:	e779      	b.n	80077ca <_dtoa_r+0x3d2>
 80078d6:	9f00      	ldr	r7, [sp, #0]
 80078d8:	9e03      	ldr	r6, [sp, #12]
 80078da:	e794      	b.n	8007806 <_dtoa_r+0x40e>
 80078dc:	9901      	ldr	r1, [sp, #4]
 80078de:	4b4c      	ldr	r3, [pc, #304]	; (8007a10 <_dtoa_r+0x618>)
 80078e0:	4431      	add	r1, r6
 80078e2:	910d      	str	r1, [sp, #52]	; 0x34
 80078e4:	9908      	ldr	r1, [sp, #32]
 80078e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078ee:	2900      	cmp	r1, #0
 80078f0:	d043      	beq.n	800797a <_dtoa_r+0x582>
 80078f2:	494d      	ldr	r1, [pc, #308]	; (8007a28 <_dtoa_r+0x630>)
 80078f4:	2000      	movs	r0, #0
 80078f6:	f7f8 ffb1 	bl	800085c <__aeabi_ddiv>
 80078fa:	4652      	mov	r2, sl
 80078fc:	465b      	mov	r3, fp
 80078fe:	f7f8 fccb 	bl	8000298 <__aeabi_dsub>
 8007902:	9d01      	ldr	r5, [sp, #4]
 8007904:	4682      	mov	sl, r0
 8007906:	468b      	mov	fp, r1
 8007908:	4649      	mov	r1, r9
 800790a:	4640      	mov	r0, r8
 800790c:	f7f9 f92c 	bl	8000b68 <__aeabi_d2iz>
 8007910:	4606      	mov	r6, r0
 8007912:	f7f8 fe0f 	bl	8000534 <__aeabi_i2d>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	f7f8 fcbb 	bl	8000298 <__aeabi_dsub>
 8007922:	3630      	adds	r6, #48	; 0x30
 8007924:	f805 6b01 	strb.w	r6, [r5], #1
 8007928:	4652      	mov	r2, sl
 800792a:	465b      	mov	r3, fp
 800792c:	4680      	mov	r8, r0
 800792e:	4689      	mov	r9, r1
 8007930:	f7f9 f8dc 	bl	8000aec <__aeabi_dcmplt>
 8007934:	2800      	cmp	r0, #0
 8007936:	d163      	bne.n	8007a00 <_dtoa_r+0x608>
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	4936      	ldr	r1, [pc, #216]	; (8007a18 <_dtoa_r+0x620>)
 800793e:	2000      	movs	r0, #0
 8007940:	f7f8 fcaa 	bl	8000298 <__aeabi_dsub>
 8007944:	4652      	mov	r2, sl
 8007946:	465b      	mov	r3, fp
 8007948:	f7f9 f8d0 	bl	8000aec <__aeabi_dcmplt>
 800794c:	2800      	cmp	r0, #0
 800794e:	f040 80b5 	bne.w	8007abc <_dtoa_r+0x6c4>
 8007952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007954:	429d      	cmp	r5, r3
 8007956:	d081      	beq.n	800785c <_dtoa_r+0x464>
 8007958:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <_dtoa_r+0x624>)
 800795a:	2200      	movs	r2, #0
 800795c:	4650      	mov	r0, sl
 800795e:	4659      	mov	r1, fp
 8007960:	f7f8 fe52 	bl	8000608 <__aeabi_dmul>
 8007964:	4b2d      	ldr	r3, [pc, #180]	; (8007a1c <_dtoa_r+0x624>)
 8007966:	4682      	mov	sl, r0
 8007968:	468b      	mov	fp, r1
 800796a:	4640      	mov	r0, r8
 800796c:	4649      	mov	r1, r9
 800796e:	2200      	movs	r2, #0
 8007970:	f7f8 fe4a 	bl	8000608 <__aeabi_dmul>
 8007974:	4680      	mov	r8, r0
 8007976:	4689      	mov	r9, r1
 8007978:	e7c6      	b.n	8007908 <_dtoa_r+0x510>
 800797a:	4650      	mov	r0, sl
 800797c:	4659      	mov	r1, fp
 800797e:	f7f8 fe43 	bl	8000608 <__aeabi_dmul>
 8007982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007984:	9d01      	ldr	r5, [sp, #4]
 8007986:	930f      	str	r3, [sp, #60]	; 0x3c
 8007988:	4682      	mov	sl, r0
 800798a:	468b      	mov	fp, r1
 800798c:	4649      	mov	r1, r9
 800798e:	4640      	mov	r0, r8
 8007990:	f7f9 f8ea 	bl	8000b68 <__aeabi_d2iz>
 8007994:	4606      	mov	r6, r0
 8007996:	f7f8 fdcd 	bl	8000534 <__aeabi_i2d>
 800799a:	3630      	adds	r6, #48	; 0x30
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4640      	mov	r0, r8
 80079a2:	4649      	mov	r1, r9
 80079a4:	f7f8 fc78 	bl	8000298 <__aeabi_dsub>
 80079a8:	f805 6b01 	strb.w	r6, [r5], #1
 80079ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ae:	429d      	cmp	r5, r3
 80079b0:	4680      	mov	r8, r0
 80079b2:	4689      	mov	r9, r1
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	d124      	bne.n	8007a04 <_dtoa_r+0x60c>
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <_dtoa_r+0x630>)
 80079bc:	4650      	mov	r0, sl
 80079be:	4659      	mov	r1, fp
 80079c0:	f7f8 fc6c 	bl	800029c <__adddf3>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4640      	mov	r0, r8
 80079ca:	4649      	mov	r1, r9
 80079cc:	f7f9 f8ac 	bl	8000b28 <__aeabi_dcmpgt>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d173      	bne.n	8007abc <_dtoa_r+0x6c4>
 80079d4:	4652      	mov	r2, sl
 80079d6:	465b      	mov	r3, fp
 80079d8:	4913      	ldr	r1, [pc, #76]	; (8007a28 <_dtoa_r+0x630>)
 80079da:	2000      	movs	r0, #0
 80079dc:	f7f8 fc5c 	bl	8000298 <__aeabi_dsub>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	f7f9 f880 	bl	8000aec <__aeabi_dcmplt>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	f43f af35 	beq.w	800785c <_dtoa_r+0x464>
 80079f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079f4:	1e6b      	subs	r3, r5, #1
 80079f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079fc:	2b30      	cmp	r3, #48	; 0x30
 80079fe:	d0f8      	beq.n	80079f2 <_dtoa_r+0x5fa>
 8007a00:	9700      	str	r7, [sp, #0]
 8007a02:	e049      	b.n	8007a98 <_dtoa_r+0x6a0>
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <_dtoa_r+0x624>)
 8007a06:	f7f8 fdff 	bl	8000608 <__aeabi_dmul>
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	e7bd      	b.n	800798c <_dtoa_r+0x594>
 8007a10:	0800c000 	.word	0x0800c000
 8007a14:	0800bfd8 	.word	0x0800bfd8
 8007a18:	3ff00000 	.word	0x3ff00000
 8007a1c:	40240000 	.word	0x40240000
 8007a20:	401c0000 	.word	0x401c0000
 8007a24:	40140000 	.word	0x40140000
 8007a28:	3fe00000 	.word	0x3fe00000
 8007a2c:	9d01      	ldr	r5, [sp, #4]
 8007a2e:	4656      	mov	r6, sl
 8007a30:	465f      	mov	r7, fp
 8007a32:	4642      	mov	r2, r8
 8007a34:	464b      	mov	r3, r9
 8007a36:	4630      	mov	r0, r6
 8007a38:	4639      	mov	r1, r7
 8007a3a:	f7f8 ff0f 	bl	800085c <__aeabi_ddiv>
 8007a3e:	f7f9 f893 	bl	8000b68 <__aeabi_d2iz>
 8007a42:	4682      	mov	sl, r0
 8007a44:	f7f8 fd76 	bl	8000534 <__aeabi_i2d>
 8007a48:	4642      	mov	r2, r8
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	f7f8 fddc 	bl	8000608 <__aeabi_dmul>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4630      	mov	r0, r6
 8007a56:	4639      	mov	r1, r7
 8007a58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a5c:	f7f8 fc1c 	bl	8000298 <__aeabi_dsub>
 8007a60:	f805 6b01 	strb.w	r6, [r5], #1
 8007a64:	9e01      	ldr	r6, [sp, #4]
 8007a66:	9f03      	ldr	r7, [sp, #12]
 8007a68:	1bae      	subs	r6, r5, r6
 8007a6a:	42b7      	cmp	r7, r6
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	d135      	bne.n	8007ade <_dtoa_r+0x6e6>
 8007a72:	f7f8 fc13 	bl	800029c <__adddf3>
 8007a76:	4642      	mov	r2, r8
 8007a78:	464b      	mov	r3, r9
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460f      	mov	r7, r1
 8007a7e:	f7f9 f853 	bl	8000b28 <__aeabi_dcmpgt>
 8007a82:	b9d0      	cbnz	r0, 8007aba <_dtoa_r+0x6c2>
 8007a84:	4642      	mov	r2, r8
 8007a86:	464b      	mov	r3, r9
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f9 f824 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a90:	b110      	cbz	r0, 8007a98 <_dtoa_r+0x6a0>
 8007a92:	f01a 0f01 	tst.w	sl, #1
 8007a96:	d110      	bne.n	8007aba <_dtoa_r+0x6c2>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	ee18 1a10 	vmov	r1, s16
 8007a9e:	f000 faf7 	bl	8008090 <_Bfree>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9800      	ldr	r0, [sp, #0]
 8007aa6:	702b      	strb	r3, [r5, #0]
 8007aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aaa:	3001      	adds	r0, #1
 8007aac:	6018      	str	r0, [r3, #0]
 8007aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f43f acf1 	beq.w	8007498 <_dtoa_r+0xa0>
 8007ab6:	601d      	str	r5, [r3, #0]
 8007ab8:	e4ee      	b.n	8007498 <_dtoa_r+0xa0>
 8007aba:	9f00      	ldr	r7, [sp, #0]
 8007abc:	462b      	mov	r3, r5
 8007abe:	461d      	mov	r5, r3
 8007ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ac4:	2a39      	cmp	r2, #57	; 0x39
 8007ac6:	d106      	bne.n	8007ad6 <_dtoa_r+0x6de>
 8007ac8:	9a01      	ldr	r2, [sp, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d1f7      	bne.n	8007abe <_dtoa_r+0x6c6>
 8007ace:	9901      	ldr	r1, [sp, #4]
 8007ad0:	2230      	movs	r2, #48	; 0x30
 8007ad2:	3701      	adds	r7, #1
 8007ad4:	700a      	strb	r2, [r1, #0]
 8007ad6:	781a      	ldrb	r2, [r3, #0]
 8007ad8:	3201      	adds	r2, #1
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	e790      	b.n	8007a00 <_dtoa_r+0x608>
 8007ade:	4ba6      	ldr	r3, [pc, #664]	; (8007d78 <_dtoa_r+0x980>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f7f8 fd91 	bl	8000608 <__aeabi_dmul>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4606      	mov	r6, r0
 8007aec:	460f      	mov	r7, r1
 8007aee:	f7f8 fff3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d09d      	beq.n	8007a32 <_dtoa_r+0x63a>
 8007af6:	e7cf      	b.n	8007a98 <_dtoa_r+0x6a0>
 8007af8:	9a08      	ldr	r2, [sp, #32]
 8007afa:	2a00      	cmp	r2, #0
 8007afc:	f000 80d7 	beq.w	8007cae <_dtoa_r+0x8b6>
 8007b00:	9a06      	ldr	r2, [sp, #24]
 8007b02:	2a01      	cmp	r2, #1
 8007b04:	f300 80ba 	bgt.w	8007c7c <_dtoa_r+0x884>
 8007b08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	f000 80b2 	beq.w	8007c74 <_dtoa_r+0x87c>
 8007b10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b14:	9e07      	ldr	r6, [sp, #28]
 8007b16:	9d04      	ldr	r5, [sp, #16]
 8007b18:	9a04      	ldr	r2, [sp, #16]
 8007b1a:	441a      	add	r2, r3
 8007b1c:	9204      	str	r2, [sp, #16]
 8007b1e:	9a05      	ldr	r2, [sp, #20]
 8007b20:	2101      	movs	r1, #1
 8007b22:	441a      	add	r2, r3
 8007b24:	4620      	mov	r0, r4
 8007b26:	9205      	str	r2, [sp, #20]
 8007b28:	f000 fb6a 	bl	8008200 <__i2b>
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	dd0c      	ble.n	8007b4c <_dtoa_r+0x754>
 8007b32:	9b05      	ldr	r3, [sp, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dd09      	ble.n	8007b4c <_dtoa_r+0x754>
 8007b38:	42ab      	cmp	r3, r5
 8007b3a:	9a04      	ldr	r2, [sp, #16]
 8007b3c:	bfa8      	it	ge
 8007b3e:	462b      	movge	r3, r5
 8007b40:	1ad2      	subs	r2, r2, r3
 8007b42:	9204      	str	r2, [sp, #16]
 8007b44:	9a05      	ldr	r2, [sp, #20]
 8007b46:	1aed      	subs	r5, r5, r3
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	9305      	str	r3, [sp, #20]
 8007b4c:	9b07      	ldr	r3, [sp, #28]
 8007b4e:	b31b      	cbz	r3, 8007b98 <_dtoa_r+0x7a0>
 8007b50:	9b08      	ldr	r3, [sp, #32]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80af 	beq.w	8007cb6 <_dtoa_r+0x8be>
 8007b58:	2e00      	cmp	r6, #0
 8007b5a:	dd13      	ble.n	8007b84 <_dtoa_r+0x78c>
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	4632      	mov	r2, r6
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 fc0d 	bl	8008380 <__pow5mult>
 8007b66:	ee18 2a10 	vmov	r2, s16
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 fb5c 	bl	800822c <__multiply>
 8007b74:	ee18 1a10 	vmov	r1, s16
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fa88 	bl	8008090 <_Bfree>
 8007b80:	ee08 8a10 	vmov	s16, r8
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	1b9a      	subs	r2, r3, r6
 8007b88:	d006      	beq.n	8007b98 <_dtoa_r+0x7a0>
 8007b8a:	ee18 1a10 	vmov	r1, s16
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f000 fbf6 	bl	8008380 <__pow5mult>
 8007b94:	ee08 0a10 	vmov	s16, r0
 8007b98:	2101      	movs	r1, #1
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fb30 	bl	8008200 <__i2b>
 8007ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	f340 8088 	ble.w	8007cba <_dtoa_r+0x8c2>
 8007baa:	461a      	mov	r2, r3
 8007bac:	4601      	mov	r1, r0
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f000 fbe6 	bl	8008380 <__pow5mult>
 8007bb4:	9b06      	ldr	r3, [sp, #24]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	4606      	mov	r6, r0
 8007bba:	f340 8081 	ble.w	8007cc0 <_dtoa_r+0x8c8>
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	6933      	ldr	r3, [r6, #16]
 8007bc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007bc8:	6918      	ldr	r0, [r3, #16]
 8007bca:	f000 fac9 	bl	8008160 <__hi0bits>
 8007bce:	f1c0 0020 	rsb	r0, r0, #32
 8007bd2:	9b05      	ldr	r3, [sp, #20]
 8007bd4:	4418      	add	r0, r3
 8007bd6:	f010 001f 	ands.w	r0, r0, #31
 8007bda:	f000 8092 	beq.w	8007d02 <_dtoa_r+0x90a>
 8007bde:	f1c0 0320 	rsb	r3, r0, #32
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	f340 808a 	ble.w	8007cfc <_dtoa_r+0x904>
 8007be8:	f1c0 001c 	rsb	r0, r0, #28
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	4403      	add	r3, r0
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	9b05      	ldr	r3, [sp, #20]
 8007bf4:	4403      	add	r3, r0
 8007bf6:	4405      	add	r5, r0
 8007bf8:	9305      	str	r3, [sp, #20]
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd07      	ble.n	8007c10 <_dtoa_r+0x818>
 8007c00:	ee18 1a10 	vmov	r1, s16
 8007c04:	461a      	mov	r2, r3
 8007c06:	4620      	mov	r0, r4
 8007c08:	f000 fc14 	bl	8008434 <__lshift>
 8007c0c:	ee08 0a10 	vmov	s16, r0
 8007c10:	9b05      	ldr	r3, [sp, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	dd05      	ble.n	8007c22 <_dtoa_r+0x82a>
 8007c16:	4631      	mov	r1, r6
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f000 fc0a 	bl	8008434 <__lshift>
 8007c20:	4606      	mov	r6, r0
 8007c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d06e      	beq.n	8007d06 <_dtoa_r+0x90e>
 8007c28:	ee18 0a10 	vmov	r0, s16
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	f000 fc71 	bl	8008514 <__mcmp>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	da67      	bge.n	8007d06 <_dtoa_r+0x90e>
 8007c36:	9b00      	ldr	r3, [sp, #0]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	ee18 1a10 	vmov	r1, s16
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	220a      	movs	r2, #10
 8007c42:	2300      	movs	r3, #0
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 fa45 	bl	80080d4 <__multadd>
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	ee08 0a10 	vmov	s16, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 81b1 	beq.w	8007fb8 <_dtoa_r+0xbc0>
 8007c56:	2300      	movs	r3, #0
 8007c58:	4639      	mov	r1, r7
 8007c5a:	220a      	movs	r2, #10
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 fa39 	bl	80080d4 <__multadd>
 8007c62:	9b02      	ldr	r3, [sp, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	4607      	mov	r7, r0
 8007c68:	f300 808e 	bgt.w	8007d88 <_dtoa_r+0x990>
 8007c6c:	9b06      	ldr	r3, [sp, #24]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	dc51      	bgt.n	8007d16 <_dtoa_r+0x91e>
 8007c72:	e089      	b.n	8007d88 <_dtoa_r+0x990>
 8007c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c7a:	e74b      	b.n	8007b14 <_dtoa_r+0x71c>
 8007c7c:	9b03      	ldr	r3, [sp, #12]
 8007c7e:	1e5e      	subs	r6, r3, #1
 8007c80:	9b07      	ldr	r3, [sp, #28]
 8007c82:	42b3      	cmp	r3, r6
 8007c84:	bfbf      	itttt	lt
 8007c86:	9b07      	ldrlt	r3, [sp, #28]
 8007c88:	9607      	strlt	r6, [sp, #28]
 8007c8a:	1af2      	sublt	r2, r6, r3
 8007c8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c8e:	bfb6      	itet	lt
 8007c90:	189b      	addlt	r3, r3, r2
 8007c92:	1b9e      	subge	r6, r3, r6
 8007c94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	bfb8      	it	lt
 8007c9a:	2600      	movlt	r6, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bfb7      	itett	lt
 8007ca0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ca4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ca8:	1a9d      	sublt	r5, r3, r2
 8007caa:	2300      	movlt	r3, #0
 8007cac:	e734      	b.n	8007b18 <_dtoa_r+0x720>
 8007cae:	9e07      	ldr	r6, [sp, #28]
 8007cb0:	9d04      	ldr	r5, [sp, #16]
 8007cb2:	9f08      	ldr	r7, [sp, #32]
 8007cb4:	e73b      	b.n	8007b2e <_dtoa_r+0x736>
 8007cb6:	9a07      	ldr	r2, [sp, #28]
 8007cb8:	e767      	b.n	8007b8a <_dtoa_r+0x792>
 8007cba:	9b06      	ldr	r3, [sp, #24]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	dc18      	bgt.n	8007cf2 <_dtoa_r+0x8fa>
 8007cc0:	f1ba 0f00 	cmp.w	sl, #0
 8007cc4:	d115      	bne.n	8007cf2 <_dtoa_r+0x8fa>
 8007cc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cca:	b993      	cbnz	r3, 8007cf2 <_dtoa_r+0x8fa>
 8007ccc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cd0:	0d1b      	lsrs	r3, r3, #20
 8007cd2:	051b      	lsls	r3, r3, #20
 8007cd4:	b183      	cbz	r3, 8007cf8 <_dtoa_r+0x900>
 8007cd6:	9b04      	ldr	r3, [sp, #16]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	9b05      	ldr	r3, [sp, #20]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	9305      	str	r3, [sp, #20]
 8007ce2:	f04f 0801 	mov.w	r8, #1
 8007ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f af6a 	bne.w	8007bc2 <_dtoa_r+0x7ca>
 8007cee:	2001      	movs	r0, #1
 8007cf0:	e76f      	b.n	8007bd2 <_dtoa_r+0x7da>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	e7f6      	b.n	8007ce6 <_dtoa_r+0x8ee>
 8007cf8:	4698      	mov	r8, r3
 8007cfa:	e7f4      	b.n	8007ce6 <_dtoa_r+0x8ee>
 8007cfc:	f43f af7d 	beq.w	8007bfa <_dtoa_r+0x802>
 8007d00:	4618      	mov	r0, r3
 8007d02:	301c      	adds	r0, #28
 8007d04:	e772      	b.n	8007bec <_dtoa_r+0x7f4>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	dc37      	bgt.n	8007d7c <_dtoa_r+0x984>
 8007d0c:	9b06      	ldr	r3, [sp, #24]
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	dd34      	ble.n	8007d7c <_dtoa_r+0x984>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	9302      	str	r3, [sp, #8]
 8007d16:	9b02      	ldr	r3, [sp, #8]
 8007d18:	b96b      	cbnz	r3, 8007d36 <_dtoa_r+0x93e>
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	2205      	movs	r2, #5
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 f9d8 	bl	80080d4 <__multadd>
 8007d24:	4601      	mov	r1, r0
 8007d26:	4606      	mov	r6, r0
 8007d28:	ee18 0a10 	vmov	r0, s16
 8007d2c:	f000 fbf2 	bl	8008514 <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f73f adbb 	bgt.w	80078ac <_dtoa_r+0x4b4>
 8007d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d38:	9d01      	ldr	r5, [sp, #4]
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	4631      	mov	r1, r6
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 f9a3 	bl	8008090 <_Bfree>
 8007d4a:	2f00      	cmp	r7, #0
 8007d4c:	f43f aea4 	beq.w	8007a98 <_dtoa_r+0x6a0>
 8007d50:	f1b8 0f00 	cmp.w	r8, #0
 8007d54:	d005      	beq.n	8007d62 <_dtoa_r+0x96a>
 8007d56:	45b8      	cmp	r8, r7
 8007d58:	d003      	beq.n	8007d62 <_dtoa_r+0x96a>
 8007d5a:	4641      	mov	r1, r8
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 f997 	bl	8008090 <_Bfree>
 8007d62:	4639      	mov	r1, r7
 8007d64:	4620      	mov	r0, r4
 8007d66:	f000 f993 	bl	8008090 <_Bfree>
 8007d6a:	e695      	b.n	8007a98 <_dtoa_r+0x6a0>
 8007d6c:	2600      	movs	r6, #0
 8007d6e:	4637      	mov	r7, r6
 8007d70:	e7e1      	b.n	8007d36 <_dtoa_r+0x93e>
 8007d72:	9700      	str	r7, [sp, #0]
 8007d74:	4637      	mov	r7, r6
 8007d76:	e599      	b.n	80078ac <_dtoa_r+0x4b4>
 8007d78:	40240000 	.word	0x40240000
 8007d7c:	9b08      	ldr	r3, [sp, #32]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 80ca 	beq.w	8007f18 <_dtoa_r+0xb20>
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	9302      	str	r3, [sp, #8]
 8007d88:	2d00      	cmp	r5, #0
 8007d8a:	dd05      	ble.n	8007d98 <_dtoa_r+0x9a0>
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	462a      	mov	r2, r5
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 fb4f 	bl	8008434 <__lshift>
 8007d96:	4607      	mov	r7, r0
 8007d98:	f1b8 0f00 	cmp.w	r8, #0
 8007d9c:	d05b      	beq.n	8007e56 <_dtoa_r+0xa5e>
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 f935 	bl	8008010 <_Balloc>
 8007da6:	4605      	mov	r5, r0
 8007da8:	b928      	cbnz	r0, 8007db6 <_dtoa_r+0x9be>
 8007daa:	4b87      	ldr	r3, [pc, #540]	; (8007fc8 <_dtoa_r+0xbd0>)
 8007dac:	4602      	mov	r2, r0
 8007dae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007db2:	f7ff bb3b 	b.w	800742c <_dtoa_r+0x34>
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	3202      	adds	r2, #2
 8007dba:	0092      	lsls	r2, r2, #2
 8007dbc:	f107 010c 	add.w	r1, r7, #12
 8007dc0:	300c      	adds	r0, #12
 8007dc2:	f000 f90b 	bl	8007fdc <memcpy>
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fb32 	bl	8008434 <__lshift>
 8007dd0:	9b01      	ldr	r3, [sp, #4]
 8007dd2:	f103 0901 	add.w	r9, r3, #1
 8007dd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007dda:	4413      	add	r3, r2
 8007ddc:	9305      	str	r3, [sp, #20]
 8007dde:	f00a 0301 	and.w	r3, sl, #1
 8007de2:	46b8      	mov	r8, r7
 8007de4:	9304      	str	r3, [sp, #16]
 8007de6:	4607      	mov	r7, r0
 8007de8:	4631      	mov	r1, r6
 8007dea:	ee18 0a10 	vmov	r0, s16
 8007dee:	f7ff fa75 	bl	80072dc <quorem>
 8007df2:	4641      	mov	r1, r8
 8007df4:	9002      	str	r0, [sp, #8]
 8007df6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007dfa:	ee18 0a10 	vmov	r0, s16
 8007dfe:	f000 fb89 	bl	8008514 <__mcmp>
 8007e02:	463a      	mov	r2, r7
 8007e04:	9003      	str	r0, [sp, #12]
 8007e06:	4631      	mov	r1, r6
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 fb9f 	bl	800854c <__mdiff>
 8007e0e:	68c2      	ldr	r2, [r0, #12]
 8007e10:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e14:	4605      	mov	r5, r0
 8007e16:	bb02      	cbnz	r2, 8007e5a <_dtoa_r+0xa62>
 8007e18:	4601      	mov	r1, r0
 8007e1a:	ee18 0a10 	vmov	r0, s16
 8007e1e:	f000 fb79 	bl	8008514 <__mcmp>
 8007e22:	4602      	mov	r2, r0
 8007e24:	4629      	mov	r1, r5
 8007e26:	4620      	mov	r0, r4
 8007e28:	9207      	str	r2, [sp, #28]
 8007e2a:	f000 f931 	bl	8008090 <_Bfree>
 8007e2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e32:	ea43 0102 	orr.w	r1, r3, r2
 8007e36:	9b04      	ldr	r3, [sp, #16]
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	464d      	mov	r5, r9
 8007e3c:	d10f      	bne.n	8007e5e <_dtoa_r+0xa66>
 8007e3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e42:	d02a      	beq.n	8007e9a <_dtoa_r+0xaa2>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd02      	ble.n	8007e50 <_dtoa_r+0xa58>
 8007e4a:	9b02      	ldr	r3, [sp, #8]
 8007e4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e50:	f88b a000 	strb.w	sl, [fp]
 8007e54:	e775      	b.n	8007d42 <_dtoa_r+0x94a>
 8007e56:	4638      	mov	r0, r7
 8007e58:	e7ba      	b.n	8007dd0 <_dtoa_r+0x9d8>
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	e7e2      	b.n	8007e24 <_dtoa_r+0xa2c>
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	db04      	blt.n	8007e6e <_dtoa_r+0xa76>
 8007e64:	9906      	ldr	r1, [sp, #24]
 8007e66:	430b      	orrs	r3, r1
 8007e68:	9904      	ldr	r1, [sp, #16]
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	d122      	bne.n	8007eb4 <_dtoa_r+0xabc>
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	ddee      	ble.n	8007e50 <_dtoa_r+0xa58>
 8007e72:	ee18 1a10 	vmov	r1, s16
 8007e76:	2201      	movs	r2, #1
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 fadb 	bl	8008434 <__lshift>
 8007e7e:	4631      	mov	r1, r6
 8007e80:	ee08 0a10 	vmov	s16, r0
 8007e84:	f000 fb46 	bl	8008514 <__mcmp>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	dc03      	bgt.n	8007e94 <_dtoa_r+0xa9c>
 8007e8c:	d1e0      	bne.n	8007e50 <_dtoa_r+0xa58>
 8007e8e:	f01a 0f01 	tst.w	sl, #1
 8007e92:	d0dd      	beq.n	8007e50 <_dtoa_r+0xa58>
 8007e94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e98:	d1d7      	bne.n	8007e4a <_dtoa_r+0xa52>
 8007e9a:	2339      	movs	r3, #57	; 0x39
 8007e9c:	f88b 3000 	strb.w	r3, [fp]
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	461d      	mov	r5, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007eaa:	2a39      	cmp	r2, #57	; 0x39
 8007eac:	d071      	beq.n	8007f92 <_dtoa_r+0xb9a>
 8007eae:	3201      	adds	r2, #1
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	e746      	b.n	8007d42 <_dtoa_r+0x94a>
 8007eb4:	2a00      	cmp	r2, #0
 8007eb6:	dd07      	ble.n	8007ec8 <_dtoa_r+0xad0>
 8007eb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ebc:	d0ed      	beq.n	8007e9a <_dtoa_r+0xaa2>
 8007ebe:	f10a 0301 	add.w	r3, sl, #1
 8007ec2:	f88b 3000 	strb.w	r3, [fp]
 8007ec6:	e73c      	b.n	8007d42 <_dtoa_r+0x94a>
 8007ec8:	9b05      	ldr	r3, [sp, #20]
 8007eca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ece:	4599      	cmp	r9, r3
 8007ed0:	d047      	beq.n	8007f62 <_dtoa_r+0xb6a>
 8007ed2:	ee18 1a10 	vmov	r1, s16
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	220a      	movs	r2, #10
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 f8fa 	bl	80080d4 <__multadd>
 8007ee0:	45b8      	cmp	r8, r7
 8007ee2:	ee08 0a10 	vmov	s16, r0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	f04f 020a 	mov.w	r2, #10
 8007eee:	4641      	mov	r1, r8
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	d106      	bne.n	8007f02 <_dtoa_r+0xb0a>
 8007ef4:	f000 f8ee 	bl	80080d4 <__multadd>
 8007ef8:	4680      	mov	r8, r0
 8007efa:	4607      	mov	r7, r0
 8007efc:	f109 0901 	add.w	r9, r9, #1
 8007f00:	e772      	b.n	8007de8 <_dtoa_r+0x9f0>
 8007f02:	f000 f8e7 	bl	80080d4 <__multadd>
 8007f06:	4639      	mov	r1, r7
 8007f08:	4680      	mov	r8, r0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f8e0 	bl	80080d4 <__multadd>
 8007f14:	4607      	mov	r7, r0
 8007f16:	e7f1      	b.n	8007efc <_dtoa_r+0xb04>
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	9302      	str	r3, [sp, #8]
 8007f1c:	9d01      	ldr	r5, [sp, #4]
 8007f1e:	ee18 0a10 	vmov	r0, s16
 8007f22:	4631      	mov	r1, r6
 8007f24:	f7ff f9da 	bl	80072dc <quorem>
 8007f28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f2c:	9b01      	ldr	r3, [sp, #4]
 8007f2e:	f805 ab01 	strb.w	sl, [r5], #1
 8007f32:	1aea      	subs	r2, r5, r3
 8007f34:	9b02      	ldr	r3, [sp, #8]
 8007f36:	4293      	cmp	r3, r2
 8007f38:	dd09      	ble.n	8007f4e <_dtoa_r+0xb56>
 8007f3a:	ee18 1a10 	vmov	r1, s16
 8007f3e:	2300      	movs	r3, #0
 8007f40:	220a      	movs	r2, #10
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 f8c6 	bl	80080d4 <__multadd>
 8007f48:	ee08 0a10 	vmov	s16, r0
 8007f4c:	e7e7      	b.n	8007f1e <_dtoa_r+0xb26>
 8007f4e:	9b02      	ldr	r3, [sp, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bfc8      	it	gt
 8007f54:	461d      	movgt	r5, r3
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	bfd8      	it	le
 8007f5a:	2501      	movle	r5, #1
 8007f5c:	441d      	add	r5, r3
 8007f5e:	f04f 0800 	mov.w	r8, #0
 8007f62:	ee18 1a10 	vmov	r1, s16
 8007f66:	2201      	movs	r2, #1
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fa63 	bl	8008434 <__lshift>
 8007f6e:	4631      	mov	r1, r6
 8007f70:	ee08 0a10 	vmov	s16, r0
 8007f74:	f000 face 	bl	8008514 <__mcmp>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	dc91      	bgt.n	8007ea0 <_dtoa_r+0xaa8>
 8007f7c:	d102      	bne.n	8007f84 <_dtoa_r+0xb8c>
 8007f7e:	f01a 0f01 	tst.w	sl, #1
 8007f82:	d18d      	bne.n	8007ea0 <_dtoa_r+0xaa8>
 8007f84:	462b      	mov	r3, r5
 8007f86:	461d      	mov	r5, r3
 8007f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f8c:	2a30      	cmp	r2, #48	; 0x30
 8007f8e:	d0fa      	beq.n	8007f86 <_dtoa_r+0xb8e>
 8007f90:	e6d7      	b.n	8007d42 <_dtoa_r+0x94a>
 8007f92:	9a01      	ldr	r2, [sp, #4]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d184      	bne.n	8007ea2 <_dtoa_r+0xaaa>
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	2331      	movs	r3, #49	; 0x31
 8007fa0:	7013      	strb	r3, [r2, #0]
 8007fa2:	e6ce      	b.n	8007d42 <_dtoa_r+0x94a>
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <_dtoa_r+0xbd4>)
 8007fa6:	f7ff ba95 	b.w	80074d4 <_dtoa_r+0xdc>
 8007faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f47f aa6e 	bne.w	800748e <_dtoa_r+0x96>
 8007fb2:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <_dtoa_r+0xbd8>)
 8007fb4:	f7ff ba8e 	b.w	80074d4 <_dtoa_r+0xdc>
 8007fb8:	9b02      	ldr	r3, [sp, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dcae      	bgt.n	8007f1c <_dtoa_r+0xb24>
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	f73f aea8 	bgt.w	8007d16 <_dtoa_r+0x91e>
 8007fc6:	e7a9      	b.n	8007f1c <_dtoa_r+0xb24>
 8007fc8:	0800bf67 	.word	0x0800bf67
 8007fcc:	0800bec4 	.word	0x0800bec4
 8007fd0:	0800bee8 	.word	0x0800bee8

08007fd4 <_localeconv_r>:
 8007fd4:	4800      	ldr	r0, [pc, #0]	; (8007fd8 <_localeconv_r+0x4>)
 8007fd6:	4770      	bx	lr
 8007fd8:	20000178 	.word	0x20000178

08007fdc <memcpy>:
 8007fdc:	440a      	add	r2, r1
 8007fde:	4291      	cmp	r1, r2
 8007fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fe4:	d100      	bne.n	8007fe8 <memcpy+0xc>
 8007fe6:	4770      	bx	lr
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ff2:	4291      	cmp	r1, r2
 8007ff4:	d1f9      	bne.n	8007fea <memcpy+0xe>
 8007ff6:	bd10      	pop	{r4, pc}

08007ff8 <__malloc_lock>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__malloc_lock+0x8>)
 8007ffa:	f000 bd30 	b.w	8008a5e <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	200003f0 	.word	0x200003f0

08008004 <__malloc_unlock>:
 8008004:	4801      	ldr	r0, [pc, #4]	; (800800c <__malloc_unlock+0x8>)
 8008006:	f000 bd2b 	b.w	8008a60 <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	200003f0 	.word	0x200003f0

08008010 <_Balloc>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	b976      	cbnz	r6, 8008038 <_Balloc+0x28>
 800801a:	2010      	movs	r0, #16
 800801c:	f7fe fbcc 	bl	80067b8 <malloc>
 8008020:	4602      	mov	r2, r0
 8008022:	6260      	str	r0, [r4, #36]	; 0x24
 8008024:	b920      	cbnz	r0, 8008030 <_Balloc+0x20>
 8008026:	4b18      	ldr	r3, [pc, #96]	; (8008088 <_Balloc+0x78>)
 8008028:	4818      	ldr	r0, [pc, #96]	; (800808c <_Balloc+0x7c>)
 800802a:	2166      	movs	r1, #102	; 0x66
 800802c:	f000 fce6 	bl	80089fc <__assert_func>
 8008030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008034:	6006      	str	r6, [r0, #0]
 8008036:	60c6      	str	r6, [r0, #12]
 8008038:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800803a:	68f3      	ldr	r3, [r6, #12]
 800803c:	b183      	cbz	r3, 8008060 <_Balloc+0x50>
 800803e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008046:	b9b8      	cbnz	r0, 8008078 <_Balloc+0x68>
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f605 	lsl.w	r6, r1, r5
 800804e:	1d72      	adds	r2, r6, #5
 8008050:	0092      	lsls	r2, r2, #2
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fb60 	bl	8008718 <_calloc_r>
 8008058:	b160      	cbz	r0, 8008074 <_Balloc+0x64>
 800805a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800805e:	e00e      	b.n	800807e <_Balloc+0x6e>
 8008060:	2221      	movs	r2, #33	; 0x21
 8008062:	2104      	movs	r1, #4
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fb57 	bl	8008718 <_calloc_r>
 800806a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800806c:	60f0      	str	r0, [r6, #12]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e4      	bne.n	800803e <_Balloc+0x2e>
 8008074:	2000      	movs	r0, #0
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	6802      	ldr	r2, [r0, #0]
 800807a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800807e:	2300      	movs	r3, #0
 8008080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008084:	e7f7      	b.n	8008076 <_Balloc+0x66>
 8008086:	bf00      	nop
 8008088:	0800bef5 	.word	0x0800bef5
 800808c:	0800bf78 	.word	0x0800bf78

08008090 <_Bfree>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008094:	4605      	mov	r5, r0
 8008096:	460c      	mov	r4, r1
 8008098:	b976      	cbnz	r6, 80080b8 <_Bfree+0x28>
 800809a:	2010      	movs	r0, #16
 800809c:	f7fe fb8c 	bl	80067b8 <malloc>
 80080a0:	4602      	mov	r2, r0
 80080a2:	6268      	str	r0, [r5, #36]	; 0x24
 80080a4:	b920      	cbnz	r0, 80080b0 <_Bfree+0x20>
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <_Bfree+0x3c>)
 80080a8:	4809      	ldr	r0, [pc, #36]	; (80080d0 <_Bfree+0x40>)
 80080aa:	218a      	movs	r1, #138	; 0x8a
 80080ac:	f000 fca6 	bl	80089fc <__assert_func>
 80080b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b4:	6006      	str	r6, [r0, #0]
 80080b6:	60c6      	str	r6, [r0, #12]
 80080b8:	b13c      	cbz	r4, 80080ca <_Bfree+0x3a>
 80080ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080bc:	6862      	ldr	r2, [r4, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080c4:	6021      	str	r1, [r4, #0]
 80080c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	0800bef5 	.word	0x0800bef5
 80080d0:	0800bf78 	.word	0x0800bf78

080080d4 <__multadd>:
 80080d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d8:	690d      	ldr	r5, [r1, #16]
 80080da:	4607      	mov	r7, r0
 80080dc:	460c      	mov	r4, r1
 80080de:	461e      	mov	r6, r3
 80080e0:	f101 0c14 	add.w	ip, r1, #20
 80080e4:	2000      	movs	r0, #0
 80080e6:	f8dc 3000 	ldr.w	r3, [ip]
 80080ea:	b299      	uxth	r1, r3
 80080ec:	fb02 6101 	mla	r1, r2, r1, r6
 80080f0:	0c1e      	lsrs	r6, r3, #16
 80080f2:	0c0b      	lsrs	r3, r1, #16
 80080f4:	fb02 3306 	mla	r3, r2, r6, r3
 80080f8:	b289      	uxth	r1, r1
 80080fa:	3001      	adds	r0, #1
 80080fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008100:	4285      	cmp	r5, r0
 8008102:	f84c 1b04 	str.w	r1, [ip], #4
 8008106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800810a:	dcec      	bgt.n	80080e6 <__multadd+0x12>
 800810c:	b30e      	cbz	r6, 8008152 <__multadd+0x7e>
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	42ab      	cmp	r3, r5
 8008112:	dc19      	bgt.n	8008148 <__multadd+0x74>
 8008114:	6861      	ldr	r1, [r4, #4]
 8008116:	4638      	mov	r0, r7
 8008118:	3101      	adds	r1, #1
 800811a:	f7ff ff79 	bl	8008010 <_Balloc>
 800811e:	4680      	mov	r8, r0
 8008120:	b928      	cbnz	r0, 800812e <__multadd+0x5a>
 8008122:	4602      	mov	r2, r0
 8008124:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <__multadd+0x84>)
 8008126:	480d      	ldr	r0, [pc, #52]	; (800815c <__multadd+0x88>)
 8008128:	21b5      	movs	r1, #181	; 0xb5
 800812a:	f000 fc67 	bl	80089fc <__assert_func>
 800812e:	6922      	ldr	r2, [r4, #16]
 8008130:	3202      	adds	r2, #2
 8008132:	f104 010c 	add.w	r1, r4, #12
 8008136:	0092      	lsls	r2, r2, #2
 8008138:	300c      	adds	r0, #12
 800813a:	f7ff ff4f 	bl	8007fdc <memcpy>
 800813e:	4621      	mov	r1, r4
 8008140:	4638      	mov	r0, r7
 8008142:	f7ff ffa5 	bl	8008090 <_Bfree>
 8008146:	4644      	mov	r4, r8
 8008148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800814c:	3501      	adds	r5, #1
 800814e:	615e      	str	r6, [r3, #20]
 8008150:	6125      	str	r5, [r4, #16]
 8008152:	4620      	mov	r0, r4
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	0800bf67 	.word	0x0800bf67
 800815c:	0800bf78 	.word	0x0800bf78

08008160 <__hi0bits>:
 8008160:	0c03      	lsrs	r3, r0, #16
 8008162:	041b      	lsls	r3, r3, #16
 8008164:	b9d3      	cbnz	r3, 800819c <__hi0bits+0x3c>
 8008166:	0400      	lsls	r0, r0, #16
 8008168:	2310      	movs	r3, #16
 800816a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800816e:	bf04      	itt	eq
 8008170:	0200      	lsleq	r0, r0, #8
 8008172:	3308      	addeq	r3, #8
 8008174:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008178:	bf04      	itt	eq
 800817a:	0100      	lsleq	r0, r0, #4
 800817c:	3304      	addeq	r3, #4
 800817e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008182:	bf04      	itt	eq
 8008184:	0080      	lsleq	r0, r0, #2
 8008186:	3302      	addeq	r3, #2
 8008188:	2800      	cmp	r0, #0
 800818a:	db05      	blt.n	8008198 <__hi0bits+0x38>
 800818c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008190:	f103 0301 	add.w	r3, r3, #1
 8008194:	bf08      	it	eq
 8008196:	2320      	moveq	r3, #32
 8008198:	4618      	mov	r0, r3
 800819a:	4770      	bx	lr
 800819c:	2300      	movs	r3, #0
 800819e:	e7e4      	b.n	800816a <__hi0bits+0xa>

080081a0 <__lo0bits>:
 80081a0:	6803      	ldr	r3, [r0, #0]
 80081a2:	f013 0207 	ands.w	r2, r3, #7
 80081a6:	4601      	mov	r1, r0
 80081a8:	d00b      	beq.n	80081c2 <__lo0bits+0x22>
 80081aa:	07da      	lsls	r2, r3, #31
 80081ac:	d423      	bmi.n	80081f6 <__lo0bits+0x56>
 80081ae:	0798      	lsls	r0, r3, #30
 80081b0:	bf49      	itett	mi
 80081b2:	085b      	lsrmi	r3, r3, #1
 80081b4:	089b      	lsrpl	r3, r3, #2
 80081b6:	2001      	movmi	r0, #1
 80081b8:	600b      	strmi	r3, [r1, #0]
 80081ba:	bf5c      	itt	pl
 80081bc:	600b      	strpl	r3, [r1, #0]
 80081be:	2002      	movpl	r0, #2
 80081c0:	4770      	bx	lr
 80081c2:	b298      	uxth	r0, r3
 80081c4:	b9a8      	cbnz	r0, 80081f2 <__lo0bits+0x52>
 80081c6:	0c1b      	lsrs	r3, r3, #16
 80081c8:	2010      	movs	r0, #16
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	b90a      	cbnz	r2, 80081d2 <__lo0bits+0x32>
 80081ce:	3008      	adds	r0, #8
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	071a      	lsls	r2, r3, #28
 80081d4:	bf04      	itt	eq
 80081d6:	091b      	lsreq	r3, r3, #4
 80081d8:	3004      	addeq	r0, #4
 80081da:	079a      	lsls	r2, r3, #30
 80081dc:	bf04      	itt	eq
 80081de:	089b      	lsreq	r3, r3, #2
 80081e0:	3002      	addeq	r0, #2
 80081e2:	07da      	lsls	r2, r3, #31
 80081e4:	d403      	bmi.n	80081ee <__lo0bits+0x4e>
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	f100 0001 	add.w	r0, r0, #1
 80081ec:	d005      	beq.n	80081fa <__lo0bits+0x5a>
 80081ee:	600b      	str	r3, [r1, #0]
 80081f0:	4770      	bx	lr
 80081f2:	4610      	mov	r0, r2
 80081f4:	e7e9      	b.n	80081ca <__lo0bits+0x2a>
 80081f6:	2000      	movs	r0, #0
 80081f8:	4770      	bx	lr
 80081fa:	2020      	movs	r0, #32
 80081fc:	4770      	bx	lr
	...

08008200 <__i2b>:
 8008200:	b510      	push	{r4, lr}
 8008202:	460c      	mov	r4, r1
 8008204:	2101      	movs	r1, #1
 8008206:	f7ff ff03 	bl	8008010 <_Balloc>
 800820a:	4602      	mov	r2, r0
 800820c:	b928      	cbnz	r0, 800821a <__i2b+0x1a>
 800820e:	4b05      	ldr	r3, [pc, #20]	; (8008224 <__i2b+0x24>)
 8008210:	4805      	ldr	r0, [pc, #20]	; (8008228 <__i2b+0x28>)
 8008212:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008216:	f000 fbf1 	bl	80089fc <__assert_func>
 800821a:	2301      	movs	r3, #1
 800821c:	6144      	str	r4, [r0, #20]
 800821e:	6103      	str	r3, [r0, #16]
 8008220:	bd10      	pop	{r4, pc}
 8008222:	bf00      	nop
 8008224:	0800bf67 	.word	0x0800bf67
 8008228:	0800bf78 	.word	0x0800bf78

0800822c <__multiply>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	4691      	mov	r9, r2
 8008232:	690a      	ldr	r2, [r1, #16]
 8008234:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008238:	429a      	cmp	r2, r3
 800823a:	bfb8      	it	lt
 800823c:	460b      	movlt	r3, r1
 800823e:	460c      	mov	r4, r1
 8008240:	bfbc      	itt	lt
 8008242:	464c      	movlt	r4, r9
 8008244:	4699      	movlt	r9, r3
 8008246:	6927      	ldr	r7, [r4, #16]
 8008248:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800824c:	68a3      	ldr	r3, [r4, #8]
 800824e:	6861      	ldr	r1, [r4, #4]
 8008250:	eb07 060a 	add.w	r6, r7, sl
 8008254:	42b3      	cmp	r3, r6
 8008256:	b085      	sub	sp, #20
 8008258:	bfb8      	it	lt
 800825a:	3101      	addlt	r1, #1
 800825c:	f7ff fed8 	bl	8008010 <_Balloc>
 8008260:	b930      	cbnz	r0, 8008270 <__multiply+0x44>
 8008262:	4602      	mov	r2, r0
 8008264:	4b44      	ldr	r3, [pc, #272]	; (8008378 <__multiply+0x14c>)
 8008266:	4845      	ldr	r0, [pc, #276]	; (800837c <__multiply+0x150>)
 8008268:	f240 115d 	movw	r1, #349	; 0x15d
 800826c:	f000 fbc6 	bl	80089fc <__assert_func>
 8008270:	f100 0514 	add.w	r5, r0, #20
 8008274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008278:	462b      	mov	r3, r5
 800827a:	2200      	movs	r2, #0
 800827c:	4543      	cmp	r3, r8
 800827e:	d321      	bcc.n	80082c4 <__multiply+0x98>
 8008280:	f104 0314 	add.w	r3, r4, #20
 8008284:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008288:	f109 0314 	add.w	r3, r9, #20
 800828c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008290:	9202      	str	r2, [sp, #8]
 8008292:	1b3a      	subs	r2, r7, r4
 8008294:	3a15      	subs	r2, #21
 8008296:	f022 0203 	bic.w	r2, r2, #3
 800829a:	3204      	adds	r2, #4
 800829c:	f104 0115 	add.w	r1, r4, #21
 80082a0:	428f      	cmp	r7, r1
 80082a2:	bf38      	it	cc
 80082a4:	2204      	movcc	r2, #4
 80082a6:	9201      	str	r2, [sp, #4]
 80082a8:	9a02      	ldr	r2, [sp, #8]
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d80c      	bhi.n	80082ca <__multiply+0x9e>
 80082b0:	2e00      	cmp	r6, #0
 80082b2:	dd03      	ble.n	80082bc <__multiply+0x90>
 80082b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d05a      	beq.n	8008372 <__multiply+0x146>
 80082bc:	6106      	str	r6, [r0, #16]
 80082be:	b005      	add	sp, #20
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	f843 2b04 	str.w	r2, [r3], #4
 80082c8:	e7d8      	b.n	800827c <__multiply+0x50>
 80082ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80082ce:	f1ba 0f00 	cmp.w	sl, #0
 80082d2:	d024      	beq.n	800831e <__multiply+0xf2>
 80082d4:	f104 0e14 	add.w	lr, r4, #20
 80082d8:	46a9      	mov	r9, r5
 80082da:	f04f 0c00 	mov.w	ip, #0
 80082de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082e2:	f8d9 1000 	ldr.w	r1, [r9]
 80082e6:	fa1f fb82 	uxth.w	fp, r2
 80082ea:	b289      	uxth	r1, r1
 80082ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80082f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80082f4:	f8d9 2000 	ldr.w	r2, [r9]
 80082f8:	4461      	add	r1, ip
 80082fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008302:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008306:	b289      	uxth	r1, r1
 8008308:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800830c:	4577      	cmp	r7, lr
 800830e:	f849 1b04 	str.w	r1, [r9], #4
 8008312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008316:	d8e2      	bhi.n	80082de <__multiply+0xb2>
 8008318:	9a01      	ldr	r2, [sp, #4]
 800831a:	f845 c002 	str.w	ip, [r5, r2]
 800831e:	9a03      	ldr	r2, [sp, #12]
 8008320:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008324:	3304      	adds	r3, #4
 8008326:	f1b9 0f00 	cmp.w	r9, #0
 800832a:	d020      	beq.n	800836e <__multiply+0x142>
 800832c:	6829      	ldr	r1, [r5, #0]
 800832e:	f104 0c14 	add.w	ip, r4, #20
 8008332:	46ae      	mov	lr, r5
 8008334:	f04f 0a00 	mov.w	sl, #0
 8008338:	f8bc b000 	ldrh.w	fp, [ip]
 800833c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008340:	fb09 220b 	mla	r2, r9, fp, r2
 8008344:	4492      	add	sl, r2
 8008346:	b289      	uxth	r1, r1
 8008348:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800834c:	f84e 1b04 	str.w	r1, [lr], #4
 8008350:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008354:	f8be 1000 	ldrh.w	r1, [lr]
 8008358:	0c12      	lsrs	r2, r2, #16
 800835a:	fb09 1102 	mla	r1, r9, r2, r1
 800835e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008362:	4567      	cmp	r7, ip
 8008364:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008368:	d8e6      	bhi.n	8008338 <__multiply+0x10c>
 800836a:	9a01      	ldr	r2, [sp, #4]
 800836c:	50a9      	str	r1, [r5, r2]
 800836e:	3504      	adds	r5, #4
 8008370:	e79a      	b.n	80082a8 <__multiply+0x7c>
 8008372:	3e01      	subs	r6, #1
 8008374:	e79c      	b.n	80082b0 <__multiply+0x84>
 8008376:	bf00      	nop
 8008378:	0800bf67 	.word	0x0800bf67
 800837c:	0800bf78 	.word	0x0800bf78

08008380 <__pow5mult>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	4615      	mov	r5, r2
 8008386:	f012 0203 	ands.w	r2, r2, #3
 800838a:	4606      	mov	r6, r0
 800838c:	460f      	mov	r7, r1
 800838e:	d007      	beq.n	80083a0 <__pow5mult+0x20>
 8008390:	4c25      	ldr	r4, [pc, #148]	; (8008428 <__pow5mult+0xa8>)
 8008392:	3a01      	subs	r2, #1
 8008394:	2300      	movs	r3, #0
 8008396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800839a:	f7ff fe9b 	bl	80080d4 <__multadd>
 800839e:	4607      	mov	r7, r0
 80083a0:	10ad      	asrs	r5, r5, #2
 80083a2:	d03d      	beq.n	8008420 <__pow5mult+0xa0>
 80083a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083a6:	b97c      	cbnz	r4, 80083c8 <__pow5mult+0x48>
 80083a8:	2010      	movs	r0, #16
 80083aa:	f7fe fa05 	bl	80067b8 <malloc>
 80083ae:	4602      	mov	r2, r0
 80083b0:	6270      	str	r0, [r6, #36]	; 0x24
 80083b2:	b928      	cbnz	r0, 80083c0 <__pow5mult+0x40>
 80083b4:	4b1d      	ldr	r3, [pc, #116]	; (800842c <__pow5mult+0xac>)
 80083b6:	481e      	ldr	r0, [pc, #120]	; (8008430 <__pow5mult+0xb0>)
 80083b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083bc:	f000 fb1e 	bl	80089fc <__assert_func>
 80083c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c4:	6004      	str	r4, [r0, #0]
 80083c6:	60c4      	str	r4, [r0, #12]
 80083c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083d0:	b94c      	cbnz	r4, 80083e6 <__pow5mult+0x66>
 80083d2:	f240 2171 	movw	r1, #625	; 0x271
 80083d6:	4630      	mov	r0, r6
 80083d8:	f7ff ff12 	bl	8008200 <__i2b>
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c8 0008 	str.w	r0, [r8, #8]
 80083e2:	4604      	mov	r4, r0
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	07eb      	lsls	r3, r5, #31
 80083ec:	d50a      	bpl.n	8008404 <__pow5mult+0x84>
 80083ee:	4639      	mov	r1, r7
 80083f0:	4622      	mov	r2, r4
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ff1a 	bl	800822c <__multiply>
 80083f8:	4639      	mov	r1, r7
 80083fa:	4680      	mov	r8, r0
 80083fc:	4630      	mov	r0, r6
 80083fe:	f7ff fe47 	bl	8008090 <_Bfree>
 8008402:	4647      	mov	r7, r8
 8008404:	106d      	asrs	r5, r5, #1
 8008406:	d00b      	beq.n	8008420 <__pow5mult+0xa0>
 8008408:	6820      	ldr	r0, [r4, #0]
 800840a:	b938      	cbnz	r0, 800841c <__pow5mult+0x9c>
 800840c:	4622      	mov	r2, r4
 800840e:	4621      	mov	r1, r4
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff ff0b 	bl	800822c <__multiply>
 8008416:	6020      	str	r0, [r4, #0]
 8008418:	f8c0 9000 	str.w	r9, [r0]
 800841c:	4604      	mov	r4, r0
 800841e:	e7e4      	b.n	80083ea <__pow5mult+0x6a>
 8008420:	4638      	mov	r0, r7
 8008422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008426:	bf00      	nop
 8008428:	0800c0c8 	.word	0x0800c0c8
 800842c:	0800bef5 	.word	0x0800bef5
 8008430:	0800bf78 	.word	0x0800bf78

08008434 <__lshift>:
 8008434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	460c      	mov	r4, r1
 800843a:	6849      	ldr	r1, [r1, #4]
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008442:	68a3      	ldr	r3, [r4, #8]
 8008444:	4607      	mov	r7, r0
 8008446:	4691      	mov	r9, r2
 8008448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800844c:	f108 0601 	add.w	r6, r8, #1
 8008450:	42b3      	cmp	r3, r6
 8008452:	db0b      	blt.n	800846c <__lshift+0x38>
 8008454:	4638      	mov	r0, r7
 8008456:	f7ff fddb 	bl	8008010 <_Balloc>
 800845a:	4605      	mov	r5, r0
 800845c:	b948      	cbnz	r0, 8008472 <__lshift+0x3e>
 800845e:	4602      	mov	r2, r0
 8008460:	4b2a      	ldr	r3, [pc, #168]	; (800850c <__lshift+0xd8>)
 8008462:	482b      	ldr	r0, [pc, #172]	; (8008510 <__lshift+0xdc>)
 8008464:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008468:	f000 fac8 	bl	80089fc <__assert_func>
 800846c:	3101      	adds	r1, #1
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	e7ee      	b.n	8008450 <__lshift+0x1c>
 8008472:	2300      	movs	r3, #0
 8008474:	f100 0114 	add.w	r1, r0, #20
 8008478:	f100 0210 	add.w	r2, r0, #16
 800847c:	4618      	mov	r0, r3
 800847e:	4553      	cmp	r3, sl
 8008480:	db37      	blt.n	80084f2 <__lshift+0xbe>
 8008482:	6920      	ldr	r0, [r4, #16]
 8008484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008488:	f104 0314 	add.w	r3, r4, #20
 800848c:	f019 091f 	ands.w	r9, r9, #31
 8008490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008494:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008498:	d02f      	beq.n	80084fa <__lshift+0xc6>
 800849a:	f1c9 0e20 	rsb	lr, r9, #32
 800849e:	468a      	mov	sl, r1
 80084a0:	f04f 0c00 	mov.w	ip, #0
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	fa02 f209 	lsl.w	r2, r2, r9
 80084aa:	ea42 020c 	orr.w	r2, r2, ip
 80084ae:	f84a 2b04 	str.w	r2, [sl], #4
 80084b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b6:	4298      	cmp	r0, r3
 80084b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80084bc:	d8f2      	bhi.n	80084a4 <__lshift+0x70>
 80084be:	1b03      	subs	r3, r0, r4
 80084c0:	3b15      	subs	r3, #21
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	3304      	adds	r3, #4
 80084c8:	f104 0215 	add.w	r2, r4, #21
 80084cc:	4290      	cmp	r0, r2
 80084ce:	bf38      	it	cc
 80084d0:	2304      	movcc	r3, #4
 80084d2:	f841 c003 	str.w	ip, [r1, r3]
 80084d6:	f1bc 0f00 	cmp.w	ip, #0
 80084da:	d001      	beq.n	80084e0 <__lshift+0xac>
 80084dc:	f108 0602 	add.w	r6, r8, #2
 80084e0:	3e01      	subs	r6, #1
 80084e2:	4638      	mov	r0, r7
 80084e4:	612e      	str	r6, [r5, #16]
 80084e6:	4621      	mov	r1, r4
 80084e8:	f7ff fdd2 	bl	8008090 <_Bfree>
 80084ec:	4628      	mov	r0, r5
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084f6:	3301      	adds	r3, #1
 80084f8:	e7c1      	b.n	800847e <__lshift+0x4a>
 80084fa:	3904      	subs	r1, #4
 80084fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008500:	f841 2f04 	str.w	r2, [r1, #4]!
 8008504:	4298      	cmp	r0, r3
 8008506:	d8f9      	bhi.n	80084fc <__lshift+0xc8>
 8008508:	e7ea      	b.n	80084e0 <__lshift+0xac>
 800850a:	bf00      	nop
 800850c:	0800bf67 	.word	0x0800bf67
 8008510:	0800bf78 	.word	0x0800bf78

08008514 <__mcmp>:
 8008514:	b530      	push	{r4, r5, lr}
 8008516:	6902      	ldr	r2, [r0, #16]
 8008518:	690c      	ldr	r4, [r1, #16]
 800851a:	1b12      	subs	r2, r2, r4
 800851c:	d10e      	bne.n	800853c <__mcmp+0x28>
 800851e:	f100 0314 	add.w	r3, r0, #20
 8008522:	3114      	adds	r1, #20
 8008524:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008528:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800852c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008530:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008534:	42a5      	cmp	r5, r4
 8008536:	d003      	beq.n	8008540 <__mcmp+0x2c>
 8008538:	d305      	bcc.n	8008546 <__mcmp+0x32>
 800853a:	2201      	movs	r2, #1
 800853c:	4610      	mov	r0, r2
 800853e:	bd30      	pop	{r4, r5, pc}
 8008540:	4283      	cmp	r3, r0
 8008542:	d3f3      	bcc.n	800852c <__mcmp+0x18>
 8008544:	e7fa      	b.n	800853c <__mcmp+0x28>
 8008546:	f04f 32ff 	mov.w	r2, #4294967295
 800854a:	e7f7      	b.n	800853c <__mcmp+0x28>

0800854c <__mdiff>:
 800854c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	460c      	mov	r4, r1
 8008552:	4606      	mov	r6, r0
 8008554:	4611      	mov	r1, r2
 8008556:	4620      	mov	r0, r4
 8008558:	4690      	mov	r8, r2
 800855a:	f7ff ffdb 	bl	8008514 <__mcmp>
 800855e:	1e05      	subs	r5, r0, #0
 8008560:	d110      	bne.n	8008584 <__mdiff+0x38>
 8008562:	4629      	mov	r1, r5
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff fd53 	bl	8008010 <_Balloc>
 800856a:	b930      	cbnz	r0, 800857a <__mdiff+0x2e>
 800856c:	4b3a      	ldr	r3, [pc, #232]	; (8008658 <__mdiff+0x10c>)
 800856e:	4602      	mov	r2, r0
 8008570:	f240 2132 	movw	r1, #562	; 0x232
 8008574:	4839      	ldr	r0, [pc, #228]	; (800865c <__mdiff+0x110>)
 8008576:	f000 fa41 	bl	80089fc <__assert_func>
 800857a:	2301      	movs	r3, #1
 800857c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	bfa4      	itt	ge
 8008586:	4643      	movge	r3, r8
 8008588:	46a0      	movge	r8, r4
 800858a:	4630      	mov	r0, r6
 800858c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008590:	bfa6      	itte	ge
 8008592:	461c      	movge	r4, r3
 8008594:	2500      	movge	r5, #0
 8008596:	2501      	movlt	r5, #1
 8008598:	f7ff fd3a 	bl	8008010 <_Balloc>
 800859c:	b920      	cbnz	r0, 80085a8 <__mdiff+0x5c>
 800859e:	4b2e      	ldr	r3, [pc, #184]	; (8008658 <__mdiff+0x10c>)
 80085a0:	4602      	mov	r2, r0
 80085a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085a6:	e7e5      	b.n	8008574 <__mdiff+0x28>
 80085a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085ac:	6926      	ldr	r6, [r4, #16]
 80085ae:	60c5      	str	r5, [r0, #12]
 80085b0:	f104 0914 	add.w	r9, r4, #20
 80085b4:	f108 0514 	add.w	r5, r8, #20
 80085b8:	f100 0e14 	add.w	lr, r0, #20
 80085bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085c4:	f108 0210 	add.w	r2, r8, #16
 80085c8:	46f2      	mov	sl, lr
 80085ca:	2100      	movs	r1, #0
 80085cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80085d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085d4:	fa1f f883 	uxth.w	r8, r3
 80085d8:	fa11 f18b 	uxtah	r1, r1, fp
 80085dc:	0c1b      	lsrs	r3, r3, #16
 80085de:	eba1 0808 	sub.w	r8, r1, r8
 80085e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085ea:	fa1f f888 	uxth.w	r8, r8
 80085ee:	1419      	asrs	r1, r3, #16
 80085f0:	454e      	cmp	r6, r9
 80085f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085f6:	f84a 3b04 	str.w	r3, [sl], #4
 80085fa:	d8e7      	bhi.n	80085cc <__mdiff+0x80>
 80085fc:	1b33      	subs	r3, r6, r4
 80085fe:	3b15      	subs	r3, #21
 8008600:	f023 0303 	bic.w	r3, r3, #3
 8008604:	3304      	adds	r3, #4
 8008606:	3415      	adds	r4, #21
 8008608:	42a6      	cmp	r6, r4
 800860a:	bf38      	it	cc
 800860c:	2304      	movcc	r3, #4
 800860e:	441d      	add	r5, r3
 8008610:	4473      	add	r3, lr
 8008612:	469e      	mov	lr, r3
 8008614:	462e      	mov	r6, r5
 8008616:	4566      	cmp	r6, ip
 8008618:	d30e      	bcc.n	8008638 <__mdiff+0xec>
 800861a:	f10c 0203 	add.w	r2, ip, #3
 800861e:	1b52      	subs	r2, r2, r5
 8008620:	f022 0203 	bic.w	r2, r2, #3
 8008624:	3d03      	subs	r5, #3
 8008626:	45ac      	cmp	ip, r5
 8008628:	bf38      	it	cc
 800862a:	2200      	movcc	r2, #0
 800862c:	441a      	add	r2, r3
 800862e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008632:	b17b      	cbz	r3, 8008654 <__mdiff+0x108>
 8008634:	6107      	str	r7, [r0, #16]
 8008636:	e7a3      	b.n	8008580 <__mdiff+0x34>
 8008638:	f856 8b04 	ldr.w	r8, [r6], #4
 800863c:	fa11 f288 	uxtah	r2, r1, r8
 8008640:	1414      	asrs	r4, r2, #16
 8008642:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008646:	b292      	uxth	r2, r2
 8008648:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800864c:	f84e 2b04 	str.w	r2, [lr], #4
 8008650:	1421      	asrs	r1, r4, #16
 8008652:	e7e0      	b.n	8008616 <__mdiff+0xca>
 8008654:	3f01      	subs	r7, #1
 8008656:	e7ea      	b.n	800862e <__mdiff+0xe2>
 8008658:	0800bf67 	.word	0x0800bf67
 800865c:	0800bf78 	.word	0x0800bf78

08008660 <__d2b>:
 8008660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008664:	4689      	mov	r9, r1
 8008666:	2101      	movs	r1, #1
 8008668:	ec57 6b10 	vmov	r6, r7, d0
 800866c:	4690      	mov	r8, r2
 800866e:	f7ff fccf 	bl	8008010 <_Balloc>
 8008672:	4604      	mov	r4, r0
 8008674:	b930      	cbnz	r0, 8008684 <__d2b+0x24>
 8008676:	4602      	mov	r2, r0
 8008678:	4b25      	ldr	r3, [pc, #148]	; (8008710 <__d2b+0xb0>)
 800867a:	4826      	ldr	r0, [pc, #152]	; (8008714 <__d2b+0xb4>)
 800867c:	f240 310a 	movw	r1, #778	; 0x30a
 8008680:	f000 f9bc 	bl	80089fc <__assert_func>
 8008684:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800868c:	bb35      	cbnz	r5, 80086dc <__d2b+0x7c>
 800868e:	2e00      	cmp	r6, #0
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	d028      	beq.n	80086e6 <__d2b+0x86>
 8008694:	4668      	mov	r0, sp
 8008696:	9600      	str	r6, [sp, #0]
 8008698:	f7ff fd82 	bl	80081a0 <__lo0bits>
 800869c:	9900      	ldr	r1, [sp, #0]
 800869e:	b300      	cbz	r0, 80086e2 <__d2b+0x82>
 80086a0:	9a01      	ldr	r2, [sp, #4]
 80086a2:	f1c0 0320 	rsb	r3, r0, #32
 80086a6:	fa02 f303 	lsl.w	r3, r2, r3
 80086aa:	430b      	orrs	r3, r1
 80086ac:	40c2      	lsrs	r2, r0
 80086ae:	6163      	str	r3, [r4, #20]
 80086b0:	9201      	str	r2, [sp, #4]
 80086b2:	9b01      	ldr	r3, [sp, #4]
 80086b4:	61a3      	str	r3, [r4, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bf14      	ite	ne
 80086ba:	2202      	movne	r2, #2
 80086bc:	2201      	moveq	r2, #1
 80086be:	6122      	str	r2, [r4, #16]
 80086c0:	b1d5      	cbz	r5, 80086f8 <__d2b+0x98>
 80086c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086c6:	4405      	add	r5, r0
 80086c8:	f8c9 5000 	str.w	r5, [r9]
 80086cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086d0:	f8c8 0000 	str.w	r0, [r8]
 80086d4:	4620      	mov	r0, r4
 80086d6:	b003      	add	sp, #12
 80086d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086e0:	e7d5      	b.n	800868e <__d2b+0x2e>
 80086e2:	6161      	str	r1, [r4, #20]
 80086e4:	e7e5      	b.n	80086b2 <__d2b+0x52>
 80086e6:	a801      	add	r0, sp, #4
 80086e8:	f7ff fd5a 	bl	80081a0 <__lo0bits>
 80086ec:	9b01      	ldr	r3, [sp, #4]
 80086ee:	6163      	str	r3, [r4, #20]
 80086f0:	2201      	movs	r2, #1
 80086f2:	6122      	str	r2, [r4, #16]
 80086f4:	3020      	adds	r0, #32
 80086f6:	e7e3      	b.n	80086c0 <__d2b+0x60>
 80086f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008700:	f8c9 0000 	str.w	r0, [r9]
 8008704:	6918      	ldr	r0, [r3, #16]
 8008706:	f7ff fd2b 	bl	8008160 <__hi0bits>
 800870a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800870e:	e7df      	b.n	80086d0 <__d2b+0x70>
 8008710:	0800bf67 	.word	0x0800bf67
 8008714:	0800bf78 	.word	0x0800bf78

08008718 <_calloc_r>:
 8008718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800871a:	fba1 2402 	umull	r2, r4, r1, r2
 800871e:	b94c      	cbnz	r4, 8008734 <_calloc_r+0x1c>
 8008720:	4611      	mov	r1, r2
 8008722:	9201      	str	r2, [sp, #4]
 8008724:	f7fe f8cc 	bl	80068c0 <_malloc_r>
 8008728:	9a01      	ldr	r2, [sp, #4]
 800872a:	4605      	mov	r5, r0
 800872c:	b930      	cbnz	r0, 800873c <_calloc_r+0x24>
 800872e:	4628      	mov	r0, r5
 8008730:	b003      	add	sp, #12
 8008732:	bd30      	pop	{r4, r5, pc}
 8008734:	220c      	movs	r2, #12
 8008736:	6002      	str	r2, [r0, #0]
 8008738:	2500      	movs	r5, #0
 800873a:	e7f8      	b.n	800872e <_calloc_r+0x16>
 800873c:	4621      	mov	r1, r4
 800873e:	f7fe f84b 	bl	80067d8 <memset>
 8008742:	e7f4      	b.n	800872e <_calloc_r+0x16>

08008744 <__ssputs_r>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	688e      	ldr	r6, [r1, #8]
 800874a:	429e      	cmp	r6, r3
 800874c:	4682      	mov	sl, r0
 800874e:	460c      	mov	r4, r1
 8008750:	4690      	mov	r8, r2
 8008752:	461f      	mov	r7, r3
 8008754:	d838      	bhi.n	80087c8 <__ssputs_r+0x84>
 8008756:	898a      	ldrh	r2, [r1, #12]
 8008758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800875c:	d032      	beq.n	80087c4 <__ssputs_r+0x80>
 800875e:	6825      	ldr	r5, [r4, #0]
 8008760:	6909      	ldr	r1, [r1, #16]
 8008762:	eba5 0901 	sub.w	r9, r5, r1
 8008766:	6965      	ldr	r5, [r4, #20]
 8008768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800876c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008770:	3301      	adds	r3, #1
 8008772:	444b      	add	r3, r9
 8008774:	106d      	asrs	r5, r5, #1
 8008776:	429d      	cmp	r5, r3
 8008778:	bf38      	it	cc
 800877a:	461d      	movcc	r5, r3
 800877c:	0553      	lsls	r3, r2, #21
 800877e:	d531      	bpl.n	80087e4 <__ssputs_r+0xa0>
 8008780:	4629      	mov	r1, r5
 8008782:	f7fe f89d 	bl	80068c0 <_malloc_r>
 8008786:	4606      	mov	r6, r0
 8008788:	b950      	cbnz	r0, 80087a0 <__ssputs_r+0x5c>
 800878a:	230c      	movs	r3, #12
 800878c:	f8ca 3000 	str.w	r3, [sl]
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a0:	6921      	ldr	r1, [r4, #16]
 80087a2:	464a      	mov	r2, r9
 80087a4:	f7ff fc1a 	bl	8007fdc <memcpy>
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	6126      	str	r6, [r4, #16]
 80087b6:	6165      	str	r5, [r4, #20]
 80087b8:	444e      	add	r6, r9
 80087ba:	eba5 0509 	sub.w	r5, r5, r9
 80087be:	6026      	str	r6, [r4, #0]
 80087c0:	60a5      	str	r5, [r4, #8]
 80087c2:	463e      	mov	r6, r7
 80087c4:	42be      	cmp	r6, r7
 80087c6:	d900      	bls.n	80087ca <__ssputs_r+0x86>
 80087c8:	463e      	mov	r6, r7
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	4632      	mov	r2, r6
 80087ce:	4641      	mov	r1, r8
 80087d0:	f000 f959 	bl	8008a86 <memmove>
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	1b9b      	subs	r3, r3, r6
 80087d8:	60a3      	str	r3, [r4, #8]
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	4433      	add	r3, r6
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	2000      	movs	r0, #0
 80087e2:	e7db      	b.n	800879c <__ssputs_r+0x58>
 80087e4:	462a      	mov	r2, r5
 80087e6:	f000 f968 	bl	8008aba <_realloc_r>
 80087ea:	4606      	mov	r6, r0
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d1e1      	bne.n	80087b4 <__ssputs_r+0x70>
 80087f0:	6921      	ldr	r1, [r4, #16]
 80087f2:	4650      	mov	r0, sl
 80087f4:	f7fd fff8 	bl	80067e8 <_free_r>
 80087f8:	e7c7      	b.n	800878a <__ssputs_r+0x46>
	...

080087fc <_svfiprintf_r>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	4698      	mov	r8, r3
 8008802:	898b      	ldrh	r3, [r1, #12]
 8008804:	061b      	lsls	r3, r3, #24
 8008806:	b09d      	sub	sp, #116	; 0x74
 8008808:	4607      	mov	r7, r0
 800880a:	460d      	mov	r5, r1
 800880c:	4614      	mov	r4, r2
 800880e:	d50e      	bpl.n	800882e <_svfiprintf_r+0x32>
 8008810:	690b      	ldr	r3, [r1, #16]
 8008812:	b963      	cbnz	r3, 800882e <_svfiprintf_r+0x32>
 8008814:	2140      	movs	r1, #64	; 0x40
 8008816:	f7fe f853 	bl	80068c0 <_malloc_r>
 800881a:	6028      	str	r0, [r5, #0]
 800881c:	6128      	str	r0, [r5, #16]
 800881e:	b920      	cbnz	r0, 800882a <_svfiprintf_r+0x2e>
 8008820:	230c      	movs	r3, #12
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	e0d1      	b.n	80089ce <_svfiprintf_r+0x1d2>
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	616b      	str	r3, [r5, #20]
 800882e:	2300      	movs	r3, #0
 8008830:	9309      	str	r3, [sp, #36]	; 0x24
 8008832:	2320      	movs	r3, #32
 8008834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008838:	f8cd 800c 	str.w	r8, [sp, #12]
 800883c:	2330      	movs	r3, #48	; 0x30
 800883e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089e8 <_svfiprintf_r+0x1ec>
 8008842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008846:	f04f 0901 	mov.w	r9, #1
 800884a:	4623      	mov	r3, r4
 800884c:	469a      	mov	sl, r3
 800884e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008852:	b10a      	cbz	r2, 8008858 <_svfiprintf_r+0x5c>
 8008854:	2a25      	cmp	r2, #37	; 0x25
 8008856:	d1f9      	bne.n	800884c <_svfiprintf_r+0x50>
 8008858:	ebba 0b04 	subs.w	fp, sl, r4
 800885c:	d00b      	beq.n	8008876 <_svfiprintf_r+0x7a>
 800885e:	465b      	mov	r3, fp
 8008860:	4622      	mov	r2, r4
 8008862:	4629      	mov	r1, r5
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff ff6d 	bl	8008744 <__ssputs_r>
 800886a:	3001      	adds	r0, #1
 800886c:	f000 80aa 	beq.w	80089c4 <_svfiprintf_r+0x1c8>
 8008870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008872:	445a      	add	r2, fp
 8008874:	9209      	str	r2, [sp, #36]	; 0x24
 8008876:	f89a 3000 	ldrb.w	r3, [sl]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80a2 	beq.w	80089c4 <_svfiprintf_r+0x1c8>
 8008880:	2300      	movs	r3, #0
 8008882:	f04f 32ff 	mov.w	r2, #4294967295
 8008886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888a:	f10a 0a01 	add.w	sl, sl, #1
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008896:	931a      	str	r3, [sp, #104]	; 0x68
 8008898:	4654      	mov	r4, sl
 800889a:	2205      	movs	r2, #5
 800889c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a0:	4851      	ldr	r0, [pc, #324]	; (80089e8 <_svfiprintf_r+0x1ec>)
 80088a2:	f7f7 fca5 	bl	80001f0 <memchr>
 80088a6:	9a04      	ldr	r2, [sp, #16]
 80088a8:	b9d8      	cbnz	r0, 80088e2 <_svfiprintf_r+0xe6>
 80088aa:	06d0      	lsls	r0, r2, #27
 80088ac:	bf44      	itt	mi
 80088ae:	2320      	movmi	r3, #32
 80088b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b4:	0711      	lsls	r1, r2, #28
 80088b6:	bf44      	itt	mi
 80088b8:	232b      	movmi	r3, #43	; 0x2b
 80088ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088be:	f89a 3000 	ldrb.w	r3, [sl]
 80088c2:	2b2a      	cmp	r3, #42	; 0x2a
 80088c4:	d015      	beq.n	80088f2 <_svfiprintf_r+0xf6>
 80088c6:	9a07      	ldr	r2, [sp, #28]
 80088c8:	4654      	mov	r4, sl
 80088ca:	2000      	movs	r0, #0
 80088cc:	f04f 0c0a 	mov.w	ip, #10
 80088d0:	4621      	mov	r1, r4
 80088d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d6:	3b30      	subs	r3, #48	; 0x30
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d94e      	bls.n	800897a <_svfiprintf_r+0x17e>
 80088dc:	b1b0      	cbz	r0, 800890c <_svfiprintf_r+0x110>
 80088de:	9207      	str	r2, [sp, #28]
 80088e0:	e014      	b.n	800890c <_svfiprintf_r+0x110>
 80088e2:	eba0 0308 	sub.w	r3, r0, r8
 80088e6:	fa09 f303 	lsl.w	r3, r9, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	46a2      	mov	sl, r4
 80088f0:	e7d2      	b.n	8008898 <_svfiprintf_r+0x9c>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	1d19      	adds	r1, r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	9103      	str	r1, [sp, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bfbb      	ittet	lt
 80088fe:	425b      	neglt	r3, r3
 8008900:	f042 0202 	orrlt.w	r2, r2, #2
 8008904:	9307      	strge	r3, [sp, #28]
 8008906:	9307      	strlt	r3, [sp, #28]
 8008908:	bfb8      	it	lt
 800890a:	9204      	strlt	r2, [sp, #16]
 800890c:	7823      	ldrb	r3, [r4, #0]
 800890e:	2b2e      	cmp	r3, #46	; 0x2e
 8008910:	d10c      	bne.n	800892c <_svfiprintf_r+0x130>
 8008912:	7863      	ldrb	r3, [r4, #1]
 8008914:	2b2a      	cmp	r3, #42	; 0x2a
 8008916:	d135      	bne.n	8008984 <_svfiprintf_r+0x188>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	9203      	str	r2, [sp, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfb8      	it	lt
 8008924:	f04f 33ff 	movlt.w	r3, #4294967295
 8008928:	3402      	adds	r4, #2
 800892a:	9305      	str	r3, [sp, #20]
 800892c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089f8 <_svfiprintf_r+0x1fc>
 8008930:	7821      	ldrb	r1, [r4, #0]
 8008932:	2203      	movs	r2, #3
 8008934:	4650      	mov	r0, sl
 8008936:	f7f7 fc5b 	bl	80001f0 <memchr>
 800893a:	b140      	cbz	r0, 800894e <_svfiprintf_r+0x152>
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	eba0 000a 	sub.w	r0, r0, sl
 8008942:	fa03 f000 	lsl.w	r0, r3, r0
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	4303      	orrs	r3, r0
 800894a:	3401      	adds	r4, #1
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008952:	4826      	ldr	r0, [pc, #152]	; (80089ec <_svfiprintf_r+0x1f0>)
 8008954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008958:	2206      	movs	r2, #6
 800895a:	f7f7 fc49 	bl	80001f0 <memchr>
 800895e:	2800      	cmp	r0, #0
 8008960:	d038      	beq.n	80089d4 <_svfiprintf_r+0x1d8>
 8008962:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <_svfiprintf_r+0x1f4>)
 8008964:	bb1b      	cbnz	r3, 80089ae <_svfiprintf_r+0x1b2>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	3307      	adds	r3, #7
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	3308      	adds	r3, #8
 8008970:	9303      	str	r3, [sp, #12]
 8008972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008974:	4433      	add	r3, r6
 8008976:	9309      	str	r3, [sp, #36]	; 0x24
 8008978:	e767      	b.n	800884a <_svfiprintf_r+0x4e>
 800897a:	fb0c 3202 	mla	r2, ip, r2, r3
 800897e:	460c      	mov	r4, r1
 8008980:	2001      	movs	r0, #1
 8008982:	e7a5      	b.n	80088d0 <_svfiprintf_r+0xd4>
 8008984:	2300      	movs	r3, #0
 8008986:	3401      	adds	r4, #1
 8008988:	9305      	str	r3, [sp, #20]
 800898a:	4619      	mov	r1, r3
 800898c:	f04f 0c0a 	mov.w	ip, #10
 8008990:	4620      	mov	r0, r4
 8008992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008996:	3a30      	subs	r2, #48	; 0x30
 8008998:	2a09      	cmp	r2, #9
 800899a:	d903      	bls.n	80089a4 <_svfiprintf_r+0x1a8>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0c5      	beq.n	800892c <_svfiprintf_r+0x130>
 80089a0:	9105      	str	r1, [sp, #20]
 80089a2:	e7c3      	b.n	800892c <_svfiprintf_r+0x130>
 80089a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a8:	4604      	mov	r4, r0
 80089aa:	2301      	movs	r3, #1
 80089ac:	e7f0      	b.n	8008990 <_svfiprintf_r+0x194>
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4b0f      	ldr	r3, [pc, #60]	; (80089f4 <_svfiprintf_r+0x1f8>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7fe f895 	bl	8006ae8 <_printf_float>
 80089be:	1c42      	adds	r2, r0, #1
 80089c0:	4606      	mov	r6, r0
 80089c2:	d1d6      	bne.n	8008972 <_svfiprintf_r+0x176>
 80089c4:	89ab      	ldrh	r3, [r5, #12]
 80089c6:	065b      	lsls	r3, r3, #25
 80089c8:	f53f af2c 	bmi.w	8008824 <_svfiprintf_r+0x28>
 80089cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ce:	b01d      	add	sp, #116	; 0x74
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	462a      	mov	r2, r5
 80089da:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <_svfiprintf_r+0x1f8>)
 80089dc:	a904      	add	r1, sp, #16
 80089de:	4638      	mov	r0, r7
 80089e0:	f7fe fb26 	bl	8007030 <_printf_i>
 80089e4:	e7eb      	b.n	80089be <_svfiprintf_r+0x1c2>
 80089e6:	bf00      	nop
 80089e8:	0800c0d4 	.word	0x0800c0d4
 80089ec:	0800c0de 	.word	0x0800c0de
 80089f0:	08006ae9 	.word	0x08006ae9
 80089f4:	08008745 	.word	0x08008745
 80089f8:	0800c0da 	.word	0x0800c0da

080089fc <__assert_func>:
 80089fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089fe:	4614      	mov	r4, r2
 8008a00:	461a      	mov	r2, r3
 8008a02:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <__assert_func+0x2c>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4605      	mov	r5, r0
 8008a08:	68d8      	ldr	r0, [r3, #12]
 8008a0a:	b14c      	cbz	r4, 8008a20 <__assert_func+0x24>
 8008a0c:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <__assert_func+0x30>)
 8008a0e:	9100      	str	r1, [sp, #0]
 8008a10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a14:	4906      	ldr	r1, [pc, #24]	; (8008a30 <__assert_func+0x34>)
 8008a16:	462b      	mov	r3, r5
 8008a18:	f000 f80e 	bl	8008a38 <fiprintf>
 8008a1c:	f000 faa4 	bl	8008f68 <abort>
 8008a20:	4b04      	ldr	r3, [pc, #16]	; (8008a34 <__assert_func+0x38>)
 8008a22:	461c      	mov	r4, r3
 8008a24:	e7f3      	b.n	8008a0e <__assert_func+0x12>
 8008a26:	bf00      	nop
 8008a28:	20000024 	.word	0x20000024
 8008a2c:	0800c0e5 	.word	0x0800c0e5
 8008a30:	0800c0f2 	.word	0x0800c0f2
 8008a34:	0800c120 	.word	0x0800c120

08008a38 <fiprintf>:
 8008a38:	b40e      	push	{r1, r2, r3}
 8008a3a:	b503      	push	{r0, r1, lr}
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	ab03      	add	r3, sp, #12
 8008a40:	4805      	ldr	r0, [pc, #20]	; (8008a58 <fiprintf+0x20>)
 8008a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a46:	6800      	ldr	r0, [r0, #0]
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	f000 f88f 	bl	8008b6c <_vfiprintf_r>
 8008a4e:	b002      	add	sp, #8
 8008a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a54:	b003      	add	sp, #12
 8008a56:	4770      	bx	lr
 8008a58:	20000024 	.word	0x20000024

08008a5c <__retarget_lock_init_recursive>:
 8008a5c:	4770      	bx	lr

08008a5e <__retarget_lock_acquire_recursive>:
 8008a5e:	4770      	bx	lr

08008a60 <__retarget_lock_release_recursive>:
 8008a60:	4770      	bx	lr

08008a62 <__ascii_mbtowc>:
 8008a62:	b082      	sub	sp, #8
 8008a64:	b901      	cbnz	r1, 8008a68 <__ascii_mbtowc+0x6>
 8008a66:	a901      	add	r1, sp, #4
 8008a68:	b142      	cbz	r2, 8008a7c <__ascii_mbtowc+0x1a>
 8008a6a:	b14b      	cbz	r3, 8008a80 <__ascii_mbtowc+0x1e>
 8008a6c:	7813      	ldrb	r3, [r2, #0]
 8008a6e:	600b      	str	r3, [r1, #0]
 8008a70:	7812      	ldrb	r2, [r2, #0]
 8008a72:	1e10      	subs	r0, r2, #0
 8008a74:	bf18      	it	ne
 8008a76:	2001      	movne	r0, #1
 8008a78:	b002      	add	sp, #8
 8008a7a:	4770      	bx	lr
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	e7fb      	b.n	8008a78 <__ascii_mbtowc+0x16>
 8008a80:	f06f 0001 	mvn.w	r0, #1
 8008a84:	e7f8      	b.n	8008a78 <__ascii_mbtowc+0x16>

08008a86 <memmove>:
 8008a86:	4288      	cmp	r0, r1
 8008a88:	b510      	push	{r4, lr}
 8008a8a:	eb01 0402 	add.w	r4, r1, r2
 8008a8e:	d902      	bls.n	8008a96 <memmove+0x10>
 8008a90:	4284      	cmp	r4, r0
 8008a92:	4623      	mov	r3, r4
 8008a94:	d807      	bhi.n	8008aa6 <memmove+0x20>
 8008a96:	1e43      	subs	r3, r0, #1
 8008a98:	42a1      	cmp	r1, r4
 8008a9a:	d008      	beq.n	8008aae <memmove+0x28>
 8008a9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aa4:	e7f8      	b.n	8008a98 <memmove+0x12>
 8008aa6:	4402      	add	r2, r0
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	428a      	cmp	r2, r1
 8008aac:	d100      	bne.n	8008ab0 <memmove+0x2a>
 8008aae:	bd10      	pop	{r4, pc}
 8008ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ab4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ab8:	e7f7      	b.n	8008aaa <memmove+0x24>

08008aba <_realloc_r>:
 8008aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abe:	4680      	mov	r8, r0
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	460e      	mov	r6, r1
 8008ac4:	b921      	cbnz	r1, 8008ad0 <_realloc_r+0x16>
 8008ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aca:	4611      	mov	r1, r2
 8008acc:	f7fd bef8 	b.w	80068c0 <_malloc_r>
 8008ad0:	b92a      	cbnz	r2, 8008ade <_realloc_r+0x24>
 8008ad2:	f7fd fe89 	bl	80067e8 <_free_r>
 8008ad6:	4625      	mov	r5, r4
 8008ad8:	4628      	mov	r0, r5
 8008ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ade:	f000 fc67 	bl	80093b0 <_malloc_usable_size_r>
 8008ae2:	4284      	cmp	r4, r0
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	d802      	bhi.n	8008aee <_realloc_r+0x34>
 8008ae8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aec:	d812      	bhi.n	8008b14 <_realloc_r+0x5a>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4640      	mov	r0, r8
 8008af2:	f7fd fee5 	bl	80068c0 <_malloc_r>
 8008af6:	4605      	mov	r5, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0ed      	beq.n	8008ad8 <_realloc_r+0x1e>
 8008afc:	42bc      	cmp	r4, r7
 8008afe:	4622      	mov	r2, r4
 8008b00:	4631      	mov	r1, r6
 8008b02:	bf28      	it	cs
 8008b04:	463a      	movcs	r2, r7
 8008b06:	f7ff fa69 	bl	8007fdc <memcpy>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	f7fd fe6b 	bl	80067e8 <_free_r>
 8008b12:	e7e1      	b.n	8008ad8 <_realloc_r+0x1e>
 8008b14:	4635      	mov	r5, r6
 8008b16:	e7df      	b.n	8008ad8 <_realloc_r+0x1e>

08008b18 <__sfputc_r>:
 8008b18:	6893      	ldr	r3, [r2, #8]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	b410      	push	{r4}
 8008b20:	6093      	str	r3, [r2, #8]
 8008b22:	da08      	bge.n	8008b36 <__sfputc_r+0x1e>
 8008b24:	6994      	ldr	r4, [r2, #24]
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	db01      	blt.n	8008b2e <__sfputc_r+0x16>
 8008b2a:	290a      	cmp	r1, #10
 8008b2c:	d103      	bne.n	8008b36 <__sfputc_r+0x1e>
 8008b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b32:	f000 b94b 	b.w	8008dcc <__swbuf_r>
 8008b36:	6813      	ldr	r3, [r2, #0]
 8008b38:	1c58      	adds	r0, r3, #1
 8008b3a:	6010      	str	r0, [r2, #0]
 8008b3c:	7019      	strb	r1, [r3, #0]
 8008b3e:	4608      	mov	r0, r1
 8008b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <__sfputs_r>:
 8008b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b48:	4606      	mov	r6, r0
 8008b4a:	460f      	mov	r7, r1
 8008b4c:	4614      	mov	r4, r2
 8008b4e:	18d5      	adds	r5, r2, r3
 8008b50:	42ac      	cmp	r4, r5
 8008b52:	d101      	bne.n	8008b58 <__sfputs_r+0x12>
 8008b54:	2000      	movs	r0, #0
 8008b56:	e007      	b.n	8008b68 <__sfputs_r+0x22>
 8008b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b5c:	463a      	mov	r2, r7
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff ffda 	bl	8008b18 <__sfputc_r>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d1f3      	bne.n	8008b50 <__sfputs_r+0xa>
 8008b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b6c <_vfiprintf_r>:
 8008b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b70:	460d      	mov	r5, r1
 8008b72:	b09d      	sub	sp, #116	; 0x74
 8008b74:	4614      	mov	r4, r2
 8008b76:	4698      	mov	r8, r3
 8008b78:	4606      	mov	r6, r0
 8008b7a:	b118      	cbz	r0, 8008b84 <_vfiprintf_r+0x18>
 8008b7c:	6983      	ldr	r3, [r0, #24]
 8008b7e:	b90b      	cbnz	r3, 8008b84 <_vfiprintf_r+0x18>
 8008b80:	f000 fb14 	bl	80091ac <__sinit>
 8008b84:	4b89      	ldr	r3, [pc, #548]	; (8008dac <_vfiprintf_r+0x240>)
 8008b86:	429d      	cmp	r5, r3
 8008b88:	d11b      	bne.n	8008bc2 <_vfiprintf_r+0x56>
 8008b8a:	6875      	ldr	r5, [r6, #4]
 8008b8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8e:	07d9      	lsls	r1, r3, #31
 8008b90:	d405      	bmi.n	8008b9e <_vfiprintf_r+0x32>
 8008b92:	89ab      	ldrh	r3, [r5, #12]
 8008b94:	059a      	lsls	r2, r3, #22
 8008b96:	d402      	bmi.n	8008b9e <_vfiprintf_r+0x32>
 8008b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b9a:	f7ff ff60 	bl	8008a5e <__retarget_lock_acquire_recursive>
 8008b9e:	89ab      	ldrh	r3, [r5, #12]
 8008ba0:	071b      	lsls	r3, r3, #28
 8008ba2:	d501      	bpl.n	8008ba8 <_vfiprintf_r+0x3c>
 8008ba4:	692b      	ldr	r3, [r5, #16]
 8008ba6:	b9eb      	cbnz	r3, 8008be4 <_vfiprintf_r+0x78>
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4630      	mov	r0, r6
 8008bac:	f000 f96e 	bl	8008e8c <__swsetup_r>
 8008bb0:	b1c0      	cbz	r0, 8008be4 <_vfiprintf_r+0x78>
 8008bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bb4:	07dc      	lsls	r4, r3, #31
 8008bb6:	d50e      	bpl.n	8008bd6 <_vfiprintf_r+0x6a>
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	b01d      	add	sp, #116	; 0x74
 8008bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc2:	4b7b      	ldr	r3, [pc, #492]	; (8008db0 <_vfiprintf_r+0x244>)
 8008bc4:	429d      	cmp	r5, r3
 8008bc6:	d101      	bne.n	8008bcc <_vfiprintf_r+0x60>
 8008bc8:	68b5      	ldr	r5, [r6, #8]
 8008bca:	e7df      	b.n	8008b8c <_vfiprintf_r+0x20>
 8008bcc:	4b79      	ldr	r3, [pc, #484]	; (8008db4 <_vfiprintf_r+0x248>)
 8008bce:	429d      	cmp	r5, r3
 8008bd0:	bf08      	it	eq
 8008bd2:	68f5      	ldreq	r5, [r6, #12]
 8008bd4:	e7da      	b.n	8008b8c <_vfiprintf_r+0x20>
 8008bd6:	89ab      	ldrh	r3, [r5, #12]
 8008bd8:	0598      	lsls	r0, r3, #22
 8008bda:	d4ed      	bmi.n	8008bb8 <_vfiprintf_r+0x4c>
 8008bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bde:	f7ff ff3f 	bl	8008a60 <__retarget_lock_release_recursive>
 8008be2:	e7e9      	b.n	8008bb8 <_vfiprintf_r+0x4c>
 8008be4:	2300      	movs	r3, #0
 8008be6:	9309      	str	r3, [sp, #36]	; 0x24
 8008be8:	2320      	movs	r3, #32
 8008bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf2:	2330      	movs	r3, #48	; 0x30
 8008bf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008db8 <_vfiprintf_r+0x24c>
 8008bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bfc:	f04f 0901 	mov.w	r9, #1
 8008c00:	4623      	mov	r3, r4
 8008c02:	469a      	mov	sl, r3
 8008c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c08:	b10a      	cbz	r2, 8008c0e <_vfiprintf_r+0xa2>
 8008c0a:	2a25      	cmp	r2, #37	; 0x25
 8008c0c:	d1f9      	bne.n	8008c02 <_vfiprintf_r+0x96>
 8008c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8008c12:	d00b      	beq.n	8008c2c <_vfiprintf_r+0xc0>
 8008c14:	465b      	mov	r3, fp
 8008c16:	4622      	mov	r2, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7ff ff93 	bl	8008b46 <__sfputs_r>
 8008c20:	3001      	adds	r0, #1
 8008c22:	f000 80aa 	beq.w	8008d7a <_vfiprintf_r+0x20e>
 8008c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c28:	445a      	add	r2, fp
 8008c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 80a2 	beq.w	8008d7a <_vfiprintf_r+0x20e>
 8008c36:	2300      	movs	r3, #0
 8008c38:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c40:	f10a 0a01 	add.w	sl, sl, #1
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	9307      	str	r3, [sp, #28]
 8008c48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c4c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c4e:	4654      	mov	r4, sl
 8008c50:	2205      	movs	r2, #5
 8008c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c56:	4858      	ldr	r0, [pc, #352]	; (8008db8 <_vfiprintf_r+0x24c>)
 8008c58:	f7f7 faca 	bl	80001f0 <memchr>
 8008c5c:	9a04      	ldr	r2, [sp, #16]
 8008c5e:	b9d8      	cbnz	r0, 8008c98 <_vfiprintf_r+0x12c>
 8008c60:	06d1      	lsls	r1, r2, #27
 8008c62:	bf44      	itt	mi
 8008c64:	2320      	movmi	r3, #32
 8008c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c6a:	0713      	lsls	r3, r2, #28
 8008c6c:	bf44      	itt	mi
 8008c6e:	232b      	movmi	r3, #43	; 0x2b
 8008c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c74:	f89a 3000 	ldrb.w	r3, [sl]
 8008c78:	2b2a      	cmp	r3, #42	; 0x2a
 8008c7a:	d015      	beq.n	8008ca8 <_vfiprintf_r+0x13c>
 8008c7c:	9a07      	ldr	r2, [sp, #28]
 8008c7e:	4654      	mov	r4, sl
 8008c80:	2000      	movs	r0, #0
 8008c82:	f04f 0c0a 	mov.w	ip, #10
 8008c86:	4621      	mov	r1, r4
 8008c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c8c:	3b30      	subs	r3, #48	; 0x30
 8008c8e:	2b09      	cmp	r3, #9
 8008c90:	d94e      	bls.n	8008d30 <_vfiprintf_r+0x1c4>
 8008c92:	b1b0      	cbz	r0, 8008cc2 <_vfiprintf_r+0x156>
 8008c94:	9207      	str	r2, [sp, #28]
 8008c96:	e014      	b.n	8008cc2 <_vfiprintf_r+0x156>
 8008c98:	eba0 0308 	sub.w	r3, r0, r8
 8008c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	9304      	str	r3, [sp, #16]
 8008ca4:	46a2      	mov	sl, r4
 8008ca6:	e7d2      	b.n	8008c4e <_vfiprintf_r+0xe2>
 8008ca8:	9b03      	ldr	r3, [sp, #12]
 8008caa:	1d19      	adds	r1, r3, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	9103      	str	r1, [sp, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	bfbb      	ittet	lt
 8008cb4:	425b      	neglt	r3, r3
 8008cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8008cba:	9307      	strge	r3, [sp, #28]
 8008cbc:	9307      	strlt	r3, [sp, #28]
 8008cbe:	bfb8      	it	lt
 8008cc0:	9204      	strlt	r2, [sp, #16]
 8008cc2:	7823      	ldrb	r3, [r4, #0]
 8008cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8008cc6:	d10c      	bne.n	8008ce2 <_vfiprintf_r+0x176>
 8008cc8:	7863      	ldrb	r3, [r4, #1]
 8008cca:	2b2a      	cmp	r3, #42	; 0x2a
 8008ccc:	d135      	bne.n	8008d3a <_vfiprintf_r+0x1ce>
 8008cce:	9b03      	ldr	r3, [sp, #12]
 8008cd0:	1d1a      	adds	r2, r3, #4
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	9203      	str	r2, [sp, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	bfb8      	it	lt
 8008cda:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cde:	3402      	adds	r4, #2
 8008ce0:	9305      	str	r3, [sp, #20]
 8008ce2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008dc8 <_vfiprintf_r+0x25c>
 8008ce6:	7821      	ldrb	r1, [r4, #0]
 8008ce8:	2203      	movs	r2, #3
 8008cea:	4650      	mov	r0, sl
 8008cec:	f7f7 fa80 	bl	80001f0 <memchr>
 8008cf0:	b140      	cbz	r0, 8008d04 <_vfiprintf_r+0x198>
 8008cf2:	2340      	movs	r3, #64	; 0x40
 8008cf4:	eba0 000a 	sub.w	r0, r0, sl
 8008cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8008cfc:	9b04      	ldr	r3, [sp, #16]
 8008cfe:	4303      	orrs	r3, r0
 8008d00:	3401      	adds	r4, #1
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d08:	482c      	ldr	r0, [pc, #176]	; (8008dbc <_vfiprintf_r+0x250>)
 8008d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d0e:	2206      	movs	r2, #6
 8008d10:	f7f7 fa6e 	bl	80001f0 <memchr>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d03f      	beq.n	8008d98 <_vfiprintf_r+0x22c>
 8008d18:	4b29      	ldr	r3, [pc, #164]	; (8008dc0 <_vfiprintf_r+0x254>)
 8008d1a:	bb1b      	cbnz	r3, 8008d64 <_vfiprintf_r+0x1f8>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	3307      	adds	r3, #7
 8008d20:	f023 0307 	bic.w	r3, r3, #7
 8008d24:	3308      	adds	r3, #8
 8008d26:	9303      	str	r3, [sp, #12]
 8008d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2a:	443b      	add	r3, r7
 8008d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2e:	e767      	b.n	8008c00 <_vfiprintf_r+0x94>
 8008d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d34:	460c      	mov	r4, r1
 8008d36:	2001      	movs	r0, #1
 8008d38:	e7a5      	b.n	8008c86 <_vfiprintf_r+0x11a>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	3401      	adds	r4, #1
 8008d3e:	9305      	str	r3, [sp, #20]
 8008d40:	4619      	mov	r1, r3
 8008d42:	f04f 0c0a 	mov.w	ip, #10
 8008d46:	4620      	mov	r0, r4
 8008d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d4c:	3a30      	subs	r2, #48	; 0x30
 8008d4e:	2a09      	cmp	r2, #9
 8008d50:	d903      	bls.n	8008d5a <_vfiprintf_r+0x1ee>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0c5      	beq.n	8008ce2 <_vfiprintf_r+0x176>
 8008d56:	9105      	str	r1, [sp, #20]
 8008d58:	e7c3      	b.n	8008ce2 <_vfiprintf_r+0x176>
 8008d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d5e:	4604      	mov	r4, r0
 8008d60:	2301      	movs	r3, #1
 8008d62:	e7f0      	b.n	8008d46 <_vfiprintf_r+0x1da>
 8008d64:	ab03      	add	r3, sp, #12
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	462a      	mov	r2, r5
 8008d6a:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <_vfiprintf_r+0x258>)
 8008d6c:	a904      	add	r1, sp, #16
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7fd feba 	bl	8006ae8 <_printf_float>
 8008d74:	4607      	mov	r7, r0
 8008d76:	1c78      	adds	r0, r7, #1
 8008d78:	d1d6      	bne.n	8008d28 <_vfiprintf_r+0x1bc>
 8008d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d7c:	07d9      	lsls	r1, r3, #31
 8008d7e:	d405      	bmi.n	8008d8c <_vfiprintf_r+0x220>
 8008d80:	89ab      	ldrh	r3, [r5, #12]
 8008d82:	059a      	lsls	r2, r3, #22
 8008d84:	d402      	bmi.n	8008d8c <_vfiprintf_r+0x220>
 8008d86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d88:	f7ff fe6a 	bl	8008a60 <__retarget_lock_release_recursive>
 8008d8c:	89ab      	ldrh	r3, [r5, #12]
 8008d8e:	065b      	lsls	r3, r3, #25
 8008d90:	f53f af12 	bmi.w	8008bb8 <_vfiprintf_r+0x4c>
 8008d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d96:	e711      	b.n	8008bbc <_vfiprintf_r+0x50>
 8008d98:	ab03      	add	r3, sp, #12
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4b09      	ldr	r3, [pc, #36]	; (8008dc4 <_vfiprintf_r+0x258>)
 8008da0:	a904      	add	r1, sp, #16
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7fe f944 	bl	8007030 <_printf_i>
 8008da8:	e7e4      	b.n	8008d74 <_vfiprintf_r+0x208>
 8008daa:	bf00      	nop
 8008dac:	0800c24c 	.word	0x0800c24c
 8008db0:	0800c26c 	.word	0x0800c26c
 8008db4:	0800c22c 	.word	0x0800c22c
 8008db8:	0800c0d4 	.word	0x0800c0d4
 8008dbc:	0800c0de 	.word	0x0800c0de
 8008dc0:	08006ae9 	.word	0x08006ae9
 8008dc4:	08008b47 	.word	0x08008b47
 8008dc8:	0800c0da 	.word	0x0800c0da

08008dcc <__swbuf_r>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	460e      	mov	r6, r1
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	b118      	cbz	r0, 8008dde <__swbuf_r+0x12>
 8008dd6:	6983      	ldr	r3, [r0, #24]
 8008dd8:	b90b      	cbnz	r3, 8008dde <__swbuf_r+0x12>
 8008dda:	f000 f9e7 	bl	80091ac <__sinit>
 8008dde:	4b21      	ldr	r3, [pc, #132]	; (8008e64 <__swbuf_r+0x98>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	d12b      	bne.n	8008e3c <__swbuf_r+0x70>
 8008de4:	686c      	ldr	r4, [r5, #4]
 8008de6:	69a3      	ldr	r3, [r4, #24]
 8008de8:	60a3      	str	r3, [r4, #8]
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	071a      	lsls	r2, r3, #28
 8008dee:	d52f      	bpl.n	8008e50 <__swbuf_r+0x84>
 8008df0:	6923      	ldr	r3, [r4, #16]
 8008df2:	b36b      	cbz	r3, 8008e50 <__swbuf_r+0x84>
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	1ac0      	subs	r0, r0, r3
 8008dfa:	6963      	ldr	r3, [r4, #20]
 8008dfc:	b2f6      	uxtb	r6, r6
 8008dfe:	4283      	cmp	r3, r0
 8008e00:	4637      	mov	r7, r6
 8008e02:	dc04      	bgt.n	8008e0e <__swbuf_r+0x42>
 8008e04:	4621      	mov	r1, r4
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 f93c 	bl	8009084 <_fflush_r>
 8008e0c:	bb30      	cbnz	r0, 8008e5c <__swbuf_r+0x90>
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	60a3      	str	r3, [r4, #8]
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	6022      	str	r2, [r4, #0]
 8008e1a:	701e      	strb	r6, [r3, #0]
 8008e1c:	6963      	ldr	r3, [r4, #20]
 8008e1e:	3001      	adds	r0, #1
 8008e20:	4283      	cmp	r3, r0
 8008e22:	d004      	beq.n	8008e2e <__swbuf_r+0x62>
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	07db      	lsls	r3, r3, #31
 8008e28:	d506      	bpl.n	8008e38 <__swbuf_r+0x6c>
 8008e2a:	2e0a      	cmp	r6, #10
 8008e2c:	d104      	bne.n	8008e38 <__swbuf_r+0x6c>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4628      	mov	r0, r5
 8008e32:	f000 f927 	bl	8009084 <_fflush_r>
 8008e36:	b988      	cbnz	r0, 8008e5c <__swbuf_r+0x90>
 8008e38:	4638      	mov	r0, r7
 8008e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <__swbuf_r+0x9c>)
 8008e3e:	429c      	cmp	r4, r3
 8008e40:	d101      	bne.n	8008e46 <__swbuf_r+0x7a>
 8008e42:	68ac      	ldr	r4, [r5, #8]
 8008e44:	e7cf      	b.n	8008de6 <__swbuf_r+0x1a>
 8008e46:	4b09      	ldr	r3, [pc, #36]	; (8008e6c <__swbuf_r+0xa0>)
 8008e48:	429c      	cmp	r4, r3
 8008e4a:	bf08      	it	eq
 8008e4c:	68ec      	ldreq	r4, [r5, #12]
 8008e4e:	e7ca      	b.n	8008de6 <__swbuf_r+0x1a>
 8008e50:	4621      	mov	r1, r4
 8008e52:	4628      	mov	r0, r5
 8008e54:	f000 f81a 	bl	8008e8c <__swsetup_r>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d0cb      	beq.n	8008df4 <__swbuf_r+0x28>
 8008e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e60:	e7ea      	b.n	8008e38 <__swbuf_r+0x6c>
 8008e62:	bf00      	nop
 8008e64:	0800c24c 	.word	0x0800c24c
 8008e68:	0800c26c 	.word	0x0800c26c
 8008e6c:	0800c22c 	.word	0x0800c22c

08008e70 <__ascii_wctomb>:
 8008e70:	b149      	cbz	r1, 8008e86 <__ascii_wctomb+0x16>
 8008e72:	2aff      	cmp	r2, #255	; 0xff
 8008e74:	bf85      	ittet	hi
 8008e76:	238a      	movhi	r3, #138	; 0x8a
 8008e78:	6003      	strhi	r3, [r0, #0]
 8008e7a:	700a      	strbls	r2, [r1, #0]
 8008e7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e80:	bf98      	it	ls
 8008e82:	2001      	movls	r0, #1
 8008e84:	4770      	bx	lr
 8008e86:	4608      	mov	r0, r1
 8008e88:	4770      	bx	lr
	...

08008e8c <__swsetup_r>:
 8008e8c:	4b32      	ldr	r3, [pc, #200]	; (8008f58 <__swsetup_r+0xcc>)
 8008e8e:	b570      	push	{r4, r5, r6, lr}
 8008e90:	681d      	ldr	r5, [r3, #0]
 8008e92:	4606      	mov	r6, r0
 8008e94:	460c      	mov	r4, r1
 8008e96:	b125      	cbz	r5, 8008ea2 <__swsetup_r+0x16>
 8008e98:	69ab      	ldr	r3, [r5, #24]
 8008e9a:	b913      	cbnz	r3, 8008ea2 <__swsetup_r+0x16>
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f000 f985 	bl	80091ac <__sinit>
 8008ea2:	4b2e      	ldr	r3, [pc, #184]	; (8008f5c <__swsetup_r+0xd0>)
 8008ea4:	429c      	cmp	r4, r3
 8008ea6:	d10f      	bne.n	8008ec8 <__swsetup_r+0x3c>
 8008ea8:	686c      	ldr	r4, [r5, #4]
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eb0:	0719      	lsls	r1, r3, #28
 8008eb2:	d42c      	bmi.n	8008f0e <__swsetup_r+0x82>
 8008eb4:	06dd      	lsls	r5, r3, #27
 8008eb6:	d411      	bmi.n	8008edc <__swsetup_r+0x50>
 8008eb8:	2309      	movs	r3, #9
 8008eba:	6033      	str	r3, [r6, #0]
 8008ebc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec6:	e03e      	b.n	8008f46 <__swsetup_r+0xba>
 8008ec8:	4b25      	ldr	r3, [pc, #148]	; (8008f60 <__swsetup_r+0xd4>)
 8008eca:	429c      	cmp	r4, r3
 8008ecc:	d101      	bne.n	8008ed2 <__swsetup_r+0x46>
 8008ece:	68ac      	ldr	r4, [r5, #8]
 8008ed0:	e7eb      	b.n	8008eaa <__swsetup_r+0x1e>
 8008ed2:	4b24      	ldr	r3, [pc, #144]	; (8008f64 <__swsetup_r+0xd8>)
 8008ed4:	429c      	cmp	r4, r3
 8008ed6:	bf08      	it	eq
 8008ed8:	68ec      	ldreq	r4, [r5, #12]
 8008eda:	e7e6      	b.n	8008eaa <__swsetup_r+0x1e>
 8008edc:	0758      	lsls	r0, r3, #29
 8008ede:	d512      	bpl.n	8008f06 <__swsetup_r+0x7a>
 8008ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ee2:	b141      	cbz	r1, 8008ef6 <__swsetup_r+0x6a>
 8008ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ee8:	4299      	cmp	r1, r3
 8008eea:	d002      	beq.n	8008ef2 <__swsetup_r+0x66>
 8008eec:	4630      	mov	r0, r6
 8008eee:	f7fd fc7b 	bl	80067e8 <_free_r>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	2300      	movs	r3, #0
 8008f00:	6063      	str	r3, [r4, #4]
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	89a3      	ldrh	r3, [r4, #12]
 8008f08:	f043 0308 	orr.w	r3, r3, #8
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	b94b      	cbnz	r3, 8008f26 <__swsetup_r+0x9a>
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f1c:	d003      	beq.n	8008f26 <__swsetup_r+0x9a>
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4630      	mov	r0, r6
 8008f22:	f000 fa05 	bl	8009330 <__smakebuf_r>
 8008f26:	89a0      	ldrh	r0, [r4, #12]
 8008f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f2c:	f010 0301 	ands.w	r3, r0, #1
 8008f30:	d00a      	beq.n	8008f48 <__swsetup_r+0xbc>
 8008f32:	2300      	movs	r3, #0
 8008f34:	60a3      	str	r3, [r4, #8]
 8008f36:	6963      	ldr	r3, [r4, #20]
 8008f38:	425b      	negs	r3, r3
 8008f3a:	61a3      	str	r3, [r4, #24]
 8008f3c:	6923      	ldr	r3, [r4, #16]
 8008f3e:	b943      	cbnz	r3, 8008f52 <__swsetup_r+0xc6>
 8008f40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f44:	d1ba      	bne.n	8008ebc <__swsetup_r+0x30>
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	0781      	lsls	r1, r0, #30
 8008f4a:	bf58      	it	pl
 8008f4c:	6963      	ldrpl	r3, [r4, #20]
 8008f4e:	60a3      	str	r3, [r4, #8]
 8008f50:	e7f4      	b.n	8008f3c <__swsetup_r+0xb0>
 8008f52:	2000      	movs	r0, #0
 8008f54:	e7f7      	b.n	8008f46 <__swsetup_r+0xba>
 8008f56:	bf00      	nop
 8008f58:	20000024 	.word	0x20000024
 8008f5c:	0800c24c 	.word	0x0800c24c
 8008f60:	0800c26c 	.word	0x0800c26c
 8008f64:	0800c22c 	.word	0x0800c22c

08008f68 <abort>:
 8008f68:	b508      	push	{r3, lr}
 8008f6a:	2006      	movs	r0, #6
 8008f6c:	f000 fa50 	bl	8009410 <raise>
 8008f70:	2001      	movs	r0, #1
 8008f72:	f7fa fc47 	bl	8003804 <_exit>
	...

08008f78 <__sflush_r>:
 8008f78:	898a      	ldrh	r2, [r1, #12]
 8008f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7e:	4605      	mov	r5, r0
 8008f80:	0710      	lsls	r0, r2, #28
 8008f82:	460c      	mov	r4, r1
 8008f84:	d458      	bmi.n	8009038 <__sflush_r+0xc0>
 8008f86:	684b      	ldr	r3, [r1, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	dc05      	bgt.n	8008f98 <__sflush_r+0x20>
 8008f8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	dc02      	bgt.n	8008f98 <__sflush_r+0x20>
 8008f92:	2000      	movs	r0, #0
 8008f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	d0f9      	beq.n	8008f92 <__sflush_r+0x1a>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fa4:	682f      	ldr	r7, [r5, #0]
 8008fa6:	602b      	str	r3, [r5, #0]
 8008fa8:	d032      	beq.n	8009010 <__sflush_r+0x98>
 8008faa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	075a      	lsls	r2, r3, #29
 8008fb0:	d505      	bpl.n	8008fbe <__sflush_r+0x46>
 8008fb2:	6863      	ldr	r3, [r4, #4]
 8008fb4:	1ac0      	subs	r0, r0, r3
 8008fb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fb8:	b10b      	cbz	r3, 8008fbe <__sflush_r+0x46>
 8008fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fbc:	1ac0      	subs	r0, r0, r3
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fc4:	6a21      	ldr	r1, [r4, #32]
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	47b0      	blx	r6
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	d106      	bne.n	8008fde <__sflush_r+0x66>
 8008fd0:	6829      	ldr	r1, [r5, #0]
 8008fd2:	291d      	cmp	r1, #29
 8008fd4:	d82c      	bhi.n	8009030 <__sflush_r+0xb8>
 8008fd6:	4a2a      	ldr	r2, [pc, #168]	; (8009080 <__sflush_r+0x108>)
 8008fd8:	40ca      	lsrs	r2, r1
 8008fda:	07d6      	lsls	r6, r2, #31
 8008fdc:	d528      	bpl.n	8009030 <__sflush_r+0xb8>
 8008fde:	2200      	movs	r2, #0
 8008fe0:	6062      	str	r2, [r4, #4]
 8008fe2:	04d9      	lsls	r1, r3, #19
 8008fe4:	6922      	ldr	r2, [r4, #16]
 8008fe6:	6022      	str	r2, [r4, #0]
 8008fe8:	d504      	bpl.n	8008ff4 <__sflush_r+0x7c>
 8008fea:	1c42      	adds	r2, r0, #1
 8008fec:	d101      	bne.n	8008ff2 <__sflush_r+0x7a>
 8008fee:	682b      	ldr	r3, [r5, #0]
 8008ff0:	b903      	cbnz	r3, 8008ff4 <__sflush_r+0x7c>
 8008ff2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ff6:	602f      	str	r7, [r5, #0]
 8008ff8:	2900      	cmp	r1, #0
 8008ffa:	d0ca      	beq.n	8008f92 <__sflush_r+0x1a>
 8008ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009000:	4299      	cmp	r1, r3
 8009002:	d002      	beq.n	800900a <__sflush_r+0x92>
 8009004:	4628      	mov	r0, r5
 8009006:	f7fd fbef 	bl	80067e8 <_free_r>
 800900a:	2000      	movs	r0, #0
 800900c:	6360      	str	r0, [r4, #52]	; 0x34
 800900e:	e7c1      	b.n	8008f94 <__sflush_r+0x1c>
 8009010:	6a21      	ldr	r1, [r4, #32]
 8009012:	2301      	movs	r3, #1
 8009014:	4628      	mov	r0, r5
 8009016:	47b0      	blx	r6
 8009018:	1c41      	adds	r1, r0, #1
 800901a:	d1c7      	bne.n	8008fac <__sflush_r+0x34>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0c4      	beq.n	8008fac <__sflush_r+0x34>
 8009022:	2b1d      	cmp	r3, #29
 8009024:	d001      	beq.n	800902a <__sflush_r+0xb2>
 8009026:	2b16      	cmp	r3, #22
 8009028:	d101      	bne.n	800902e <__sflush_r+0xb6>
 800902a:	602f      	str	r7, [r5, #0]
 800902c:	e7b1      	b.n	8008f92 <__sflush_r+0x1a>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	e7ad      	b.n	8008f94 <__sflush_r+0x1c>
 8009038:	690f      	ldr	r7, [r1, #16]
 800903a:	2f00      	cmp	r7, #0
 800903c:	d0a9      	beq.n	8008f92 <__sflush_r+0x1a>
 800903e:	0793      	lsls	r3, r2, #30
 8009040:	680e      	ldr	r6, [r1, #0]
 8009042:	bf08      	it	eq
 8009044:	694b      	ldreq	r3, [r1, #20]
 8009046:	600f      	str	r7, [r1, #0]
 8009048:	bf18      	it	ne
 800904a:	2300      	movne	r3, #0
 800904c:	eba6 0807 	sub.w	r8, r6, r7
 8009050:	608b      	str	r3, [r1, #8]
 8009052:	f1b8 0f00 	cmp.w	r8, #0
 8009056:	dd9c      	ble.n	8008f92 <__sflush_r+0x1a>
 8009058:	6a21      	ldr	r1, [r4, #32]
 800905a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800905c:	4643      	mov	r3, r8
 800905e:	463a      	mov	r2, r7
 8009060:	4628      	mov	r0, r5
 8009062:	47b0      	blx	r6
 8009064:	2800      	cmp	r0, #0
 8009066:	dc06      	bgt.n	8009076 <__sflush_r+0xfe>
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	e78e      	b.n	8008f94 <__sflush_r+0x1c>
 8009076:	4407      	add	r7, r0
 8009078:	eba8 0800 	sub.w	r8, r8, r0
 800907c:	e7e9      	b.n	8009052 <__sflush_r+0xda>
 800907e:	bf00      	nop
 8009080:	20400001 	.word	0x20400001

08009084 <_fflush_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	690b      	ldr	r3, [r1, #16]
 8009088:	4605      	mov	r5, r0
 800908a:	460c      	mov	r4, r1
 800908c:	b913      	cbnz	r3, 8009094 <_fflush_r+0x10>
 800908e:	2500      	movs	r5, #0
 8009090:	4628      	mov	r0, r5
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	b118      	cbz	r0, 800909e <_fflush_r+0x1a>
 8009096:	6983      	ldr	r3, [r0, #24]
 8009098:	b90b      	cbnz	r3, 800909e <_fflush_r+0x1a>
 800909a:	f000 f887 	bl	80091ac <__sinit>
 800909e:	4b14      	ldr	r3, [pc, #80]	; (80090f0 <_fflush_r+0x6c>)
 80090a0:	429c      	cmp	r4, r3
 80090a2:	d11b      	bne.n	80090dc <_fflush_r+0x58>
 80090a4:	686c      	ldr	r4, [r5, #4]
 80090a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0ef      	beq.n	800908e <_fflush_r+0xa>
 80090ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090b0:	07d0      	lsls	r0, r2, #31
 80090b2:	d404      	bmi.n	80090be <_fflush_r+0x3a>
 80090b4:	0599      	lsls	r1, r3, #22
 80090b6:	d402      	bmi.n	80090be <_fflush_r+0x3a>
 80090b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ba:	f7ff fcd0 	bl	8008a5e <__retarget_lock_acquire_recursive>
 80090be:	4628      	mov	r0, r5
 80090c0:	4621      	mov	r1, r4
 80090c2:	f7ff ff59 	bl	8008f78 <__sflush_r>
 80090c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090c8:	07da      	lsls	r2, r3, #31
 80090ca:	4605      	mov	r5, r0
 80090cc:	d4e0      	bmi.n	8009090 <_fflush_r+0xc>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	059b      	lsls	r3, r3, #22
 80090d2:	d4dd      	bmi.n	8009090 <_fflush_r+0xc>
 80090d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090d6:	f7ff fcc3 	bl	8008a60 <__retarget_lock_release_recursive>
 80090da:	e7d9      	b.n	8009090 <_fflush_r+0xc>
 80090dc:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <_fflush_r+0x70>)
 80090de:	429c      	cmp	r4, r3
 80090e0:	d101      	bne.n	80090e6 <_fflush_r+0x62>
 80090e2:	68ac      	ldr	r4, [r5, #8]
 80090e4:	e7df      	b.n	80090a6 <_fflush_r+0x22>
 80090e6:	4b04      	ldr	r3, [pc, #16]	; (80090f8 <_fflush_r+0x74>)
 80090e8:	429c      	cmp	r4, r3
 80090ea:	bf08      	it	eq
 80090ec:	68ec      	ldreq	r4, [r5, #12]
 80090ee:	e7da      	b.n	80090a6 <_fflush_r+0x22>
 80090f0:	0800c24c 	.word	0x0800c24c
 80090f4:	0800c26c 	.word	0x0800c26c
 80090f8:	0800c22c 	.word	0x0800c22c

080090fc <std>:
 80090fc:	2300      	movs	r3, #0
 80090fe:	b510      	push	{r4, lr}
 8009100:	4604      	mov	r4, r0
 8009102:	e9c0 3300 	strd	r3, r3, [r0]
 8009106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800910a:	6083      	str	r3, [r0, #8]
 800910c:	8181      	strh	r1, [r0, #12]
 800910e:	6643      	str	r3, [r0, #100]	; 0x64
 8009110:	81c2      	strh	r2, [r0, #14]
 8009112:	6183      	str	r3, [r0, #24]
 8009114:	4619      	mov	r1, r3
 8009116:	2208      	movs	r2, #8
 8009118:	305c      	adds	r0, #92	; 0x5c
 800911a:	f7fd fb5d 	bl	80067d8 <memset>
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <std+0x38>)
 8009120:	6263      	str	r3, [r4, #36]	; 0x24
 8009122:	4b05      	ldr	r3, [pc, #20]	; (8009138 <std+0x3c>)
 8009124:	62a3      	str	r3, [r4, #40]	; 0x28
 8009126:	4b05      	ldr	r3, [pc, #20]	; (800913c <std+0x40>)
 8009128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <std+0x44>)
 800912c:	6224      	str	r4, [r4, #32]
 800912e:	6323      	str	r3, [r4, #48]	; 0x30
 8009130:	bd10      	pop	{r4, pc}
 8009132:	bf00      	nop
 8009134:	08009449 	.word	0x08009449
 8009138:	0800946b 	.word	0x0800946b
 800913c:	080094a3 	.word	0x080094a3
 8009140:	080094c7 	.word	0x080094c7

08009144 <_cleanup_r>:
 8009144:	4901      	ldr	r1, [pc, #4]	; (800914c <_cleanup_r+0x8>)
 8009146:	f000 b8af 	b.w	80092a8 <_fwalk_reent>
 800914a:	bf00      	nop
 800914c:	08009085 	.word	0x08009085

08009150 <__sfmoreglue>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	2268      	movs	r2, #104	; 0x68
 8009154:	1e4d      	subs	r5, r1, #1
 8009156:	4355      	muls	r5, r2
 8009158:	460e      	mov	r6, r1
 800915a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800915e:	f7fd fbaf 	bl	80068c0 <_malloc_r>
 8009162:	4604      	mov	r4, r0
 8009164:	b140      	cbz	r0, 8009178 <__sfmoreglue+0x28>
 8009166:	2100      	movs	r1, #0
 8009168:	e9c0 1600 	strd	r1, r6, [r0]
 800916c:	300c      	adds	r0, #12
 800916e:	60a0      	str	r0, [r4, #8]
 8009170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009174:	f7fd fb30 	bl	80067d8 <memset>
 8009178:	4620      	mov	r0, r4
 800917a:	bd70      	pop	{r4, r5, r6, pc}

0800917c <__sfp_lock_acquire>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__sfp_lock_acquire+0x8>)
 800917e:	f7ff bc6e 	b.w	8008a5e <__retarget_lock_acquire_recursive>
 8009182:	bf00      	nop
 8009184:	200003f1 	.word	0x200003f1

08009188 <__sfp_lock_release>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__sfp_lock_release+0x8>)
 800918a:	f7ff bc69 	b.w	8008a60 <__retarget_lock_release_recursive>
 800918e:	bf00      	nop
 8009190:	200003f1 	.word	0x200003f1

08009194 <__sinit_lock_acquire>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__sinit_lock_acquire+0x8>)
 8009196:	f7ff bc62 	b.w	8008a5e <__retarget_lock_acquire_recursive>
 800919a:	bf00      	nop
 800919c:	200003f2 	.word	0x200003f2

080091a0 <__sinit_lock_release>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__sinit_lock_release+0x8>)
 80091a2:	f7ff bc5d 	b.w	8008a60 <__retarget_lock_release_recursive>
 80091a6:	bf00      	nop
 80091a8:	200003f2 	.word	0x200003f2

080091ac <__sinit>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	4604      	mov	r4, r0
 80091b0:	f7ff fff0 	bl	8009194 <__sinit_lock_acquire>
 80091b4:	69a3      	ldr	r3, [r4, #24]
 80091b6:	b11b      	cbz	r3, 80091c0 <__sinit+0x14>
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091bc:	f7ff bff0 	b.w	80091a0 <__sinit_lock_release>
 80091c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091c4:	6523      	str	r3, [r4, #80]	; 0x50
 80091c6:	4b13      	ldr	r3, [pc, #76]	; (8009214 <__sinit+0x68>)
 80091c8:	4a13      	ldr	r2, [pc, #76]	; (8009218 <__sinit+0x6c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	bf04      	itt	eq
 80091d2:	2301      	moveq	r3, #1
 80091d4:	61a3      	streq	r3, [r4, #24]
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 f820 	bl	800921c <__sfp>
 80091dc:	6060      	str	r0, [r4, #4]
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 f81c 	bl	800921c <__sfp>
 80091e4:	60a0      	str	r0, [r4, #8]
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 f818 	bl	800921c <__sfp>
 80091ec:	2200      	movs	r2, #0
 80091ee:	60e0      	str	r0, [r4, #12]
 80091f0:	2104      	movs	r1, #4
 80091f2:	6860      	ldr	r0, [r4, #4]
 80091f4:	f7ff ff82 	bl	80090fc <std>
 80091f8:	68a0      	ldr	r0, [r4, #8]
 80091fa:	2201      	movs	r2, #1
 80091fc:	2109      	movs	r1, #9
 80091fe:	f7ff ff7d 	bl	80090fc <std>
 8009202:	68e0      	ldr	r0, [r4, #12]
 8009204:	2202      	movs	r2, #2
 8009206:	2112      	movs	r1, #18
 8009208:	f7ff ff78 	bl	80090fc <std>
 800920c:	2301      	movs	r3, #1
 800920e:	61a3      	str	r3, [r4, #24]
 8009210:	e7d2      	b.n	80091b8 <__sinit+0xc>
 8009212:	bf00      	nop
 8009214:	0800beb0 	.word	0x0800beb0
 8009218:	08009145 	.word	0x08009145

0800921c <__sfp>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	4607      	mov	r7, r0
 8009220:	f7ff ffac 	bl	800917c <__sfp_lock_acquire>
 8009224:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <__sfp+0x84>)
 8009226:	681e      	ldr	r6, [r3, #0]
 8009228:	69b3      	ldr	r3, [r6, #24]
 800922a:	b913      	cbnz	r3, 8009232 <__sfp+0x16>
 800922c:	4630      	mov	r0, r6
 800922e:	f7ff ffbd 	bl	80091ac <__sinit>
 8009232:	3648      	adds	r6, #72	; 0x48
 8009234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009238:	3b01      	subs	r3, #1
 800923a:	d503      	bpl.n	8009244 <__sfp+0x28>
 800923c:	6833      	ldr	r3, [r6, #0]
 800923e:	b30b      	cbz	r3, 8009284 <__sfp+0x68>
 8009240:	6836      	ldr	r6, [r6, #0]
 8009242:	e7f7      	b.n	8009234 <__sfp+0x18>
 8009244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009248:	b9d5      	cbnz	r5, 8009280 <__sfp+0x64>
 800924a:	4b16      	ldr	r3, [pc, #88]	; (80092a4 <__sfp+0x88>)
 800924c:	60e3      	str	r3, [r4, #12]
 800924e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009252:	6665      	str	r5, [r4, #100]	; 0x64
 8009254:	f7ff fc02 	bl	8008a5c <__retarget_lock_init_recursive>
 8009258:	f7ff ff96 	bl	8009188 <__sfp_lock_release>
 800925c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009264:	6025      	str	r5, [r4, #0]
 8009266:	61a5      	str	r5, [r4, #24]
 8009268:	2208      	movs	r2, #8
 800926a:	4629      	mov	r1, r5
 800926c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009270:	f7fd fab2 	bl	80067d8 <memset>
 8009274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800927c:	4620      	mov	r0, r4
 800927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009280:	3468      	adds	r4, #104	; 0x68
 8009282:	e7d9      	b.n	8009238 <__sfp+0x1c>
 8009284:	2104      	movs	r1, #4
 8009286:	4638      	mov	r0, r7
 8009288:	f7ff ff62 	bl	8009150 <__sfmoreglue>
 800928c:	4604      	mov	r4, r0
 800928e:	6030      	str	r0, [r6, #0]
 8009290:	2800      	cmp	r0, #0
 8009292:	d1d5      	bne.n	8009240 <__sfp+0x24>
 8009294:	f7ff ff78 	bl	8009188 <__sfp_lock_release>
 8009298:	230c      	movs	r3, #12
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	e7ee      	b.n	800927c <__sfp+0x60>
 800929e:	bf00      	nop
 80092a0:	0800beb0 	.word	0x0800beb0
 80092a4:	ffff0001 	.word	0xffff0001

080092a8 <_fwalk_reent>:
 80092a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ac:	4606      	mov	r6, r0
 80092ae:	4688      	mov	r8, r1
 80092b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092b4:	2700      	movs	r7, #0
 80092b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ba:	f1b9 0901 	subs.w	r9, r9, #1
 80092be:	d505      	bpl.n	80092cc <_fwalk_reent+0x24>
 80092c0:	6824      	ldr	r4, [r4, #0]
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	d1f7      	bne.n	80092b6 <_fwalk_reent+0xe>
 80092c6:	4638      	mov	r0, r7
 80092c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092cc:	89ab      	ldrh	r3, [r5, #12]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d907      	bls.n	80092e2 <_fwalk_reent+0x3a>
 80092d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092d6:	3301      	adds	r3, #1
 80092d8:	d003      	beq.n	80092e2 <_fwalk_reent+0x3a>
 80092da:	4629      	mov	r1, r5
 80092dc:	4630      	mov	r0, r6
 80092de:	47c0      	blx	r8
 80092e0:	4307      	orrs	r7, r0
 80092e2:	3568      	adds	r5, #104	; 0x68
 80092e4:	e7e9      	b.n	80092ba <_fwalk_reent+0x12>

080092e6 <__swhatbuf_r>:
 80092e6:	b570      	push	{r4, r5, r6, lr}
 80092e8:	460e      	mov	r6, r1
 80092ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ee:	2900      	cmp	r1, #0
 80092f0:	b096      	sub	sp, #88	; 0x58
 80092f2:	4614      	mov	r4, r2
 80092f4:	461d      	mov	r5, r3
 80092f6:	da08      	bge.n	800930a <__swhatbuf_r+0x24>
 80092f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	602a      	str	r2, [r5, #0]
 8009300:	061a      	lsls	r2, r3, #24
 8009302:	d410      	bmi.n	8009326 <__swhatbuf_r+0x40>
 8009304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009308:	e00e      	b.n	8009328 <__swhatbuf_r+0x42>
 800930a:	466a      	mov	r2, sp
 800930c:	f000 f902 	bl	8009514 <_fstat_r>
 8009310:	2800      	cmp	r0, #0
 8009312:	dbf1      	blt.n	80092f8 <__swhatbuf_r+0x12>
 8009314:	9a01      	ldr	r2, [sp, #4]
 8009316:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800931a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800931e:	425a      	negs	r2, r3
 8009320:	415a      	adcs	r2, r3
 8009322:	602a      	str	r2, [r5, #0]
 8009324:	e7ee      	b.n	8009304 <__swhatbuf_r+0x1e>
 8009326:	2340      	movs	r3, #64	; 0x40
 8009328:	2000      	movs	r0, #0
 800932a:	6023      	str	r3, [r4, #0]
 800932c:	b016      	add	sp, #88	; 0x58
 800932e:	bd70      	pop	{r4, r5, r6, pc}

08009330 <__smakebuf_r>:
 8009330:	898b      	ldrh	r3, [r1, #12]
 8009332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009334:	079d      	lsls	r5, r3, #30
 8009336:	4606      	mov	r6, r0
 8009338:	460c      	mov	r4, r1
 800933a:	d507      	bpl.n	800934c <__smakebuf_r+0x1c>
 800933c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	6123      	str	r3, [r4, #16]
 8009344:	2301      	movs	r3, #1
 8009346:	6163      	str	r3, [r4, #20]
 8009348:	b002      	add	sp, #8
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	ab01      	add	r3, sp, #4
 800934e:	466a      	mov	r2, sp
 8009350:	f7ff ffc9 	bl	80092e6 <__swhatbuf_r>
 8009354:	9900      	ldr	r1, [sp, #0]
 8009356:	4605      	mov	r5, r0
 8009358:	4630      	mov	r0, r6
 800935a:	f7fd fab1 	bl	80068c0 <_malloc_r>
 800935e:	b948      	cbnz	r0, 8009374 <__smakebuf_r+0x44>
 8009360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009364:	059a      	lsls	r2, r3, #22
 8009366:	d4ef      	bmi.n	8009348 <__smakebuf_r+0x18>
 8009368:	f023 0303 	bic.w	r3, r3, #3
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	e7e3      	b.n	800933c <__smakebuf_r+0xc>
 8009374:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <__smakebuf_r+0x7c>)
 8009376:	62b3      	str	r3, [r6, #40]	; 0x28
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	6020      	str	r0, [r4, #0]
 800937c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	9b00      	ldr	r3, [sp, #0]
 8009384:	6163      	str	r3, [r4, #20]
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	6120      	str	r0, [r4, #16]
 800938a:	b15b      	cbz	r3, 80093a4 <__smakebuf_r+0x74>
 800938c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009390:	4630      	mov	r0, r6
 8009392:	f000 f8d1 	bl	8009538 <_isatty_r>
 8009396:	b128      	cbz	r0, 80093a4 <__smakebuf_r+0x74>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	f043 0301 	orr.w	r3, r3, #1
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	89a0      	ldrh	r0, [r4, #12]
 80093a6:	4305      	orrs	r5, r0
 80093a8:	81a5      	strh	r5, [r4, #12]
 80093aa:	e7cd      	b.n	8009348 <__smakebuf_r+0x18>
 80093ac:	08009145 	.word	0x08009145

080093b0 <_malloc_usable_size_r>:
 80093b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093b4:	1f18      	subs	r0, r3, #4
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bfbc      	itt	lt
 80093ba:	580b      	ldrlt	r3, [r1, r0]
 80093bc:	18c0      	addlt	r0, r0, r3
 80093be:	4770      	bx	lr

080093c0 <_raise_r>:
 80093c0:	291f      	cmp	r1, #31
 80093c2:	b538      	push	{r3, r4, r5, lr}
 80093c4:	4604      	mov	r4, r0
 80093c6:	460d      	mov	r5, r1
 80093c8:	d904      	bls.n	80093d4 <_raise_r+0x14>
 80093ca:	2316      	movs	r3, #22
 80093cc:	6003      	str	r3, [r0, #0]
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093d6:	b112      	cbz	r2, 80093de <_raise_r+0x1e>
 80093d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093dc:	b94b      	cbnz	r3, 80093f2 <_raise_r+0x32>
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 f830 	bl	8009444 <_getpid_r>
 80093e4:	462a      	mov	r2, r5
 80093e6:	4601      	mov	r1, r0
 80093e8:	4620      	mov	r0, r4
 80093ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ee:	f000 b817 	b.w	8009420 <_kill_r>
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d00a      	beq.n	800940c <_raise_r+0x4c>
 80093f6:	1c59      	adds	r1, r3, #1
 80093f8:	d103      	bne.n	8009402 <_raise_r+0x42>
 80093fa:	2316      	movs	r3, #22
 80093fc:	6003      	str	r3, [r0, #0]
 80093fe:	2001      	movs	r0, #1
 8009400:	e7e7      	b.n	80093d2 <_raise_r+0x12>
 8009402:	2400      	movs	r4, #0
 8009404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009408:	4628      	mov	r0, r5
 800940a:	4798      	blx	r3
 800940c:	2000      	movs	r0, #0
 800940e:	e7e0      	b.n	80093d2 <_raise_r+0x12>

08009410 <raise>:
 8009410:	4b02      	ldr	r3, [pc, #8]	; (800941c <raise+0xc>)
 8009412:	4601      	mov	r1, r0
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	f7ff bfd3 	b.w	80093c0 <_raise_r>
 800941a:	bf00      	nop
 800941c:	20000024 	.word	0x20000024

08009420 <_kill_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d07      	ldr	r5, [pc, #28]	; (8009440 <_kill_r+0x20>)
 8009424:	2300      	movs	r3, #0
 8009426:	4604      	mov	r4, r0
 8009428:	4608      	mov	r0, r1
 800942a:	4611      	mov	r1, r2
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	f7fa f9d9 	bl	80037e4 <_kill>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	d102      	bne.n	800943c <_kill_r+0x1c>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	b103      	cbz	r3, 800943c <_kill_r+0x1c>
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	bd38      	pop	{r3, r4, r5, pc}
 800943e:	bf00      	nop
 8009440:	200003ec 	.word	0x200003ec

08009444 <_getpid_r>:
 8009444:	f7fa b9c6 	b.w	80037d4 <_getpid>

08009448 <__sread>:
 8009448:	b510      	push	{r4, lr}
 800944a:	460c      	mov	r4, r1
 800944c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009450:	f000 f894 	bl	800957c <_read_r>
 8009454:	2800      	cmp	r0, #0
 8009456:	bfab      	itete	ge
 8009458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800945a:	89a3      	ldrhlt	r3, [r4, #12]
 800945c:	181b      	addge	r3, r3, r0
 800945e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009462:	bfac      	ite	ge
 8009464:	6563      	strge	r3, [r4, #84]	; 0x54
 8009466:	81a3      	strhlt	r3, [r4, #12]
 8009468:	bd10      	pop	{r4, pc}

0800946a <__swrite>:
 800946a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	461f      	mov	r7, r3
 8009470:	898b      	ldrh	r3, [r1, #12]
 8009472:	05db      	lsls	r3, r3, #23
 8009474:	4605      	mov	r5, r0
 8009476:	460c      	mov	r4, r1
 8009478:	4616      	mov	r6, r2
 800947a:	d505      	bpl.n	8009488 <__swrite+0x1e>
 800947c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009480:	2302      	movs	r3, #2
 8009482:	2200      	movs	r2, #0
 8009484:	f000 f868 	bl	8009558 <_lseek_r>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	4632      	mov	r2, r6
 8009496:	463b      	mov	r3, r7
 8009498:	4628      	mov	r0, r5
 800949a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800949e:	f000 b817 	b.w	80094d0 <_write_r>

080094a2 <__sseek>:
 80094a2:	b510      	push	{r4, lr}
 80094a4:	460c      	mov	r4, r1
 80094a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094aa:	f000 f855 	bl	8009558 <_lseek_r>
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	bf15      	itete	ne
 80094b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80094b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094be:	81a3      	strheq	r3, [r4, #12]
 80094c0:	bf18      	it	ne
 80094c2:	81a3      	strhne	r3, [r4, #12]
 80094c4:	bd10      	pop	{r4, pc}

080094c6 <__sclose>:
 80094c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ca:	f000 b813 	b.w	80094f4 <_close_r>
	...

080094d0 <_write_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d07      	ldr	r5, [pc, #28]	; (80094f0 <_write_r+0x20>)
 80094d4:	4604      	mov	r4, r0
 80094d6:	4608      	mov	r0, r1
 80094d8:	4611      	mov	r1, r2
 80094da:	2200      	movs	r2, #0
 80094dc:	602a      	str	r2, [r5, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f7fa f9b7 	bl	8003852 <_write>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_write_r+0x1e>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_write_r+0x1e>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	200003ec 	.word	0x200003ec

080094f4 <_close_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d06      	ldr	r5, [pc, #24]	; (8009510 <_close_r+0x1c>)
 80094f8:	2300      	movs	r3, #0
 80094fa:	4604      	mov	r4, r0
 80094fc:	4608      	mov	r0, r1
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	f7fa f9c3 	bl	800388a <_close>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_close_r+0x1a>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_close_r+0x1a>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	200003ec 	.word	0x200003ec

08009514 <_fstat_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d07      	ldr	r5, [pc, #28]	; (8009534 <_fstat_r+0x20>)
 8009518:	2300      	movs	r3, #0
 800951a:	4604      	mov	r4, r0
 800951c:	4608      	mov	r0, r1
 800951e:	4611      	mov	r1, r2
 8009520:	602b      	str	r3, [r5, #0]
 8009522:	f7fa f9be 	bl	80038a2 <_fstat>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	d102      	bne.n	8009530 <_fstat_r+0x1c>
 800952a:	682b      	ldr	r3, [r5, #0]
 800952c:	b103      	cbz	r3, 8009530 <_fstat_r+0x1c>
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	bd38      	pop	{r3, r4, r5, pc}
 8009532:	bf00      	nop
 8009534:	200003ec 	.word	0x200003ec

08009538 <_isatty_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d06      	ldr	r5, [pc, #24]	; (8009554 <_isatty_r+0x1c>)
 800953c:	2300      	movs	r3, #0
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	f7fa f9bd 	bl	80038c2 <_isatty>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_isatty_r+0x1a>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_isatty_r+0x1a>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	200003ec 	.word	0x200003ec

08009558 <_lseek_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_lseek_r+0x20>)
 800955c:	4604      	mov	r4, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7fa f9b6 	bl	80038d8 <_lseek>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_lseek_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_lseek_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	200003ec 	.word	0x200003ec

0800957c <_read_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	; (800959c <_read_r+0x20>)
 8009580:	4604      	mov	r4, r0
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	2200      	movs	r2, #0
 8009588:	602a      	str	r2, [r5, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f7fa f944 	bl	8003818 <_read>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_read_r+0x1e>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_read_r+0x1e>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	200003ec 	.word	0x200003ec

080095a0 <cos>:
 80095a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095a2:	ec53 2b10 	vmov	r2, r3, d0
 80095a6:	4826      	ldr	r0, [pc, #152]	; (8009640 <cos+0xa0>)
 80095a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80095ac:	4281      	cmp	r1, r0
 80095ae:	dc06      	bgt.n	80095be <cos+0x1e>
 80095b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009638 <cos+0x98>
 80095b4:	b005      	add	sp, #20
 80095b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80095ba:	f000 be95 	b.w	800a2e8 <__kernel_cos>
 80095be:	4821      	ldr	r0, [pc, #132]	; (8009644 <cos+0xa4>)
 80095c0:	4281      	cmp	r1, r0
 80095c2:	dd09      	ble.n	80095d8 <cos+0x38>
 80095c4:	ee10 0a10 	vmov	r0, s0
 80095c8:	4619      	mov	r1, r3
 80095ca:	f7f6 fe65 	bl	8000298 <__aeabi_dsub>
 80095ce:	ec41 0b10 	vmov	d0, r0, r1
 80095d2:	b005      	add	sp, #20
 80095d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80095d8:	4668      	mov	r0, sp
 80095da:	f000 fb25 	bl	8009c28 <__ieee754_rem_pio2>
 80095de:	f000 0003 	and.w	r0, r0, #3
 80095e2:	2801      	cmp	r0, #1
 80095e4:	d00b      	beq.n	80095fe <cos+0x5e>
 80095e6:	2802      	cmp	r0, #2
 80095e8:	d016      	beq.n	8009618 <cos+0x78>
 80095ea:	b9e0      	cbnz	r0, 8009626 <cos+0x86>
 80095ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095f0:	ed9d 0b00 	vldr	d0, [sp]
 80095f4:	f000 fe78 	bl	800a2e8 <__kernel_cos>
 80095f8:	ec51 0b10 	vmov	r0, r1, d0
 80095fc:	e7e7      	b.n	80095ce <cos+0x2e>
 80095fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009602:	ed9d 0b00 	vldr	d0, [sp]
 8009606:	f001 fa87 	bl	800ab18 <__kernel_sin>
 800960a:	ec53 2b10 	vmov	r2, r3, d0
 800960e:	ee10 0a10 	vmov	r0, s0
 8009612:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009616:	e7da      	b.n	80095ce <cos+0x2e>
 8009618:	ed9d 1b02 	vldr	d1, [sp, #8]
 800961c:	ed9d 0b00 	vldr	d0, [sp]
 8009620:	f000 fe62 	bl	800a2e8 <__kernel_cos>
 8009624:	e7f1      	b.n	800960a <cos+0x6a>
 8009626:	ed9d 1b02 	vldr	d1, [sp, #8]
 800962a:	ed9d 0b00 	vldr	d0, [sp]
 800962e:	2001      	movs	r0, #1
 8009630:	f001 fa72 	bl	800ab18 <__kernel_sin>
 8009634:	e7e0      	b.n	80095f8 <cos+0x58>
 8009636:	bf00      	nop
	...
 8009640:	3fe921fb 	.word	0x3fe921fb
 8009644:	7fefffff 	.word	0x7fefffff

08009648 <sin>:
 8009648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800964a:	ec53 2b10 	vmov	r2, r3, d0
 800964e:	4828      	ldr	r0, [pc, #160]	; (80096f0 <sin+0xa8>)
 8009650:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009654:	4281      	cmp	r1, r0
 8009656:	dc07      	bgt.n	8009668 <sin+0x20>
 8009658:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80096e8 <sin+0xa0>
 800965c:	2000      	movs	r0, #0
 800965e:	b005      	add	sp, #20
 8009660:	f85d eb04 	ldr.w	lr, [sp], #4
 8009664:	f001 ba58 	b.w	800ab18 <__kernel_sin>
 8009668:	4822      	ldr	r0, [pc, #136]	; (80096f4 <sin+0xac>)
 800966a:	4281      	cmp	r1, r0
 800966c:	dd09      	ble.n	8009682 <sin+0x3a>
 800966e:	ee10 0a10 	vmov	r0, s0
 8009672:	4619      	mov	r1, r3
 8009674:	f7f6 fe10 	bl	8000298 <__aeabi_dsub>
 8009678:	ec41 0b10 	vmov	d0, r0, r1
 800967c:	b005      	add	sp, #20
 800967e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009682:	4668      	mov	r0, sp
 8009684:	f000 fad0 	bl	8009c28 <__ieee754_rem_pio2>
 8009688:	f000 0003 	and.w	r0, r0, #3
 800968c:	2801      	cmp	r0, #1
 800968e:	d00c      	beq.n	80096aa <sin+0x62>
 8009690:	2802      	cmp	r0, #2
 8009692:	d011      	beq.n	80096b8 <sin+0x70>
 8009694:	b9f0      	cbnz	r0, 80096d4 <sin+0x8c>
 8009696:	ed9d 1b02 	vldr	d1, [sp, #8]
 800969a:	ed9d 0b00 	vldr	d0, [sp]
 800969e:	2001      	movs	r0, #1
 80096a0:	f001 fa3a 	bl	800ab18 <__kernel_sin>
 80096a4:	ec51 0b10 	vmov	r0, r1, d0
 80096a8:	e7e6      	b.n	8009678 <sin+0x30>
 80096aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096ae:	ed9d 0b00 	vldr	d0, [sp]
 80096b2:	f000 fe19 	bl	800a2e8 <__kernel_cos>
 80096b6:	e7f5      	b.n	80096a4 <sin+0x5c>
 80096b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096bc:	ed9d 0b00 	vldr	d0, [sp]
 80096c0:	2001      	movs	r0, #1
 80096c2:	f001 fa29 	bl	800ab18 <__kernel_sin>
 80096c6:	ec53 2b10 	vmov	r2, r3, d0
 80096ca:	ee10 0a10 	vmov	r0, s0
 80096ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80096d2:	e7d1      	b.n	8009678 <sin+0x30>
 80096d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096d8:	ed9d 0b00 	vldr	d0, [sp]
 80096dc:	f000 fe04 	bl	800a2e8 <__kernel_cos>
 80096e0:	e7f1      	b.n	80096c6 <sin+0x7e>
 80096e2:	bf00      	nop
 80096e4:	f3af 8000 	nop.w
	...
 80096f0:	3fe921fb 	.word	0x3fe921fb
 80096f4:	7fefffff 	.word	0x7fefffff

080096f8 <acos>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	ed2d 8b02 	vpush	{d8}
 80096fe:	ec55 4b10 	vmov	r4, r5, d0
 8009702:	f000 f831 	bl	8009768 <__ieee754_acos>
 8009706:	4622      	mov	r2, r4
 8009708:	462b      	mov	r3, r5
 800970a:	4620      	mov	r0, r4
 800970c:	4629      	mov	r1, r5
 800970e:	eeb0 8a40 	vmov.f32	s16, s0
 8009712:	eef0 8a60 	vmov.f32	s17, s1
 8009716:	f7f7 fa11 	bl	8000b3c <__aeabi_dcmpun>
 800971a:	b9a8      	cbnz	r0, 8009748 <acos+0x50>
 800971c:	ec45 4b10 	vmov	d0, r4, r5
 8009720:	f001 fab8 	bl	800ac94 <fabs>
 8009724:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <acos+0x60>)
 8009726:	ec51 0b10 	vmov	r0, r1, d0
 800972a:	2200      	movs	r2, #0
 800972c:	f7f7 f9fc 	bl	8000b28 <__aeabi_dcmpgt>
 8009730:	b150      	cbz	r0, 8009748 <acos+0x50>
 8009732:	f7fd f817 	bl	8006764 <__errno>
 8009736:	ecbd 8b02 	vpop	{d8}
 800973a:	2321      	movs	r3, #33	; 0x21
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009742:	4806      	ldr	r0, [pc, #24]	; (800975c <acos+0x64>)
 8009744:	f001 bb30 	b.w	800ada8 <nan>
 8009748:	eeb0 0a48 	vmov.f32	s0, s16
 800974c:	eef0 0a68 	vmov.f32	s1, s17
 8009750:	ecbd 8b02 	vpop	{d8}
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	3ff00000 	.word	0x3ff00000
 800975c:	0800c120 	.word	0x0800c120

08009760 <atan2f>:
 8009760:	f000 bd20 	b.w	800a1a4 <__ieee754_atan2f>
 8009764:	0000      	movs	r0, r0
	...

08009768 <__ieee754_acos>:
 8009768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	ec55 4b10 	vmov	r4, r5, d0
 8009770:	49b7      	ldr	r1, [pc, #732]	; (8009a50 <__ieee754_acos+0x2e8>)
 8009772:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009776:	428b      	cmp	r3, r1
 8009778:	dd1b      	ble.n	80097b2 <__ieee754_acos+0x4a>
 800977a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800977e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009782:	4323      	orrs	r3, r4
 8009784:	d106      	bne.n	8009794 <__ieee754_acos+0x2c>
 8009786:	2d00      	cmp	r5, #0
 8009788:	f300 8211 	bgt.w	8009bae <__ieee754_acos+0x446>
 800978c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80099e8 <__ieee754_acos+0x280>
 8009790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009794:	ee10 2a10 	vmov	r2, s0
 8009798:	462b      	mov	r3, r5
 800979a:	ee10 0a10 	vmov	r0, s0
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 fd7a 	bl	8000298 <__aeabi_dsub>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	f7f7 f858 	bl	800085c <__aeabi_ddiv>
 80097ac:	ec41 0b10 	vmov	d0, r0, r1
 80097b0:	e7ee      	b.n	8009790 <__ieee754_acos+0x28>
 80097b2:	49a8      	ldr	r1, [pc, #672]	; (8009a54 <__ieee754_acos+0x2ec>)
 80097b4:	428b      	cmp	r3, r1
 80097b6:	f300 8087 	bgt.w	80098c8 <__ieee754_acos+0x160>
 80097ba:	4aa7      	ldr	r2, [pc, #668]	; (8009a58 <__ieee754_acos+0x2f0>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	f340 81f9 	ble.w	8009bb4 <__ieee754_acos+0x44c>
 80097c2:	ee10 2a10 	vmov	r2, s0
 80097c6:	ee10 0a10 	vmov	r0, s0
 80097ca:	462b      	mov	r3, r5
 80097cc:	4629      	mov	r1, r5
 80097ce:	f7f6 ff1b 	bl	8000608 <__aeabi_dmul>
 80097d2:	a387      	add	r3, pc, #540	; (adr r3, 80099f0 <__ieee754_acos+0x288>)
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	4606      	mov	r6, r0
 80097da:	460f      	mov	r7, r1
 80097dc:	f7f6 ff14 	bl	8000608 <__aeabi_dmul>
 80097e0:	a385      	add	r3, pc, #532	; (adr r3, 80099f8 <__ieee754_acos+0x290>)
 80097e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e6:	f7f6 fd59 	bl	800029c <__adddf3>
 80097ea:	4632      	mov	r2, r6
 80097ec:	463b      	mov	r3, r7
 80097ee:	f7f6 ff0b 	bl	8000608 <__aeabi_dmul>
 80097f2:	a383      	add	r3, pc, #524	; (adr r3, 8009a00 <__ieee754_acos+0x298>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f7f6 fd4e 	bl	8000298 <__aeabi_dsub>
 80097fc:	4632      	mov	r2, r6
 80097fe:	463b      	mov	r3, r7
 8009800:	f7f6 ff02 	bl	8000608 <__aeabi_dmul>
 8009804:	a380      	add	r3, pc, #512	; (adr r3, 8009a08 <__ieee754_acos+0x2a0>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	f7f6 fd47 	bl	800029c <__adddf3>
 800980e:	4632      	mov	r2, r6
 8009810:	463b      	mov	r3, r7
 8009812:	f7f6 fef9 	bl	8000608 <__aeabi_dmul>
 8009816:	a37e      	add	r3, pc, #504	; (adr r3, 8009a10 <__ieee754_acos+0x2a8>)
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	f7f6 fd3c 	bl	8000298 <__aeabi_dsub>
 8009820:	4632      	mov	r2, r6
 8009822:	463b      	mov	r3, r7
 8009824:	f7f6 fef0 	bl	8000608 <__aeabi_dmul>
 8009828:	a37b      	add	r3, pc, #492	; (adr r3, 8009a18 <__ieee754_acos+0x2b0>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 fd35 	bl	800029c <__adddf3>
 8009832:	4632      	mov	r2, r6
 8009834:	463b      	mov	r3, r7
 8009836:	f7f6 fee7 	bl	8000608 <__aeabi_dmul>
 800983a:	a379      	add	r3, pc, #484	; (adr r3, 8009a20 <__ieee754_acos+0x2b8>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	4680      	mov	r8, r0
 8009842:	4689      	mov	r9, r1
 8009844:	4630      	mov	r0, r6
 8009846:	4639      	mov	r1, r7
 8009848:	f7f6 fede 	bl	8000608 <__aeabi_dmul>
 800984c:	a376      	add	r3, pc, #472	; (adr r3, 8009a28 <__ieee754_acos+0x2c0>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fd21 	bl	8000298 <__aeabi_dsub>
 8009856:	4632      	mov	r2, r6
 8009858:	463b      	mov	r3, r7
 800985a:	f7f6 fed5 	bl	8000608 <__aeabi_dmul>
 800985e:	a374      	add	r3, pc, #464	; (adr r3, 8009a30 <__ieee754_acos+0x2c8>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7f6 fd1a 	bl	800029c <__adddf3>
 8009868:	4632      	mov	r2, r6
 800986a:	463b      	mov	r3, r7
 800986c:	f7f6 fecc 	bl	8000608 <__aeabi_dmul>
 8009870:	a371      	add	r3, pc, #452	; (adr r3, 8009a38 <__ieee754_acos+0x2d0>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fd0f 	bl	8000298 <__aeabi_dsub>
 800987a:	4632      	mov	r2, r6
 800987c:	463b      	mov	r3, r7
 800987e:	f7f6 fec3 	bl	8000608 <__aeabi_dmul>
 8009882:	4b76      	ldr	r3, [pc, #472]	; (8009a5c <__ieee754_acos+0x2f4>)
 8009884:	2200      	movs	r2, #0
 8009886:	f7f6 fd09 	bl	800029c <__adddf3>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	4640      	mov	r0, r8
 8009890:	4649      	mov	r1, r9
 8009892:	f7f6 ffe3 	bl	800085c <__aeabi_ddiv>
 8009896:	4622      	mov	r2, r4
 8009898:	462b      	mov	r3, r5
 800989a:	f7f6 feb5 	bl	8000608 <__aeabi_dmul>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	a167      	add	r1, pc, #412	; (adr r1, 8009a40 <__ieee754_acos+0x2d8>)
 80098a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098a8:	f7f6 fcf6 	bl	8000298 <__aeabi_dsub>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4620      	mov	r0, r4
 80098b2:	4629      	mov	r1, r5
 80098b4:	f7f6 fcf0 	bl	8000298 <__aeabi_dsub>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	a162      	add	r1, pc, #392	; (adr r1, 8009a48 <__ieee754_acos+0x2e0>)
 80098be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c2:	f7f6 fce9 	bl	8000298 <__aeabi_dsub>
 80098c6:	e771      	b.n	80097ac <__ieee754_acos+0x44>
 80098c8:	2d00      	cmp	r5, #0
 80098ca:	f280 80cb 	bge.w	8009a64 <__ieee754_acos+0x2fc>
 80098ce:	ee10 0a10 	vmov	r0, s0
 80098d2:	4b62      	ldr	r3, [pc, #392]	; (8009a5c <__ieee754_acos+0x2f4>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7f6 fce0 	bl	800029c <__adddf3>
 80098dc:	4b60      	ldr	r3, [pc, #384]	; (8009a60 <__ieee754_acos+0x2f8>)
 80098de:	2200      	movs	r2, #0
 80098e0:	f7f6 fe92 	bl	8000608 <__aeabi_dmul>
 80098e4:	a342      	add	r3, pc, #264	; (adr r3, 80099f0 <__ieee754_acos+0x288>)
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	4604      	mov	r4, r0
 80098ec:	460d      	mov	r5, r1
 80098ee:	f7f6 fe8b 	bl	8000608 <__aeabi_dmul>
 80098f2:	a341      	add	r3, pc, #260	; (adr r3, 80099f8 <__ieee754_acos+0x290>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 fcd0 	bl	800029c <__adddf3>
 80098fc:	4622      	mov	r2, r4
 80098fe:	462b      	mov	r3, r5
 8009900:	f7f6 fe82 	bl	8000608 <__aeabi_dmul>
 8009904:	a33e      	add	r3, pc, #248	; (adr r3, 8009a00 <__ieee754_acos+0x298>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f7f6 fcc5 	bl	8000298 <__aeabi_dsub>
 800990e:	4622      	mov	r2, r4
 8009910:	462b      	mov	r3, r5
 8009912:	f7f6 fe79 	bl	8000608 <__aeabi_dmul>
 8009916:	a33c      	add	r3, pc, #240	; (adr r3, 8009a08 <__ieee754_acos+0x2a0>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	f7f6 fcbe 	bl	800029c <__adddf3>
 8009920:	4622      	mov	r2, r4
 8009922:	462b      	mov	r3, r5
 8009924:	f7f6 fe70 	bl	8000608 <__aeabi_dmul>
 8009928:	a339      	add	r3, pc, #228	; (adr r3, 8009a10 <__ieee754_acos+0x2a8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fcb3 	bl	8000298 <__aeabi_dsub>
 8009932:	4622      	mov	r2, r4
 8009934:	462b      	mov	r3, r5
 8009936:	f7f6 fe67 	bl	8000608 <__aeabi_dmul>
 800993a:	a337      	add	r3, pc, #220	; (adr r3, 8009a18 <__ieee754_acos+0x2b0>)
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	f7f6 fcac 	bl	800029c <__adddf3>
 8009944:	4622      	mov	r2, r4
 8009946:	462b      	mov	r3, r5
 8009948:	f7f6 fe5e 	bl	8000608 <__aeabi_dmul>
 800994c:	ec45 4b10 	vmov	d0, r4, r5
 8009950:	4680      	mov	r8, r0
 8009952:	4689      	mov	r9, r1
 8009954:	f000 fb74 	bl	800a040 <__ieee754_sqrt>
 8009958:	a331      	add	r3, pc, #196	; (adr r3, 8009a20 <__ieee754_acos+0x2b8>)
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	4620      	mov	r0, r4
 8009960:	4629      	mov	r1, r5
 8009962:	ec57 6b10 	vmov	r6, r7, d0
 8009966:	f7f6 fe4f 	bl	8000608 <__aeabi_dmul>
 800996a:	a32f      	add	r3, pc, #188	; (adr r3, 8009a28 <__ieee754_acos+0x2c0>)
 800996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009970:	f7f6 fc92 	bl	8000298 <__aeabi_dsub>
 8009974:	4622      	mov	r2, r4
 8009976:	462b      	mov	r3, r5
 8009978:	f7f6 fe46 	bl	8000608 <__aeabi_dmul>
 800997c:	a32c      	add	r3, pc, #176	; (adr r3, 8009a30 <__ieee754_acos+0x2c8>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f7f6 fc8b 	bl	800029c <__adddf3>
 8009986:	4622      	mov	r2, r4
 8009988:	462b      	mov	r3, r5
 800998a:	f7f6 fe3d 	bl	8000608 <__aeabi_dmul>
 800998e:	a32a      	add	r3, pc, #168	; (adr r3, 8009a38 <__ieee754_acos+0x2d0>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 fc80 	bl	8000298 <__aeabi_dsub>
 8009998:	4622      	mov	r2, r4
 800999a:	462b      	mov	r3, r5
 800999c:	f7f6 fe34 	bl	8000608 <__aeabi_dmul>
 80099a0:	4b2e      	ldr	r3, [pc, #184]	; (8009a5c <__ieee754_acos+0x2f4>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	f7f6 fc7a 	bl	800029c <__adddf3>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4640      	mov	r0, r8
 80099ae:	4649      	mov	r1, r9
 80099b0:	f7f6 ff54 	bl	800085c <__aeabi_ddiv>
 80099b4:	4632      	mov	r2, r6
 80099b6:	463b      	mov	r3, r7
 80099b8:	f7f6 fe26 	bl	8000608 <__aeabi_dmul>
 80099bc:	a320      	add	r3, pc, #128	; (adr r3, 8009a40 <__ieee754_acos+0x2d8>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 fc69 	bl	8000298 <__aeabi_dsub>
 80099c6:	4632      	mov	r2, r6
 80099c8:	463b      	mov	r3, r7
 80099ca:	f7f6 fc67 	bl	800029c <__adddf3>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	f7f6 fc63 	bl	800029c <__adddf3>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	a103      	add	r1, pc, #12	; (adr r1, 80099e8 <__ieee754_acos+0x280>)
 80099dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099e0:	e76f      	b.n	80098c2 <__ieee754_acos+0x15a>
 80099e2:	bf00      	nop
 80099e4:	f3af 8000 	nop.w
 80099e8:	54442d18 	.word	0x54442d18
 80099ec:	400921fb 	.word	0x400921fb
 80099f0:	0dfdf709 	.word	0x0dfdf709
 80099f4:	3f023de1 	.word	0x3f023de1
 80099f8:	7501b288 	.word	0x7501b288
 80099fc:	3f49efe0 	.word	0x3f49efe0
 8009a00:	b5688f3b 	.word	0xb5688f3b
 8009a04:	3fa48228 	.word	0x3fa48228
 8009a08:	0e884455 	.word	0x0e884455
 8009a0c:	3fc9c155 	.word	0x3fc9c155
 8009a10:	03eb6f7d 	.word	0x03eb6f7d
 8009a14:	3fd4d612 	.word	0x3fd4d612
 8009a18:	55555555 	.word	0x55555555
 8009a1c:	3fc55555 	.word	0x3fc55555
 8009a20:	b12e9282 	.word	0xb12e9282
 8009a24:	3fb3b8c5 	.word	0x3fb3b8c5
 8009a28:	1b8d0159 	.word	0x1b8d0159
 8009a2c:	3fe6066c 	.word	0x3fe6066c
 8009a30:	9c598ac8 	.word	0x9c598ac8
 8009a34:	40002ae5 	.word	0x40002ae5
 8009a38:	1c8a2d4b 	.word	0x1c8a2d4b
 8009a3c:	40033a27 	.word	0x40033a27
 8009a40:	33145c07 	.word	0x33145c07
 8009a44:	3c91a626 	.word	0x3c91a626
 8009a48:	54442d18 	.word	0x54442d18
 8009a4c:	3ff921fb 	.word	0x3ff921fb
 8009a50:	3fefffff 	.word	0x3fefffff
 8009a54:	3fdfffff 	.word	0x3fdfffff
 8009a58:	3c600000 	.word	0x3c600000
 8009a5c:	3ff00000 	.word	0x3ff00000
 8009a60:	3fe00000 	.word	0x3fe00000
 8009a64:	ee10 2a10 	vmov	r2, s0
 8009a68:	462b      	mov	r3, r5
 8009a6a:	496d      	ldr	r1, [pc, #436]	; (8009c20 <__ieee754_acos+0x4b8>)
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f7f6 fc13 	bl	8000298 <__aeabi_dsub>
 8009a72:	4b6c      	ldr	r3, [pc, #432]	; (8009c24 <__ieee754_acos+0x4bc>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	f7f6 fdc7 	bl	8000608 <__aeabi_dmul>
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	460d      	mov	r5, r1
 8009a7e:	ec45 4b10 	vmov	d0, r4, r5
 8009a82:	f000 fadd 	bl	800a040 <__ieee754_sqrt>
 8009a86:	a34e      	add	r3, pc, #312	; (adr r3, 8009bc0 <__ieee754_acos+0x458>)
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	ec59 8b10 	vmov	r8, r9, d0
 8009a94:	f7f6 fdb8 	bl	8000608 <__aeabi_dmul>
 8009a98:	a34b      	add	r3, pc, #300	; (adr r3, 8009bc8 <__ieee754_acos+0x460>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f7f6 fbfd 	bl	800029c <__adddf3>
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	462b      	mov	r3, r5
 8009aa6:	f7f6 fdaf 	bl	8000608 <__aeabi_dmul>
 8009aaa:	a349      	add	r3, pc, #292	; (adr r3, 8009bd0 <__ieee754_acos+0x468>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f7f6 fbf2 	bl	8000298 <__aeabi_dsub>
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	f7f6 fda6 	bl	8000608 <__aeabi_dmul>
 8009abc:	a346      	add	r3, pc, #280	; (adr r3, 8009bd8 <__ieee754_acos+0x470>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fbeb 	bl	800029c <__adddf3>
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	462b      	mov	r3, r5
 8009aca:	f7f6 fd9d 	bl	8000608 <__aeabi_dmul>
 8009ace:	a344      	add	r3, pc, #272	; (adr r3, 8009be0 <__ieee754_acos+0x478>)
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f7f6 fbe0 	bl	8000298 <__aeabi_dsub>
 8009ad8:	4622      	mov	r2, r4
 8009ada:	462b      	mov	r3, r5
 8009adc:	f7f6 fd94 	bl	8000608 <__aeabi_dmul>
 8009ae0:	a341      	add	r3, pc, #260	; (adr r3, 8009be8 <__ieee754_acos+0x480>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fbd9 	bl	800029c <__adddf3>
 8009aea:	4622      	mov	r2, r4
 8009aec:	462b      	mov	r3, r5
 8009aee:	f7f6 fd8b 	bl	8000608 <__aeabi_dmul>
 8009af2:	a33f      	add	r3, pc, #252	; (adr r3, 8009bf0 <__ieee754_acos+0x488>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	4682      	mov	sl, r0
 8009afa:	468b      	mov	fp, r1
 8009afc:	4620      	mov	r0, r4
 8009afe:	4629      	mov	r1, r5
 8009b00:	f7f6 fd82 	bl	8000608 <__aeabi_dmul>
 8009b04:	a33c      	add	r3, pc, #240	; (adr r3, 8009bf8 <__ieee754_acos+0x490>)
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	f7f6 fbc5 	bl	8000298 <__aeabi_dsub>
 8009b0e:	4622      	mov	r2, r4
 8009b10:	462b      	mov	r3, r5
 8009b12:	f7f6 fd79 	bl	8000608 <__aeabi_dmul>
 8009b16:	a33a      	add	r3, pc, #232	; (adr r3, 8009c00 <__ieee754_acos+0x498>)
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f7f6 fbbe 	bl	800029c <__adddf3>
 8009b20:	4622      	mov	r2, r4
 8009b22:	462b      	mov	r3, r5
 8009b24:	f7f6 fd70 	bl	8000608 <__aeabi_dmul>
 8009b28:	a337      	add	r3, pc, #220	; (adr r3, 8009c08 <__ieee754_acos+0x4a0>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7f6 fbb3 	bl	8000298 <__aeabi_dsub>
 8009b32:	4622      	mov	r2, r4
 8009b34:	462b      	mov	r3, r5
 8009b36:	f7f6 fd67 	bl	8000608 <__aeabi_dmul>
 8009b3a:	4b39      	ldr	r3, [pc, #228]	; (8009c20 <__ieee754_acos+0x4b8>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f7f6 fbad 	bl	800029c <__adddf3>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4650      	mov	r0, sl
 8009b48:	4659      	mov	r1, fp
 8009b4a:	f7f6 fe87 	bl	800085c <__aeabi_ddiv>
 8009b4e:	4642      	mov	r2, r8
 8009b50:	464b      	mov	r3, r9
 8009b52:	f7f6 fd59 	bl	8000608 <__aeabi_dmul>
 8009b56:	2600      	movs	r6, #0
 8009b58:	4682      	mov	sl, r0
 8009b5a:	468b      	mov	fp, r1
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	464b      	mov	r3, r9
 8009b60:	4630      	mov	r0, r6
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f6 fd50 	bl	8000608 <__aeabi_dmul>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f6 fb92 	bl	8000298 <__aeabi_dsub>
 8009b74:	4632      	mov	r2, r6
 8009b76:	4604      	mov	r4, r0
 8009b78:	460d      	mov	r5, r1
 8009b7a:	464b      	mov	r3, r9
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	4649      	mov	r1, r9
 8009b80:	f7f6 fb8c 	bl	800029c <__adddf3>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4620      	mov	r0, r4
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	f7f6 fe66 	bl	800085c <__aeabi_ddiv>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4650      	mov	r0, sl
 8009b96:	4659      	mov	r1, fp
 8009b98:	f7f6 fb80 	bl	800029c <__adddf3>
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	464b      	mov	r3, r9
 8009ba0:	f7f6 fb7c 	bl	800029c <__adddf3>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	f7f6 fb78 	bl	800029c <__adddf3>
 8009bac:	e5fe      	b.n	80097ac <__ieee754_acos+0x44>
 8009bae:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8009c10 <__ieee754_acos+0x4a8>
 8009bb2:	e5ed      	b.n	8009790 <__ieee754_acos+0x28>
 8009bb4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8009c18 <__ieee754_acos+0x4b0>
 8009bb8:	e5ea      	b.n	8009790 <__ieee754_acos+0x28>
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	0dfdf709 	.word	0x0dfdf709
 8009bc4:	3f023de1 	.word	0x3f023de1
 8009bc8:	7501b288 	.word	0x7501b288
 8009bcc:	3f49efe0 	.word	0x3f49efe0
 8009bd0:	b5688f3b 	.word	0xb5688f3b
 8009bd4:	3fa48228 	.word	0x3fa48228
 8009bd8:	0e884455 	.word	0x0e884455
 8009bdc:	3fc9c155 	.word	0x3fc9c155
 8009be0:	03eb6f7d 	.word	0x03eb6f7d
 8009be4:	3fd4d612 	.word	0x3fd4d612
 8009be8:	55555555 	.word	0x55555555
 8009bec:	3fc55555 	.word	0x3fc55555
 8009bf0:	b12e9282 	.word	0xb12e9282
 8009bf4:	3fb3b8c5 	.word	0x3fb3b8c5
 8009bf8:	1b8d0159 	.word	0x1b8d0159
 8009bfc:	3fe6066c 	.word	0x3fe6066c
 8009c00:	9c598ac8 	.word	0x9c598ac8
 8009c04:	40002ae5 	.word	0x40002ae5
 8009c08:	1c8a2d4b 	.word	0x1c8a2d4b
 8009c0c:	40033a27 	.word	0x40033a27
	...
 8009c18:	54442d18 	.word	0x54442d18
 8009c1c:	3ff921fb 	.word	0x3ff921fb
 8009c20:	3ff00000 	.word	0x3ff00000
 8009c24:	3fe00000 	.word	0x3fe00000

08009c28 <__ieee754_rem_pio2>:
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	ed2d 8b02 	vpush	{d8}
 8009c30:	ec55 4b10 	vmov	r4, r5, d0
 8009c34:	4bca      	ldr	r3, [pc, #808]	; (8009f60 <__ieee754_rem_pio2+0x338>)
 8009c36:	b08b      	sub	sp, #44	; 0x2c
 8009c38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009c3c:	4598      	cmp	r8, r3
 8009c3e:	4682      	mov	sl, r0
 8009c40:	9502      	str	r5, [sp, #8]
 8009c42:	dc08      	bgt.n	8009c56 <__ieee754_rem_pio2+0x2e>
 8009c44:	2200      	movs	r2, #0
 8009c46:	2300      	movs	r3, #0
 8009c48:	ed80 0b00 	vstr	d0, [r0]
 8009c4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009c50:	f04f 0b00 	mov.w	fp, #0
 8009c54:	e028      	b.n	8009ca8 <__ieee754_rem_pio2+0x80>
 8009c56:	4bc3      	ldr	r3, [pc, #780]	; (8009f64 <__ieee754_rem_pio2+0x33c>)
 8009c58:	4598      	cmp	r8, r3
 8009c5a:	dc78      	bgt.n	8009d4e <__ieee754_rem_pio2+0x126>
 8009c5c:	9b02      	ldr	r3, [sp, #8]
 8009c5e:	4ec2      	ldr	r6, [pc, #776]	; (8009f68 <__ieee754_rem_pio2+0x340>)
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	ee10 0a10 	vmov	r0, s0
 8009c66:	a3b0      	add	r3, pc, #704	; (adr r3, 8009f28 <__ieee754_rem_pio2+0x300>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	dd39      	ble.n	8009ce4 <__ieee754_rem_pio2+0xbc>
 8009c70:	f7f6 fb12 	bl	8000298 <__aeabi_dsub>
 8009c74:	45b0      	cmp	r8, r6
 8009c76:	4604      	mov	r4, r0
 8009c78:	460d      	mov	r5, r1
 8009c7a:	d01b      	beq.n	8009cb4 <__ieee754_rem_pio2+0x8c>
 8009c7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x308>)
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f7f6 fb09 	bl	8000298 <__aeabi_dsub>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	e9ca 2300 	strd	r2, r3, [sl]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	4629      	mov	r1, r5
 8009c92:	f7f6 fb01 	bl	8000298 <__aeabi_dsub>
 8009c96:	a3a6      	add	r3, pc, #664	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x308>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f7f6 fafc 	bl	8000298 <__aeabi_dsub>
 8009ca0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ca4:	f04f 0b01 	mov.w	fp, #1
 8009ca8:	4658      	mov	r0, fp
 8009caa:	b00b      	add	sp, #44	; 0x2c
 8009cac:	ecbd 8b02 	vpop	{d8}
 8009cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009f38 <__ieee754_rem_pio2+0x310>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 faed 	bl	8000298 <__aeabi_dsub>
 8009cbe:	a3a0      	add	r3, pc, #640	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x318>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	460d      	mov	r5, r1
 8009cc8:	f7f6 fae6 	bl	8000298 <__aeabi_dsub>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	e9ca 2300 	strd	r2, r3, [sl]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f6 fade 	bl	8000298 <__aeabi_dsub>
 8009cdc:	a398      	add	r3, pc, #608	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x318>)
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	e7db      	b.n	8009c9c <__ieee754_rem_pio2+0x74>
 8009ce4:	f7f6 fada 	bl	800029c <__adddf3>
 8009ce8:	45b0      	cmp	r8, r6
 8009cea:	4604      	mov	r4, r0
 8009cec:	460d      	mov	r5, r1
 8009cee:	d016      	beq.n	8009d1e <__ieee754_rem_pio2+0xf6>
 8009cf0:	a38f      	add	r3, pc, #572	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x308>)
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f7f6 fad1 	bl	800029c <__adddf3>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	e9ca 2300 	strd	r2, r3, [sl]
 8009d02:	4620      	mov	r0, r4
 8009d04:	4629      	mov	r1, r5
 8009d06:	f7f6 fac7 	bl	8000298 <__aeabi_dsub>
 8009d0a:	a389      	add	r3, pc, #548	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x308>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f7f6 fac4 	bl	800029c <__adddf3>
 8009d14:	f04f 3bff 	mov.w	fp, #4294967295
 8009d18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d1c:	e7c4      	b.n	8009ca8 <__ieee754_rem_pio2+0x80>
 8009d1e:	a386      	add	r3, pc, #536	; (adr r3, 8009f38 <__ieee754_rem_pio2+0x310>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 faba 	bl	800029c <__adddf3>
 8009d28:	a385      	add	r3, pc, #532	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x318>)
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	4604      	mov	r4, r0
 8009d30:	460d      	mov	r5, r1
 8009d32:	f7f6 fab3 	bl	800029c <__adddf3>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	e9ca 2300 	strd	r2, r3, [sl]
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	f7f6 faa9 	bl	8000298 <__aeabi_dsub>
 8009d46:	a37e      	add	r3, pc, #504	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x318>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	e7e0      	b.n	8009d10 <__ieee754_rem_pio2+0xe8>
 8009d4e:	4b87      	ldr	r3, [pc, #540]	; (8009f6c <__ieee754_rem_pio2+0x344>)
 8009d50:	4598      	cmp	r8, r3
 8009d52:	f300 80d9 	bgt.w	8009f08 <__ieee754_rem_pio2+0x2e0>
 8009d56:	f000 ff9d 	bl	800ac94 <fabs>
 8009d5a:	ec55 4b10 	vmov	r4, r5, d0
 8009d5e:	ee10 0a10 	vmov	r0, s0
 8009d62:	a379      	add	r3, pc, #484	; (adr r3, 8009f48 <__ieee754_rem_pio2+0x320>)
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7f6 fc4d 	bl	8000608 <__aeabi_dmul>
 8009d6e:	4b80      	ldr	r3, [pc, #512]	; (8009f70 <__ieee754_rem_pio2+0x348>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	f7f6 fa93 	bl	800029c <__adddf3>
 8009d76:	f7f6 fef7 	bl	8000b68 <__aeabi_d2iz>
 8009d7a:	4683      	mov	fp, r0
 8009d7c:	f7f6 fbda 	bl	8000534 <__aeabi_i2d>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	ec43 2b18 	vmov	d8, r2, r3
 8009d88:	a367      	add	r3, pc, #412	; (adr r3, 8009f28 <__ieee754_rem_pio2+0x300>)
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f7f6 fc3b 	bl	8000608 <__aeabi_dmul>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	f7f6 fa7d 	bl	8000298 <__aeabi_dsub>
 8009d9e:	a364      	add	r3, pc, #400	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x308>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	4606      	mov	r6, r0
 8009da6:	460f      	mov	r7, r1
 8009da8:	ec51 0b18 	vmov	r0, r1, d8
 8009dac:	f7f6 fc2c 	bl	8000608 <__aeabi_dmul>
 8009db0:	f1bb 0f1f 	cmp.w	fp, #31
 8009db4:	4604      	mov	r4, r0
 8009db6:	460d      	mov	r5, r1
 8009db8:	dc0d      	bgt.n	8009dd6 <__ieee754_rem_pio2+0x1ae>
 8009dba:	4b6e      	ldr	r3, [pc, #440]	; (8009f74 <__ieee754_rem_pio2+0x34c>)
 8009dbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc4:	4543      	cmp	r3, r8
 8009dc6:	d006      	beq.n	8009dd6 <__ieee754_rem_pio2+0x1ae>
 8009dc8:	4622      	mov	r2, r4
 8009dca:	462b      	mov	r3, r5
 8009dcc:	4630      	mov	r0, r6
 8009dce:	4639      	mov	r1, r7
 8009dd0:	f7f6 fa62 	bl	8000298 <__aeabi_dsub>
 8009dd4:	e00f      	b.n	8009df6 <__ieee754_rem_pio2+0x1ce>
 8009dd6:	462b      	mov	r3, r5
 8009dd8:	4622      	mov	r2, r4
 8009dda:	4630      	mov	r0, r6
 8009ddc:	4639      	mov	r1, r7
 8009dde:	f7f6 fa5b 	bl	8000298 <__aeabi_dsub>
 8009de2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009de6:	9303      	str	r3, [sp, #12]
 8009de8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009dec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009df0:	f1b8 0f10 	cmp.w	r8, #16
 8009df4:	dc02      	bgt.n	8009dfc <__ieee754_rem_pio2+0x1d4>
 8009df6:	e9ca 0100 	strd	r0, r1, [sl]
 8009dfa:	e039      	b.n	8009e70 <__ieee754_rem_pio2+0x248>
 8009dfc:	a34e      	add	r3, pc, #312	; (adr r3, 8009f38 <__ieee754_rem_pio2+0x310>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	ec51 0b18 	vmov	r0, r1, d8
 8009e06:	f7f6 fbff 	bl	8000608 <__aeabi_dmul>
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	4630      	mov	r0, r6
 8009e14:	4639      	mov	r1, r7
 8009e16:	f7f6 fa3f 	bl	8000298 <__aeabi_dsub>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	4680      	mov	r8, r0
 8009e20:	4689      	mov	r9, r1
 8009e22:	4630      	mov	r0, r6
 8009e24:	4639      	mov	r1, r7
 8009e26:	f7f6 fa37 	bl	8000298 <__aeabi_dsub>
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	462b      	mov	r3, r5
 8009e2e:	f7f6 fa33 	bl	8000298 <__aeabi_dsub>
 8009e32:	a343      	add	r3, pc, #268	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x318>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	4604      	mov	r4, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	ec51 0b18 	vmov	r0, r1, d8
 8009e40:	f7f6 fbe2 	bl	8000608 <__aeabi_dmul>
 8009e44:	4622      	mov	r2, r4
 8009e46:	462b      	mov	r3, r5
 8009e48:	f7f6 fa26 	bl	8000298 <__aeabi_dsub>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4604      	mov	r4, r0
 8009e52:	460d      	mov	r5, r1
 8009e54:	4640      	mov	r0, r8
 8009e56:	4649      	mov	r1, r9
 8009e58:	f7f6 fa1e 	bl	8000298 <__aeabi_dsub>
 8009e5c:	9a03      	ldr	r2, [sp, #12]
 8009e5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	2b31      	cmp	r3, #49	; 0x31
 8009e66:	dc24      	bgt.n	8009eb2 <__ieee754_rem_pio2+0x28a>
 8009e68:	e9ca 0100 	strd	r0, r1, [sl]
 8009e6c:	4646      	mov	r6, r8
 8009e6e:	464f      	mov	r7, r9
 8009e70:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e74:	4630      	mov	r0, r6
 8009e76:	4642      	mov	r2, r8
 8009e78:	464b      	mov	r3, r9
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fa0c 	bl	8000298 <__aeabi_dsub>
 8009e80:	462b      	mov	r3, r5
 8009e82:	4622      	mov	r2, r4
 8009e84:	f7f6 fa08 	bl	8000298 <__aeabi_dsub>
 8009e88:	9b02      	ldr	r3, [sp, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e90:	f6bf af0a 	bge.w	8009ca8 <__ieee754_rem_pio2+0x80>
 8009e94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e98:	f8ca 3004 	str.w	r3, [sl, #4]
 8009e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ea0:	f8ca 8000 	str.w	r8, [sl]
 8009ea4:	f8ca 0008 	str.w	r0, [sl, #8]
 8009ea8:	f8ca 300c 	str.w	r3, [sl, #12]
 8009eac:	f1cb 0b00 	rsb	fp, fp, #0
 8009eb0:	e6fa      	b.n	8009ca8 <__ieee754_rem_pio2+0x80>
 8009eb2:	a327      	add	r3, pc, #156	; (adr r3, 8009f50 <__ieee754_rem_pio2+0x328>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	ec51 0b18 	vmov	r0, r1, d8
 8009ebc:	f7f6 fba4 	bl	8000608 <__aeabi_dmul>
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4640      	mov	r0, r8
 8009eca:	4649      	mov	r1, r9
 8009ecc:	f7f6 f9e4 	bl	8000298 <__aeabi_dsub>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 f9dc 	bl	8000298 <__aeabi_dsub>
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	462b      	mov	r3, r5
 8009ee4:	f7f6 f9d8 	bl	8000298 <__aeabi_dsub>
 8009ee8:	a31b      	add	r3, pc, #108	; (adr r3, 8009f58 <__ieee754_rem_pio2+0x330>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	4604      	mov	r4, r0
 8009ef0:	460d      	mov	r5, r1
 8009ef2:	ec51 0b18 	vmov	r0, r1, d8
 8009ef6:	f7f6 fb87 	bl	8000608 <__aeabi_dmul>
 8009efa:	4622      	mov	r2, r4
 8009efc:	462b      	mov	r3, r5
 8009efe:	f7f6 f9cb 	bl	8000298 <__aeabi_dsub>
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
 8009f06:	e75f      	b.n	8009dc8 <__ieee754_rem_pio2+0x1a0>
 8009f08:	4b1b      	ldr	r3, [pc, #108]	; (8009f78 <__ieee754_rem_pio2+0x350>)
 8009f0a:	4598      	cmp	r8, r3
 8009f0c:	dd36      	ble.n	8009f7c <__ieee754_rem_pio2+0x354>
 8009f0e:	ee10 2a10 	vmov	r2, s0
 8009f12:	462b      	mov	r3, r5
 8009f14:	4620      	mov	r0, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	f7f6 f9be 	bl	8000298 <__aeabi_dsub>
 8009f1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f20:	e9ca 0100 	strd	r0, r1, [sl]
 8009f24:	e694      	b.n	8009c50 <__ieee754_rem_pio2+0x28>
 8009f26:	bf00      	nop
 8009f28:	54400000 	.word	0x54400000
 8009f2c:	3ff921fb 	.word	0x3ff921fb
 8009f30:	1a626331 	.word	0x1a626331
 8009f34:	3dd0b461 	.word	0x3dd0b461
 8009f38:	1a600000 	.word	0x1a600000
 8009f3c:	3dd0b461 	.word	0x3dd0b461
 8009f40:	2e037073 	.word	0x2e037073
 8009f44:	3ba3198a 	.word	0x3ba3198a
 8009f48:	6dc9c883 	.word	0x6dc9c883
 8009f4c:	3fe45f30 	.word	0x3fe45f30
 8009f50:	2e000000 	.word	0x2e000000
 8009f54:	3ba3198a 	.word	0x3ba3198a
 8009f58:	252049c1 	.word	0x252049c1
 8009f5c:	397b839a 	.word	0x397b839a
 8009f60:	3fe921fb 	.word	0x3fe921fb
 8009f64:	4002d97b 	.word	0x4002d97b
 8009f68:	3ff921fb 	.word	0x3ff921fb
 8009f6c:	413921fb 	.word	0x413921fb
 8009f70:	3fe00000 	.word	0x3fe00000
 8009f74:	0800c28c 	.word	0x0800c28c
 8009f78:	7fefffff 	.word	0x7fefffff
 8009f7c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009f80:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009f84:	ee10 0a10 	vmov	r0, s0
 8009f88:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009f8c:	ee10 6a10 	vmov	r6, s0
 8009f90:	460f      	mov	r7, r1
 8009f92:	f7f6 fde9 	bl	8000b68 <__aeabi_d2iz>
 8009f96:	f7f6 facd 	bl	8000534 <__aeabi_i2d>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fa6:	f7f6 f977 	bl	8000298 <__aeabi_dsub>
 8009faa:	4b23      	ldr	r3, [pc, #140]	; (800a038 <__ieee754_rem_pio2+0x410>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	f7f6 fb2b 	bl	8000608 <__aeabi_dmul>
 8009fb2:	460f      	mov	r7, r1
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	f7f6 fdd7 	bl	8000b68 <__aeabi_d2iz>
 8009fba:	f7f6 fabb 	bl	8000534 <__aeabi_i2d>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009fca:	f7f6 f965 	bl	8000298 <__aeabi_dsub>
 8009fce:	4b1a      	ldr	r3, [pc, #104]	; (800a038 <__ieee754_rem_pio2+0x410>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f7f6 fb19 	bl	8000608 <__aeabi_dmul>
 8009fd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fda:	ad04      	add	r5, sp, #16
 8009fdc:	f04f 0803 	mov.w	r8, #3
 8009fe0:	46a9      	mov	r9, r5
 8009fe2:	2600      	movs	r6, #0
 8009fe4:	2700      	movs	r7, #0
 8009fe6:	4632      	mov	r2, r6
 8009fe8:	463b      	mov	r3, r7
 8009fea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009fee:	46c3      	mov	fp, r8
 8009ff0:	3d08      	subs	r5, #8
 8009ff2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ff6:	f7f6 fd6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d1f3      	bne.n	8009fe6 <__ieee754_rem_pio2+0x3be>
 8009ffe:	4b0f      	ldr	r3, [pc, #60]	; (800a03c <__ieee754_rem_pio2+0x414>)
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	2302      	movs	r3, #2
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	4622      	mov	r2, r4
 800a008:	465b      	mov	r3, fp
 800a00a:	4651      	mov	r1, sl
 800a00c:	4648      	mov	r0, r9
 800a00e:	f000 fa33 	bl	800a478 <__kernel_rem_pio2>
 800a012:	9b02      	ldr	r3, [sp, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	4683      	mov	fp, r0
 800a018:	f6bf ae46 	bge.w	8009ca8 <__ieee754_rem_pio2+0x80>
 800a01c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a020:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a024:	e9ca 2300 	strd	r2, r3, [sl]
 800a028:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a02c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a030:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a034:	e73a      	b.n	8009eac <__ieee754_rem_pio2+0x284>
 800a036:	bf00      	nop
 800a038:	41700000 	.word	0x41700000
 800a03c:	0800c30c 	.word	0x0800c30c

0800a040 <__ieee754_sqrt>:
 800a040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a044:	ec55 4b10 	vmov	r4, r5, d0
 800a048:	4e55      	ldr	r6, [pc, #340]	; (800a1a0 <__ieee754_sqrt+0x160>)
 800a04a:	43ae      	bics	r6, r5
 800a04c:	ee10 0a10 	vmov	r0, s0
 800a050:	ee10 3a10 	vmov	r3, s0
 800a054:	462a      	mov	r2, r5
 800a056:	4629      	mov	r1, r5
 800a058:	d110      	bne.n	800a07c <__ieee754_sqrt+0x3c>
 800a05a:	ee10 2a10 	vmov	r2, s0
 800a05e:	462b      	mov	r3, r5
 800a060:	f7f6 fad2 	bl	8000608 <__aeabi_dmul>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4620      	mov	r0, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	f7f6 f916 	bl	800029c <__adddf3>
 800a070:	4604      	mov	r4, r0
 800a072:	460d      	mov	r5, r1
 800a074:	ec45 4b10 	vmov	d0, r4, r5
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	dc10      	bgt.n	800a0a2 <__ieee754_sqrt+0x62>
 800a080:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a084:	4330      	orrs	r0, r6
 800a086:	d0f5      	beq.n	800a074 <__ieee754_sqrt+0x34>
 800a088:	b15d      	cbz	r5, 800a0a2 <__ieee754_sqrt+0x62>
 800a08a:	ee10 2a10 	vmov	r2, s0
 800a08e:	462b      	mov	r3, r5
 800a090:	ee10 0a10 	vmov	r0, s0
 800a094:	f7f6 f900 	bl	8000298 <__aeabi_dsub>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	f7f6 fbde 	bl	800085c <__aeabi_ddiv>
 800a0a0:	e7e6      	b.n	800a070 <__ieee754_sqrt+0x30>
 800a0a2:	1512      	asrs	r2, r2, #20
 800a0a4:	d074      	beq.n	800a190 <__ieee754_sqrt+0x150>
 800a0a6:	07d4      	lsls	r4, r2, #31
 800a0a8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a0ac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a0b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a0b4:	bf5e      	ittt	pl
 800a0b6:	0fda      	lsrpl	r2, r3, #31
 800a0b8:	005b      	lslpl	r3, r3, #1
 800a0ba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a0be:	2400      	movs	r4, #0
 800a0c0:	0fda      	lsrs	r2, r3, #31
 800a0c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a0c6:	107f      	asrs	r7, r7, #1
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	2516      	movs	r5, #22
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a0d2:	1886      	adds	r6, r0, r2
 800a0d4:	428e      	cmp	r6, r1
 800a0d6:	bfde      	ittt	le
 800a0d8:	1b89      	suble	r1, r1, r6
 800a0da:	18b0      	addle	r0, r6, r2
 800a0dc:	18a4      	addle	r4, r4, r2
 800a0de:	0049      	lsls	r1, r1, #1
 800a0e0:	3d01      	subs	r5, #1
 800a0e2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a0e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a0ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0ee:	d1f0      	bne.n	800a0d2 <__ieee754_sqrt+0x92>
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	f04f 0e20 	mov.w	lr, #32
 800a0f6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a0fa:	4281      	cmp	r1, r0
 800a0fc:	eb06 0c05 	add.w	ip, r6, r5
 800a100:	dc02      	bgt.n	800a108 <__ieee754_sqrt+0xc8>
 800a102:	d113      	bne.n	800a12c <__ieee754_sqrt+0xec>
 800a104:	459c      	cmp	ip, r3
 800a106:	d811      	bhi.n	800a12c <__ieee754_sqrt+0xec>
 800a108:	f1bc 0f00 	cmp.w	ip, #0
 800a10c:	eb0c 0506 	add.w	r5, ip, r6
 800a110:	da43      	bge.n	800a19a <__ieee754_sqrt+0x15a>
 800a112:	2d00      	cmp	r5, #0
 800a114:	db41      	blt.n	800a19a <__ieee754_sqrt+0x15a>
 800a116:	f100 0801 	add.w	r8, r0, #1
 800a11a:	1a09      	subs	r1, r1, r0
 800a11c:	459c      	cmp	ip, r3
 800a11e:	bf88      	it	hi
 800a120:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a124:	eba3 030c 	sub.w	r3, r3, ip
 800a128:	4432      	add	r2, r6
 800a12a:	4640      	mov	r0, r8
 800a12c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a130:	f1be 0e01 	subs.w	lr, lr, #1
 800a134:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a138:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a13c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a140:	d1db      	bne.n	800a0fa <__ieee754_sqrt+0xba>
 800a142:	430b      	orrs	r3, r1
 800a144:	d006      	beq.n	800a154 <__ieee754_sqrt+0x114>
 800a146:	1c50      	adds	r0, r2, #1
 800a148:	bf13      	iteet	ne
 800a14a:	3201      	addne	r2, #1
 800a14c:	3401      	addeq	r4, #1
 800a14e:	4672      	moveq	r2, lr
 800a150:	f022 0201 	bicne.w	r2, r2, #1
 800a154:	1063      	asrs	r3, r4, #1
 800a156:	0852      	lsrs	r2, r2, #1
 800a158:	07e1      	lsls	r1, r4, #31
 800a15a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a15e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a162:	bf48      	it	mi
 800a164:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a168:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a16c:	4614      	mov	r4, r2
 800a16e:	e781      	b.n	800a074 <__ieee754_sqrt+0x34>
 800a170:	0ad9      	lsrs	r1, r3, #11
 800a172:	3815      	subs	r0, #21
 800a174:	055b      	lsls	r3, r3, #21
 800a176:	2900      	cmp	r1, #0
 800a178:	d0fa      	beq.n	800a170 <__ieee754_sqrt+0x130>
 800a17a:	02cd      	lsls	r5, r1, #11
 800a17c:	d50a      	bpl.n	800a194 <__ieee754_sqrt+0x154>
 800a17e:	f1c2 0420 	rsb	r4, r2, #32
 800a182:	fa23 f404 	lsr.w	r4, r3, r4
 800a186:	1e55      	subs	r5, r2, #1
 800a188:	4093      	lsls	r3, r2
 800a18a:	4321      	orrs	r1, r4
 800a18c:	1b42      	subs	r2, r0, r5
 800a18e:	e78a      	b.n	800a0a6 <__ieee754_sqrt+0x66>
 800a190:	4610      	mov	r0, r2
 800a192:	e7f0      	b.n	800a176 <__ieee754_sqrt+0x136>
 800a194:	0049      	lsls	r1, r1, #1
 800a196:	3201      	adds	r2, #1
 800a198:	e7ef      	b.n	800a17a <__ieee754_sqrt+0x13a>
 800a19a:	4680      	mov	r8, r0
 800a19c:	e7bd      	b.n	800a11a <__ieee754_sqrt+0xda>
 800a19e:	bf00      	nop
 800a1a0:	7ff00000 	.word	0x7ff00000

0800a1a4 <__ieee754_atan2f>:
 800a1a4:	ee10 2a90 	vmov	r2, s1
 800a1a8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a1ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	eef0 7a40 	vmov.f32	s15, s0
 800a1b6:	dc06      	bgt.n	800a1c6 <__ieee754_atan2f+0x22>
 800a1b8:	ee10 0a10 	vmov	r0, s0
 800a1bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a1c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1c4:	dd04      	ble.n	800a1d0 <__ieee754_atan2f+0x2c>
 800a1c6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a1ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a1ce:	bd10      	pop	{r4, pc}
 800a1d0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a1d4:	d103      	bne.n	800a1de <__ieee754_atan2f+0x3a>
 800a1d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1da:	f000 be73 	b.w	800aec4 <atanf>
 800a1de:	1794      	asrs	r4, r2, #30
 800a1e0:	f004 0402 	and.w	r4, r4, #2
 800a1e4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a1e8:	b943      	cbnz	r3, 800a1fc <__ieee754_atan2f+0x58>
 800a1ea:	2c02      	cmp	r4, #2
 800a1ec:	d05e      	beq.n	800a2ac <__ieee754_atan2f+0x108>
 800a1ee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a2c0 <__ieee754_atan2f+0x11c>
 800a1f2:	2c03      	cmp	r4, #3
 800a1f4:	bf08      	it	eq
 800a1f6:	eef0 7a47 	vmoveq.f32	s15, s14
 800a1fa:	e7e6      	b.n	800a1ca <__ieee754_atan2f+0x26>
 800a1fc:	b941      	cbnz	r1, 800a210 <__ieee754_atan2f+0x6c>
 800a1fe:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a2c4 <__ieee754_atan2f+0x120>
 800a202:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a2c8 <__ieee754_atan2f+0x124>
 800a206:	2800      	cmp	r0, #0
 800a208:	bfb8      	it	lt
 800a20a:	eef0 7a40 	vmovlt.f32	s15, s0
 800a20e:	e7dc      	b.n	800a1ca <__ieee754_atan2f+0x26>
 800a210:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a214:	d110      	bne.n	800a238 <__ieee754_atan2f+0x94>
 800a216:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a21a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a21e:	d107      	bne.n	800a230 <__ieee754_atan2f+0x8c>
 800a220:	2c02      	cmp	r4, #2
 800a222:	d846      	bhi.n	800a2b2 <__ieee754_atan2f+0x10e>
 800a224:	4b29      	ldr	r3, [pc, #164]	; (800a2cc <__ieee754_atan2f+0x128>)
 800a226:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a22a:	edd4 7a00 	vldr	s15, [r4]
 800a22e:	e7cc      	b.n	800a1ca <__ieee754_atan2f+0x26>
 800a230:	2c02      	cmp	r4, #2
 800a232:	d841      	bhi.n	800a2b8 <__ieee754_atan2f+0x114>
 800a234:	4b26      	ldr	r3, [pc, #152]	; (800a2d0 <__ieee754_atan2f+0x12c>)
 800a236:	e7f6      	b.n	800a226 <__ieee754_atan2f+0x82>
 800a238:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a23c:	d0df      	beq.n	800a1fe <__ieee754_atan2f+0x5a>
 800a23e:	1a5b      	subs	r3, r3, r1
 800a240:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a244:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a248:	da1a      	bge.n	800a280 <__ieee754_atan2f+0xdc>
 800a24a:	2a00      	cmp	r2, #0
 800a24c:	da01      	bge.n	800a252 <__ieee754_atan2f+0xae>
 800a24e:	313c      	adds	r1, #60	; 0x3c
 800a250:	db19      	blt.n	800a286 <__ieee754_atan2f+0xe2>
 800a252:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a256:	f000 ff09 	bl	800b06c <fabsf>
 800a25a:	f000 fe33 	bl	800aec4 <atanf>
 800a25e:	eef0 7a40 	vmov.f32	s15, s0
 800a262:	2c01      	cmp	r4, #1
 800a264:	d012      	beq.n	800a28c <__ieee754_atan2f+0xe8>
 800a266:	2c02      	cmp	r4, #2
 800a268:	d017      	beq.n	800a29a <__ieee754_atan2f+0xf6>
 800a26a:	2c00      	cmp	r4, #0
 800a26c:	d0ad      	beq.n	800a1ca <__ieee754_atan2f+0x26>
 800a26e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a2d4 <__ieee754_atan2f+0x130>
 800a272:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a276:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a2d8 <__ieee754_atan2f+0x134>
 800a27a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a27e:	e7a4      	b.n	800a1ca <__ieee754_atan2f+0x26>
 800a280:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a2c4 <__ieee754_atan2f+0x120>
 800a284:	e7ed      	b.n	800a262 <__ieee754_atan2f+0xbe>
 800a286:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a2dc <__ieee754_atan2f+0x138>
 800a28a:	e7ea      	b.n	800a262 <__ieee754_atan2f+0xbe>
 800a28c:	ee17 3a90 	vmov	r3, s15
 800a290:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a294:	ee07 3a90 	vmov	s15, r3
 800a298:	e797      	b.n	800a1ca <__ieee754_atan2f+0x26>
 800a29a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a2d4 <__ieee754_atan2f+0x130>
 800a29e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2a2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a2d8 <__ieee754_atan2f+0x134>
 800a2a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a2aa:	e78e      	b.n	800a1ca <__ieee754_atan2f+0x26>
 800a2ac:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a2d8 <__ieee754_atan2f+0x134>
 800a2b0:	e78b      	b.n	800a1ca <__ieee754_atan2f+0x26>
 800a2b2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a2e0 <__ieee754_atan2f+0x13c>
 800a2b6:	e788      	b.n	800a1ca <__ieee754_atan2f+0x26>
 800a2b8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a2dc <__ieee754_atan2f+0x138>
 800a2bc:	e785      	b.n	800a1ca <__ieee754_atan2f+0x26>
 800a2be:	bf00      	nop
 800a2c0:	c0490fdb 	.word	0xc0490fdb
 800a2c4:	3fc90fdb 	.word	0x3fc90fdb
 800a2c8:	bfc90fdb 	.word	0xbfc90fdb
 800a2cc:	0800c414 	.word	0x0800c414
 800a2d0:	0800c420 	.word	0x0800c420
 800a2d4:	33bbbd2e 	.word	0x33bbbd2e
 800a2d8:	40490fdb 	.word	0x40490fdb
 800a2dc:	00000000 	.word	0x00000000
 800a2e0:	3f490fdb 	.word	0x3f490fdb
 800a2e4:	00000000 	.word	0x00000000

0800a2e8 <__kernel_cos>:
 800a2e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	ec57 6b10 	vmov	r6, r7, d0
 800a2f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a2f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a2f8:	ed8d 1b00 	vstr	d1, [sp]
 800a2fc:	da07      	bge.n	800a30e <__kernel_cos+0x26>
 800a2fe:	ee10 0a10 	vmov	r0, s0
 800a302:	4639      	mov	r1, r7
 800a304:	f7f6 fc30 	bl	8000b68 <__aeabi_d2iz>
 800a308:	2800      	cmp	r0, #0
 800a30a:	f000 8088 	beq.w	800a41e <__kernel_cos+0x136>
 800a30e:	4632      	mov	r2, r6
 800a310:	463b      	mov	r3, r7
 800a312:	4630      	mov	r0, r6
 800a314:	4639      	mov	r1, r7
 800a316:	f7f6 f977 	bl	8000608 <__aeabi_dmul>
 800a31a:	4b51      	ldr	r3, [pc, #324]	; (800a460 <__kernel_cos+0x178>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	f7f6 f971 	bl	8000608 <__aeabi_dmul>
 800a326:	a340      	add	r3, pc, #256	; (adr r3, 800a428 <__kernel_cos+0x140>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	4682      	mov	sl, r0
 800a32e:	468b      	mov	fp, r1
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f6 f968 	bl	8000608 <__aeabi_dmul>
 800a338:	a33d      	add	r3, pc, #244	; (adr r3, 800a430 <__kernel_cos+0x148>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f7f5 ffad 	bl	800029c <__adddf3>
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	f7f6 f95f 	bl	8000608 <__aeabi_dmul>
 800a34a:	a33b      	add	r3, pc, #236	; (adr r3, 800a438 <__kernel_cos+0x150>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ffa2 	bl	8000298 <__aeabi_dsub>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	f7f6 f956 	bl	8000608 <__aeabi_dmul>
 800a35c:	a338      	add	r3, pc, #224	; (adr r3, 800a440 <__kernel_cos+0x158>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff9b 	bl	800029c <__adddf3>
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	f7f6 f94d 	bl	8000608 <__aeabi_dmul>
 800a36e:	a336      	add	r3, pc, #216	; (adr r3, 800a448 <__kernel_cos+0x160>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 ff90 	bl	8000298 <__aeabi_dsub>
 800a378:	4622      	mov	r2, r4
 800a37a:	462b      	mov	r3, r5
 800a37c:	f7f6 f944 	bl	8000608 <__aeabi_dmul>
 800a380:	a333      	add	r3, pc, #204	; (adr r3, 800a450 <__kernel_cos+0x168>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f5 ff89 	bl	800029c <__adddf3>
 800a38a:	4622      	mov	r2, r4
 800a38c:	462b      	mov	r3, r5
 800a38e:	f7f6 f93b 	bl	8000608 <__aeabi_dmul>
 800a392:	4622      	mov	r2, r4
 800a394:	462b      	mov	r3, r5
 800a396:	f7f6 f937 	bl	8000608 <__aeabi_dmul>
 800a39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a39e:	4604      	mov	r4, r0
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f6 f92f 	bl	8000608 <__aeabi_dmul>
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f7f5 ff71 	bl	8000298 <__aeabi_dsub>
 800a3b6:	4b2b      	ldr	r3, [pc, #172]	; (800a464 <__kernel_cos+0x17c>)
 800a3b8:	4598      	cmp	r8, r3
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	dc10      	bgt.n	800a3e2 <__kernel_cos+0xfa>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4650      	mov	r0, sl
 800a3c6:	4659      	mov	r1, fp
 800a3c8:	f7f5 ff66 	bl	8000298 <__aeabi_dsub>
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4926      	ldr	r1, [pc, #152]	; (800a468 <__kernel_cos+0x180>)
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	f7f5 ff60 	bl	8000298 <__aeabi_dsub>
 800a3d8:	ec41 0b10 	vmov	d0, r0, r1
 800a3dc:	b003      	add	sp, #12
 800a3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e2:	4b22      	ldr	r3, [pc, #136]	; (800a46c <__kernel_cos+0x184>)
 800a3e4:	4920      	ldr	r1, [pc, #128]	; (800a468 <__kernel_cos+0x180>)
 800a3e6:	4598      	cmp	r8, r3
 800a3e8:	bfcc      	ite	gt
 800a3ea:	4d21      	ldrgt	r5, [pc, #132]	; (800a470 <__kernel_cos+0x188>)
 800a3ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a3f0:	2400      	movs	r4, #0
 800a3f2:	4622      	mov	r2, r4
 800a3f4:	462b      	mov	r3, r5
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	f7f5 ff4e 	bl	8000298 <__aeabi_dsub>
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4680      	mov	r8, r0
 800a400:	4689      	mov	r9, r1
 800a402:	462b      	mov	r3, r5
 800a404:	4650      	mov	r0, sl
 800a406:	4659      	mov	r1, fp
 800a408:	f7f5 ff46 	bl	8000298 <__aeabi_dsub>
 800a40c:	4632      	mov	r2, r6
 800a40e:	463b      	mov	r3, r7
 800a410:	f7f5 ff42 	bl	8000298 <__aeabi_dsub>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	4640      	mov	r0, r8
 800a41a:	4649      	mov	r1, r9
 800a41c:	e7da      	b.n	800a3d4 <__kernel_cos+0xec>
 800a41e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a458 <__kernel_cos+0x170>
 800a422:	e7db      	b.n	800a3dc <__kernel_cos+0xf4>
 800a424:	f3af 8000 	nop.w
 800a428:	be8838d4 	.word	0xbe8838d4
 800a42c:	bda8fae9 	.word	0xbda8fae9
 800a430:	bdb4b1c4 	.word	0xbdb4b1c4
 800a434:	3e21ee9e 	.word	0x3e21ee9e
 800a438:	809c52ad 	.word	0x809c52ad
 800a43c:	3e927e4f 	.word	0x3e927e4f
 800a440:	19cb1590 	.word	0x19cb1590
 800a444:	3efa01a0 	.word	0x3efa01a0
 800a448:	16c15177 	.word	0x16c15177
 800a44c:	3f56c16c 	.word	0x3f56c16c
 800a450:	5555554c 	.word	0x5555554c
 800a454:	3fa55555 	.word	0x3fa55555
 800a458:	00000000 	.word	0x00000000
 800a45c:	3ff00000 	.word	0x3ff00000
 800a460:	3fe00000 	.word	0x3fe00000
 800a464:	3fd33332 	.word	0x3fd33332
 800a468:	3ff00000 	.word	0x3ff00000
 800a46c:	3fe90000 	.word	0x3fe90000
 800a470:	3fd20000 	.word	0x3fd20000
 800a474:	00000000 	.word	0x00000000

0800a478 <__kernel_rem_pio2>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	ed2d 8b02 	vpush	{d8}
 800a480:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a484:	f112 0f14 	cmn.w	r2, #20
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	9101      	str	r1, [sp, #4]
 800a48c:	4bc4      	ldr	r3, [pc, #784]	; (800a7a0 <__kernel_rem_pio2+0x328>)
 800a48e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a490:	900b      	str	r0, [sp, #44]	; 0x2c
 800a492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a496:	9302      	str	r3, [sp, #8]
 800a498:	9b08      	ldr	r3, [sp, #32]
 800a49a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a49e:	bfa8      	it	ge
 800a4a0:	1ed4      	subge	r4, r2, #3
 800a4a2:	9306      	str	r3, [sp, #24]
 800a4a4:	bfb2      	itee	lt
 800a4a6:	2400      	movlt	r4, #0
 800a4a8:	2318      	movge	r3, #24
 800a4aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800a4ae:	f06f 0317 	mvn.w	r3, #23
 800a4b2:	fb04 3303 	mla	r3, r4, r3, r3
 800a4b6:	eb03 0a02 	add.w	sl, r3, r2
 800a4ba:	9b02      	ldr	r3, [sp, #8]
 800a4bc:	9a06      	ldr	r2, [sp, #24]
 800a4be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a790 <__kernel_rem_pio2+0x318>
 800a4c2:	eb03 0802 	add.w	r8, r3, r2
 800a4c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a4c8:	1aa7      	subs	r7, r4, r2
 800a4ca:	ae22      	add	r6, sp, #136	; 0x88
 800a4cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a4d0:	2500      	movs	r5, #0
 800a4d2:	4545      	cmp	r5, r8
 800a4d4:	dd13      	ble.n	800a4fe <__kernel_rem_pio2+0x86>
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a790 <__kernel_rem_pio2+0x318>
 800a4dc:	aa22      	add	r2, sp, #136	; 0x88
 800a4de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a4e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a4e6:	f04f 0800 	mov.w	r8, #0
 800a4ea:	9b02      	ldr	r3, [sp, #8]
 800a4ec:	4598      	cmp	r8, r3
 800a4ee:	dc2f      	bgt.n	800a550 <__kernel_rem_pio2+0xd8>
 800a4f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a4f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a4f8:	462f      	mov	r7, r5
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	e01b      	b.n	800a536 <__kernel_rem_pio2+0xbe>
 800a4fe:	42ef      	cmn	r7, r5
 800a500:	d407      	bmi.n	800a512 <__kernel_rem_pio2+0x9a>
 800a502:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a506:	f7f6 f815 	bl	8000534 <__aeabi_i2d>
 800a50a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a50e:	3501      	adds	r5, #1
 800a510:	e7df      	b.n	800a4d2 <__kernel_rem_pio2+0x5a>
 800a512:	ec51 0b18 	vmov	r0, r1, d8
 800a516:	e7f8      	b.n	800a50a <__kernel_rem_pio2+0x92>
 800a518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a51c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a520:	f7f6 f872 	bl	8000608 <__aeabi_dmul>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a52c:	f7f5 feb6 	bl	800029c <__adddf3>
 800a530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a534:	3601      	adds	r6, #1
 800a536:	9b06      	ldr	r3, [sp, #24]
 800a538:	429e      	cmp	r6, r3
 800a53a:	f1a7 0708 	sub.w	r7, r7, #8
 800a53e:	ddeb      	ble.n	800a518 <__kernel_rem_pio2+0xa0>
 800a540:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a544:	f108 0801 	add.w	r8, r8, #1
 800a548:	ecab 7b02 	vstmia	fp!, {d7}
 800a54c:	3508      	adds	r5, #8
 800a54e:	e7cc      	b.n	800a4ea <__kernel_rem_pio2+0x72>
 800a550:	9b02      	ldr	r3, [sp, #8]
 800a552:	aa0e      	add	r2, sp, #56	; 0x38
 800a554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a558:	930d      	str	r3, [sp, #52]	; 0x34
 800a55a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a55c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a560:	9c02      	ldr	r4, [sp, #8]
 800a562:	930c      	str	r3, [sp, #48]	; 0x30
 800a564:	00e3      	lsls	r3, r4, #3
 800a566:	930a      	str	r3, [sp, #40]	; 0x28
 800a568:	ab9a      	add	r3, sp, #616	; 0x268
 800a56a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a56e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a572:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a576:	ab72      	add	r3, sp, #456	; 0x1c8
 800a578:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a57c:	46c3      	mov	fp, r8
 800a57e:	46a1      	mov	r9, r4
 800a580:	f1b9 0f00 	cmp.w	r9, #0
 800a584:	f1a5 0508 	sub.w	r5, r5, #8
 800a588:	dc77      	bgt.n	800a67a <__kernel_rem_pio2+0x202>
 800a58a:	ec47 6b10 	vmov	d0, r6, r7
 800a58e:	4650      	mov	r0, sl
 800a590:	f000 fc12 	bl	800adb8 <scalbn>
 800a594:	ec57 6b10 	vmov	r6, r7, d0
 800a598:	2200      	movs	r2, #0
 800a59a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a59e:	ee10 0a10 	vmov	r0, s0
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f6 f830 	bl	8000608 <__aeabi_dmul>
 800a5a8:	ec41 0b10 	vmov	d0, r0, r1
 800a5ac:	f000 fb7c 	bl	800aca8 <floor>
 800a5b0:	4b7c      	ldr	r3, [pc, #496]	; (800a7a4 <__kernel_rem_pio2+0x32c>)
 800a5b2:	ec51 0b10 	vmov	r0, r1, d0
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f7f6 f826 	bl	8000608 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f5 fe68 	bl	8000298 <__aeabi_dsub>
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	f7f6 facc 	bl	8000b68 <__aeabi_d2iz>
 800a5d0:	9004      	str	r0, [sp, #16]
 800a5d2:	f7f5 ffaf 	bl	8000534 <__aeabi_i2d>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4630      	mov	r0, r6
 800a5dc:	4639      	mov	r1, r7
 800a5de:	f7f5 fe5b 	bl	8000298 <__aeabi_dsub>
 800a5e2:	f1ba 0f00 	cmp.w	sl, #0
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	460f      	mov	r7, r1
 800a5ea:	dd6d      	ble.n	800a6c8 <__kernel_rem_pio2+0x250>
 800a5ec:	1e62      	subs	r2, r4, #1
 800a5ee:	ab0e      	add	r3, sp, #56	; 0x38
 800a5f0:	9d04      	ldr	r5, [sp, #16]
 800a5f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a5f6:	f1ca 0118 	rsb	r1, sl, #24
 800a5fa:	fa40 f301 	asr.w	r3, r0, r1
 800a5fe:	441d      	add	r5, r3
 800a600:	408b      	lsls	r3, r1
 800a602:	1ac0      	subs	r0, r0, r3
 800a604:	ab0e      	add	r3, sp, #56	; 0x38
 800a606:	9504      	str	r5, [sp, #16]
 800a608:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a60c:	f1ca 0317 	rsb	r3, sl, #23
 800a610:	fa40 fb03 	asr.w	fp, r0, r3
 800a614:	f1bb 0f00 	cmp.w	fp, #0
 800a618:	dd65      	ble.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a61a:	9b04      	ldr	r3, [sp, #16]
 800a61c:	2200      	movs	r2, #0
 800a61e:	3301      	adds	r3, #1
 800a620:	9304      	str	r3, [sp, #16]
 800a622:	4615      	mov	r5, r2
 800a624:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a628:	4294      	cmp	r4, r2
 800a62a:	f300 809c 	bgt.w	800a766 <__kernel_rem_pio2+0x2ee>
 800a62e:	f1ba 0f00 	cmp.w	sl, #0
 800a632:	dd07      	ble.n	800a644 <__kernel_rem_pio2+0x1cc>
 800a634:	f1ba 0f01 	cmp.w	sl, #1
 800a638:	f000 80c0 	beq.w	800a7bc <__kernel_rem_pio2+0x344>
 800a63c:	f1ba 0f02 	cmp.w	sl, #2
 800a640:	f000 80c6 	beq.w	800a7d0 <__kernel_rem_pio2+0x358>
 800a644:	f1bb 0f02 	cmp.w	fp, #2
 800a648:	d14d      	bne.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a64a:	4632      	mov	r2, r6
 800a64c:	463b      	mov	r3, r7
 800a64e:	4956      	ldr	r1, [pc, #344]	; (800a7a8 <__kernel_rem_pio2+0x330>)
 800a650:	2000      	movs	r0, #0
 800a652:	f7f5 fe21 	bl	8000298 <__aeabi_dsub>
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	2d00      	cmp	r5, #0
 800a65c:	d043      	beq.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a65e:	4650      	mov	r0, sl
 800a660:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a798 <__kernel_rem_pio2+0x320>
 800a664:	f000 fba8 	bl	800adb8 <scalbn>
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	ec53 2b10 	vmov	r2, r3, d0
 800a670:	f7f5 fe12 	bl	8000298 <__aeabi_dsub>
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	e035      	b.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a67a:	4b4c      	ldr	r3, [pc, #304]	; (800a7ac <__kernel_rem_pio2+0x334>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	4630      	mov	r0, r6
 800a680:	4639      	mov	r1, r7
 800a682:	f7f5 ffc1 	bl	8000608 <__aeabi_dmul>
 800a686:	f7f6 fa6f 	bl	8000b68 <__aeabi_d2iz>
 800a68a:	f7f5 ff53 	bl	8000534 <__aeabi_i2d>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	ec43 2b18 	vmov	d8, r2, r3
 800a696:	4b46      	ldr	r3, [pc, #280]	; (800a7b0 <__kernel_rem_pio2+0x338>)
 800a698:	2200      	movs	r2, #0
 800a69a:	f7f5 ffb5 	bl	8000608 <__aeabi_dmul>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	f7f5 fdf7 	bl	8000298 <__aeabi_dsub>
 800a6aa:	f7f6 fa5d 	bl	8000b68 <__aeabi_d2iz>
 800a6ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6b2:	f84b 0b04 	str.w	r0, [fp], #4
 800a6b6:	ec51 0b18 	vmov	r0, r1, d8
 800a6ba:	f7f5 fdef 	bl	800029c <__adddf3>
 800a6be:	f109 39ff 	add.w	r9, r9, #4294967295
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	e75b      	b.n	800a580 <__kernel_rem_pio2+0x108>
 800a6c8:	d106      	bne.n	800a6d8 <__kernel_rem_pio2+0x260>
 800a6ca:	1e63      	subs	r3, r4, #1
 800a6cc:	aa0e      	add	r2, sp, #56	; 0x38
 800a6ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a6d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a6d6:	e79d      	b.n	800a614 <__kernel_rem_pio2+0x19c>
 800a6d8:	4b36      	ldr	r3, [pc, #216]	; (800a7b4 <__kernel_rem_pio2+0x33c>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f7f6 fa1a 	bl	8000b14 <__aeabi_dcmpge>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d13d      	bne.n	800a760 <__kernel_rem_pio2+0x2e8>
 800a6e4:	4683      	mov	fp, r0
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	f7f6 f9f3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	f000 80c0 	beq.w	800a878 <__kernel_rem_pio2+0x400>
 800a6f8:	1e65      	subs	r5, r4, #1
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	9902      	ldr	r1, [sp, #8]
 800a700:	428b      	cmp	r3, r1
 800a702:	da6c      	bge.n	800a7de <__kernel_rem_pio2+0x366>
 800a704:	2a00      	cmp	r2, #0
 800a706:	f000 8089 	beq.w	800a81c <__kernel_rem_pio2+0x3a4>
 800a70a:	ab0e      	add	r3, sp, #56	; 0x38
 800a70c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a710:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 80ad 	beq.w	800a874 <__kernel_rem_pio2+0x3fc>
 800a71a:	4650      	mov	r0, sl
 800a71c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a798 <__kernel_rem_pio2+0x320>
 800a720:	f000 fb4a 	bl	800adb8 <scalbn>
 800a724:	ab9a      	add	r3, sp, #616	; 0x268
 800a726:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a72a:	ec57 6b10 	vmov	r6, r7, d0
 800a72e:	00ec      	lsls	r4, r5, #3
 800a730:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a734:	46aa      	mov	sl, r5
 800a736:	f1ba 0f00 	cmp.w	sl, #0
 800a73a:	f280 80d6 	bge.w	800a8ea <__kernel_rem_pio2+0x472>
 800a73e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a790 <__kernel_rem_pio2+0x318>
 800a742:	462e      	mov	r6, r5
 800a744:	2e00      	cmp	r6, #0
 800a746:	f2c0 8104 	blt.w	800a952 <__kernel_rem_pio2+0x4da>
 800a74a:	ab72      	add	r3, sp, #456	; 0x1c8
 800a74c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a750:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a7b8 <__kernel_rem_pio2+0x340>
 800a754:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a758:	f04f 0800 	mov.w	r8, #0
 800a75c:	1baf      	subs	r7, r5, r6
 800a75e:	e0ea      	b.n	800a936 <__kernel_rem_pio2+0x4be>
 800a760:	f04f 0b02 	mov.w	fp, #2
 800a764:	e759      	b.n	800a61a <__kernel_rem_pio2+0x1a2>
 800a766:	f8d8 3000 	ldr.w	r3, [r8]
 800a76a:	b955      	cbnz	r5, 800a782 <__kernel_rem_pio2+0x30a>
 800a76c:	b123      	cbz	r3, 800a778 <__kernel_rem_pio2+0x300>
 800a76e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a772:	f8c8 3000 	str.w	r3, [r8]
 800a776:	2301      	movs	r3, #1
 800a778:	3201      	adds	r2, #1
 800a77a:	f108 0804 	add.w	r8, r8, #4
 800a77e:	461d      	mov	r5, r3
 800a780:	e752      	b.n	800a628 <__kernel_rem_pio2+0x1b0>
 800a782:	1acb      	subs	r3, r1, r3
 800a784:	f8c8 3000 	str.w	r3, [r8]
 800a788:	462b      	mov	r3, r5
 800a78a:	e7f5      	b.n	800a778 <__kernel_rem_pio2+0x300>
 800a78c:	f3af 8000 	nop.w
	...
 800a79c:	3ff00000 	.word	0x3ff00000
 800a7a0:	0800c470 	.word	0x0800c470
 800a7a4:	40200000 	.word	0x40200000
 800a7a8:	3ff00000 	.word	0x3ff00000
 800a7ac:	3e700000 	.word	0x3e700000
 800a7b0:	41700000 	.word	0x41700000
 800a7b4:	3fe00000 	.word	0x3fe00000
 800a7b8:	0800c430 	.word	0x0800c430
 800a7bc:	1e62      	subs	r2, r4, #1
 800a7be:	ab0e      	add	r3, sp, #56	; 0x38
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a7c8:	a90e      	add	r1, sp, #56	; 0x38
 800a7ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a7ce:	e739      	b.n	800a644 <__kernel_rem_pio2+0x1cc>
 800a7d0:	1e62      	subs	r2, r4, #1
 800a7d2:	ab0e      	add	r3, sp, #56	; 0x38
 800a7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a7dc:	e7f4      	b.n	800a7c8 <__kernel_rem_pio2+0x350>
 800a7de:	a90e      	add	r1, sp, #56	; 0x38
 800a7e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	e789      	b.n	800a6fe <__kernel_rem_pio2+0x286>
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a7f0:	2900      	cmp	r1, #0
 800a7f2:	d0fa      	beq.n	800a7ea <__kernel_rem_pio2+0x372>
 800a7f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a7fa:	446a      	add	r2, sp
 800a7fc:	3a98      	subs	r2, #152	; 0x98
 800a7fe:	920a      	str	r2, [sp, #40]	; 0x28
 800a800:	9a08      	ldr	r2, [sp, #32]
 800a802:	18e3      	adds	r3, r4, r3
 800a804:	18a5      	adds	r5, r4, r2
 800a806:	aa22      	add	r2, sp, #136	; 0x88
 800a808:	f104 0801 	add.w	r8, r4, #1
 800a80c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	9b04      	ldr	r3, [sp, #16]
 800a814:	4543      	cmp	r3, r8
 800a816:	da04      	bge.n	800a822 <__kernel_rem_pio2+0x3aa>
 800a818:	461c      	mov	r4, r3
 800a81a:	e6a3      	b.n	800a564 <__kernel_rem_pio2+0xec>
 800a81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a81e:	2301      	movs	r3, #1
 800a820:	e7e4      	b.n	800a7ec <__kernel_rem_pio2+0x374>
 800a822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a824:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a828:	f7f5 fe84 	bl	8000534 <__aeabi_i2d>
 800a82c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a832:	46ab      	mov	fp, r5
 800a834:	461c      	mov	r4, r3
 800a836:	f04f 0900 	mov.w	r9, #0
 800a83a:	2600      	movs	r6, #0
 800a83c:	2700      	movs	r7, #0
 800a83e:	9b06      	ldr	r3, [sp, #24]
 800a840:	4599      	cmp	r9, r3
 800a842:	dd06      	ble.n	800a852 <__kernel_rem_pio2+0x3da>
 800a844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a846:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a84a:	f108 0801 	add.w	r8, r8, #1
 800a84e:	930a      	str	r3, [sp, #40]	; 0x28
 800a850:	e7df      	b.n	800a812 <__kernel_rem_pio2+0x39a>
 800a852:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a856:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a85a:	f7f5 fed5 	bl	8000608 <__aeabi_dmul>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f7f5 fd19 	bl	800029c <__adddf3>
 800a86a:	f109 0901 	add.w	r9, r9, #1
 800a86e:	4606      	mov	r6, r0
 800a870:	460f      	mov	r7, r1
 800a872:	e7e4      	b.n	800a83e <__kernel_rem_pio2+0x3c6>
 800a874:	3d01      	subs	r5, #1
 800a876:	e748      	b.n	800a70a <__kernel_rem_pio2+0x292>
 800a878:	ec47 6b10 	vmov	d0, r6, r7
 800a87c:	f1ca 0000 	rsb	r0, sl, #0
 800a880:	f000 fa9a 	bl	800adb8 <scalbn>
 800a884:	ec57 6b10 	vmov	r6, r7, d0
 800a888:	4ba0      	ldr	r3, [pc, #640]	; (800ab0c <__kernel_rem_pio2+0x694>)
 800a88a:	ee10 0a10 	vmov	r0, s0
 800a88e:	2200      	movs	r2, #0
 800a890:	4639      	mov	r1, r7
 800a892:	f7f6 f93f 	bl	8000b14 <__aeabi_dcmpge>
 800a896:	b1f8      	cbz	r0, 800a8d8 <__kernel_rem_pio2+0x460>
 800a898:	4b9d      	ldr	r3, [pc, #628]	; (800ab10 <__kernel_rem_pio2+0x698>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f5 feb2 	bl	8000608 <__aeabi_dmul>
 800a8a4:	f7f6 f960 	bl	8000b68 <__aeabi_d2iz>
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	f7f5 fe43 	bl	8000534 <__aeabi_i2d>
 800a8ae:	4b97      	ldr	r3, [pc, #604]	; (800ab0c <__kernel_rem_pio2+0x694>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f7f5 fea9 	bl	8000608 <__aeabi_dmul>
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7f5 fceb 	bl	8000298 <__aeabi_dsub>
 800a8c2:	f7f6 f951 	bl	8000b68 <__aeabi_d2iz>
 800a8c6:	1c65      	adds	r5, r4, #1
 800a8c8:	ab0e      	add	r3, sp, #56	; 0x38
 800a8ca:	f10a 0a18 	add.w	sl, sl, #24
 800a8ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a8d6:	e720      	b.n	800a71a <__kernel_rem_pio2+0x2a2>
 800a8d8:	4630      	mov	r0, r6
 800a8da:	4639      	mov	r1, r7
 800a8dc:	f7f6 f944 	bl	8000b68 <__aeabi_d2iz>
 800a8e0:	ab0e      	add	r3, sp, #56	; 0x38
 800a8e2:	4625      	mov	r5, r4
 800a8e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8e8:	e717      	b.n	800a71a <__kernel_rem_pio2+0x2a2>
 800a8ea:	ab0e      	add	r3, sp, #56	; 0x38
 800a8ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a8f0:	f7f5 fe20 	bl	8000534 <__aeabi_i2d>
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	f7f5 fe86 	bl	8000608 <__aeabi_dmul>
 800a8fc:	4b84      	ldr	r3, [pc, #528]	; (800ab10 <__kernel_rem_pio2+0x698>)
 800a8fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a902:	2200      	movs	r2, #0
 800a904:	4630      	mov	r0, r6
 800a906:	4639      	mov	r1, r7
 800a908:	f7f5 fe7e 	bl	8000608 <__aeabi_dmul>
 800a90c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	e70f      	b.n	800a736 <__kernel_rem_pio2+0x2be>
 800a916:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a91a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a91e:	f7f5 fe73 	bl	8000608 <__aeabi_dmul>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a92a:	f7f5 fcb7 	bl	800029c <__adddf3>
 800a92e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a932:	f108 0801 	add.w	r8, r8, #1
 800a936:	9b02      	ldr	r3, [sp, #8]
 800a938:	4598      	cmp	r8, r3
 800a93a:	dc01      	bgt.n	800a940 <__kernel_rem_pio2+0x4c8>
 800a93c:	45b8      	cmp	r8, r7
 800a93e:	ddea      	ble.n	800a916 <__kernel_rem_pio2+0x49e>
 800a940:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a944:	ab4a      	add	r3, sp, #296	; 0x128
 800a946:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a94a:	ed87 7b00 	vstr	d7, [r7]
 800a94e:	3e01      	subs	r6, #1
 800a950:	e6f8      	b.n	800a744 <__kernel_rem_pio2+0x2cc>
 800a952:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a954:	2b02      	cmp	r3, #2
 800a956:	dc0b      	bgt.n	800a970 <__kernel_rem_pio2+0x4f8>
 800a958:	2b00      	cmp	r3, #0
 800a95a:	dc35      	bgt.n	800a9c8 <__kernel_rem_pio2+0x550>
 800a95c:	d059      	beq.n	800aa12 <__kernel_rem_pio2+0x59a>
 800a95e:	9b04      	ldr	r3, [sp, #16]
 800a960:	f003 0007 	and.w	r0, r3, #7
 800a964:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a968:	ecbd 8b02 	vpop	{d8}
 800a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a970:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a972:	2b03      	cmp	r3, #3
 800a974:	d1f3      	bne.n	800a95e <__kernel_rem_pio2+0x4e6>
 800a976:	ab4a      	add	r3, sp, #296	; 0x128
 800a978:	4423      	add	r3, r4
 800a97a:	9306      	str	r3, [sp, #24]
 800a97c:	461c      	mov	r4, r3
 800a97e:	469a      	mov	sl, r3
 800a980:	9502      	str	r5, [sp, #8]
 800a982:	9b02      	ldr	r3, [sp, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f1aa 0a08 	sub.w	sl, sl, #8
 800a98a:	dc6b      	bgt.n	800aa64 <__kernel_rem_pio2+0x5ec>
 800a98c:	46aa      	mov	sl, r5
 800a98e:	f1ba 0f01 	cmp.w	sl, #1
 800a992:	f1a4 0408 	sub.w	r4, r4, #8
 800a996:	f300 8085 	bgt.w	800aaa4 <__kernel_rem_pio2+0x62c>
 800a99a:	9c06      	ldr	r4, [sp, #24]
 800a99c:	2000      	movs	r0, #0
 800a99e:	3408      	adds	r4, #8
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	2d01      	cmp	r5, #1
 800a9a4:	f300 809d 	bgt.w	800aae2 <__kernel_rem_pio2+0x66a>
 800a9a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a9ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a9b0:	f1bb 0f00 	cmp.w	fp, #0
 800a9b4:	f040 809b 	bne.w	800aaee <__kernel_rem_pio2+0x676>
 800a9b8:	9b01      	ldr	r3, [sp, #4]
 800a9ba:	e9c3 5600 	strd	r5, r6, [r3]
 800a9be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a9c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a9c6:	e7ca      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800a9c8:	3408      	adds	r4, #8
 800a9ca:	ab4a      	add	r3, sp, #296	; 0x128
 800a9cc:	441c      	add	r4, r3
 800a9ce:	462e      	mov	r6, r5
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	2e00      	cmp	r6, #0
 800a9d6:	da36      	bge.n	800aa46 <__kernel_rem_pio2+0x5ce>
 800a9d8:	f1bb 0f00 	cmp.w	fp, #0
 800a9dc:	d039      	beq.n	800aa52 <__kernel_rem_pio2+0x5da>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9e4:	9c01      	ldr	r4, [sp, #4]
 800a9e6:	e9c4 2300 	strd	r2, r3, [r4]
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a9f2:	f7f5 fc51 	bl	8000298 <__aeabi_dsub>
 800a9f6:	ae4c      	add	r6, sp, #304	; 0x130
 800a9f8:	2401      	movs	r4, #1
 800a9fa:	42a5      	cmp	r5, r4
 800a9fc:	da2c      	bge.n	800aa58 <__kernel_rem_pio2+0x5e0>
 800a9fe:	f1bb 0f00 	cmp.w	fp, #0
 800aa02:	d002      	beq.n	800aa0a <__kernel_rem_pio2+0x592>
 800aa04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa08:	4619      	mov	r1, r3
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aa10:	e7a5      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800aa12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800aa16:	eb0d 0403 	add.w	r4, sp, r3
 800aa1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aa1e:	2000      	movs	r0, #0
 800aa20:	2100      	movs	r1, #0
 800aa22:	2d00      	cmp	r5, #0
 800aa24:	da09      	bge.n	800aa3a <__kernel_rem_pio2+0x5c2>
 800aa26:	f1bb 0f00 	cmp.w	fp, #0
 800aa2a:	d002      	beq.n	800aa32 <__kernel_rem_pio2+0x5ba>
 800aa2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa30:	4619      	mov	r1, r3
 800aa32:	9b01      	ldr	r3, [sp, #4]
 800aa34:	e9c3 0100 	strd	r0, r1, [r3]
 800aa38:	e791      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800aa3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa3e:	f7f5 fc2d 	bl	800029c <__adddf3>
 800aa42:	3d01      	subs	r5, #1
 800aa44:	e7ed      	b.n	800aa22 <__kernel_rem_pio2+0x5aa>
 800aa46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa4a:	f7f5 fc27 	bl	800029c <__adddf3>
 800aa4e:	3e01      	subs	r6, #1
 800aa50:	e7c0      	b.n	800a9d4 <__kernel_rem_pio2+0x55c>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	e7c5      	b.n	800a9e4 <__kernel_rem_pio2+0x56c>
 800aa58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800aa5c:	f7f5 fc1e 	bl	800029c <__adddf3>
 800aa60:	3401      	adds	r4, #1
 800aa62:	e7ca      	b.n	800a9fa <__kernel_rem_pio2+0x582>
 800aa64:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800aa6c:	9b02      	ldr	r3, [sp, #8]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	9302      	str	r3, [sp, #8]
 800aa72:	4632      	mov	r2, r6
 800aa74:	463b      	mov	r3, r7
 800aa76:	4640      	mov	r0, r8
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f7f5 fc0f 	bl	800029c <__adddf3>
 800aa7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4640      	mov	r0, r8
 800aa88:	4649      	mov	r1, r9
 800aa8a:	f7f5 fc05 	bl	8000298 <__aeabi_dsub>
 800aa8e:	4632      	mov	r2, r6
 800aa90:	463b      	mov	r3, r7
 800aa92:	f7f5 fc03 	bl	800029c <__adddf3>
 800aa96:	ed9d 7b08 	vldr	d7, [sp, #32]
 800aa9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa9e:	ed8a 7b00 	vstr	d7, [sl]
 800aaa2:	e76e      	b.n	800a982 <__kernel_rem_pio2+0x50a>
 800aaa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aaa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800aaac:	4640      	mov	r0, r8
 800aaae:	4632      	mov	r2, r6
 800aab0:	463b      	mov	r3, r7
 800aab2:	4649      	mov	r1, r9
 800aab4:	f7f5 fbf2 	bl	800029c <__adddf3>
 800aab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4640      	mov	r0, r8
 800aac2:	4649      	mov	r1, r9
 800aac4:	f7f5 fbe8 	bl	8000298 <__aeabi_dsub>
 800aac8:	4632      	mov	r2, r6
 800aaca:	463b      	mov	r3, r7
 800aacc:	f7f5 fbe6 	bl	800029c <__adddf3>
 800aad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aad8:	ed84 7b00 	vstr	d7, [r4]
 800aadc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aae0:	e755      	b.n	800a98e <__kernel_rem_pio2+0x516>
 800aae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aae6:	f7f5 fbd9 	bl	800029c <__adddf3>
 800aaea:	3d01      	subs	r5, #1
 800aaec:	e759      	b.n	800a9a2 <__kernel_rem_pio2+0x52a>
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	9a01      	ldr	r2, [sp, #4]
 800aaf2:	601d      	str	r5, [r3, #0]
 800aaf4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aaf8:	605c      	str	r4, [r3, #4]
 800aafa:	609f      	str	r7, [r3, #8]
 800aafc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ab00:	60d3      	str	r3, [r2, #12]
 800ab02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab06:	6110      	str	r0, [r2, #16]
 800ab08:	6153      	str	r3, [r2, #20]
 800ab0a:	e728      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800ab0c:	41700000 	.word	0x41700000
 800ab10:	3e700000 	.word	0x3e700000
 800ab14:	00000000 	.word	0x00000000

0800ab18 <__kernel_sin>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	ed2d 8b04 	vpush	{d8-d9}
 800ab20:	eeb0 8a41 	vmov.f32	s16, s2
 800ab24:	eef0 8a61 	vmov.f32	s17, s3
 800ab28:	ec55 4b10 	vmov	r4, r5, d0
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab36:	9001      	str	r0, [sp, #4]
 800ab38:	da06      	bge.n	800ab48 <__kernel_sin+0x30>
 800ab3a:	ee10 0a10 	vmov	r0, s0
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f7f6 f812 	bl	8000b68 <__aeabi_d2iz>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d051      	beq.n	800abec <__kernel_sin+0xd4>
 800ab48:	4622      	mov	r2, r4
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f7f5 fd5a 	bl	8000608 <__aeabi_dmul>
 800ab54:	4682      	mov	sl, r0
 800ab56:	468b      	mov	fp, r1
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f7f5 fd52 	bl	8000608 <__aeabi_dmul>
 800ab64:	a341      	add	r3, pc, #260	; (adr r3, 800ac6c <__kernel_sin+0x154>)
 800ab66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	4689      	mov	r9, r1
 800ab6e:	4650      	mov	r0, sl
 800ab70:	4659      	mov	r1, fp
 800ab72:	f7f5 fd49 	bl	8000608 <__aeabi_dmul>
 800ab76:	a33f      	add	r3, pc, #252	; (adr r3, 800ac74 <__kernel_sin+0x15c>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 fb8c 	bl	8000298 <__aeabi_dsub>
 800ab80:	4652      	mov	r2, sl
 800ab82:	465b      	mov	r3, fp
 800ab84:	f7f5 fd40 	bl	8000608 <__aeabi_dmul>
 800ab88:	a33c      	add	r3, pc, #240	; (adr r3, 800ac7c <__kernel_sin+0x164>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	f7f5 fb85 	bl	800029c <__adddf3>
 800ab92:	4652      	mov	r2, sl
 800ab94:	465b      	mov	r3, fp
 800ab96:	f7f5 fd37 	bl	8000608 <__aeabi_dmul>
 800ab9a:	a33a      	add	r3, pc, #232	; (adr r3, 800ac84 <__kernel_sin+0x16c>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	f7f5 fb7a 	bl	8000298 <__aeabi_dsub>
 800aba4:	4652      	mov	r2, sl
 800aba6:	465b      	mov	r3, fp
 800aba8:	f7f5 fd2e 	bl	8000608 <__aeabi_dmul>
 800abac:	a337      	add	r3, pc, #220	; (adr r3, 800ac8c <__kernel_sin+0x174>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7f5 fb73 	bl	800029c <__adddf3>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	4606      	mov	r6, r0
 800abba:	460f      	mov	r7, r1
 800abbc:	b9eb      	cbnz	r3, 800abfa <__kernel_sin+0xe2>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4650      	mov	r0, sl
 800abc4:	4659      	mov	r1, fp
 800abc6:	f7f5 fd1f 	bl	8000608 <__aeabi_dmul>
 800abca:	a325      	add	r3, pc, #148	; (adr r3, 800ac60 <__kernel_sin+0x148>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 fb62 	bl	8000298 <__aeabi_dsub>
 800abd4:	4642      	mov	r2, r8
 800abd6:	464b      	mov	r3, r9
 800abd8:	f7f5 fd16 	bl	8000608 <__aeabi_dmul>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4620      	mov	r0, r4
 800abe2:	4629      	mov	r1, r5
 800abe4:	f7f5 fb5a 	bl	800029c <__adddf3>
 800abe8:	4604      	mov	r4, r0
 800abea:	460d      	mov	r5, r1
 800abec:	ec45 4b10 	vmov	d0, r4, r5
 800abf0:	b003      	add	sp, #12
 800abf2:	ecbd 8b04 	vpop	{d8-d9}
 800abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfa:	4b1b      	ldr	r3, [pc, #108]	; (800ac68 <__kernel_sin+0x150>)
 800abfc:	ec51 0b18 	vmov	r0, r1, d8
 800ac00:	2200      	movs	r2, #0
 800ac02:	f7f5 fd01 	bl	8000608 <__aeabi_dmul>
 800ac06:	4632      	mov	r2, r6
 800ac08:	ec41 0b19 	vmov	d9, r0, r1
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	4640      	mov	r0, r8
 800ac10:	4649      	mov	r1, r9
 800ac12:	f7f5 fcf9 	bl	8000608 <__aeabi_dmul>
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	ec51 0b19 	vmov	r0, r1, d9
 800ac1e:	f7f5 fb3b 	bl	8000298 <__aeabi_dsub>
 800ac22:	4652      	mov	r2, sl
 800ac24:	465b      	mov	r3, fp
 800ac26:	f7f5 fcef 	bl	8000608 <__aeabi_dmul>
 800ac2a:	ec53 2b18 	vmov	r2, r3, d8
 800ac2e:	f7f5 fb33 	bl	8000298 <__aeabi_dsub>
 800ac32:	a30b      	add	r3, pc, #44	; (adr r3, 800ac60 <__kernel_sin+0x148>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	4606      	mov	r6, r0
 800ac3a:	460f      	mov	r7, r1
 800ac3c:	4640      	mov	r0, r8
 800ac3e:	4649      	mov	r1, r9
 800ac40:	f7f5 fce2 	bl	8000608 <__aeabi_dmul>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f7f5 fb26 	bl	800029c <__adddf3>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4620      	mov	r0, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	f7f5 fb1e 	bl	8000298 <__aeabi_dsub>
 800ac5c:	e7c4      	b.n	800abe8 <__kernel_sin+0xd0>
 800ac5e:	bf00      	nop
 800ac60:	55555549 	.word	0x55555549
 800ac64:	3fc55555 	.word	0x3fc55555
 800ac68:	3fe00000 	.word	0x3fe00000
 800ac6c:	5acfd57c 	.word	0x5acfd57c
 800ac70:	3de5d93a 	.word	0x3de5d93a
 800ac74:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac78:	3e5ae5e6 	.word	0x3e5ae5e6
 800ac7c:	57b1fe7d 	.word	0x57b1fe7d
 800ac80:	3ec71de3 	.word	0x3ec71de3
 800ac84:	19c161d5 	.word	0x19c161d5
 800ac88:	3f2a01a0 	.word	0x3f2a01a0
 800ac8c:	1110f8a6 	.word	0x1110f8a6
 800ac90:	3f811111 	.word	0x3f811111

0800ac94 <fabs>:
 800ac94:	ec51 0b10 	vmov	r0, r1, d0
 800ac98:	ee10 2a10 	vmov	r2, s0
 800ac9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aca0:	ec43 2b10 	vmov	d0, r2, r3
 800aca4:	4770      	bx	lr
	...

0800aca8 <floor>:
 800aca8:	ec51 0b10 	vmov	r0, r1, d0
 800acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800acb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800acb8:	2e13      	cmp	r6, #19
 800acba:	ee10 5a10 	vmov	r5, s0
 800acbe:	ee10 8a10 	vmov	r8, s0
 800acc2:	460c      	mov	r4, r1
 800acc4:	dc32      	bgt.n	800ad2c <floor+0x84>
 800acc6:	2e00      	cmp	r6, #0
 800acc8:	da14      	bge.n	800acf4 <floor+0x4c>
 800acca:	a333      	add	r3, pc, #204	; (adr r3, 800ad98 <floor+0xf0>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7f5 fae4 	bl	800029c <__adddf3>
 800acd4:	2200      	movs	r2, #0
 800acd6:	2300      	movs	r3, #0
 800acd8:	f7f5 ff26 	bl	8000b28 <__aeabi_dcmpgt>
 800acdc:	b138      	cbz	r0, 800acee <floor+0x46>
 800acde:	2c00      	cmp	r4, #0
 800ace0:	da57      	bge.n	800ad92 <floor+0xea>
 800ace2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ace6:	431d      	orrs	r5, r3
 800ace8:	d001      	beq.n	800acee <floor+0x46>
 800acea:	4c2d      	ldr	r4, [pc, #180]	; (800ada0 <floor+0xf8>)
 800acec:	2500      	movs	r5, #0
 800acee:	4621      	mov	r1, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	e025      	b.n	800ad40 <floor+0x98>
 800acf4:	4f2b      	ldr	r7, [pc, #172]	; (800ada4 <floor+0xfc>)
 800acf6:	4137      	asrs	r7, r6
 800acf8:	ea01 0307 	and.w	r3, r1, r7
 800acfc:	4303      	orrs	r3, r0
 800acfe:	d01f      	beq.n	800ad40 <floor+0x98>
 800ad00:	a325      	add	r3, pc, #148	; (adr r3, 800ad98 <floor+0xf0>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f7f5 fac9 	bl	800029c <__adddf3>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f7f5 ff0b 	bl	8000b28 <__aeabi_dcmpgt>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d0eb      	beq.n	800acee <floor+0x46>
 800ad16:	2c00      	cmp	r4, #0
 800ad18:	bfbe      	ittt	lt
 800ad1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ad1e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ad22:	19a4      	addlt	r4, r4, r6
 800ad24:	ea24 0407 	bic.w	r4, r4, r7
 800ad28:	2500      	movs	r5, #0
 800ad2a:	e7e0      	b.n	800acee <floor+0x46>
 800ad2c:	2e33      	cmp	r6, #51	; 0x33
 800ad2e:	dd0b      	ble.n	800ad48 <floor+0xa0>
 800ad30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad34:	d104      	bne.n	800ad40 <floor+0x98>
 800ad36:	ee10 2a10 	vmov	r2, s0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	f7f5 faae 	bl	800029c <__adddf3>
 800ad40:	ec41 0b10 	vmov	d0, r0, r1
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ad4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad50:	fa23 f707 	lsr.w	r7, r3, r7
 800ad54:	4207      	tst	r7, r0
 800ad56:	d0f3      	beq.n	800ad40 <floor+0x98>
 800ad58:	a30f      	add	r3, pc, #60	; (adr r3, 800ad98 <floor+0xf0>)
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	f7f5 fa9d 	bl	800029c <__adddf3>
 800ad62:	2200      	movs	r2, #0
 800ad64:	2300      	movs	r3, #0
 800ad66:	f7f5 fedf 	bl	8000b28 <__aeabi_dcmpgt>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d0bf      	beq.n	800acee <floor+0x46>
 800ad6e:	2c00      	cmp	r4, #0
 800ad70:	da02      	bge.n	800ad78 <floor+0xd0>
 800ad72:	2e14      	cmp	r6, #20
 800ad74:	d103      	bne.n	800ad7e <floor+0xd6>
 800ad76:	3401      	adds	r4, #1
 800ad78:	ea25 0507 	bic.w	r5, r5, r7
 800ad7c:	e7b7      	b.n	800acee <floor+0x46>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ad84:	fa03 f606 	lsl.w	r6, r3, r6
 800ad88:	4435      	add	r5, r6
 800ad8a:	4545      	cmp	r5, r8
 800ad8c:	bf38      	it	cc
 800ad8e:	18e4      	addcc	r4, r4, r3
 800ad90:	e7f2      	b.n	800ad78 <floor+0xd0>
 800ad92:	2500      	movs	r5, #0
 800ad94:	462c      	mov	r4, r5
 800ad96:	e7aa      	b.n	800acee <floor+0x46>
 800ad98:	8800759c 	.word	0x8800759c
 800ad9c:	7e37e43c 	.word	0x7e37e43c
 800ada0:	bff00000 	.word	0xbff00000
 800ada4:	000fffff 	.word	0x000fffff

0800ada8 <nan>:
 800ada8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800adb0 <nan+0x8>
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	00000000 	.word	0x00000000
 800adb4:	7ff80000 	.word	0x7ff80000

0800adb8 <scalbn>:
 800adb8:	b570      	push	{r4, r5, r6, lr}
 800adba:	ec55 4b10 	vmov	r4, r5, d0
 800adbe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800adc2:	4606      	mov	r6, r0
 800adc4:	462b      	mov	r3, r5
 800adc6:	b99a      	cbnz	r2, 800adf0 <scalbn+0x38>
 800adc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800adcc:	4323      	orrs	r3, r4
 800adce:	d036      	beq.n	800ae3e <scalbn+0x86>
 800add0:	4b39      	ldr	r3, [pc, #228]	; (800aeb8 <scalbn+0x100>)
 800add2:	4629      	mov	r1, r5
 800add4:	ee10 0a10 	vmov	r0, s0
 800add8:	2200      	movs	r2, #0
 800adda:	f7f5 fc15 	bl	8000608 <__aeabi_dmul>
 800adde:	4b37      	ldr	r3, [pc, #220]	; (800aebc <scalbn+0x104>)
 800ade0:	429e      	cmp	r6, r3
 800ade2:	4604      	mov	r4, r0
 800ade4:	460d      	mov	r5, r1
 800ade6:	da10      	bge.n	800ae0a <scalbn+0x52>
 800ade8:	a32b      	add	r3, pc, #172	; (adr r3, 800ae98 <scalbn+0xe0>)
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	e03a      	b.n	800ae66 <scalbn+0xae>
 800adf0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800adf4:	428a      	cmp	r2, r1
 800adf6:	d10c      	bne.n	800ae12 <scalbn+0x5a>
 800adf8:	ee10 2a10 	vmov	r2, s0
 800adfc:	4620      	mov	r0, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7f5 fa4c 	bl	800029c <__adddf3>
 800ae04:	4604      	mov	r4, r0
 800ae06:	460d      	mov	r5, r1
 800ae08:	e019      	b.n	800ae3e <scalbn+0x86>
 800ae0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae0e:	460b      	mov	r3, r1
 800ae10:	3a36      	subs	r2, #54	; 0x36
 800ae12:	4432      	add	r2, r6
 800ae14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ae18:	428a      	cmp	r2, r1
 800ae1a:	dd08      	ble.n	800ae2e <scalbn+0x76>
 800ae1c:	2d00      	cmp	r5, #0
 800ae1e:	a120      	add	r1, pc, #128	; (adr r1, 800aea0 <scalbn+0xe8>)
 800ae20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae24:	da1c      	bge.n	800ae60 <scalbn+0xa8>
 800ae26:	a120      	add	r1, pc, #128	; (adr r1, 800aea8 <scalbn+0xf0>)
 800ae28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae2c:	e018      	b.n	800ae60 <scalbn+0xa8>
 800ae2e:	2a00      	cmp	r2, #0
 800ae30:	dd08      	ble.n	800ae44 <scalbn+0x8c>
 800ae32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae3e:	ec45 4b10 	vmov	d0, r4, r5
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae48:	da19      	bge.n	800ae7e <scalbn+0xc6>
 800ae4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae4e:	429e      	cmp	r6, r3
 800ae50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ae54:	dd0a      	ble.n	800ae6c <scalbn+0xb4>
 800ae56:	a112      	add	r1, pc, #72	; (adr r1, 800aea0 <scalbn+0xe8>)
 800ae58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e2      	bne.n	800ae26 <scalbn+0x6e>
 800ae60:	a30f      	add	r3, pc, #60	; (adr r3, 800aea0 <scalbn+0xe8>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	f7f5 fbcf 	bl	8000608 <__aeabi_dmul>
 800ae6a:	e7cb      	b.n	800ae04 <scalbn+0x4c>
 800ae6c:	a10a      	add	r1, pc, #40	; (adr r1, 800ae98 <scalbn+0xe0>)
 800ae6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0b8      	beq.n	800ade8 <scalbn+0x30>
 800ae76:	a10e      	add	r1, pc, #56	; (adr r1, 800aeb0 <scalbn+0xf8>)
 800ae78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7c:	e7b4      	b.n	800ade8 <scalbn+0x30>
 800ae7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae82:	3236      	adds	r2, #54	; 0x36
 800ae84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <scalbn+0x108>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	e7e8      	b.n	800ae66 <scalbn+0xae>
 800ae94:	f3af 8000 	nop.w
 800ae98:	c2f8f359 	.word	0xc2f8f359
 800ae9c:	01a56e1f 	.word	0x01a56e1f
 800aea0:	8800759c 	.word	0x8800759c
 800aea4:	7e37e43c 	.word	0x7e37e43c
 800aea8:	8800759c 	.word	0x8800759c
 800aeac:	fe37e43c 	.word	0xfe37e43c
 800aeb0:	c2f8f359 	.word	0xc2f8f359
 800aeb4:	81a56e1f 	.word	0x81a56e1f
 800aeb8:	43500000 	.word	0x43500000
 800aebc:	ffff3cb0 	.word	0xffff3cb0
 800aec0:	3c900000 	.word	0x3c900000

0800aec4 <atanf>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	ee10 5a10 	vmov	r5, s0
 800aeca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800aece:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800aed2:	eef0 7a40 	vmov.f32	s15, s0
 800aed6:	db10      	blt.n	800aefa <atanf+0x36>
 800aed8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800aedc:	dd04      	ble.n	800aee8 <atanf+0x24>
 800aede:	ee70 7a00 	vadd.f32	s15, s0, s0
 800aee2:	eeb0 0a67 	vmov.f32	s0, s15
 800aee6:	bd38      	pop	{r3, r4, r5, pc}
 800aee8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b020 <atanf+0x15c>
 800aeec:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800b024 <atanf+0x160>
 800aef0:	2d00      	cmp	r5, #0
 800aef2:	bfd8      	it	le
 800aef4:	eef0 7a40 	vmovle.f32	s15, s0
 800aef8:	e7f3      	b.n	800aee2 <atanf+0x1e>
 800aefa:	4b4b      	ldr	r3, [pc, #300]	; (800b028 <atanf+0x164>)
 800aefc:	429c      	cmp	r4, r3
 800aefe:	dc10      	bgt.n	800af22 <atanf+0x5e>
 800af00:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800af04:	da0a      	bge.n	800af1c <atanf+0x58>
 800af06:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b02c <atanf+0x168>
 800af0a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800af0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af12:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800af16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1a:	dce2      	bgt.n	800aee2 <atanf+0x1e>
 800af1c:	f04f 33ff 	mov.w	r3, #4294967295
 800af20:	e013      	b.n	800af4a <atanf+0x86>
 800af22:	f000 f8a3 	bl	800b06c <fabsf>
 800af26:	4b42      	ldr	r3, [pc, #264]	; (800b030 <atanf+0x16c>)
 800af28:	429c      	cmp	r4, r3
 800af2a:	dc4f      	bgt.n	800afcc <atanf+0x108>
 800af2c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800af30:	429c      	cmp	r4, r3
 800af32:	dc41      	bgt.n	800afb8 <atanf+0xf4>
 800af34:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800af38:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800af3c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800af40:	2300      	movs	r3, #0
 800af42:	ee30 0a27 	vadd.f32	s0, s0, s15
 800af46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800af50:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b034 <atanf+0x170>
 800af54:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b038 <atanf+0x174>
 800af58:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b03c <atanf+0x178>
 800af5c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800af60:	eee6 5a87 	vfma.f32	s11, s13, s14
 800af64:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b040 <atanf+0x17c>
 800af68:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800af6c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b044 <atanf+0x180>
 800af70:	eee7 5a26 	vfma.f32	s11, s14, s13
 800af74:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b048 <atanf+0x184>
 800af78:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800af7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b04c <atanf+0x188>
 800af80:	eee7 5a26 	vfma.f32	s11, s14, s13
 800af84:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b050 <atanf+0x18c>
 800af88:	eea6 5a87 	vfma.f32	s10, s13, s14
 800af8c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b054 <atanf+0x190>
 800af90:	eea5 7a26 	vfma.f32	s14, s10, s13
 800af94:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b058 <atanf+0x194>
 800af98:	eea7 5a26 	vfma.f32	s10, s14, s13
 800af9c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b05c <atanf+0x198>
 800afa0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800afa4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800afa8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800afac:	ee27 7a87 	vmul.f32	s14, s15, s14
 800afb0:	d121      	bne.n	800aff6 <atanf+0x132>
 800afb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afb6:	e794      	b.n	800aee2 <atanf+0x1e>
 800afb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800afbc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800afc0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800afc4:	2301      	movs	r3, #1
 800afc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800afca:	e7be      	b.n	800af4a <atanf+0x86>
 800afcc:	4b24      	ldr	r3, [pc, #144]	; (800b060 <atanf+0x19c>)
 800afce:	429c      	cmp	r4, r3
 800afd0:	dc0b      	bgt.n	800afea <atanf+0x126>
 800afd2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800afd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afda:	eea0 7a27 	vfma.f32	s14, s0, s15
 800afde:	2302      	movs	r3, #2
 800afe0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800afe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afe8:	e7af      	b.n	800af4a <atanf+0x86>
 800afea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800afee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800aff2:	2303      	movs	r3, #3
 800aff4:	e7a9      	b.n	800af4a <atanf+0x86>
 800aff6:	4a1b      	ldr	r2, [pc, #108]	; (800b064 <atanf+0x1a0>)
 800aff8:	491b      	ldr	r1, [pc, #108]	; (800b068 <atanf+0x1a4>)
 800affa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800affe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b002:	ed93 0a00 	vldr	s0, [r3]
 800b006:	ee37 7a40 	vsub.f32	s14, s14, s0
 800b00a:	ed92 0a00 	vldr	s0, [r2]
 800b00e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b012:	2d00      	cmp	r5, #0
 800b014:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b018:	bfb8      	it	lt
 800b01a:	eef1 7a67 	vneglt.f32	s15, s15
 800b01e:	e760      	b.n	800aee2 <atanf+0x1e>
 800b020:	3fc90fdb 	.word	0x3fc90fdb
 800b024:	bfc90fdb 	.word	0xbfc90fdb
 800b028:	3edfffff 	.word	0x3edfffff
 800b02c:	7149f2ca 	.word	0x7149f2ca
 800b030:	3f97ffff 	.word	0x3f97ffff
 800b034:	3c8569d7 	.word	0x3c8569d7
 800b038:	3d4bda59 	.word	0x3d4bda59
 800b03c:	bd6ef16b 	.word	0xbd6ef16b
 800b040:	3d886b35 	.word	0x3d886b35
 800b044:	3dba2e6e 	.word	0x3dba2e6e
 800b048:	3e124925 	.word	0x3e124925
 800b04c:	3eaaaaab 	.word	0x3eaaaaab
 800b050:	bd15a221 	.word	0xbd15a221
 800b054:	bd9d8795 	.word	0xbd9d8795
 800b058:	bde38e38 	.word	0xbde38e38
 800b05c:	be4ccccd 	.word	0xbe4ccccd
 800b060:	401bffff 	.word	0x401bffff
 800b064:	0800c480 	.word	0x0800c480
 800b068:	0800c490 	.word	0x0800c490

0800b06c <fabsf>:
 800b06c:	ee10 3a10 	vmov	r3, s0
 800b070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b074:	ee00 3a10 	vmov	s0, r3
 800b078:	4770      	bx	lr
	...

0800b07c <_init>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	bf00      	nop
 800b080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b082:	bc08      	pop	{r3}
 800b084:	469e      	mov	lr, r3
 800b086:	4770      	bx	lr

0800b088 <_fini>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	bf00      	nop
 800b08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b08e:	bc08      	pop	{r3}
 800b090:	469e      	mov	lr, r3
 800b092:	4770      	bx	lr
